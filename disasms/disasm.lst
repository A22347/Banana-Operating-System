
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5f fb 00 00       	call   c000fb7f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 72 02 c0       	mov    eax,0xc0027228
c0000025:	3d 28 72 02 c0       	cmp    eax,0xc0027228
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 72 02 c0       	push   0xc0027228
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 72 02 c0       	mov    eax,0xc0027228
c0000051:	2d 28 72 02 c0       	sub    eax,0xc0027228
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 72 02 c0       	push   0xc0027228
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c0 2c 02 c0       	mov    ebx,0xc0022cc0
c0000097:	81 eb bc 2c 02 c0    	sub    ebx,0xc0022cbc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be bc 2c 02 c0       	mov    esi,0xc0022cbc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 72 02 c0       	push   0xc0027228
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 28 72 02 c0       	push   0xc0027228
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 5c 01 00       	call   c0015f88 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 45 41 01 00       	call   c001440a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 5c 01 00       	call   c0015f88 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1a 62 01 00       	call   c0016508 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 95 67 01 00       	call   c0016a8c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 d1 02 c0 	lgdtd  ds:0xc002d118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 1e ec 00 00       	jmp    c000ef9d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 2c 02 c0 02 	test   BYTE PTR [edx-0x3ffdd320],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 2c 02 c0 01 	test   BYTE PTR [edx-0x3ffdd320],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 2c 02 c0 08 	test   BYTE PTR [edx-0x3ffdd320],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 2c 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd320],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 2c 02 c0 01 	test   BYTE PTR [edx-0x3ffdd320],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 69 e9 00 00       	call   c000f7c9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 76 e8 00 00       	call   c000f76b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 55 e7 00 00       	call   c000f735 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 50 e7 00 00       	call   c000f76b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 fc e5 00 00       	call   c000f735 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 e2 e5 00 00       	call   c000f735 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 b8 e5 00 00       	call   c000f735 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 2d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd21c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 dd a9 01 00       	jmp    c001c968 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 07 aa 01 00       	jmp    c001c9a8 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 28 aa 01 00       	jmp    c001c9e8 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 2f 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd0c0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd0c0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba fc 5d 02 c0       	mov    edx,0xc0025dfc
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 2d 02 c0       	mov    edx,0xc0022dfc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 2e 02 c0       	mov    eax,0xc0022e02
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 2e 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd140]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 2e 02 c0       	mov    eax,0xc0022e0b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd0c0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 2e 02 c0       	mov    eax,0xc0022e90
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 2e 02 c0       	mov    ebx,0xc0022e80
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 2e 02 c0       	mov    eax,0xc0022e70
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 2e 02 c0       	mov    edx,0xc0022e12
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 2e 02 c0       	mov    edx,0xc0022e1e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 2e 02 c0       	mov    edx,0xc0022e32
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 34 9a 00 00       	call   c000f84b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 2c 9a 00 00       	call   c000f85b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 32 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023260
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023260
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 33 02 c0       	push   0xc0023360
c0006303:	e8 fc 6f 01 00       	call   c001d304 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 33 02 c0       	push   0xc002336e
c000633b:	e8 c4 6f 01 00       	call   c001d304 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 2d 6f 01 00       	call   c001d2a8 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 33 02 c0       	push   0xc002337d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 33 02 c0       	push   0xc0023380
c00069fa:	e8 05 69 01 00       	call   c001d304 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 19 69 01 00       	call   c001d320 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 33 02 c0 	mov    DWORD PTR [esp],0xc0023385
c0006a14:	e8 eb 68 01 00       	call   c001d304 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 fb 68 01 00       	call   c001d320 <iso_kprintfd>
c0006a25:	c7 04 24 8b 33 02 c0 	mov    DWORD PTR [esp],0xc002338b
c0006a2c:	e8 d3 68 01 00       	call   c001d304 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 e3 68 01 00       	call   c001d320 <iso_kprintfd>
c0006a3d:	c7 04 24 91 33 02 c0 	mov    DWORD PTR [esp],0xc0023391
c0006a44:	e8 bb 68 01 00       	call   c001d304 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 cb 68 01 00       	call   c001d320 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 33 02 c0       	push   0xc002337d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 33 02 c0       	push   0xc002339a
c0006c19:	e8 e6 66 01 00       	call   c001d304 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 33 02 c0       	push   0xc00233a5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 33 02 c0       	push   0xc00233ac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 33 02 c0       	push   0xc00233b3
c0006d30:	e8 cf 65 01 00       	call   c001d304 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 33 02 c0       	push   0xc00233be
c0006d4b:	e8 b4 65 01 00       	call   c001d304 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 d1 8a 00 00       	call   c000f84b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 c0 8a 00 00       	call   c000f84b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 ab 8a 00 00       	call   c000f84b <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 92 8a 00 00       	call   c000f84b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 70 8a 00 00       	call   c000f85b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 62 8a 00 00       	call   c000f85b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 48 8a 00 00       	call   c000f85b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 33 8a 00 00       	call   c000f85b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 33 02 c0       	mov    esi,0xc00233d0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 33 02 c0       	mov    al,ds:0xc00233cf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 77 63 00 00       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 d3 62 00 00       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 18 34 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcbe8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 e0 33 02 c0       	push   0xc00233e0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 68 35 02 c0       	push   0xc0023568
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 7c 35 02 c0       	push   0xc002357c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 86 35 02 c0       	push   0xc0023586
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 90 35 02 c0       	push   0xc0023590
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 d4 36 02 c0       	push   0xc00236d4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 9a 35 02 c0       	push   0xc002359a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 f4 36 02 c0       	push   0xc00236f4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 af 35 02 c0       	push   0xc00235af
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 c9 35 02 c0       	push   0xc00235c9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 c0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9840]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 1c 37 02 c0       	push   0xc002371c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 d4 36 02 c0       	push   0xc00236d4
c000722c:	e8 6f 8a 00 00       	call   c000fca0 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 64 37 02 c0       	push   0xc0023764
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 64 37 02 c0       	push   0xc0023764
c000725b:	e8 40 8a 00 00       	call   c000fca0 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 d4 35 02 c0       	push   0xc00235d4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 d4 35 02 c0       	push   0xc00235d4
c0007287:	e8 14 8a 00 00       	call   c000fca0 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 f1 35 02 c0       	push   0xc00235f1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 f1 35 02 c0       	push   0xc00235f1
c00072b3:	e8 e8 89 00 00       	call   c000fca0 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 84 37 02 c0       	push   0xc0023784
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 84 37 02 c0       	push   0xc0023784
c00072df:	e8 bc 89 00 00       	call   c000fca0 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 a8 37 02 c0       	push   0xc00237a8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 a8 37 02 c0       	push   0xc00237a8
c000730b:	e8 90 89 00 00       	call   c000fca0 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 0d 36 02 c0       	push   0xc002360d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 0d 36 02 c0       	push   0xc002360d
c0007337:	e8 64 89 00 00       	call   c000fca0 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 29 36 02 c0       	push   0xc0023629
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 29 36 02 c0       	push   0xc0023629
c0007363:	e8 38 89 00 00       	call   c000fca0 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 c8 37 02 c0       	push   0xc00237c8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 c8 37 02 c0       	push   0xc00237c8
c000738f:	e8 0c 89 00 00       	call   c000fca0 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 ec 37 02 c0       	push   0xc00237ec
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 ec 37 02 c0       	push   0xc00237ec
c00073bb:	e8 e0 88 00 00       	call   c000fca0 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 29 84 00 00       	call   c000f84b <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000742d:	68 0b 38 02 c0       	push   0xc002380b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 29 38 02 c0       	push   0xc0023829
c0007447:	e8 54 88 00 00       	call   c000fca0 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 43 38 02 c0       	push   0xc0023843
c0007468:	e8 33 88 00 00       	call   c000fca0 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 5d 38 02 c0       	push   0xc002385d
c00074af:	e8 ec 87 00 00       	call   c000fca0 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 77 38 02 c0       	push   0xc0023877
c00074df:	e8 bc 87 00 00       	call   c000fca0 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 ec 6b 00 00       	call   c000e11d <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 35 91 00 00       	call   c0010680 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 91 38 02 c0       	push   0xc0023891
c0007584:	e8 17 87 00 00       	call   c000fca0 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 a3 02 c0       	push   0xc002a300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 93 5b 00 00       	call   c000d1fc <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 d6 81 00 00       	call   c000f84b <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007680:	68 0b 38 02 c0       	push   0xc002380b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 9a 38 02 c0       	push   0xc002389a
c000769a:	e8 01 86 00 00       	call   c000fca0 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 b7 38 02 c0       	push   0xc00238b7
c00076cb:	e8 d0 85 00 00       	call   c000fca0 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 d4 38 02 c0       	push   0xc00238d4
c0007705:	e8 96 85 00 00       	call   c000fca0 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077e8:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 47 80 00 00       	call   c000f84b <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000780f:	68 0b 38 02 c0       	push   0xc002380b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 ef 38 02 c0       	push   0xc00238ef
c0007829:	e8 72 84 00 00       	call   c000fca0 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 0a 39 02 c0       	push   0xc002390a
c000785c:	e8 3f 84 00 00       	call   c000fca0 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 20 7f 00 00       	call   c000f84b <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 96 7d 00 00       	call   c000f84b <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 25 39 02 c0       	mov    esi,0xc0023925
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 83 b2 00 00       	call   c0012fca <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 f1 55 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 35 b2 00 00       	call   c0012fca <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 a3 55 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba 90 39 02 c0       	mov    edx,0xc0023990
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba 90 39 02 c0       	mov    edx,0xc0023990
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 4d 55 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 f9 79 00 00       	call   c000f84b <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 aa 4c 01 00       	call   c001cb04 <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 e5 79 00 00       	call   c000f84b <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 c2 5b 01 00       	call   c001da30 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 1e 53 02 c0       	push   0xc002531e
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 2e 39 02 c0       	push   0xc002392e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 49 39 02 c0       	push   0xc0023949
c0008077:	e8 24 7c 00 00       	call   c000fca0 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 3e ad 00 00       	call   c0012de4 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 6f 39 02 c0       	push   0xc002396f
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 2e 28 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 29 24 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 7b 72 00 00       	call   c000f84b <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 68 a7 00 00       	call   c0012de4 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 86 22 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 34 3a 02 c0       	mov    edx,0xc0023a34
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 34 3a 02 c0       	mov    edx,0xc0023a34
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 81 49 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00089f8:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 0d e0 00 00       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 6b 22 01 00       	call   c001ac86 <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 bd de 00 00       	jmp    c00168e8 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 45 22 01 00       	call   c001ac86 <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 c5 df 00 00       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 1d 22 01 00       	jmp    c001ac86 <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0008a7a:	e8 dd da 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 a5 6d 00 00       	call   c000f84b <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 60 3a 02 c0       	push   0xc0023a60
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 7f 3a 02 c0       	push   0xc0023a7f
c0008ad3:	e8 c8 71 00 00       	call   c000fca0 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 95 3a 02 c0       	push   0xc0023a95
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 21 6d 00 00       	call   c000f84b <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 a5 3a 02 c0       	push   0xc0023aa5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 82 6c 00 00       	call   c000f84b <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ae 3a 02 c0       	push   0xc0023aae
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ae 3a 02 c0       	push   0xc0023aae
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ae 3a 02 c0       	push   0xc0023aae
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 b0 3a 02 c0       	push   0xc0023ab0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 c5 3a 02 c0       	push   0xc0023ac5
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 c9 3a 02 c0       	push   0xc0023ac9
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 ce 3a 02 c0       	push   0xc0023ace
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 dc 3a 02 c0       	push   0xc0023adc
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 e5 3a 02 c0       	push   0xc0023ae5
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 03 3b 02 c0       	push   0xc0023b03
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 14 3b 02 c0       	push   0xc0023b14
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 27 3b 02 c0       	push   0xc0023b27
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 34 3b 02 c0       	push   0xc0023b34
c0008fba:	e8 f9 43 00 00       	call   c000d3b8 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 59 3b 02 c0       	push   0xc0023b59
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 e3 4f 00 00       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 a3 48 00 00       	call   c000d88a <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 e1 44 00 00       	call   c000d4d6 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 34 3b 02 c0       	push   0xc0023b34
c0009054:	e8 5f 43 00 00       	call   c000d3b8 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 59 3b 02 c0       	push   0xc0023b59
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 49 4f 00 00       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 98 44 00 00       	call   c000d528 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 38 44 00 00       	call   c000d4d6 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba b8 3b 02 c0       	mov    edx,0xc0023bb8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba b8 3b 02 c0       	mov    edx,0xc0023bb8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 31 42 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 80 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc480]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 6e 3b 02 c0       	push   0xc0023b6e
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 84 89 01 00       	call   c0021ff4 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 65 8a 01 00       	call   c00220f4 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 ec 3b 02 c0       	push   0xc0023bec
c000994a:	e8 51 63 00 00       	call   c000fca0 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba 90 3c 02 c0       	mov    edx,0xc0023c90
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 e0 39 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 0a 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c0a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 0f 17 01 00       	jmp    c001b139 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 47 18 01 00       	jmp    c001b29b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 c8 5d 00 00       	call   c000f84b <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba 90 3c 02 c0       	mov    edx,0xc0023c90
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 28 5c 00 00       	call   c000f84b <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 44 3c 02 c0       	push   0xc0023c44
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba bc 3c 02 c0       	mov    edx,0xc0023cbc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 0e 85 01 00       	call   c002226c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 b8 85 01 00       	call   c0022348 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba e8 3c 02 c0       	mov    edx,0xc0023ce8
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba e8 3c 02 c0       	mov    edx,0xc0023ce8
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 39 35 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 14 3d 02 c0       	mov    edx,0xc0023d14
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 9d 59 00 00       	call   c000f84b <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 b7 13 00 00       	call   c000b270 <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 14 3d 02 c0       	mov    edx,0xc0023d14
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 57 34 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	83 ec 08             	sub    esp,0x8
c0009f1a:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0009f22:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009f27:	85 c0                	test   eax,eax
c0009f29:	75 01                	jne    c0009f2c <startGUI(void*)+0x18>
c0009f2b:	fb                   	sti    
c0009f2c:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f31:	83 ec 04             	sub    esp,0x4
c0009f34:	6a 00                	push   0x0
c0009f36:	50                   	push   eax
c0009f37:	68 44 3d 02 c0       	push   0xc0023d44
c0009f3c:	e8 4b bf 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f41:	83 c4 10             	add    esp,0x10
c0009f44:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f49:	83 ec 04             	sub    esp,0x4
c0009f4c:	6a 00                	push   0x0
c0009f4e:	50                   	push   eax
c0009f4f:	68 5e 3d 02 c0       	push   0xc0023d5e
c0009f54:	e8 33 bf 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	eb fe                	jmp    c0009f5c <startGUI(void*)+0x48>

c0009f5e <startGUIVESA(void*)>:
c0009f5e:	55                   	push   ebp
c0009f5f:	89 e5                	mov    ebp,esp
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0009f6c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009f71:	85 c0                	test   eax,eax
c0009f73:	75 01                	jne    c0009f76 <startGUIVESA(void*)+0x18>
c0009f75:	fb                   	sti    
c0009f76:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f7b:	83 ec 04             	sub    esp,0x4
c0009f7e:	6a 00                	push   0x0
c0009f80:	50                   	push   eax
c0009f81:	68 7c 3d 02 c0       	push   0xc0023d7c
c0009f86:	e8 01 bf 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f8b:	83 c4 10             	add    esp,0x10
c0009f8e:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f93:	83 ec 04             	sub    esp,0x4
c0009f96:	6a 00                	push   0x0
c0009f98:	50                   	push   eax
c0009f99:	68 5e 3d 02 c0       	push   0xc0023d5e
c0009f9e:	e8 e9 be 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	eb fe                	jmp    c0009fa6 <startGUIVESA(void*)+0x48>

c0009fa8 <sendKeyToTerminal(unsigned char)>:
c0009fa8:	55                   	push   ebp
c0009fa9:	89 e5                	mov    ebp,esp
c0009fab:	83 ec 28             	sub    esp,0x28
c0009fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fb1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fb4:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c0009fb9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	52                   	push   edx
c0009fc1:	50                   	push   eax
c0009fc2:	e8 91 89 00 00       	call   c0012958 <VgaText::receiveKey(unsigned char)>
c0009fc7:	83 c4 10             	add    esp,0x10
c0009fca:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fce:	83 f8 0a             	cmp    eax,0xa
c0009fd1:	74 16                	je     c0009fe9 <sendKeyToTerminal(unsigned char)+0x41>
c0009fd3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fd7:	83 f8 03             	cmp    eax,0x3
c0009fda:	74 0d                	je     c0009fe9 <sendKeyToTerminal(unsigned char)+0x41>
c0009fdc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fe0:	83 f8 1c             	cmp    eax,0x1c
c0009fe3:	0f 85 92 00 00 00    	jne    c000a07b <sendKeyToTerminal(unsigned char)+0xd3>
c0009fe9:	fa                   	cli    
c0009fea:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009fef:	83 c0 01             	add    eax,0x1
c0009ff2:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0009ff7:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0009ffc:	83 c0 01             	add    eax,0x1
c0009fff:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c000a004:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a009:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a00c:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a016:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a01a:	74 1f                	je     c000a03b <sendKeyToTerminal(unsigned char)+0x93>
c000a01c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a01f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a022:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a025:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a028:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a02b:	83 ec 0c             	sub    esp,0xc
c000a02e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a031:	e8 4e cb 00 00       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	eb db                	jmp    c000a016 <sendKeyToTerminal(unsigned char)+0x6e>
c000a03b:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c000a040:	83 e8 01             	sub    eax,0x1
c000a043:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c000a048:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c000a04d:	85 c0                	test   eax,eax
c000a04f:	75 18                	jne    c000a069 <sendKeyToTerminal(unsigned char)+0xc1>
c000a051:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c000a056:	85 c0                	test   eax,eax
c000a058:	74 0f                	je     c000a069 <sendKeyToTerminal(unsigned char)+0xc1>
c000a05a:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c000a064:	e8 bf c7 00 00       	call   c0016828 <schedule()>
c000a069:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000a071:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a076:	85 c0                	test   eax,eax
c000a078:	75 01                	jne    c000a07b <sendKeyToTerminal(unsigned char)+0xd3>
c000a07a:	fb                   	sti    
c000a07b:	90                   	nop
c000a07c:	c9                   	leave  
c000a07d:	c3                   	ret    

c000a07e <sendKeyboardToken(KeyboardToken)>:
c000a07e:	55                   	push   ebp
c000a07f:	89 e5                	mov    ebp,esp
c000a081:	83 ec 18             	sub    esp,0x18
c000a084:	e8 9c 64 00 00       	call   c0010525 <KeUserIOReceived()>
c000a089:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a08f:	0f b7 c0             	movzx  eax,ax
c000a092:	83 f2 01             	xor    edx,0x1
c000a095:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a09b:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0a0:	85 c0                	test   eax,eax
c000a0a2:	74 24                	je     c000a0c8 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0a4:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0aa:	83 ec 04             	sub    esp,0x4
c000a0ad:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0b2:	83 ec 08             	sub    esp,0x8
c000a0b5:	89 e2                	mov    edx,esp
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	89 02                	mov    DWORD PTR [edx],eax
c000a0bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0bf:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0c3:	ff d1                	call   ecx
c000a0c5:	83 c4 10             	add    esp,0x10
c000a0c8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0cc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0cf:	0f b6 c0             	movzx  eax,al
c000a0d2:	85 c0                	test   eax,eax
c000a0d4:	0f 84 da 00 00 00    	je     c000a1b4 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 18 03 00 00       	cmp    eax,0x318
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0e7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 19 03 00 00       	cmp    eax,0x319
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0x82>
c000a0fa:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0x95>
c000a10d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a120:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a133:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xce>
c000a146:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0xe1>
c000a159:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a16c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 20 03 00 00       	cmp    eax,0x320
c000a17d:	75 06                	jne    c000a185 <sendKeyboardToken(KeyboardToken)+0x107>
c000a17f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a188:	0f b7 c0             	movzx  eax,ax
c000a18b:	3d 21 03 00 00       	cmp    eax,0x321
c000a190:	75 06                	jne    c000a198 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a192:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a19b:	0f b7 c0             	movzx  eax,ax
c000a19e:	3d 22 03 00 00       	cmp    eax,0x322
c000a1a3:	0f 85 f1 00 00 00    	jne    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1a9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1af:	e9 e6 00 00 00       	jmp    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1b7:	0f b7 c0             	movzx  eax,ax
c000a1ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a1bf:	75 0a                	jne    c000a1cb <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1c1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ce:	0f b7 c0             	movzx  eax,ax
c000a1d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a1d6:	75 0a                	jne    c000a1e2 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1d8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e5:	0f b7 c0             	movzx  eax,ax
c000a1e8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1ed:	75 0a                	jne    c000a1f9 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1ef:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1fc:	0f b7 c0             	movzx  eax,ax
c000a1ff:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a204:	75 0a                	jne    c000a210 <sendKeyboardToken(KeyboardToken)+0x192>
c000a206:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a213:	0f b7 c0             	movzx  eax,ax
c000a216:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a21b:	75 0a                	jne    c000a227 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a21d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a22a:	0f b7 c0             	movzx  eax,ax
c000a22d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a232:	75 0a                	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a234:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a23a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a241:	0f b7 c0             	movzx  eax,ax
c000a244:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a249:	75 0a                	jne    c000a255 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a24b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a251:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a258:	0f b7 c0             	movzx  eax,ax
c000a25b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a260:	75 0a                	jne    c000a26c <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a262:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a268:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a26c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a26f:	0f b7 c0             	movzx  eax,ax
c000a272:	3d 20 03 00 00       	cmp    eax,0x320
c000a277:	75 0a                	jne    c000a283 <sendKeyboardToken(KeyboardToken)+0x205>
c000a279:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a27f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a286:	0f b7 c0             	movzx  eax,ax
c000a289:	3d 21 03 00 00       	cmp    eax,0x321
c000a28e:	75 0a                	jne    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a290:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a296:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a29a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a29d:	0f b7 c0             	movzx  eax,ax
c000a2a0:	3d 00 02 00 00       	cmp    eax,0x200
c000a2a5:	75 2f                	jne    c000a2d6 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2a7:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2ac:	83 f0 01             	xor    eax,0x1
c000a2af:	0f b6 c0             	movzx  eax,al
c000a2b2:	85 c0                	test   eax,eax
c000a2b4:	74 20                	je     c000a2d6 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2b6:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000a2bb:	6a 01                	push   0x1
c000a2bd:	6a 00                	push   0x0
c000a2bf:	68 14 9f 00 c0       	push   0xc0009f14
c000a2c4:	50                   	push   eax
c000a2c5:	e8 92 c2 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2d4:	eb 3a                	jmp    c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d9:	0f b7 c0             	movzx  eax,ax
c000a2dc:	3d 01 02 00 00       	cmp    eax,0x201
c000a2e1:	75 2d                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2e3:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2e8:	83 f0 01             	xor    eax,0x1
c000a2eb:	0f b6 c0             	movzx  eax,al
c000a2ee:	85 c0                	test   eax,eax
c000a2f0:	74 1e                	je     c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2f2:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000a2f7:	6a 01                	push   0x1
c000a2f9:	6a 00                	push   0x0
c000a2fb:	68 5e 9f 00 c0       	push   0xc0009f5e
c000a300:	50                   	push   eax
c000a301:	e8 56 c2 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c000a306:	83 c4 10             	add    esp,0x10
c000a309:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 25 03 00 00       	cmp    eax,0x325
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a31d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 24 03 00 00       	cmp    eax,0x324
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a330:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 23 03 00 00       	cmp    eax,0x323
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a343:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 26 03 00 00       	cmp    eax,0x326
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x2de>
c000a356:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a35c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35f:	0f b7 c0             	movzx  eax,ax
c000a362:	3d 27 03 00 00       	cmp    eax,0x327
c000a367:	75 06                	jne    c000a36f <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a369:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a372:	0f b7 c0             	movzx  eax,ax
c000a375:	3d 22 03 00 00       	cmp    eax,0x322
c000a37a:	75 06                	jne    c000a382 <sendKeyboardToken(KeyboardToken)+0x304>
c000a37c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a382:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a386:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a389:	83 f0 01             	xor    eax,0x1
c000a38c:	0f b6 c0             	movzx  eax,al
c000a38f:	85 c0                	test   eax,eax
c000a391:	74 7c                	je     c000a40f <sendKeyboardToken(KeyboardToken)+0x391>
c000a393:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a398:	0f b6 c0             	movzx  eax,al
c000a39b:	85 c0                	test   eax,eax
c000a39d:	74 43                	je     c000a3e2 <sendKeyboardToken(KeyboardToken)+0x364>
c000a39f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3a3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	74 2b                	je     c000a3d6 <sendKeyboardToken(KeyboardToken)+0x358>
c000a3ab:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3b1:	89 d0                	mov    eax,edx
c000a3b3:	c1 e0 02             	shl    eax,0x2
c000a3b6:	01 d0                	add    eax,edx
c000a3b8:	01 c0                	add    eax,eax
c000a3ba:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3c2:	0f b7 c0             	movzx  eax,ax
c000a3c5:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3c8:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3cd:	01 d0                	add    eax,edx
c000a3cf:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3d4:	eb 71                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3d6:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3e0:	eb 65                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e2:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3e7:	85 c0                	test   eax,eax
c000a3e9:	74 18                	je     c000a403 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3eb:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3f0:	0f b6 c0             	movzx  eax,al
c000a3f3:	83 ec 0c             	sub    esp,0xc
c000a3f6:	50                   	push   eax
c000a3f7:	e8 ac fb ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a3fc:	83 c4 10             	add    esp,0x10
c000a3ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a403:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a40d:	eb 38                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a412:	0f b7 c0             	movzx  eax,ax
c000a415:	3d 01 01 00 00       	cmp    eax,0x101
c000a41a:	75 2b                	jne    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a41c:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a421:	85 c0                	test   eax,eax
c000a423:	74 18                	je     c000a43d <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a425:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a42a:	0f b6 c0             	movzx  eax,al
c000a42d:	83 ec 0c             	sub    esp,0xc
c000a430:	50                   	push   eax
c000a431:	e8 72 fb ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a436:	83 c4 10             	add    esp,0x10
c000a439:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a43d:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a447:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a44a:	83 f0 01             	xor    eax,0x1
c000a44d:	0f b6 c0             	movzx  eax,al
c000a450:	85 c0                	test   eax,eax
c000a452:	74 5a                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a454:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a457:	83 f0 01             	xor    eax,0x1
c000a45a:	0f b6 c0             	movzx  eax,al
c000a45d:	85 c0                	test   eax,eax
c000a45f:	74 4d                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a461:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a466:	83 f0 01             	xor    eax,0x1
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	85 c0                	test   eax,eax
c000a46e:	74 3e                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a473:	0f b7 c0             	movzx  eax,ax
c000a476:	83 f8 1f             	cmp    eax,0x1f
c000a479:	76 0b                	jbe    c000a486 <sendKeyboardToken(KeyboardToken)+0x408>
c000a47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47e:	0f b7 c0             	movzx  eax,ax
c000a481:	83 f8 7e             	cmp    eax,0x7e
c000a484:	76 16                	jbe    c000a49c <sendKeyboardToken(KeyboardToken)+0x41e>
c000a486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a489:	0f b7 c0             	movzx  eax,ax
c000a48c:	83 f8 0a             	cmp    eax,0xa
c000a48f:	74 0b                	je     c000a49c <sendKeyboardToken(KeyboardToken)+0x41e>
c000a491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a494:	0f b7 c0             	movzx  eax,ax
c000a497:	83 f8 08             	cmp    eax,0x8
c000a49a:	75 12                	jne    c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	83 ec 0c             	sub    esp,0xc
c000a4a5:	50                   	push   eax
c000a4a6:	e8 fd fa ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a4ab:	83 c4 10             	add    esp,0x10
c000a4ae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4b1:	83 f0 01             	xor    eax,0x1
c000a4b4:	0f b6 c0             	movzx  eax,al
c000a4b7:	85 c0                	test   eax,eax
c000a4b9:	74 5d                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4be:	83 f0 01             	xor    eax,0x1
c000a4c1:	0f b6 c0             	movzx  eax,al
c000a4c4:	85 c0                	test   eax,eax
c000a4c6:	74 50                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a4cd:	0f b6 c0             	movzx  eax,al
c000a4d0:	85 c0                	test   eax,eax
c000a4d2:	74 44                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d7:	0f b7 c0             	movzx  eax,ax
c000a4da:	83 f8 3f             	cmp    eax,0x3f
c000a4dd:	76 39                	jbe    c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4e2:	0f b7 c0             	movzx  eax,ax
c000a4e5:	83 f8 7f             	cmp    eax,0x7f
c000a4e8:	77 2e                	ja     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ed:	88 c2                	mov    dl,al
c000a4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f2:	0f b7 c0             	movzx  eax,ax
c000a4f5:	83 f8 5f             	cmp    eax,0x5f
c000a4f8:	76 04                	jbe    c000a4fe <sendKeyboardToken(KeyboardToken)+0x480>
c000a4fa:	b0 20                	mov    al,0x20
c000a4fc:	eb 02                	jmp    c000a500 <sendKeyboardToken(KeyboardToken)+0x482>
c000a4fe:	b0 00                	mov    al,0x0
c000a500:	89 d1                	mov    ecx,edx
c000a502:	29 c1                	sub    ecx,eax
c000a504:	89 c8                	mov    eax,ecx
c000a506:	83 e8 40             	sub    eax,0x40
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	50                   	push   eax
c000a510:	e8 93 fa ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a515:	83 c4 10             	add    esp,0x10
c000a518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51b:	0f b7 c0             	movzx  eax,ax
c000a51e:	3d 00 03 00 00       	cmp    eax,0x300
c000a523:	75 12                	jne    c000a537 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a525:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a528:	83 f0 01             	xor    eax,0x1
c000a52b:	0f b6 c0             	movzx  eax,al
c000a52e:	85 c0                	test   eax,eax
c000a530:	74 05                	je     c000a537 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a532:	e8 16 7b 00 00       	call   c001204d <doTerminalCycle()>
c000a537:	90                   	nop
c000a538:	c9                   	leave  
c000a539:	c3                   	ret    

c000a53a <clearInternalKeybuffer(VgaText*)>:
c000a53a:	55                   	push   ebp
c000a53b:	89 e5                	mov    ebp,esp
c000a53d:	83 ec 08             	sub    esp,0x8
c000a540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a543:	05 02 01 00 00       	add    eax,0x102
c000a548:	83 ec 0c             	sub    esp,0xc
c000a54b:	50                   	push   eax
c000a54c:	e8 1f 60 ff ff       	call   c0000570 <strlen>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a557:	81 c2 02 01 00 00    	add    edx,0x102
c000a55d:	83 ec 04             	sub    esp,0x4
c000a560:	50                   	push   eax
c000a561:	6a 00                	push   0x0
c000a563:	52                   	push   edx
c000a564:	e8 87 5f ff ff       	call   c00004f0 <memset>
c000a569:	83 c4 10             	add    esp,0x10
c000a56c:	90                   	nop
c000a56d:	c9                   	leave  
c000a56e:	c3                   	ret    

c000a56f <readKeyboard(VgaText*, char*, unsigned long)>:
c000a56f:	55                   	push   ebp
c000a570:	89 e5                	mov    ebp,esp
c000a572:	83 ec 18             	sub    esp,0x18
c000a575:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a57a:	85 c0                	test   eax,eax
c000a57c:	74 2a                	je     c000a5a8 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a57e:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a584:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a58a:	83 ec 04             	sub    esp,0x4
c000a58d:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a592:	83 ec 08             	sub    esp,0x8
c000a595:	89 e2                	mov    edx,esp
c000a597:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a59a:	89 02                	mov    DWORD PTR [edx],eax
c000a59c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a59f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5a3:	ff d1                	call   ecx
c000a5a5:	83 c4 10             	add    esp,0x10
c000a5a8:	fb                   	sti    
c000a5a9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5b0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5b4:	0f 84 08 01 00 00    	je     c000a6c2 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5bd:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5c3:	0f be c0             	movsx  eax,al
c000a5c6:	85 c0                	test   eax,eax
c000a5c8:	75 27                	jne    c000a5f1 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5ca:	fa                   	cli    
c000a5cb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a5d0:	83 c0 01             	add    eax,0x1
c000a5d3:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000a5d8:	e8 4b c2 00 00       	call   c0016828 <schedule()>
c000a5dd:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000a5e5:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a5ea:	85 c0                	test   eax,eax
c000a5ec:	75 cc                	jne    c000a5ba <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5ee:	fb                   	sti    
c000a5ef:	eb c9                	jmp    c000a5ba <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5f4:	8d 50 01             	lea    edx,[eax+0x1]
c000a5f7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5fd:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a603:	88 10                	mov    BYTE PTR [eax],dl
c000a605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a608:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a60e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a611:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a615:	83 f8 03             	cmp    eax,0x3
c000a618:	75 1e                	jne    c000a638 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a61a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a61f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a621:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a624:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62a:	83 ec 08             	sub    esp,0x8
c000a62d:	6a 02                	push   0x2
c000a62f:	50                   	push   eax
c000a630:	e8 86 68 00 00       	call   c0010ebb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a635:	83 c4 10             	add    esp,0x10
c000a638:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a63c:	83 f8 1c             	cmp    eax,0x1c
c000a63f:	75 1e                	jne    c000a65f <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a641:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a646:	8b 00                	mov    eax,DWORD PTR [eax]
c000a648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a64b:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a651:	83 ec 08             	sub    esp,0x8
c000a654:	6a 09                	push   0x9
c000a656:	50                   	push   eax
c000a657:	e8 5f 68 00 00       	call   c0010ebb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a65c:	83 c4 10             	add    esp,0x10
c000a65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a662:	05 02 01 00 00       	add    eax,0x102
c000a667:	83 ec 0c             	sub    esp,0xc
c000a66a:	50                   	push   eax
c000a66b:	e8 00 5f ff ff       	call   c0000570 <strlen>
c000a670:	83 c4 10             	add    esp,0x10
c000a673:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a676:	81 c2 02 01 00 00    	add    edx,0x102
c000a67c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a67f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a682:	81 c2 02 01 00 00    	add    edx,0x102
c000a688:	83 ec 04             	sub    esp,0x4
c000a68b:	50                   	push   eax
c000a68c:	51                   	push   ecx
c000a68d:	52                   	push   edx
c000a68e:	e8 3d 5d ff ff       	call   c00003d0 <memmove>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a69a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a69e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6a2:	83 f8 0a             	cmp    eax,0xa
c000a6a5:	74 16                	je     c000a6bd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ab:	83 f8 03             	cmp    eax,0x3
c000a6ae:	74 0d                	je     c000a6bd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6b0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6b4:	83 f8 1c             	cmp    eax,0x1c
c000a6b7:	0f 85 f3 fe ff ff    	jne    c000a5b0 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6c0:	eb 03                	jmp    c000a6c5 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6c5:	c9                   	leave  
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Keyboard::Keyboard(char const*)>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cf:	83 ec 08             	sub    esp,0x8
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	50                   	push   eax
c000a6d7:	e8 da f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a6dc:	83 c4 10             	add    esp,0x10
c000a6df:	ba a0 3d 02 c0       	mov    edx,0xc0023da0
c000a6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6f8:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a6ff:	90                   	nop
c000a700:	83 c4 0c             	add    esp,0xc
c000a703:	c3                   	ret    

c000a704 <Keyboard::~Keyboard()>:
c000a704:	83 ec 0c             	sub    esp,0xc
c000a707:	ba a0 3d 02 c0       	mov    edx,0xc0023da0
c000a70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a710:	89 10                	mov    DWORD PTR [eax],edx
c000a712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a716:	83 ec 0c             	sub    esp,0xc
c000a719:	50                   	push   eax
c000a71a:	e8 37 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a71f:	83 c4 10             	add    esp,0x10
c000a722:	90                   	nop
c000a723:	83 c4 0c             	add    esp,0xc
c000a726:	c3                   	ret    
c000a727:	90                   	nop

c000a728 <Keyboard::~Keyboard()>:
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	83 ec 0c             	sub    esp,0xc
c000a72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a732:	e8 cd ff ff ff       	call   c000a704 <Keyboard::~Keyboard()>
c000a737:	83 c4 10             	add    esp,0x10
c000a73a:	83 ec 08             	sub    esp,0x8
c000a73d:	68 5c 01 00 00       	push   0x15c
c000a742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a746:	e8 19 2c 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	83 c4 0c             	add    esp,0xc
c000a751:	c3                   	ret    

c000a752 <LogicalDisk::close(int, int, void*)>:
c000a752:	83 c8 ff             	or     eax,0xffffffff
c000a755:	c3                   	ret    

c000a756 <LogicalDisk::~LogicalDisk()>:
c000a756:	83 ec 0c             	sub    esp,0xc
c000a759:	ba 18 3e 02 c0       	mov    edx,0xc0023e18
c000a75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a762:	89 10                	mov    DWORD PTR [eax],edx
c000a764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a768:	83 ec 0c             	sub    esp,0xc
c000a76b:	50                   	push   eax
c000a76c:	e8 e5 f1 ff ff       	call   c0009956 <Device::~Device()>
c000a771:	83 c4 10             	add    esp,0x10
c000a774:	90                   	nop
c000a775:	83 c4 0c             	add    esp,0xc
c000a778:	c3                   	ret    
c000a779:	90                   	nop

c000a77a <LogicalDisk::~LogicalDisk()>:
c000a77a:	83 ec 0c             	sub    esp,0xc
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a784:	e8 cd ff ff ff       	call   c000a756 <LogicalDisk::~LogicalDisk()>
c000a789:	83 c4 10             	add    esp,0x10
c000a78c:	83 ec 08             	sub    esp,0x8
c000a78f:	68 78 01 00 00       	push   0x178
c000a794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a798:	e8 c7 2b 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000a79d:	83 c4 10             	add    esp,0x10
c000a7a0:	83 c4 0c             	add    esp,0xc
c000a7a3:	c3                   	ret    

c000a7a4 <LogicalDisk::open(int, int, void*)>:
c000a7a4:	83 ec 18             	sub    esp,0x18
c000a7a7:	68 cc 3d 02 c0       	push   0xc0023dcc
c000a7ac:	e8 ef 54 00 00       	call   c000fca0 <KePanic(char const*)>
c000a7b1:	83 c8 ff             	or     eax,0xffffffff
c000a7b4:	83 c4 1c             	add    esp,0x1c
c000a7b7:	c3                   	ret    

c000a7b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7b8:	53                   	push   ebx
c000a7b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7d7:	77 10                	ja     c000a7e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7df:	89 d3                	mov    ebx,edx
c000a7e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7e7:	72 05                	jb     c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7e9:	83 c8 ff             	or     eax,0xffffffff
c000a7ec:	89 c2                	mov    edx,eax
c000a7ee:	5b                   	pop    ebx
c000a7ef:	c3                   	ret    

c000a7f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7f0:	56                   	push   esi
c000a7f1:	83 c8 ff             	or     eax,0xffffffff
c000a7f4:	53                   	push   ebx
c000a7f5:	89 c2                	mov    edx,eax
c000a7f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a803:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a809:	77 27                	ja     c000a832 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a80b:	89 d8                	mov    eax,ebx
c000a80d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a813:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a819:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a81e:	89 c2                	mov    edx,eax
c000a820:	73 10                	jae    c000a832 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a822:	89 c8                	mov    eax,ecx
c000a824:	89 da                	mov    edx,ebx
c000a826:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a82c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a832:	5b                   	pop    ebx
c000a833:	5e                   	pop    esi
c000a834:	c3                   	ret    
c000a835:	90                   	nop

c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a836:	83 ec 1c             	sub    esp,0x1c
c000a839:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a83d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a84d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a850:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a85c:	83 ec 08             	sub    esp,0x8
c000a85f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a863:	50                   	push   eax
c000a864:	e8 4d f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a869:	83 c4 10             	add    esp,0x10
c000a86c:	ba 18 3e 02 c0       	mov    edx,0xc0023e18
c000a871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a875:	89 10                	mov    DWORD PTR [eax],edx
c000a877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a886:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a891:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a89c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8b2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8b8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8c9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8cf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8dd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8f1:	90                   	nop
c000a8f2:	83 c4 1c             	add    esp,0x1c
c000a8f5:	c3                   	ret    

c000a8f6 <LogicalDisk::assignDriveLetter()>:
c000a8f6:	55                   	push   ebp
c000a8f7:	57                   	push   edi
c000a8f8:	56                   	push   esi
c000a8f9:	53                   	push   ebx
c000a8fa:	83 ec 14             	sub    esp,0x14
c000a8fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a901:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a907:	b0 41                	mov    al,0x41
c000a909:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a90f:	84 d2                	test   dl,dl
c000a911:	75 02                	jne    c000a915 <LogicalDisk::assignDriveLetter()+0x1f>
c000a913:	b0 43                	mov    al,0x43
c000a915:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a91b:	0f b6 ca             	movzx  ecx,dl
c000a91e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a922:	0f be e8             	movsx  ebp,al
c000a925:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a92b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a92f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a933:	3c 43                	cmp    al,0x43
c000a935:	75 10                	jne    c000a947 <LogicalDisk::assignDriveLetter()+0x51>
c000a937:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a93e:	75 5a                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a945:	75 53                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a947:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a94a:	ba 01 00 00 00       	mov    edx,0x1
c000a94f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a952:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a955:	d3 e2                	shl    edx,cl
c000a957:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a95b:	89 d7                	mov    edi,edx
c000a95d:	89 d6                	mov    esi,edx
c000a95f:	c1 ff 1f             	sar    edi,0x1f
c000a962:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a966:	21 f9                	and    ecx,edi
c000a968:	09 d1                	or     ecx,edx
c000a96a:	75 2e                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a96c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a970:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a974:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a97a:	09 f2                	or     edx,esi
c000a97c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a97f:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a985:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	09 fa                	or     edx,edi
c000a992:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a998:	eb 0d                	jmp    c000a9a7 <LogicalDisk::assignDriveLetter()+0xb1>
c000a99a:	8d 50 01             	lea    edx,[eax+0x1]
c000a99d:	45                   	inc    ebp
c000a99e:	88 d0                	mov    al,dl
c000a9a0:	80 fa 5b             	cmp    dl,0x5b
c000a9a3:	75 8e                	jne    c000a933 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9a5:	31 c0                	xor    eax,eax
c000a9a7:	83 c4 14             	add    esp,0x14
c000a9aa:	5b                   	pop    ebx
c000a9ab:	5e                   	pop    esi
c000a9ac:	5f                   	pop    edi
c000a9ad:	5d                   	pop    ebp
c000a9ae:	c3                   	ret    
c000a9af:	90                   	nop

c000a9b0 <LogicalDisk::mount()>:
c000a9b0:	56                   	push   esi
c000a9b1:	53                   	push   ebx
c000a9b2:	53                   	push   ebx
c000a9b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9b7:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9bd:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9c7:	85 db                	test   ebx,ebx
c000a9c9:	74 27                	je     c000a9f2 <LogicalDisk::mount()+0x42>
c000a9cb:	51                   	push   ecx
c000a9cc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9d5:	83 e8 41             	sub    eax,0x41
c000a9d8:	50                   	push   eax
c000a9d9:	56                   	push   esi
c000a9da:	53                   	push   ebx
c000a9db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	84 c0                	test   al,al
c000a9e3:	74 08                	je     c000a9ed <LogicalDisk::mount()+0x3d>
c000a9e5:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9eb:	eb 07                	jmp    c000a9f4 <LogicalDisk::mount()+0x44>
c000a9ed:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9f0:	eb d5                	jmp    c000a9c7 <LogicalDisk::mount()+0x17>
c000a9f2:	31 c0                	xor    eax,eax
c000a9f4:	5a                   	pop    edx
c000a9f5:	5b                   	pop    ebx
c000a9f6:	5e                   	pop    esi
c000a9f7:	c3                   	ret    

c000a9f8 <LogicalDisk::unmount()>:
c000a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9fc:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa06:	c3                   	ret    
c000aa07:	90                   	nop

c000aa08 <LogicalDisk::eject()>:
c000aa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa0c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa12:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa18:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa1b:	90                   	nop

c000aa1c <LogicalDisk::unassignDriveLetter()>:
c000aa1c:	57                   	push   edi
c000aa1d:	56                   	push   esi
c000aa1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa22:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa29:	85 c9                	test   ecx,ecx
c000aa2b:	75 0f                	jne    c000aa3c <LogicalDisk::unassignDriveLetter()+0x20>
c000aa2d:	c7 44 24 0c f0 3d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023df0
c000aa35:	5e                   	pop    esi
c000aa36:	5f                   	pop    edi
c000aa37:	e9 64 52 00 00       	jmp    c000fca0 <KePanic(char const*)>
c000aa3c:	83 e9 41             	sub    ecx,0x41
c000aa3f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa46:	b8 01 00 00 00       	mov    eax,0x1
c000aa4b:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa56:	d3 e0                	shl    eax,cl
c000aa58:	89 c7                	mov    edi,eax
c000aa5a:	f7 d0                	not    eax
c000aa5c:	c1 ff 1f             	sar    edi,0x1f
c000aa5f:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa65:	89 fe                	mov    esi,edi
c000aa67:	f7 d6                	not    esi
c000aa69:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aa6f:	5e                   	pop    esi
c000aa70:	5f                   	pop    edi
c000aa71:	c3                   	ret    

c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa72:	57                   	push   edi
c000aa73:	56                   	push   esi
c000aa74:	53                   	push   ebx
c000aa75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa8b:	77 41                	ja     c000aace <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa8d:	99                   	cdq    
c000aa8e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa94:	01 c8                	add    eax,ecx
c000aa96:	11 da                	adc    edx,ebx
c000aa98:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa9e:	19 d7                	sbb    edi,edx
c000aaa0:	72 33                	jb     c000aad5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aaa2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaa8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aab2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aab6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aabc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aac2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aac6:	5b                   	pop    ebx
c000aac7:	5e                   	pop    esi
c000aac8:	5f                   	pop    edi
c000aac9:	e9 bc 0b 00 00       	jmp    c000b68a <VCache::read(unsigned long long, int, void*)>
c000aace:	b8 05 00 00 00       	mov    eax,0x5
c000aad3:	eb 05                	jmp    c000aada <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aad5:	b8 07 00 00 00       	mov    eax,0x7
c000aada:	5b                   	pop    ebx
c000aadb:	5e                   	pop    esi
c000aadc:	5f                   	pop    edi
c000aadd:	c3                   	ret    

c000aade <LogicalDisk::write(unsigned long long, int, void*)>:
c000aade:	57                   	push   edi
c000aadf:	56                   	push   esi
c000aae0:	53                   	push   ebx
c000aae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aae9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aaed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aaf7:	77 41                	ja     c000ab3a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aaf9:	99                   	cdq    
c000aafa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab00:	01 c8                	add    eax,ecx
c000ab02:	11 da                	adc    edx,ebx
c000ab04:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab0a:	19 d7                	sbb    edi,edx
c000ab0c:	72 33                	jb     c000ab41 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab0e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab14:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab1e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab22:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab32:	5b                   	pop    ebx
c000ab33:	5e                   	pop    esi
c000ab34:	5f                   	pop    edi
c000ab35:	e9 82 09 00 00       	jmp    c000b4bc <VCache::write(unsigned long long, int, void*)>
c000ab3a:	b8 05 00 00 00       	mov    eax,0x5
c000ab3f:	eb 05                	jmp    c000ab46 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab41:	b8 07 00 00 00       	mov    eax,0x7
c000ab46:	5b                   	pop    ebx
c000ab47:	5e                   	pop    esi
c000ab48:	5f                   	pop    edi
c000ab49:	c3                   	ret    
c000ab4a:	66 90                	xchg   ax,ax

c000ab4c <Mouse::Mouse(char const*)>:
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab53:	83 ec 08             	sub    esp,0x8
c000ab56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab5a:	50                   	push   eax
c000ab5b:	e8 56 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	ba 44 3e 02 c0       	mov    edx,0xc0023e44
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab7c:	90                   	nop
c000ab7d:	83 c4 0c             	add    esp,0xc
c000ab80:	c3                   	ret    
c000ab81:	90                   	nop
c000ab82:	66 90                	xchg   ax,ax

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	ba 44 3e 02 c0       	mov    edx,0xc0023e44
c000ab8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab90:	89 10                	mov    DWORD PTR [eax],edx
c000ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab96:	83 ec 0c             	sub    esp,0xc
c000ab99:	50                   	push   eax
c000ab9a:	e8 b7 ed ff ff       	call   c0009956 <Device::~Device()>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	90                   	nop
c000aba3:	83 c4 0c             	add    esp,0xc
c000aba6:	c3                   	ret    
c000aba7:	90                   	nop

c000aba8 <Mouse::~Mouse()>:
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	83 ec 0c             	sub    esp,0xc
c000abae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb2:	e8 cd ff ff ff       	call   c000ab84 <Mouse::~Mouse()>
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	83 ec 08             	sub    esp,0x8
c000abbd:	68 58 01 00 00       	push   0x158
c000abc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc6:	e8 99 27 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000abcb:	83 c4 10             	add    esp,0x10
c000abce:	83 c4 0c             	add    esp,0xc
c000abd1:	c3                   	ret    

c000abd2 <NIC::getMAC()>:
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	31 d2                	xor    edx,edx
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <NIC::write(int, unsigned char*, int*)>:
c000abd8:	b8 01 00 00 00       	mov    eax,0x1
c000abdd:	c3                   	ret    

c000abde <NIC::NIC(char const*)>:
c000abde:	83 ec 0c             	sub    esp,0xc
c000abe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe5:	83 ec 08             	sub    esp,0x8
c000abe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abec:	50                   	push   eax
c000abed:	e8 c4 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	ba 70 3e 02 c0       	mov    edx,0xc0023e70
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	89 10                	mov    DWORD PTR [eax],edx
c000ac00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac04:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	ba 70 3e 02 c0       	mov    edx,0xc0023e70
c000ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac20:	89 10                	mov    DWORD PTR [eax],edx
c000ac22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	50                   	push   eax
c000ac2a:	e8 27 ed ff ff       	call   c0009956 <Device::~Device()>
c000ac2f:	83 c4 10             	add    esp,0x10
c000ac32:	90                   	nop
c000ac33:	83 c4 0c             	add    esp,0xc
c000ac36:	c3                   	ret    
c000ac37:	90                   	nop

c000ac38 <NIC::~NIC()>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 0c             	sub    esp,0xc
c000ac3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac42:	e8 cd ff ff ff       	call   c000ac14 <NIC::~NIC()>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	83 ec 08             	sub    esp,0x8
c000ac4d:	68 58 01 00 00       	push   0x158
c000ac52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac56:	e8 09 27 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000ac5b:	83 c4 10             	add    esp,0x10
c000ac5e:	83 c4 0c             	add    esp,0xc
c000ac61:	c3                   	ret    

c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac62:	55                   	push   ebp
c000ac63:	57                   	push   edi
c000ac64:	56                   	push   esi
c000ac65:	53                   	push   ebx
c000ac66:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac6c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac73:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac7a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac81:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac8c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac90:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac97:	e8 16 f0 ff ff       	call   c0009cb2 <Device::getName()>
c000ac9c:	5a                   	pop    edx
c000ac9d:	59                   	pop    ecx
c000ac9e:	50                   	push   eax
c000ac9f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000aca3:	55                   	push   ebp
c000aca4:	e8 97 59 ff ff       	call   c0000640 <strcpy>
c000aca9:	5b                   	pop    ebx
c000acaa:	58                   	pop    eax
c000acab:	68 9c 3e 02 c0       	push   0xc0023e9c
c000acb0:	55                   	push   ebp
c000acb1:	e8 8a 5b ff ff       	call   c0000840 <strcat>
c000acb6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acbd:	e8 89 4b 00 00       	call   c000f84b <malloc>
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	89 c3                	mov    ebx,eax
c000acc7:	57                   	push   edi
c000acc8:	56                   	push   esi
c000acc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000accd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acd8:	55                   	push   ebp
c000acd9:	50                   	push   eax
c000acda:	e8 57 fb ff ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acdf:	83 c4 14             	add    esp,0x14
c000ace2:	53                   	push   ebx
c000ace3:	e8 0e fc ff ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c000ace8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000aceb:	e8 c0 fc ff ff       	call   c000a9b0 <LogicalDisk::mount()>
c000acf0:	58                   	pop    eax
c000acf1:	5a                   	pop    edx
c000acf2:	53                   	push   ebx
c000acf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acfa:	e8 55 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000acff:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad05:	5b                   	pop    ebx
c000ad06:	5e                   	pop    esi
c000ad07:	5f                   	pop    edi
c000ad08:	5d                   	pop    ebp
c000ad09:	c3                   	ret    

c000ad0a <createPartitionsForDisk(PhysicalDisk*)>:
c000ad0a:	55                   	push   ebp
c000ad0b:	57                   	push   edi
c000ad0c:	56                   	push   esi
c000ad0d:	53                   	push   ebx
c000ad0e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad14:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad1b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad21:	3d 00 02 00 00       	cmp    eax,0x200
c000ad26:	74 27                	je     c000ad4f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad28:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad2e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad34:	83 ec 10             	sub    esp,0x10
c000ad37:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad3b:	99                   	cdq    
c000ad3c:	c1 e6 0a             	shl    esi,0xa
c000ad3f:	52                   	push   edx
c000ad40:	89 fd                	mov    ebp,edi
c000ad42:	50                   	push   eax
c000ad43:	55                   	push   ebp
c000ad44:	56                   	push   esi
c000ad45:	e8 aa 72 01 00       	call   c0021ff4 <__udivdi3>
c000ad4a:	e9 b9 00 00 00       	jmp    c000ae08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad54:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad58:	56                   	push   esi
c000ad59:	6a 01                	push   0x1
c000ad5b:	6a 00                	push   0x0
c000ad5d:	6a 00                	push   0x0
c000ad5f:	53                   	push   ebx
c000ad60:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad63:	83 c4 20             	add    esp,0x20
c000ad66:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad6e:	75 0a                	jne    c000ad7a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad70:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad78:	74 2c                	je     c000ada6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad7a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad80:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad86:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad8c:	83 ec 10             	sub    esp,0x10
c000ad8f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad93:	89 f7                	mov    edi,esi
c000ad95:	c1 e0 0a             	shl    eax,0xa
c000ad98:	c1 ff 1f             	sar    edi,0x1f
c000ad9b:	57                   	push   edi
c000ad9c:	56                   	push   esi
c000ad9d:	52                   	push   edx
c000ad9e:	50                   	push   eax
c000ad9f:	e8 50 72 01 00       	call   c0021ff4 <__udivdi3>
c000ada4:	eb 62                	jmp    c000ae08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ada6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000adad:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000adb4:	89 cf                	mov    edi,ecx
c000adb6:	83 e2 7f             	and    edx,0x7f
c000adb9:	83 e7 7f             	and    edi,0x7f
c000adbc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adc3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adc6:	83 e0 7f             	and    eax,0x7f
c000adc9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000adcc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000add3:	83 e0 7f             	and    eax,0x7f
c000add6:	01 d0                	add    eax,edx
c000add8:	89 c5                	mov    ebp,eax
c000adda:	84 c0                	test   al,al
c000addc:	74 41                	je     c000ae1f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adde:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ade4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adf0:	83 ec 10             	sub    esp,0x10
c000adf3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adf7:	89 f7                	mov    edi,esi
c000adf9:	c1 e0 0a             	shl    eax,0xa
c000adfc:	c1 ff 1f             	sar    edi,0x1f
c000adff:	57                   	push   edi
c000ae00:	56                   	push   esi
c000ae01:	52                   	push   edx
c000ae02:	50                   	push   eax
c000ae03:	e8 ec 71 01 00       	call   c0021ff4 <__udivdi3>
c000ae08:	83 c4 14             	add    esp,0x14
c000ae0b:	52                   	push   edx
c000ae0c:	50                   	push   eax
c000ae0d:	6a 00                	push   0x0
c000ae0f:	6a 00                	push   0x0
c000ae11:	53                   	push   ebx
c000ae12:	e8 4b fe ff ff       	call   c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae17:	83 c4 20             	add    esp,0x20
c000ae1a:	e9 73 01 00 00       	jmp    c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae1f:	89 f0                	mov    eax,esi
c000ae21:	31 c9                	xor    ecx,ecx
c000ae23:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae2a:	75 02                	jne    c000ae2e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae2c:	89 cd                	mov    ebp,ecx
c000ae2e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae35:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae3c:	c1 e2 08             	shl    edx,0x8
c000ae3f:	c1 e6 10             	shl    esi,0x10
c000ae42:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae4a:	09 f2                	or     edx,esi
c000ae4c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae54:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae5b:	83 c0 10             	add    eax,0x10
c000ae5e:	09 f2                	or     edx,esi
c000ae60:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae67:	c1 e6 18             	shl    esi,0x18
c000ae6a:	09 f2                	or     edx,esi
c000ae6c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae73:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae77:	c1 e6 10             	shl    esi,0x10
c000ae7a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae81:	c1 e2 08             	shl    edx,0x8
c000ae84:	09 f2                	or     edx,esi
c000ae86:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae8d:	09 f2                	or     edx,esi
c000ae8f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae96:	c1 e6 18             	shl    esi,0x18
c000ae99:	09 f2                	or     edx,esi
c000ae9b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae9f:	41                   	inc    ecx
c000aea0:	83 f9 04             	cmp    ecx,0x4
c000aea3:	0f 85 7a ff ff ff    	jne    c000ae23 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aead:	83 f0 01             	xor    eax,0x1
c000aeb0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aeb4:	75 4f                	jne    c000af05 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeba:	83 f0 01             	xor    eax,0x1
c000aebd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aec1:	75 42                	jne    c000af05 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aec3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aecb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aed3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aed9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aedf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aee5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aee9:	89 f7                	mov    edi,esi
c000aeeb:	c1 e0 0a             	shl    eax,0xa
c000aeee:	c1 ff 1f             	sar    edi,0x1f
c000aef1:	57                   	push   edi
c000aef2:	56                   	push   esi
c000aef3:	52                   	push   edx
c000aef4:	50                   	push   eax
c000aef5:	e8 fa 70 01 00       	call   c0021ff4 <__udivdi3>
c000aefa:	83 c4 10             	add    esp,0x10
c000aefd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af05:	89 e8                	mov    eax,ebp
c000af07:	0f b6 e8             	movzx  ebp,al
c000af0a:	85 ed                	test   ebp,ebp
c000af0c:	74 50                	je     c000af5e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af26:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af2a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af3a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af3e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af42:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af4e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af52:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af56:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af5a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af5e:	31 ed                	xor    ebp,ebp
c000af60:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af64:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af68:	89 f8                	mov    eax,edi
c000af6a:	09 f0                	or     eax,esi
c000af6c:	74 1e                	je     c000af8c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af72:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af76:	89 d1                	mov    ecx,edx
c000af78:	09 c1                	or     ecx,eax
c000af7a:	74 10                	je     c000af8c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	57                   	push   edi
c000af80:	56                   	push   esi
c000af81:	52                   	push   edx
c000af82:	50                   	push   eax
c000af83:	53                   	push   ebx
c000af84:	e8 d9 fc ff ff       	call   c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af89:	83 c4 20             	add    esp,0x20
c000af8c:	45                   	inc    ebp
c000af8d:	83 fd 04             	cmp    ebp,0x4
c000af90:	75 ce                	jne    c000af60 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af92:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af98:	5b                   	pop    ebx
c000af99:	5e                   	pop    esi
c000af9a:	5f                   	pop    edi
c000af9b:	5d                   	pop    ebp
c000af9c:	c3                   	ret    
c000af9d:	66 90                	xchg   ax,ax
c000af9f:	90                   	nop

c000afa0 <Serial::Serial(char const*)>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa7:	83 ec 08             	sub    esp,0x8
c000afaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afae:	50                   	push   eax
c000afaf:	e8 02 ec ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	ba b0 3e 02 c0       	mov    edx,0xc0023eb0
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afd0:	90                   	nop
c000afd1:	83 c4 0c             	add    esp,0xc
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop
c000afd6:	66 90                	xchg   ax,ax

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	ba b0 3e 02 c0       	mov    edx,0xc0023eb0
c000afe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe4:	89 10                	mov    DWORD PTR [eax],edx
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	83 ec 0c             	sub    esp,0xc
c000afed:	50                   	push   eax
c000afee:	e8 63 e9 ff ff       	call   c0009956 <Device::~Device()>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	90                   	nop
c000aff7:	83 c4 0c             	add    esp,0xc
c000affa:	c3                   	ret    
c000affb:	90                   	nop

c000affc <Serial::~Serial()>:
c000affc:	83 ec 0c             	sub    esp,0xc
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b006:	e8 cd ff ff ff       	call   c000afd8 <Serial::~Serial()>
c000b00b:	83 c4 10             	add    esp,0x10
c000b00e:	83 ec 08             	sub    esp,0x8
c000b011:	68 58 01 00 00       	push   0x158
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	e8 45 23 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	c3                   	ret    
c000b026:	66 90                	xchg   ax,ax

c000b028 <Timer::Timer(char const*)>:
c000b028:	83 ec 0c             	sub    esp,0xc
c000b02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02f:	83 ec 08             	sub    esp,0x8
c000b032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b036:	50                   	push   eax
c000b037:	e8 7a eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	ba 90 3f 02 c0       	mov    edx,0xc0023f90
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b058:	90                   	nop
c000b059:	83 c4 0c             	add    esp,0xc
c000b05c:	c3                   	ret    
c000b05d:	90                   	nop
c000b05e:	66 90                	xchg   ax,ax

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	ba 90 3f 02 c0       	mov    edx,0xc0023f90
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	89 10                	mov    DWORD PTR [eax],edx
c000b06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b072:	83 ec 0c             	sub    esp,0xc
c000b075:	50                   	push   eax
c000b076:	e8 db e8 ff ff       	call   c0009956 <Device::~Device()>
c000b07b:	83 c4 10             	add    esp,0x10
c000b07e:	90                   	nop
c000b07f:	83 c4 0c             	add    esp,0xc
c000b082:	c3                   	ret    
c000b083:	90                   	nop

c000b084 <Timer::~Timer()>:
c000b084:	83 ec 0c             	sub    esp,0xc
c000b087:	83 ec 0c             	sub    esp,0xc
c000b08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08e:	e8 cd ff ff ff       	call   c000b060 <Timer::~Timer()>
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	83 ec 08             	sub    esp,0x8
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a2:	e8 bd 22 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	83 c4 0c             	add    esp,0xc
c000b0ad:	c3                   	ret    

c000b0ae <Timer::read()>:
c000b0ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0b8:	c3                   	ret    

c000b0b9 <setupTimer(int)>:
c000b0b9:	53                   	push   ebx
c000b0ba:	83 ec 14             	sub    esp,0x14
c000b0bd:	68 5c 01 00 00       	push   0x15c
c000b0c2:	e8 84 47 00 00       	call   c000f84b <malloc>
c000b0c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0ca:	89 c3                	mov    ebx,eax
c000b0cc:	e8 d3 67 01 00       	call   c00218a4 <PIT::PIT()>
c000b0d1:	58                   	pop    eax
c000b0d2:	5a                   	pop    edx
c000b0d3:	53                   	push   ebx
c000b0d4:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c000b0da:	e8 75 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b0df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e1:	6a 00                	push   0x0
c000b0e3:	6a 00                	push   0x0
c000b0e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0e9:	53                   	push   ebx
c000b0ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ed:	89 d8                	mov    eax,ebx
c000b0ef:	83 c4 28             	add    esp,0x28
c000b0f2:	5b                   	pop    ebx
c000b0f3:	c3                   	ret    

c000b0f4 <timerHandler(unsigned int)>:
c000b0f4:	57                   	push   edi
c000b0f5:	31 d2                	xor    edx,edx
c000b0f7:	56                   	push   esi
c000b0f8:	53                   	push   ebx
c000b0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0fd:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b103:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b109:	80 3d 0d d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10d,0x0
c000b110:	75 12                	jne    c000b124 <timerHandler(unsigned int)+0x30>
c000b112:	c7 44 24 10 3f 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f3f
c000b11a:	5b                   	pop    ebx
c000b11b:	5e                   	pop    esi
c000b11c:	5f                   	pop    edi
c000b11d:	e9 5a be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b122:	66 90                	xchg   ax,ax
c000b124:	fa                   	cli    
c000b125:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000b12b:	83 ec 0c             	sub    esp,0xc
c000b12e:	68 40 d3 02 c0       	push   0xc002d340
c000b133:	e8 54 72 01 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	84 c0                	test   al,al
c000b13d:	0f 85 a9 00 00 00    	jne    c000b1ec <timerHandler(unsigned int)+0xf8>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	68 40 d3 02 c0       	push   0xc002d340
c000b14b:	e8 58 72 01 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 c6                	mov    esi,eax
c000b155:	8d 76 00             	lea    esi,[esi+0x0]
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	68 40 d3 02 c0       	push   0xc002d340
c000b160:	e8 43 72 01 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b165:	c7 04 24 40 d3 02 c0 	mov    DWORD PTR [esp],0xc002d340
c000b16c:	89 c7                	mov    edi,eax
c000b16e:	e8 3d 72 01 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b173:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b176:	83 c4 10             	add    esp,0x10
c000b179:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b17c:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b182:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b187:	19 c8                	sbb    eax,ecx
c000b189:	72 21                	jb     c000b1ac <timerHandler(unsigned int)+0xb8>
c000b18b:	83 ec 0c             	sub    esp,0xc
c000b18e:	57                   	push   edi
c000b18f:	e8 f0 b9 00 00       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	39 fe                	cmp    esi,edi
c000b199:	75 25                	jne    c000b1c0 <timerHandler(unsigned int)+0xcc>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	68 40 d3 02 c0       	push   0xc002d340
c000b1a3:	e8 00 72 01 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1a8:	89 c6                	mov    esi,eax
c000b1aa:	eb 10                	jmp    c000b1bc <timerHandler(unsigned int)+0xc8>
c000b1ac:	51                   	push   ecx
c000b1ad:	51                   	push   ecx
c000b1ae:	57                   	push   edi
c000b1af:	68 40 d3 02 c0       	push   0xc002d340
c000b1b4:	e8 b3 72 01 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	90                   	nop
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	68 40 d3 02 c0       	push   0xc002d340
c000b1c8:	e8 bf 71 01 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	84 c0                	test   al,al
c000b1d2:	75 18                	jne    c000b1ec <timerHandler(unsigned int)+0xf8>
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	68 40 d3 02 c0       	push   0xc002d340
c000b1dc:	e8 c7 71 01 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	39 f0                	cmp    eax,esi
c000b1e6:	0f 85 6c ff ff ff    	jne    c000b158 <timerHandler(unsigned int)+0x64>
c000b1ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1f2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1f5:	85 c0                	test   eax,eax
c000b1f7:	74 5f                	je     c000b258 <timerHandler(unsigned int)+0x164>
c000b1f9:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c000b200:	74 56                	je     c000b258 <timerHandler(unsigned int)+0x164>
c000b202:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b207:	76 23                	jbe    c000b22c <timerHandler(unsigned int)+0x138>
c000b209:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b20d:	75 11                	jne    c000b220 <timerHandler(unsigned int)+0x12c>
c000b20f:	52                   	push   edx
c000b210:	52                   	push   edx
c000b211:	50                   	push   eax
c000b212:	68 55 3f 02 c0       	push   0xc0023f55
c000b217:	e8 60 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	90                   	nop
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b22c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b232:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b235:	39 d8                	cmp    eax,ebx
c000b237:	73 0b                	jae    c000b244 <timerHandler(unsigned int)+0x150>
c000b239:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b240:	eb 0e                	jmp    c000b250 <timerHandler(unsigned int)+0x15c>
c000b242:	66 90                	xchg   ax,ax
c000b244:	89 c1                	mov    ecx,eax
c000b246:	29 d9                	sub    ecx,ebx
c000b248:	39 d8                	cmp    eax,ebx
c000b24a:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b24d:	75 09                	jne    c000b258 <timerHandler(unsigned int)+0x164>
c000b24f:	90                   	nop
c000b250:	e8 d3 b5 00 00       	call   c0016828 <schedule()>
c000b255:	8d 76 00             	lea    esi,[esi+0x0]
c000b258:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000b25f:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000b266:	75 04                	jne    c000b26c <timerHandler(unsigned int)+0x178>
c000b268:	fb                   	sti    
c000b269:	8d 76 00             	lea    esi,[esi+0x0]
c000b26c:	5b                   	pop    ebx
c000b26d:	5e                   	pop    esi
c000b26e:	5f                   	pop    edi
c000b26f:	c3                   	ret    

c000b270 <VCache::VCache(PhysicalDisk*)>:
c000b270:	53                   	push   ebx
c000b271:	83 ec 18             	sub    esp,0x18
c000b274:	ba 00 40 02 c0       	mov    edx,0xc0024000
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	89 10                	mov    DWORD PTR [eax],edx
c000b27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b283:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2a0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ab:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2b2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2bd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2d7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b301:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b309:	83 ec 0c             	sub    esp,0xc
c000b30c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b310:	e8 36 45 00 00       	call   c000f84b <malloc>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	89 c3                	mov    ebx,eax
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	53                   	push   ebx
c000b31e:	e8 5d 49 00 00       	call   c000fc80 <Mutex::Mutex()>
c000b323:	83 c4 10             	add    esp,0x10
c000b326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b32a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b32d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b331:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b335:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b343:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b347:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b34d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b351:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b358:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b35e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b364:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b368:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b36b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b372:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b376:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b37a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b380:	05 00 01 00 00       	add    eax,0x100
c000b385:	c1 e0 04             	shl    eax,0x4
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	50                   	push   eax
c000b38c:	e8 ba 44 00 00       	call   c000f84b <malloc>
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	89 c2                	mov    edx,eax
c000b396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b39a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3a1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3ac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3ba:	89 d0                	mov    eax,edx
c000b3bc:	c1 e0 02             	shl    eax,0x2
c000b3bf:	01 d0                	add    eax,edx
c000b3c1:	c1 e0 04             	shl    eax,0x4
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	50                   	push   eax
c000b3c8:	e8 7e 44 00 00       	call   c000f84b <malloc>
c000b3cd:	83 c4 10             	add    esp,0x10
c000b3d0:	89 c2                	mov    edx,eax
c000b3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3d9:	90                   	nop
c000b3da:	83 c4 18             	add    esp,0x18
c000b3dd:	5b                   	pop    ebx
c000b3de:	c3                   	ret    
c000b3df:	90                   	nop

c000b3e0 <VCache::invalidateReadBuffer()>:
c000b3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ee:	c3                   	ret    
c000b3ef:	90                   	nop

c000b3f0 <VCache::writeWriteBuffer()>:
c000b3f0:	53                   	push   ebx
c000b3f1:	83 ec 08             	sub    esp,0x8
c000b3f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3fc:	74 1e                	je     c000b41c <VCache::writeWriteBuffer()+0x2c>
c000b3fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b401:	83 ec 0c             	sub    esp,0xc
c000b404:	8b 10                	mov    edx,DWORD PTR [eax]
c000b406:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b409:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b40c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b40f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b412:	50                   	push   eax
c000b413:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b416:	83 c4 20             	add    esp,0x20
c000b419:	8d 76 00             	lea    esi,[esi+0x0]
c000b41c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b423:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b42a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b42e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b435:	83 c4 08             	add    esp,0x8
c000b438:	5b                   	pop    ebx
c000b439:	c3                   	ret    
c000b43a:	66 90                	xchg   ax,ax

c000b43c <VCache::~VCache()>:
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	ba 00 40 02 c0       	mov    edx,0xc0024000
c000b444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b448:	89 10                	mov    DWORD PTR [eax],edx
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b451:	0f b6 c0             	movzx  eax,al
c000b454:	85 c0                	test   eax,eax
c000b456:	74 10                	je     c000b468 <VCache::~VCache()+0x2c>
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45f:	e8 8c ff ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	90                   	nop
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b46f:	83 ec 0c             	sub    esp,0xc
c000b472:	50                   	push   eax
c000b473:	e8 e3 43 00 00       	call   c000f85b <free>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	50                   	push   eax
c000b486:	e8 d0 43 00 00       	call   c000f85b <free>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	90                   	nop
c000b48f:	83 c4 0c             	add    esp,0xc
c000b492:	c3                   	ret    
c000b493:	90                   	nop

c000b494 <VCache::~VCache()>:
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	83 ec 0c             	sub    esp,0xc
c000b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49e:	e8 99 ff ff ff       	call   c000b43c <VCache::~VCache()>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	83 ec 08             	sub    esp,0x8
c000b4a9:	6a 44                	push   0x44
c000b4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4af:	e8 b0 1e 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	83 c4 0c             	add    esp,0xc
c000b4ba:	c3                   	ret    
c000b4bb:	90                   	nop

c000b4bc <VCache::write(unsigned long long, int, void*)>:
c000b4bc:	55                   	push   ebp
c000b4bd:	57                   	push   edi
c000b4be:	56                   	push   esi
c000b4bf:	53                   	push   ebx
c000b4c0:	83 ec 1c             	sub    esp,0x1c
c000b4c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4d3:	e8 3c b0 00 00       	call   c0016514 <KeDisablePreemption()>
c000b4d8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4dd:	50                   	push   eax
c000b4de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4e1:	0f af c3             	imul   eax,ebx
c000b4e4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4e9:	99                   	cdq    
c000b4ea:	f7 f9                	idiv   ecx
c000b4ec:	50                   	push   eax
c000b4ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4f1:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b4f7:	e8 90 8a 00 00       	call   c0013f8c <VAS::canLockPages(unsigned long, int)>
c000b4fc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b508:	74 2a                	je     c000b534 <VCache::write(unsigned long long, int, void*)+0x78>
c000b50a:	b9 00 10 00 00       	mov    ecx,0x1000
c000b50f:	50                   	push   eax
c000b510:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b513:	0f af c3             	imul   eax,ebx
c000b516:	05 ff 0f 00 00       	add    eax,0xfff
c000b51b:	99                   	cdq    
c000b51c:	f7 f9                	idiv   ecx
c000b51e:	50                   	push   eax
c000b51f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b523:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b529:	e8 c2 8c 00 00       	call   c00141f0 <VAS::lockPages(unsigned long, int)>
c000b52e:	83 c4 10             	add    esp,0x10
c000b531:	8d 76 00             	lea    esi,[esi+0x0]
c000b534:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b538:	74 0e                	je     c000b548 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b53a:	83 ec 0c             	sub    esp,0xc
c000b53d:	55                   	push   ebp
c000b53e:	e8 9d fe ff ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c000b543:	83 c4 10             	add    esp,0x10
c000b546:	66 90                	xchg   ax,ax
c000b548:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b54c:	74 72                	je     c000b5c0 <VCache::write(unsigned long long, int, void*)+0x104>
c000b54e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b551:	89 c8                	mov    eax,ecx
c000b553:	99                   	cdq    
c000b554:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b557:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b55a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b55e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b562:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b56a:	31 f0                	xor    eax,esi
c000b56c:	31 fa                	xor    edx,edi
c000b56e:	09 d0                	or     eax,edx
c000b570:	75 42                	jne    c000b5b4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b572:	83 fb 01             	cmp    ebx,0x1
c000b575:	75 3d                	jne    c000b5b4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b57a:	89 cf                	mov    edi,ecx
c000b57c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b582:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b586:	0f af f8             	imul   edi,eax
c000b589:	89 c1                	mov    ecx,eax
c000b58b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b58e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b590:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b593:	40                   	inc    eax
c000b594:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b597:	83 f8 50             	cmp    eax,0x50
c000b59a:	0f 85 a8 00 00 00    	jne    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	55                   	push   ebp
c000b5a4:	e8 47 fe ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b5a9:	83 c4 10             	add    esp,0x10
c000b5ac:	e9 97 00 00 00       	jmp    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5b4:	83 ec 0c             	sub    esp,0xc
c000b5b7:	55                   	push   ebp
c000b5b8:	e8 33 fe ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c3:	83 fb 4f             	cmp    ebx,0x4f
c000b5c6:	7f 20                	jg     c000b5e8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5c8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5cb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ce:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5d1:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5d5:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5de:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5e4:	eb 62                	jmp    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5e6:	66 90                	xchg   ax,ax
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5f1:	53                   	push   ebx
c000b5f2:	57                   	push   edi
c000b5f3:	56                   	push   esi
c000b5f4:	50                   	push   eax
c000b5f5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5f8:	83 c4 20             	add    esp,0x20
c000b5fb:	89 c6                	mov    esi,eax
c000b5fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b602:	74 28                	je     c000b62c <VCache::write(unsigned long long, int, void*)+0x170>
c000b604:	b9 00 10 00 00       	mov    ecx,0x1000
c000b609:	52                   	push   edx
c000b60a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b60e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b614:	99                   	cdq    
c000b615:	f7 f9                	idiv   ecx
c000b617:	50                   	push   eax
c000b618:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b61c:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b622:	e8 a1 89 00 00       	call   c0013fc8 <VAS::unlockPages(unsigned long, int)>
c000b627:	83 c4 10             	add    esp,0x10
c000b62a:	66 90                	xchg   ax,ax
c000b62c:	e8 0b af 00 00       	call   c001653c <KeRestorePreemption()>
c000b631:	85 f6                	test   esi,esi
c000b633:	74 4b                	je     c000b680 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b635:	83 ec 0c             	sub    esp,0xc
c000b638:	68 b8 3f 02 c0       	push   0xc0023fb8
c000b63d:	e8 3a b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b642:	83 c4 10             	add    esp,0x10
c000b645:	eb 39                	jmp    c000b680 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b647:	90                   	nop
c000b648:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b64d:	74 29                	je     c000b678 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b64f:	b9 00 10 00 00       	mov    ecx,0x1000
c000b654:	50                   	push   eax
c000b655:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b659:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b65f:	99                   	cdq    
c000b660:	f7 f9                	idiv   ecx
c000b662:	50                   	push   eax
c000b663:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b667:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b66d:	e8 56 89 00 00       	call   c0013fc8 <VAS::unlockPages(unsigned long, int)>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8d 76 00             	lea    esi,[esi+0x0]
c000b678:	e8 bf ae 00 00       	call   c001653c <KeRestorePreemption()>
c000b67d:	31 f6                	xor    esi,esi
c000b67f:	90                   	nop
c000b680:	83 c4 1c             	add    esp,0x1c
c000b683:	89 f0                	mov    eax,esi
c000b685:	5b                   	pop    ebx
c000b686:	5e                   	pop    esi
c000b687:	5f                   	pop    edi
c000b688:	5d                   	pop    ebp
c000b689:	c3                   	ret    

c000b68a <VCache::read(unsigned long long, int, void*)>:
c000b68a:	55                   	push   ebp
c000b68b:	57                   	push   edi
c000b68c:	bf 00 10 00 00       	mov    edi,0x1000
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	83 ec 2c             	sub    esp,0x2c
c000b696:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b69a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b69e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6aa:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ae:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6b2:	e8 5d ae 00 00       	call   c0016514 <KeDisablePreemption()>
c000b6b7:	50                   	push   eax
c000b6b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6bb:	0f af c6             	imul   eax,esi
c000b6be:	05 ff 0f 00 00       	add    eax,0xfff
c000b6c3:	99                   	cdq    
c000b6c4:	f7 ff                	idiv   edi
c000b6c6:	50                   	push   eax
c000b6c7:	55                   	push   ebp
c000b6c8:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b6ce:	e8 b9 88 00 00       	call   c0013f8c <VAS::canLockPages(unsigned long, int)>
c000b6d3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6df:	74 1f                	je     c000b700 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6e1:	50                   	push   eax
c000b6e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6e5:	0f af c6             	imul   eax,esi
c000b6e8:	05 ff 0f 00 00       	add    eax,0xfff
c000b6ed:	99                   	cdq    
c000b6ee:	f7 ff                	idiv   edi
c000b6f0:	50                   	push   eax
c000b6f1:	55                   	push   ebp
c000b6f2:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b6f8:	e8 f3 8a 00 00       	call   c00141f0 <VAS::lockPages(unsigned long, int)>
c000b6fd:	83 c4 10             	add    esp,0x10
c000b700:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b704:	74 0e                	je     c000b714 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b706:	83 ec 0c             	sub    esp,0xc
c000b709:	53                   	push   ebx
c000b70a:	e8 e1 fc ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b70f:	83 c4 10             	add    esp,0x10
c000b712:	66 90                	xchg   ax,ax
c000b714:	83 fe 01             	cmp    esi,0x1
c000b717:	0f 85 ef 00 00 00    	jne    c000b80c <VCache::read(unsigned long long, int, void*)+0x182>
c000b71d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b720:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b727:	0f 85 df 00 00 00    	jne    c000b80c <VCache::read(unsigned long long, int, void*)+0x182>
c000b72d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b730:	89 fe                	mov    esi,edi
c000b732:	f7 de                	neg    esi
c000b734:	89 f0                	mov    eax,esi
c000b736:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b73a:	c1 f8 1f             	sar    eax,0x1f
c000b73d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b741:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b745:	89 f0                	mov    eax,esi
c000b747:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b74b:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b74f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b753:	89 f2                	mov    edx,esi
c000b755:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b75a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b75e:	74 0c                	je     c000b76c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b760:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b763:	75 07                	jne    c000b76c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b765:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b768:	74 4e                	je     c000b7b8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b76a:	66 90                	xchg   ax,ax
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b773:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b776:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b779:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b77b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b77e:	57                   	push   edi
c000b77f:	52                   	push   edx
c000b780:	50                   	push   eax
c000b781:	51                   	push   ecx
c000b782:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b785:	83 c4 20             	add    esp,0x20
c000b788:	89 c7                	mov    edi,eax
c000b78a:	85 c0                	test   eax,eax
c000b78c:	74 2a                	je     c000b7b8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	68 d0 3f 02 c0       	push   0xc0023fd0
c000b796:	e8 e1 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7a3:	0f 84 b3 00 00 00    	je     c000b85c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7a9:	51                   	push   ecx
c000b7aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7ad:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b2:	e9 8d 00 00 00       	jmp    c000b844 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7b7:	90                   	nop
c000b7b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7bb:	89 ef                	mov    edi,ebp
c000b7bd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7c6:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7c9:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7cd:	0f af f1             	imul   esi,ecx
c000b7d0:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7da:	74 24                	je     c000b800 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7dc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7e1:	52                   	push   edx
c000b7e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7e5:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ea:	99                   	cdq    
c000b7eb:	f7 f9                	idiv   ecx
c000b7ed:	50                   	push   eax
c000b7ee:	55                   	push   ebp
c000b7ef:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b7f5:	e8 ce 87 00 00       	call   c0013fc8 <VAS::unlockPages(unsigned long, int)>
c000b7fa:	83 c4 10             	add    esp,0x10
c000b7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000b800:	e8 37 ad 00 00       	call   c001653c <KeRestorePreemption()>
c000b805:	31 ff                	xor    edi,edi
c000b807:	eb 5b                	jmp    c000b864 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b809:	8d 76 00             	lea    esi,[esi+0x0]
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	53                   	push   ebx
c000b810:	e8 cb fb ff ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c000b815:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b818:	8b 10                	mov    edx,DWORD PTR [eax]
c000b81a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b81d:	56                   	push   esi
c000b81e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b822:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b826:	50                   	push   eax
c000b827:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b82a:	83 c4 20             	add    esp,0x20
c000b82d:	89 c7                	mov    edi,eax
c000b82f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b834:	74 26                	je     c000b85c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b836:	50                   	push   eax
c000b837:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b83b:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b841:	8d 76 00             	lea    esi,[esi+0x0]
c000b844:	b9 00 10 00 00       	mov    ecx,0x1000
c000b849:	99                   	cdq    
c000b84a:	f7 f9                	idiv   ecx
c000b84c:	50                   	push   eax
c000b84d:	55                   	push   ebp
c000b84e:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b854:	e8 6f 87 00 00       	call   c0013fc8 <VAS::unlockPages(unsigned long, int)>
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	e8 db ac 00 00       	call   c001653c <KeRestorePreemption()>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	83 c4 2c             	add    esp,0x2c
c000b867:	89 f8                	mov    eax,edi
c000b869:	5b                   	pop    ebx
c000b86a:	5e                   	pop    esi
c000b86b:	5f                   	pop    edi
c000b86c:	5d                   	pop    ebp
c000b86d:	c3                   	ret    

c000b86e <Video::putrect(int, int, int, int, unsigned int)>:
c000b86e:	55                   	push   ebp
c000b86f:	57                   	push   edi
c000b870:	56                   	push   esi
c000b871:	53                   	push   ebx
c000b872:	83 ec 1c             	sub    esp,0x1c
c000b875:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b87d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b881:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b885:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b88d:	01 df                	add    edi,ebx
c000b88f:	39 fb                	cmp    ebx,edi
c000b891:	7d 1f                	jge    c000b8b2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b893:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b897:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b89b:	7d 12                	jge    c000b8af <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b89d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b89f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8a3:	53                   	push   ebx
c000b8a4:	55                   	push   ebp
c000b8a5:	45                   	inc    ebp
c000b8a6:	56                   	push   esi
c000b8a7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	eb e8                	jmp    c000b897 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8af:	43                   	inc    ebx
c000b8b0:	eb dd                	jmp    c000b88f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8b2:	83 c4 1c             	add    esp,0x1c
c000b8b5:	5b                   	pop    ebx
c000b8b6:	5e                   	pop    esi
c000b8b7:	5f                   	pop    edi
c000b8b8:	5d                   	pop    ebp
c000b8b9:	c3                   	ret    

c000b8ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8ba:	55                   	push   ebp
c000b8bb:	57                   	push   edi
c000b8bc:	31 ff                	xor    edi,edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8cb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8d2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8db:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8e3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ea:	01 f9                	add    ecx,edi
c000b8ec:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8f0:	7d 2f                	jge    c000b921 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8f2:	31 f6                	xor    esi,esi
c000b8f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8f8:	01 f2                	add    edx,esi
c000b8fa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8fe:	7d 1a                	jge    c000b91a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b900:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b903:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b906:	46                   	inc    esi
c000b907:	51                   	push   ecx
c000b908:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b90c:	52                   	push   edx
c000b90d:	55                   	push   ebp
c000b90e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b918:	eb da                	jmp    c000b8f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b91a:	47                   	inc    edi
c000b91b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b91f:	eb c5                	jmp    c000b8e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b921:	83 c4 1c             	add    esp,0x1c
c000b924:	5b                   	pop    ebx
c000b925:	5e                   	pop    esi
c000b926:	5f                   	pop    edi
c000b927:	5d                   	pop    ebp
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Video::blit(unsigned int*, int, int, int, int)>:
c000b92a:	55                   	push   ebp
c000b92b:	57                   	push   edi
c000b92c:	56                   	push   esi
c000b92d:	53                   	push   ebx
c000b92e:	83 ec 1c             	sub    esp,0x1c
c000b931:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b935:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b939:	85 c0                	test   eax,eax
c000b93b:	79 02                	jns    c000b93f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b93d:	31 c0                	xor    eax,eax
c000b93f:	c1 e0 02             	shl    eax,0x2
c000b942:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b94a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b94e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b952:	39 d8                	cmp    eax,ebx
c000b954:	7e 49                	jle    c000b99f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b956:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b95c:	7c 41                	jl     c000b99f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b95e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b962:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b966:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b96a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b96e:	39 f9                	cmp    ecx,edi
c000b970:	7e 22                	jle    c000b994 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b972:	83 c5 04             	add    ebp,0x4
c000b975:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b97b:	7c 14                	jl     c000b991 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b97d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b97f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b982:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b986:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b98a:	56                   	push   esi
c000b98b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	47                   	inc    edi
c000b992:	eb d2                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b998:	43                   	inc    ebx
c000b999:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b99d:	eb ab                	jmp    c000b94a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b99f:	83 c4 1c             	add    esp,0x1c
c000b9a2:	5b                   	pop    ebx
c000b9a3:	5e                   	pop    esi
c000b9a4:	5f                   	pop    edi
c000b9a5:	5d                   	pop    ebp
c000b9a6:	c3                   	ret    
c000b9a7:	90                   	nop

c000b9a8 <Video::clearScreen(unsigned int)>:
c000b9a8:	83 ec 14             	sub    esp,0x14
c000b9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b9af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b5:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000b9bb:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000b9c1:	6a 00                	push   0x0
c000b9c3:	6a 00                	push   0x0
c000b9c5:	50                   	push   eax
c000b9c6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b9c9:	83 c4 2c             	add    esp,0x2c
c000b9cc:	c3                   	ret    
c000b9cd:	90                   	nop

c000b9ce <Video::putpixel(int, int, unsigned int)>:
c000b9ce:	c7 44 24 04 08 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024008
c000b9d6:	e9 c5 42 00 00       	jmp    c000fca0 <KePanic(char const*)>
c000b9db:	90                   	nop

c000b9dc <Video::readPixelApprox(int, int)>:
c000b9dc:	83 ec 18             	sub    esp,0x18
c000b9df:	68 29 40 02 c0       	push   0xc0024029
c000b9e4:	e8 b7 42 00 00       	call   c000fca0 <KePanic(char const*)>
c000b9e9:	31 c0                	xor    eax,eax
c000b9eb:	83 c4 1c             	add    esp,0x1c
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <Video::Video(char const*)>:
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f7:	83 ec 08             	sub    esp,0x8
c000b9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fe:	50                   	push   eax
c000b9ff:	e8 b2 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	ba cc 40 02 c0       	mov    edx,0xc00240cc
c000ba0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba10:	89 10                	mov    DWORD PTR [eax],edx
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba20:	90                   	nop
c000ba21:	83 c4 0c             	add    esp,0xc
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <Video::~Video()>:
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	ba cc 40 02 c0       	mov    edx,0xc00240cc
c000ba2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba32:	89 10                	mov    DWORD PTR [eax],edx
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	83 ec 0c             	sub    esp,0xc
c000ba3b:	50                   	push   eax
c000ba3c:	e8 15 df ff ff       	call   c0009956 <Device::~Device()>
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	90                   	nop
c000ba45:	83 c4 0c             	add    esp,0xc
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <Video::~Video()>:
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	83 ec 0c             	sub    esp,0xc
c000ba50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba54:	e8 cd ff ff ff       	call   c000ba26 <Video::~Video()>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	83 ec 08             	sub    esp,0x8
c000ba5f:	68 64 01 00 00       	push   0x164
c000ba64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba68:	e8 f7 18 00 00       	call   c000d364 <operator delete(void*, unsigned long)>
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	83 c4 0c             	add    esp,0xc
c000ba73:	c3                   	ret    

c000ba74 <Video::isMonochrome()>:
c000ba74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba78:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <Video::getWidth()>:
c000ba80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba84:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <Video::getHeight()>:
c000ba8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba90:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba96:	c3                   	ret    
c000ba97:	90                   	nop

c000ba98 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba98:	55                   	push   ebp
c000ba99:	57                   	push   edi
c000ba9a:	56                   	push   esi
c000ba9b:	53                   	push   ebx
c000ba9c:	83 ec 2c             	sub    esp,0x2c
c000ba9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000baa3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000baa7:	83 f8 01             	cmp    eax,0x1
c000baaa:	19 c9                	sbb    ecx,ecx
c000baac:	31 db                	xor    ebx,ebx
c000baae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bab2:	89 cd                	mov    ebp,ecx
c000bab4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000babc:	f7 d5                	not    ebp
c000babe:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000bac4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bac8:	01 d8                	add    eax,ebx
c000baca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bace:	56                   	push   esi
c000bacf:	e8 b8 ff ff ff       	call   c000ba8c <Video::getHeight()>
c000bad4:	59                   	pop    ecx
c000bad5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bad9:	7e 70                	jle    c000bb4b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000badb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000badf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bae3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bae6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baee:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000baf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baf9:	89 f8                	mov    eax,edi
c000bafb:	83 c0 20             	add    eax,0x20
c000bafe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb02:	56                   	push   esi
c000bb03:	e8 78 ff ff ff       	call   c000ba80 <Video::getWidth()>
c000bb08:	5a                   	pop    edx
c000bb09:	39 c7                	cmp    edi,eax
c000bb0b:	7d 34                	jge    c000bb41 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb0d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb12:	74 05                	je     c000bb19 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb14:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb16:	55                   	push   ebp
c000bb17:	eb 0d                	jmp    c000bb26 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb19:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb1e:	74 12                	je     c000bb32 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb20:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb2a:	57                   	push   edi
c000bb2b:	56                   	push   esi
c000bb2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb2f:	83 c4 10             	add    esp,0x10
c000bb32:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb36:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb3a:	47                   	inc    edi
c000bb3b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb3f:	75 c1                	jne    c000bb02 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb41:	43                   	inc    ebx
c000bb42:	83 fb 20             	cmp    ebx,0x20
c000bb45:	0f 85 79 ff ff ff    	jne    c000bac4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb4b:	83 c4 2c             	add    esp,0x2c
c000bb4e:	5b                   	pop    ebx
c000bb4f:	5e                   	pop    esi
c000bb50:	5f                   	pop    edi
c000bb51:	5d                   	pop    ebp
c000bb52:	c3                   	ret    
c000bb53:	90                   	nop

c000bb54 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb54:	55                   	push   ebp
c000bb55:	57                   	push   edi
c000bb56:	56                   	push   esi
c000bb57:	53                   	push   ebx
c000bb58:	83 ec 48             	sub    esp,0x48
c000bb5b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb5f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb63:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb67:	c1 e0 08             	shl    eax,0x8
c000bb6a:	01 d0                	add    eax,edx
c000bb6c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb74:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb78:	c1 e0 08             	shl    eax,0x8
c000bb7b:	01 d0                	add    eax,edx
c000bb7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb85:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb92:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb99:	50                   	push   eax
c000bb9a:	e8 ac 3c 00 00       	call   c000f84b <malloc>
c000bb9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbab:	75 10                	jne    c000bbbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbad:	83 ec 0c             	sub    esp,0xc
c000bbb0:	68 54 40 02 c0       	push   0xc0024054
c000bbb5:	e8 e6 40 00 00       	call   c000fca0 <KePanic(char const*)>
c000bbba:	83 c4 10             	add    esp,0x10
c000bbbd:	51                   	push   ecx
c000bbbe:	51                   	push   ecx
c000bbbf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbc3:	50                   	push   eax
c000bbc4:	68 64 40 02 c0       	push   0xc0024064
c000bbc9:	e8 ae b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbce:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbd1:	83 e0 20             	and    eax,0x20
c000bbd4:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbd8:	85 c0                	test   eax,eax
c000bbda:	5e                   	pop    esi
c000bbdb:	0f 94 c0             	sete   al
c000bbde:	5f                   	pop    edi
c000bbdf:	0f b6 c0             	movzx  eax,al
c000bbe2:	be 12 00 00 00       	mov    esi,0x12
c000bbe7:	50                   	push   eax
c000bbe8:	68 6e 40 02 c0       	push   0xc002406e
c000bbed:	e8 8a b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf2:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 d0                	mov    eax,edx
c000bbfb:	85 d2                	test   edx,edx
c000bbfd:	74 11                	je     c000bc10 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bbff:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc03:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc07:	c1 fe 03             	sar    esi,0x3
c000bc0a:	0f af f1             	imul   esi,ecx
c000bc0d:	83 c6 12             	add    esi,0x12
c000bc10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc15:	74 07                	je     c000bc1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc17:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc1c:	75 12                	jne    c000bc30 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc1e:	83 ec 0c             	sub    esp,0xc
c000bc21:	68 7c 40 02 c0       	push   0xc002407c
c000bc26:	e8 51 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc2b:	e9 a0 02 00 00       	jmp    c000bed0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc30:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc34:	83 f9 02             	cmp    ecx,0x2
c000bc37:	74 0e                	je     c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc39:	83 f9 0a             	cmp    ecx,0xa
c000bc3c:	0f 84 c8 00 00 00    	je     c000bd0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc42:	e9 72 02 00 00       	jmp    c000beb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc47:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc4c:	75 0e                	jne    c000bc5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc4e:	84 c0                	test   al,al
c000bc50:	75 0a                	jne    c000bc5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc52:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc55:	83 e8 18             	sub    eax,0x18
c000bc58:	a8 f7                	test   al,0xf7
c000bc5a:	74 0d                	je     c000bc69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	68 91 40 02 c0       	push   0xc0024091
c000bc64:	e9 58 02 00 00       	jmp    c000bec1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc69:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc76:	31 c0                	xor    eax,eax
c000bc78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc7c:	89 c7                	mov    edi,eax
c000bc7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc86:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc8b:	75 15                	jne    c000bca2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc8d:	99                   	cdq    
c000bc8e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc92:	85 d2                	test   edx,edx
c000bc94:	75 0c                	jne    c000bca2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc96:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc9a:	29 c7                	sub    edi,eax
c000bc9c:	4f                   	dec    edi
c000bc9d:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bca2:	31 d2                	xor    edx,edx
c000bca4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bca8:	75 08                	jne    c000bcb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcaa:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcaf:	c1 e2 18             	shl    edx,0x18
c000bcb2:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bcb7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bcbb:	c1 e1 10             	shl    ecx,0x10
c000bcbe:	8d 47 01             	lea    eax,[edi+0x1]
c000bcc1:	89 cd                	mov    ebp,ecx
c000bcc3:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcc8:	c1 e1 08             	shl    ecx,0x8
c000bccb:	09 e9                	or     ecx,ebp
c000bccd:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcd1:	09 e9                	or     ecx,ebp
c000bcd3:	09 d1                	or     ecx,edx
c000bcd5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcd9:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bcdc:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bce0:	c1 fa 03             	sar    edx,0x3
c000bce3:	01 d6                	add    esi,edx
c000bce5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bce9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bced:	7e 04                	jle    c000bcf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bcef:	89 c7                	mov    edi,eax
c000bcf1:	eb 93                	jmp    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bcf3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bcfb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bcff:	0f 8f 77 ff ff ff    	jg     c000bc7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd05:	e9 d3 01 00 00       	jmp    c000bedd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd0a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd0f:	75 0e                	jne    c000bd1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd11:	85 d2                	test   edx,edx
c000bd13:	75 0a                	jne    c000bd1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd15:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd18:	83 e8 18             	sub    eax,0x18
c000bd1b:	a8 f7                	test   al,0xf7
c000bd1d:	74 0d                	je     c000bd2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd1f:	83 ec 0c             	sub    esp,0xc
c000bd22:	68 9f 40 02 c0       	push   0xc002409f
c000bd27:	e9 95 01 00 00       	jmp    c000bec1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd34:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd3c:	31 c9                	xor    ecx,ecx
c000bd3e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd42:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd46:	0f 8e 91 01 00 00    	jle    c000bedd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd4c:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd50:	0f 8d 87 01 00 00    	jge    c000bedd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd56:	8d 46 01             	lea    eax,[esi+0x1]
c000bd59:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd61:	83 fd 7f             	cmp    ebp,0x7f
c000bd64:	89 e8                	mov    eax,ebp
c000bd66:	0f 8e 9d 00 00 00    	jle    c000be09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd6c:	83 e0 7f             	and    eax,0x7f
c000bd6f:	31 d2                	xor    edx,edx
c000bd71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd75:	40                   	inc    eax
c000bd76:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd7e:	75 0a                	jne    c000bd8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd80:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd85:	89 ea                	mov    edx,ebp
c000bd87:	c1 e2 18             	shl    edx,0x18
c000bd8a:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd8f:	c1 e0 10             	shl    eax,0x10
c000bd92:	89 c7                	mov    edi,eax
c000bd94:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd99:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd9d:	c1 e0 08             	shl    eax,0x8
c000bda0:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bda4:	09 f8                	or     eax,edi
c000bda6:	31 f6                	xor    esi,esi
c000bda8:	09 c5                	or     ebp,eax
c000bdaa:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdaf:	09 d5                	or     ebp,edx
c000bdb1:	85 ff                	test   edi,edi
c000bdb3:	75 1d                	jne    c000bdd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdb5:	89 c8                	mov    eax,ecx
c000bdb7:	99                   	cdq    
c000bdb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdbc:	85 d2                	test   edx,edx
c000bdbe:	75 12                	jne    c000bdd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdc4:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdc8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdcc:	49                   	dec    ecx
c000bdcd:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdd6:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdd9:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bddc:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bde0:	8d 46 01             	lea    eax,[esi+0x1]
c000bde3:	7e 06                	jle    c000bdeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bde5:	89 c6                	mov    esi,eax
c000bde7:	89 d1                	mov    ecx,edx
c000bde9:	eb c6                	jmp    c000bdb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bdeb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bdef:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdf3:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bdf7:	c1 f8 03             	sar    eax,0x3
c000bdfa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bdfe:	89 d1                	mov    ecx,edx
c000be00:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be04:	e9 35 ff ff ff       	jmp    c000bd3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be09:	8d 45 01             	lea    eax,[ebp+0x1]
c000be0c:	31 f6                	xor    esi,esi
c000be0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be12:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be1b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be20:	75 1d                	jne    c000be3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be22:	89 c8                	mov    eax,ecx
c000be24:	99                   	cdq    
c000be25:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be29:	85 d2                	test   edx,edx
c000be2b:	75 12                	jne    c000be3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be31:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be35:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be39:	49                   	dec    ecx
c000be3a:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be3f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be47:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be4b:	75 10                	jne    c000be5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be51:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be56:	c1 e7 18             	shl    edi,0x18
c000be59:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be61:	8d 51 01             	lea    edx,[ecx+0x1]
c000be64:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be69:	c1 e0 10             	shl    eax,0x10
c000be6c:	89 c7                	mov    edi,eax
c000be6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be72:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be77:	c1 e0 08             	shl    eax,0x8
c000be7a:	09 f8                	or     eax,edi
c000be7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be80:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be84:	09 f8                	or     eax,edi
c000be86:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be8a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be8e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be91:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be95:	c1 f8 03             	sar    eax,0x3
c000be98:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be9c:	8d 46 01             	lea    eax,[esi+0x1]
c000be9f:	39 f5                	cmp    ebp,esi
c000bea1:	7e 09                	jle    c000beac <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000bea3:	89 c6                	mov    esi,eax
c000bea5:	89 d1                	mov    ecx,edx
c000bea7:	e9 6f ff ff ff       	jmp    c000be1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000beac:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beb0:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000beb4:	e9 45 ff ff ff       	jmp    c000bdfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000beb9:	52                   	push   edx
c000beba:	52                   	push   edx
c000bebb:	51                   	push   ecx
c000bebc:	68 ae 40 02 c0       	push   0xc00240ae
c000bec1:	e8 b6 b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bec6:	58                   	pop    eax
c000bec7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000becb:	e8 8b 39 00 00       	call   c000f85b <free>
c000bed0:	83 c4 10             	add    esp,0x10
c000bed3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bedb:	eb 14                	jmp    c000bef1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bedd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bee1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bee5:	89 18                	mov    DWORD PTR [eax],ebx
c000bee7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beef:	89 18                	mov    DWORD PTR [eax],ebx
c000bef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bef5:	83 c4 3c             	add    esp,0x3c
c000bef8:	5b                   	pop    ebx
c000bef9:	5e                   	pop    esi
c000befa:	5f                   	pop    edi
c000befb:	5d                   	pop    ebp
c000befc:	c3                   	ret    
c000befd:	90                   	nop

c000befe <Video::putTGA(int, int, unsigned char*, int)>:
c000befe:	55                   	push   ebp
c000beff:	57                   	push   edi
c000bf00:	56                   	push   esi
c000bf01:	53                   	push   ebx
c000bf02:	83 ec 28             	sub    esp,0x28
c000bf05:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf09:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf0d:	50                   	push   eax
c000bf0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf12:	50                   	push   eax
c000bf13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf1b:	57                   	push   edi
c000bf1c:	e8 33 fc ff ff       	call   c000bb54 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf21:	83 c4 20             	add    esp,0x20
c000bf24:	85 c0                	test   eax,eax
c000bf26:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf2a:	74 3a                	je     c000bf66 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf2c:	89 c6                	mov    esi,eax
c000bf2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf32:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf36:	39 d8                	cmp    eax,ebx
c000bf38:	7e 2c                	jle    c000bf66 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf42:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf46:	39 e8                	cmp    eax,ebp
c000bf48:	7e 19                	jle    c000bf63 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf4a:	83 c6 04             	add    esi,0x4
c000bf4d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf50:	85 c0                	test   eax,eax
c000bf52:	79 0c                	jns    c000bf60 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf54:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf56:	50                   	push   eax
c000bf57:	53                   	push   ebx
c000bf58:	55                   	push   ebp
c000bf59:	57                   	push   edi
c000bf5a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	45                   	inc    ebp
c000bf61:	eb db                	jmp    c000bf3e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf63:	43                   	inc    ebx
c000bf64:	eb c8                	jmp    c000bf2e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf66:	83 c4 1c             	add    esp,0x1c
c000bf69:	5b                   	pop    ebx
c000bf6a:	5e                   	pop    esi
c000bf6b:	5f                   	pop    edi
c000bf6c:	5d                   	pop    ebp
c000bf6d:	c3                   	ret    
c000bf6e:	66 90                	xchg   ax,ax

c000bf70 <ACPI::close(int, int, void*)>:
c000bf70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf75:	c3                   	ret    
c000bf76:	66 90                	xchg   ax,ax

c000bf78 <loadACPITables(unsigned char*)>:
c000bf78:	57                   	push   edi
c000bf79:	56                   	push   esi
c000bf7a:	53                   	push   ebx
c000bf7b:	83 ec 60             	sub    esp,0x60
c000bf7e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf83:	0f 84 43 02 00 00    	je     c000c1cc <loadACPITables(unsigned char*)+0x254>
c000bf89:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bf8e:	0f b6 c0             	movzx  eax,al
c000bf91:	85 c0                	test   eax,eax
c000bf93:	74 7b                	je     c000c010 <loadACPITables(unsigned char*)+0x98>
c000bf95:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf99:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfa4:	83 e8 24             	sub    eax,0x24
c000bfa7:	c1 e8 03             	shr    eax,0x3
c000bfaa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfae:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfb6:	66 90                	xchg   ax,ax
c000bfb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfbc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfc0:	0f 8d ba 00 00 00    	jge    c000c080 <loadACPITables(unsigned char*)+0x108>
c000bfc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfca:	83 c0 24             	add    eax,0x24
c000bfcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfd9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfdd:	c1 e0 03             	shl    eax,0x3
c000bfe0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfe4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfe8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfed:	89 c1                	mov    ecx,eax
c000bfef:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000bff4:	8d 50 01             	lea    edx,[eax+0x1]
c000bff7:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000bffd:	89 ca                	mov    edx,ecx
c000bfff:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c006:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c00b:	eb ab                	jmp    c000bfb8 <loadACPITables(unsigned char*)+0x40>
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c014:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c018:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c01f:	83 e8 24             	sub    eax,0x24
c000c022:	c1 e8 02             	shr    eax,0x2
c000c025:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c029:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c031:	8d 76 00             	lea    esi,[esi+0x0]
c000c034:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c038:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c03c:	7d 42                	jge    c000c080 <loadACPITables(unsigned char*)+0x108>
c000c03e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c042:	83 c0 24             	add    eax,0x24
c000c045:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c049:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c04d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c051:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c055:	c1 e0 02             	shl    eax,0x2
c000c058:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c05c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c060:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c062:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c067:	8d 50 01             	lea    edx,[eax+0x1]
c000c06a:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c070:	89 ca                	mov    edx,ecx
c000c072:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c079:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c07e:	eb b4                	jmp    c000c034 <loadACPITables(unsigned char*)+0xbc>
c000c080:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c088:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c08d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c091:	0f 8d 39 01 00 00    	jge    c000c1d0 <loadACPITables(unsigned char*)+0x258>
c000c097:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c09b:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b2:	25 ff 0f 00 00       	and    eax,0xfff
c000c0b7:	89 c6                	mov    esi,eax
c000c0b9:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	6a 01                	push   0x1
c000c0c4:	e8 6e 71 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c000c0c9:	83 c4 10             	add    esp,0x10
c000c0cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0d6:	83 ec 0c             	sub    esp,0xc
c000c0d9:	6a 01                	push   0x1
c000c0db:	6a 01                	push   0x1
c000c0dd:	50                   	push   eax
c000c0de:	52                   	push   edx
c000c0df:	53                   	push   ebx
c000c0e0:	e8 1f 7a 00 00       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0e5:	83 c4 20             	add    esp,0x20
c000c0e8:	09 f0                	or     eax,esi
c000c0ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0f2:	c1 e0 03             	shl    eax,0x3
c000c0f5:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c0fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c106:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c10e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c112:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c11a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c11e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c122:	89 c6                	mov    esi,eax
c000c124:	89 d7                	mov    edi,edx
c000c126:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c128:	89 c8                	mov    eax,ecx
c000c12a:	89 fa                	mov    edx,edi
c000c12c:	89 f3                	mov    ebx,esi
c000c12e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c132:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c13a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c13e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c141:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c145:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c149:	05 00 10 00 00       	add    eax,0x1000
c000c14e:	c1 e8 0c             	shr    eax,0xc
c000c151:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c159:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c161:	25 ff 0f 00 00       	and    eax,0xfff
c000c166:	89 c6                	mov    esi,eax
c000c168:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c16e:	83 ec 0c             	sub    esp,0xc
c000c171:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c175:	e8 bd 70 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c181:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c187:	83 ec 0c             	sub    esp,0xc
c000c18a:	6a 01                	push   0x1
c000c18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c190:	50                   	push   eax
c000c191:	52                   	push   edx
c000c192:	53                   	push   ebx
c000c193:	e8 6c 79 00 00       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c198:	83 c4 20             	add    esp,0x20
c000c19b:	09 f0                	or     eax,esi
c000c19d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a5:	83 ec 0c             	sub    esp,0xc
c000c1a8:	50                   	push   eax
c000c1a9:	e8 91 73 00 00       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1b9:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1c0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1c5:	e9 be fe ff ff       	jmp    c000c088 <loadACPITables(unsigned char*)+0x110>
c000c1ca:	66 90                	xchg   ax,ax
c000c1cc:	90                   	nop
c000c1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d0:	83 c4 60             	add    esp,0x60
c000c1d3:	5b                   	pop    ebx
c000c1d4:	5e                   	pop    esi
c000c1d5:	5f                   	pop    edi
c000c1d6:	c3                   	ret    
c000c1d7:	90                   	nop

c000c1d8 <findRSDT(unsigned char*)>:
c000c1d8:	57                   	push   edi
c000c1d9:	56                   	push   esi
c000c1da:	53                   	push   ebx
c000c1db:	83 ec 50             	sub    esp,0x50
c000c1de:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c1e3:	85 c0                	test   eax,eax
c000c1e5:	75 0d                	jne    c000c1f4 <findRSDT(unsigned char*)+0x1c>
c000c1e7:	b8 00 00 00 00       	mov    eax,0x0
c000c1ec:	e9 2b 01 00 00       	jmp    c000c31c <findRSDT(unsigned char*)+0x144>
c000c1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f4:	89 e0                	mov    eax,esp
c000c1f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c202:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c20a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c20e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c212:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c216:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c21a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c21e:	89 c6                	mov    esi,eax
c000c220:	89 d7                	mov    edi,edx
c000c222:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c224:	89 c8                	mov    eax,ecx
c000c226:	89 fa                	mov    edx,edi
c000c228:	89 f3                	mov    ebx,esi
c000c22a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c22e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c232:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c236:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c23a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c23e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c246:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c24a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c24e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c256:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c25a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c25e:	25 ff 0f 00 00       	and    eax,0xfff
c000c263:	89 c6                	mov    esi,eax
c000c265:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c26b:	83 ec 0c             	sub    esp,0xc
c000c26e:	6a 02                	push   0x2
c000c270:	e8 c2 6f 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c27c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c282:	83 ec 0c             	sub    esp,0xc
c000c285:	6a 01                	push   0x1
c000c287:	6a 02                	push   0x2
c000c289:	50                   	push   eax
c000c28a:	52                   	push   edx
c000c28b:	53                   	push   ebx
c000c28c:	e8 73 78 00 00       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c291:	83 c4 20             	add    esp,0x20
c000c294:	09 f0                	or     eax,esi
c000c296:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29e:	25 ff 0f 00 00       	and    eax,0xfff
c000c2a3:	89 c6                	mov    esi,eax
c000c2a5:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c2ab:	83 ec 0c             	sub    esp,0xc
c000c2ae:	6a 02                	push   0x2
c000c2b0:	e8 82 6f 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2c2:	83 ec 0c             	sub    esp,0xc
c000c2c5:	6a 01                	push   0x1
c000c2c7:	6a 02                	push   0x2
c000c2c9:	50                   	push   eax
c000c2ca:	52                   	push   edx
c000c2cb:	53                   	push   ebx
c000c2cc:	e8 33 78 00 00       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2d1:	83 c4 20             	add    esp,0x20
c000c2d4:	09 f0                	or     eax,esi
c000c2d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2da:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2df:	85 c0                	test   eax,eax
c000c2e1:	75 11                	jne    c000c2f4 <findRSDT(unsigned char*)+0x11c>
c000c2e3:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c2ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f2:	eb 24                	jmp    c000c318 <findRSDT(unsigned char*)+0x140>
c000c2f4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2f9:	83 f8 02             	cmp    eax,0x2
c000c2fc:	75 12                	jne    c000c310 <findRSDT(unsigned char*)+0x138>
c000c2fe:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c305:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c309:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c30d:	eb 09                	jmp    c000c318 <findRSDT(unsigned char*)+0x140>
c000c30f:	90                   	nop
c000c310:	b8 00 00 00 00       	mov    eax,0x0
c000c315:	eb 05                	jmp    c000c31c <findRSDT(unsigned char*)+0x144>
c000c317:	90                   	nop
c000c318:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c31c:	83 c4 50             	add    esp,0x50
c000c31f:	5b                   	pop    ebx
c000c320:	5e                   	pop    esi
c000c321:	5f                   	pop    edi
c000c322:	c3                   	ret    
c000c323:	90                   	nop

c000c324 <findDataTable(unsigned char*, char*)>:
c000c324:	83 ec 1c             	sub    esp,0x1c
c000c327:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c32c:	75 0a                	jne    c000c338 <findDataTable(unsigned char*, char*)+0x14>
c000c32e:	b8 00 00 00 00       	mov    eax,0x0
c000c333:	eb 5f                	jmp    c000c394 <findDataTable(unsigned char*, char*)+0x70>
c000c335:	8d 76 00             	lea    esi,[esi+0x0]
c000c338:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c340:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c345:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c349:	7d 41                	jge    c000c38c <findDataTable(unsigned char*, char*)+0x68>
c000c34b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c34f:	c1 e0 03             	shl    eax,0x3
c000c352:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c357:	83 ec 04             	sub    esp,0x4
c000c35a:	6a 04                	push   0x4
c000c35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c360:	50                   	push   eax
c000c361:	e8 1a 40 ff ff       	call   c0000380 <memcmp>
c000c366:	83 c4 10             	add    esp,0x10
c000c369:	85 c0                	test   eax,eax
c000c36b:	0f 94 c0             	sete   al
c000c36e:	0f b6 c0             	movzx  eax,al
c000c371:	85 c0                	test   eax,eax
c000c373:	74 0f                	je     c000c384 <findDataTable(unsigned char*, char*)+0x60>
c000c375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c379:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c380:	eb 12                	jmp    c000c394 <findDataTable(unsigned char*, char*)+0x70>
c000c382:	66 90                	xchg   ax,ax
c000c384:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c389:	eb b5                	jmp    c000c340 <findDataTable(unsigned char*, char*)+0x1c>
c000c38b:	90                   	nop
c000c38c:	b8 00 00 00 00       	mov    eax,0x0
c000c391:	8d 76 00             	lea    esi,[esi+0x0]
c000c394:	83 c4 1c             	add    esp,0x1c
c000c397:	c3                   	ret    

c000c398 <scanMADT()>:
c000c398:	53                   	push   ebx
c000c399:	83 ec 38             	sub    esp,0x38
c000c39c:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3a6:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3b0:	83 ec 0c             	sub    esp,0xc
c000c3b3:	68 10 41 02 c0       	push   0xc0024110
c000c3b8:	e8 bf ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3bd:	83 c4 10             	add    esp,0x10
c000c3c0:	e8 96 de 00 00       	call   c001a25b <HalFindRSDP()>
c000c3c5:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3ca:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3cf:	85 c0                	test   eax,eax
c000c3d1:	0f 84 59 04 00 00    	je     c000c830 <scanMADT()+0x498>
c000c3d7:	83 ec 0c             	sub    esp,0xc
c000c3da:	68 1e 41 02 c0       	push   0xc002411e
c000c3df:	e8 98 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e4:	83 c4 10             	add    esp,0x10
c000c3e7:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3ec:	83 ec 0c             	sub    esp,0xc
c000c3ef:	50                   	push   eax
c000c3f0:	e8 e3 fd ff ff       	call   c000c1d8 <findRSDT(unsigned char*)>
c000c3f5:	83 c4 10             	add    esp,0x10
c000c3f8:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c3fd:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c402:	85 c0                	test   eax,eax
c000c404:	0f 84 2a 04 00 00    	je     c000c834 <scanMADT()+0x49c>
c000c40a:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c410:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c415:	83 ec 04             	sub    esp,0x4
c000c418:	52                   	push   edx
c000c419:	50                   	push   eax
c000c41a:	68 c8 42 02 c0       	push   0xc00242c8
c000c41f:	e8 58 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c424:	83 c4 10             	add    esp,0x10
c000c427:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c42c:	83 ec 0c             	sub    esp,0xc
c000c42f:	50                   	push   eax
c000c430:	e8 43 fb ff ff       	call   c000bf78 <loadACPITables(unsigned char*)>
c000c435:	83 c4 10             	add    esp,0x10
c000c438:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c43d:	83 ec 08             	sub    esp,0x8
c000c440:	68 2d 41 02 c0       	push   0xc002412d
c000c445:	50                   	push   eax
c000c446:	e8 d9 fe ff ff       	call   c000c324 <findDataTable(unsigned char*, char*)>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c452:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c457:	0f 84 db 03 00 00    	je     c000c838 <scanMADT()+0x4a0>
c000c45d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c465:	8d 76 00             	lea    esi,[esi+0x0]
c000c468:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c46c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c46f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c473:	0f 87 c7 03 00 00    	ja     c000c840 <scanMADT()+0x4a8>
c000c479:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c481:	0f 87 b9 03 00 00    	ja     c000c840 <scanMADT()+0x4a8>
c000c487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c48b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c48f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c493:	8d 50 01             	lea    edx,[eax+0x1]
c000c496:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c49e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4aa:	8d 50 01             	lea    edx,[eax+0x1]
c000c4ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4b9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4bd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4c2:	83 f8 02             	cmp    eax,0x2
c000c4c5:	0f 86 71 03 00 00    	jbe    c000c83c <scanMADT()+0x4a4>
c000c4cb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4d0:	85 c0                	test   eax,eax
c000c4d2:	75 58                	jne    c000c52c <scanMADT()+0x194>
c000c4d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d8:	8d 50 01             	lea    edx,[eax+0x1]
c000c4db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4df:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4e5:	0f b6 d2             	movzx  edx,dl
c000c4e8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4ec:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4f0:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c4f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4fa:	8d 50 01             	lea    edx,[eax+0x1]
c000c4fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c501:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c507:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c50a:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c510:	0f b6 d2             	movzx  edx,dl
c000c513:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c517:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c51b:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c521:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c526:	e9 f1 02 00 00       	jmp    c000c81c <scanMADT()+0x484>
c000c52b:	90                   	nop
c000c52c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c531:	83 f8 01             	cmp    eax,0x1
c000c534:	0f 85 32 01 00 00    	jne    c000c66c <scanMADT()+0x2d4>
c000c53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c53e:	8d 50 01             	lea    edx,[eax+0x1]
c000c541:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c545:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c54b:	0f b6 d2             	movzx  edx,dl
c000c54e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c552:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c556:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c55c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c561:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c565:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c569:	01 d0                	add    eax,edx
c000c56b:	83 c0 2c             	add    eax,0x2c
c000c56e:	8a 00                	mov    al,BYTE PTR [eax]
c000c570:	0f b6 d0             	movzx  edx,al
c000c573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c577:	8d 48 01             	lea    ecx,[eax+0x1]
c000c57a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c57e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c582:	0f b6 c0             	movzx  eax,al
c000c585:	c1 e0 08             	shl    eax,0x8
c000c588:	89 d1                	mov    ecx,edx
c000c58a:	09 c1                	or     ecx,eax
c000c58c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c590:	8d 50 02             	lea    edx,[eax+0x2]
c000c593:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c597:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59b:	0f b6 c0             	movzx  eax,al
c000c59e:	c1 e0 10             	shl    eax,0x10
c000c5a1:	09 c1                	or     ecx,eax
c000c5a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a7:	8d 50 03             	lea    edx,[eax+0x3]
c000c5aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5b2:	0f b6 c0             	movzx  eax,al
c000c5b5:	c1 e0 18             	shl    eax,0x18
c000c5b8:	09 c1                	or     ecx,eax
c000c5ba:	89 ca                	mov    edx,ecx
c000c5bc:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5c1:	0f b6 c0             	movzx  eax,al
c000c5c4:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d8:	01 d0                	add    eax,edx
c000c5da:	83 c0 2c             	add    eax,0x2c
c000c5dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c5df:	0f b6 d0             	movzx  edx,al
c000c5e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5f1:	0f b6 c0             	movzx  eax,al
c000c5f4:	c1 e0 08             	shl    eax,0x8
c000c5f7:	89 d1                	mov    ecx,edx
c000c5f9:	09 c1                	or     ecx,eax
c000c5fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c602:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c606:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60a:	0f b6 c0             	movzx  eax,al
c000c60d:	c1 e0 10             	shl    eax,0x10
c000c610:	09 c1                	or     ecx,eax
c000c612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c616:	8d 50 03             	lea    edx,[eax+0x3]
c000c619:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c61d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c621:	0f b6 c0             	movzx  eax,al
c000c624:	c1 e0 18             	shl    eax,0x18
c000c627:	09 c1                	or     ecx,eax
c000c629:	89 ca                	mov    edx,ecx
c000c62b:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c630:	0f b6 c0             	movzx  eax,al
c000c633:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c63a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c63f:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c644:	83 c0 01             	add    eax,0x1
c000c647:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c64c:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c651:	0f b6 c0             	movzx  eax,al
c000c654:	83 ec 08             	sub    esp,0x8
c000c657:	50                   	push   eax
c000c658:	68 32 41 02 c0       	push   0xc0024132
c000c65d:	e8 1a a9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	e9 b2 01 00 00       	jmp    c000c81c <scanMADT()+0x484>
c000c66a:	66 90                	xchg   ax,ax
c000c66c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c671:	83 f8 02             	cmp    eax,0x2
c000c674:	0f 85 ea 00 00 00    	jne    c000c764 <scanMADT()+0x3cc>
c000c67a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c67e:	8d 50 01             	lea    edx,[eax+0x1]
c000c681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c685:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c689:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c68d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c691:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c695:	8d 50 01             	lea    edx,[eax+0x1]
c000c698:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c69c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6a4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6b0:	01 d0                	add    eax,edx
c000c6b2:	83 c0 2c             	add    eax,0x2c
c000c6b5:	8a 00                	mov    al,BYTE PTR [eax]
c000c6b7:	0f b6 d0             	movzx  edx,al
c000c6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6be:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6c9:	0f b6 c0             	movzx  eax,al
c000c6cc:	c1 e0 08             	shl    eax,0x8
c000c6cf:	89 d1                	mov    ecx,edx
c000c6d1:	09 c1                	or     ecx,eax
c000c6d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d7:	8d 50 02             	lea    edx,[eax+0x2]
c000c6da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e2:	0f b6 c0             	movzx  eax,al
c000c6e5:	c1 e0 10             	shl    eax,0x10
c000c6e8:	09 c1                	or     ecx,eax
c000c6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ee:	8d 50 03             	lea    edx,[eax+0x3]
c000c6f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6f9:	0f b6 c0             	movzx  eax,al
c000c6fc:	c1 e0 18             	shl    eax,0x18
c000c6ff:	09 c8                	or     eax,ecx
c000c701:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c705:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c70a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c70e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c712:	01 d0                	add    eax,edx
c000c714:	83 c0 2c             	add    eax,0x2c
c000c717:	8a 00                	mov    al,BYTE PTR [eax]
c000c719:	0f b6 c0             	movzx  eax,al
c000c71c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c720:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c723:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c727:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c72b:	0f b6 d2             	movzx  edx,dl
c000c72e:	c1 e2 08             	shl    edx,0x8
c000c731:	09 d0                	or     eax,edx
c000c733:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c738:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c73d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c746:	88 90 e8 67 02 c0    	mov    BYTE PTR [eax-0x3ffd9818],dl
c000c74c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c751:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c756:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c75e:	e9 b9 00 00 00       	jmp    c000c81c <scanMADT()+0x484>
c000c763:	90                   	nop
c000c764:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c769:	83 f8 04             	cmp    eax,0x4
c000c76c:	0f 85 9a 00 00 00    	jne    c000c80c <scanMADT()+0x474>
c000c772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c776:	8d 50 01             	lea    edx,[eax+0x1]
c000c779:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c77d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c781:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c785:	0f b6 c0             	movzx  eax,al
c000c788:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c78c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c794:	01 d0                	add    eax,edx
c000c796:	83 c0 2c             	add    eax,0x2c
c000c799:	8a 00                	mov    al,BYTE PTR [eax]
c000c79b:	0f b6 d0             	movzx  edx,al
c000c79e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7a2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	c1 e0 08             	shl    eax,0x8
c000c7b3:	09 d0                	or     eax,edx
c000c7b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7c2:	8d 50 01             	lea    edx,[eax+0x1]
c000c7c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7d1:	0f b6 c0             	movzx  eax,al
c000c7d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7dc:	c1 e0 08             	shl    eax,0x8
c000c7df:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7e3:	89 c1                	mov    ecx,eax
c000c7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7e9:	c1 e0 18             	shl    eax,0x18
c000c7ec:	89 c3                	mov    ebx,eax
c000c7ee:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c7f3:	8d 50 01             	lea    edx,[eax+0x1]
c000c7f6:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c7fc:	09 d9                	or     ecx,ebx
c000c7fe:	89 ca                	mov    edx,ecx
c000c800:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c807:	eb 13                	jmp    c000c81c <scanMADT()+0x484>
c000c809:	8d 76 00             	lea    esi,[esi+0x0]
c000c80c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c811:	83 f8 05             	cmp    eax,0x5
c000c814:	75 06                	jne    c000c81c <scanMADT()+0x484>
c000c816:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c81b:	90                   	nop
c000c81c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c825:	01 d0                	add    eax,edx
c000c827:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c82b:	e9 38 fc ff ff       	jmp    c000c468 <scanMADT()+0xd0>
c000c830:	90                   	nop
c000c831:	eb 0d                	jmp    c000c840 <scanMADT()+0x4a8>
c000c833:	90                   	nop
c000c834:	90                   	nop
c000c835:	eb 09                	jmp    c000c840 <scanMADT()+0x4a8>
c000c837:	90                   	nop
c000c838:	90                   	nop
c000c839:	eb 05                	jmp    c000c840 <scanMADT()+0x4a8>
c000c83b:	90                   	nop
c000c83c:	90                   	nop
c000c83d:	8d 76 00             	lea    esi,[esi+0x0]
c000c840:	83 c4 38             	add    esp,0x38
c000c843:	5b                   	pop    ebx
c000c844:	c3                   	ret    
c000c845:	90                   	nop
c000c846:	66 90                	xchg   ax,ax

c000c848 <ACPI::ACPI()>:
c000c848:	83 ec 0c             	sub    esp,0xc
c000c84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84f:	83 ec 08             	sub    esp,0x8
c000c852:	68 4e 41 02 c0       	push   0xc002414e
c000c857:	50                   	push   eax
c000c858:	e8 59 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 6c 43 02 c0       	mov    edx,0xc002436c
c000c865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c869:	89 10                	mov    DWORD PTR [eax],edx
c000c86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c87a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c888:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c892:	90                   	nop
c000c893:	83 c4 0c             	add    esp,0xc
c000c896:	c3                   	ret    
c000c897:	90                   	nop

c000c898 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c898:	83 ec 2c             	sub    esp,0x2c
c000c89b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c89f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8a3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8ab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8b0:	88 d0                	mov    al,dl
c000c8b2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8bb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8c3:	90                   	nop
c000c8c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8ce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8d2:	0f 8d b0 00 00 00    	jge    c000c988 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8e0:	83 c2 2a             	add    edx,0x2a
c000c8e3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8ec:	0f b7 c0             	movzx  eax,ax
c000c8ef:	39 c2                	cmp    edx,eax
c000c8f1:	0f 85 85 00 00 00    	jne    c000c97c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8ff:	83 c2 2a             	add    edx,0x2a
c000c902:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c906:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c90b:	0f b6 c0             	movzx  eax,al
c000c90e:	39 c2                	cmp    edx,eax
c000c910:	75 6a                	jne    c000c97c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c912:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c917:	85 c0                	test   eax,eax
c000c919:	74 3d                	je     c000c958 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c91b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c91f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c923:	83 c2 2a             	add    edx,0x2a
c000c926:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c92a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c931:	39 c2                	cmp    edx,eax
c000c933:	74 13                	je     c000c948 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c935:	83 ec 0c             	sub    esp,0xc
c000c938:	68 ec 42 02 c0       	push   0xc00242ec
c000c93d:	e8 5e 33 00 00       	call   c000fca0 <KePanic(char const*)>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	8d 76 00             	lea    esi,[esi+0x0]
c000c948:	83 ec 0c             	sub    esp,0xc
c000c94b:	68 53 41 02 c0       	push   0xc0024153
c000c950:	e8 4b 33 00 00       	call   c000fca0 <KePanic(char const*)>
c000c955:	83 c4 10             	add    esp,0x10
c000c958:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c95c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c960:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c964:	83 c2 2a             	add    edx,0x2a
c000c967:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c96b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c96d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c970:	89 01                	mov    DWORD PTR [ecx],eax
c000c972:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c975:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c97a:	66 90                	xchg   ax,ax
c000c97c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c981:	e9 3e ff ff ff       	jmp    c000c8c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c986:	66 90                	xchg   ax,ax
c000c988:	90                   	nop
c000c989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c98d:	83 c4 2c             	add    esp,0x2c
c000c990:	c2 04 00             	ret    0x4
c000c993:	90                   	nop

c000c994 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c994:	83 ec 1c             	sub    esp,0x1c
c000c997:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c99b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c99f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9a8:	88 c8                	mov    al,cl
c000c9aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9ae:	88 d0                	mov    al,dl
c000c9b0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9c5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9c9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c9db:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c9de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9e2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9eb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9f1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9f5:	83 c0 01             	add    eax,0x1
c000c9f8:	88 c1                	mov    cl,al
c000c9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fe:	83 c2 2a             	add    edx,0x2a
c000ca01:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca09:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca1a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca22:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca28:	8d 50 01             	lea    edx,[eax+0x1]
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca3f:	3d 00 02 00 00       	cmp    eax,0x200
c000ca44:	75 12                	jne    c000ca58 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca46:	83 ec 0c             	sub    esp,0xc
c000ca49:	68 62 41 02 c0       	push   0xc0024162
c000ca4e:	e8 4d 32 00 00       	call   c000fca0 <KePanic(char const*)>
c000ca53:	83 c4 10             	add    esp,0x10
c000ca56:	66 90                	xchg   ax,ax
c000ca58:	90                   	nop
c000ca59:	83 c4 1c             	add    esp,0x1c
c000ca5c:	c3                   	ret    
c000ca5d:	90                   	nop
c000ca5e:	66 90                	xchg   ax,ax

c000ca60 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca60:	b8 00 00 00 00       	mov    eax,0x0
c000ca65:	c3                   	ret    
c000ca66:	66 90                	xchg   ax,ax

c000ca68 <ACPI::detectPCI()>:
c000ca68:	53                   	push   ebx
c000ca69:	83 ec 28             	sub    esp,0x28
c000ca6c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca71:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca76:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000ca7b:	83 ec 08             	sub    esp,0x8
c000ca7e:	68 7f 41 02 c0       	push   0xc002417f
c000ca83:	50                   	push   eax
c000ca84:	e8 9b f8 ff ff       	call   c000c324 <findDataTable(unsigned char*, char*)>
c000ca89:	83 c4 10             	add    esp,0x10
c000ca8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca95:	74 0d                	je     c000caa4 <ACPI::detectPCI()+0x3c>
c000ca97:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca9c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caa1:	8d 76 00             	lea    esi,[esi+0x0]
c000caa4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000caac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab0:	8a 00                	mov    al,BYTE PTR [eax]
c000cab2:	0f b6 c0             	movzx  eax,al
c000cab5:	83 f8 01             	cmp    eax,0x1
c000cab8:	75 0e                	jne    c000cac8 <ACPI::detectPCI()+0x60>
c000caba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cabf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac4:	eb 2e                	jmp    c000caf4 <ACPI::detectPCI()+0x8c>
c000cac6:	66 90                	xchg   ax,ax
c000cac8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cacc:	8a 00                	mov    al,BYTE PTR [eax]
c000cace:	0f b6 c0             	movzx  eax,al
c000cad1:	83 f8 02             	cmp    eax,0x2
c000cad4:	75 1e                	jne    c000caf4 <ACPI::detectPCI()+0x8c>
c000cad6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cadb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cae0:	85 c0                	test   eax,eax
c000cae2:	74 10                	je     c000caf4 <ACPI::detectPCI()+0x8c>
c000cae4:	83 ec 0c             	sub    esp,0xc
c000cae7:	68 1c 43 02 c0       	push   0xc002431c
c000caec:	e8 af 31 00 00       	call   c000fca0 <KePanic(char const*)>
c000caf1:	83 c4 10             	add    esp,0x10
c000caf4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000caf8:	83 f0 01             	xor    eax,0x1
c000cafb:	0f b6 c0             	movzx  eax,al
c000cafe:	85 c0                	test   eax,eax
c000cb00:	74 46                	je     c000cb48 <ACPI::detectPCI()+0xe0>
c000cb02:	e8 29 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb10:	75 0e                	jne    c000cb20 <ACPI::detectPCI()+0xb8>
c000cb12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb1c:	eb 2a                	jmp    c000cb48 <ACPI::detectPCI()+0xe0>
c000cb1e:	66 90                	xchg   ax,ax
c000cb20:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb25:	75 21                	jne    c000cb48 <ACPI::detectPCI()+0xe0>
c000cb27:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb2c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb31:	85 c0                	test   eax,eax
c000cb33:	74 13                	je     c000cb48 <ACPI::detectPCI()+0xe0>
c000cb35:	83 ec 0c             	sub    esp,0xc
c000cb38:	68 1c 43 02 c0       	push   0xc002431c
c000cb3d:	e8 5e 31 00 00       	call   c000fca0 <KePanic(char const*)>
c000cb42:	83 c4 10             	add    esp,0x10
c000cb45:	8d 76 00             	lea    esi,[esi+0x0]
c000cb48:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb4d:	85 c0                	test   eax,eax
c000cb4f:	0f 84 87 00 00 00    	je     c000cbdc <ACPI::detectPCI()+0x174>
c000cb55:	83 ec 0c             	sub    esp,0xc
c000cb58:	68 84 41 02 c0       	push   0xc0024184
c000cb5d:	e8 57 07 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000cb62:	83 c4 10             	add    esp,0x10
c000cb65:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb6d:	83 ec 0c             	sub    esp,0xc
c000cb70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb74:	e8 d2 2c 00 00       	call   c000f84b <malloc>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	89 c3                	mov    ebx,eax
c000cb7e:	83 ec 0c             	sub    esp,0xc
c000cb81:	53                   	push   ebx
c000cb82:	e8 85 15 01 00       	call   c001e10c <PCI::PCI()>
c000cb87:	83 c4 10             	add    esp,0x10
c000cb8a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb92:	83 ec 08             	sub    esp,0x8
c000cb95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb99:	50                   	push   eax
c000cb9a:	e8 b5 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cb9f:	83 c4 10             	add    esp,0x10
c000cba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cba6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cba8:	83 c0 08             	add    eax,0x8
c000cbab:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbad:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbb2:	85 d2                	test   edx,edx
c000cbb4:	74 0a                	je     c000cbc0 <ACPI::detectPCI()+0x158>
c000cbb6:	ba 01 00 00 00       	mov    edx,0x1
c000cbbb:	eb 0b                	jmp    c000cbc8 <ACPI::detectPCI()+0x160>
c000cbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc0:	ba 02 00 00 00       	mov    edx,0x2
c000cbc5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc8:	6a 00                	push   0x0
c000cbca:	6a 00                	push   0x0
c000cbcc:	52                   	push   edx
c000cbcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbd1:	ff d0                	call   eax
c000cbd3:	83 c4 10             	add    esp,0x10
c000cbd6:	e9 91 00 00 00       	jmp    c000cc6c <ACPI::detectPCI()+0x204>
c000cbdb:	90                   	nop
c000cbdc:	83 ec 0c             	sub    esp,0xc
c000cbdf:	68 9c 41 02 c0       	push   0xc002419c
c000cbe4:	e8 d0 06 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbf3:	83 ec 0c             	sub    esp,0xc
c000cbf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbfa:	e8 4c 2c 00 00       	call   c000f84b <malloc>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	89 c3                	mov    ebx,eax
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	53                   	push   ebx
c000cc08:	e8 05 21 01 00       	call   c001ed12 <IDE::IDE()>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc18:	83 ec 08             	sub    esp,0x8
c000cc1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc1f:	50                   	push   eax
c000cc20:	e8 2f ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc3a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc47:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc56:	83 c0 08             	add    eax,0x8
c000cc59:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc5b:	6a 00                	push   0x0
c000cc5d:	6a 00                	push   0x0
c000cc5f:	6a 00                	push   0x0
c000cc61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc65:	ff d0                	call   eax
c000cc67:	83 c4 10             	add    esp,0x10
c000cc6a:	66 90                	xchg   ax,ax
c000cc6c:	90                   	nop
c000cc6d:	83 c4 28             	add    esp,0x28
c000cc70:	5b                   	pop    ebx
c000cc71:	c3                   	ret    
c000cc72:	66 90                	xchg   ax,ax

c000cc74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc74:	83 ec 0c             	sub    esp,0xc
c000cc77:	83 ec 0c             	sub    esp,0xc
c000cc7a:	68 b1 41 02 c0       	push   0xc00241b1
c000cc7f:	e8 1c 30 00 00       	call   c000fca0 <KePanic(char const*)>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	90                   	nop
c000cc88:	83 c4 0c             	add    esp,0xc
c000cc8b:	c3                   	ret    

c000cc8c <ACPI::open(int, int, void*)>:
c000cc8c:	57                   	push   edi
c000cc8d:	56                   	push   esi
c000cc8e:	53                   	push   ebx
c000cc8f:	81 ec 70 01 00 00    	sub    esp,0x170
c000cc95:	83 ec 0c             	sub    esp,0xc
c000cc98:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cc9f:	e8 c4 fd ff ff       	call   c000ca68 <ACPI::detectPCI()>
c000cca4:	83 c4 10             	add    esp,0x10
c000cca7:	83 ec 0c             	sub    esp,0xc
c000ccaa:	68 44 43 02 c0       	push   0xc0024344
c000ccaf:	e8 05 06 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	b8 4c 05 00 00       	mov    eax,0x54c
c000ccbc:	8a 00                	mov    al,BYTE PTR [eax]
c000ccbe:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000ccc5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cccd:	83 f8 01             	cmp    eax,0x1
c000ccd0:	75 12                	jne    c000cce4 <ACPI::open(int, int, void*)+0x58>
c000ccd2:	83 ec 0c             	sub    esp,0xc
c000ccd5:	68 c2 41 02 c0       	push   0xc00241c2
c000ccda:	e8 0a 8a 00 00       	call   c00156e9 <Thr::loadKernelSymbolTable(char const*)>
c000ccdf:	83 c4 10             	add    esp,0x10
c000cce2:	eb 34                	jmp    c000cd18 <ACPI::open(int, int, void*)+0x8c>
c000cce4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccec:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccf1:	75 15                	jne    c000cd08 <ACPI::open(int, int, void*)+0x7c>
c000ccf3:	83 ec 0c             	sub    esp,0xc
c000ccf6:	68 e0 41 02 c0       	push   0xc00241e0
c000ccfb:	e8 e9 89 00 00       	call   c00156e9 <Thr::loadKernelSymbolTable(char const*)>
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	eb 13                	jmp    c000cd18 <ACPI::open(int, int, void*)+0x8c>
c000cd05:	8d 76 00             	lea    esi,[esi+0x0]
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	68 fe 41 02 c0       	push   0xc00241fe
c000cd10:	e8 8b 2f 00 00       	call   c000fca0 <KePanic(char const*)>
c000cd15:	83 c4 10             	add    esp,0x10
c000cd18:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd20:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd2b:	83 ec 0c             	sub    esp,0xc
c000cd2e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd35:	e8 11 2b 00 00       	call   c000f84b <malloc>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	89 c3                	mov    ebx,eax
c000cd3f:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000cd44:	83 ec 04             	sub    esp,0x4
c000cd47:	50                   	push   eax
c000cd48:	68 18 42 02 c0       	push   0xc0024218
c000cd4d:	53                   	push   ebx
c000cd4e:	e8 37 b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd5d:	83 ec 08             	sub    esp,0x8
c000cd60:	6a 01                	push   0x1
c000cd62:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd69:	e8 3a b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd6e:	83 c4 10             	add    esp,0x10
c000cd71:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cd78:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cd80:	75 16                	jne    c000cd98 <ACPI::open(int, int, void*)+0x10c>
c000cd82:	83 ec 0c             	sub    esp,0xc
c000cd85:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd8c:	e8 75 b4 ff ff       	call   c0008206 <File::close()>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	eb 0a                	jmp    c000cda0 <ACPI::open(int, int, void*)+0x114>
c000cd96:	66 90                	xchg   ax,ax
c000cd98:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cda0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cda8:	74 1e                	je     c000cdc8 <ACPI::open(int, int, void*)+0x13c>
c000cdaa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdb3:	83 c0 08             	add    eax,0x8
c000cdb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdc2:	ff d0                	call   eax
c000cdc4:	83 c4 10             	add    esp,0x10
c000cdc7:	90                   	nop
c000cdc8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdcf:	83 f0 01             	xor    eax,0x1
c000cdd2:	0f b6 c0             	movzx  eax,al
c000cdd5:	85 c0                	test   eax,eax
c000cdd7:	74 2f                	je     c000ce08 <ACPI::open(int, int, void*)+0x17c>
c000cdd9:	83 ec 0c             	sub    esp,0xc
c000cddc:	68 36 42 02 c0       	push   0xc0024236
c000cde1:	e8 d3 04 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000cde6:	83 c4 10             	add    esp,0x10
c000cde9:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cdfe:	e8 63 66 00 00       	call   c0013466 <Virt::setupPageSwapping(int)>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	66 90                	xchg   ax,ax
c000ce08:	83 ec 0c             	sub    esp,0xc
c000ce0b:	68 51 42 02 c0       	push   0xc0024251
c000ce10:	e8 a4 04 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000ce15:	83 c4 10             	add    esp,0x10
c000ce18:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce1f:	83 ec 08             	sub    esp,0x8
c000ce22:	6a 13                	push   0x13
c000ce24:	50                   	push   eax
c000ce25:	e8 58 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce2a:	83 c4 0c             	add    esp,0xc
c000ce2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce3a:	50                   	push   eax
c000ce3b:	e8 5c 57 01 00       	call   c002259c <LinkedList<Device>::isEmpty()>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	83 f0 01             	xor    eax,0x1
c000ce46:	0f b6 c0             	movzx  eax,al
c000ce49:	85 c0                	test   eax,eax
c000ce4b:	0f 84 3b 01 00 00    	je     c000cf8c <ACPI::open(int, int, void*)+0x300>
c000ce51:	83 ec 0c             	sub    esp,0xc
c000ce54:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce5b:	50                   	push   eax
c000ce5c:	e8 57 57 01 00       	call   c00225b8 <LinkedList<Device>::getFirstElement()>
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce6b:	83 ec 0c             	sub    esp,0xc
c000ce6e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce75:	50                   	push   eax
c000ce76:	e8 45 57 01 00       	call   c00225c0 <LinkedList<Device>::removeFirst()>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce85:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ce8c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ce93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ce97:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ce9d:	ba 09 00 00 00       	mov    edx,0x9
c000cea2:	fc                   	cld    
c000cea3:	89 c7                	mov    edi,eax
c000cea5:	89 de                	mov    esi,ebx
c000cea7:	89 d1                	mov    ecx,edx
c000cea9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ceab:	83 ec 08             	sub    esp,0x8
c000ceae:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceb2:	50                   	push   eax
c000ceb3:	83 ec 24             	sub    esp,0x24
c000ceb6:	89 e0                	mov    eax,esp
c000ceb8:	89 c3                	mov    ebx,eax
c000ceba:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cebe:	ba 09 00 00 00       	mov    edx,0x9
c000cec3:	89 df                	mov    edi,ebx
c000cec5:	89 c6                	mov    esi,eax
c000cec7:	89 d1                	mov    ecx,edx
c000cec9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cecb:	e8 26 17 01 00       	call   c001e5f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ced0:	83 c4 30             	add    esp,0x30
c000ced3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ceda:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cee2:	0f 84 48 ff ff ff    	je     c000ce30 <ACPI::open(int, int, void*)+0x1a4>
c000cee8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cefd:	e8 49 29 00 00       	call   c000f84b <malloc>
c000cf02:	83 c4 10             	add    esp,0x10
c000cf05:	89 c3                	mov    ebx,eax
c000cf07:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000cf0c:	83 ec 04             	sub    esp,0x4
c000cf0f:	50                   	push   eax
c000cf10:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf17:	53                   	push   ebx
c000cf18:	e8 6d b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf1d:	83 c4 10             	add    esp,0x10
c000cf20:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf27:	83 ec 0c             	sub    esp,0xc
c000cf2a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf31:	e8 36 b5 ff ff       	call   c000846c <File::exists()>
c000cf36:	83 c4 10             	add    esp,0x10
c000cf39:	0f b6 c0             	movzx  eax,al
c000cf3c:	85 c0                	test   eax,eax
c000cf3e:	74 1c                	je     c000cf5c <ACPI::open(int, int, void*)+0x2d0>
c000cf40:	83 ec 04             	sub    esp,0x4
c000cf43:	6a 00                	push   0x0
c000cf45:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf4c:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf53:	e8 34 8f 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cf58:	83 c4 10             	add    esp,0x10
c000cf5b:	90                   	nop
c000cf5c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf64:	0f 84 c6 fe ff ff    	je     c000ce30 <ACPI::open(int, int, void*)+0x1a4>
c000cf6a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cf71:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf73:	83 c0 08             	add    eax,0x8
c000cf76:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf82:	ff d0                	call   eax
c000cf84:	83 c4 10             	add    esp,0x10
c000cf87:	e9 a4 fe ff ff       	jmp    c000ce30 <ACPI::open(int, int, void*)+0x1a4>
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cf96:	50                   	push   eax
c000cf97:	e8 fc 55 01 00       	call   c0022598 <LinkedList<Device>::~LinkedList()>
c000cf9c:	83 c4 10             	add    esp,0x10
c000cf9f:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000cfa4:	83 ec 04             	sub    esp,0x4
c000cfa7:	6a 00                	push   0x0
c000cfa9:	50                   	push   eax
c000cfaa:	68 6b 42 02 c0       	push   0xc002426b
c000cfaf:	e8 d8 8e 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cfb4:	83 c4 10             	add    esp,0x10
c000cfb7:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cfbc:	85 c0                	test   eax,eax
c000cfbe:	0f 84 1c 01 00 00    	je     c000d0e0 <ACPI::open(int, int, void*)+0x454>
c000cfc4:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000cfc9:	85 c0                	test   eax,eax
c000cfcb:	0f 84 0f 01 00 00    	je     c000d0e0 <ACPI::open(int, int, void*)+0x454>
c000cfd1:	83 ec 0c             	sub    esp,0xc
c000cfd4:	68 88 42 02 c0       	push   0xc0024288
c000cfd9:	e8 db 02 00 00       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000cfde:	83 c4 10             	add    esp,0x10
c000cfe1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cff6:	e8 50 28 00 00       	call   c000f84b <malloc>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	89 c3                	mov    ebx,eax
c000d000:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000d005:	83 ec 04             	sub    esp,0x4
c000d008:	50                   	push   eax
c000d009:	68 a5 42 02 c0       	push   0xc00242a5
c000d00e:	53                   	push   ebx
c000d00f:	e8 76 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d01e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d026:	74 20                	je     c000d048 <ACPI::open(int, int, void*)+0x3bc>
c000d028:	83 ec 0c             	sub    esp,0xc
c000d02b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d032:	e8 35 b4 ff ff       	call   c000846c <File::exists()>
c000d037:	83 c4 10             	add    esp,0x10
c000d03a:	0f b6 c0             	movzx  eax,al
c000d03d:	85 c0                	test   eax,eax
c000d03f:	74 07                	je     c000d048 <ACPI::open(int, int, void*)+0x3bc>
c000d041:	b0 01                	mov    al,0x1
c000d043:	eb 07                	jmp    c000d04c <ACPI::open(int, int, void*)+0x3c0>
c000d045:	8d 76 00             	lea    esi,[esi+0x0]
c000d048:	b0 00                	mov    al,0x0
c000d04a:	66 90                	xchg   ax,ax
c000d04c:	0f b6 c0             	movzx  eax,al
c000d04f:	85 c0                	test   eax,eax
c000d051:	74 19                	je     c000d06c <ACPI::open(int, int, void*)+0x3e0>
c000d053:	83 ec 04             	sub    esp,0x4
c000d056:	6a 00                	push   0x0
c000d058:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d05f:	68 a5 42 02 c0       	push   0xc00242a5
c000d064:	e8 23 8e 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d074:	74 2a                	je     c000d0a0 <ACPI::open(int, int, void*)+0x414>
c000d076:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d07e:	74 20                	je     c000d0a0 <ACPI::open(int, int, void*)+0x414>
c000d080:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d087:	8b 00                	mov    eax,DWORD PTR [eax]
c000d089:	83 c0 08             	add    eax,0x8
c000d08c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d08e:	83 ec 0c             	sub    esp,0xc
c000d091:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d098:	ff d0                	call   eax
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a0:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	68 c2 42 02 c0       	push   0xc00242c2
c000d0ad:	50                   	push   eax
c000d0ae:	e8 71 f2 ff ff       	call   c000c324 <findDataTable(unsigned char*, char*)>
c000d0b3:	83 c4 10             	add    esp,0x10
c000d0b6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d0bd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d0c5:	74 19                	je     c000d0e0 <ACPI::open(int, int, void*)+0x454>
c000d0c7:	83 ec 08             	sub    esp,0x8
c000d0ca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d0d1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d0d8:	e8 97 fb ff ff       	call   c000cc74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d0dd:	83 c4 10             	add    esp,0x10
c000d0e0:	b8 00 00 00 00       	mov    eax,0x0
c000d0e5:	81 c4 70 01 00 00    	add    esp,0x170
c000d0eb:	5b                   	pop    ebx
c000d0ec:	5e                   	pop    esi
c000d0ed:	5f                   	pop    edi
c000d0ee:	c3                   	ret    
c000d0ef:	90                   	nop

c000d0f0 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d0f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d0f6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d0fd:	89 c2                	mov    edx,eax
c000d0ff:	c1 fa 1f             	sar    edx,0x1f
c000d102:	83 ec 04             	sub    esp,0x4
c000d105:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d109:	51                   	push   ecx
c000d10a:	52                   	push   edx
c000d10b:	50                   	push   eax
c000d10c:	e8 2f 25 00 00       	call   c000f640 <KeItoa(long long, char*)>
c000d111:	83 c4 10             	add    esp,0x10
c000d114:	83 ec 08             	sub    esp,0x8
c000d117:	68 90 43 02 c0       	push   0xc0024390
c000d11c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d120:	50                   	push   eax
c000d121:	e8 1a 35 ff ff       	call   c0000640 <strcpy>
c000d126:	83 c4 10             	add    esp,0x10
c000d129:	83 ec 08             	sub    esp,0x8
c000d12c:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d133:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d137:	50                   	push   eax
c000d138:	e8 03 37 ff ff       	call   c0000840 <strcat>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	83 ec 08             	sub    esp,0x8
c000d143:	68 9e 43 02 c0       	push   0xc002439e
c000d148:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d14c:	50                   	push   eax
c000d14d:	e8 ee 36 ff ff       	call   c0000840 <strcat>
c000d152:	83 c4 10             	add    esp,0x10
c000d155:	83 ec 08             	sub    esp,0x8
c000d158:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d15f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d163:	50                   	push   eax
c000d164:	e8 d7 36 ff ff       	call   c0000840 <strcat>
c000d169:	83 c4 10             	add    esp,0x10
c000d16c:	83 ec 08             	sub    esp,0x8
c000d16f:	68 a1 43 02 c0       	push   0xc00243a1
c000d174:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d178:	50                   	push   eax
c000d179:	e8 c2 36 ff ff       	call   c0000840 <strcat>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	83 ec 08             	sub    esp,0x8
c000d184:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d18b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d18f:	50                   	push   eax
c000d190:	e8 ab 36 ff ff       	call   c0000840 <strcat>
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	83 ec 08             	sub    esp,0x8
c000d19b:	68 a1 43 02 c0       	push   0xc00243a1
c000d1a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1a4:	50                   	push   eax
c000d1a5:	e8 96 36 ff ff       	call   c0000840 <strcat>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	83 ec 08             	sub    esp,0x8
c000d1b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d1b4:	50                   	push   eax
c000d1b5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1b9:	50                   	push   eax
c000d1ba:	e8 81 36 ff ff       	call   c0000840 <strcat>
c000d1bf:	83 c4 10             	add    esp,0x10
c000d1c2:	83 ec 0c             	sub    esp,0xc
c000d1c5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c9:	50                   	push   eax
c000d1ca:	e8 d1 2a 00 00       	call   c000fca0 <KePanic(char const*)>
c000d1cf:	83 c4 10             	add    esp,0x10
c000d1d2:	90                   	nop
c000d1d3:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d1d9:	c3                   	ret    

c000d1da <KeInitialiseAtexit()>:
c000d1da:	83 ec 10             	sub    esp,0x10
c000d1dd:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d1e7:	68 80 00 00 00       	push   0x80
c000d1ec:	6a 00                	push   0x0
c000d1ee:	68 80 d0 02 c0       	push   0xc002d080
c000d1f3:	e8 f8 32 ff ff       	call   c00004f0 <memset>
c000d1f8:	83 c4 1c             	add    esp,0x1c
c000d1fb:	c3                   	ret    

c000d1fc <KeRegisterAtexit(void (*)(void*), void*)>:
c000d1fc:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d201:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d205:	89 14 85 80 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f80],edx
c000d20c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d210:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d217:	40                   	inc    eax
c000d218:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d21d:	83 f8 1f             	cmp    eax,0x1f
c000d220:	7e 0d                	jle    c000d22f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d222:	c7 44 24 04 a3 43 02 c0 	mov    DWORD PTR [esp+0x4],0xc00243a3
c000d22a:	e9 71 2a 00 00       	jmp    c000fca0 <KePanic(char const*)>
c000d22f:	c3                   	ret    

c000d230 <KeExecuteAtexit()>:
c000d230:	53                   	push   ebx
c000d231:	31 db                	xor    ebx,ebx
c000d233:	83 ec 08             	sub    esp,0x8
c000d236:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d23c:	7e 28                	jle    c000d266 <KeExecuteAtexit()+0x36>
c000d23e:	8b 04 9d 80 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f80]
c000d245:	85 c0                	test   eax,eax
c000d247:	74 1a                	je     c000d263 <KeExecuteAtexit()+0x33>
c000d249:	83 ec 0c             	sub    esp,0xc
c000d24c:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d253:	ff d0                	call   eax
c000d255:	c7 04 9d 80 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2f80],0x0
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	43                   	inc    ebx
c000d264:	eb d0                	jmp    c000d236 <KeExecuteAtexit()+0x6>
c000d266:	83 c4 08             	add    esp,0x8
c000d269:	5b                   	pop    ebx
c000d26a:	c3                   	ret    
c000d26b:	90                   	nop

c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d26c:	8b 15 00 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d100
c000d272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d276:	21 d0                	and    eax,edx
c000d278:	0f 95 c0             	setne  al
c000d27b:	c3                   	ret    

c000d27c <KeInitialiseBootConfigurationFlags()>:
c000d27c:	b8 00 05 00 00       	mov    eax,0x500
c000d281:	8b 00                	mov    eax,DWORD PTR [eax]
c000d283:	a3 00 d1 02 c0       	mov    ds:0xc002d100,eax
c000d288:	90                   	nop
c000d289:	c3                   	ret    

c000d28a <KeDisplaySplashScreen()>:
c000d28a:	53                   	push   ebx
c000d28b:	bb 01 00 00 00       	mov    ebx,0x1
c000d290:	83 ec 08             	sub    esp,0x8
c000d293:	43                   	inc    ebx
c000d294:	0f be 83 ba 43 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbc46]
c000d29b:	85 c0                	test   eax,eax
c000d29d:	74 15                	je     c000d2b4 <KeDisplaySplashScreen()+0x2a>
c000d29f:	83 ec 0c             	sub    esp,0xc
c000d2a2:	6a 01                	push   0x1
c000d2a4:	53                   	push   ebx
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 0f                	push   0xf
c000d2a9:	50                   	push   eax
c000d2aa:	e8 3d ea 00 00       	call   c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2af:	83 c4 20             	add    esp,0x20
c000d2b2:	eb df                	jmp    c000d293 <KeDisplaySplashScreen()+0x9>
c000d2b4:	83 c4 08             	add    esp,0x8
c000d2b7:	5b                   	pop    ebx
c000d2b8:	c3                   	ret    

c000d2b9 <KeSetBootMessage(char const*)>:
c000d2b9:	57                   	push   edi
c000d2ba:	56                   	push   esi
c000d2bb:	53                   	push   ebx
c000d2bc:	31 db                	xor    ebx,ebx
c000d2be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	6a 14                	push   0x14
c000d2c7:	53                   	push   ebx
c000d2c8:	43                   	inc    ebx
c000d2c9:	6a 00                	push   0x0
c000d2cb:	6a 00                	push   0x0
c000d2cd:	6a 20                	push   0x20
c000d2cf:	e8 18 ea 00 00       	call   c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2d4:	83 c4 20             	add    esp,0x20
c000d2d7:	83 fb 50             	cmp    ebx,0x50
c000d2da:	75 e6                	jne    c000d2c2 <KeSetBootMessage(char const*)+0x9>
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	56                   	push   esi
c000d2e0:	e8 8b 32 ff ff       	call   c0000570 <strlen>
c000d2e5:	83 c4 10             	add    esp,0x10
c000d2e8:	29 c3                	sub    ebx,eax
c000d2ea:	d1 eb                	shr    ebx,1
c000d2ec:	89 df                	mov    edi,ebx
c000d2ee:	89 f0                	mov    eax,esi
c000d2f0:	29 d8                	sub    eax,ebx
c000d2f2:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d2f6:	85 c0                	test   eax,eax
c000d2f8:	74 16                	je     c000d310 <KeSetBootMessage(char const*)+0x57>
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	6a 14                	push   0x14
c000d2ff:	57                   	push   edi
c000d300:	47                   	inc    edi
c000d301:	6a 00                	push   0x0
c000d303:	6a 07                	push   0x7
c000d305:	50                   	push   eax
c000d306:	e8 e1 e9 00 00       	call   c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d30b:	83 c4 20             	add    esp,0x20
c000d30e:	eb de                	jmp    c000d2ee <KeSetBootMessage(char const*)+0x35>
c000d310:	5b                   	pop    ebx
c000d311:	5e                   	pop    esi
c000d312:	5f                   	pop    edi
c000d313:	c3                   	ret    

c000d314 <__cxa_atexit>:
c000d314:	31 c0                	xor    eax,eax
c000d316:	c3                   	ret    

c000d317 <__cxa_finalize>:
c000d317:	c3                   	ret    

c000d318 <__stack_chk_fail>:
c000d318:	55                   	push   ebp
c000d319:	89 e5                	mov    ebp,esp
c000d31b:	83 ec 10             	sub    esp,0x10
c000d31e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d321:	68 cf 43 02 c0       	push   0xc00243cf
c000d326:	e8 51 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d32b:	58                   	pop    eax
c000d32c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d32f:	5a                   	pop    edx
c000d330:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d333:	68 cf 43 02 c0       	push   0xc00243cf
c000d338:	e8 3f 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d33d:	c7 04 24 d7 43 02 c0 	mov    DWORD PTR [esp],0xc00243d7
c000d344:	e8 57 29 00 00       	call   c000fca0 <KePanic(char const*)>
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	c9                   	leave  
c000d34d:	c3                   	ret    

c000d34e <__cxa_pure_virtual>:
c000d34e:	83 ec 18             	sub    esp,0x18
c000d351:	68 ef 43 02 c0       	push   0xc00243ef
c000d356:	e8 45 29 00 00       	call   c000fca0 <KePanic(char const*)>
c000d35b:	83 c4 1c             	add    esp,0x1c
c000d35e:	c3                   	ret    

c000d35f <operator new[](unsigned long)>:
c000d35f:	e9 e7 24 00 00       	jmp    c000f84b <malloc>

c000d364 <operator delete(void*, unsigned long)>:
c000d364:	e9 02 25 00 00       	jmp    c000f86b <rfree>

c000d369 <operator delete[](void*)>:
c000d369:	e9 fd 24 00 00       	jmp    c000f86b <rfree>

c000d36e <operator delete[](void*, unsigned long)>:
c000d36e:	e9 f8 24 00 00       	jmp    c000f86b <rfree>
c000d373:	90                   	nop

c000d374 <CUnlockScheduler>:
c000d374:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000d37c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000d381:	85 c0                	test   eax,eax
c000d383:	75 03                	jne    c000d388 <CUnlockScheduler+0x14>
c000d385:	fb                   	sti    
c000d386:	66 90                	xchg   ax,ax
c000d388:	90                   	nop
c000d389:	c3                   	ret    
c000d38a:	66 90                	xchg   ax,ax

c000d38c <CLockScheduler>:
c000d38c:	fa                   	cli    
c000d38d:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000d392:	83 c0 01             	add    eax,0x1
c000d395:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000d39a:	90                   	nop
c000d39b:	c3                   	ret    

c000d39c <CPrintf>:
c000d39c:	83 ec 0c             	sub    esp,0xc
c000d39f:	83 ec 08             	sub    esp,0x8
c000d3a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3a6:	68 02 44 02 c0       	push   0xc0024402
c000d3ab:	e8 cc 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3b0:	83 c4 10             	add    esp,0x10
c000d3b3:	90                   	nop
c000d3b4:	83 c4 0c             	add    esp,0xc
c000d3b7:	c3                   	ret    

c000d3b8 <CmOpen(char const*)>:
c000d3b8:	57                   	push   edi
c000d3b9:	56                   	push   esi
c000d3ba:	53                   	push   ebx
c000d3bb:	83 ec 1c             	sub    esp,0x1c
c000d3be:	6a 30                	push   0x30
c000d3c0:	e8 86 24 00 00       	call   c000f84b <malloc>
c000d3c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d3cc:	89 c3                	mov    ebx,eax
c000d3ce:	e8 78 24 00 00       	call   c000f84b <malloc>
c000d3d3:	83 c4 0c             	add    esp,0xc
c000d3d6:	89 c6                	mov    esi,eax
c000d3d8:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000d3de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3e2:	50                   	push   eax
c000d3e3:	e8 a2 ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d3e8:	83 c4 0c             	add    esp,0xc
c000d3eb:	89 33                	mov    DWORD PTR [ebx],esi
c000d3ed:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d3f1:	50                   	push   eax
c000d3f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3f6:	50                   	push   eax
c000d3f7:	56                   	push   esi
c000d3f8:	e8 ad b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d3fd:	5a                   	pop    edx
c000d3fe:	59                   	pop    ecx
c000d3ff:	6a 01                	push   0x1
c000d401:	ff 33                	push   DWORD PTR [ebx]
c000d403:	e8 a0 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d408:	5e                   	pop    esi
c000d409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40d:	e8 39 24 00 00       	call   c000f84b <malloc>
c000d412:	5a                   	pop    edx
c000d413:	89 c7                	mov    edi,eax
c000d415:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d419:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d41b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d41d:	56                   	push   esi
c000d41e:	57                   	push   edi
c000d41f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d423:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d427:	50                   	push   eax
c000d428:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d42b:	83 c4 14             	add    esp,0x14
c000d42e:	ff 33                	push   DWORD PTR [ebx]
c000d430:	e8 d1 ad ff ff       	call   c0008206 <File::close()>
c000d435:	59                   	pop    ecx
c000d436:	58                   	pop    eax
c000d437:	6a 13                	push   0x13
c000d439:	ff 33                	push   DWORD PTR [ebx]
c000d43b:	e8 68 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d440:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d442:	8b 10                	mov    edx,DWORD PTR [eax]
c000d444:	89 34 24             	mov    DWORD PTR [esp],esi
c000d447:	57                   	push   edi
c000d448:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d44c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d450:	50                   	push   eax
c000d451:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d454:	83 c4 14             	add    esp,0x14
c000d457:	57                   	push   edi
c000d458:	e8 fe 23 00 00       	call   c000f85b <free>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d463:	75 10                	jne    c000d475 <CmOpen(char const*)+0xbd>
c000d465:	83 ec 0c             	sub    esp,0xc
c000d468:	68 05 44 02 c0       	push   0xc0024405
c000d46d:	e8 2e 28 00 00       	call   c000fca0 <KePanic(char const*)>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d478:	50                   	push   eax
c000d479:	6a 00                	push   0x0
c000d47b:	6a 00                	push   0x0
c000d47d:	ff 33                	push   DWORD PTR [ebx]
c000d47f:	e8 e2 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d484:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d486:	8b 10                	mov    edx,DWORD PTR [eax]
c000d488:	89 34 24             	mov    DWORD PTR [esp],esi
c000d48b:	57                   	push   edi
c000d48c:	6a 00                	push   0x0
c000d48e:	6a 2b                	push   0x2b
c000d490:	50                   	push   eax
c000d491:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d494:	83 c4 1c             	add    esp,0x1c
c000d497:	6a 00                	push   0x0
c000d499:	6a 00                	push   0x0
c000d49b:	ff 33                	push   DWORD PTR [ebx]
c000d49d:	e8 c4 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4a2:	83 c4 0c             	add    esp,0xc
c000d4a5:	6a 08                	push   0x8
c000d4a7:	68 27 44 02 c0       	push   0xc0024427
c000d4ac:	57                   	push   edi
c000d4ad:	e8 ce 2e ff ff       	call   c0000380 <memcmp>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	85 c0                	test   eax,eax
c000d4b7:	74 10                	je     c000d4c9 <CmOpen(char const*)+0x111>
c000d4b9:	83 ec 0c             	sub    esp,0xc
c000d4bc:	68 30 44 02 c0       	push   0xc0024430
c000d4c1:	e8 da 27 00 00       	call   c000fca0 <KePanic(char const*)>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d4cd:	89 d8                	mov    eax,ebx
c000d4cf:	83 c4 10             	add    esp,0x10
c000d4d2:	5b                   	pop    ebx
c000d4d3:	5e                   	pop    esi
c000d4d4:	5f                   	pop    edi
c000d4d5:	c3                   	ret    

c000d4d6 <CmClose(Reghive_Tag*)>:
c000d4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4da:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d4de:	74 0b                	je     c000d4eb <CmClose(Reghive_Tag*)+0x15>
c000d4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4e6:	e9 1b ad ff ff       	jmp    c0008206 <File::close()>
c000d4eb:	c3                   	ret    

c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4ec:	53                   	push   ebx
c000d4ed:	83 ec 18             	sub    esp,0x18
c000d4f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4f4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4f8:	74 29                	je     c000d523 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4fa:	50                   	push   eax
c000d4fb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d500:	99                   	cdq    
c000d501:	52                   	push   edx
c000d502:	50                   	push   eax
c000d503:	ff 33                	push   DWORD PTR [ebx]
c000d505:	e8 5c ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d50a:	5a                   	pop    edx
c000d50b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d50d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d511:	8b 10                	mov    edx,DWORD PTR [eax]
c000d513:	51                   	push   ecx
c000d514:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d518:	6a 00                	push   0x0
c000d51a:	6a 2b                	push   0x2b
c000d51c:	50                   	push   eax
c000d51d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d520:	83 c4 20             	add    esp,0x20
c000d523:	83 c4 18             	add    esp,0x18
c000d526:	5b                   	pop    ebx
c000d527:	c3                   	ret    

c000d528 <CmGetString(Reghive_Tag*, int, char*)>:
c000d528:	55                   	push   ebp
c000d529:	57                   	push   edi
c000d52a:	56                   	push   esi
c000d52b:	53                   	push   ebx
c000d52c:	31 db                	xor    ebx,ebx
c000d52e:	83 ec 70             	sub    esp,0x70
c000d531:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d538:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d53c:	50                   	push   eax
c000d53d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d544:	55                   	push   ebp
c000d545:	e8 a2 ff ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d552:	c1 e0 08             	shl    eax,0x8
c000d555:	89 c2                	mov    edx,eax
c000d557:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d55c:	09 d0                	or     eax,edx
c000d55e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d563:	c1 e0 08             	shl    eax,0x8
c000d566:	09 d0                	or     eax,edx
c000d568:	74 25                	je     c000d58f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d56a:	6b fb 0d             	imul   edi,ebx,0xd
c000d56d:	52                   	push   edx
c000d56e:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d572:	52                   	push   edx
c000d573:	50                   	push   eax
c000d574:	55                   	push   ebp
c000d575:	e8 72 ff ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d57a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d57e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d585:	b9 27 00 00 00       	mov    ecx,0x27
c000d58a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	83 c3 03             	add    ebx,0x3
c000d592:	83 fb 15             	cmp    ebx,0x15
c000d595:	75 b6                	jne    c000d54d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d597:	83 c4 6c             	add    esp,0x6c
c000d59a:	5b                   	pop    ebx
c000d59b:	5e                   	pop    esi
c000d59c:	5f                   	pop    edi
c000d59d:	5d                   	pop    ebp
c000d59e:	c3                   	ret    

c000d59f <CmEnterDirectory(Reghive_Tag*, int)>:
c000d59f:	83 ec 40             	sub    esp,0x40
c000d5a2:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5a6:	50                   	push   eax
c000d5a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5af:	e8 38 ff ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5b4:	83 c4 10             	add    esp,0x10
c000d5b7:	83 c8 ff             	or     eax,0xffffffff
c000d5ba:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d5bf:	75 19                	jne    c000d5da <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d5c1:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d5c6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d5cb:	c1 e0 08             	shl    eax,0x8
c000d5ce:	09 c2                	or     edx,eax
c000d5d0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d5d5:	c1 e0 10             	shl    eax,0x10
c000d5d8:	09 d0                	or     eax,edx
c000d5da:	83 c4 3c             	add    esp,0x3c
c000d5dd:	c3                   	ret    

c000d5de <CmGetNext(Reghive_Tag*, int)>:
c000d5de:	83 ec 40             	sub    esp,0x40
c000d5e1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5e5:	50                   	push   eax
c000d5e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5ee:	e8 f9 fe ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5f3:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d5f8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d5fd:	c1 e0 08             	shl    eax,0x8
c000d600:	09 c2                	or     edx,eax
c000d602:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d607:	83 c4 4c             	add    esp,0x4c
c000d60a:	c1 e0 10             	shl    eax,0x10
c000d60d:	09 d0                	or     eax,edx
c000d60f:	c3                   	ret    

c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d610:	53                   	push   ebx
c000d611:	83 ec 18             	sub    esp,0x18
c000d614:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d618:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d61c:	74 29                	je     c000d647 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d61e:	50                   	push   eax
c000d61f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d624:	99                   	cdq    
c000d625:	52                   	push   edx
c000d626:	50                   	push   eax
c000d627:	ff 33                	push   DWORD PTR [ebx]
c000d629:	e8 38 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d62e:	5a                   	pop    edx
c000d62f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d631:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d635:	8b 10                	mov    edx,DWORD PTR [eax]
c000d637:	51                   	push   ecx
c000d638:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d63c:	6a 00                	push   0x0
c000d63e:	6a 2b                	push   0x2b
c000d640:	50                   	push   eax
c000d641:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d644:	83 c4 20             	add    esp,0x20
c000d647:	83 c4 18             	add    esp,0x18
c000d64a:	5b                   	pop    ebx
c000d64b:	c3                   	ret    

c000d64c <CmFreeExtent(Reghive_Tag*, int)>:
c000d64c:	53                   	push   ebx
c000d64d:	83 ec 3c             	sub    esp,0x3c
c000d650:	6a 2b                	push   0x2b
c000d652:	6a 00                	push   0x0
c000d654:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d658:	53                   	push   ebx
c000d659:	e8 92 2e ff ff       	call   c00004f0 <memset>
c000d65e:	83 c4 0c             	add    esp,0xc
c000d661:	53                   	push   ebx
c000d662:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d66a:	e8 a1 ff ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d66f:	83 c4 48             	add    esp,0x48
c000d672:	5b                   	pop    ebx
c000d673:	c3                   	ret    

c000d674 <CmUpdateHeader(Reghive_Tag*)>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d67f:	74 10                	je     c000d691 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d681:	52                   	push   edx
c000d682:	8d 50 05             	lea    edx,[eax+0x5]
c000d685:	52                   	push   edx
c000d686:	6a 00                	push   0x0
c000d688:	50                   	push   eax
c000d689:	e8 82 ff ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d68e:	83 c4 10             	add    esp,0x10
c000d691:	83 c4 0c             	add    esp,0xc
c000d694:	c3                   	ret    

c000d695 <CmExpand(Reghive_Tag*, int)>:
c000d695:	57                   	push   edi
c000d696:	56                   	push   esi
c000d697:	83 ce ff             	or     esi,0xffffffff
c000d69a:	53                   	push   ebx
c000d69b:	83 ec 30             	sub    esp,0x30
c000d69e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6a2:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6a6:	74 5f                	je     c000d707 <CmExpand(Reghive_Tag*, int)+0x72>
c000d6a8:	31 d2                	xor    edx,edx
c000d6aa:	31 f6                	xor    esi,esi
c000d6ac:	50                   	push   eax
c000d6ad:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6b1:	52                   	push   edx
c000d6b2:	50                   	push   eax
c000d6b3:	ff 33                	push   DWORD PTR [ebx]
c000d6b5:	e8 ac ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d6ba:	83 c4 0c             	add    esp,0xc
c000d6bd:	6a 2b                	push   0x2b
c000d6bf:	6a 00                	push   0x0
c000d6c1:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d6c5:	57                   	push   edi
c000d6c6:	e8 25 2e ff ff       	call   c00004f0 <memset>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d6d2:	7d 1b                	jge    c000d6ef <CmExpand(Reghive_Tag*, int)+0x5a>
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6d9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d6dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6df:	46                   	inc    esi
c000d6e0:	51                   	push   ecx
c000d6e1:	57                   	push   edi
c000d6e2:	6a 00                	push   0x0
c000d6e4:	6a 2b                	push   0x2b
c000d6e6:	50                   	push   eax
c000d6e7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6ea:	83 c4 20             	add    esp,0x20
c000d6ed:	eb df                	jmp    c000d6ce <CmExpand(Reghive_Tag*, int)+0x39>
c000d6ef:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d6f3:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	01 f2                	add    edx,esi
c000d6fb:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d6fe:	53                   	push   ebx
c000d6ff:	e8 70 ff ff ff       	call   c000d674 <CmUpdateHeader(Reghive_Tag*)>
c000d704:	83 c4 10             	add    esp,0x10
c000d707:	83 c4 30             	add    esp,0x30
c000d70a:	89 f0                	mov    eax,esi
c000d70c:	5b                   	pop    ebx
c000d70d:	5e                   	pop    esi
c000d70e:	5f                   	pop    edi
c000d70f:	c3                   	ret    

c000d710 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d710:	55                   	push   ebp
c000d711:	57                   	push   edi
c000d712:	56                   	push   esi
c000d713:	53                   	push   ebx
c000d714:	83 cb ff             	or     ebx,0xffffffff
c000d717:	83 ec 1c             	sub    esp,0x1c
c000d71a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d71e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d722:	74 68                	je     c000d78c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d724:	be 2b 00 00 00       	mov    esi,0x2b
c000d729:	51                   	push   ecx
c000d72a:	31 ff                	xor    edi,edi
c000d72c:	6a 00                	push   0x0
c000d72e:	31 db                	xor    ebx,ebx
c000d730:	6a 00                	push   0x0
c000d732:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d735:	e8 2c ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d73a:	83 c4 10             	add    esp,0x10
c000d73d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d740:	76 3b                	jbe    c000d77d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d742:	83 ec 0c             	sub    esp,0xc
c000d745:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d748:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d74c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d74e:	51                   	push   ecx
c000d74f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d753:	51                   	push   ecx
c000d754:	6a 00                	push   0x0
c000d756:	6a 01                	push   0x1
c000d758:	50                   	push   eax
c000d759:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d75c:	83 c4 20             	add    esp,0x20
c000d75f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d764:	74 26                	je     c000d78c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d766:	43                   	inc    ebx
c000d767:	52                   	push   edx
c000d768:	57                   	push   edi
c000d769:	56                   	push   esi
c000d76a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d76d:	e8 f4 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d772:	83 c6 2b             	add    esi,0x2b
c000d775:	83 d7 00             	adc    edi,0x0
c000d778:	83 c4 10             	add    esp,0x10
c000d77b:	eb c0                	jmp    c000d73d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d77d:	50                   	push   eax
c000d77e:	50                   	push   eax
c000d77f:	6a 40                	push   0x40
c000d781:	55                   	push   ebp
c000d782:	e8 0e ff ff ff       	call   c000d695 <CmExpand(Reghive_Tag*, int)>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	89 c3                	mov    ebx,eax
c000d78c:	83 c4 1c             	add    esp,0x1c
c000d78f:	89 d8                	mov    eax,ebx
c000d791:	5b                   	pop    ebx
c000d792:	5e                   	pop    esi
c000d793:	5f                   	pop    edi
c000d794:	5d                   	pop    ebp
c000d795:	c3                   	ret    

c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d796:	55                   	push   ebp
c000d797:	57                   	push   edi
c000d798:	56                   	push   esi
c000d799:	53                   	push   ebx
c000d79a:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7a0:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d7a7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7ae:	e8 5d ff ff ff       	call   c000d710 <CmFindUnusedExtent(Reghive_Tag*)>
c000d7b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7b7:	83 c4 0c             	add    esp,0xc
c000d7ba:	6a 2b                	push   0x2b
c000d7bc:	6a 00                	push   0x0
c000d7be:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d7c2:	55                   	push   ebp
c000d7c3:	e8 28 2d ff ff       	call   c00004f0 <memset>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	85 db                	test   ebx,ebx
c000d7cd:	74 12                	je     c000d7e1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d7cf:	51                   	push   ecx
c000d7d0:	55                   	push   ebp
c000d7d1:	53                   	push   ebx
c000d7d2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7d9:	e8 0e fd ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7e5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7ec:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d7f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7f3:	85 db                	test   ebx,ebx
c000d7f5:	74 49                	je     c000d840 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d7f7:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d7fc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d801:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d805:	c1 e0 08             	shl    eax,0x8
c000d808:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d80e:	09 c8                	or     eax,ecx
c000d810:	74 11                	je     c000d823 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d812:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d816:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d81a:	c1 e8 10             	shr    eax,0x10
c000d81d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d821:	eb 0f                	jmp    c000d832 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d823:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d828:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d82d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d832:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d836:	c1 ea 08             	shr    edx,0x8
c000d839:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d83e:	eb 0f                	jmp    c000d84f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d840:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d845:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d84a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d84f:	52                   	push   edx
c000d850:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d854:	50                   	push   eax
c000d855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d859:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d860:	e8 ab fd ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d865:	83 c4 10             	add    esp,0x10
c000d868:	85 db                	test   ebx,ebx
c000d86a:	74 12                	je     c000d87e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d86c:	50                   	push   eax
c000d86d:	55                   	push   ebp
c000d86e:	53                   	push   ebx
c000d86f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d876:	e8 95 fd ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d87b:	83 c4 10             	add    esp,0x10
c000d87e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d882:	83 c4 7c             	add    esp,0x7c
c000d885:	5b                   	pop    ebx
c000d886:	5e                   	pop    esi
c000d887:	5f                   	pop    edi
c000d888:	5d                   	pop    ebp
c000d889:	c3                   	ret    

c000d88a <CmSetString(Reghive_Tag*, int, char const*)>:
c000d88a:	55                   	push   ebp
c000d88b:	57                   	push   edi
c000d88c:	56                   	push   esi
c000d88d:	53                   	push   ebx
c000d88e:	bb 27 00 00 00       	mov    ebx,0x27
c000d893:	81 ec 88 00 00 00    	sub    esp,0x88
c000d899:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d8a0:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d8a7:	e8 c4 2c ff ff       	call   c0000570 <strlen>
c000d8ac:	8d 48 26             	lea    ecx,[eax+0x26]
c000d8af:	89 c8                	mov    eax,ecx
c000d8b1:	99                   	cdq    
c000d8b2:	f7 fb                	idiv   ebx
c000d8b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d8c1:	7e 10                	jle    c000d8d3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d8c3:	83 ec 0c             	sub    esp,0xc
c000d8c6:	68 4b 44 02 c0       	push   0xc002444b
c000d8cb:	e8 d0 23 00 00       	call   c000fca0 <KePanic(char const*)>
c000d8d0:	83 c4 10             	add    esp,0x10
c000d8d3:	31 ff                	xor    edi,edi
c000d8d5:	50                   	push   eax
c000d8d6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d8da:	53                   	push   ebx
c000d8db:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8e2:	56                   	push   esi
c000d8e3:	e8 04 fc ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d8ef:	89 d0                	mov    eax,edx
c000d8f1:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d8f5:	c1 e0 08             	shl    eax,0x8
c000d8f8:	09 c2                	or     edx,eax
c000d8fa:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d8fe:	c1 e2 08             	shl    edx,0x8
c000d901:	09 c2                	or     edx,eax
c000d903:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d907:	7e 76                	jle    c000d97f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d909:	85 d2                	test   edx,edx
c000d90b:	75 25                	jne    c000d932 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d90d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d912:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d916:	50                   	push   eax
c000d917:	6a 00                	push   0x0
c000d919:	6a 00                	push   0x0
c000d91b:	56                   	push   esi
c000d91c:	e8 75 fe ff ff       	call   c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	89 c2                	mov    edx,eax
c000d926:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d929:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d92c:	c1 f8 10             	sar    eax,0x10
c000d92f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d932:	55                   	push   ebp
c000d933:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d937:	55                   	push   ebp
c000d938:	52                   	push   edx
c000d939:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d93d:	56                   	push   esi
c000d93e:	e8 a9 fb ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d943:	83 c4 0c             	add    esp,0xc
c000d946:	6a 27                	push   0x27
c000d948:	6a 00                	push   0x0
c000d94a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d94e:	51                   	push   ecx
c000d94f:	e8 9c 2b ff ff       	call   c00004f0 <memset>
c000d954:	83 c4 0c             	add    esp,0xc
c000d957:	6b c7 27             	imul   eax,edi,0x27
c000d95a:	6a 27                	push   0x27
c000d95c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d963:	50                   	push   eax
c000d964:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d968:	51                   	push   ecx
c000d969:	e8 12 2d ff ff       	call   c0000680 <strncpy>
c000d96e:	83 c4 0c             	add    esp,0xc
c000d971:	55                   	push   ebp
c000d972:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d976:	52                   	push   edx
c000d977:	56                   	push   esi
c000d978:	e8 93 fc ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d97d:	eb 19                	jmp    c000d998 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d97f:	85 d2                	test   edx,edx
c000d981:	74 18                	je     c000d99b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d983:	51                   	push   ecx
c000d984:	51                   	push   ecx
c000d985:	52                   	push   edx
c000d986:	56                   	push   esi
c000d987:	e8 c0 fc ff ff       	call   c000d64c <CmFreeExtent(Reghive_Tag*, int)>
c000d98c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d990:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d994:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d998:	83 c4 10             	add    esp,0x10
c000d99b:	47                   	inc    edi
c000d99c:	83 c3 03             	add    ebx,0x3
c000d99f:	83 ff 07             	cmp    edi,0x7
c000d9a2:	0f 85 43 ff ff ff    	jne    c000d8eb <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d9a8:	50                   	push   eax
c000d9a9:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d9ad:	50                   	push   eax
c000d9ae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d9b5:	56                   	push   esi
c000d9b6:	e8 55 fc ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9bb:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d9c1:	5b                   	pop    ebx
c000d9c2:	5e                   	pop    esi
c000d9c3:	5f                   	pop    edi
c000d9c4:	5d                   	pop    ebp
c000d9c5:	c3                   	ret    

c000d9c6 <CmGetMatch(char*, char*, bool, bool*)>:
c000d9c6:	56                   	push   esi
c000d9c7:	53                   	push   ebx
c000d9c8:	50                   	push   eax
c000d9c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9cd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d9d2:	74 25                	je     c000d9f9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d9d4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9d7:	31 db                	xor    ebx,ebx
c000d9d9:	50                   	push   eax
c000d9da:	50                   	push   eax
c000d9db:	8d 04 9d 00 68 02 c0 	lea    eax,[ebx*4-0x3ffd9800]
c000d9e2:	50                   	push   eax
c000d9e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e7:	e8 64 2d ff ff       	call   c0000750 <strcmp>
c000d9ec:	83 c4 10             	add    esp,0x10
c000d9ef:	85 c0                	test   eax,eax
c000d9f1:	74 2e                	je     c000da21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9f3:	43                   	inc    ebx
c000d9f4:	83 fb 3f             	cmp    ebx,0x3f
c000d9f7:	75 e0                	jne    c000d9d9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d9f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9fc:	31 db                	xor    ebx,ebx
c000d9fe:	8d 04 9d 00 68 02 c0 	lea    eax,[ebx*4-0x3ffd9800]
c000da05:	51                   	push   ecx
c000da06:	51                   	push   ecx
c000da07:	50                   	push   eax
c000da08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da0c:	e8 3f 2d ff ff       	call   c0000750 <strcmp>
c000da11:	83 c4 10             	add    esp,0x10
c000da14:	85 c0                	test   eax,eax
c000da16:	74 09                	je     c000da21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da18:	43                   	inc    ebx
c000da19:	83 fb 3f             	cmp    ebx,0x3f
c000da1c:	75 e0                	jne    c000d9fe <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da1e:	83 cb ff             	or     ebx,0xffffffff
c000da21:	89 d8                	mov    eax,ebx
c000da23:	5a                   	pop    edx
c000da24:	5b                   	pop    ebx
c000da25:	5e                   	pop    esi
c000da26:	c3                   	ret    

c000da27 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da27:	55                   	push   ebp
c000da28:	31 c0                	xor    eax,eax
c000da2a:	57                   	push   edi
c000da2b:	56                   	push   esi
c000da2c:	53                   	push   ebx
c000da2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da37:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da3b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da42:	83 fd 1f             	cmp    ebp,0x1f
c000da45:	7f 0b                	jg     c000da52 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da47:	0f b6 c2             	movzx  eax,dl
c000da4a:	d3 e0                	shl    eax,cl
c000da4c:	09 07                	or     DWORD PTR [edi],eax
c000da4e:	b0 01                	mov    al,0x1
c000da50:	01 33                	add    DWORD PTR [ebx],esi
c000da52:	5b                   	pop    ebx
c000da53:	5e                   	pop    esi
c000da54:	5f                   	pop    edi
c000da55:	5d                   	pop    ebp
c000da56:	c3                   	ret    

c000da57 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da57:	57                   	push   edi
c000da58:	56                   	push   esi
c000da59:	53                   	push   ebx
c000da5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da62:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da66:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da6a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da6c:	7c 17                	jl     c000da85 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da6e:	8b 17                	mov    edx,DWORD PTR [edi]
c000da70:	b8 01 00 00 00       	mov    eax,0x1
c000da75:	d3 e0                	shl    eax,cl
c000da77:	48                   	dec    eax
c000da78:	21 d0                	and    eax,edx
c000da7a:	d3 ea                	shr    edx,cl
c000da7c:	89 17                	mov    DWORD PTR [edi],edx
c000da7e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da80:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da83:	eb 05                	jmp    c000da8a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da85:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da88:	31 c0                	xor    eax,eax
c000da8a:	5b                   	pop    ebx
c000da8b:	5e                   	pop    esi
c000da8c:	5f                   	pop    edi
c000da8d:	c3                   	ret    

c000da8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da8e:	83 ec 40             	sub    esp,0x40
c000da91:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da95:	50                   	push   eax
c000da96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da9e:	e8 49 fa ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daa3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000daa7:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000daab:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000daaf:	89 10                	mov    DWORD PTR [eax],edx
c000dab1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000dab4:	83 c4 4c             	add    esp,0x4c
c000dab7:	c3                   	ret    

c000dab8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000dab8:	55                   	push   ebp
c000dab9:	57                   	push   edi
c000daba:	56                   	push   esi
c000dabb:	53                   	push   ebx
c000dabc:	83 ec 40             	sub    esp,0x40
c000dabf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000dac3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dac7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dacb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000dacf:	53                   	push   ebx
c000dad0:	56                   	push   esi
c000dad1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dad5:	e8 12 fa ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dada:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000dade:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000dae2:	83 c4 0c             	add    esp,0xc
c000dae5:	53                   	push   ebx
c000dae6:	56                   	push   esi
c000dae7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000daeb:	e8 20 fb ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000daf0:	83 c4 4c             	add    esp,0x4c
c000daf3:	5b                   	pop    ebx
c000daf4:	5e                   	pop    esi
c000daf5:	5f                   	pop    edi
c000daf6:	5d                   	pop    ebp
c000daf7:	c3                   	ret    

c000daf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000daf8:	55                   	push   ebp
c000daf9:	57                   	push   edi
c000dafa:	56                   	push   esi
c000dafb:	31 f6                	xor    esi,esi
c000dafd:	53                   	push   ebx
c000dafe:	31 db                	xor    ebx,ebx
c000db00:	83 ec 40             	sub    esp,0x40
c000db03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db13:	6a 12                	push   0x12
c000db15:	68 ee 00 00 00       	push   0xee
c000db1a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db1e:	e8 cd 29 ff ff       	call   c00004f0 <memset>
c000db23:	83 c4 10             	add    esp,0x10
c000db26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db2a:	6a 08                	push   0x8
c000db2c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db30:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db34:	50                   	push   eax
c000db35:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db39:	55                   	push   ebp
c000db3a:	57                   	push   edi
c000db3b:	e8 e7 fe ff ff       	call   c000da27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db40:	83 c4 10             	add    esp,0x10
c000db43:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db47:	50                   	push   eax
c000db48:	6a 06                	push   0x6
c000db4a:	55                   	push   ebp
c000db4b:	57                   	push   edi
c000db4c:	e8 06 ff ff ff       	call   c000da57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db59:	74 07                	je     c000db62 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db5b:	46                   	inc    esi
c000db5c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db60:	eb e1                	jmp    c000db43 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db62:	43                   	inc    ebx
c000db63:	83 fb 12             	cmp    ebx,0x12
c000db66:	75 c2                	jne    c000db2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db6c:	31 db                	xor    ebx,ebx
c000db6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db71:	50                   	push   eax
c000db72:	50                   	push   eax
c000db73:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db78:	43                   	inc    ebx
c000db79:	8d 04 85 00 68 02 c0 	lea    eax,[eax*4-0x3ffd9800]
c000db80:	50                   	push   eax
c000db81:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db85:	e8 b6 2c ff ff       	call   c0000840 <strcat>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	83 fb 18             	cmp    ebx,0x18
c000db90:	75 df                	jne    c000db71 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db92:	83 c4 3c             	add    esp,0x3c
c000db95:	31 c0                	xor    eax,eax
c000db97:	5b                   	pop    ebx
c000db98:	5e                   	pop    esi
c000db99:	5f                   	pop    edi
c000db9a:	5d                   	pop    ebp
c000db9b:	c3                   	ret    

c000db9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db9c:	83 ec 40             	sub    esp,0x40
c000db9f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dba3:	50                   	push   eax
c000dba4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dba8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbac:	e8 3b f9 ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dbb1:	58                   	pop    eax
c000dbb2:	5a                   	pop    edx
c000dbb3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dbb7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dbbb:	50                   	push   eax
c000dbbc:	e8 37 ff ff ff       	call   c000daf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dbc1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dbc6:	83 c4 4c             	add    esp,0x4c
c000dbc9:	c3                   	ret    

c000dbca <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dbca:	55                   	push   ebp
c000dbcb:	57                   	push   edi
c000dbcc:	56                   	push   esi
c000dbcd:	53                   	push   ebx
c000dbce:	31 db                	xor    ebx,ebx
c000dbd0:	83 ec 70             	sub    esp,0x70
c000dbd3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dbda:	6a 30                	push   0x30
c000dbdc:	6a 00                	push   0x0
c000dbde:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dbe2:	56                   	push   esi
c000dbe3:	e8 08 29 ff ff       	call   c00004f0 <memset>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	83 ec 0c             	sub    esp,0xc
c000dbee:	57                   	push   edi
c000dbef:	e8 7c 29 ff ff       	call   c0000570 <strlen>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	39 d8                	cmp    eax,ebx
c000dbf9:	76 16                	jbe    c000dc11 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dbfb:	83 ec 0c             	sub    esp,0xc
c000dbfe:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc02:	50                   	push   eax
c000dc03:	e8 28 2d ff ff       	call   c0000930 <toupper>
c000dc08:	83 c4 10             	add    esp,0x10
c000dc0b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc0e:	43                   	inc    ebx
c000dc0f:	eb da                	jmp    c000dbeb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc11:	31 f6                	xor    esi,esi
c000dc13:	52                   	push   edx
c000dc14:	31 ff                	xor    edi,edi
c000dc16:	6a 18                	push   0x18
c000dc18:	6a 3f                	push   0x3f
c000dc1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc1e:	50                   	push   eax
c000dc1f:	e8 cc 28 ff ff       	call   c00004f0 <memset>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc2b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc2f:	84 c0                	test   al,al
c000dc31:	0f 84 b0 00 00 00    	je     c000dce7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc37:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc3b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc40:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc44:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc49:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc4c:	83 ec 0c             	sub    esp,0xc
c000dc4f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc53:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc57:	53                   	push   ebx
c000dc58:	e8 13 29 ff ff       	call   c0000570 <strlen>
c000dc5d:	83 c4 10             	add    esp,0x10
c000dc60:	85 c0                	test   eax,eax
c000dc62:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc66:	74 0b                	je     c000dc73 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc68:	50                   	push   eax
c000dc69:	6a 01                	push   0x1
c000dc6b:	53                   	push   ebx
c000dc6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc70:	50                   	push   eax
c000dc71:	eb 0a                	jmp    c000dc7d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc73:	50                   	push   eax
c000dc74:	6a 00                	push   0x0
c000dc76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc7a:	50                   	push   eax
c000dc7b:	6a 00                	push   0x0
c000dc7d:	e8 44 fd ff ff       	call   c000d9c6 <CmGetMatch(char*, char*, bool, bool*)>
c000dc82:	83 c4 10             	add    esp,0x10
c000dc85:	83 f8 ff             	cmp    eax,0xffffffff
c000dc88:	75 1a                	jne    c000dca4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	68 60 44 02 c0       	push   0xc0024460
c000dc92:	e8 09 20 00 00       	call   c000fca0 <KePanic(char const*)>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	b8 02 00 00 00       	mov    eax,0x2
c000dc9f:	e9 bc 00 00 00       	jmp    c000dd60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dca4:	83 ff 18             	cmp    edi,0x18
c000dca7:	75 1a                	jne    c000dcc3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dca9:	83 ec 0c             	sub    esp,0xc
c000dcac:	68 75 44 02 c0       	push   0xc0024475
c000dcb1:	e8 ea 1f 00 00       	call   c000fca0 <KePanic(char const*)>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	b8 01 00 00 00       	mov    eax,0x1
c000dcbe:	e9 9d 00 00 00       	jmp    c000dd60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcc3:	47                   	inc    edi
c000dcc4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcc9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dccd:	74 02                	je     c000dcd1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dccf:	89 ee                	mov    esi,ebp
c000dcd1:	83 ec 0c             	sub    esp,0xc
c000dcd4:	53                   	push   ebx
c000dcd5:	e8 96 28 ff ff       	call   c0000570 <strlen>
c000dcda:	83 c4 10             	add    esp,0x10
c000dcdd:	85 c0                	test   eax,eax
c000dcdf:	74 06                	je     c000dce7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dce1:	46                   	inc    esi
c000dce2:	e9 40 ff ff ff       	jmp    c000dc27 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dce7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dcef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dcf7:	31 f6                	xor    esi,esi
c000dcf9:	50                   	push   eax
c000dcfa:	31 ff                	xor    edi,edi
c000dcfc:	6a 12                	push   0x12
c000dcfe:	68 ee 00 00 00       	push   0xee
c000dd03:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd0a:	e8 e1 27 ff ff       	call   c00004f0 <memset>
c000dd0f:	83 c4 10             	add    esp,0x10
c000dd12:	83 fe 17             	cmp    esi,0x17
c000dd15:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd19:	7e 26                	jle    c000dd41 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd1b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd1f:	50                   	push   eax
c000dd20:	6a 08                	push   0x8
c000dd22:	55                   	push   ebp
c000dd23:	53                   	push   ebx
c000dd24:	e8 2e fd ff ff       	call   c000da57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd29:	83 c4 10             	add    esp,0x10
c000dd2c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd31:	74 26                	je     c000dd59 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd33:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd3a:	4e                   	dec    esi
c000dd3b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd3e:	47                   	inc    edi
c000dd3f:	eb 1c                	jmp    c000dd5d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd41:	6a 06                	push   0x6
c000dd43:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd48:	50                   	push   eax
c000dd49:	55                   	push   ebp
c000dd4a:	53                   	push   ebx
c000dd4b:	e8 d7 fc ff ff       	call   c000da27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd50:	83 c4 10             	add    esp,0x10
c000dd53:	84 c0                	test   al,al
c000dd55:	75 06                	jne    c000dd5d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd57:	eb c2                	jmp    c000dd1b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd59:	31 c0                	xor    eax,eax
c000dd5b:	eb 03                	jmp    c000dd60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd5d:	46                   	inc    esi
c000dd5e:	eb b2                	jmp    c000dd12 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd60:	83 c4 6c             	add    esp,0x6c
c000dd63:	5b                   	pop    ebx
c000dd64:	5e                   	pop    esi
c000dd65:	5f                   	pop    edi
c000dd66:	5d                   	pop    ebp
c000dd67:	c3                   	ret    

c000dd68 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd68:	53                   	push   ebx
c000dd69:	83 ec 3c             	sub    esp,0x3c
c000dd6c:	6a 2b                	push   0x2b
c000dd6e:	6a 00                	push   0x0
c000dd70:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd74:	53                   	push   ebx
c000dd75:	e8 76 27 ff ff       	call   c00004f0 <memset>
c000dd7a:	58                   	pop    eax
c000dd7b:	5a                   	pop    edx
c000dd7c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd80:	50                   	push   eax
c000dd81:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd85:	e8 40 fe ff ff       	call   c000dbca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd8a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd8f:	83 c4 0c             	add    esp,0xc
c000dd92:	6a 15                	push   0x15
c000dd94:	6a 00                	push   0x0
c000dd96:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd9a:	50                   	push   eax
c000dd9b:	e8 50 27 ff ff       	call   c00004f0 <memset>
c000dda0:	53                   	push   ebx
c000dda1:	6a 00                	push   0x0
c000dda3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dda7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddab:	e8 e6 f9 ff ff       	call   c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddb0:	83 c4 58             	add    esp,0x58
c000ddb3:	5b                   	pop    ebx
c000ddb4:	c3                   	ret    

c000ddb5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000ddb5:	56                   	push   esi
c000ddb6:	53                   	push   ebx
c000ddb7:	83 ec 48             	sub    esp,0x48
c000ddba:	6a 12                	push   0x12
c000ddbc:	68 ff 00 00 00       	push   0xff
c000ddc1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000ddc5:	56                   	push   esi
c000ddc6:	e8 25 27 ff ff       	call   c00004f0 <memset>
c000ddcb:	5a                   	pop    edx
c000ddcc:	59                   	pop    ecx
c000ddcd:	56                   	push   esi
c000ddce:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddd2:	e8 f3 fd ff ff       	call   c000dbca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddd7:	83 c4 10             	add    esp,0x10
c000ddda:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ddde:	85 db                	test   ebx,ebx
c000dde0:	74 42                	je     c000de24 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dde2:	50                   	push   eax
c000dde3:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dde7:	50                   	push   eax
c000dde8:	53                   	push   ebx
c000dde9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dded:	e8 fa f6 ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddf2:	83 c4 0c             	add    esp,0xc
c000ddf5:	6a 12                	push   0x12
c000ddf7:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ddfb:	50                   	push   eax
c000ddfc:	56                   	push   esi
c000ddfd:	e8 7e 25 ff ff       	call   c0000380 <memcmp>
c000de02:	83 c4 10             	add    esp,0x10
c000de05:	85 c0                	test   eax,eax
c000de07:	74 1e                	je     c000de27 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de09:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de0e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de13:	c1 e3 08             	shl    ebx,0x8
c000de16:	09 d8                	or     eax,ebx
c000de18:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de1d:	c1 e3 10             	shl    ebx,0x10
c000de20:	09 c3                	or     ebx,eax
c000de22:	eb ba                	jmp    c000ddde <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de24:	83 cb ff             	or     ebx,0xffffffff
c000de27:	89 d8                	mov    eax,ebx
c000de29:	83 c4 44             	add    esp,0x44
c000de2c:	5b                   	pop    ebx
c000de2d:	5e                   	pop    esi
c000de2e:	c3                   	ret    

c000de2f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de2f:	57                   	push   edi
c000de30:	56                   	push   esi
c000de31:	53                   	push   ebx
c000de32:	83 ec 34             	sub    esp,0x34
c000de35:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de39:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de3d:	6a 2b                	push   0x2b
c000de3f:	6a 00                	push   0x0
c000de41:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de45:	53                   	push   ebx
c000de46:	e8 a5 26 ff ff       	call   c00004f0 <memset>
c000de4b:	58                   	pop    eax
c000de4c:	5a                   	pop    edx
c000de4d:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de51:	50                   	push   eax
c000de52:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de56:	e8 6f fd ff ff       	call   c000dbca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de5b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de5f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de63:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de67:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de6b:	53                   	push   ebx
c000de6c:	6a 00                	push   0x0
c000de6e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de72:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de76:	e8 1b f9 ff ff       	call   c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de7b:	83 c4 50             	add    esp,0x50
c000de7e:	5b                   	pop    ebx
c000de7f:	5e                   	pop    esi
c000de80:	5f                   	pop    edi
c000de81:	c3                   	ret    

c000de82 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de82:	55                   	push   ebp
c000de83:	57                   	push   edi
c000de84:	56                   	push   esi
c000de85:	53                   	push   ebx
c000de86:	83 ec 40             	sub    esp,0x40
c000de89:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de8d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de91:	6a 2b                	push   0x2b
c000de93:	6a 00                	push   0x0
c000de95:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de99:	56                   	push   esi
c000de9a:	e8 51 26 ff ff       	call   c00004f0 <memset>
c000de9f:	5f                   	pop    edi
c000dea0:	89 ef                	mov    edi,ebp
c000dea2:	58                   	pop    eax
c000dea3:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dea7:	50                   	push   eax
c000dea8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000deac:	e8 19 fd ff ff       	call   c000dbca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000deb1:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000deb6:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000debb:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000dec0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	85 ed                	test   ebp,ebp
c000deca:	74 14                	je     c000dee0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000decc:	51                   	push   ecx
c000decd:	51                   	push   ecx
c000dece:	57                   	push   edi
c000decf:	53                   	push   ebx
c000ded0:	e8 09 f7 ff ff       	call   c000d5de <CmGetNext(Reghive_Tag*, int)>
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	85 c0                	test   eax,eax
c000deda:	74 04                	je     c000dee0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dedc:	89 c7                	mov    edi,eax
c000dede:	eb e8                	jmp    c000dec8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000dee0:	56                   	push   esi
c000dee1:	6a 00                	push   0x0
c000dee3:	57                   	push   edi
c000dee4:	53                   	push   ebx
c000dee5:	e8 ac f8 ff ff       	call   c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000deea:	83 c4 0c             	add    esp,0xc
c000deed:	89 c7                	mov    edi,eax
c000deef:	56                   	push   esi
c000def0:	50                   	push   eax
c000def1:	53                   	push   ebx
c000def2:	e8 f5 f5 ff ff       	call   c000d4ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000def7:	58                   	pop    eax
c000def8:	5a                   	pop    edx
c000def9:	6a 6c                	push   0x6c
c000defb:	6a 00                	push   0x0
c000defd:	6a 00                	push   0x0
c000deff:	68 86 44 02 c0       	push   0xc0024486
c000df04:	57                   	push   edi
c000df05:	53                   	push   ebx
c000df06:	e8 24 ff ff ff       	call   c000de2f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df0b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df0f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df13:	c1 e8 10             	shr    eax,0x10
c000df16:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df1a:	83 c4 1c             	add    esp,0x1c
c000df1d:	56                   	push   esi
c000df1e:	57                   	push   edi
c000df1f:	53                   	push   ebx
c000df20:	e8 eb f6 ff ff       	call   c000d610 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df25:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df2a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df2f:	c1 e0 08             	shl    eax,0x8
c000df32:	09 c2                	or     edx,eax
c000df34:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df39:	83 c4 4c             	add    esp,0x4c
c000df3c:	c1 e0 10             	shl    eax,0x10
c000df3f:	5b                   	pop    ebx
c000df40:	09 d0                	or     eax,edx
c000df42:	5e                   	pop    esi
c000df43:	5f                   	pop    edi
c000df44:	5d                   	pop    ebp
c000df45:	c3                   	ret    

c000df46 <zStrtok(char*, char const*)>:
c000df46:	55                   	push   ebp
c000df47:	57                   	push   edi
c000df48:	56                   	push   esi
c000df49:	53                   	push   ebx
c000df4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df52:	85 db                	test   ebx,ebx
c000df54:	74 2f                	je     c000df85 <zStrtok(char*, char const*)+0x3f>
c000df56:	85 c0                	test   eax,eax
c000df58:	75 09                	jne    c000df63 <zStrtok(char*, char const*)+0x1d>
c000df5a:	a1 04 d1 02 c0       	mov    eax,ds:0xc002d104
c000df5f:	85 c0                	test   eax,eax
c000df61:	74 50                	je     c000dfb3 <zStrtok(char*, char const*)+0x6d>
c000df63:	31 c9                	xor    ecx,ecx
c000df65:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df69:	74 03                	je     c000df6e <zStrtok(char*, char const*)+0x28>
c000df6b:	41                   	inc    ecx
c000df6c:	eb f7                	jmp    c000df65 <zStrtok(char*, char const*)+0x1f>
c000df6e:	31 d2                	xor    edx,edx
c000df70:	39 ca                	cmp    edx,ecx
c000df72:	74 15                	je     c000df89 <zStrtok(char*, char const*)+0x43>
c000df74:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df78:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df7b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df7e:	39 ee                	cmp    esi,ebp
c000df80:	74 13                	je     c000df95 <zStrtok(char*, char const*)+0x4f>
c000df82:	42                   	inc    edx
c000df83:	eb eb                	jmp    c000df70 <zStrtok(char*, char const*)+0x2a>
c000df85:	31 c0                	xor    eax,eax
c000df87:	eb 2a                	jmp    c000dfb3 <zStrtok(char*, char const*)+0x6d>
c000df89:	c7 05 04 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d104,0x0
c000df93:	eb 1e                	jmp    c000dfb3 <zStrtok(char*, char const*)+0x6d>
c000df95:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df98:	39 ce                	cmp    esi,ecx
c000df9a:	75 0a                	jne    c000dfa6 <zStrtok(char*, char const*)+0x60>
c000df9c:	40                   	inc    eax
c000df9d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c000dfa2:	89 d8                	mov    eax,ebx
c000dfa4:	eb 0d                	jmp    c000dfb3 <zStrtok(char*, char const*)+0x6d>
c000dfa6:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dfaa:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dfad:	89 15 04 d1 02 c0    	mov    DWORD PTR ds:0xc002d104,edx
c000dfb3:	5b                   	pop    ebx
c000dfb4:	5e                   	pop    esi
c000dfb5:	5f                   	pop    edi
c000dfb6:	5d                   	pop    ebp
c000dfb7:	c3                   	ret    

c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000dfb8:	57                   	push   edi
c000dfb9:	56                   	push   esi
c000dfba:	53                   	push   ebx
c000dfbb:	81 ec 08 01 00 00    	sub    esp,0x108
c000dfc1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dfc8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dfcf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000dfd3:	53                   	push   ebx
c000dfd4:	e8 67 26 ff ff       	call   c0000640 <strcpy>
c000dfd9:	59                   	pop    ecx
c000dfda:	5e                   	pop    esi
c000dfdb:	68 1e 53 02 c0       	push   0xc002531e
c000dfe0:	53                   	push   ebx
c000dfe1:	bb 01 00 00 00       	mov    ebx,0x1
c000dfe6:	e8 5b ff ff ff       	call   c000df46 <zStrtok(char*, char const*)>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	85 c0                	test   eax,eax
c000dff0:	74 3b                	je     c000e02d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dff2:	52                   	push   edx
c000dff3:	50                   	push   eax
c000dff4:	6a 01                	push   0x1
c000dff6:	57                   	push   edi
c000dff7:	e8 b9 fd ff ff       	call   c000ddb5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000dffc:	59                   	pop    ecx
c000dffd:	89 c3                	mov    ebx,eax
c000dfff:	5e                   	pop    esi
c000e000:	68 1e 53 02 c0       	push   0xc002531e
c000e005:	6a 00                	push   0x0
c000e007:	e8 3a ff ff ff       	call   c000df46 <zStrtok(char*, char const*)>
c000e00c:	83 c4 10             	add    esp,0x10
c000e00f:	89 c6                	mov    esi,eax
c000e011:	85 c0                	test   eax,eax
c000e013:	74 18                	je     c000e02d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e015:	52                   	push   edx
c000e016:	52                   	push   edx
c000e017:	53                   	push   ebx
c000e018:	57                   	push   edi
c000e019:	e8 81 f5 ff ff       	call   c000d59f <CmEnterDirectory(Reghive_Tag*, int)>
c000e01e:	83 c4 10             	add    esp,0x10
c000e021:	89 c3                	mov    ebx,eax
c000e023:	83 f8 ff             	cmp    eax,0xffffffff
c000e026:	74 05                	je     c000e02d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e028:	50                   	push   eax
c000e029:	56                   	push   esi
c000e02a:	53                   	push   ebx
c000e02b:	eb c9                	jmp    c000dff6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e02d:	81 c4 00 01 00 00    	add    esp,0x100
c000e033:	89 d8                	mov    eax,ebx
c000e035:	5b                   	pop    ebx
c000e036:	5e                   	pop    esi
c000e037:	5f                   	pop    edi
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <Computer::close(int, int, void*)>:
c000e03a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e03f:	c3                   	ret    

c000e040 <Computer::Computer()>:
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e047:	83 ec 08             	sub    esp,0x8
c000e04a:	68 8c 44 02 c0       	push   0xc002448c
c000e04f:	50                   	push   eax
c000e050:	e8 61 bb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	ba e4 44 02 c0       	mov    edx,0xc00244e4
c000e05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e061:	89 10                	mov    DWORD PTR [eax],edx
c000e063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e067:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e075:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e07f:	90                   	nop
c000e080:	83 c4 0c             	add    esp,0xc
c000e083:	c3                   	ret    

c000e084 <Computer::open(int, int, void*)>:
c000e084:	56                   	push   esi
c000e085:	53                   	push   ebx
c000e086:	83 ec 04             	sub    esp,0x4
c000e089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e08d:	39 1d 08 d1 02 c0    	cmp    DWORD PTR ds:0xc002d108,ebx
c000e093:	74 10                	je     c000e0a5 <Computer::open(int, int, void*)+0x21>
c000e095:	83 ec 0c             	sub    esp,0xc
c000e098:	68 b0 44 02 c0       	push   0xc00244b0
c000e09d:	e8 fe 1b 00 00       	call   c000fca0 <KePanic(char const*)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	83 ec 0c             	sub    esp,0xc
c000e0a8:	68 78 11 00 00       	push   0x1178
c000e0ad:	e8 99 17 00 00       	call   c000f84b <malloc>
c000e0b2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0b5:	89 c6                	mov    esi,eax
c000e0b7:	e8 32 cc 00 00       	call   c001acee <CPU::CPU()>
c000e0bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e0c0:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e0c6:	50                   	push   eax
c000e0c7:	6a 00                	push   0x0
c000e0c9:	6a 00                	push   0x0
c000e0cb:	56                   	push   esi
c000e0cc:	e8 ff cd 00 00       	call   c001aed0 <CPU::open(int, int, void*)>
c000e0d1:	83 c4 14             	add    esp,0x14
c000e0d4:	68 95 44 02 c0       	push   0xc0024495
c000e0d9:	e8 db f1 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000e0de:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e0e5:	e8 61 17 00 00       	call   c000f84b <malloc>
c000e0ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0ed:	89 c6                	mov    esi,eax
c000e0ef:	e8 54 e7 ff ff       	call   c000c848 <ACPI::ACPI()>
c000e0f4:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e0fa:	5a                   	pop    edx
c000e0fb:	59                   	pop    ecx
c000e0fc:	56                   	push   esi
c000e0fd:	53                   	push   ebx
c000e0fe:	e8 51 b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e103:	5e                   	pop    esi
c000e104:	58                   	pop    eax
c000e105:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e10b:	50                   	push   eax
c000e10c:	53                   	push   ebx
c000e10d:	e8 42 b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e112:	83 c4 14             	add    esp,0x14
c000e115:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e11a:	5b                   	pop    ebx
c000e11b:	5e                   	pop    esi
c000e11c:	c3                   	ret    

c000e11d <KeCalculateCRC32(unsigned char*, int)>:
c000e11d:	53                   	push   ebx
c000e11e:	83 c8 ff             	or     eax,0xffffffff
c000e121:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e125:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e129:	01 cb                	add    ebx,ecx
c000e12b:	39 d9                	cmp    ecx,ebx
c000e12d:	74 15                	je     c000e144 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e12f:	41                   	inc    ecx
c000e130:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e133:	31 c2                	xor    edx,eax
c000e135:	c1 e8 08             	shr    eax,0x8
c000e138:	0f b6 d2             	movzx  edx,dl
c000e13b:	33 04 95 00 69 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9700]
c000e142:	eb e7                	jmp    c000e12b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e144:	f7 d0                	not    eax
c000e146:	5b                   	pop    ebx
c000e147:	c3                   	ret    

c000e148 <EnvVarContainer::getEnv(char const*)>:
c000e148:	57                   	push   edi
c000e149:	56                   	push   esi
c000e14a:	53                   	push   ebx
c000e14b:	31 db                	xor    ebx,ebx
c000e14d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e151:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e153:	7e 2b                	jle    c000e180 <EnvVarContainer::getEnv(char const*)+0x38>
c000e155:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e15c:	50                   	push   eax
c000e15d:	50                   	push   eax
c000e15e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e161:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e168:	e8 e3 25 ff ff       	call   c0000750 <strcmp>
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	85 c0                	test   eax,eax
c000e172:	75 09                	jne    c000e17d <EnvVarContainer::getEnv(char const*)+0x35>
c000e174:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e177:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e17b:	eb 05                	jmp    c000e182 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e17d:	43                   	inc    ebx
c000e17e:	eb d1                	jmp    c000e151 <EnvVarContainer::getEnv(char const*)+0x9>
c000e180:	31 c0                	xor    eax,eax
c000e182:	5b                   	pop    ebx
c000e183:	5e                   	pop    esi
c000e184:	5f                   	pop    edi
c000e185:	c3                   	ret    

c000e186 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e186:	55                   	push   ebp
c000e187:	57                   	push   edi
c000e188:	56                   	push   esi
c000e189:	53                   	push   ebx
c000e18a:	83 ec 28             	sub    esp,0x28
c000e18d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e191:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e195:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e199:	56                   	push   esi
c000e19a:	e8 d1 23 ff ff       	call   c0000570 <strlen>
c000e19f:	40                   	inc    eax
c000e1a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1a3:	e8 a3 16 00 00       	call   c000f84b <malloc>
c000e1a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1af:	e8 bc 23 ff ff       	call   c0000570 <strlen>
c000e1b4:	40                   	inc    eax
c000e1b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1b8:	e8 8e 16 00 00       	call   c000f84b <malloc>
c000e1bd:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1c4:	e8 a7 23 ff ff       	call   c0000570 <strlen>
c000e1c9:	83 c4 0c             	add    esp,0xc
c000e1cc:	40                   	inc    eax
c000e1cd:	50                   	push   eax
c000e1ce:	6a 00                	push   0x0
c000e1d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1d4:	e8 17 23 ff ff       	call   c00004f0 <memset>
c000e1d9:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1dc:	e8 8f 23 ff ff       	call   c0000570 <strlen>
c000e1e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e1e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1ed:	89 de                	mov    esi,ebx
c000e1ef:	e8 7c 23 ff ff       	call   c0000570 <strlen>
c000e1f4:	83 c4 0c             	add    esp,0xc
c000e1f7:	40                   	inc    eax
c000e1f8:	50                   	push   eax
c000e1f9:	6a 00                	push   0x0
c000e1fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1ff:	e8 ec 22 ff ff       	call   c00004f0 <memset>
c000e204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e207:	e8 64 23 ff ff       	call   c0000570 <strlen>
c000e20c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e210:	8d 48 01             	lea    ecx,[eax+0x1]
c000e213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e215:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e218:	40                   	inc    eax
c000e219:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e21c:	c1 e0 03             	shl    eax,0x3
c000e21f:	5a                   	pop    edx
c000e220:	59                   	pop    ecx
c000e221:	50                   	push   eax
c000e222:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e225:	e8 0d 16 00 00       	call   c000f837 <realloc>
c000e22a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e22e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e231:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e234:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e238:	b9 08 00 00 00       	mov    ecx,0x8
c000e23d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e23f:	83 c4 2c             	add    esp,0x2c
c000e242:	5b                   	pop    ebx
c000e243:	5e                   	pop    esi
c000e244:	5f                   	pop    edi
c000e245:	5d                   	pop    ebp
c000e246:	c3                   	ret    
c000e247:	90                   	nop

c000e248 <EnvVarContainer::deleteEnv(char const*)>:
c000e248:	c3                   	ret    
c000e249:	90                   	nop

c000e24a <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e24a:	55                   	push   ebp
c000e24b:	57                   	push   edi
c000e24c:	56                   	push   esi
c000e24d:	53                   	push   ebx
c000e24e:	81 ec 38 01 00 00    	sub    esp,0x138
c000e254:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e25b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e262:	68 14 01 00 00       	push   0x114
c000e267:	e8 df 15 00 00       	call   c000f84b <malloc>
c000e26c:	83 c4 0c             	add    esp,0xc
c000e26f:	89 c3                	mov    ebx,eax
c000e271:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e274:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e27b:	50                   	push   eax
c000e27c:	e8 09 9f ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e284:	e8 e3 a1 ff ff       	call   c000846c <File::exists()>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	84 c0                	test   al,al
c000e28e:	75 31                	jne    c000e2c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e290:	50                   	push   eax
c000e291:	50                   	push   eax
c000e292:	6a 12                	push   0x12
c000e294:	53                   	push   ebx
c000e295:	e8 0e 9f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e29a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e29c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e29f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2a2:	e8 c9 22 ff ff       	call   c0000570 <strlen>
c000e2a7:	5a                   	pop    edx
c000e2a8:	31 d2                	xor    edx,edx
c000e2aa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e2ae:	51                   	push   ecx
c000e2af:	56                   	push   esi
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	53                   	push   ebx
c000e2b3:	ff d7                	call   edi
c000e2b5:	83 c4 14             	add    esp,0x14
c000e2b8:	53                   	push   ebx
c000e2b9:	e8 48 9f ff ff       	call   c0008206 <File::close()>
c000e2be:	83 c4 10             	add    esp,0x10
c000e2c1:	56                   	push   esi
c000e2c2:	31 f6                	xor    esi,esi
c000e2c4:	68 00 01 00 00       	push   0x100
c000e2c9:	6a 00                	push   0x0
c000e2cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e2cf:	50                   	push   eax
c000e2d0:	e8 1b 22 ff ff       	call   c00004f0 <memset>
c000e2d5:	5f                   	pop    edi
c000e2d6:	58                   	pop    eax
c000e2d7:	6a 01                	push   0x1
c000e2d9:	53                   	push   ebx
c000e2da:	e8 c9 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e2ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2f2:	83 ec 0c             	sub    esp,0xc
c000e2f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2f7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e2fb:	51                   	push   ecx
c000e2fc:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e300:	52                   	push   edx
c000e301:	6a 00                	push   0x0
c000e303:	6a 01                	push   0x1
c000e305:	53                   	push   ebx
c000e306:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e309:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e30e:	83 c4 20             	add    esp,0x20
c000e311:	89 c2                	mov    edx,eax
c000e313:	85 c0                	test   eax,eax
c000e315:	0f 84 36 01 00 00    	je     c000e451 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e31b:	83 f8 0d             	cmp    eax,0xd
c000e31e:	0f 84 22 01 00 00    	je     c000e446 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e324:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e329:	0f 84 f0 00 00 00    	je     c000e41f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e32f:	83 f8 0a             	cmp    eax,0xa
c000e332:	74 13                	je     c000e347 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e334:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e339:	74 0c                	je     c000e347 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e33b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e341:	0f 8e f6 00 00 00    	jle    c000e43d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e34b:	83 ec 0c             	sub    esp,0xc
c000e34e:	8d 78 01             	lea    edi,[eax+0x1]
c000e351:	57                   	push   edi
c000e352:	e8 f4 14 00 00       	call   c000f84b <malloc>
c000e357:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e35b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e35f:	8d 56 04             	lea    edx,[esi+0x4]
c000e362:	89 14 24             	mov    DWORD PTR [esp],edx
c000e365:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e369:	e8 dd 14 00 00       	call   c000f84b <malloc>
c000e36e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e372:	83 c4 0c             	add    esp,0xc
c000e375:	57                   	push   edi
c000e376:	6a 00                	push   0x0
c000e378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e37c:	e8 6f 21 ff ff       	call   c00004f0 <memset>
c000e381:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e385:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e389:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e38d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e38f:	83 c4 0c             	add    esp,0xc
c000e392:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e396:	52                   	push   edx
c000e397:	6a 00                	push   0x0
c000e399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e39d:	e8 4e 21 ff ff       	call   c00004f0 <memset>
c000e3a2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3a6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e3aa:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3ad:	e8 be 21 ff ff       	call   c0000570 <strlen>
c000e3b2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e3b6:	89 c1                	mov    ecx,eax
c000e3b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3bd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e3c0:	40                   	inc    eax
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3c7:	85 d2                	test   edx,edx
c000e3c9:	75 0c                	jne    c000e3d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e3cb:	83 ec 0c             	sub    esp,0xc
c000e3ce:	6a 08                	push   0x8
c000e3d0:	e8 76 14 00 00       	call   c000f84b <malloc>
c000e3d5:	eb 0c                	jmp    c000e3e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e3d7:	c1 e0 03             	shl    eax,0x3
c000e3da:	51                   	push   ecx
c000e3db:	51                   	push   ecx
c000e3dc:	50                   	push   eax
c000e3dd:	52                   	push   edx
c000e3de:	e8 54 14 00 00       	call   c000f837 <realloc>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e3e9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e3ec:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e3ef:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e3f3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e3f7:	b9 08 00 00 00       	mov    ecx,0x8
c000e3fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3fe:	31 f6                	xor    esi,esi
c000e400:	50                   	push   eax
c000e401:	68 00 01 00 00       	push   0x100
c000e406:	6a 00                	push   0x0
c000e408:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e40c:	50                   	push   eax
c000e40d:	e8 de 20 ff ff       	call   c00004f0 <memset>
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e41d:	eb 27                	jmp    c000e446 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e41f:	83 f8 3d             	cmp    eax,0x3d
c000e422:	74 1e                	je     c000e442 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e424:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e42a:	7f 07                	jg     c000e433 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e42c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e430:	46                   	inc    esi
c000e431:	eb 13                	jmp    c000e446 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e433:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e43b:	eb 09                	jmp    c000e446 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e43d:	83 f8 3d             	cmp    eax,0x3d
c000e440:	75 ea                	jne    c000e42c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e442:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e446:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e44b:	0f 85 99 fe ff ff    	jne    c000e2ea <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	53                   	push   ebx
c000e455:	e8 ac 9d ff ff       	call   c0008206 <File::close()>
c000e45a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e45c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e45f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e462:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e468:	5b                   	pop    ebx
c000e469:	5e                   	pop    esi
c000e46a:	5f                   	pop    edi
c000e46b:	5d                   	pop    ebp
c000e46c:	c3                   	ret    
c000e46d:	90                   	nop

c000e46e <EnvVarContainer::__loadSystem()>:
c000e46e:	83 ec 10             	sub    esp,0x10
c000e471:	68 00 6d 02 c0       	push   0xc0026d00
c000e476:	68 08 45 02 c0       	push   0xc0024508
c000e47b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47f:	e8 c6 fd ff ff       	call   c000e24a <EnvVarContainer::loadFrom(char const*, char const*)>
c000e484:	83 c4 1c             	add    esp,0x1c
c000e487:	c3                   	ret    

c000e488 <EnvVarContainer::__loadUser()>:
c000e488:	c3                   	ret    
c000e489:	90                   	nop

c000e48a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e49c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e49f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4aa:	90                   	nop
c000e4ab:	c3                   	ret    

c000e4ac <EnvVarContainer::~EnvVarContainer()>:
c000e4ac:	83 ec 0c             	sub    esp,0xc
c000e4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b6:	85 c0                	test   eax,eax
c000e4b8:	74 1d                	je     c000e4d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4be:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4c0:	85 c0                	test   eax,eax
c000e4c2:	74 13                	je     c000e4d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4cb:	83 ec 0c             	sub    esp,0xc
c000e4ce:	50                   	push   eax
c000e4cf:	e8 87 13 00 00       	call   c000f85b <free>
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	90                   	nop
c000e4d8:	83 c4 0c             	add    esp,0xc
c000e4db:	c3                   	ret    

c000e4dc <KeGetEnv(Process*, char const*)>:
c000e4dc:	53                   	push   ebx
c000e4dd:	83 ec 08             	sub    esp,0x8
c000e4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e4e8:	39 05 58 d3 02 c0    	cmp    DWORD PTR ds:0xc002d358,eax
c000e4ee:	74 04                	je     c000e4f4 <KeGetEnv(Process*, char const*)+0x18>
c000e4f0:	85 c0                	test   eax,eax
c000e4f2:	75 0b                	jne    c000e4ff <KeGetEnv(Process*, char const*)+0x23>
c000e4f4:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e4f9:	85 c0                	test   eax,eax
c000e4fb:	75 19                	jne    c000e516 <KeGetEnv(Process*, char const*)+0x3a>
c000e4fd:	eb 27                	jmp    c000e526 <KeGetEnv(Process*, char const*)+0x4a>
c000e4ff:	52                   	push   edx
c000e500:	52                   	push   edx
c000e501:	53                   	push   ebx
c000e502:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e508:	e8 3b fc ff ff       	call   c000e148 <EnvVarContainer::getEnv(char const*)>
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	85 c0                	test   eax,eax
c000e512:	75 28                	jne    c000e53c <KeGetEnv(Process*, char const*)+0x60>
c000e514:	eb de                	jmp    c000e4f4 <KeGetEnv(Process*, char const*)+0x18>
c000e516:	52                   	push   edx
c000e517:	52                   	push   edx
c000e518:	53                   	push   ebx
c000e519:	50                   	push   eax
c000e51a:	e8 29 fc ff ff       	call   c000e148 <EnvVarContainer::getEnv(char const*)>
c000e51f:	83 c4 10             	add    esp,0x10
c000e522:	85 c0                	test   eax,eax
c000e524:	75 16                	jne    c000e53c <KeGetEnv(Process*, char const*)+0x60>
c000e526:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e52a:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e52f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e533:	83 c4 08             	add    esp,0x8
c000e536:	5b                   	pop    ebx
c000e537:	e9 0c fc ff ff       	jmp    c000e148 <EnvVarContainer::getEnv(char const*)>
c000e53c:	83 c4 08             	add    esp,0x8
c000e53f:	5b                   	pop    ebx
c000e540:	c3                   	ret    

c000e541 <KeSetEnvSystem(char const*, char const*)>:
c000e541:	83 ec 10             	sub    esp,0x10
c000e544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e548:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e54c:	ff 35 14 d1 02 c0    	push   DWORD PTR ds:0xc002d114
c000e552:	e8 2f fc ff ff       	call   c000e186 <EnvVarContainer::setEnv(char const*, char const*)>
c000e557:	83 c4 1c             	add    esp,0x1c
c000e55a:	c3                   	ret    

c000e55b <KeSetEnvUser(char const*, char const*)>:
c000e55b:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e560:	85 c0                	test   eax,eax
c000e562:	74 15                	je     c000e579 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e564:	83 ec 10             	sub    esp,0x10
c000e567:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e56b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e56f:	50                   	push   eax
c000e570:	e8 11 fc ff ff       	call   c000e186 <EnvVarContainer::setEnv(char const*, char const*)>
c000e575:	83 c4 1c             	add    esp,0x1c
c000e578:	c3                   	ret    
c000e579:	c3                   	ret    

c000e57a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e57a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e57e:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e584:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e588:	e9 f9 fb ff ff       	jmp    c000e186 <EnvVarContainer::setEnv(char const*, char const*)>

c000e58d <KeDeleteEnvSystem(char const*)>:
c000e58d:	c3                   	ret    

c000e58e <KeDeleteEnvUser(char const*)>:
c000e58e:	c3                   	ret    

c000e58f <KeDeleteEnvProcess(Process*, char const*)>:
c000e58f:	c3                   	ret    

c000e590 <KeNewProcessEnv(Process*)>:
c000e590:	83 ec 28             	sub    esp,0x28
c000e593:	6a 0c                	push   0xc
c000e595:	e8 b1 12 00 00       	call   c000f84b <malloc>
c000e59a:	5a                   	pop    edx
c000e59b:	59                   	pop    ecx
c000e59c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5a0:	50                   	push   eax
c000e5a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5a5:	e8 e0 fe ff ff       	call   c000e48a <EnvVarContainer::EnvVarContainer(Process*)>
c000e5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5ae:	83 c4 2c             	add    esp,0x2c
c000e5b1:	c3                   	ret    

c000e5b2 <KeCopyProcessEnv(Process*, Process*)>:
c000e5b2:	57                   	push   edi
c000e5b3:	56                   	push   esi
c000e5b4:	53                   	push   ebx
c000e5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b9:	83 ec 0c             	sub    esp,0xc
c000e5bc:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e5c2:	6a 0c                	push   0xc
c000e5c4:	e8 82 12 00 00       	call   c000f84b <malloc>
c000e5c9:	89 c3                	mov    ebx,eax
c000e5cb:	58                   	pop    eax
c000e5cc:	5a                   	pop    edx
c000e5cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d1:	53                   	push   ebx
c000e5d2:	e8 b3 fe ff ff       	call   c000e48a <EnvVarContainer::EnvVarContainer(Process*)>
c000e5d7:	8b 07                	mov    eax,DWORD PTR [edi]
c000e5d9:	89 03                	mov    DWORD PTR [ebx],eax
c000e5db:	c1 e0 03             	shl    eax,0x3
c000e5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5e1:	e8 65 12 00 00       	call   c000f84b <malloc>
c000e5e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e5eb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e5ee:	c1 e1 03             	shl    ecx,0x3
c000e5f1:	89 c7                	mov    edi,eax
c000e5f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	89 d8                	mov    eax,ebx
c000e5fa:	5b                   	pop    ebx
c000e5fb:	5e                   	pop    esi
c000e5fc:	5f                   	pop    edi
c000e5fd:	c3                   	ret    

c000e5fe <KeLoadSystemEnv()>:
c000e5fe:	53                   	push   ebx
c000e5ff:	83 ec 14             	sub    esp,0x14
c000e602:	6a 0c                	push   0xc
c000e604:	e8 42 12 00 00       	call   c000f84b <malloc>
c000e609:	89 c3                	mov    ebx,eax
c000e60b:	58                   	pop    eax
c000e60c:	5a                   	pop    edx
c000e60d:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000e613:	53                   	push   ebx
c000e614:	e8 71 fe ff ff       	call   c000e48a <EnvVarContainer::EnvVarContainer(Process*)>
c000e619:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e61c:	89 1d 14 d1 02 c0    	mov    DWORD PTR ds:0xc002d114,ebx
c000e622:	e8 47 fe ff ff       	call   c000e46e <EnvVarContainer::__loadSystem()>
c000e627:	83 c4 18             	add    esp,0x18
c000e62a:	5b                   	pop    ebx
c000e62b:	c3                   	ret    

c000e62c <KeLoadUserEnv()>:
c000e62c:	53                   	push   ebx
c000e62d:	83 ec 14             	sub    esp,0x14
c000e630:	6a 0c                	push   0xc
c000e632:	e8 14 12 00 00       	call   c000f84b <malloc>
c000e637:	89 c3                	mov    ebx,eax
c000e639:	58                   	pop    eax
c000e63a:	5a                   	pop    edx
c000e63b:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000e641:	53                   	push   ebx
c000e642:	e8 43 fe ff ff       	call   c000e48a <EnvVarContainer::EnvVarContainer(Process*)>
c000e647:	89 1d 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,ebx
c000e64d:	83 c4 18             	add    esp,0x18
c000e650:	5b                   	pop    ebx
c000e651:	c3                   	ret    

c000e652 <KeFlushEnv()>:
c000e652:	c3                   	ret    

c000e653 <KeGetProcessTotalEnvCount(Process*)>:
c000e653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e657:	8b 15 10 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d110
c000e65d:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e663:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e668:	8b 00                	mov    eax,DWORD PTR [eax]
c000e66a:	03 01                	add    eax,DWORD PTR [ecx]
c000e66c:	85 d2                	test   edx,edx
c000e66e:	74 02                	je     c000e672 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e670:	03 02                	add    eax,DWORD PTR [edx]
c000e672:	c3                   	ret    

c000e673 <KeGetProcessEnvPair(Process*, int)>:
c000e673:	57                   	push   edi
c000e674:	56                   	push   esi
c000e675:	8b 35 10 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d110
c000e67b:	53                   	push   ebx
c000e67c:	85 f6                	test   esi,esi
c000e67e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e682:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e686:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e68c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e690:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e692:	75 16                	jne    c000e6aa <KeGetProcessEnvPair(Process*, int)+0x37>
c000e694:	39 c2                	cmp    edx,eax
c000e696:	7c 16                	jl     c000e6ae <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e698:	8b 0d 14 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d114
c000e69e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e6a0:	01 c6                	add    esi,eax
c000e6a2:	39 d6                	cmp    esi,edx
c000e6a4:	7e 3c                	jle    c000e6e2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6a6:	29 c2                	sub    edx,eax
c000e6a8:	eb 04                	jmp    c000e6ae <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6aa:	39 c2                	cmp    edx,eax
c000e6ac:	7d 05                	jge    c000e6b3 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e6ae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e6b1:	eb 20                	jmp    c000e6d3 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e6b3:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e6b5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e6b8:	39 d1                	cmp    ecx,edx
c000e6ba:	7e 04                	jle    c000e6c0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e6bc:	29 c2                	sub    edx,eax
c000e6be:	eb 10                	jmp    c000e6d0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e6c0:	8b 35 14 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d114
c000e6c6:	03 0e                	add    ecx,DWORD PTR [esi]
c000e6c8:	39 d1                	cmp    ecx,edx
c000e6ca:	7e 16                	jle    c000e6e2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6cc:	29 c2                	sub    edx,eax
c000e6ce:	29 fa                	sub    edx,edi
c000e6d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e6d3:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e6d6:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6db:	89 03                	mov    DWORD PTR [ebx],eax
c000e6dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e6e0:	eb 1d                	jmp    c000e6ff <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e6e2:	83 ec 0c             	sub    esp,0xc
c000e6e5:	68 2a 45 02 c0       	push   0xc002452a
c000e6ea:	e8 b1 15 00 00       	call   c000fca0 <KePanic(char const*)>
c000e6ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e6f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e6fc:	83 c4 10             	add    esp,0x10
c000e6ff:	89 d8                	mov    eax,ebx
c000e701:	5b                   	pop    ebx
c000e702:	5e                   	pop    esi
c000e703:	5f                   	pop    edi
c000e704:	c2 04 00             	ret    0x4
c000e707:	90                   	nop

c000e708 <KeDisplayProgramFault(char const*)>:
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e712:	e8 65 88 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e717:	83 c4 10             	add    esp,0x10
c000e71a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e71f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e721:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e724:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e72a:	85 c0                	test   eax,eax
c000e72c:	74 22                	je     c000e750 <KeDisplayProgramFault(char const*)+0x48>
c000e72e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e733:	8b 00                	mov    eax,DWORD PTR [eax]
c000e735:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e738:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e73e:	6a 04                	push   0x4
c000e740:	6a 0f                	push   0xf
c000e742:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e746:	50                   	push   eax
c000e747:	e8 32 3f 00 00       	call   c001267e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e74c:	83 c4 10             	add    esp,0x10
c000e74f:	90                   	nop
c000e750:	90                   	nop
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	c3                   	ret    
c000e755:	8d 76 00             	lea    esi,[esi+0x0]

c000e758 <KeGeneralProtectionFault(void*, void*)>:
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	83 ec 08             	sub    esp,0x8
c000e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e766:	e8 c5 ba 00 00       	call   c001a230 <HalHandleGeneralProtectionFault(void*, void*)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	0f b6 c0             	movzx  eax,al
c000e771:	85 c0                	test   eax,eax
c000e773:	75 2f                	jne    c000e7a4 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	68 44 45 02 c0       	push   0xc0024544
c000e77d:	e8 86 ff ff ff       	call   c000e708 <KeDisplayProgramFault(char const*)>
c000e782:	83 c4 10             	add    esp,0x10
c000e785:	83 ec 0c             	sub    esp,0xc
c000e788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78c:	e8 18 bc 00 00       	call   c001a3a9 <HalDisplayDebugInfo(void*)>
c000e791:	83 c4 10             	add    esp,0x10
c000e794:	83 ec 0c             	sub    esp,0xc
c000e797:	6a 7e                	push   0x7e
c000e799:	e8 8a 88 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c000e79e:	83 c4 10             	add    esp,0x10
c000e7a1:	eb 05                	jmp    c000e7a8 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e7a3:	90                   	nop
c000e7a4:	90                   	nop
c000e7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a8:	83 c4 0c             	add    esp,0xc
c000e7ab:	c3                   	ret    

c000e7ac <KePageFault(void*, void*)>:
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	83 ec 08             	sub    esp,0x8
c000e7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ba:	e8 79 bb 00 00       	call   c001a338 <HalHandlePageFault(void*, void*)>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	0f b6 c0             	movzx  eax,al
c000e7c5:	85 c0                	test   eax,eax
c000e7c7:	75 2f                	jne    c000e7f8 <KePageFault(void*, void*)+0x4c>
c000e7c9:	83 ec 0c             	sub    esp,0xc
c000e7cc:	68 5d 45 02 c0       	push   0xc002455d
c000e7d1:	e8 32 ff ff ff       	call   c000e708 <KeDisplayProgramFault(char const*)>
c000e7d6:	83 c4 10             	add    esp,0x10
c000e7d9:	83 ec 0c             	sub    esp,0xc
c000e7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e0:	e8 c4 bb 00 00       	call   c001a3a9 <HalDisplayDebugInfo(void*)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	6a 7f                	push   0x7f
c000e7ed:	e8 36 88 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c000e7f2:	83 c4 10             	add    esp,0x10
c000e7f5:	eb 05                	jmp    c000e7fc <KePageFault(void*, void*)+0x50>
c000e7f7:	90                   	nop
c000e7f8:	90                   	nop
c000e7f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e7fc:	83 c4 0c             	add    esp,0xc
c000e7ff:	c3                   	ret    

c000e800 <KeOpcodeFault(void*, void*)>:
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	83 ec 08             	sub    esp,0x8
c000e806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e80e:	e8 54 bb 00 00       	call   c001a367 <HalHandleOpcodeFault(void*, void*)>
c000e813:	83 c4 10             	add    esp,0x10
c000e816:	0f b6 c0             	movzx  eax,al
c000e819:	85 c0                	test   eax,eax
c000e81b:	75 2f                	jne    c000e84c <KeOpcodeFault(void*, void*)+0x4c>
c000e81d:	83 ec 0c             	sub    esp,0xc
c000e820:	68 68 45 02 c0       	push   0xc0024568
c000e825:	e8 de fe ff ff       	call   c000e708 <KeDisplayProgramFault(char const*)>
c000e82a:	83 c4 10             	add    esp,0x10
c000e82d:	83 ec 0c             	sub    esp,0xc
c000e830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e834:	e8 70 bb 00 00       	call   c001a3a9 <HalDisplayDebugInfo(void*)>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 0c             	sub    esp,0xc
c000e83f:	6a 7c                	push   0x7c
c000e841:	e8 e2 87 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	eb 05                	jmp    c000e850 <KeOpcodeFault(void*, void*)+0x50>
c000e84b:	90                   	nop
c000e84c:	90                   	nop
c000e84d:	8d 76 00             	lea    esi,[esi+0x0]
c000e850:	83 c4 0c             	add    esp,0xc
c000e853:	c3                   	ret    

c000e854 <KeOtherFault(void*, void*)>:
c000e854:	83 ec 0c             	sub    esp,0xc
c000e857:	83 ec 0c             	sub    esp,0xc
c000e85a:	68 84 45 02 c0       	push   0xc0024584
c000e85f:	e8 a4 fe ff ff       	call   c000e708 <KeDisplayProgramFault(char const*)>
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	83 ec 0c             	sub    esp,0xc
c000e86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86e:	e8 36 bb 00 00       	call   c001a3a9 <HalDisplayDebugInfo(void*)>
c000e873:	83 c4 10             	add    esp,0x10
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	6a 7d                	push   0x7d
c000e87b:	e8 a8 87 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c000e880:	83 c4 10             	add    esp,0x10
c000e883:	90                   	nop
c000e884:	83 c4 0c             	add    esp,0xc
c000e887:	c3                   	ret    

c000e888 <KeNonMaskableInterrupt(void*, void*)>:
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	e8 a7 be 00 00       	call   c001a737 <HalReceivedNMI()>
c000e890:	90                   	nop
c000e891:	83 c4 0c             	add    esp,0xc
c000e894:	c3                   	ret    
c000e895:	8d 76 00             	lea    esi,[esi+0x0]

c000e898 <KeDoubleFault(void*, void*)>:
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	83 ec 0c             	sub    esp,0xc
c000e89e:	68 75 45 02 c0       	push   0xc0024575
c000e8a3:	e8 f8 13 00 00       	call   c000fca0 <KePanic(char const*)>
c000e8a8:	83 c4 10             	add    esp,0x10
c000e8ab:	90                   	nop
c000e8ac:	83 c4 0c             	add    esp,0xc
c000e8af:	c3                   	ret    

c000e8b0 <GDTEntry::setBase(unsigned int)>:
c000e8b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e8b8:	89 c1                	mov    ecx,eax
c000e8ba:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e8be:	c1 e9 10             	shr    ecx,0x10
c000e8c1:	c1 e8 18             	shr    eax,0x18
c000e8c4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e8c7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e8ca:	c3                   	ret    
c000e8cb:	90                   	nop

c000e8cc <GDTEntry::setLimit(unsigned int)>:
c000e8cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e8d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e8d7:	66 89 01             	mov    WORD PTR [ecx],ax
c000e8da:	83 e2 f0             	and    edx,0xfffffff0
c000e8dd:	c1 e8 10             	shr    eax,0x10
c000e8e0:	83 e0 0f             	and    eax,0xf
c000e8e3:	09 d0                	or     eax,edx
c000e8e5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e8e8:	c3                   	ret    
c000e8e9:	90                   	nop

c000e8ea <GDT::GDT()>:
c000e8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8fe:	90                   	nop
c000e8ff:	c3                   	ret    

c000e900 <GDT::addEntry(GDTEntry)>:
c000e900:	53                   	push   ebx
c000e901:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e905:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e909:	8b 02                	mov    eax,DWORD PTR [edx]
c000e90b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e90f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e913:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e917:	8d 48 01             	lea    ecx,[eax+0x1]
c000e91a:	c1 e0 03             	shl    eax,0x3
c000e91d:	89 0a                	mov    DWORD PTR [edx],ecx
c000e91f:	5b                   	pop    ebx
c000e920:	c3                   	ret    
c000e921:	90                   	nop

c000e922 <GDT::getNumberOfEntries()>:
c000e922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e926:	8b 00                	mov    eax,DWORD PTR [eax]
c000e928:	c3                   	ret    
c000e929:	90                   	nop

c000e92a <GDT::flush()>:
c000e92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e92e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e930:	83 c0 04             	add    eax,0x4
c000e933:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e93a:	a3 1a d1 02 c0       	mov    ds:0xc002d11a,eax
c000e93f:	66 89 15 18 d1 02 c0 	mov    WORD PTR ds:0xc002d118,dx
c000e946:	e9 0f 1a ff ff       	jmp    c000035a <loadGDT>
c000e94b:	90                   	nop

c000e94c <GDT::setup()>:
c000e94c:	57                   	push   edi
c000e94d:	56                   	push   esi
c000e94e:	53                   	push   ebx
c000e94f:	83 ec 30             	sub    esp,0x30
c000e952:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e956:	6a 00                	push   0x0
c000e958:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e95c:	56                   	push   esi
c000e95d:	e8 4e ff ff ff       	call   c000e8b0 <GDTEntry::setBase(unsigned int)>
c000e962:	6a 00                	push   0x0
c000e964:	56                   	push   esi
c000e965:	e8 62 ff ff ff       	call   c000e8cc <GDTEntry::setLimit(unsigned int)>
c000e96a:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e972:	6a 00                	push   0x0
c000e974:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e978:	56                   	push   esi
c000e979:	e8 32 ff ff ff       	call   c000e8b0 <GDTEntry::setBase(unsigned int)>
c000e97e:	68 ff ff ff 00       	push   0xffffff
c000e983:	56                   	push   esi
c000e984:	e8 43 ff ff ff       	call   c000e8cc <GDTEntry::setLimit(unsigned int)>
c000e989:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e98d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e991:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e995:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e999:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e99e:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9a3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e9a7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e9ab:	89 f8                	mov    eax,edi
c000e9ad:	89 fa                	mov    edx,edi
c000e9af:	80 e4 f7             	and    ah,0xf7
c000e9b2:	80 ce 60             	or     dh,0x60
c000e9b5:	89 c7                	mov    edi,eax
c000e9b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e9bb:	80 cc 60             	or     ah,0x60
c000e9be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e9c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e9ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9d2:	83 c4 20             	add    esp,0x20
c000e9d5:	6a 00                	push   0x0
c000e9d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e9db:	50                   	push   eax
c000e9dc:	e8 cf fe ff ff       	call   c000e8b0 <GDTEntry::setBase(unsigned int)>
c000e9e1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e9e5:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e9e9:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e9ed:	83 e0 3f             	and    eax,0x3f
c000e9f0:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e9f4:	6a 00                	push   0x0
c000e9f6:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e9fa:	50                   	push   eax
c000e9fb:	e8 b0 fe ff ff       	call   c000e8b0 <GDTEntry::setBase(unsigned int)>
c000ea00:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ea04:	83 e0 3f             	and    eax,0x3f
c000ea07:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ea0b:	83 c4 0c             	add    esp,0xc
c000ea0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea16:	53                   	push   ebx
c000ea17:	e8 e4 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea1c:	83 c4 0c             	add    esp,0xc
c000ea1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea27:	53                   	push   ebx
c000ea28:	e8 d3 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea2d:	83 c4 0c             	add    esp,0xc
c000ea30:	57                   	push   edi
c000ea31:	56                   	push   esi
c000ea32:	53                   	push   ebx
c000ea33:	e8 c8 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea38:	83 c4 0c             	add    esp,0xc
c000ea3b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea3f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea43:	53                   	push   ebx
c000ea44:	e8 b7 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea49:	83 c4 0c             	add    esp,0xc
c000ea4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea54:	53                   	push   ebx
c000ea55:	e8 a6 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea5a:	83 c4 0c             	add    esp,0xc
c000ea5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea61:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea65:	53                   	push   ebx
c000ea66:	e8 95 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea6b:	83 c4 0c             	add    esp,0xc
c000ea6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea76:	53                   	push   ebx
c000ea77:	e8 84 fe ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c000ea7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea7f:	e8 a6 fe ff ff       	call   c000e92a <GDT::flush()>
c000ea84:	83 c4 40             	add    esp,0x40
c000ea87:	5b                   	pop    ebx
c000ea88:	5e                   	pop    esi
c000ea89:	5f                   	pop    edi
c000ea8a:	c3                   	ret    

c000ea8b <idleFunction(void*)>:
c000ea8b:	83 ec 0c             	sub    esp,0xc
c000ea8e:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000ea95:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000ea9c:	75 01                	jne    c000ea9f <idleFunction(void*)+0x14>
c000ea9e:	fb                   	sti    
c000ea9f:	e8 2e bd 00 00       	call   c001a7d2 <HalSystemIdle()>
c000eaa4:	e8 1d 3c 01 00       	call   c00226c6 <idleCommon()>
c000eaa9:	eb f4                	jmp    c000ea9f <idleFunction(void*)+0x14>
c000eaab:	90                   	nop

c000eaac <IDTEntry::IDTEntry(bool)>:
c000eaac:	53                   	push   ebx
c000eaad:	83 ec 04             	sub    esp,0x4
c000eab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab4:	88 04 24             	mov    BYTE PTR [esp],al
c000eab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eabb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eacd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ead0:	83 e2 f0             	and    edx,0xfffffff0
c000ead3:	83 ca 0e             	or     edx,0xe
c000ead6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ead9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eadd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eae0:	83 e2 ef             	and    edx,0xffffffef
c000eae3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eae6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eaea:	85 c0                	test   eax,eax
c000eaec:	74 06                	je     c000eaf4 <IDTEntry::IDTEntry(bool)+0x48>
c000eaee:	b2 03                	mov    dl,0x3
c000eaf0:	eb 06                	jmp    c000eaf8 <IDTEntry::IDTEntry(bool)+0x4c>
c000eaf2:	66 90                	xchg   ax,ax
c000eaf4:	b2 00                	mov    dl,0x0
c000eaf6:	66 90                	xchg   ax,ax
c000eaf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eafc:	83 e2 03             	and    edx,0x3
c000eaff:	89 d3                	mov    ebx,edx
c000eb01:	c1 e3 05             	shl    ebx,0x5
c000eb04:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb07:	83 e2 9f             	and    edx,0xffffff9f
c000eb0a:	88 d1                	mov    cl,dl
c000eb0c:	88 da                	mov    dl,bl
c000eb0e:	09 ca                	or     edx,ecx
c000eb10:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb17:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb1a:	83 ca 80             	or     edx,0xffffff80
c000eb1d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb20:	90                   	nop
c000eb21:	83 c4 04             	add    esp,0x4
c000eb24:	5b                   	pop    ebx
c000eb25:	c3                   	ret    

c000eb26 <IDTEntry::setOffset(unsigned int)>:
c000eb26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb2e:	66 89 02             	mov    WORD PTR [edx],ax
c000eb31:	c1 e8 10             	shr    eax,0x10
c000eb34:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb38:	c3                   	ret    
c000eb39:	90                   	nop
c000eb3a:	66 90                	xchg   ax,ax

c000eb3c <IDT::IDT()>:
c000eb3c:	90                   	nop
c000eb3d:	c3                   	ret    

c000eb3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb42:	83 c0 30             	add    eax,0x30
c000eb45:	c3                   	ret    

c000eb46 <IDT::addEntry(IDTEntry, int)>:
c000eb46:	53                   	push   ebx
c000eb47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb57:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eb5a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eb5e:	5b                   	pop    ebx
c000eb5f:	c3                   	ret    

c000eb60 <IDT::addEntry(int, void (*)(), bool)>:
c000eb60:	53                   	push   ebx
c000eb61:	83 ec 10             	sub    esp,0x10
c000eb64:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eb69:	50                   	push   eax
c000eb6a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eb6e:	53                   	push   ebx
c000eb6f:	e8 38 ff ff ff       	call   c000eaac <IDTEntry::IDTEntry(bool)>
c000eb74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eb78:	53                   	push   ebx
c000eb79:	e8 a8 ff ff ff       	call   c000eb26 <IDTEntry::setOffset(unsigned int)>
c000eb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eb8e:	e8 b3 ff ff ff       	call   c000eb46 <IDT::addEntry(IDTEntry, int)>
c000eb93:	83 c4 30             	add    esp,0x30
c000eb96:	5b                   	pop    ebx
c000eb97:	c3                   	ret    

c000eb98 <IDT::flush()>:
c000eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb9c:	66 c7 05 20 d1 02 c0 ff 07 	mov    WORD PTR ds:0xc002d120,0x7ff
c000eba5:	a3 22 d1 02 c0       	mov    ds:0xc002d122,eax
c000ebaa:	0f 01 1d 20 d1 02 c0 	lidtd  ds:0xc002d120
c000ebb1:	c3                   	ret    

c000ebb2 <IDT::setup()>:
c000ebb2:	57                   	push   edi
c000ebb3:	56                   	push   esi
c000ebb4:	53                   	push   ebx
c000ebb5:	83 ec 10             	sub    esp,0x10
c000ebb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ebbc:	6a 00                	push   0x0
c000ebbe:	68 a0 19 02 c0       	push   0xc00219a0
c000ebc3:	6a 00                	push   0x0
c000ebc5:	53                   	push   ebx
c000ebc6:	e8 95 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ebcb:	6a 00                	push   0x0
c000ebcd:	68 b0 19 02 c0       	push   0xc00219b0
c000ebd2:	6a 01                	push   0x1
c000ebd4:	53                   	push   ebx
c000ebd5:	e8 86 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ebda:	83 c4 20             	add    esp,0x20
c000ebdd:	6a 00                	push   0x0
c000ebdf:	68 ba 19 02 c0       	push   0xc00219ba
c000ebe4:	6a 02                	push   0x2
c000ebe6:	53                   	push   ebx
c000ebe7:	e8 74 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ebec:	6a 00                	push   0x0
c000ebee:	68 c4 19 02 c0       	push   0xc00219c4
c000ebf3:	6a 03                	push   0x3
c000ebf5:	53                   	push   ebx
c000ebf6:	e8 65 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ebfb:	83 c4 20             	add    esp,0x20
c000ebfe:	6a 00                	push   0x0
c000ec00:	68 ce 19 02 c0       	push   0xc00219ce
c000ec05:	6a 04                	push   0x4
c000ec07:	53                   	push   ebx
c000ec08:	e8 53 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec0d:	6a 00                	push   0x0
c000ec0f:	68 d8 19 02 c0       	push   0xc00219d8
c000ec14:	6a 05                	push   0x5
c000ec16:	53                   	push   ebx
c000ec17:	e8 44 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec1c:	83 c4 20             	add    esp,0x20
c000ec1f:	6a 00                	push   0x0
c000ec21:	68 e2 19 02 c0       	push   0xc00219e2
c000ec26:	6a 06                	push   0x6
c000ec28:	53                   	push   ebx
c000ec29:	e8 32 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec2e:	6a 00                	push   0x0
c000ec30:	68 ec 19 02 c0       	push   0xc00219ec
c000ec35:	6a 07                	push   0x7
c000ec37:	53                   	push   ebx
c000ec38:	e8 23 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec3d:	83 c4 20             	add    esp,0x20
c000ec40:	6a 00                	push   0x0
c000ec42:	68 f6 19 02 c0       	push   0xc00219f6
c000ec47:	6a 08                	push   0x8
c000ec49:	53                   	push   ebx
c000ec4a:	e8 11 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec4f:	6a 00                	push   0x0
c000ec51:	68 fe 19 02 c0       	push   0xc00219fe
c000ec56:	6a 09                	push   0x9
c000ec58:	53                   	push   ebx
c000ec59:	e8 02 ff ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec5e:	83 c4 20             	add    esp,0x20
c000ec61:	6a 00                	push   0x0
c000ec63:	68 08 1a 02 c0       	push   0xc0021a08
c000ec68:	6a 0a                	push   0xa
c000ec6a:	53                   	push   ebx
c000ec6b:	e8 f0 fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec70:	6a 00                	push   0x0
c000ec72:	68 10 1a 02 c0       	push   0xc0021a10
c000ec77:	6a 0b                	push   0xb
c000ec79:	53                   	push   ebx
c000ec7a:	e8 e1 fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	6a 00                	push   0x0
c000ec84:	68 18 1a 02 c0       	push   0xc0021a18
c000ec89:	6a 0c                	push   0xc
c000ec8b:	53                   	push   ebx
c000ec8c:	e8 cf fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ec91:	6a 00                	push   0x0
c000ec93:	68 20 1a 02 c0       	push   0xc0021a20
c000ec98:	6a 0d                	push   0xd
c000ec9a:	53                   	push   ebx
c000ec9b:	e8 c0 fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000eca0:	83 c4 20             	add    esp,0x20
c000eca3:	6a 00                	push   0x0
c000eca5:	68 3a 1a 02 c0       	push   0xc0021a3a
c000ecaa:	6a 0e                	push   0xe
c000ecac:	53                   	push   ebx
c000ecad:	e8 ae fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ecb2:	6a 00                	push   0x0
c000ecb4:	68 42 1a 02 c0       	push   0xc0021a42
c000ecb9:	6a 0f                	push   0xf
c000ecbb:	53                   	push   ebx
c000ecbc:	e8 9f fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ecc1:	83 c4 20             	add    esp,0x20
c000ecc4:	6a 00                	push   0x0
c000ecc6:	68 4c 1a 02 c0       	push   0xc0021a4c
c000eccb:	6a 10                	push   0x10
c000eccd:	53                   	push   ebx
c000ecce:	e8 8d fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ecd3:	6a 00                	push   0x0
c000ecd5:	68 56 1a 02 c0       	push   0xc0021a56
c000ecda:	6a 11                	push   0x11
c000ecdc:	53                   	push   ebx
c000ecdd:	e8 7e fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ece2:	83 c4 20             	add    esp,0x20
c000ece5:	6a 00                	push   0x0
c000ece7:	68 60 1a 02 c0       	push   0xc0021a60
c000ecec:	6a 12                	push   0x12
c000ecee:	53                   	push   ebx
c000ecef:	e8 6c fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ecf4:	6a 01                	push   0x1
c000ecf6:	68 fa 1a 02 c0       	push   0xc0021afa
c000ecfb:	6a 60                	push   0x60
c000ecfd:	53                   	push   ebx
c000ecfe:	e8 5d fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed03:	83 c4 20             	add    esp,0x20
c000ed06:	6a 00                	push   0x0
c000ed08:	68 01 1b 02 c0       	push   0xc0021b01
c000ed0d:	6a 20                	push   0x20
c000ed0f:	53                   	push   ebx
c000ed10:	e8 4b fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed15:	6a 00                	push   0x0
c000ed17:	68 ec 1a 02 c0       	push   0xc0021aec
c000ed1c:	6a 21                	push   0x21
c000ed1e:	53                   	push   ebx
c000ed1f:	e8 3c fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed24:	83 c4 20             	add    esp,0x20
c000ed27:	6a 00                	push   0x0
c000ed29:	68 f3 1a 02 c0       	push   0xc0021af3
c000ed2e:	6a 22                	push   0x22
c000ed30:	53                   	push   ebx
c000ed31:	e8 2a fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed36:	6a 00                	push   0x0
c000ed38:	68 6a 1a 02 c0       	push   0xc0021a6a
c000ed3d:	6a 23                	push   0x23
c000ed3f:	53                   	push   ebx
c000ed40:	e8 1b fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed45:	83 c4 20             	add    esp,0x20
c000ed48:	6a 00                	push   0x0
c000ed4a:	68 74 1a 02 c0       	push   0xc0021a74
c000ed4f:	6a 24                	push   0x24
c000ed51:	53                   	push   ebx
c000ed52:	e8 09 fe ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed57:	6a 00                	push   0x0
c000ed59:	68 7e 1a 02 c0       	push   0xc0021a7e
c000ed5e:	6a 25                	push   0x25
c000ed60:	53                   	push   ebx
c000ed61:	e8 fa fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed66:	83 c4 20             	add    esp,0x20
c000ed69:	6a 00                	push   0x0
c000ed6b:	68 88 1a 02 c0       	push   0xc0021a88
c000ed70:	6a 26                	push   0x26
c000ed72:	53                   	push   ebx
c000ed73:	e8 e8 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed78:	6a 00                	push   0x0
c000ed7a:	68 92 1a 02 c0       	push   0xc0021a92
c000ed7f:	6a 27                	push   0x27
c000ed81:	53                   	push   ebx
c000ed82:	e8 d9 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed87:	83 c4 20             	add    esp,0x20
c000ed8a:	6a 00                	push   0x0
c000ed8c:	68 9c 1a 02 c0       	push   0xc0021a9c
c000ed91:	6a 28                	push   0x28
c000ed93:	53                   	push   ebx
c000ed94:	e8 c7 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ed99:	6a 00                	push   0x0
c000ed9b:	68 a6 1a 02 c0       	push   0xc0021aa6
c000eda0:	6a 29                	push   0x29
c000eda2:	53                   	push   ebx
c000eda3:	e8 b8 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000eda8:	83 c4 20             	add    esp,0x20
c000edab:	6a 00                	push   0x0
c000edad:	68 b0 1a 02 c0       	push   0xc0021ab0
c000edb2:	6a 2a                	push   0x2a
c000edb4:	53                   	push   ebx
c000edb5:	e8 a6 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000edba:	6a 00                	push   0x0
c000edbc:	68 ba 1a 02 c0       	push   0xc0021aba
c000edc1:	6a 2b                	push   0x2b
c000edc3:	53                   	push   ebx
c000edc4:	e8 97 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000edc9:	83 c4 20             	add    esp,0x20
c000edcc:	6a 00                	push   0x0
c000edce:	68 c4 1a 02 c0       	push   0xc0021ac4
c000edd3:	6a 2c                	push   0x2c
c000edd5:	53                   	push   ebx
c000edd6:	e8 85 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000eddb:	6a 00                	push   0x0
c000eddd:	68 ce 1a 02 c0       	push   0xc0021ace
c000ede2:	6a 2d                	push   0x2d
c000ede4:	53                   	push   ebx
c000ede5:	e8 76 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000edea:	83 c4 20             	add    esp,0x20
c000eded:	6a 00                	push   0x0
c000edef:	68 d8 1a 02 c0       	push   0xc0021ad8
c000edf4:	6a 2e                	push   0x2e
c000edf6:	53                   	push   ebx
c000edf7:	e8 64 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000edfc:	6a 00                	push   0x0
c000edfe:	68 e2 1a 02 c0       	push   0xc0021ae2
c000ee03:	6a 2f                	push   0x2f
c000ee05:	53                   	push   ebx
c000ee06:	e8 55 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee0b:	83 c4 20             	add    esp,0x20
c000ee0e:	6a 00                	push   0x0
c000ee10:	68 08 1c 02 c0       	push   0xc0021c08
c000ee15:	6a 30                	push   0x30
c000ee17:	53                   	push   ebx
c000ee18:	e8 43 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee1d:	6a 00                	push   0x0
c000ee1f:	68 12 1c 02 c0       	push   0xc0021c12
c000ee24:	6a 31                	push   0x31
c000ee26:	53                   	push   ebx
c000ee27:	e8 34 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee2c:	83 c4 20             	add    esp,0x20
c000ee2f:	6a 00                	push   0x0
c000ee31:	68 1c 1c 02 c0       	push   0xc0021c1c
c000ee36:	6a 32                	push   0x32
c000ee38:	53                   	push   ebx
c000ee39:	e8 22 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee3e:	6a 00                	push   0x0
c000ee40:	68 26 1c 02 c0       	push   0xc0021c26
c000ee45:	6a 33                	push   0x33
c000ee47:	53                   	push   ebx
c000ee48:	e8 13 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee4d:	83 c4 20             	add    esp,0x20
c000ee50:	6a 00                	push   0x0
c000ee52:	68 30 1c 02 c0       	push   0xc0021c30
c000ee57:	6a 34                	push   0x34
c000ee59:	53                   	push   ebx
c000ee5a:	e8 01 fd ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee5f:	6a 00                	push   0x0
c000ee61:	68 3a 1c 02 c0       	push   0xc0021c3a
c000ee66:	6a 35                	push   0x35
c000ee68:	53                   	push   ebx
c000ee69:	e8 f2 fc ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee6e:	83 c4 20             	add    esp,0x20
c000ee71:	6a 00                	push   0x0
c000ee73:	68 44 1c 02 c0       	push   0xc0021c44
c000ee78:	6a 36                	push   0x36
c000ee7a:	53                   	push   ebx
c000ee7b:	e8 e0 fc ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee80:	6a 00                	push   0x0
c000ee82:	68 4e 1c 02 c0       	push   0xc0021c4e
c000ee87:	6a 37                	push   0x37
c000ee89:	53                   	push   ebx
c000ee8a:	e8 d1 fc ff ff       	call   c000eb60 <IDT::addEntry(int, void (*)(), bool)>
c000ee8f:	83 c4 1c             	add    esp,0x1c
c000ee92:	6a 03                	push   0x3
c000ee94:	6a 02                	push   0x2
c000ee96:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000ee9c:	e8 7d 4b 00 00       	call   c0013a1e <VAS::allocatePages(int, int)>
c000eea1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eea8:	89 c6                	mov    esi,eax
c000eeaa:	e8 9c 09 00 00       	call   c000f84b <malloc>
c000eeaf:	81 c6 00 20 00 00    	add    esi,0x2000
c000eeb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb8:	89 c7                	mov    edi,eax
c000eeba:	e8 29 3c 00 00       	call   c0012ae8 <TSS::TSS()>
c000eebf:	83 c4 0c             	add    esp,0xc
c000eec2:	68 f6 19 02 c0       	push   0xc00219f6
c000eec7:	56                   	push   esi
c000eec8:	57                   	push   edi
c000eec9:	e8 5e 3c 00 00       	call   c0012b2c <TSS::setup(unsigned long, unsigned long)>
c000eece:	89 c6                	mov    esi,eax
c000eed0:	58                   	pop    eax
c000eed1:	5a                   	pop    edx
c000eed2:	6a 00                	push   0x0
c000eed4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000eed8:	50                   	push   eax
c000eed9:	e8 ce fb ff ff       	call   c000eaac <IDTEntry::IDTEntry(bool)>
c000eede:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eee2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000eee7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000eeee:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000eef4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eef8:	80 ce 05             	or     dh,0x5
c000eefb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000eefe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef06:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef0c:	e8 87 fc ff ff       	call   c000eb98 <IDT::flush()>
c000ef11:	83 c4 20             	add    esp,0x20
c000ef14:	5b                   	pop    ebx
c000ef15:	5e                   	pop    esi
c000ef16:	5f                   	pop    edi
c000ef17:	c3                   	ret    

c000ef18 <CPU::current()>:
c000ef18:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000ef1d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ef23:	c3                   	ret    

c000ef24 <operator new(unsigned long)>:
c000ef24:	e9 22 09 00 00       	jmp    c000f84b <malloc>

c000ef29 <operator delete(void*)>:
c000ef29:	e9 3d 09 00 00       	jmp    c000f86b <rfree>

c000ef2e <disableIRQs()>:
c000ef2e:	fa                   	cli    
c000ef2f:	c3                   	ret    

c000ef30 <enableIRQs()>:
c000ef30:	fb                   	sti    
c000ef31:	c3                   	ret    

c000ef32 <lockScheduler()>:
c000ef32:	fa                   	cli    
c000ef33:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000ef39:	c3                   	ret    

c000ef3a <unlockScheduler()>:
c000ef3a:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000ef41:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000ef48:	75 01                	jne    c000ef4b <unlockScheduler()+0x11>
c000ef4a:	fb                   	sti    
c000ef4b:	c3                   	ret    

c000ef4c <lockStuff()>:
c000ef4c:	fa                   	cli    
c000ef4d:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000ef53:	ff 05 2c d3 02 c0    	inc    DWORD PTR ds:0xc002d32c
c000ef59:	c3                   	ret    

c000ef5a <unlockStuff()>:
c000ef5a:	83 ec 0c             	sub    esp,0xc
c000ef5d:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c000ef62:	48                   	dec    eax
c000ef63:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c000ef68:	75 18                	jne    c000ef82 <unlockStuff()+0x28>
c000ef6a:	83 3d 28 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d328,0x0
c000ef71:	74 0f                	je     c000ef82 <unlockStuff()+0x28>
c000ef73:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c000ef7d:	e8 a6 78 00 00       	call   c0016828 <schedule()>
c000ef82:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000ef89:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000ef90:	75 01                	jne    c000ef93 <unlockStuff()+0x39>
c000ef92:	fb                   	sti    
c000ef93:	83 c4 0c             	add    esp,0xc
c000ef96:	c3                   	ret    

c000ef97 <Virt::getAKernelVAS()>:
c000ef97:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c000ef9c:	c3                   	ret    

c000ef9d <__not_memcpy>:
c000ef9d:	57                   	push   edi
c000ef9e:	56                   	push   esi
c000ef9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efa7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000efab:	89 c7                	mov    edi,eax
c000efad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efaf:	5e                   	pop    esi
c000efb0:	5f                   	pop    edi
c000efb1:	c3                   	ret    

c000efb2 <KeFormatDate(char*, int, int, int, int, bool)>:
c000efb2:	55                   	push   ebp
c000efb3:	b9 0a 00 00 00       	mov    ecx,0xa
c000efb8:	57                   	push   edi
c000efb9:	56                   	push   esi
c000efba:	53                   	push   ebx
c000efbb:	bb e8 03 00 00       	mov    ebx,0x3e8
c000efc0:	81 ec ac 00 00 00    	sub    esp,0xac
c000efc6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000efcd:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000efd2:	99                   	cdq    
c000efd3:	f7 f9                	idiv   ecx
c000efd5:	89 d5                	mov    ebp,edx
c000efd7:	99                   	cdq    
c000efd8:	f7 f9                	idiv   ecx
c000efda:	8d 42 30             	lea    eax,[edx+0x30]
c000efdd:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000efe1:	8d 45 30             	lea    eax,[ebp+0x30]
c000efe4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000efe8:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000efef:	99                   	cdq    
c000eff0:	f7 fb                	idiv   ebx
c000eff2:	bb 64 00 00 00       	mov    ebx,0x64
c000eff7:	99                   	cdq    
c000eff8:	f7 f9                	idiv   ecx
c000effa:	8d 42 30             	lea    eax,[edx+0x30]
c000effd:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f001:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f008:	99                   	cdq    
c000f009:	f7 fb                	idiv   ebx
c000f00b:	31 db                	xor    ebx,ebx
c000f00d:	99                   	cdq    
c000f00e:	f7 f9                	idiv   ecx
c000f010:	8d 42 30             	lea    eax,[edx+0x30]
c000f013:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f017:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f01f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f023:	0f be 8b 44 d1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd2ebc]
c000f02a:	83 f9 59             	cmp    ecx,0x59
c000f02d:	74 1c                	je     c000f04b <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f02f:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f036:	83 f9 4d             	cmp    ecx,0x4d
c000f039:	0f 84 e3 00 00 00    	je     c000f122 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f03f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f046:	e9 d7 00 00 00       	jmp    c000f122 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f04b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f050:	74 27                	je     c000f079 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f052:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f056:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f05b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f05f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f063:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f067:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f06b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f06f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f073:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f077:	eb 15                	jmp    c000f08e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f079:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f07d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f081:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f085:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f089:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f08e:	50                   	push   eax
c000f08f:	50                   	push   eax
c000f090:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f094:	57                   	push   edi
c000f095:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f099:	56                   	push   esi
c000f09a:	e8 a1 17 ff ff       	call   c0000840 <strcat>
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	83 fb 02             	cmp    ebx,0x2
c000f0a5:	74 1a                	je     c000f0c1 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f0a7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0ac:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c000f0b1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0b5:	55                   	push   ebp
c000f0b6:	55                   	push   ebp
c000f0b7:	57                   	push   edi
c000f0b8:	56                   	push   esi
c000f0b9:	e8 82 17 ff ff       	call   c0000840 <strcat>
c000f0be:	83 c4 10             	add    esp,0x10
c000f0c1:	43                   	inc    ebx
c000f0c2:	83 fb 03             	cmp    ebx,0x3
c000f0c5:	0f 85 58 ff ff ff    	jne    c000f023 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f0cb:	51                   	push   ecx
c000f0cc:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f0d3:	6a 00                	push   0x0
c000f0d5:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f0dc:	e8 0f 14 ff ff       	call   c00004f0 <memset>
c000f0e1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f0e4:	e8 87 14 ff ff       	call   c0000570 <strlen>
c000f0e9:	83 c4 10             	add    esp,0x10
c000f0ec:	40                   	inc    eax
c000f0ed:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f0f4:	72 17                	jb     c000f10d <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f0f6:	52                   	push   edx
c000f0f7:	52                   	push   edx
c000f0f8:	56                   	push   esi
c000f0f9:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f100:	e8 3b 15 ff ff       	call   c0000640 <strcpy>
c000f105:	83 c4 10             	add    esp,0x10
c000f108:	e9 8a 00 00 00       	jmp    c000f197 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f10d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f114:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f11b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f11e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f120:	eb 75                	jmp    c000f197 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f122:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f126:	89 ef                	mov    edi,ebp
c000f128:	50                   	push   eax
c000f129:	c1 ff 1f             	sar    edi,0x1f
c000f12c:	50                   	push   eax
c000f12d:	57                   	push   edi
c000f12e:	55                   	push   ebp
c000f12f:	e8 70 04 00 00       	call   c000f5a4 <KeGetDigitsInNumber(long long)>
c000f134:	83 c4 10             	add    esp,0x10
c000f137:	48                   	dec    eax
c000f138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f13c:	75 1c                	jne    c000f15a <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f13e:	83 f9 44             	cmp    ecx,0x44
c000f141:	75 09                	jne    c000f14c <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f143:	80 3d 60 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d160,0x0
c000f14a:	eb 0c                	jmp    c000f158 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f14c:	83 f9 4d             	cmp    ecx,0x4d
c000f14f:	75 2b                	jne    c000f17c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f151:	80 3d 61 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d161,0x0
c000f158:	74 22                	je     c000f17c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f15a:	89 e8                	mov    eax,ebp
c000f15c:	b9 0a 00 00 00       	mov    ecx,0xa
c000f161:	99                   	cdq    
c000f162:	f7 f9                	idiv   ecx
c000f164:	89 d5                	mov    ebp,edx
c000f166:	99                   	cdq    
c000f167:	f7 f9                	idiv   ecx
c000f169:	83 c2 30             	add    edx,0x30
c000f16c:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f170:	8d 55 30             	lea    edx,[ebp+0x30]
c000f173:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f177:	e9 0d ff ff ff       	jmp    c000f089 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f17c:	89 e8                	mov    eax,ebp
c000f17e:	b9 0a 00 00 00       	mov    ecx,0xa
c000f183:	99                   	cdq    
c000f184:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f189:	f7 f9                	idiv   ecx
c000f18b:	83 c2 30             	add    edx,0x30
c000f18e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f192:	e9 f7 fe ff ff       	jmp    c000f08e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f197:	81 c4 ac 00 00 00    	add    esp,0xac
c000f19d:	5b                   	pop    ebx
c000f19e:	5e                   	pop    esi
c000f19f:	5f                   	pop    edi
c000f1a0:	5d                   	pop    ebp
c000f1a1:	c3                   	ret    

c000f1a2 <KeFormatShortDate(char*, int, int, int, int)>:
c000f1a2:	83 ec 14             	sub    esp,0x14
c000f1a5:	6a 00                	push   0x0
c000f1a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1bb:	e8 f2 fd ff ff       	call   c000efb2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f1c0:	83 c4 2c             	add    esp,0x2c
c000f1c3:	c3                   	ret    

c000f1c4 <KeFormatLongDate(char*, int, int, int, int)>:
c000f1c4:	83 ec 14             	sub    esp,0x14
c000f1c7:	6a 01                	push   0x1
c000f1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1dd:	e8 d0 fd ff ff       	call   c000efb2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f1e2:	83 c4 2c             	add    esp,0x2c
c000f1e5:	c3                   	ret    

c000f1e6 <KeSetLocale(klocale_t)>:
c000f1e6:	57                   	push   edi
c000f1e7:	b9 09 00 00 00       	mov    ecx,0x9
c000f1ec:	56                   	push   esi
c000f1ed:	bf 40 d1 02 c0       	mov    edi,0xc002d140
c000f1f2:	fc                   	cld    
c000f1f3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f1f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f1f9:	5e                   	pop    esi
c000f1fa:	5f                   	pop    edi
c000f1fb:	c3                   	ret    

c000f1fc <KeInitialiseLocale()>:
c000f1fc:	57                   	push   edi
c000f1fd:	56                   	push   esi
c000f1fe:	83 ec 3c             	sub    esp,0x3c
c000f201:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f209:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f211:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f219:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f221:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f228:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f230:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f238:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f23f:	68 ac 45 02 c0       	push   0xc00245ac
c000f244:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f248:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f24c:	50                   	push   eax
c000f24d:	e8 ee 13 ff ff       	call   c0000640 <strcpy>
c000f252:	83 ec 20             	sub    esp,0x20
c000f255:	b9 09 00 00 00       	mov    ecx,0x9
c000f25a:	fc                   	cld    
c000f25b:	89 e7                	mov    edi,esp
c000f25d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f25f:	e8 82 ff ff ff       	call   c000f1e6 <KeSetLocale(klocale_t)>
c000f264:	83 c4 64             	add    esp,0x64
c000f267:	5e                   	pop    esi
c000f268:	5f                   	pop    edi
c000f269:	c3                   	ret    

c000f26a <KeFormatCurrency(char*, int, long long, long long)>:
c000f26a:	c3                   	ret    

c000f26b <KeFormatCurrency(char*, int, double)>:
c000f26b:	c3                   	ret    

c000f26c <KeFormatNumber(char*, long long, long long)>:
c000f26c:	c3                   	ret    

c000f26d <KeFormatNumber(char*, double)>:
c000f26d:	c3                   	ret    
c000f26e:	66 90                	xchg   ax,ax

c000f270 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f270:	55                   	push   ebp
c000f271:	57                   	push   edi
c000f272:	56                   	push   esi
c000f273:	53                   	push   ebx
c000f274:	83 ec 5c             	sub    esp,0x5c
c000f277:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f27b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f27f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f287:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f28b:	bb cf 33 02 c0       	mov    ebx,0xc00233cf
c000f290:	bd 11 00 00 00       	mov    ebp,0x11
c000f295:	89 d0                	mov    eax,edx
c000f297:	83 e0 01             	and    eax,0x1
c000f29a:	74 10                	je     c000f2ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f29c:	8a 03                	mov    al,BYTE PTR [ebx]
c000f29e:	88 02                	mov    BYTE PTR [edx],al
c000f2a0:	8d 52 01             	lea    edx,[edx+0x1]
c000f2a3:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f2a6:	83 ed 01             	sub    ebp,0x1
c000f2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2ac:	89 d0                	mov    eax,edx
c000f2ae:	83 e0 02             	and    eax,0x2
c000f2b1:	74 11                	je     c000f2c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f2b3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	8d 52 02             	lea    edx,[edx+0x2]
c000f2bc:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f2bf:	83 ed 02             	sub    ebp,0x2
c000f2c2:	66 90                	xchg   ax,ax
c000f2c4:	89 e8                	mov    eax,ebp
c000f2c6:	c1 e8 02             	shr    eax,0x2
c000f2c9:	fc                   	cld    
c000f2ca:	89 d7                	mov    edi,edx
c000f2cc:	89 de                	mov    esi,ebx
c000f2ce:	89 c1                	mov    ecx,eax
c000f2d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2d2:	89 f3                	mov    ebx,esi
c000f2d4:	89 fa                	mov    edx,edi
c000f2d6:	b9 00 00 00 00       	mov    ecx,0x0
c000f2db:	89 e8                	mov    eax,ebp
c000f2dd:	83 e0 02             	and    eax,0x2
c000f2e0:	74 0e                	je     c000f2f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f2e2:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f2e6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f2ea:	8d 41 02             	lea    eax,[ecx+0x2]
c000f2ed:	89 c1                	mov    ecx,eax
c000f2ef:	90                   	nop
c000f2f0:	89 e8                	mov    eax,ebp
c000f2f2:	83 e0 01             	and    eax,0x1
c000f2f5:	74 09                	je     c000f300 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f2f7:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f2fa:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f300:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f304:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f310:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f314:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f318:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f31d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f321:	89 c2                	mov    edx,eax
c000f323:	c1 fa 1f             	sar    edx,0x1f
c000f326:	52                   	push   edx
c000f327:	50                   	push   eax
c000f328:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f32c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f330:	e8 bf 2c 01 00       	call   c0021ff4 <__udivdi3>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f33c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f344:	80 f4 00             	xor    ah,0x0
c000f347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f34b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f34f:	80 f4 00             	xor    ah,0x0
c000f352:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f356:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f35a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f35e:	89 f8                	mov    eax,edi
c000f360:	09 f0                	or     eax,esi
c000f362:	74 04                	je     c000f368 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f364:	eb b2                	jmp    c000f318 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f366:	66 90                	xchg   ax,ax
c000f368:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f36c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f36f:	90                   	nop
c000f370:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f374:	89 c1                	mov    ecx,eax
c000f376:	89 c3                	mov    ebx,eax
c000f378:	c1 fb 1f             	sar    ebx,0x1f
c000f37b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f37f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f383:	53                   	push   ebx
c000f384:	51                   	push   ecx
c000f385:	52                   	push   edx
c000f386:	50                   	push   eax
c000f387:	e8 68 2d 01 00       	call   c00220f4 <__umoddi3>
c000f38c:	83 c4 10             	add    esp,0x10
c000f38f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f394:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f398:	01 c8                	add    eax,ecx
c000f39a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f39c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3a0:	88 10                	mov    BYTE PTR [eax],dl
c000f3a2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3a6:	89 c2                	mov    edx,eax
c000f3a8:	c1 fa 1f             	sar    edx,0x1f
c000f3ab:	52                   	push   edx
c000f3ac:	50                   	push   eax
c000f3ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3b5:	e8 3a 2c 01 00       	call   c0021ff4 <__udivdi3>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f3c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3c9:	80 f4 00             	xor    ah,0x0
c000f3cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f3d4:	80 f4 00             	xor    ah,0x0
c000f3d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f3db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f3e3:	89 f8                	mov    eax,edi
c000f3e5:	09 f0                	or     eax,esi
c000f3e7:	74 03                	je     c000f3ec <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f3e9:	eb 85                	jmp    c000f370 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f3eb:	90                   	nop
c000f3ec:	90                   	nop
c000f3ed:	83 c4 5c             	add    esp,0x5c
c000f3f0:	5b                   	pop    ebx
c000f3f1:	5e                   	pop    esi
c000f3f2:	5f                   	pop    edi
c000f3f3:	5d                   	pop    ebp
c000f3f4:	c3                   	ret    
c000f3f5:	8d 76 00             	lea    esi,[esi+0x0]

c000f3f8 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 5c             	sub    esp,0x5c
c000f3ff:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f403:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f407:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f40b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f40f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f413:	bb cf 33 02 c0       	mov    ebx,0xc00233cf
c000f418:	bd 11 00 00 00       	mov    ebp,0x11
c000f41d:	89 d0                	mov    eax,edx
c000f41f:	83 e0 01             	and    eax,0x1
c000f422:	74 10                	je     c000f434 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f424:	8a 03                	mov    al,BYTE PTR [ebx]
c000f426:	88 02                	mov    BYTE PTR [edx],al
c000f428:	8d 52 01             	lea    edx,[edx+0x1]
c000f42b:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f42e:	83 ed 01             	sub    ebp,0x1
c000f431:	8d 76 00             	lea    esi,[esi+0x0]
c000f434:	89 d0                	mov    eax,edx
c000f436:	83 e0 02             	and    eax,0x2
c000f439:	74 11                	je     c000f44c <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f43b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f43e:	66 89 02             	mov    WORD PTR [edx],ax
c000f441:	8d 52 02             	lea    edx,[edx+0x2]
c000f444:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f447:	83 ed 02             	sub    ebp,0x2
c000f44a:	66 90                	xchg   ax,ax
c000f44c:	89 e8                	mov    eax,ebp
c000f44e:	c1 e8 02             	shr    eax,0x2
c000f451:	fc                   	cld    
c000f452:	89 d7                	mov    edi,edx
c000f454:	89 de                	mov    esi,ebx
c000f456:	89 c1                	mov    ecx,eax
c000f458:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f45a:	89 f3                	mov    ebx,esi
c000f45c:	89 fa                	mov    edx,edi
c000f45e:	b9 00 00 00 00       	mov    ecx,0x0
c000f463:	89 e8                	mov    eax,ebp
c000f465:	83 e0 02             	and    eax,0x2
c000f468:	74 0e                	je     c000f478 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f46a:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f46e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f472:	8d 41 02             	lea    eax,[ecx+0x2]
c000f475:	89 c1                	mov    ecx,eax
c000f477:	90                   	nop
c000f478:	89 e8                	mov    eax,ebp
c000f47a:	83 e0 01             	and    eax,0x1
c000f47d:	74 09                	je     c000f488 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f47f:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f482:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f485:	8d 76 00             	lea    esi,[esi+0x0]
c000f488:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f48c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f495:	79 1d                	jns    c000f4b4 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f497:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f49b:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f4a0:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f4a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f4a8:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ab:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f4af:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f4b2:	66 90                	xchg   ax,ax
c000f4b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f4b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f4bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f4c0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f4c4:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f4c9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f4cd:	89 c2                	mov    edx,eax
c000f4cf:	c1 fa 1f             	sar    edx,0x1f
c000f4d2:	52                   	push   edx
c000f4d3:	50                   	push   eax
c000f4d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f4d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f4dc:	e8 13 2b 01 00       	call   c0021ff4 <__udivdi3>
c000f4e1:	83 c4 10             	add    esp,0x10
c000f4e4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f4e8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f4ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f4f0:	80 f4 00             	xor    ah,0x0
c000f4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4f7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4fb:	80 f4 00             	xor    ah,0x0
c000f4fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f502:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f506:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f50a:	89 f8                	mov    eax,edi
c000f50c:	09 f0                	or     eax,esi
c000f50e:	74 04                	je     c000f514 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f510:	eb b2                	jmp    c000f4c4 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f512:	66 90                	xchg   ax,ax
c000f514:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f518:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f51b:	90                   	nop
c000f51c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f520:	89 c1                	mov    ecx,eax
c000f522:	89 c3                	mov    ebx,eax
c000f524:	c1 fb 1f             	sar    ebx,0x1f
c000f527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f52b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f52f:	53                   	push   ebx
c000f530:	51                   	push   ecx
c000f531:	52                   	push   edx
c000f532:	50                   	push   eax
c000f533:	e8 3c 29 01 00       	call   c0021e74 <__moddi3>
c000f538:	83 c4 10             	add    esp,0x10
c000f53b:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f540:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f544:	01 c8                	add    eax,ecx
c000f546:	8a 10                	mov    dl,BYTE PTR [eax]
c000f548:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f54c:	88 10                	mov    BYTE PTR [eax],dl
c000f54e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f552:	89 c2                	mov    edx,eax
c000f554:	c1 fa 1f             	sar    edx,0x1f
c000f557:	52                   	push   edx
c000f558:	50                   	push   eax
c000f559:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f55d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f561:	e8 c2 27 01 00       	call   c0021d28 <__divdi3>
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f56d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f575:	80 f4 00             	xor    ah,0x0
c000f578:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f580:	80 f4 00             	xor    ah,0x0
c000f583:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f58b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f58f:	89 f8                	mov    eax,edi
c000f591:	09 f0                	or     eax,esi
c000f593:	74 03                	je     c000f598 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f595:	eb 85                	jmp    c000f51c <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f597:	90                   	nop
c000f598:	90                   	nop
c000f599:	83 c4 5c             	add    esp,0x5c
c000f59c:	5b                   	pop    ebx
c000f59d:	5e                   	pop    esi
c000f59e:	5f                   	pop    edi
c000f59f:	5d                   	pop    ebp
c000f5a0:	c3                   	ret    
c000f5a1:	8d 76 00             	lea    esi,[esi+0x0]

c000f5a4 <KeGetDigitsInNumber(long long)>:
c000f5a4:	56                   	push   esi
c000f5a5:	53                   	push   ebx
c000f5a6:	83 ec 24             	sub    esp,0x24
c000f5a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5c8:	80 f4 00             	xor    ah,0x0
c000f5cb:	89 c3                	mov    ebx,eax
c000f5cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5d1:	80 f4 00             	xor    ah,0x0
c000f5d4:	89 c6                	mov    esi,eax
c000f5d6:	89 f0                	mov    eax,esi
c000f5d8:	09 d8                	or     eax,ebx
c000f5da:	74 28                	je     c000f604 <KeGetDigitsInNumber(long long)+0x60>
c000f5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5e4:	6a 00                	push   0x0
c000f5e6:	6a 0a                	push   0xa
c000f5e8:	52                   	push   edx
c000f5e9:	50                   	push   eax
c000f5ea:	e8 39 27 01 00       	call   c0021d28 <__divdi3>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f5fa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f5ff:	eb c3                	jmp    c000f5c4 <KeGetDigitsInNumber(long long)+0x20>
c000f601:	8d 76 00             	lea    esi,[esi+0x0]
c000f604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f608:	83 c4 24             	add    esp,0x24
c000f60b:	5b                   	pop    ebx
c000f60c:	5e                   	pop    esi
c000f60d:	c3                   	ret    
c000f60e:	66 90                	xchg   ax,ax

c000f610 <KeItoa(unsigned long long, char*)>:
c000f610:	83 ec 1c             	sub    esp,0x1c
c000f613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f61b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f61f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f623:	6a 0a                	push   0xa
c000f625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f631:	e8 3a fc ff ff       	call   c000f270 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	90                   	nop
c000f63a:	83 c4 1c             	add    esp,0x1c
c000f63d:	c3                   	ret    
c000f63e:	66 90                	xchg   ax,ax

c000f640 <KeItoa(long long, char*)>:
c000f640:	83 ec 1c             	sub    esp,0x1c
c000f643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f647:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f64b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f64f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f653:	6a 0a                	push   0xa
c000f655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f659:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f65d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f661:	e8 92 fd ff ff       	call   c000f3f8 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	90                   	nop
c000f66a:	83 c4 1c             	add    esp,0x1c
c000f66d:	c3                   	ret    
c000f66e:	66 90                	xchg   ax,ax

c000f670 <KeXtoa(unsigned long long, char*)>:
c000f670:	83 ec 1c             	sub    esp,0x1c
c000f673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f67b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f67f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f683:	6a 10                	push   0x10
c000f685:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f691:	e8 da fb ff ff       	call   c000f270 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f696:	83 c4 10             	add    esp,0x10
c000f699:	90                   	nop
c000f69a:	83 c4 1c             	add    esp,0x1c
c000f69d:	c3                   	ret    

c000f69e <sbrk>:
c000f69e:	55                   	push   ebp
c000f69f:	57                   	push   edi
c000f6a0:	56                   	push   esi
c000f6a1:	53                   	push   ebx
c000f6a2:	83 ec 1c             	sub    esp,0x1c
c000f6a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a9:	85 c0                	test   eax,eax
c000f6ab:	74 61                	je     c000f70e <sbrk+0x70>
c000f6ad:	78 66                	js     c000f715 <sbrk+0x77>
c000f6af:	8b 15 50 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d50
c000f6b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6b9:	05 ff 0f 00 00       	add    eax,0xfff
c000f6be:	89 c5                	mov    ebp,eax
c000f6c0:	78 6b                	js     c000f72d <sbrk+0x8f>
c000f6c2:	c1 fd 0c             	sar    ebp,0xc
c000f6c5:	bb 00 00 00 00       	mov    ebx,0x0
c000f6ca:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f6d0:	8b 3d 50 6d 02 c0    	mov    edi,DWORD PTR ds:0xc0026d50
c000f6d6:	e8 b9 07 00 00       	call   c000fe94 <Phys::allocatePage()>
c000f6db:	68 01 04 00 00       	push   0x401
c000f6e0:	57                   	push   edi
c000f6e1:	50                   	push   eax
c000f6e2:	56                   	push   esi
c000f6e3:	e8 32 42 00 00       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f6e8:	81 05 50 6d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026d50,0x1000
c000f6f2:	83 c3 01             	add    ebx,0x1
c000f6f5:	83 c4 10             	add    esp,0x10
c000f6f8:	39 dd                	cmp    ebp,ebx
c000f6fa:	75 ce                	jne    c000f6ca <sbrk+0x2c>
c000f6fc:	0f 20 d8             	mov    eax,cr3
c000f6ff:	0f 22 d8             	mov    cr3,eax
c000f702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f706:	83 c4 1c             	add    esp,0x1c
c000f709:	5b                   	pop    ebx
c000f70a:	5e                   	pop    esi
c000f70b:	5f                   	pop    edi
c000f70c:	5d                   	pop    ebp
c000f70d:	c3                   	ret    
c000f70e:	a1 50 6d 02 c0       	mov    eax,ds:0xc0026d50
c000f713:	eb f1                	jmp    c000f706 <sbrk+0x68>
c000f715:	83 ec 08             	sub    esp,0x8
c000f718:	50                   	push   eax
c000f719:	68 b0 45 02 c0       	push   0xc00245b0
c000f71e:	e8 59 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f723:	83 c4 10             	add    esp,0x10
c000f726:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f72b:	eb d9                	jmp    c000f706 <sbrk+0x68>
c000f72d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f733:	eb 8d                	jmp    c000f6c2 <sbrk+0x24>

c000f735 <sbrk_thunk>:
c000f735:	83 ec 0c             	sub    esp,0xc
c000f738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f73c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f741:	7f 10                	jg     c000f753 <sbrk_thunk+0x1e>
c000f743:	83 ec 0c             	sub    esp,0xc
c000f746:	50                   	push   eax
c000f747:	e8 52 ff ff ff       	call   c000f69e <sbrk>
c000f74c:	83 c4 10             	add    esp,0x10
c000f74f:	83 c4 0c             	add    esp,0xc
c000f752:	c3                   	ret    
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	50                   	push   eax
c000f757:	68 e0 45 02 c0       	push   0xc00245e0
c000f75c:	e8 1b 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f761:	83 c4 10             	add    esp,0x10
c000f764:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f769:	eb e4                	jmp    c000f74f <sbrk_thunk+0x1a>

c000f76b <mmap>:
c000f76b:	55                   	push   ebp
c000f76c:	57                   	push   edi
c000f76d:	56                   	push   esi
c000f76e:	53                   	push   ebx
c000f76f:	83 ec 18             	sub    esp,0x18
c000f772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f776:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f77c:	89 fb                	mov    ebx,edi
c000f77e:	c1 eb 0c             	shr    ebx,0xc
c000f781:	53                   	push   ebx
c000f782:	e8 b0 3a 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c000f787:	89 c5                	mov    ebp,eax
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	85 db                	test   ebx,ebx
c000f78e:	7e 2f                	jle    c000f7bf <mmap+0x54>
c000f790:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f796:	01 c7                	add    edi,eax
c000f798:	89 c3                	mov    ebx,eax
c000f79a:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f7a0:	e8 ef 06 00 00       	call   c000fe94 <Phys::allocatePage()>
c000f7a5:	68 01 04 00 00       	push   0x401
c000f7aa:	53                   	push   ebx
c000f7ab:	50                   	push   eax
c000f7ac:	56                   	push   esi
c000f7ad:	e8 68 41 00 00       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7b8:	83 c4 10             	add    esp,0x10
c000f7bb:	39 fb                	cmp    ebx,edi
c000f7bd:	75 db                	jne    c000f79a <mmap+0x2f>
c000f7bf:	89 e8                	mov    eax,ebp
c000f7c1:	83 c4 0c             	add    esp,0xc
c000f7c4:	5b                   	pop    ebx
c000f7c5:	5e                   	pop    esi
c000f7c6:	5f                   	pop    edi
c000f7c7:	5d                   	pop    ebp
c000f7c8:	c3                   	ret    

c000f7c9 <munmap>:
c000f7c9:	83 ec 18             	sub    esp,0x18
c000f7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d0:	e8 6a 3d 00 00       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c000f7d5:	b8 00 00 00 00       	mov    eax,0x0
c000f7da:	83 c4 1c             	add    esp,0x1c
c000f7dd:	c3                   	ret    

c000f7de <liballoc_lock()>:
c000f7de:	fa                   	cli    
c000f7df:	83 05 30 d3 02 c0 01 	add    DWORD PTR ds:0xc002d330,0x1
c000f7e6:	b8 00 00 00 00       	mov    eax,0x0
c000f7eb:	c3                   	ret    

c000f7ec <liballoc_unlock()>:
c000f7ec:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f7f4:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000f7fb:	75 01                	jne    c000f7fe <liballoc_unlock()+0x12>
c000f7fd:	fb                   	sti    
c000f7fe:	b8 00 00 00 00       	mov    eax,0x0
c000f803:	c3                   	ret    

c000f804 <liballoc_alloc(int)>:
c000f804:	83 ec 10             	sub    esp,0x10
c000f807:	6a 01                	push   0x1
c000f809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80d:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f813:	e8 06 42 00 00       	call   c0013a1e <VAS::allocatePages(int, int)>
c000f818:	83 c4 1c             	add    esp,0x1c
c000f81b:	c3                   	ret    

c000f81c <liballoc_free(void*, int)>:
c000f81c:	83 ec 14             	sub    esp,0x14
c000f81f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f823:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f829:	e8 4e 3e 00 00       	call   c001367c <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 10 1f ff ff       	call   c0001757 <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c3 19 ff ff       	call   c000121a <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 ec 14 ff ff       	call   c0000d53 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 dc 14 ff ff       	call   c0000d53 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 53 0c ff ff       	call   c00004f0 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    
c000f8a5:	66 90                	xchg   ax,ax
c000f8a7:	90                   	nop

c000f8a8 <KeMailboxTryPost(Mailbox*, void*)>:
c000f8a8:	83 ec 10             	sub    esp,0x10
c000f8ab:	fa                   	cli    
c000f8ac:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f8b1:	83 c0 01             	add    eax,0x1
c000f8b4:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f8b9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f8be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f8c5:	85 c0                	test   eax,eax
c000f8c7:	75 23                	jne    c000f8ec <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f8d1:	89 10                	mov    DWORD PTR [eax],edx
c000f8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f8da:	8d 50 01             	lea    edx,[eax+0x1]
c000f8dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f8e4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ec:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f8f4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f8f9:	85 c0                	test   eax,eax
c000f8fb:	75 03                	jne    c000f900 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f8fd:	fb                   	sti    
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f904:	83 c4 10             	add    esp,0x10
c000f907:	c3                   	ret    

c000f908 <KeMailboxTryGet(Mailbox*, void**)>:
c000f908:	83 ec 10             	sub    esp,0x10
c000f90b:	fa                   	cli    
c000f90c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f911:	83 c0 01             	add    eax,0x1
c000f914:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f919:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f91e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f925:	83 f8 01             	cmp    eax,0x1
c000f928:	75 22                	jne    c000f94c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f92a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f92e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f930:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f934:	89 10                	mov    DWORD PTR [eax],edx
c000f936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f93d:	8d 50 ff             	lea    edx,[eax-0x1]
c000f940:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f944:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f947:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f94c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f954:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f959:	85 c0                	test   eax,eax
c000f95b:	75 03                	jne    c000f960 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f95d:	fb                   	sti    
c000f95e:	66 90                	xchg   ax,ax
c000f960:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f964:	83 c4 10             	add    esp,0x10
c000f967:	c3                   	ret    

c000f968 <KeMailboxCreate()>:
c000f968:	83 ec 1c             	sub    esp,0x1c
c000f96b:	83 ec 0c             	sub    esp,0xc
c000f96e:	6a 08                	push   0x8
c000f970:	e8 d6 fe ff ff       	call   c000f84b <malloc>
c000f975:	83 c4 10             	add    esp,0x10
c000f978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f97c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f98a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f995:	83 c4 1c             	add    esp,0x1c
c000f998:	c3                   	ret    
c000f999:	8d 76 00             	lea    esi,[esi+0x0]

c000f99c <KeMailboxPost(Mailbox*, void*)>:
c000f99c:	83 ec 1c             	sub    esp,0x1c
c000f99f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f9a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9ac:	e8 f7 fe ff ff       	call   c000f8a8 <KeMailboxTryPost(Mailbox*, void*)>
c000f9b1:	83 c4 08             	add    esp,0x8
c000f9b4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f9bc:	83 f0 01             	xor    eax,0x1
c000f9bf:	0f b6 c0             	movzx  eax,al
c000f9c2:	85 c0                	test   eax,eax
c000f9c4:	74 26                	je     c000f9ec <KeMailboxPost(Mailbox*, void*)+0x50>
c000f9c6:	fa                   	cli    
c000f9c7:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f9cc:	83 c0 01             	add    eax,0x1
c000f9cf:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f9d4:	e8 4f 6e 00 00       	call   c0016828 <schedule()>
c000f9d9:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f9e1:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 02                	jne    c000f9ec <KeMailboxPost(Mailbox*, void*)+0x50>
c000f9ea:	fb                   	sti    
c000f9eb:	90                   	nop
c000f9ec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f9f1:	85 c0                	test   eax,eax
c000f9f3:	75 03                	jne    c000f9f8 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f9f5:	eb ad                	jmp    c000f9a4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f9f7:	90                   	nop
c000f9f8:	90                   	nop
c000f9f9:	83 c4 1c             	add    esp,0x1c
c000f9fc:	c3                   	ret    
c000f9fd:	8d 76 00             	lea    esi,[esi+0x0]

c000fa00 <KeMailboxGet(Mailbox*, void**)>:
c000fa00:	83 ec 1c             	sub    esp,0x1c
c000fa03:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa10:	e8 f3 fe ff ff       	call   c000f908 <KeMailboxTryGet(Mailbox*, void**)>
c000fa15:	83 c4 08             	add    esp,0x8
c000fa18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa20:	83 f0 01             	xor    eax,0x1
c000fa23:	0f b6 c0             	movzx  eax,al
c000fa26:	85 c0                	test   eax,eax
c000fa28:	74 26                	je     c000fa50 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa2a:	fa                   	cli    
c000fa2b:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000fa30:	83 c0 01             	add    eax,0x1
c000fa33:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000fa38:	e8 eb 6d 00 00       	call   c0016828 <schedule()>
c000fa3d:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000fa45:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000fa4a:	85 c0                	test   eax,eax
c000fa4c:	75 02                	jne    c000fa50 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa4e:	fb                   	sti    
c000fa4f:	90                   	nop
c000fa50:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa55:	85 c0                	test   eax,eax
c000fa57:	75 03                	jne    c000fa5c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fa59:	eb ad                	jmp    c000fa08 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fa5b:	90                   	nop
c000fa5c:	90                   	nop
c000fa5d:	83 c4 1c             	add    esp,0x1c
c000fa60:	c3                   	ret    
c000fa61:	8d 76 00             	lea    esi,[esi+0x0]

c000fa64 <KeMailboxDestroy(Mailbox*)>:
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	83 ec 0c             	sub    esp,0xc
c000fa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa6e:	e8 e8 fd ff ff       	call   c000f85b <free>
c000fa73:	83 c4 10             	add    esp,0x10
c000fa76:	90                   	nop
c000fa77:	83 c4 0c             	add    esp,0xc
c000fa7a:	c3                   	ret    

c000fa7b <KeFirstTask()>:
c000fa7b:	53                   	push   ebx
c000fa7c:	83 ec 08             	sub    esp,0x8
c000fa7f:	fb                   	sti    
c000fa80:	e8 fc a6 00 00       	call   c001a181 <HalEnableNMI()>
c000fa85:	83 ec 0c             	sub    esp,0xc
c000fa88:	68 ef 45 02 c0       	push   0xc00245ef
c000fa8d:	e8 27 d8 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fa92:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fa99:	e8 ad fd ff ff       	call   c000f84b <malloc>
c000fa9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000faa5:	89 c3                	mov    ebx,eax
c000faa7:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000faac:	50                   	push   eax
c000faad:	68 08 46 02 c0       	push   0xc0024608
c000fab2:	6a 01                	push   0x1
c000fab4:	53                   	push   ebx
c000fab5:	e8 62 68 00 00       	call   c001631c <Process::Process(bool, char const*, Process*, char**)>
c000faba:	83 c4 20             	add    esp,0x20
c000fabd:	68 ff 00 00 00       	push   0xff
c000fac2:	6a 00                	push   0x0
c000fac4:	68 8b ea 00 c0       	push   0xc000ea8b
c000fac9:	53                   	push   ebx
c000faca:	e8 8d 6a 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c000facf:	8b 15 58 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d358
c000fad5:	6a 7a                	push   0x7a
c000fad7:	6a 00                	push   0x0
c000fad9:	68 10 6f 01 c0       	push   0xc0016f10
c000fade:	52                   	push   edx
c000fadf:	e8 78 6a 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c000fae4:	83 c4 14             	add    esp,0x14
c000fae7:	a3 10 d3 02 c0       	mov    ds:0xc002d310,eax
c000faec:	68 90 46 02 c0       	push   0xc0024690
c000faf1:	e8 c3 d7 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000faf6:	c6 05 0d d1 02 c0 01 	mov    BYTE PTR ds:0xc002d10d,0x1
c000fafd:	e8 e9 0b 00 00       	call   c00106eb <KeInitRand()>
c000fb02:	e8 8f 78 00 00       	call   c0017396 <Vm::initialise8086()>
c000fb07:	e8 3c 83 ff ff       	call   c0007e48 <Fs::initVFS()>
c000fb0c:	c7 04 24 51 42 02 c0 	mov    DWORD PTR [esp],0xc0024251
c000fb13:	e8 a1 d7 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fb18:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000fb1d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fb23:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb25:	6a 00                	push   0x0
c000fb27:	6a 00                	push   0x0
c000fb29:	6a 00                	push   0x0
c000fb2b:	50                   	push   eax
c000fb2c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb2f:	83 c4 14             	add    esp,0x14
c000fb32:	68 90 46 02 c0       	push   0xc0024690
c000fb37:	e8 7d d7 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fb3c:	e8 ec 7a ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fb41:	e8 b8 ea ff ff       	call   c000e5fe <KeLoadSystemEnv()>
c000fb46:	e8 e5 09 00 00       	call   c0010530 <KeSetupPowerManager()>
c000fb4b:	c7 04 24 15 46 02 c0 	mov    DWORD PTR [esp],0xc0024615
c000fb52:	e8 62 d7 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fb57:	83 c4 0c             	add    esp,0xc
c000fb5a:	8b 0d 08 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d108
c000fb60:	6a 00                	push   0x0
c000fb62:	51                   	push   ecx
c000fb63:	68 26 46 02 c0       	push   0xc0024626
c000fb68:	e8 1f 63 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	83 ec 0c             	sub    esp,0xc
c000fb73:	6a 02                	push   0x2
c000fb75:	e8 6e 6d 00 00       	call   c00168e8 <blockTask(TaskState)>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	eb f1                	jmp    c000fb70 <KeFirstTask()+0xf5>

c000fb7f <KeEntryPoint>:
c000fb7f:	57                   	push   edi
c000fb80:	bf f9 03 00 00       	mov    edi,0x3f9
c000fb85:	56                   	push   esi
c000fb86:	31 f6                	xor    esi,esi
c000fb88:	53                   	push   ebx
c000fb89:	83 ec 20             	sub    esp,0x20
c000fb8c:	e8 eb d6 ff ff       	call   c000d27c <KeInitialiseBootConfigurationFlags()>
c000fb91:	89 f0                	mov    eax,esi
c000fb93:	89 fa                	mov    edx,edi
c000fb95:	ee                   	out    dx,al
c000fb96:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fb9b:	b0 80                	mov    al,0x80
c000fb9d:	89 da                	mov    edx,ebx
c000fb9f:	ee                   	out    dx,al
c000fba0:	b1 03                	mov    cl,0x3
c000fba2:	ba f8 03 00 00       	mov    edx,0x3f8
c000fba7:	88 c8                	mov    al,cl
c000fba9:	ee                   	out    dx,al
c000fbaa:	89 f0                	mov    eax,esi
c000fbac:	89 fa                	mov    edx,edi
c000fbae:	ee                   	out    dx,al
c000fbaf:	88 c8                	mov    al,cl
c000fbb1:	89 da                	mov    edx,ebx
c000fbb3:	ee                   	out    dx,al
c000fbb4:	b0 c7                	mov    al,0xc7
c000fbb6:	ba fa 03 00 00       	mov    edx,0x3fa
c000fbbb:	ee                   	out    dx,al
c000fbbc:	b0 0b                	mov    al,0xb
c000fbbe:	ba fc 03 00 00       	mov    edx,0x3fc
c000fbc3:	ee                   	out    dx,al
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	68 42 46 02 c0       	push   0xc0024642
c000fbcc:	e8 ab 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fbd1:	e8 b4 d6 ff ff       	call   c000d28a <KeDisplaySplashScreen()>
c000fbd6:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fbdb:	05 ff 0f 00 00       	add    eax,0xfff
c000fbe0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbe5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbe8:	e8 41 04 00 00       	call   c001002e <Phys::physicalMemorySetup(unsigned int)>
c000fbed:	e8 23 38 00 00       	call   c0013415 <Virt::virtualMemorySetup()>
c000fbf2:	e8 e3 d5 ff ff       	call   c000d1da <KeInitialiseAtexit()>
c000fbf7:	58                   	pop    eax
c000fbf8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fbfc:	53                   	push   ebx
c000fbfd:	e8 fa 3a 00 00       	call   c00136fc <VAS::VAS()>
c000fc02:	89 1d 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,ebx
c000fc08:	e8 01 26 01 00       	call   c002220e <_init>
c000fc0d:	c7 04 24 59 46 02 c0 	mov    DWORD PTR [esp],0xc0024659
c000fc14:	e8 a0 d6 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fc19:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fc20:	e8 26 fc ff ff       	call   c000f84b <malloc>
c000fc25:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc28:	89 c6                	mov    esi,eax
c000fc2a:	e8 11 e4 ff ff       	call   c000e040 <Computer::Computer()>
c000fc2f:	8b 15 90 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d290
c000fc35:	89 35 08 d1 02 c0    	mov    DWORD PTR ds:0xc002d108,esi
c000fc3b:	52                   	push   edx
c000fc3c:	6a 00                	push   0x0
c000fc3e:	6a 00                	push   0x0
c000fc40:	56                   	push   esi
c000fc41:	e8 3e e4 ff ff       	call   c000e084 <Computer::open(int, int, void*)>
c000fc46:	83 c4 14             	add    esp,0x14
c000fc49:	68 b4 46 02 c0       	push   0xc00246b4
c000fc4e:	e8 66 d6 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fc53:	e8 9e ac 00 00       	call   c001a8f6 <HalInitialiseCoprocessor()>
c000fc58:	c7 04 24 73 46 02 c0 	mov    DWORD PTR [esp],0xc0024673
c000fc5f:	e8 55 d6 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c000fc64:	c7 04 24 7b fa 00 c0 	mov    DWORD PTR [esp],0xc000fa7b
c000fc6b:	e8 70 6a 00 00       	call   c00166e0 <setupMultitasking(void (*)())>
c000fc70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc73:	e8 3a 3b 00 00       	call   c00137b2 <VAS::~VAS()>
c000fc78:	83 c4 30             	add    esp,0x30
c000fc7b:	5b                   	pop    ebx
c000fc7c:	5e                   	pop    esi
c000fc7d:	5f                   	pop    edi
c000fc7e:	c3                   	ret    
c000fc7f:	90                   	nop

c000fc80 <Mutex::Mutex()>:
c000fc80:	83 ec 0c             	sub    esp,0xc
c000fc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc87:	83 ec 08             	sub    esp,0x8
c000fc8a:	6a 01                	push   0x1
c000fc8c:	50                   	push   eax
c000fc8d:	e8 fa 0c 00 00       	call   c001098c <Semaphore::Semaphore(int)>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	90                   	nop
c000fc96:	83 c4 0c             	add    esp,0xc
c000fc99:	c3                   	ret    

c000fc9a <KeIsKernelInPanic()>:
c000fc9a:	a0 64 d1 02 c0       	mov    al,ds:0xc002d164
c000fc9f:	c3                   	ret    

c000fca0 <KePanic(char const*)>:
c000fca0:	c6 05 64 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d164,0x1
c000fca7:	e9 ce ac 00 00       	jmp    c001a97a <HalPanic(char const*)>

c000fcac <Phys::allocateDMA(unsigned long)>:
c000fcac:	55                   	push   ebp
c000fcad:	31 ed                	xor    ebp,ebp
c000fcaf:	57                   	push   edi
c000fcb0:	56                   	push   esi
c000fcb1:	53                   	push   ebx
c000fcb2:	31 db                	xor    ebx,ebx
c000fcb4:	83 ec 1c             	sub    esp,0x1c
c000fcb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcbb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcc3:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fcc9:	31 c0                	xor    eax,eax
c000fccb:	c1 ef 0c             	shr    edi,0xc
c000fcce:	eb 1b                	jmp    c000fceb <Phys::allocateDMA(unsigned long)+0x3f>
c000fcd0:	85 c0                	test   eax,eax
c000fcd2:	75 06                	jne    c000fcda <Phys::allocateDMA(unsigned long)+0x2e>
c000fcd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcd8:	89 dd                	mov    ebp,ebx
c000fcda:	8d 70 01             	lea    esi,[eax+0x1]
c000fcdd:	39 f7                	cmp    edi,esi
c000fcdf:	74 37                	je     c000fd18 <Phys::allocateDMA(unsigned long)+0x6c>
c000fce1:	89 f0                	mov    eax,esi
c000fce3:	83 c3 01             	add    ebx,0x1
c000fce6:	83 fb 0f             	cmp    ebx,0xf
c000fce9:	7f 13                	jg     c000fcfe <Phys::allocateDMA(unsigned long)+0x52>
c000fceb:	80 bb 80 d1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd2e80],0x0
c000fcf2:	74 dc                	je     c000fcd0 <Phys::allocateDMA(unsigned long)+0x24>
c000fcf4:	31 c0                	xor    eax,eax
c000fcf6:	83 c3 01             	add    ebx,0x1
c000fcf9:	83 fb 0f             	cmp    ebx,0xf
c000fcfc:	7e ed                	jle    c000fceb <Phys::allocateDMA(unsigned long)+0x3f>
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 d8 46 02 c0       	push   0xc00246d8
c000fd06:	e8 95 ff ff ff       	call   c000fca0 <KePanic(char const*)>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	31 c0                	xor    eax,eax
c000fd10:	83 c4 1c             	add    esp,0x1c
c000fd13:	5b                   	pop    ebx
c000fd14:	5e                   	pop    esi
c000fd15:	5f                   	pop    edi
c000fd16:	5d                   	pop    ebp
c000fd17:	c3                   	ret    
c000fd18:	89 e9                	mov    ecx,ebp
c000fd1a:	c1 f9 04             	sar    ecx,0x4
c000fd1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd21:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000fd25:	89 ca                	mov    edx,ecx
c000fd27:	83 ea 01             	sub    edx,0x1
c000fd2a:	79 03                	jns    c000fd2f <Phys::allocateDMA(unsigned long)+0x83>
c000fd2c:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fd2f:	c1 fa 04             	sar    edx,0x4
c000fd32:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000fd36:	74 08                	je     c000fd40 <Phys::allocateDMA(unsigned long)+0x94>
c000fd38:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000fd3c:	31 c0                	xor    eax,eax
c000fd3e:	eb b6                	jmp    c000fcf6 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd40:	85 f6                	test   esi,esi
c000fd42:	74 17                	je     c000fd5b <Phys::allocateDMA(unsigned long)+0xaf>
c000fd44:	8d 95 80 d1 02 c0    	lea    edx,[ebp-0x3ffd2e80]
c000fd4a:	8d 84 05 81 d1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd2e7f]
c000fd51:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd54:	83 c2 01             	add    edx,0x1
c000fd57:	39 d0                	cmp    eax,edx
c000fd59:	75 f6                	jne    c000fd51 <Phys::allocateDMA(unsigned long)+0xa5>
c000fd5b:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fd60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd64:	01 f8                	add    eax,edi
c000fd66:	85 d2                	test   edx,edx
c000fd68:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fd6d:	74 17                	je     c000fd86 <Phys::allocateDMA(unsigned long)+0xda>
c000fd6f:	83 ec 0c             	sub    esp,0xc
c000fd72:	68 d8 46 02 c0       	push   0xc00246d8
c000fd77:	e8 24 ff ff ff       	call   c000fca0 <KePanic(char const*)>
c000fd7c:	83 c4 10             	add    esp,0x10
c000fd7f:	89 f0                	mov    eax,esi
c000fd81:	e9 5d ff ff ff       	jmp    c000fce3 <Phys::allocateDMA(unsigned long)+0x37>
c000fd86:	c1 e5 0c             	shl    ebp,0xc
c000fd89:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000fd8f:	e9 7c ff ff ff       	jmp    c000fd10 <Phys::allocateDMA(unsigned long)+0x64>

c000fd94 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd98:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fd9e:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fda3:	c1 ea 0c             	shr    edx,0xc
c000fda6:	29 d0                	sub    eax,edx
c000fda8:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fdad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdb1:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fdb6:	c1 e8 0c             	shr    eax,0xc
c000fdb9:	85 d2                	test   edx,edx
c000fdbb:	74 11                	je     c000fdce <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fdbd:	05 80 d1 02 c0       	add    eax,0xc002d180
c000fdc2:	01 c2                	add    edx,eax
c000fdc4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdc7:	83 c0 01             	add    eax,0x1
c000fdca:	39 d0                	cmp    eax,edx
c000fdcc:	75 f6                	jne    c000fdc4 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fdce:	c3                   	ret    

c000fdcf <Phys::setPageState(unsigned long, bool)>:
c000fdcf:	57                   	push   edi
c000fdd0:	56                   	push   esi
c000fdd1:	8b 35 54 6d 02 c0    	mov    esi,DWORD PTR ds:0xc0026d54
c000fdd7:	53                   	push   ebx
c000fdd8:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fde5:	0f b6 c0             	movzx  eax,al
c000fde8:	89 ca                	mov    edx,ecx
c000fdea:	83 e1 07             	and    ecx,0x7
c000fded:	c1 ea 03             	shr    edx,0x3
c000fdf0:	d3 c3                	rol    ebx,cl
c000fdf2:	01 d6                	add    esi,edx
c000fdf4:	d3 e0                	shl    eax,cl
c000fdf6:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fdf9:	21 fb                	and    ebx,edi
c000fdfb:	88 1e                	mov    BYTE PTR [esi],bl
c000fdfd:	8b 1d 54 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026d54
c000fe03:	01 da                	add    edx,ebx
c000fe05:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fe07:	09 c8                	or     eax,ecx
c000fe09:	88 02                	mov    BYTE PTR [edx],al
c000fe0b:	5b                   	pop    ebx
c000fe0c:	5e                   	pop    esi
c000fe0d:	5f                   	pop    edi
c000fe0e:	c3                   	ret    

c000fe0f <Phys::getPageState(unsigned long)>:
c000fe0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe13:	8b 15 54 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d54
c000fe19:	89 c8                	mov    eax,ecx
c000fe1b:	83 e1 07             	and    ecx,0x7
c000fe1e:	c1 e8 03             	shr    eax,0x3
c000fe21:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe25:	d3 f8                	sar    eax,cl
c000fe27:	83 e0 01             	and    eax,0x1
c000fe2a:	c3                   	ret    

c000fe2b <Phys::freePage(unsigned long)>:
c000fe2b:	53                   	push   ebx
c000fe2c:	83 ec 08             	sub    esp,0x8
c000fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe33:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fe39:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fe3f:	76 41                	jbe    c000fe82 <Phys::freePage(unsigned long)+0x57>
c000fe41:	c1 e8 0c             	shr    eax,0xc
c000fe44:	50                   	push   eax
c000fe45:	89 c3                	mov    ebx,eax
c000fe47:	e8 c3 ff ff ff       	call   c000fe0f <Phys::getPageState(unsigned long)>
c000fe4c:	5a                   	pop    edx
c000fe4d:	84 c0                	test   al,al
c000fe4f:	74 20                	je     c000fe71 <Phys::freePage(unsigned long)+0x46>
c000fe51:	83 ec 08             	sub    esp,0x8
c000fe54:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fe59:	6a 00                	push   0x0
c000fe5b:	83 e8 01             	sub    eax,0x1
c000fe5e:	53                   	push   ebx
c000fe5f:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fe64:	e8 66 ff ff ff       	call   c000fdcf <Phys::setPageState(unsigned long, bool)>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	83 c4 08             	add    esp,0x8
c000fe6f:	5b                   	pop    ebx
c000fe70:	c3                   	ret    
c000fe71:	c7 44 24 10 ea 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc00246ea
c000fe79:	83 c4 08             	add    esp,0x8
c000fe7c:	5b                   	pop    ebx
c000fe7d:	e9 1e fe ff ff       	jmp    c000fca0 <KePanic(char const*)>
c000fe82:	68 00 10 00 00       	push   0x1000
c000fe87:	50                   	push   eax
c000fe88:	e8 07 ff ff ff       	call   c000fd94 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe8d:	59                   	pop    ecx
c000fe8e:	5b                   	pop    ebx
c000fe8f:	83 c4 08             	add    esp,0x8
c000fe92:	5b                   	pop    ebx
c000fe93:	c3                   	ret    

c000fe94 <Phys::allocatePage()>:
c000fe94:	56                   	push   esi
c000fe95:	53                   	push   ebx
c000fe96:	83 ec 14             	sub    esp,0x14
c000fe99:	8b 35 6c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d16c
c000fe9f:	89 f3                	mov    ebx,esi
c000fea1:	eb 18                	jmp    c000febb <Phys::allocatePage()+0x27>
c000fea3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fea9:	75 0c                	jne    c000feb7 <Phys::allocatePage()+0x23>
c000feab:	c7 05 6c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d16c,0x0
c000feb5:	31 db                	xor    ebx,ebx
c000feb7:	39 de                	cmp    esi,ebx
c000feb9:	74 5b                	je     c000ff16 <Phys::allocatePage()+0x82>
c000febb:	53                   	push   ebx
c000febc:	e8 4e ff ff ff       	call   c000fe0f <Phys::getPageState(unsigned long)>
c000fec1:	59                   	pop    ecx
c000fec2:	84 c0                	test   al,al
c000fec4:	74 29                	je     c000feef <Phys::allocatePage()+0x5b>
c000fec6:	83 c3 01             	add    ebx,0x1
c000fec9:	89 1d 6c d1 02 c0    	mov    DWORD PTR ds:0xc002d16c,ebx
c000fecf:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fed5:	76 cc                	jbe    c000fea3 <Phys::allocatePage()+0xf>
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	68 00 47 02 c0       	push   0xc0024700
c000fedf:	e8 bc fd ff ff       	call   c000fca0 <KePanic(char const*)>
c000fee4:	8b 1d 6c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d16c
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	eb b4                	jmp    c000fea3 <Phys::allocatePage()+0xf>
c000feef:	6a 01                	push   0x1
c000fef1:	53                   	push   ebx
c000fef2:	e8 d8 fe ff ff       	call   c000fdcf <Phys::setPageState(unsigned long, bool)>
c000fef7:	8b 1d 78 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d178
c000fefd:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c000ff02:	83 c3 01             	add    ebx,0x1
c000ff05:	5e                   	pop    esi
c000ff06:	89 1d 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,ebx
c000ff0c:	c1 e0 0c             	shl    eax,0xc
c000ff0f:	5a                   	pop    edx
c000ff10:	83 c4 14             	add    esp,0x14
c000ff13:	5b                   	pop    ebx
c000ff14:	5e                   	pop    esi
c000ff15:	c3                   	ret    
c000ff16:	83 ec 0c             	sub    esp,0xc
c000ff19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff21:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000ff27:	51                   	push   ecx
c000ff28:	e8 9f 43 00 00       	call   c00142cc <VAS::scanForEviction()>
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	85 c0                	test   eax,eax
c000ff32:	75 1b                	jne    c000ff4f <Phys::allocatePage()+0xbb>
c000ff34:	83 ec 0c             	sub    esp,0xc
c000ff37:	68 48 47 02 c0       	push   0xc0024748
c000ff3c:	e8 5f fd ff ff       	call   c000fca0 <KePanic(char const*)>
c000ff41:	8b 1d 6c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d16c
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	e9 6c ff ff ff       	jmp    c000febb <Phys::allocatePage()+0x27>
c000ff4f:	83 ec 08             	sub    esp,0x8
c000ff52:	8b 15 78 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d178
c000ff58:	6a 01                	push   0x1
c000ff5a:	83 c2 01             	add    edx,0x1
c000ff5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff61:	89 15 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,edx
c000ff67:	89 c2                	mov    edx,eax
c000ff69:	c1 ea 0c             	shr    edx,0xc
c000ff6c:	52                   	push   edx
c000ff6d:	e8 5d fe ff ff       	call   c000fdcf <Phys::setPageState(unsigned long, bool)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff79:	eb 95                	jmp    c000ff10 <Phys::allocatePage()+0x7c>

c000ff7b <Phys::allocateContiguousPages(int)>:
c000ff7b:	57                   	push   edi
c000ff7c:	56                   	push   esi
c000ff7d:	53                   	push   ebx
c000ff7e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ff82:	fa                   	cli    
c000ff83:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	83 c2 01             	add    edx,0x1
c000ff8f:	68 78 47 02 c0       	push   0xc0024778
c000ff94:	89 15 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edx
c000ff9a:	31 db                	xor    ebx,ebx
c000ff9c:	e8 db 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	85 db                	test   ebx,ebx
c000ffa6:	75 11                	jne    c000ffb9 <Phys::allocateContiguousPages(int)+0x3e>
c000ffa8:	e8 e7 fe ff ff       	call   c000fe94 <Phys::allocatePage()>
c000ffad:	83 ff 01             	cmp    edi,0x1
c000ffb0:	89 c6                	mov    esi,eax
c000ffb2:	74 21                	je     c000ffd5 <Phys::allocateContiguousPages(int)+0x5a>
c000ffb4:	bb 01 00 00 00       	mov    ebx,0x1
c000ffb9:	e8 d6 fe ff ff       	call   c000fe94 <Phys::allocatePage()>
c000ffbe:	89 da                	mov    edx,ebx
c000ffc0:	c1 e2 0c             	shl    edx,0xc
c000ffc3:	01 f2                	add    edx,esi
c000ffc5:	39 c2                	cmp    edx,eax
c000ffc7:	74 24                	je     c000ffed <Phys::allocateContiguousPages(int)+0x72>
c000ffc9:	bb 01 00 00 00       	mov    ebx,0x1
c000ffce:	89 c6                	mov    esi,eax
c000ffd0:	83 ff 01             	cmp    edi,0x1
c000ffd3:	75 e4                	jne    c000ffb9 <Phys::allocateContiguousPages(int)+0x3e>
c000ffd5:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000ffdd:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000ffe2:	85 c0                	test   eax,eax
c000ffe4:	75 01                	jne    c000ffe7 <Phys::allocateContiguousPages(int)+0x6c>
c000ffe6:	fb                   	sti    
c000ffe7:	89 f0                	mov    eax,esi
c000ffe9:	5b                   	pop    ebx
c000ffea:	5e                   	pop    esi
c000ffeb:	5f                   	pop    edi
c000ffec:	c3                   	ret    
c000ffed:	83 c3 01             	add    ebx,0x1
c000fff0:	39 fb                	cmp    ebx,edi
c000fff2:	75 b0                	jne    c000ffa4 <Phys::allocateContiguousPages(int)+0x29>
c000fff4:	eb df                	jmp    c000ffd5 <Phys::allocateContiguousPages(int)+0x5a>

c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fffc:	39 1d 70 d1 02 c0    	cmp    DWORD PTR ds:0xc002d170,ebx
c0010002:	73 06                	jae    c001000a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010004:	89 1d 70 d1 02 c0    	mov    DWORD PTR ds:0xc002d170,ebx
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	c1 eb 0c             	shr    ebx,0xc
c0010011:	c1 e8 0c             	shr    eax,0xc
c0010014:	39 d8                	cmp    eax,ebx
c0010016:	73 13                	jae    c001002b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010018:	6a 00                	push   0x0
c001001a:	8d 70 01             	lea    esi,[eax+0x1]
c001001d:	50                   	push   eax
c001001e:	e8 ac fd ff ff       	call   c000fdcf <Phys::setPageState(unsigned long, bool)>
c0010023:	5a                   	pop    edx
c0010024:	89 f0                	mov    eax,esi
c0010026:	59                   	pop    ecx
c0010027:	39 f3                	cmp    ebx,esi
c0010029:	75 ed                	jne    c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002b:	5b                   	pop    ebx
c001002c:	5e                   	pop    esi
c001002d:	c3                   	ret    

c001002e <Phys::physicalMemorySetup(unsigned int)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	83 ec 40             	sub    esp,0x40
c0010035:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010039:	6a 10                	push   0x10
c001003b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010041:	6a 00                	push   0x0
c0010043:	68 80 d1 02 c0       	push   0xc002d180
c0010048:	e8 a3 04 ff ff       	call   c00004f0 <memset>
c001004d:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010053:	31 db                	xor    ebx,ebx
c0010055:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010059:	5a                   	pop    edx
c001005a:	59                   	pop    ecx
c001005b:	50                   	push   eax
c001005c:	68 05 47 02 c0       	push   0xc0024705
c0010061:	e8 16 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	83 ec 08             	sub    esp,0x8
c001006c:	6a 01                	push   0x1
c001006e:	53                   	push   ebx
c001006f:	83 c3 01             	add    ebx,0x1
c0010072:	e8 58 fd ff ff       	call   c000fdcf <Phys::setPageState(unsigned long, bool)>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010080:	75 e7                	jne    c0010069 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010082:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010089:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010090:	c1 e0 08             	shl    eax,0x8
c0010093:	09 c2                	or     edx,eax
c0010095:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010099:	0f 84 b5 01 00 00    	je     c0010254 <Phys::physicalMemorySetup(unsigned int)+0x226>
c001009f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ab:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100b4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100bc:	eb 1c                	jmp    c00100da <Phys::physicalMemorySetup(unsigned int)+0xac>
c00100be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100c2:	83 c3 18             	add    ebx,0x18
c00100c5:	83 c0 01             	add    eax,0x1
c00100c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100d4:	0f 84 5d 01 00 00    	je     c0010237 <Phys::physicalMemorySetup(unsigned int)+0x209>
c00100da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100eb:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100ed:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f0:	01 f0                	add    eax,esi
c00100f2:	55                   	push   ebp
c00100f3:	11 fa                	adc    edx,edi
c00100f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010101:	50                   	push   eax
c0010102:	56                   	push   esi
c0010103:	68 d8 47 02 c0       	push   0xc00247d8
c0010108:	e8 6f 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001010d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	09 f8                	or     eax,edi
c0010116:	0f 85 1b 01 00 00    	jne    c0010237 <Phys::physicalMemorySetup(unsigned int)+0x209>
c001011c:	83 fd 01             	cmp    ebp,0x1
c001011f:	75 9d                	jne    c00100be <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010121:	ba 00 00 08 00       	mov    edx,0x80000
c0010126:	89 c1                	mov    ecx,eax
c0010128:	39 f2                	cmp    edx,esi
c001012a:	19 f9                	sbb    ecx,edi
c001012c:	0f 82 ab 00 00 00    	jb     c00101dd <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010132:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010136:	89 c1                	mov    ecx,eax
c0010138:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001013c:	0f 83 9b 00 00 00    	jae    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010142:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010147:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001014b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001014f:	39 fa                	cmp    edx,edi
c0010151:	19 e8                	sbb    eax,ebp
c0010153:	0f 82 e6 00 00 00    	jb     c001023f <Phys::physicalMemorySetup(unsigned int)+0x211>
c0010159:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010161:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010167:	ba ff 1f 00 00       	mov    edx,0x1fff
c001016c:	83 d5 ff             	adc    ebp,0xffffffff
c001016f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010173:	31 c0                	xor    eax,eax
c0010175:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010179:	39 fa                	cmp    edx,edi
c001017b:	89 c1                	mov    ecx,eax
c001017d:	19 e9                	sbb    ecx,ebp
c001017f:	0f 83 39 ff ff ff    	jae    c00100be <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010185:	be 00 00 08 00       	mov    esi,0x80000
c001018a:	83 ec 04             	sub    esp,0x4
c001018d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	68 fc 47 02 c0       	push   0xc00247fc
c0010198:	e8 df 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001019d:	5a                   	pop    edx
c001019e:	59                   	pop    ecx
c001019f:	57                   	push   edi
c00101a0:	56                   	push   esi
c00101a1:	e8 50 fe ff ff       	call   c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ae:	8b 35 7c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d17c
c00101b4:	83 c4 0c             	add    esp,0xc
c00101b7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101bb:	01 f0                	add    eax,esi
c00101bd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c4:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c00101c9:	52                   	push   edx
c00101ca:	50                   	push   eax
c00101cb:	68 2b 47 02 c0       	push   0xc002472b
c00101d0:	e8 a7 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	e9 e1 fe ff ff       	jmp    c00100be <Phys::physicalMemorySetup(unsigned int)+0x90>
c00101dd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101e9:	39 ea                	cmp    edx,ebp
c00101eb:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101ef:	0f 82 c9 fe ff ff    	jb     c00100be <Phys::physicalMemorySetup(unsigned int)+0x90>
c00101f5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101fa:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101fe:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010202:	0f 83 b6 fe ff ff    	jae    c00100be <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010208:	39 ee                	cmp    esi,ebp
c001020a:	89 f8                	mov    eax,edi
c001020c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010210:	0f 83 74 ff ff ff    	jae    c001018a <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010216:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001021a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010222:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010226:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001022a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010232:	e9 53 ff ff ff       	jmp    c001018a <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010237:	83 c4 3c             	add    esp,0x3c
c001023a:	5b                   	pop    ebx
c001023b:	5e                   	pop    esi
c001023c:	5f                   	pop    edi
c001023d:	5d                   	pop    ebp
c001023e:	c3                   	ret    
c001023f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010247:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001024f:	e9 05 ff ff ff       	jmp    c0010159 <Phys::physicalMemorySetup(unsigned int)+0x12b>
c0010254:	c7 44 24 50 1d 47 02 c0 	mov    DWORD PTR [esp+0x50],0xc002471d
c001025c:	83 c4 3c             	add    esp,0x3c
c001025f:	5b                   	pop    ebx
c0010260:	5e                   	pop    esi
c0010261:	5f                   	pop    edi
c0010262:	5d                   	pop    ebp
c0010263:	e9 38 fa ff ff       	jmp    c000fca0 <KePanic(char const*)>

c0010268 <Pipe::isAtty()>:
c0010268:	31 c0                	xor    eax,eax
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <Pipe::~Pipe()>:
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	ba 68 48 02 c0       	mov    edx,0xc0024868
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	89 10                	mov    DWORD PTR [eax],edx
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	50                   	push   eax
c0010282:	e8 43 2d 00 00       	call   c0012fca <UnixFile::~UnixFile()>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	90                   	nop
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029a:	e8 cd ff ff ff       	call   c001026c <Pipe::~Pipe()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	83 ec 08             	sub    esp,0x8
c00102a5:	6a 20                	push   0x20
c00102a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ab:	e8 b4 d0 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Pipe::write(unsigned long long, void*, int*)>:
c00102b8:	55                   	push   ebp
c00102b9:	57                   	push   edi
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	83 ec 1c             	sub    esp,0x1c
c00102bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102c7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00102ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00102ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00102d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102d5:	89 d8                	mov    eax,ebx
c00102d7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00102da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102de:	89 d6                	mov    esi,edx
c00102e0:	89 d7                	mov    edi,edx
c00102e2:	c1 ff 1f             	sar    edi,0x1f
c00102e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00102e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102ec:	c1 f8 1f             	sar    eax,0x1f
c00102ef:	39 f3                	cmp    ebx,esi
c00102f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102f9:	19 f8                	sbb    eax,edi
c00102fb:	b8 01 00 00 00       	mov    eax,0x1
c0010300:	72 6e                	jb     c0010370 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010305:	01 d0                	add    eax,edx
c0010307:	99                   	cdq    
c0010308:	f7 fb                	idiv   ebx
c001030a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030e:	29 d3                	sub    ebx,edx
c0010310:	89 d7                	mov    edi,edx
c0010312:	89 de                	mov    esi,ebx
c0010314:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010317:	c1 fb 1f             	sar    ebx,0x1f
c001031a:	39 f2                	cmp    edx,esi
c001031c:	19 d8                	sbb    eax,ebx
c001031e:	b8 00 00 00 00       	mov    eax,0x0
c0010323:	72 04                	jb     c0010329 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010325:	89 d0                	mov    eax,edx
c0010327:	29 f0                	sub    eax,esi
c0010329:	89 d3                	mov    ebx,edx
c001032b:	29 c3                	sub    ebx,eax
c001032d:	74 0b                	je     c001033a <Pipe::write(unsigned long long, void*, int*)+0x82>
c001032f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010332:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010336:	89 d9                	mov    ecx,ebx
c0010338:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001033a:	85 c0                	test   eax,eax
c001033c:	74 0d                	je     c001034b <Pipe::write(unsigned long long, void*, int*)+0x93>
c001033e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010342:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010345:	89 de                	mov    esi,ebx
c0010347:	89 c1                	mov    ecx,eax
c0010349:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001034b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001034e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010353:	75 10                	jne    c0010365 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010355:	83 ec 0c             	sub    esp,0xc
c0010358:	68 25 48 02 c0       	push   0xc0024825
c001035d:	e8 3e f9 ff ff       	call   c000fca0 <KePanic(char const*)>
c0010362:	83 c4 10             	add    esp,0x10
c0010365:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010369:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001036c:	89 08                	mov    DWORD PTR [eax],ecx
c001036e:	31 c0                	xor    eax,eax
c0010370:	83 c4 1c             	add    esp,0x1c
c0010373:	5b                   	pop    ebx
c0010374:	5e                   	pop    esi
c0010375:	5f                   	pop    edi
c0010376:	5d                   	pop    ebp
c0010377:	c3                   	ret    

c0010378 <Pipe::read(unsigned long long, void*, int*)>:
c0010378:	55                   	push   ebp
c0010379:	57                   	push   edi
c001037a:	56                   	push   esi
c001037b:	53                   	push   ebx
c001037c:	83 ec 1c             	sub    esp,0x1c
c001037f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010383:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010387:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001038b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001038e:	89 c8                	mov    eax,ecx
c0010390:	99                   	cdq    
c0010391:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010395:	74 27                	je     c00103be <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010397:	39 f9                	cmp    ecx,edi
c0010399:	89 d1                	mov    ecx,edx
c001039b:	19 f1                	sbb    ecx,esi
c001039d:	73 1f                	jae    c00103be <Pipe::read(unsigned long long, void*, int*)+0x46>
c001039f:	fa                   	cli    
c00103a0:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c00103a6:	e8 7d 64 00 00       	call   c0016828 <schedule()>
c00103ab:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00103b2:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00103b9:	75 d0                	jne    c001038b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103bb:	fb                   	sti    
c00103bc:	eb cd                	jmp    c001038b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103be:	39 f8                	cmp    eax,edi
c00103c0:	89 d1                	mov    ecx,edx
c00103c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00103c5:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103c9:	19 f1                	sbb    ecx,esi
c00103cb:	73 07                	jae    c00103d4 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00103cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00103d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103d4:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00103d7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00103da:	29 f7                	sub    edi,esi
c00103dc:	89 f8                	mov    eax,edi
c00103de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103e2:	99                   	cdq    
c00103e3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00103e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ea:	19 d0                	sbb    eax,edx
c00103ec:	73 07                	jae    c00103f5 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00103ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00103f8:	89 ea                	mov    edx,ebp
c00103fa:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00103fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010403:	74 0d                	je     c0010412 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010405:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010408:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001040c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010410:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010412:	85 d2                	test   edx,edx
c0010414:	74 11                	je     c0010427 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001041a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001041d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010421:	89 d1                	mov    ecx,edx
c0010423:	89 c7                	mov    edi,eax
c0010425:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010427:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001042a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001042d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010430:	99                   	cdq    
c0010431:	89 f7                	mov    edi,esi
c0010433:	03 04 24             	add    eax,DWORD PTR [esp]
c0010436:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001043a:	c1 ff 1f             	sar    edi,0x1f
c001043d:	57                   	push   edi
c001043e:	56                   	push   esi
c001043f:	52                   	push   edx
c0010440:	50                   	push   eax
c0010441:	e8 ae 1c 01 00       	call   c00220f4 <__umoddi3>
c0010446:	83 c4 10             	add    esp,0x10
c0010449:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001044c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010451:	75 10                	jne    c0010463 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	68 42 48 02 c0       	push   0xc0024842
c001045b:	e8 40 f8 ff ff       	call   c000fca0 <KePanic(char const*)>
c0010460:	83 c4 10             	add    esp,0x10
c0010463:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010467:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001046a:	89 10                	mov    DWORD PTR [eax],edx
c001046c:	83 c4 1c             	add    esp,0x1c
c001046f:	31 c0                	xor    eax,eax
c0010471:	5b                   	pop    ebx
c0010472:	5e                   	pop    esi
c0010473:	5f                   	pop    edi
c0010474:	5d                   	pop    ebp
c0010475:	c3                   	ret    

c0010476 <Pipe::Pipe(int)>:
c0010476:	83 ec 0c             	sub    esp,0xc
c0010479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047d:	83 ec 08             	sub    esp,0x8
c0010480:	6a 00                	push   0x0
c0010482:	50                   	push   eax
c0010483:	e8 5c 29 00 00       	call   c0012de4 <UnixFile::UnixFile(int)>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	ba 68 48 02 c0       	mov    edx,0xc0024868
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	89 10                	mov    DWORD PTR [eax],edx
c0010496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	50                   	push   eax
c00104bf:	e8 87 f3 ff ff       	call   c000f84b <malloc>
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	89 c2                	mov    edx,eax
c00104c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d8:	90                   	nop
c00104d9:	83 c4 0c             	add    esp,0xc
c00104dc:	c3                   	ret    

c00104dd <KePowerThread(void*)>:
c00104dd:	83 ec 0c             	sub    esp,0xc
c00104e0:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00104e7:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00104ee:	75 01                	jne    c00104f1 <KePowerThread(void*)+0x14>
c00104f0:	fb                   	sti    
c00104f1:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c00104f8:	50                   	push   eax
c00104f9:	50                   	push   eax
c00104fa:	6a 00                	push   0x0
c00104fc:	6a 0a                	push   0xa
c00104fe:	e8 31 65 00 00       	call   c0016a34 <sleep(unsigned long long)>
c0010503:	83 05 e4 d1 02 c0 0a 	add    DWORD PTR ds:0xc002d1e4,0xa
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	eb e2                	jmp    c00104f1 <KePowerThread(void*)+0x14>

c001050f <KeChangePowerSettings(PowerSettings)>:
c001050f:	57                   	push   edi
c0010510:	b9 09 00 00 00       	mov    ecx,0x9
c0010515:	56                   	push   esi
c0010516:	bf c0 d1 02 c0       	mov    edi,0xc002d1c0
c001051b:	fc                   	cld    
c001051c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010520:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010522:	5e                   	pop    esi
c0010523:	5f                   	pop    edi
c0010524:	c3                   	ret    

c0010525 <KeUserIOReceived()>:
c0010525:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c001052f:	c3                   	ret    

c0010530 <KeSetupPowerManager()>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c001053d:	68 f0 00 00 00       	push   0xf0
c0010542:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c0010549:	6a 00                	push   0x0
c001054b:	68 dd 04 01 c0       	push   0xc00104dd
c0010550:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0010556:	e8 01 60 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c001055b:	c7 05 c0 d1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d1c0,0x2
c0010565:	c7 05 c4 d1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x1
c001056f:	c7 05 c8 d1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d1c8,0x3
c0010579:	c7 05 cc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1cc,0x0
c0010583:	c7 05 d8 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d8,0x0
c001058d:	c7 05 d0 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d0,0x0
c0010597:	c7 05 dc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1dc,0x0
c00105a1:	c7 05 d4 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1d4,0x3c
c00105ab:	c7 05 e0 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1e0,0x3c
c00105b5:	83 c4 1c             	add    esp,0x1c
c00105b8:	c3                   	ret    

c00105b9 <KePrepareShutdown()>:
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	e8 6f cc ff ff       	call   c000d230 <KeExecuteAtexit()>
c00105c1:	83 ec 0c             	sub    esp,0xc
c00105c4:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c00105c9:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00105cf:	e8 e8 96 ff ff       	call   c0009cbc <Device::closeAll()>
c00105d4:	83 c4 1c             	add    esp,0x1c
c00105d7:	c3                   	ret    

c00105d8 <KeRegisterShutdownHandler(void (*)())>:
c00105d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105dc:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c00105e1:	c3                   	ret    

c00105e2 <KeRegisterRestartHandler(void (*)())>:
c00105e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e6:	a3 a4 d1 02 c0       	mov    ds:0xc002d1a4,eax
c00105eb:	c3                   	ret    

c00105ec <KeRegisterSleepHandler(void (*)())>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	a3 a0 d1 02 c0       	mov    ds:0xc002d1a0,eax
c00105f5:	c3                   	ret    

c00105f6 <KeShutdown()>:
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	e8 bb ff ff ff       	call   c00105b9 <KePrepareShutdown()>
c00105fe:	a1 a8 d1 02 c0       	mov    eax,ds:0xc002d1a8
c0010603:	85 c0                	test   eax,eax
c0010605:	74 04                	je     c001060b <KeShutdown()+0x15>
c0010607:	ff d0                	call   eax
c0010609:	eb 10                	jmp    c001061b <KeShutdown()+0x25>
c001060b:	83 ec 0c             	sub    esp,0xc
c001060e:	68 7c 48 02 c0       	push   0xc002487c
c0010613:	e8 88 f6 ff ff       	call   c000fca0 <KePanic(char const*)>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	68 9d 48 02 c0       	push   0xc002489d
c0010623:	e8 78 f6 ff ff       	call   c000fca0 <KePanic(char const*)>
c0010628:	83 c4 1c             	add    esp,0x1c
c001062b:	c3                   	ret    

c001062c <KeSleep()>:
c001062c:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c0010631:	85 c0                	test   eax,eax
c0010633:	74 02                	je     c0010637 <KeSleep()+0xb>
c0010635:	ff e0                	jmp    eax
c0010637:	c3                   	ret    

c0010638 <KeHandlePowerButton()>:
c0010638:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c001063d:	83 f8 02             	cmp    eax,0x2
c0010640:	75 02                	jne    c0010644 <KeHandlePowerButton()+0xc>
c0010642:	eb b2                	jmp    c00105f6 <KeShutdown()>
c0010644:	48                   	dec    eax
c0010645:	75 02                	jne    c0010649 <KeHandlePowerButton()+0x11>
c0010647:	eb e3                	jmp    c001062c <KeSleep()>
c0010649:	c3                   	ret    

c001064a <KeHandleSleepButton()>:
c001064a:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c001064f:	83 f8 02             	cmp    eax,0x2
c0010652:	75 02                	jne    c0010656 <KeHandleSleepButton()+0xc>
c0010654:	eb a0                	jmp    c00105f6 <KeShutdown()>
c0010656:	48                   	dec    eax
c0010657:	75 02                	jne    c001065b <KeHandleSleepButton()+0x11>
c0010659:	eb d1                	jmp    c001062c <KeSleep()>
c001065b:	c3                   	ret    

c001065c <KeRestart()>:
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	e8 55 ff ff ff       	call   c00105b9 <KePrepareShutdown()>
c0010664:	a1 a4 d1 02 c0       	mov    eax,ds:0xc002d1a4
c0010669:	85 c0                	test   eax,eax
c001066b:	74 02                	je     c001066f <KeRestart()+0x13>
c001066d:	ff d0                	call   eax
c001066f:	83 ec 0c             	sub    esp,0xc
c0010672:	68 c1 48 02 c0       	push   0xc00248c1
c0010677:	e8 24 f6 ff ff       	call   c000fca0 <KePanic(char const*)>
c001067c:	83 c4 1c             	add    esp,0x1c
c001067f:	c3                   	ret    

c0010680 <KeRand()>:
c0010680:	69 05 e8 d1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002d1e8,0x2875
c001068a:	69 0d ec d1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002d1ec,0xa2e7b175
c0010694:	53                   	push   ebx
c0010695:	01 c1                	add    ecx,eax
c0010697:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001069c:	f7 25 e8 d1 02 c0    	mul    DWORD PTR ds:0xc002d1e8
c00106a2:	01 ca                	add    edx,ecx
c00106a4:	05 ef 04 b5 00       	add    eax,0xb504ef
c00106a9:	83 d2 00             	adc    edx,0x0
c00106ac:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c00106b1:	0f b7 da             	movzx  ebx,dx
c00106b4:	89 da                	mov    edx,ebx
c00106b6:	89 1d ec d1 02 c0    	mov    DWORD PTR ds:0xc002d1ec,ebx
c00106bc:	0f ac d0 0e          	shrd   eax,edx,0xe
c00106c0:	5b                   	pop    ebx
c00106c1:	c3                   	ret    

c00106c2 <KeSeedRand(unsigned int)>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 08             	sub    esp,0x8
c00106c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ca:	e8 f1 a5 00 00       	call   c001acc0 <HalGetRand()>
c00106cf:	c7 05 ec d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1ec,0x0
c00106d9:	31 d8                	xor    eax,ebx
c00106db:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c00106e0:	e8 9b ff ff ff       	call   c0010680 <KeRand()>
c00106e5:	83 c4 08             	add    esp,0x8
c00106e8:	5b                   	pop    ebx
c00106e9:	eb 95                	jmp    c0010680 <KeRand()>

c00106eb <KeInitRand()>:
c00106eb:	83 ec 0c             	sub    esp,0xc
c00106ee:	e8 9b a3 00 00       	call   c001aa8e <HalQueryPerformanceCounter()>
c00106f3:	0f 20 da             	mov    edx,cr3
c00106f6:	0f 22 da             	mov    cr3,edx
c00106f9:	0f 20 da             	mov    edx,cr3
c00106fc:	0f 22 da             	mov    cr3,edx
c00106ff:	0f 20 da             	mov    edx,cr3
c0010702:	0f 22 da             	mov    cr3,edx
c0010705:	0f 20 da             	mov    edx,cr3
c0010708:	0f 22 da             	mov    cr3,edx
c001070b:	83 ec 0c             	sub    esp,0xc
c001070e:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010713:	50                   	push   eax
c0010714:	e8 a9 ff ff ff       	call   c00106c2 <KeSeedRand(unsigned int)>
c0010719:	83 c4 1c             	add    esp,0x1c
c001071c:	c3                   	ret    
c001071d:	66 90                	xchg   ax,ax
c001071f:	90                   	nop

c0010720 <KeResolveCompatibilitySymbol(char*)>:
c0010720:	83 ec 0c             	sub    esp,0xc
c0010723:	83 ec 08             	sub    esp,0x8
c0010726:	68 d0 48 02 c0       	push   0xc00248d0
c001072b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072f:	e8 1c 00 ff ff       	call   c0000750 <strcmp>
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	85 c0                	test   eax,eax
c0010739:	0f 94 c0             	sete   al
c001073c:	0f b6 c0             	movzx  eax,al
c001073f:	85 c0                	test   eax,eax
c0010741:	74 0d                	je     c0010750 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010743:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c0010748:	e9 3b 02 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c001074d:	8d 76 00             	lea    esi,[esi+0x0]
c0010750:	83 ec 08             	sub    esp,0x8
c0010753:	68 d9 48 02 c0       	push   0xc00248d9
c0010758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075c:	e8 ef ff fe ff       	call   c0000750 <strcmp>
c0010761:	83 c4 10             	add    esp,0x10
c0010764:	85 c0                	test   eax,eax
c0010766:	0f 94 c0             	sete   al
c0010769:	0f b6 c0             	movzx  eax,al
c001076c:	85 c0                	test   eax,eax
c001076e:	74 0c                	je     c001077c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010770:	b8 f4 1f 02 c0       	mov    eax,0xc0021ff4
c0010775:	e9 0e 02 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c001077a:	66 90                	xchg   ax,ax
c001077c:	83 ec 08             	sub    esp,0x8
c001077f:	68 e3 48 02 c0       	push   0xc00248e3
c0010784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010788:	e8 c3 ff fe ff       	call   c0000750 <strcmp>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	85 c0                	test   eax,eax
c0010792:	0f 94 c0             	sete   al
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	85 c0                	test   eax,eax
c001079a:	74 0c                	je     c00107a8 <KeResolveCompatibilitySymbol(char*)+0x88>
c001079c:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c00107a1:	e9 e2 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107a6:	66 90                	xchg   ax,ax
c00107a8:	83 ec 08             	sub    esp,0x8
c00107ab:	68 f6 48 02 c0       	push   0xc00248f6
c00107b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107b4:	e8 97 ff fe ff       	call   c0000750 <strcmp>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	85 c0                	test   eax,eax
c00107be:	0f 94 c0             	sete   al
c00107c1:	0f b6 c0             	movzx  eax,al
c00107c4:	85 c0                	test   eax,eax
c00107c6:	74 0c                	je     c00107d4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00107c8:	b8 28 1d 02 c0       	mov    eax,0xc0021d28
c00107cd:	e9 b6 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107d2:	66 90                	xchg   ax,ax
c00107d4:	83 ec 08             	sub    esp,0x8
c00107d7:	68 ff 48 02 c0       	push   0xc00248ff
c00107dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107e0:	e8 6b ff fe ff       	call   c0000750 <strcmp>
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	85 c0                	test   eax,eax
c00107ea:	0f 94 c0             	sete   al
c00107ed:	0f b6 c0             	movzx  eax,al
c00107f0:	85 c0                	test   eax,eax
c00107f2:	74 0c                	je     c0010800 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00107f4:	b8 a0 fc 00 c0       	mov    eax,0xc000fca0
c00107f9:	e9 8a 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107fe:	66 90                	xchg   ax,ax
c0010800:	83 ec 08             	sub    esp,0x8
c0010803:	68 12 49 02 c0       	push   0xc0024912
c0010808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001080c:	e8 3f ff fe ff       	call   c0000750 <strcmp>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	85 c0                	test   eax,eax
c0010816:	0f 94 c0             	sete   al
c0010819:	0f b6 c0             	movzx  eax,al
c001081c:	85 c0                	test   eax,eax
c001081e:	74 0c                	je     c001082c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010820:	b8 b9 d2 00 c0       	mov    eax,0xc000d2b9
c0010825:	e9 5e 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c001082a:	66 90                	xchg   ax,ax
c001082c:	83 ec 08             	sub    esp,0x8
c001082f:	68 2f 49 02 c0       	push   0xc002492f
c0010834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010838:	e8 13 ff fe ff       	call   c0000750 <strcmp>
c001083d:	83 c4 10             	add    esp,0x10
c0010840:	85 c0                	test   eax,eax
c0010842:	0f 94 c0             	sete   al
c0010845:	0f b6 c0             	movzx  eax,al
c0010848:	85 c0                	test   eax,eax
c001084a:	74 0c                	je     c0010858 <KeResolveCompatibilitySymbol(char*)+0x138>
c001084c:	b8 f4 20 02 c0       	mov    eax,0xc00220f4
c0010851:	e9 32 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010856:	66 90                	xchg   ax,ax
c0010858:	83 ec 08             	sub    esp,0x8
c001085b:	68 39 49 02 c0       	push   0xc0024939
c0010860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010864:	e8 e7 fe fe ff       	call   c0000750 <strcmp>
c0010869:	83 c4 10             	add    esp,0x10
c001086c:	85 c0                	test   eax,eax
c001086e:	0f 94 c0             	sete   al
c0010871:	0f b6 c0             	movzx  eax,al
c0010874:	85 c0                	test   eax,eax
c0010876:	74 0c                	je     c0010884 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010878:	b8 74 1e 02 c0       	mov    eax,0xc0021e74
c001087d:	e9 06 01 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010882:	66 90                	xchg   ax,ax
c0010884:	83 ec 08             	sub    esp,0x8
c0010887:	68 42 49 02 c0       	push   0xc0024942
c001088c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010890:	e8 bb fe fe ff       	call   c0000750 <strcmp>
c0010895:	83 c4 10             	add    esp,0x10
c0010898:	85 c0                	test   eax,eax
c001089a:	0f 94 c0             	sete   al
c001089d:	0f b6 c0             	movzx  eax,al
c00108a0:	85 c0                	test   eax,eax
c00108a2:	74 0c                	je     c00108b0 <KeResolveCompatibilitySymbol(char*)+0x190>
c00108a4:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c00108a9:	e9 da 00 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108ae:	66 90                	xchg   ax,ax
c00108b0:	83 ec 08             	sub    esp,0x8
c00108b3:	68 5a 49 02 c0       	push   0xc002495a
c00108b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108bc:	e8 8f fe fe ff       	call   c0000750 <strcmp>
c00108c1:	83 c4 10             	add    esp,0x10
c00108c4:	85 c0                	test   eax,eax
c00108c6:	0f 94 c0             	sete   al
c00108c9:	0f b6 c0             	movzx  eax,al
c00108cc:	85 c0                	test   eax,eax
c00108ce:	74 0c                	je     c00108dc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00108d0:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c00108d5:	e9 ae 00 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108da:	66 90                	xchg   ax,ax
c00108dc:	83 ec 08             	sub    esp,0x8
c00108df:	68 67 49 02 c0       	push   0xc0024967
c00108e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e8:	e8 63 fe fe ff       	call   c0000750 <strcmp>
c00108ed:	83 c4 10             	add    esp,0x10
c00108f0:	85 c0                	test   eax,eax
c00108f2:	0f 94 c0             	sete   al
c00108f5:	0f b6 c0             	movzx  eax,al
c00108f8:	85 c0                	test   eax,eax
c00108fa:	74 0c                	je     c0010908 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00108fc:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c0010901:	e9 82 00 00 00       	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010906:	66 90                	xchg   ax,ax
c0010908:	83 ec 08             	sub    esp,0x8
c001090b:	68 74 49 02 c0       	push   0xc0024974
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	e8 37 fe fe ff       	call   c0000750 <strcmp>
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	85 c0                	test   eax,eax
c001091e:	0f 94 c0             	sete   al
c0010921:	0f b6 c0             	movzx  eax,al
c0010924:	85 c0                	test   eax,eax
c0010926:	74 08                	je     c0010930 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010928:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c001092d:	eb 59                	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c001092f:	90                   	nop
c0010930:	83 ec 08             	sub    esp,0x8
c0010933:	68 85 49 02 c0       	push   0xc0024985
c0010938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093c:	e8 0f fe fe ff       	call   c0000750 <strcmp>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	85 c0                	test   eax,eax
c0010946:	0f 94 c0             	sete   al
c0010949:	0f b6 c0             	movzx  eax,al
c001094c:	85 c0                	test   eax,eax
c001094e:	74 08                	je     c0010958 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010950:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c0010955:	eb 31                	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010957:	90                   	nop
c0010958:	83 ec 08             	sub    esp,0x8
c001095b:	68 96 49 02 c0       	push   0xc0024996
c0010960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010964:	e8 e7 fd fe ff       	call   c0000750 <strcmp>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	85 c0                	test   eax,eax
c001096e:	0f 94 c0             	sete   al
c0010971:	0f b6 c0             	movzx  eax,al
c0010974:	85 c0                	test   eax,eax
c0010976:	74 08                	je     c0010980 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010978:	b8 28 70 01 c0       	mov    eax,0xc0017028
c001097d:	eb 09                	jmp    c0010988 <KeResolveCompatibilitySymbol(char*)+0x268>
c001097f:	90                   	nop
c0010980:	b8 00 00 00 00       	mov    eax,0x0
c0010985:	8d 76 00             	lea    esi,[esi+0x0]
c0010988:	83 c4 0c             	add    esp,0xc
c001098b:	c3                   	ret    

c001098c <Semaphore::Semaphore(int)>:
c001098c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001099a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00109a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00109ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109b0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00109b7:	90                   	nop
c00109b8:	c3                   	ret    
c00109b9:	90                   	nop
c00109ba:	66 90                	xchg   ax,ax

c00109bc <Semaphore::tryAcquire()>:
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	fa                   	cli    
c00109c0:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00109c5:	83 c0 01             	add    eax,0x1
c00109c8:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00109cd:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00109d2:	83 c0 01             	add    eax,0x1
c00109d5:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00109da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109de:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00109e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00109e7:	39 c2                	cmp    edx,eax
c00109e9:	7d 59                	jge    c0010a44 <Semaphore::tryAcquire()+0x88>
c00109eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109f2:	8d 50 01             	lea    edx,[eax+0x1]
c00109f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109fc:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010a01:	83 e8 01             	sub    eax,0x1
c0010a04:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010a09:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010a0e:	85 c0                	test   eax,eax
c0010a10:	75 1a                	jne    c0010a2c <Semaphore::tryAcquire()+0x70>
c0010a12:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010a17:	85 c0                	test   eax,eax
c0010a19:	74 11                	je     c0010a2c <Semaphore::tryAcquire()+0x70>
c0010a1b:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010a25:	e8 fe 5d 00 00       	call   c0016828 <schedule()>
c0010a2a:	66 90                	xchg   ax,ax
c0010a2c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010a34:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010a39:	85 c0                	test   eax,eax
c0010a3b:	75 03                	jne    c0010a40 <Semaphore::tryAcquire()+0x84>
c0010a3d:	fb                   	sti    
c0010a3e:	66 90                	xchg   ax,ax
c0010a40:	b0 01                	mov    al,0x1
c0010a42:	eb 48                	jmp    c0010a8c <Semaphore::tryAcquire()+0xd0>
c0010a44:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010a49:	83 e8 01             	sub    eax,0x1
c0010a4c:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010a51:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010a56:	85 c0                	test   eax,eax
c0010a58:	75 1a                	jne    c0010a74 <Semaphore::tryAcquire()+0xb8>
c0010a5a:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010a5f:	85 c0                	test   eax,eax
c0010a61:	74 11                	je     c0010a74 <Semaphore::tryAcquire()+0xb8>
c0010a63:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010a6d:	e8 b6 5d 00 00       	call   c0016828 <schedule()>
c0010a72:	66 90                	xchg   ax,ax
c0010a74:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010a7c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010a81:	85 c0                	test   eax,eax
c0010a83:	75 03                	jne    c0010a88 <Semaphore::tryAcquire()+0xcc>
c0010a85:	fb                   	sti    
c0010a86:	66 90                	xchg   ax,ax
c0010a88:	b0 00                	mov    al,0x0
c0010a8a:	66 90                	xchg   ax,ax
c0010a8c:	83 c4 0c             	add    esp,0xc
c0010a8f:	c3                   	ret    

c0010a90 <Semaphore::assertLocked(char const*)>:
c0010a90:	83 ec 0c             	sub    esp,0xc
c0010a93:	fa                   	cli    
c0010a94:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010a99:	83 c0 01             	add    eax,0x1
c0010a9c:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0010aa1:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010aa6:	83 c0 01             	add    eax,0x1
c0010aa9:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010abb:	39 c2                	cmp    edx,eax
c0010abd:	7d 11                	jge    c0010ad0 <Semaphore::assertLocked(char const*)+0x40>
c0010abf:	83 ec 0c             	sub    esp,0xc
c0010ac2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ac6:	e8 d5 f1 ff ff       	call   c000fca0 <KePanic(char const*)>
c0010acb:	83 c4 10             	add    esp,0x10
c0010ace:	66 90                	xchg   ax,ax
c0010ad0:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010ad5:	83 e8 01             	sub    eax,0x1
c0010ad8:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010add:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010ae2:	85 c0                	test   eax,eax
c0010ae4:	75 1a                	jne    c0010b00 <Semaphore::assertLocked(char const*)+0x70>
c0010ae6:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010aeb:	85 c0                	test   eax,eax
c0010aed:	74 11                	je     c0010b00 <Semaphore::assertLocked(char const*)+0x70>
c0010aef:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010af9:	e8 2a 5d 00 00       	call   c0016828 <schedule()>
c0010afe:	66 90                	xchg   ax,ax
c0010b00:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010b08:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010b0d:	85 c0                	test   eax,eax
c0010b0f:	75 03                	jne    c0010b14 <Semaphore::assertLocked(char const*)+0x84>
c0010b11:	fb                   	sti    
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	90                   	nop
c0010b1a:	66 90                	xchg   ax,ax

c0010b1c <Semaphore::acquire(int)>:
c0010b1c:	83 ec 1c             	sub    esp,0x1c
c0010b1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010b24:	0f 84 ae 00 00 00    	je     c0010bd8 <Semaphore::acquire(int)+0xbc>
c0010b2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b32:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010b37:	90                   	nop
c0010b38:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010b3d:	85 c0                	test   eax,eax
c0010b3f:	0f 84 87 00 00 00    	je     c0010bcc <Semaphore::acquire(int)+0xb0>
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b4c:	e8 6b fe ff ff       	call   c00109bc <Semaphore::tryAcquire()>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	83 f0 01             	xor    eax,0x1
c0010b57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010b5b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010b5f:	83 f0 01             	xor    eax,0x1
c0010b62:	0f b6 c0             	movzx  eax,al
c0010b65:	85 c0                	test   eax,eax
c0010b67:	75 5f                	jne    c0010bc8 <Semaphore::acquire(int)+0xac>
c0010b69:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010b6e:	7f 34                	jg     c0010ba4 <Semaphore::acquire(int)+0x88>
c0010b70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b74:	89 d0                	mov    eax,edx
c0010b76:	c1 e0 02             	shl    eax,0x2
c0010b79:	01 d0                	add    eax,edx
c0010b7b:	01 c0                	add    eax,eax
c0010b7d:	89 c2                	mov    edx,eax
c0010b7f:	c1 fa 1f             	sar    edx,0x1f
c0010b82:	83 ec 08             	sub    esp,0x8
c0010b85:	52                   	push   edx
c0010b86:	50                   	push   eax
c0010b87:	e8 90 5e 00 00       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b93:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010b97:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010b9f:	eb 97                	jmp    c0010b38 <Semaphore::acquire(int)+0x1c>
c0010ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ba4:	83 ec 08             	sub    esp,0x8
c0010ba7:	6a 00                	push   0x0
c0010ba9:	68 90 01 00 00       	push   0x190
c0010bae:	e8 69 5e 00 00       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010bbb:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010bc0:	e9 73 ff ff ff       	jmp    c0010b38 <Semaphore::acquire(int)+0x1c>
c0010bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bc8:	90                   	nop
c0010bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd0:	e9 fb 00 00 00       	jmp    c0010cd0 <Semaphore::acquire(int)+0x1b4>
c0010bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd8:	fa                   	cli    
c0010bd9:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010bde:	83 c0 01             	add    eax,0x1
c0010be1:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0010be6:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010beb:	83 c0 01             	add    eax,0x1
c0010bee:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c00:	39 c2                	cmp    edx,eax
c0010c02:	7d 14                	jge    c0010c18 <Semaphore::acquire(int)+0xfc>
c0010c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0010c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c15:	eb 6d                	jmp    c0010c84 <Semaphore::acquire(int)+0x168>
c0010c17:	90                   	nop
c0010c18:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c1f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2d:	85 c0                	test   eax,eax
c0010c2f:	75 13                	jne    c0010c44 <Semaphore::acquire(int)+0x128>
c0010c31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c36:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c3f:	eb 17                	jmp    c0010c58 <Semaphore::acquire(int)+0x13c>
c0010c41:	8d 76 00             	lea    esi,[esi+0x0]
c0010c44:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c50:	8b 12                	mov    edx,DWORD PTR [edx]
c0010c52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c55:	8d 76 00             	lea    esi,[esi+0x0]
c0010c58:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010c66:	83 ec 0c             	sub    esp,0xc
c0010c69:	68 ac 49 02 c0       	push   0xc00249ac
c0010c6e:	e8 09 63 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	6a 05                	push   0x5
c0010c7b:	e8 68 5c 00 00       	call   c00168e8 <blockTask(TaskState)>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	90                   	nop
c0010c84:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010c89:	83 e8 01             	sub    eax,0x1
c0010c8c:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010c91:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010c96:	85 c0                	test   eax,eax
c0010c98:	75 1a                	jne    c0010cb4 <Semaphore::acquire(int)+0x198>
c0010c9a:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010c9f:	85 c0                	test   eax,eax
c0010ca1:	74 11                	je     c0010cb4 <Semaphore::acquire(int)+0x198>
c0010ca3:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010cad:	e8 76 5b 00 00       	call   c0016828 <schedule()>
c0010cb2:	66 90                	xchg   ax,ax
c0010cb4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010cbc:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010cc1:	85 c0                	test   eax,eax
c0010cc3:	75 03                	jne    c0010cc8 <Semaphore::acquire(int)+0x1ac>
c0010cc5:	fb                   	sti    
c0010cc6:	66 90                	xchg   ax,ax
c0010cc8:	b8 00 00 00 00       	mov    eax,0x0
c0010ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0010cd0:	83 c4 1c             	add    esp,0x1c
c0010cd3:	c3                   	ret    

c0010cd4 <Semaphore::acquire()>:
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	83 ec 08             	sub    esp,0x8
c0010cda:	6a 00                	push   0x0
c0010cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ce0:	e8 37 fe ff ff       	call   c0010b1c <Semaphore::acquire(int)>
c0010ce5:	83 c4 10             	add    esp,0x10
c0010ce8:	90                   	nop
c0010ce9:	83 c4 0c             	add    esp,0xc
c0010cec:	c3                   	ret    
c0010ced:	90                   	nop
c0010cee:	66 90                	xchg   ax,ax

c0010cf0 <Semaphore::release()>:
c0010cf0:	83 ec 1c             	sub    esp,0x1c
c0010cf3:	fa                   	cli    
c0010cf4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010cf9:	83 c0 01             	add    eax,0x1
c0010cfc:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0010d01:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010d06:	83 c0 01             	add    eax,0x1
c0010d09:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d15:	85 c0                	test   eax,eax
c0010d17:	74 2b                	je     c0010d44 <Semaphore::release()+0x54>
c0010d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d28:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d39:	e8 46 5e 00 00       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	eb 15                	jmp    c0010d58 <Semaphore::release()+0x68>
c0010d43:	90                   	nop
c0010d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0010d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d55:	8d 76 00             	lea    esi,[esi+0x0]
c0010d58:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010d5d:	83 e8 01             	sub    eax,0x1
c0010d60:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010d65:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010d6a:	85 c0                	test   eax,eax
c0010d6c:	75 1a                	jne    c0010d88 <Semaphore::release()+0x98>
c0010d6e:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010d73:	85 c0                	test   eax,eax
c0010d75:	74 11                	je     c0010d88 <Semaphore::release()+0x98>
c0010d77:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010d81:	e8 a2 5a 00 00       	call   c0016828 <schedule()>
c0010d86:	66 90                	xchg   ax,ax
c0010d88:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010d90:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010d95:	85 c0                	test   eax,eax
c0010d97:	75 03                	jne    c0010d9c <Semaphore::release()+0xac>
c0010d99:	fb                   	sti    
c0010d9a:	66 90                	xchg   ax,ax
c0010d9c:	90                   	nop
c0010d9d:	83 c4 1c             	add    esp,0x1c
c0010da0:	c3                   	ret    

c0010da1 <KiSigKill(int)>:
c0010da1:	83 ec 0c             	sub    esp,0xc
c0010da4:	6a 00                	push   0x0
c0010da6:	6a 00                	push   0x0
c0010da8:	6a ff                	push   0xffffffff
c0010daa:	6a 01                	push   0x1
c0010dac:	e8 a1 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010db1:	83 c4 1c             	add    esp,0x1c
c0010db4:	c3                   	ret    

c0010db5 <KiDefaultSignalHandlerIgnore(int)>:
c0010db5:	c3                   	ret    

c0010db6 <KiDefaultSignalHandlerPause(int)>:
c0010db6:	57                   	push   edi
c0010db7:	b9 07 00 00 00       	mov    ecx,0x7
c0010dbc:	56                   	push   esi
c0010dbd:	be 07 4a 02 c0       	mov    esi,0xc0024a07
c0010dc2:	83 ec 24             	sub    esp,0x24
c0010dc5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010dc9:	fc                   	cld    
c0010dca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dcc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010dd0:	50                   	push   eax
c0010dd1:	6a 00                	push   0x0
c0010dd3:	6a 00                	push   0x0
c0010dd5:	6a 27                	push   0x27
c0010dd7:	e8 76 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ddc:	83 c4 34             	add    esp,0x34
c0010ddf:	5e                   	pop    esi
c0010de0:	5f                   	pop    edi
c0010de1:	c3                   	ret    

c0010de2 <KiDefaultSignalHandlerResume(int)>:
c0010de2:	57                   	push   edi
c0010de3:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010de8:	56                   	push   esi
c0010de9:	be 23 4a 02 c0       	mov    esi,0xc0024a23
c0010dee:	83 ec 24             	sub    esp,0x24
c0010df1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010df5:	fc                   	cld    
c0010df6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df8:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010dfc:	50                   	push   eax
c0010dfd:	6a 00                	push   0x0
c0010dff:	6a 00                	push   0x0
c0010e01:	6a 27                	push   0x27
c0010e03:	e8 4a 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e08:	83 c4 34             	add    esp,0x34
c0010e0b:	5e                   	pop    esi
c0010e0c:	5f                   	pop    edi
c0010e0d:	c3                   	ret    

c0010e0e <KeDeinitSignals(SigHandlerBlock*)>:
c0010e0e:	e9 48 ea ff ff       	jmp    c000f85b <free>

c0010e13 <KeInitSignals()>:
c0010e13:	53                   	push   ebx
c0010e14:	83 ec 14             	sub    esp,0x14
c0010e17:	68 c8 00 00 00       	push   0xc8
c0010e1c:	e8 2a ea ff ff       	call   c000f84b <malloc>
c0010e21:	83 c4 0c             	add    esp,0xc
c0010e24:	89 c3                	mov    ebx,eax
c0010e26:	6a 04                	push   0x4
c0010e28:	6a 00                	push   0x0
c0010e2a:	50                   	push   eax
c0010e2b:	e8 c0 f6 fe ff       	call   c00004f0 <memset>
c0010e30:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010e3a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010e44:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e4b:	83 c4 0c             	add    esp,0xc
c0010e4e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010e54:	6a 20                	push   0x20
c0010e56:	6a 00                	push   0x0
c0010e58:	50                   	push   eax
c0010e59:	e8 92 f6 fe ff       	call   c00004f0 <memset>
c0010e5e:	83 c4 0c             	add    esp,0xc
c0010e61:	6a 44                	push   0x44
c0010e63:	6a 00                	push   0x0
c0010e65:	53                   	push   ebx
c0010e66:	e8 85 f6 fe ff       	call   c00004f0 <memset>
c0010e6b:	83 c4 0c             	add    esp,0xc
c0010e6e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010e74:	6a 11                	push   0x11
c0010e76:	6a 00                	push   0x0
c0010e78:	50                   	push   eax
c0010e79:	e8 72 f6 fe ff       	call   c00004f0 <memset>
c0010e7e:	89 d8                	mov    eax,ebx
c0010e80:	83 c4 18             	add    esp,0x18
c0010e83:	5b                   	pop    ebx
c0010e84:	c3                   	ret    

c0010e85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010e85:	53                   	push   ebx
c0010e86:	b8 01 00 00 00       	mov    eax,0x1
c0010e8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e93:	83 f9 10             	cmp    ecx,0x10
c0010e96:	7f 21                	jg     c0010eb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010e98:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9f:	89 03                	mov    DWORD PTR [ebx],eax
c0010ea1:	b8 01 00 00 00       	mov    eax,0x1
c0010ea6:	d3 e0                	shl    eax,cl
c0010ea8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010eac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010eaf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010eb7:	31 c0                	xor    eax,eax
c0010eb9:	5b                   	pop    ebx
c0010eba:	c3                   	ret    

c0010ebb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ebb:	55                   	push   ebp
c0010ebc:	57                   	push   edi
c0010ebd:	bf 08 00 00 00       	mov    edi,0x8
c0010ec2:	56                   	push   esi
c0010ec3:	53                   	push   ebx
c0010ec4:	83 ec 14             	sub    esp,0x14
c0010ec7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ecf:	68 40 4a 02 c0       	push   0xc0024a40
c0010ed4:	e8 a3 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010ed9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ee0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	31 c9                	xor    ecx,ecx
c0010eeb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010eef:	99                   	cdq    
c0010ef0:	f7 ff                	idiv   edi
c0010ef2:	8d 42 24             	lea    eax,[edx+0x24]
c0010ef5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ef9:	85 f6                	test   esi,esi
c0010efb:	75 1a                	jne    c0010f17 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010efd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f01:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010f05:	50                   	push   eax
c0010f06:	50                   	push   eax
c0010f07:	52                   	push   edx
c0010f08:	68 56 4a 02 c0       	push   0xc0024a56
c0010f0d:	e8 6a 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	eb 1b                	jmp    c0010f32 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010f17:	41                   	inc    ecx
c0010f18:	83 f9 08             	cmp    ecx,0x8
c0010f1b:	75 ce                	jne    c0010eeb <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010f1d:	83 ec 0c             	sub    esp,0xc
c0010f20:	be 01 00 00 00       	mov    esi,0x1
c0010f25:	68 77 4a 02 c0       	push   0xc0024a77
c0010f2a:	e8 4d 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	83 c4 0c             	add    esp,0xc
c0010f35:	89 f0                	mov    eax,esi
c0010f37:	5b                   	pop    ebx
c0010f38:	5e                   	pop    esi
c0010f39:	5f                   	pop    edi
c0010f3a:	5d                   	pop    ebp
c0010f3b:	c3                   	ret    

c0010f3c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010f3c:	55                   	push   ebp
c0010f3d:	57                   	push   edi
c0010f3e:	56                   	push   esi
c0010f3f:	53                   	push   ebx
c0010f40:	83 ec 1c             	sub    esp,0x1c
c0010f43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f47:	85 db                	test   ebx,ebx
c0010f49:	0f 84 e0 00 00 00    	je     c001102f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f4f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010f56:	0f 84 d3 00 00 00    	je     c001102f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f5c:	31 c9                	xor    ecx,ecx
c0010f5e:	bf 08 00 00 00       	mov    edi,0x8
c0010f63:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010f69:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010f6c:	99                   	cdq    
c0010f6d:	f7 ff                	idiv   edi
c0010f6f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010f76:	85 ed                	test   ebp,ebp
c0010f78:	0f 84 d2 00 00 00    	je     c0011050 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010f7e:	89 e9                	mov    ecx,ebp
c0010f80:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010f86:	bf 01 00 00 00       	mov    edi,0x1
c0010f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f8f:	d3 e7                	shl    edi,cl
c0010f91:	31 c9                	xor    ecx,ecx
c0010f93:	b8 01 00 00 00       	mov    eax,0x1
c0010f98:	d3 e0                	shl    eax,cl
c0010f9a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010f9e:	74 0a                	je     c0010faa <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010fa0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010fa4:	0f 85 85 00 00 00    	jne    c001102f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010faa:	41                   	inc    ecx
c0010fab:	83 f9 11             	cmp    ecx,0x11
c0010fae:	75 e3                	jne    c0010f93 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010fb0:	46                   	inc    esi
c0010fb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010fbb:	09 f8                	or     eax,edi
c0010fbd:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010fc8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010fce:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010fd5:	31 c0                	xor    eax,eax
c0010fd7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010fdf:	74 09                	je     c0010fea <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010fe1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fe8:	eb 06                	jmp    c0010ff0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010fea:	40                   	inc    eax
c0010feb:	83 f8 08             	cmp    eax,0x8
c0010fee:	75 e7                	jne    c0010fd7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010ff0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010ff3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010ff7:	83 fd 09             	cmp    ebp,0x9
c0010ffa:	89 2a                	mov    DWORD PTR [edx],ebp
c0010ffc:	75 14                	jne    c0011012 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	68 88 4a 02 c0       	push   0xc0024a88
c0011006:	e8 71 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001100b:	b8 a1 0d 01 c0       	mov    eax,0xc0010da1
c0011010:	eb 39                	jmp    c001104b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011012:	83 f8 01             	cmp    eax,0x1
c0011015:	75 1c                	jne    c0011033 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011017:	83 ec 0c             	sub    esp,0xc
c001101a:	f7 d7                	not    edi
c001101c:	68 92 4a 02 c0       	push   0xc0024a92
c0011021:	e8 56 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011026:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001102c:	83 c4 10             	add    esp,0x10
c001102f:	31 c0                	xor    eax,eax
c0011031:	eb 30                	jmp    c0011063 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011033:	85 c0                	test   eax,eax
c0011035:	75 2c                	jne    c0011063 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011037:	83 ec 0c             	sub    esp,0xc
c001103a:	68 9f 4a 02 c0       	push   0xc0024a9f
c001103f:	e8 38 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011044:	8b 04 ad 60 6d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd92a0]
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	eb 13                	jmp    c0011063 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011050:	46                   	inc    esi
c0011051:	41                   	inc    ecx
c0011052:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011058:	83 f9 08             	cmp    ecx,0x8
c001105b:	0f 85 02 ff ff ff    	jne    c0010f63 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011061:	eb cc                	jmp    c001102f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011063:	83 c4 1c             	add    esp,0x1c
c0011066:	5b                   	pop    ebx
c0011067:	5e                   	pop    esi
c0011068:	5f                   	pop    edi
c0011069:	5d                   	pop    ebp
c001106a:	c3                   	ret    

c001106b <KiCheckSignalZ>:
c001106b:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c0011072:	74 43                	je     c00110b7 <KiCheckSignalZ+0x4c>
c0011074:	83 ec 24             	sub    esp,0x24
c0011077:	8d 44 24 14          	lea    eax,[esp+0x14]
c001107b:	50                   	push   eax
c001107c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011081:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011084:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001108a:	e8 ad fe ff ff       	call   c0010f3c <KeCheckSignal(SigHandlerBlock*, int*)>
c001108f:	83 c4 10             	add    esp,0x10
c0011092:	31 d2                	xor    edx,edx
c0011094:	85 c0                	test   eax,eax
c0011096:	74 19                	je     c00110b1 <KiCheckSignalZ+0x46>
c0011098:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001109e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00110a1:	89 02                	mov    DWORD PTR [edx],eax
c00110a3:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00110aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110ae:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00110b1:	89 d0                	mov    eax,edx
c00110b3:	83 c4 1c             	add    esp,0x1c
c00110b6:	c3                   	ret    
c00110b7:	31 d2                	xor    edx,edx
c00110b9:	89 d0                	mov    eax,edx
c00110bb:	c3                   	ret    

c00110bc <KeCompleteSignal(SigHandlerBlock*, int)>:
c00110bc:	56                   	push   esi
c00110bd:	53                   	push   ebx
c00110be:	bb 01 00 00 00       	mov    ebx,0x1
c00110c3:	52                   	push   edx
c00110c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00110c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110cc:	d3 e3                	shl    ebx,cl
c00110ce:	83 f9 10             	cmp    ecx,0x10
c00110d1:	7f 08                	jg     c00110db <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00110d3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00110d9:	75 10                	jne    c00110eb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00110db:	83 ec 0c             	sub    esp,0xc
c00110de:	68 c2 4a 02 c0       	push   0xc0024ac2
c00110e3:	e8 b8 eb ff ff       	call   c000fca0 <KePanic(char const*)>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	f7 d3                	not    ebx
c00110ed:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00110f3:	58                   	pop    eax
c00110f4:	5b                   	pop    ebx
c00110f5:	5e                   	pop    esi
c00110f6:	c3                   	ret    

c00110f7 <KiFinishSignalZ>:
c00110f7:	53                   	push   ebx
c00110f8:	83 ec 08             	sub    esp,0x8
c00110fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011100:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011104:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011107:	83 fa 08             	cmp    edx,0x8
c001110a:	75 0c                	jne    c0011118 <KiFinishSignalZ+0x21>
c001110c:	83 ec 0c             	sub    esp,0xc
c001110f:	50                   	push   eax
c0011110:	e8 6f 5a 00 00       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c0011115:	83 c4 10             	add    esp,0x10
c0011118:	50                   	push   eax
c0011119:	50                   	push   eax
c001111a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001111d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011122:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011125:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001112b:	e8 8c ff ff ff       	call   c00110bc <KeCompleteSignal(SigHandlerBlock*, int)>
c0011130:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011136:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001113d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011144:	83 c4 18             	add    esp,0x18
c0011147:	5b                   	pop    ebx
c0011148:	c3                   	ret    

c0011149 <SysSeekDir(regs*)>:
c0011149:	31 c0                	xor    eax,eax
c001114b:	31 d2                	xor    edx,edx
c001114d:	c3                   	ret    

c001114e <SysTellDir(regs*)>:
c001114e:	31 c0                	xor    eax,eax
c0011150:	31 d2                	xor    edx,edx
c0011152:	c3                   	ret    

c0011153 <SysVerify(regs*)>:
c0011153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011157:	31 d2                	xor    edx,edx
c0011159:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001115c:	c3                   	ret    

c001115d <SysGetArgc(regs*)>:
c001115d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011162:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011165:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001116b:	89 c2                	mov    edx,eax
c001116d:	c1 fa 1f             	sar    edx,0x1f
c0011170:	c3                   	ret    

c0011171 <SysTTYName(regs*)>:
c0011171:	b8 01 00 00 00       	mov    eax,0x1
c0011176:	31 d2                	xor    edx,edx
c0011178:	c3                   	ret    

c0011179 <SysFormatDisk(regs*)>:
c0011179:	56                   	push   esi
c001117a:	53                   	push   ebx
c001117b:	83 ec 04             	sub    esp,0x4
c001117e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011182:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0011188:	eb 28                	jmp    c00111b2 <SysFormatDisk(regs*)+0x39>
c001118a:	83 ec 0c             	sub    esp,0xc
c001118d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011190:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011193:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011195:	51                   	push   ecx
c0011196:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011199:	51                   	push   ecx
c001119a:	50                   	push   eax
c001119b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00111a2:	50                   	push   eax
c00111a3:	53                   	push   ebx
c00111a4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00111a7:	83 c4 20             	add    esp,0x20
c00111aa:	83 f8 08             	cmp    eax,0x8
c00111ad:	75 14                	jne    c00111c3 <SysFormatDisk(regs*)+0x4a>
c00111af:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00111b2:	85 db                	test   ebx,ebx
c00111b4:	75 d4                	jne    c001118a <SysFormatDisk(regs*)+0x11>
c00111b6:	83 c4 04             	add    esp,0x4
c00111b9:	b8 03 00 00 00       	mov    eax,0x3
c00111be:	31 d2                	xor    edx,edx
c00111c0:	5b                   	pop    ebx
c00111c1:	5e                   	pop    esi
c00111c2:	c3                   	ret    
c00111c3:	85 c0                	test   eax,eax
c00111c5:	74 1f                	je     c00111e6 <SysFormatDisk(regs*)+0x6d>
c00111c7:	83 f8 09             	cmp    eax,0x9
c00111ca:	74 0d                	je     c00111d9 <SysFormatDisk(regs*)+0x60>
c00111cc:	83 c4 04             	add    esp,0x4
c00111cf:	b8 02 00 00 00       	mov    eax,0x2
c00111d4:	31 d2                	xor    edx,edx
c00111d6:	5b                   	pop    ebx
c00111d7:	5e                   	pop    esi
c00111d8:	c3                   	ret    
c00111d9:	83 c4 04             	add    esp,0x4
c00111dc:	b8 01 00 00 00       	mov    eax,0x1
c00111e1:	31 d2                	xor    edx,edx
c00111e3:	5b                   	pop    ebx
c00111e4:	5e                   	pop    esi
c00111e5:	c3                   	ret    
c00111e6:	83 c4 04             	add    esp,0x4
c00111e9:	31 c0                	xor    eax,eax
c00111eb:	31 d2                	xor    edx,edx
c00111ed:	5b                   	pop    ebx
c00111ee:	5e                   	pop    esi
c00111ef:	c3                   	ret    

c00111f0 <SysSetDiskVolumeLabel(regs*)>:
c00111f0:	56                   	push   esi
c00111f1:	53                   	push   ebx
c00111f2:	83 ec 04             	sub    esp,0x4
c00111f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111f9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111fc:	83 f8 19             	cmp    eax,0x19
c00111ff:	77 33                	ja     c0011234 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011201:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c0011208:	85 c9                	test   ecx,ecx
c001120a:	74 28                	je     c0011234 <SysSetDiskVolumeLabel(regs*)+0x44>
c001120c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001120f:	85 db                	test   ebx,ebx
c0011211:	74 21                	je     c0011234 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011213:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011219:	85 d2                	test   edx,edx
c001121b:	74 17                	je     c0011234 <SysSetDiskVolumeLabel(regs*)+0x44>
c001121d:	8b 32                	mov    esi,DWORD PTR [edx]
c001121f:	53                   	push   ebx
c0011220:	50                   	push   eax
c0011221:	51                   	push   ecx
c0011222:	52                   	push   edx
c0011223:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	89 c2                	mov    edx,eax
c001122b:	83 c4 04             	add    esp,0x4
c001122e:	c1 fa 1f             	sar    edx,0x1f
c0011231:	5b                   	pop    ebx
c0011232:	5e                   	pop    esi
c0011233:	c3                   	ret    
c0011234:	83 c4 04             	add    esp,0x4
c0011237:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001123c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011241:	5b                   	pop    ebx
c0011242:	5e                   	pop    esi
c0011243:	c3                   	ret    

c0011244 <SysGetDiskVolumeLabel(regs*)>:
c0011244:	57                   	push   edi
c0011245:	56                   	push   esi
c0011246:	53                   	push   ebx
c0011247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001124e:	83 fa 19             	cmp    edx,0x19
c0011251:	77 3c                	ja     c001128f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011253:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001125a:	85 c9                	test   ecx,ecx
c001125c:	74 31                	je     c001128f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001125e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011261:	85 db                	test   ebx,ebx
c0011263:	74 2a                	je     c001128f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011265:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011268:	85 f6                	test   esi,esi
c001126a:	74 23                	je     c001128f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001126c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011272:	85 c0                	test   eax,eax
c0011274:	74 19                	je     c001128f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011276:	83 ec 0c             	sub    esp,0xc
c0011279:	8b 38                	mov    edi,DWORD PTR [eax]
c001127b:	56                   	push   esi
c001127c:	53                   	push   ebx
c001127d:	52                   	push   edx
c001127e:	51                   	push   ecx
c001127f:	50                   	push   eax
c0011280:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011283:	83 c4 20             	add    esp,0x20
c0011286:	89 c2                	mov    edx,eax
c0011288:	5b                   	pop    ebx
c0011289:	c1 fa 1f             	sar    edx,0x1f
c001128c:	5e                   	pop    esi
c001128d:	5f                   	pop    edi
c001128e:	c3                   	ret    
c001128f:	5b                   	pop    ebx
c0011290:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011295:	ba ff ff ff ff       	mov    edx,0xffffffff
c001129a:	5e                   	pop    esi
c001129b:	5f                   	pop    edi
c001129c:	c3                   	ret    

c001129d <SysRealpath(regs*)>:
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00112a7:	85 d2                	test   edx,edx
c00112a9:	74 07                	je     c00112b2 <SysRealpath(regs*)+0x15>
c00112ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00112ae:	85 c0                	test   eax,eax
c00112b0:	75 0b                	jne    c00112bd <SysRealpath(regs*)+0x20>
c00112b2:	b8 01 00 00 00       	mov    eax,0x1
c00112b7:	31 d2                	xor    edx,edx
c00112b9:	83 c4 0c             	add    esp,0xc
c00112bc:	c3                   	ret    
c00112bd:	6a 00                	push   0x0
c00112bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00112c5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00112c8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00112ce:	51                   	push   ecx
c00112cf:	52                   	push   edx
c00112d0:	50                   	push   eax
c00112d1:	e8 9c 6b ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	31 c0                	xor    eax,eax
c00112db:	31 d2                	xor    edx,edx
c00112dd:	83 c4 0c             	add    esp,0xc
c00112e0:	c3                   	ret    

c00112e1 <SysReadDir(regs*)>:
c00112e1:	53                   	push   ebx
c00112e2:	83 ec 18             	sub    esp,0x18
c00112e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ec:	83 f8 02             	cmp    eax,0x2
c00112ef:	76 61                	jbe    c0011352 <SysReadDir(regs*)+0x71>
c00112f1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00112f8:	77 49                	ja     c0011343 <SysReadDir(regs*)+0x62>
c00112fa:	83 ec 0c             	sub    esp,0xc
c00112fd:	50                   	push   eax
c00112fe:	e8 d6 1d 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	85 c0                	test   eax,eax
c0011308:	74 39                	je     c0011343 <SysReadDir(regs*)+0x62>
c001130a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	8b 10                	mov    edx,DWORD PTR [eax]
c0011317:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001131b:	51                   	push   ecx
c001131c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001131f:	51                   	push   ecx
c0011320:	6a 00                	push   0x0
c0011322:	68 10 01 00 00       	push   0x110
c0011327:	50                   	push   eax
c0011328:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001132b:	83 c4 20             	add    esp,0x20
c001132e:	85 c0                	test   eax,eax
c0011330:	74 29                	je     c001135b <SysReadDir(regs*)+0x7a>
c0011332:	83 f8 07             	cmp    eax,0x7
c0011335:	74 1b                	je     c0011352 <SysReadDir(regs*)+0x71>
c0011337:	b8 02 00 00 00       	mov    eax,0x2
c001133c:	31 d2                	xor    edx,edx
c001133e:	83 c4 18             	add    esp,0x18
c0011341:	5b                   	pop    ebx
c0011342:	c3                   	ret    
c0011343:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011348:	ba ff ff ff ff       	mov    edx,0xffffffff
c001134d:	83 c4 18             	add    esp,0x18
c0011350:	5b                   	pop    ebx
c0011351:	c3                   	ret    
c0011352:	b8 01 00 00 00       	mov    eax,0x1
c0011357:	31 d2                	xor    edx,edx
c0011359:	eb e3                	jmp    c001133e <SysReadDir(regs*)+0x5d>
c001135b:	31 c0                	xor    eax,eax
c001135d:	31 d2                	xor    edx,edx
c001135f:	eb dd                	jmp    c001133e <SysReadDir(regs*)+0x5d>

c0011361 <SysIsATTY(regs*)>:
c0011361:	83 ec 0c             	sub    esp,0xc
c0011364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011368:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001136b:	83 f8 02             	cmp    eax,0x2
c001136e:	76 07                	jbe    c0011377 <SysIsATTY(regs*)+0x16>
c0011370:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011375:	75 26                	jne    c001139d <SysIsATTY(regs*)+0x3c>
c0011377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001137f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011385:	85 c0                	test   eax,eax
c0011387:	74 24                	je     c00113ad <SysIsATTY(regs*)+0x4c>
c0011389:	83 ec 0c             	sub    esp,0xc
c001138c:	8b 10                	mov    edx,DWORD PTR [eax]
c001138e:	50                   	push   eax
c001138f:	ff 12                	call   DWORD PTR [edx]
c0011391:	31 d2                	xor    edx,edx
c0011393:	0f b6 c0             	movzx  eax,al
c0011396:	83 c4 10             	add    esp,0x10
c0011399:	83 c4 0c             	add    esp,0xc
c001139c:	c3                   	ret    
c001139d:	83 ec 0c             	sub    esp,0xc
c00113a0:	50                   	push   eax
c00113a1:	e8 33 1d 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	85 c0                	test   eax,eax
c00113ab:	75 dc                	jne    c0011389 <SysIsATTY(regs*)+0x28>
c00113ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113b7:	83 c4 0c             	add    esp,0xc
c00113ba:	c3                   	ret    

c00113bb <SysSeek(regs*)>:
c00113bb:	53                   	push   ebx
c00113bc:	83 ec 08             	sub    esp,0x8
c00113bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113c6:	8d 50 fd             	lea    edx,[eax-0x3]
c00113c9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00113cf:	77 39                	ja     c001140a <SysSeek(regs*)+0x4f>
c00113d1:	83 ec 0c             	sub    esp,0xc
c00113d4:	50                   	push   eax
c00113d5:	e8 ff 1c 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	85 c0                	test   eax,eax
c00113df:	74 29                	je     c001140a <SysSeek(regs*)+0x4f>
c00113e1:	83 ec 04             	sub    esp,0x4
c00113e4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113e7:	31 db                	xor    ebx,ebx
c00113e9:	53                   	push   ebx
c00113ea:	51                   	push   ecx
c00113eb:	50                   	push   eax
c00113ec:	e8 75 6e ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00113f1:	83 c4 10             	add    esp,0x10
c00113f4:	85 c0                	test   eax,eax
c00113f6:	0f 95 c0             	setne  al
c00113f9:	31 d2                	xor    edx,edx
c00113fb:	0f b6 c0             	movzx  eax,al
c00113fe:	f7 d8                	neg    eax
c0011400:	83 d2 00             	adc    edx,0x0
c0011403:	83 c4 08             	add    esp,0x8
c0011406:	f7 da                	neg    edx
c0011408:	5b                   	pop    ebx
c0011409:	c3                   	ret    
c001140a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001140f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011414:	83 c4 08             	add    esp,0x8
c0011417:	5b                   	pop    ebx
c0011418:	c3                   	ret    

c0011419 <SysTell(regs*)>:
c0011419:	53                   	push   ebx
c001141a:	83 ec 08             	sub    esp,0x8
c001141d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011421:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011424:	83 f8 02             	cmp    eax,0x2
c0011427:	76 56                	jbe    c001147f <SysTell(regs*)+0x66>
c0011429:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001142e:	76 19                	jbe    c0011449 <SysTell(regs*)+0x30>
c0011430:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011433:	31 d2                	xor    edx,edx
c0011435:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001143b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011442:	31 c0                	xor    eax,eax
c0011444:	83 c4 08             	add    esp,0x8
c0011447:	5b                   	pop    ebx
c0011448:	c3                   	ret    
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	50                   	push   eax
c001144d:	e8 87 1c 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	85 c0                	test   eax,eax
c0011457:	74 26                	je     c001147f <SysTell(regs*)+0x66>
c0011459:	83 ec 08             	sub    esp,0x8
c001145c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001145f:	52                   	push   edx
c0011460:	50                   	push   eax
c0011461:	e8 ac 6e ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	85 c0                	test   eax,eax
c001146b:	0f 95 c0             	setne  al
c001146e:	31 d2                	xor    edx,edx
c0011470:	0f b6 c0             	movzx  eax,al
c0011473:	f7 d8                	neg    eax
c0011475:	83 d2 00             	adc    edx,0x0
c0011478:	83 c4 08             	add    esp,0x8
c001147b:	f7 da                	neg    edx
c001147d:	5b                   	pop    ebx
c001147e:	c3                   	ret    
c001147f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011484:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011489:	83 c4 08             	add    esp,0x8
c001148c:	5b                   	pop    ebx
c001148d:	c3                   	ret    

c001148e <SysSize(regs*)>:
c001148e:	53                   	push   ebx
c001148f:	83 ec 18             	sub    esp,0x18
c0011492:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011496:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011499:	83 f8 02             	cmp    eax,0x2
c001149c:	76 5b                	jbe    c00114f9 <SysSize(regs*)+0x6b>
c001149e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114a3:	76 19                	jbe    c00114be <SysSize(regs*)+0x30>
c00114a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114a8:	31 d2                	xor    edx,edx
c00114aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00114b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b7:	31 c0                	xor    eax,eax
c00114b9:	83 c4 18             	add    esp,0x18
c00114bc:	5b                   	pop    ebx
c00114bd:	c3                   	ret    
c00114be:	83 ec 0c             	sub    esp,0xc
c00114c1:	50                   	push   eax
c00114c2:	e8 12 1c 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c00114c7:	83 c4 10             	add    esp,0x10
c00114ca:	85 c0                	test   eax,eax
c00114cc:	74 2b                	je     c00114f9 <SysSize(regs*)+0x6b>
c00114ce:	83 ec 04             	sub    esp,0x4
c00114d1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00114d5:	52                   	push   edx
c00114d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114d9:	52                   	push   edx
c00114da:	50                   	push   eax
c00114db:	e8 ca 6f ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00114e0:	83 c4 10             	add    esp,0x10
c00114e3:	85 c0                	test   eax,eax
c00114e5:	0f 95 c0             	setne  al
c00114e8:	31 d2                	xor    edx,edx
c00114ea:	0f b6 c0             	movzx  eax,al
c00114ed:	f7 d8                	neg    eax
c00114ef:	83 d2 00             	adc    edx,0x0
c00114f2:	83 c4 18             	add    esp,0x18
c00114f5:	f7 da                	neg    edx
c00114f7:	5b                   	pop    ebx
c00114f8:	c3                   	ret    
c00114f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011503:	83 c4 18             	add    esp,0x18
c0011506:	5b                   	pop    ebx
c0011507:	c3                   	ret    

c0011508 <SysSizeFromFilename(regs*)>:
c0011508:	55                   	push   ebp
c0011509:	57                   	push   edi
c001150a:	56                   	push   esi
c001150b:	53                   	push   ebx
c001150c:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011512:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011519:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001151c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001151f:	85 f6                	test   esi,esi
c0011521:	74 34                	je     c0011557 <SysSizeFromFilename(regs*)+0x4f>
c0011523:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011529:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001152c:	83 f8 02             	cmp    eax,0x2
c001152f:	76 2d                	jbe    c001155e <SysSizeFromFilename(regs*)+0x56>
c0011531:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011536:	76 3b                	jbe    c0011573 <SysSizeFromFilename(regs*)+0x6b>
c0011538:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001153b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011541:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011548:	81 c4 4c 02 00 00    	add    esp,0x24c
c001154e:	31 c0                	xor    eax,eax
c0011550:	5b                   	pop    ebx
c0011551:	31 d2                	xor    edx,edx
c0011553:	5e                   	pop    esi
c0011554:	5f                   	pop    edi
c0011555:	5d                   	pop    ebp
c0011556:	c3                   	ret    
c0011557:	89 f8                	mov    eax,edi
c0011559:	83 f8 02             	cmp    eax,0x2
c001155c:	77 d3                	ja     c0011531 <SysSizeFromFilename(regs*)+0x29>
c001155e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011564:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011569:	5b                   	pop    ebx
c001156a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001156f:	5e                   	pop    esi
c0011570:	5f                   	pop    edi
c0011571:	5d                   	pop    ebp
c0011572:	c3                   	ret    
c0011573:	83 ec 0c             	sub    esp,0xc
c0011576:	68 14 01 00 00       	push   0x114
c001157b:	e8 cb e2 ff ff       	call   c000f84b <malloc>
c0011580:	6a 01                	push   0x1
c0011582:	89 c5                	mov    ebp,eax
c0011584:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011589:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001158c:	50                   	push   eax
c001158d:	57                   	push   edi
c001158e:	55                   	push   ebp
c001158f:	e8 f8 6a ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011594:	83 c4 20             	add    esp,0x20
c0011597:	85 ed                	test   ebp,ebp
c0011599:	74 c3                	je     c001155e <SysSizeFromFilename(regs*)+0x56>
c001159b:	83 ec 04             	sub    esp,0x4
c001159e:	8d 44 24 13          	lea    eax,[esp+0x13]
c00115a2:	50                   	push   eax
c00115a3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115a6:	51                   	push   ecx
c00115a7:	55                   	push   ebp
c00115a8:	e8 fd 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00115ad:	89 c3                	mov    ebx,eax
c00115af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00115b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00115b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	85 db                	test   ebx,ebx
c00115bd:	75 9f                	jne    c001155e <SysSizeFromFilename(regs*)+0x56>
c00115bf:	6a 00                	push   0x0
c00115c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115c9:	05 0c 01 00 00       	add    eax,0x10c
c00115ce:	50                   	push   eax
c00115cf:	57                   	push   edi
c00115d0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00115d7:	53                   	push   ebx
c00115d8:	e8 95 68 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115dd:	58                   	pop    eax
c00115de:	5a                   	pop    edx
c00115df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115e3:	50                   	push   eax
c00115e4:	53                   	push   ebx
c00115e5:	e8 0f 63 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00115ea:	83 c4 10             	add    esp,0x10
c00115ed:	83 f8 01             	cmp    eax,0x1
c00115f0:	74 1a                	je     c001160c <SysSizeFromFilename(regs*)+0x104>
c00115f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00115f7:	74 26                	je     c001161f <SysSizeFromFilename(regs*)+0x117>
c00115f9:	85 f6                	test   esi,esi
c00115fb:	0f 84 47 ff ff ff    	je     c0011548 <SysSizeFromFilename(regs*)+0x40>
c0011601:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011607:	e9 3c ff ff ff       	jmp    c0011548 <SysSizeFromFilename(regs*)+0x40>
c001160c:	85 f6                	test   esi,esi
c001160e:	0f 84 34 ff ff ff    	je     c0011548 <SysSizeFromFilename(regs*)+0x40>
c0011614:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001161a:	e9 29 ff ff ff       	jmp    c0011548 <SysSizeFromFilename(regs*)+0x40>
c001161f:	85 f6                	test   esi,esi
c0011621:	0f 84 21 ff ff ff    	je     c0011548 <SysSizeFromFilename(regs*)+0x40>
c0011627:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001162d:	e9 16 ff ff ff       	jmp    c0011548 <SysSizeFromFilename(regs*)+0x40>

c0011632 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011632:	55                   	push   ebp
c0011633:	57                   	push   edi
c0011634:	56                   	push   esi
c0011635:	53                   	push   ebx
c0011636:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001163c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011643:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011646:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011649:	85 f6                	test   esi,esi
c001164b:	74 34                	je     c0011681 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001164d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011653:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011656:	83 f8 02             	cmp    eax,0x2
c0011659:	76 2d                	jbe    c0011688 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001165b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011660:	76 3b                	jbe    c001169d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011662:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011665:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001166b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011672:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011678:	31 c0                	xor    eax,eax
c001167a:	5b                   	pop    ebx
c001167b:	31 d2                	xor    edx,edx
c001167d:	5e                   	pop    esi
c001167e:	5f                   	pop    edi
c001167f:	5d                   	pop    ebp
c0011680:	c3                   	ret    
c0011681:	89 f8                	mov    eax,edi
c0011683:	83 f8 02             	cmp    eax,0x2
c0011686:	77 d3                	ja     c001165b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011688:	81 c4 4c 02 00 00    	add    esp,0x24c
c001168e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011693:	5b                   	pop    ebx
c0011694:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	5d                   	pop    ebp
c001169c:	c3                   	ret    
c001169d:	83 ec 0c             	sub    esp,0xc
c00116a0:	68 14 01 00 00       	push   0x114
c00116a5:	e8 a1 e1 ff ff       	call   c000f84b <malloc>
c00116aa:	6a 00                	push   0x0
c00116ac:	89 c5                	mov    ebp,eax
c00116ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b6:	50                   	push   eax
c00116b7:	57                   	push   edi
c00116b8:	55                   	push   ebp
c00116b9:	e8 ce 69 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00116be:	83 c4 20             	add    esp,0x20
c00116c1:	85 ed                	test   ebp,ebp
c00116c3:	74 c3                	je     c0011688 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00116c5:	83 ec 04             	sub    esp,0x4
c00116c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116cc:	50                   	push   eax
c00116cd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116d0:	51                   	push   ecx
c00116d1:	55                   	push   ebp
c00116d2:	e8 d3 6d ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00116d7:	89 c3                	mov    ebx,eax
c00116d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	85 db                	test   ebx,ebx
c00116e7:	75 9f                	jne    c0011688 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00116e9:	6a 00                	push   0x0
c00116eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116f3:	05 0c 01 00 00       	add    eax,0x10c
c00116f8:	50                   	push   eax
c00116f9:	57                   	push   edi
c00116fa:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011701:	53                   	push   ebx
c0011702:	e8 6b 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011707:	58                   	pop    eax
c0011708:	5a                   	pop    edx
c0011709:	8d 44 24 18          	lea    eax,[esp+0x18]
c001170d:	50                   	push   eax
c001170e:	53                   	push   ebx
c001170f:	e8 e5 61 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	83 f8 01             	cmp    eax,0x1
c001171a:	74 1a                	je     c0011736 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c001171c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011721:	74 26                	je     c0011749 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011723:	85 f6                	test   esi,esi
c0011725:	0f 84 47 ff ff ff    	je     c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001172b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011731:	e9 3c ff ff ff       	jmp    c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011736:	85 f6                	test   esi,esi
c0011738:	0f 84 34 ff ff ff    	je     c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001173e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011744:	e9 29 ff ff ff       	jmp    c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011749:	85 f6                	test   esi,esi
c001174b:	0f 84 21 ff ff ff    	je     c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011751:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011757:	e9 16 ff ff ff       	jmp    c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001175c <SysClose(regs*)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 08             	sub    esp,0x8
c0011760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011764:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011767:	83 f8 02             	cmp    eax,0x2
c001176a:	76 41                	jbe    c00117ad <SysClose(regs*)+0x51>
c001176c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011772:	83 fa 01             	cmp    edx,0x1
c0011775:	76 2d                	jbe    c00117a4 <SysClose(regs*)+0x48>
c0011777:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001177c:	77 2f                	ja     c00117ad <SysClose(regs*)+0x51>
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	50                   	push   eax
c0011782:	e8 52 19 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	89 c3                	mov    ebx,eax
c001178c:	85 c0                	test   eax,eax
c001178e:	74 1d                	je     c00117ad <SysClose(regs*)+0x51>
c0011790:	83 ec 0c             	sub    esp,0xc
c0011793:	50                   	push   eax
c0011794:	e8 6d 6a ff ff       	call   c0008206 <File::close()>
c0011799:	8b 03                	mov    eax,DWORD PTR [ebx]
c001179b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001179e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	31 c0                	xor    eax,eax
c00117a6:	31 d2                	xor    edx,edx
c00117a8:	83 c4 08             	add    esp,0x8
c00117ab:	5b                   	pop    ebx
c00117ac:	c3                   	ret    
c00117ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117b7:	83 c4 08             	add    esp,0x8
c00117ba:	5b                   	pop    ebx
c00117bb:	c3                   	ret    

c00117bc <SysOpenDir(regs*)>:
c00117bc:	56                   	push   esi
c00117bd:	53                   	push   ebx
c00117be:	83 ec 04             	sub    esp,0x4
c00117c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117c8:	85 c9                	test   ecx,ecx
c00117ca:	74 5d                	je     c0011829 <SysOpenDir(regs*)+0x6d>
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	68 14 01 00 00       	push   0x114
c00117d4:	e8 72 e0 ff ff       	call   c000f84b <malloc>
c00117d9:	83 c4 0c             	add    esp,0xc
c00117dc:	89 c6                	mov    esi,eax
c00117de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e6:	50                   	push   eax
c00117e7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117ea:	52                   	push   edx
c00117eb:	56                   	push   esi
c00117ec:	e8 79 6e ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	85 f6                	test   esi,esi
c00117f6:	74 31                	je     c0011829 <SysOpenDir(regs*)+0x6d>
c00117f8:	83 ec 0c             	sub    esp,0xc
c00117fb:	56                   	push   esi
c00117fc:	e8 31 6f ff ff       	call   c0008732 <Directory::open()>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	85 c0                	test   eax,eax
c0011806:	75 21                	jne    c0011829 <SysOpenDir(regs*)+0x6d>
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	56                   	push   esi
c001180c:	e8 cb 15 00 00       	call   c0012ddc <UnixFile::getFileDescriptor()>
c0011811:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	89 02                	mov    DWORD PTR [edx],eax
c0011819:	c1 f8 1f             	sar    eax,0x1f
c001181c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001181f:	83 c4 04             	add    esp,0x4
c0011822:	31 c0                	xor    eax,eax
c0011824:	31 d2                	xor    edx,edx
c0011826:	5b                   	pop    ebx
c0011827:	5e                   	pop    esi
c0011828:	c3                   	ret    
c0011829:	83 c4 04             	add    esp,0x4
c001182c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011831:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011836:	5b                   	pop    ebx
c0011837:	5e                   	pop    esi
c0011838:	c3                   	ret    

c0011839 <SysMakeDir(regs*)>:
c0011839:	56                   	push   esi
c001183a:	53                   	push   ebx
c001183b:	83 ec 10             	sub    esp,0x10
c001183e:	68 14 01 00 00       	push   0x114
c0011843:	e8 03 e0 ff ff       	call   c000f84b <malloc>
c0011848:	83 c4 0c             	add    esp,0xc
c001184b:	89 c3                	mov    ebx,eax
c001184d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011852:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011855:	50                   	push   eax
c0011856:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001185a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001185d:	52                   	push   edx
c001185e:	53                   	push   ebx
c001185f:	e8 06 6e ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011864:	83 c4 10             	add    esp,0x10
c0011867:	85 db                	test   ebx,ebx
c0011869:	74 2c                	je     c0011897 <SysMakeDir(regs*)+0x5e>
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	53                   	push   ebx
c001186f:	e8 9e 70 ff ff       	call   c0008912 <Directory::create()>
c0011874:	89 c6                	mov    esi,eax
c0011876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001187b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	31 c0                	xor    eax,eax
c0011883:	85 f6                	test   esi,esi
c0011885:	0f 95 c0             	setne  al
c0011888:	31 d2                	xor    edx,edx
c001188a:	f7 d8                	neg    eax
c001188c:	83 d2 00             	adc    edx,0x0
c001188f:	83 c4 04             	add    esp,0x4
c0011892:	f7 da                	neg    edx
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	c3                   	ret    
c0011897:	83 c4 04             	add    esp,0x4
c001189a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001189f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118a4:	5b                   	pop    ebx
c00118a5:	5e                   	pop    esi
c00118a6:	c3                   	ret    

c00118a7 <SysCloseDir(regs*)>:
c00118a7:	53                   	push   ebx
c00118a8:	83 ec 08             	sub    esp,0x8
c00118ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b2:	8d 50 fd             	lea    edx,[eax-0x3]
c00118b5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118bb:	77 2f                	ja     c00118ec <SysCloseDir(regs*)+0x45>
c00118bd:	83 ec 0c             	sub    esp,0xc
c00118c0:	50                   	push   eax
c00118c1:	e8 13 18 00 00       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c00118c6:	83 c4 10             	add    esp,0x10
c00118c9:	89 c3                	mov    ebx,eax
c00118cb:	85 c0                	test   eax,eax
c00118cd:	74 1d                	je     c00118ec <SysCloseDir(regs*)+0x45>
c00118cf:	83 ec 0c             	sub    esp,0xc
c00118d2:	50                   	push   eax
c00118d3:	e8 b6 6e ff ff       	call   c000878e <Directory::close()>
c00118d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	31 c0                	xor    eax,eax
c00118e5:	31 d2                	xor    edx,edx
c00118e7:	83 c4 08             	add    esp,0x8
c00118ea:	5b                   	pop    ebx
c00118eb:	c3                   	ret    
c00118ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f6:	83 c4 08             	add    esp,0x8
c00118f9:	5b                   	pop    ebx
c00118fa:	c3                   	ret    

c00118fb <SysWait(regs*)>:
c00118fb:	83 ec 10             	sub    esp,0x10
c00118fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011902:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011905:	52                   	push   edx
c0011906:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011909:	51                   	push   ecx
c001190a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001190d:	50                   	push   eax
c001190e:	e8 11 50 00 00       	call   c0016924 <waitTask(int, int*, int)>
c0011913:	83 c4 1c             	add    esp,0x1c
c0011916:	89 c2                	mov    edx,eax
c0011918:	c1 fa 1f             	sar    edx,0x1f
c001191b:	c3                   	ret    

c001191c <SysNotImpl(regs*)>:
c001191c:	83 ec 18             	sub    esp,0x18
c001191f:	68 d3 4a 02 c0       	push   0xc0024ad3
c0011924:	e8 77 e3 ff ff       	call   c000fca0 <KePanic(char const*)>
c0011929:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001192e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011933:	83 c4 1c             	add    esp,0x1c
c0011936:	c3                   	ret    

c0011937 <SysPanic(regs*)>:
c0011937:	83 ec 18             	sub    esp,0x18
c001193a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001193e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011941:	50                   	push   eax
c0011942:	e8 59 e3 ff ff       	call   c000fca0 <KePanic(char const*)>
c0011947:	b8 01 00 00 00       	mov    eax,0x1
c001194c:	31 d2                	xor    edx,edx
c001194e:	83 c4 1c             	add    esp,0x1c
c0011951:	c3                   	ret    

c0011952 <SysRmdir(regs*)>:
c0011952:	56                   	push   esi
c0011953:	53                   	push   ebx
c0011954:	83 ec 20             	sub    esp,0x20
c0011957:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001195b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001195e:	68 14 01 00 00       	push   0x114
c0011963:	e8 e3 de ff ff       	call   c000f84b <malloc>
c0011968:	6a 00                	push   0x0
c001196a:	89 c3                	mov    ebx,eax
c001196c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011974:	50                   	push   eax
c0011975:	56                   	push   esi
c0011976:	53                   	push   ebx
c0011977:	e8 10 67 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c001197c:	83 c4 14             	add    esp,0x14
c001197f:	53                   	push   ebx
c0011980:	e8 f1 69 ff ff       	call   c0008376 <File::unlink()>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	85 db                	test   ebx,ebx
c001198a:	74 14                	je     c00119a0 <SysRmdir(regs*)+0x4e>
c001198c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011990:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	53                   	push   ebx
c0011996:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a0:	85 c0                	test   eax,eax
c00119a2:	0f 95 c0             	setne  al
c00119a5:	31 d2                	xor    edx,edx
c00119a7:	0f b6 c0             	movzx  eax,al
c00119aa:	f7 d8                	neg    eax
c00119ac:	83 d2 00             	adc    edx,0x0
c00119af:	83 c4 14             	add    esp,0x14
c00119b2:	f7 da                	neg    edx
c00119b4:	5b                   	pop    ebx
c00119b5:	5e                   	pop    esi
c00119b6:	c3                   	ret    

c00119b7 <SysUnlink(regs*)>:
c00119b7:	56                   	push   esi
c00119b8:	53                   	push   ebx
c00119b9:	83 ec 20             	sub    esp,0x20
c00119bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119c0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119c3:	68 14 01 00 00       	push   0x114
c00119c8:	e8 7e de ff ff       	call   c000f84b <malloc>
c00119cd:	6a 00                	push   0x0
c00119cf:	89 c3                	mov    ebx,eax
c00119d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119d9:	50                   	push   eax
c00119da:	56                   	push   esi
c00119db:	53                   	push   ebx
c00119dc:	e8 ab 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00119e1:	83 c4 14             	add    esp,0x14
c00119e4:	53                   	push   ebx
c00119e5:	e8 8c 69 ff ff       	call   c0008376 <File::unlink()>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	85 db                	test   ebx,ebx
c00119ef:	74 14                	je     c0011a05 <SysUnlink(regs*)+0x4e>
c00119f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	53                   	push   ebx
c00119fb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119fe:	83 c4 10             	add    esp,0x10
c0011a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a05:	85 c0                	test   eax,eax
c0011a07:	0f 95 c0             	setne  al
c0011a0a:	31 d2                	xor    edx,edx
c0011a0c:	0f b6 c0             	movzx  eax,al
c0011a0f:	f7 d8                	neg    eax
c0011a11:	83 d2 00             	adc    edx,0x0
c0011a14:	83 c4 14             	add    esp,0x14
c0011a17:	f7 da                	neg    edx
c0011a19:	5b                   	pop    ebx
c0011a1a:	5e                   	pop    esi
c0011a1b:	c3                   	ret    

c0011a1c <SysGetArgv(regs*)>:
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a23:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a26:	85 c0                	test   eax,eax
c0011a28:	78 2c                	js     c0011a56 <SysGetArgv(regs*)+0x3a>
c0011a2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a30:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011a33:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011a39:	7d 1b                	jge    c0011a56 <SysGetArgv(regs*)+0x3a>
c0011a3b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011a42:	85 c0                	test   eax,eax
c0011a44:	74 18                	je     c0011a5e <SysGetArgv(regs*)+0x42>
c0011a46:	83 ec 08             	sub    esp,0x8
c0011a49:	50                   	push   eax
c0011a4a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a4d:	50                   	push   eax
c0011a4e:	e8 ed eb fe ff       	call   c0000640 <strcpy>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	31 c0                	xor    eax,eax
c0011a58:	31 d2                	xor    edx,edx
c0011a5a:	83 c4 0c             	add    esp,0xc
c0011a5d:	c3                   	ret    
c0011a5e:	b8 01 00 00 00       	mov    eax,0x1
c0011a63:	31 d2                	xor    edx,edx
c0011a65:	83 c4 0c             	add    esp,0xc
c0011a68:	c3                   	ret    

c0011a69 <SysUSleep(regs*)>:
c0011a69:	83 ec 1c             	sub    esp,0x1c
c0011a6c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a70:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a73:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a76:	6a 00                	push   0x0
c0011a78:	6a 64                	push   0x64
c0011a7a:	52                   	push   edx
c0011a7b:	50                   	push   eax
c0011a7c:	e8 73 05 01 00       	call   c0021ff4 <__udivdi3>
c0011a81:	83 c4 18             	add    esp,0x18
c0011a84:	52                   	push   edx
c0011a85:	50                   	push   eax
c0011a86:	e8 91 4f 00 00       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0011a8b:	31 c0                	xor    eax,eax
c0011a8d:	31 d2                	xor    edx,edx
c0011a8f:	83 c4 1c             	add    esp,0x1c
c0011a92:	c3                   	ret    

c0011a93 <SysSpawn(regs*)>:
c0011a93:	56                   	push   esi
c0011a94:	53                   	push   ebx
c0011a95:	83 ec 04             	sub    esp,0x4
c0011a98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a9f:	85 f6                	test   esi,esi
c0011aa1:	75 0a                	jne    c0011aad <SysSpawn(regs*)+0x1a>
c0011aa3:	83 c4 04             	add    esp,0x4
c0011aa6:	31 c0                	xor    eax,eax
c0011aa8:	31 d2                	xor    edx,edx
c0011aaa:	5b                   	pop    ebx
c0011aab:	5e                   	pop    esi
c0011aac:	c3                   	ret    
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	68 c4 07 00 00       	push   0x7c4
c0011ab5:	e8 91 dd ff ff       	call   c000f84b <malloc>
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ac0:	89 c6                	mov    esi,eax
c0011ac2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac5:	85 c9                	test   ecx,ecx
c0011ac7:	74 39                	je     c0011b02 <SysSpawn(regs*)+0x6f>
c0011ac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ace:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ad1:	52                   	push   edx
c0011ad2:	50                   	push   eax
c0011ad3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ad6:	50                   	push   eax
c0011ad7:	56                   	push   esi
c0011ad8:	e8 07 46 00 00       	call   c00160e4 <Process::Process(char const*, Process*, char**)>
c0011add:	83 c4 10             	add    esp,0x10
c0011ae0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011ae7:	75 ba                	jne    c0011aa3 <SysSpawn(regs*)+0x10>
c0011ae9:	83 ec 0c             	sub    esp,0xc
c0011aec:	56                   	push   esi
c0011aed:	e8 ce 4b 00 00       	call   c00166c0 <Process::createUserThread()>
c0011af2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011af4:	83 c4 10             	add    esp,0x10
c0011af7:	89 c2                	mov    edx,eax
c0011af9:	83 c4 04             	add    esp,0x4
c0011afc:	c1 fa 1f             	sar    edx,0x1f
c0011aff:	5b                   	pop    ebx
c0011b00:	5e                   	pop    esi
c0011b01:	c3                   	ret    
c0011b02:	31 c0                	xor    eax,eax
c0011b04:	eb cb                	jmp    c0011ad1 <SysSpawn(regs*)+0x3e>

c0011b06 <SysGetEnv(regs*)>:
c0011b06:	57                   	push   edi
c0011b07:	56                   	push   esi
c0011b08:	53                   	push   ebx
c0011b09:	83 ec 1c             	sub    esp,0x1c
c0011b0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b15:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b18:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b1b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011b1e:	51                   	push   ecx
c0011b1f:	e8 2f cb ff ff       	call   c000e653 <KeGetProcessTotalEnvCount(Process*)>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	39 c7                	cmp    edi,eax
c0011b29:	7c 14                	jl     c0011b3f <SysGetEnv(regs*)+0x39>
c0011b2b:	85 f6                	test   esi,esi
c0011b2d:	75 0b                	jne    c0011b3a <SysGetEnv(regs*)+0x34>
c0011b2f:	83 c4 10             	add    esp,0x10
c0011b32:	31 c0                	xor    eax,eax
c0011b34:	5b                   	pop    ebx
c0011b35:	31 d2                	xor    edx,edx
c0011b37:	5e                   	pop    esi
c0011b38:	5f                   	pop    edi
c0011b39:	c3                   	ret    
c0011b3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b3d:	eb f0                	jmp    c0011b2f <SysGetEnv(regs*)+0x29>
c0011b3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b43:	83 ec 04             	sub    esp,0x4
c0011b46:	57                   	push   edi
c0011b47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b4d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011b50:	57                   	push   edi
c0011b51:	50                   	push   eax
c0011b52:	e8 1c cb ff ff       	call   c000e673 <KeGetProcessEnvPair(Process*, int)>
c0011b57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b62:	83 c4 0c             	add    esp,0xc
c0011b65:	85 d2                	test   edx,edx
c0011b67:	75 23                	jne    c0011b8c <SysGetEnv(regs*)+0x86>
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	50                   	push   eax
c0011b6d:	e8 fe e9 fe ff       	call   c0000570 <strlen>
c0011b72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b75:	89 c3                	mov    ebx,eax
c0011b77:	e8 f4 e9 fe ff       	call   c0000570 <strlen>
c0011b7c:	83 c4 10             	add    esp,0x10
c0011b7f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	31 d2                	xor    edx,edx
c0011b88:	5b                   	pop    ebx
c0011b89:	5e                   	pop    esi
c0011b8a:	5f                   	pop    edi
c0011b8b:	c3                   	ret    
c0011b8c:	83 ec 08             	sub    esp,0x8
c0011b8f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b92:	50                   	push   eax
c0011b93:	56                   	push   esi
c0011b94:	e8 a7 ea fe ff       	call   c0000640 <strcpy>
c0011b99:	58                   	pop    eax
c0011b9a:	5a                   	pop    edx
c0011b9b:	68 ed 4a 02 c0       	push   0xc0024aed
c0011ba0:	56                   	push   esi
c0011ba1:	e8 9a ec fe ff       	call   c0000840 <strcat>
c0011ba6:	59                   	pop    ecx
c0011ba7:	5b                   	pop    ebx
c0011ba8:	57                   	push   edi
c0011ba9:	56                   	push   esi
c0011baa:	e8 91 ec fe ff       	call   c0000840 <strcat>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	e9 78 ff ff ff       	jmp    c0011b2f <SysGetEnv(regs*)+0x29>

c0011bb7 <SysSetFatAttrib(regs*)>:
c0011bb7:	57                   	push   edi
c0011bb8:	56                   	push   esi
c0011bb9:	53                   	push   ebx
c0011bba:	83 ec 1c             	sub    esp,0x1c
c0011bbd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bc1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bc4:	68 14 01 00 00       	push   0x114
c0011bc9:	e8 7d dc ff ff       	call   c000f84b <malloc>
c0011bce:	83 c4 0c             	add    esp,0xc
c0011bd1:	89 c3                	mov    ebx,eax
c0011bd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bdb:	50                   	push   eax
c0011bdc:	57                   	push   edi
c0011bdd:	53                   	push   ebx
c0011bde:	e8 a7 65 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011be3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011be6:	83 c4 0c             	add    esp,0xc
c0011be9:	0f b6 d4             	movzx  edx,ah
c0011bec:	0f b6 c0             	movzx  eax,al
c0011bef:	52                   	push   edx
c0011bf0:	50                   	push   eax
c0011bf1:	53                   	push   ebx
c0011bf2:	e8 19 68 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011bf7:	83 c4 10             	add    esp,0x10
c0011bfa:	85 db                	test   ebx,ebx
c0011bfc:	74 14                	je     c0011c12 <SysSetFatAttrib(regs*)+0x5b>
c0011bfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c02:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	53                   	push   ebx
c0011c08:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c12:	85 c0                	test   eax,eax
c0011c14:	0f 95 c0             	setne  al
c0011c17:	31 d2                	xor    edx,edx
c0011c19:	0f b6 c0             	movzx  eax,al
c0011c1c:	f7 d8                	neg    eax
c0011c1e:	83 d2 00             	adc    edx,0x0
c0011c21:	83 c4 10             	add    esp,0x10
c0011c24:	f7 da                	neg    edx
c0011c26:	5b                   	pop    ebx
c0011c27:	5e                   	pop    esi
c0011c28:	5f                   	pop    edi
c0011c29:	c3                   	ret    

c0011c2a <SysShutdown(regs*)>:
c0011c2a:	83 ec 1c             	sub    esp,0x1c
c0011c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c31:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011c34:	85 c9                	test   ecx,ecx
c0011c36:	74 18                	je     c0011c50 <SysShutdown(regs*)+0x26>
c0011c38:	83 f9 01             	cmp    ecx,0x1
c0011c3b:	74 26                	je     c0011c63 <SysShutdown(regs*)+0x39>
c0011c3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c47:	83 f9 02             	cmp    ecx,0x2
c0011c4a:	74 24                	je     c0011c70 <SysShutdown(regs*)+0x46>
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	c3                   	ret    
c0011c50:	e8 a1 e9 ff ff       	call   c00105f6 <KeShutdown()>
c0011c55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	c3                   	ret    
c0011c63:	e8 c4 e9 ff ff       	call   c001062c <KeSleep()>
c0011c68:	31 c0                	xor    eax,eax
c0011c6a:	31 d2                	xor    edx,edx
c0011c6c:	83 c4 1c             	add    esp,0x1c
c0011c6f:	c3                   	ret    
c0011c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c78:	e8 df e9 ff ff       	call   c001065c <KeRestart()>
c0011c7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c85:	eb c5                	jmp    c0011c4c <SysShutdown(regs*)+0x22>

c0011c87 <SysPipe(regs*)>:
c0011c87:	57                   	push   edi
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8e:	83 ec 0c             	sub    esp,0xc
c0011c91:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c94:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c97:	6a 20                	push   0x20
c0011c99:	e8 ad db ff ff       	call   c000f84b <malloc>
c0011c9e:	89 c3                	mov    ebx,eax
c0011ca0:	58                   	pop    eax
c0011ca1:	5a                   	pop    edx
c0011ca2:	68 00 50 00 00       	push   0x5000
c0011ca7:	53                   	push   ebx
c0011ca8:	e8 c9 e7 ff ff       	call   c0010476 <Pipe::Pipe(int)>
c0011cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cb0:	e8 27 11 00 00       	call   c0012ddc <UnixFile::getFileDescriptor()>
c0011cb5:	89 07                	mov    DWORD PTR [edi],eax
c0011cb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cba:	e8 1d 11 00 00       	call   c0012ddc <UnixFile::getFileDescriptor()>
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	89 06                	mov    DWORD PTR [esi],eax
c0011cc4:	31 d2                	xor    edx,edx
c0011cc6:	5b                   	pop    ebx
c0011cc7:	31 c0                	xor    eax,eax
c0011cc9:	5e                   	pop    esi
c0011cca:	5f                   	pop    edi
c0011ccb:	c3                   	ret    

c0011ccc <SysGetUnixTime(regs*)>:
c0011ccc:	57                   	push   edi
c0011ccd:	56                   	push   esi
c0011cce:	53                   	push   ebx
c0011ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cd3:	83 ec 08             	sub    esp,0x8
c0011cd6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011cd9:	52                   	push   edx
c0011cda:	68 ef 4a 02 c0       	push   0xc0024aef
c0011cdf:	e8 98 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011ceb:	74 3d                	je     c0011d2a <SysGetUnixTime(regs*)+0x5e>
c0011ced:	83 ec 0c             	sub    esp,0xc
c0011cf0:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011cf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011cfb:	50                   	push   eax
c0011cfc:	e8 39 74 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011d01:	83 c4 0c             	add    esp,0xc
c0011d04:	52                   	push   edx
c0011d05:	50                   	push   eax
c0011d06:	68 03 4b 02 c0       	push   0xc0024b03
c0011d0b:	e8 6c 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011d18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d22:	5b                   	pop    ebx
c0011d23:	5e                   	pop    esi
c0011d24:	5f                   	pop    edi
c0011d25:	e9 10 74 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011d2a:	8b 35 50 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb50
c0011d30:	8b 3d 54 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb54
c0011d36:	89 f0                	mov    eax,esi
c0011d38:	89 fa                	mov    edx,edi
c0011d3a:	01 f0                	add    eax,esi
c0011d3c:	11 fa                	adc    edx,edi
c0011d3e:	01 f0                	add    eax,esi
c0011d40:	11 fa                	adc    edx,edi
c0011d42:	89 c1                	mov    ecx,eax
c0011d44:	89 d3                	mov    ebx,edx
c0011d46:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0011d4a:	c1 e1 05             	shl    ecx,0x5
c0011d4d:	01 c8                	add    eax,ecx
c0011d4f:	11 da                	adc    edx,ebx
c0011d51:	01 f0                	add    eax,esi
c0011d53:	5b                   	pop    ebx
c0011d54:	11 fa                	adc    edx,edi
c0011d56:	5e                   	pop    esi
c0011d57:	5f                   	pop    edi
c0011d58:	c3                   	ret    

c0011d59 <string_ends_with(char const*, char const*)>:
c0011d59:	57                   	push   edi
c0011d5a:	56                   	push   esi
c0011d5b:	53                   	push   ebx
c0011d5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d60:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011d64:	83 ec 0c             	sub    esp,0xc
c0011d67:	53                   	push   ebx
c0011d68:	e8 03 e8 fe ff       	call   c0000570 <strlen>
c0011d6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d70:	89 c6                	mov    esi,eax
c0011d72:	e8 f9 e7 fe ff       	call   c0000570 <strlen>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	39 c6                	cmp    esi,eax
c0011d7c:	7d 06                	jge    c0011d84 <string_ends_with(char const*, char const*)+0x2b>
c0011d7e:	5b                   	pop    ebx
c0011d7f:	31 c0                	xor    eax,eax
c0011d81:	5e                   	pop    esi
c0011d82:	5f                   	pop    edi
c0011d83:	c3                   	ret    
c0011d84:	83 ec 08             	sub    esp,0x8
c0011d87:	29 c6                	sub    esi,eax
c0011d89:	57                   	push   edi
c0011d8a:	01 f3                	add    ebx,esi
c0011d8c:	53                   	push   ebx
c0011d8d:	e8 be e9 fe ff       	call   c0000750 <strcmp>
c0011d92:	83 c4 10             	add    esp,0x10
c0011d95:	85 c0                	test   eax,eax
c0011d97:	5b                   	pop    ebx
c0011d98:	0f 94 c0             	sete   al
c0011d9b:	5e                   	pop    esi
c0011d9c:	0f b6 c0             	movzx  eax,al
c0011d9f:	5f                   	pop    edi
c0011da0:	c3                   	ret    

c0011da1 <SysOpen(regs*)>:
c0011da1:	56                   	push   esi
c0011da2:	53                   	push   ebx
c0011da3:	81 ec 04 01 00 00    	sub    esp,0x104
c0011da9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011db0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011db3:	85 c0                	test   eax,eax
c0011db5:	0f 84 bc 01 00 00    	je     c0011f77 <SysOpen(regs*)+0x1d6>
c0011dbb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dbe:	85 c0                	test   eax,eax
c0011dc0:	0f 84 b1 01 00 00    	je     c0011f77 <SysOpen(regs*)+0x1d6>
c0011dc6:	6a 00                	push   0x0
c0011dc8:	68 0a 4b 02 c0       	push   0xc0024b0a
c0011dcd:	50                   	push   eax
c0011dce:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011dd2:	56                   	push   esi
c0011dd3:	e8 9a 60 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011dd8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ddb:	e8 90 e7 fe ff       	call   c0000570 <strlen>
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	83 e8 01             	sub    eax,0x1
c0011de6:	74 21                	je     c0011e09 <SysOpen(regs*)+0x68>
c0011de8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011dec:	eb 12                	jmp    c0011e00 <SysOpen(regs*)+0x5f>
c0011dee:	83 fa 3a             	cmp    edx,0x3a
c0011df1:	74 12                	je     c0011e05 <SysOpen(regs*)+0x64>
c0011df3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011df7:	83 e8 01             	sub    eax,0x1
c0011dfa:	74 0d                	je     c0011e09 <SysOpen(regs*)+0x68>
c0011dfc:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011e00:	83 fa 2e             	cmp    edx,0x2e
c0011e03:	75 e9                	jne    c0011dee <SysOpen(regs*)+0x4d>
c0011e05:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011e09:	83 ec 08             	sub    esp,0x8
c0011e0c:	68 0e 4b 02 c0       	push   0xc0024b0e
c0011e11:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e14:	50                   	push   eax
c0011e15:	e8 3f ff ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	85 c0                	test   eax,eax
c0011e1f:	74 1d                	je     c0011e3e <SysOpen(regs*)+0x9d>
c0011e21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e24:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e31:	81 c4 04 01 00 00    	add    esp,0x104
c0011e37:	31 c0                	xor    eax,eax
c0011e39:	31 d2                	xor    edx,edx
c0011e3b:	5b                   	pop    ebx
c0011e3c:	5e                   	pop    esi
c0011e3d:	c3                   	ret    
c0011e3e:	83 ec 08             	sub    esp,0x8
c0011e41:	68 13 4b 02 c0       	push   0xc0024b13
c0011e46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e49:	50                   	push   eax
c0011e4a:	e8 0a ff ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	85 c0                	test   eax,eax
c0011e54:	75 cb                	jne    c0011e21 <SysOpen(regs*)+0x80>
c0011e56:	83 ec 08             	sub    esp,0x8
c0011e59:	68 0f 4b 02 c0       	push   0xc0024b0f
c0011e5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e61:	50                   	push   eax
c0011e62:	e8 e9 e8 fe ff       	call   c0000750 <strcmp>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	85 c0                	test   eax,eax
c0011e6c:	74 b3                	je     c0011e21 <SysOpen(regs*)+0x80>
c0011e6e:	83 ec 08             	sub    esp,0x8
c0011e71:	68 0e 4b 02 c0       	push   0xc0024b0e
c0011e76:	56                   	push   esi
c0011e77:	e8 dd fe ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	85 c0                	test   eax,eax
c0011e81:	75 9e                	jne    c0011e21 <SysOpen(regs*)+0x80>
c0011e83:	83 ec 08             	sub    esp,0x8
c0011e86:	68 18 4b 02 c0       	push   0xc0024b18
c0011e8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e8e:	50                   	push   eax
c0011e8f:	e8 c5 fe ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	85 c0                	test   eax,eax
c0011e99:	0f 85 eb 00 00 00    	jne    c0011f8a <SysOpen(regs*)+0x1e9>
c0011e9f:	83 ec 08             	sub    esp,0x8
c0011ea2:	68 1d 4b 02 c0       	push   0xc0024b1d
c0011ea7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011eaa:	50                   	push   eax
c0011eab:	e8 a9 fe ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011eb0:	83 c4 10             	add    esp,0x10
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	0f 85 cf 00 00 00    	jne    c0011f8a <SysOpen(regs*)+0x1e9>
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	68 19 4b 02 c0       	push   0xc0024b19
c0011ec3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ec6:	51                   	push   ecx
c0011ec7:	e8 84 e8 fe ff       	call   c0000750 <strcmp>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	85 c0                	test   eax,eax
c0011ed1:	0f 84 b3 00 00 00    	je     c0011f8a <SysOpen(regs*)+0x1e9>
c0011ed7:	83 ec 08             	sub    esp,0x8
c0011eda:	68 18 4b 02 c0       	push   0xc0024b18
c0011edf:	56                   	push   esi
c0011ee0:	e8 74 fe ff ff       	call   c0011d59 <string_ends_with(char const*, char const*)>
c0011ee5:	83 c4 10             	add    esp,0x10
c0011ee8:	85 c0                	test   eax,eax
c0011eea:	0f 85 9a 00 00 00    	jne    c0011f8a <SysOpen(regs*)+0x1e9>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	68 14 01 00 00       	push   0x114
c0011ef8:	e8 4e d9 ff ff       	call   c000f84b <malloc>
c0011efd:	83 c4 0c             	add    esp,0xc
c0011f00:	89 c6                	mov    esi,eax
c0011f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f0a:	50                   	push   eax
c0011f0b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f0e:	52                   	push   edx
c0011f0f:	56                   	push   esi
c0011f10:	e8 75 62 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	85 f6                	test   esi,esi
c0011f1a:	74 5b                	je     c0011f77 <SysOpen(regs*)+0x1d6>
c0011f1c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f1f:	0f b6 c2             	movzx  eax,dl
c0011f22:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011f25:	89 d0                	mov    eax,edx
c0011f27:	83 e0 01             	and    eax,0x1
c0011f2a:	f6 c2 02             	test   dl,0x2
c0011f2d:	74 03                	je     c0011f32 <SysOpen(regs*)+0x191>
c0011f2f:	83 c8 02             	or     eax,0x2
c0011f32:	f6 c2 04             	test   dl,0x4
c0011f35:	74 03                	je     c0011f3a <SysOpen(regs*)+0x199>
c0011f37:	83 c8 04             	or     eax,0x4
c0011f3a:	f6 c2 08             	test   dl,0x8
c0011f3d:	74 03                	je     c0011f42 <SysOpen(regs*)+0x1a1>
c0011f3f:	83 c8 0a             	or     eax,0xa
c0011f42:	80 e2 10             	and    dl,0x10
c0011f45:	74 03                	je     c0011f4a <SysOpen(regs*)+0x1a9>
c0011f47:	83 c8 12             	or     eax,0x12
c0011f4a:	83 ec 08             	sub    esp,0x8
c0011f4d:	50                   	push   eax
c0011f4e:	56                   	push   esi
c0011f4f:	e8 54 62 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	85 c0                	test   eax,eax
c0011f59:	75 1c                	jne    c0011f77 <SysOpen(regs*)+0x1d6>
c0011f5b:	83 ec 0c             	sub    esp,0xc
c0011f5e:	56                   	push   esi
c0011f5f:	e8 78 0e 00 00       	call   c0012ddc <UnixFile::getFileDescriptor()>
c0011f64:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	89 02                	mov    DWORD PTR [edx],eax
c0011f6c:	c1 f8 1f             	sar    eax,0x1f
c0011f6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f72:	e9 ba fe ff ff       	jmp    c0011e31 <SysOpen(regs*)+0x90>
c0011f77:	81 c4 04 01 00 00    	add    esp,0x104
c0011f7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f87:	5b                   	pop    ebx
c0011f88:	5e                   	pop    esi
c0011f89:	c3                   	ret    
c0011f8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f8d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011f93:	e9 92 fe ff ff       	jmp    c0011e2a <SysOpen(regs*)+0x89>

c0011f98 <KeSystemCall(regs*, void*)>:
c0011f98:	53                   	push   ebx
c0011f99:	83 ec 08             	sub    esp,0x8
c0011f9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011fa3:	83 f8 48             	cmp    eax,0x48
c0011fa6:	77 16                	ja     c0011fbe <KeSystemCall(regs*, void*)+0x26>
c0011fa8:	8b 14 85 c0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9240]
c0011faf:	85 d2                	test   edx,edx
c0011fb1:	74 0b                	je     c0011fbe <KeSystemCall(regs*, void*)+0x26>
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	53                   	push   ebx
c0011fb7:	ff d2                	call   edx
c0011fb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011fbc:	eb 0d                	jmp    c0011fcb <KeSystemCall(regs*, void*)+0x33>
c0011fbe:	52                   	push   edx
c0011fbf:	52                   	push   edx
c0011fc0:	50                   	push   eax
c0011fc1:	68 22 4b 02 c0       	push   0xc0024b22
c0011fc6:	e8 b1 4f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011fd3:	31 d2                	xor    edx,edx
c0011fd5:	83 c4 08             	add    esp,0x8
c0011fd8:	5b                   	pop    ebx
c0011fd9:	c3                   	ret    

c0011fda <VgaText::isAtty()>:
c0011fda:	b0 01                	mov    al,0x1
c0011fdc:	c3                   	ret    
c0011fdd:	90                   	nop

c0011fde <VgaText::~VgaText()>:
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	ba 8c 4b 02 c0       	mov    edx,0xc0024b8c
c0011fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fea:	89 10                	mov    DWORD PTR [eax],edx
c0011fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ff0:	83 ec 0c             	sub    esp,0xc
c0011ff3:	50                   	push   eax
c0011ff4:	e8 d1 0f 00 00       	call   c0012fca <UnixFile::~UnixFile()>
c0011ff9:	83 c4 10             	add    esp,0x10
c0011ffc:	90                   	nop
c0011ffd:	83 c4 0c             	add    esp,0xc
c0012000:	c3                   	ret    
c0012001:	90                   	nop

c0012002 <VgaText::~VgaText()>:
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001200c:	e8 cd ff ff ff       	call   c0011fde <VgaText::~VgaText()>
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	68 84 01 00 00       	push   0x184
c001201c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012020:	e8 3f b3 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	83 c4 0c             	add    esp,0xc
c001202b:	c3                   	ret    

c001202c <VgaText::read(unsigned long long, void*, int*)>:
c001202c:	83 ec 10             	sub    esp,0x10
c001202f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012033:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001203b:	e8 2f 85 ff ff       	call   c000a56f <readKeyboard(VgaText*, char*, unsigned long)>
c0012040:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012044:	89 02                	mov    DWORD PTR [edx],eax
c0012046:	31 c0                	xor    eax,eax
c0012048:	83 c4 1c             	add    esp,0x1c
c001204b:	c3                   	ret    

c001204c <setTerminalScrollLock(bool)>:
c001204c:	c3                   	ret    

c001204d <doTerminalCycle()>:
c001204d:	c3                   	ret    

c001204e <addToTerminalCycle(VgaText*)>:
c001204e:	c3                   	ret    

c001204f <scrollTerminalScrollLock(int)>:
c001204f:	c3                   	ret    

c0012050 <VgaText::updateTitle()>:
c0012050:	c3                   	ret    
c0012051:	90                   	nop

c0012052 <VgaText::load()>:
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VgaText::updateCursor()>:
c0012054:	83 ec 14             	sub    esp,0x14
c0012057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001205b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001205e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012061:	e8 ea 9c 00 00       	call   c001bd50 <HalConsoleCursorUpdate(int, int)>
c0012066:	83 c4 1c             	add    esp,0x1c
c0012069:	c3                   	ret    

c001206a <VgaText::doANSI_SGR(int)>:
c001206a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001206e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012072:	85 d2                	test   edx,edx
c0012074:	75 0b                	jne    c0012081 <VgaText::doANSI_SGR(int)+0x17>
c0012076:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012079:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001207c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001207f:	eb 59                	jmp    c00120da <VgaText::doANSI_SGR(int)+0x70>
c0012081:	83 fa 07             	cmp    edx,0x7
c0012084:	75 0b                	jne    c0012091 <VgaText::doANSI_SGR(int)+0x27>
c0012086:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012089:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001208c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001208f:	eb 49                	jmp    c00120da <VgaText::doANSI_SGR(int)+0x70>
c0012091:	83 fa 1b             	cmp    edx,0x1b
c0012094:	74 e0                	je     c0012076 <VgaText::doANSI_SGR(int)+0xc>
c0012096:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012099:	83 f9 07             	cmp    ecx,0x7
c001209c:	77 09                	ja     c00120a7 <VgaText::doANSI_SGR(int)+0x3d>
c001209e:	8b 14 8d 20 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90e0]
c00120a5:	eb 20                	jmp    c00120c7 <VgaText::doANSI_SGR(int)+0x5d>
c00120a7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00120aa:	83 f9 07             	cmp    ecx,0x7
c00120ad:	77 09                	ja     c00120b8 <VgaText::doANSI_SGR(int)+0x4e>
c00120af:	8b 14 8d 20 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90e0]
c00120b6:	eb 22                	jmp    c00120da <VgaText::doANSI_SGR(int)+0x70>
c00120b8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00120bb:	83 f9 07             	cmp    ecx,0x7
c00120be:	77 0b                	ja     c00120cb <VgaText::doANSI_SGR(int)+0x61>
c00120c0:	8b 14 95 d8 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9228]
c00120c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120ca:	c3                   	ret    
c00120cb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00120ce:	83 f9 07             	cmp    ecx,0x7
c00120d1:	77 0a                	ja     c00120dd <VgaText::doANSI_SGR(int)+0x73>
c00120d3:	8b 14 95 b0 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9250]
c00120da:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120dd:	c3                   	ret    

c00120de <VgaText::setDefaultBgColour(VgaColour)>:
c00120de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00120e9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120ec:	c3                   	ret    
c00120ed:	90                   	nop

c00120ee <VgaText::setDefaultFgColour(VgaColour)>:
c00120ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00120f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120fc:	c3                   	ret    
c00120fd:	90                   	nop

c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00120fe:	53                   	push   ebx
c00120ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012103:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012107:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001210b:	51                   	push   ecx
c001210c:	e8 cd ff ff ff       	call   c00120de <VgaText::setDefaultBgColour(VgaColour)>
c0012111:	58                   	pop    eax
c0012112:	5a                   	pop    edx
c0012113:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012117:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001211b:	5b                   	pop    ebx
c001211c:	eb d0                	jmp    c00120ee <VgaText::setDefaultFgColour(VgaColour)>

c001211e <VgaText::setTitleTextColour(VgaColour)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012129:	c3                   	ret    

c001212a <VgaText::setTitleColour(VgaColour)>:
c001212a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012132:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012135:	c3                   	ret    

c0012136 <VgaText::setTitle(char*)>:
c0012136:	c3                   	ret    
c0012137:	90                   	nop

c0012138 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012141:	83 e0 0f             	and    eax,0xf
c0012144:	c1 e2 04             	shl    edx,0x4
c0012147:	09 d0                	or     eax,edx
c0012149:	c3                   	ret    

c001214a <VgaText::scrollScreen()>:
c001214a:	55                   	push   ebp
c001214b:	57                   	push   edi
c001214c:	56                   	push   esi
c001214d:	be 01 00 00 00       	mov    esi,0x1
c0012152:	53                   	push   ebx
c0012153:	83 ec 0c             	sub    esp,0xc
c0012156:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001215a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001215d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012163:	31 ff                	xor    edi,edi
c0012165:	01 e9                	add    ecx,ebp
c0012167:	8a 01                	mov    al,BYTE PTR [ecx]
c0012169:	83 fe 18             	cmp    esi,0x18
c001216c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012172:	75 20                	jne    c0012194 <VgaText::scrollScreen()+0x4a>
c0012174:	f7 c7 01 00 00 00    	test   edi,0x1
c001217a:	74 15                	je     c0012191 <VgaText::scrollScreen()+0x47>
c001217c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012180:	50                   	push   eax
c0012181:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012185:	50                   	push   eax
c0012186:	e8 ad ff ff ff       	call   c0012138 <VgaText::combineColours(unsigned char, unsigned char)>
c001218b:	5a                   	pop    edx
c001218c:	5a                   	pop    edx
c001218d:	88 01                	mov    BYTE PTR [ecx],al
c001218f:	eb 03                	jmp    c0012194 <VgaText::scrollScreen()+0x4a>
c0012191:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012194:	47                   	inc    edi
c0012195:	41                   	inc    ecx
c0012196:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001219c:	75 c9                	jne    c0012167 <VgaText::scrollScreen()+0x1d>
c001219e:	46                   	inc    esi
c001219f:	83 fe 19             	cmp    esi,0x19
c00121a2:	75 b9                	jne    c001215d <VgaText::scrollScreen()+0x13>
c00121a4:	39 1d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,ebx
c00121aa:	75 1f                	jne    c00121cb <VgaText::scrollScreen()+0x81>
c00121ac:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00121b0:	74 05                	je     c00121b7 <VgaText::scrollScreen()+0x6d>
c00121b2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00121b5:	eb 14                	jmp    c00121cb <VgaText::scrollScreen()+0x81>
c00121b7:	50                   	push   eax
c00121b8:	50                   	push   eax
c00121b9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00121bd:	50                   	push   eax
c00121be:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00121c2:	50                   	push   eax
c00121c3:	e8 1c 9a 00 00       	call   c001bbe4 <HalConsoleScroll(int, int)>
c00121c8:	83 c4 10             	add    esp,0x10
c00121cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00121cf:	83 c4 0c             	add    esp,0xc
c00121d2:	5b                   	pop    ebx
c00121d3:	5e                   	pop    esi
c00121d4:	5f                   	pop    edi
c00121d5:	5d                   	pop    ebp
c00121d6:	e9 79 fe ff ff       	jmp    c0012054 <VgaText::updateCursor()>
c00121db:	90                   	nop

c00121dc <VgaText::combineCharAndColour(char, unsigned char)>:
c00121dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00121e1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00121e6:	c1 e0 08             	shl    eax,0x8
c00121e9:	09 d0                	or     eax,edx
c00121eb:	c3                   	ret    

c00121ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00121ec:	55                   	push   ebp
c00121ed:	57                   	push   edi
c00121ee:	56                   	push   esi
c00121ef:	53                   	push   ebx
c00121f0:	83 ec 1c             	sub    esp,0x1c
c00121f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121ff:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012202:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012206:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001220a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001220e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012212:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012216:	85 ed                	test   ebp,ebp
c0012218:	75 14                	jne    c001222e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001221a:	c7 44 24 30 36 4b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024b36
c0012222:	83 c4 1c             	add    esp,0x1c
c0012225:	5b                   	pop    ebx
c0012226:	5e                   	pop    esi
c0012227:	5f                   	pop    edi
c0012228:	5d                   	pop    ebp
c0012229:	e9 72 da ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001222e:	50                   	push   eax
c001222f:	50                   	push   eax
c0012230:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012235:	50                   	push   eax
c0012236:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001223b:	50                   	push   eax
c001223c:	e8 f7 fe ff ff       	call   c0012138 <VgaText::combineColours(unsigned char, unsigned char)>
c0012241:	5a                   	pop    edx
c0012242:	0f be c9             	movsx  ecx,cl
c0012245:	5a                   	pop    edx
c0012246:	0f b6 c0             	movzx  eax,al
c0012249:	50                   	push   eax
c001224a:	51                   	push   ecx
c001224b:	e8 8c ff ff ff       	call   c00121dc <VgaText::combineCharAndColour(char, unsigned char)>
c0012250:	6b d6 50             	imul   edx,esi,0x50
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	01 da                	add    edx,ebx
c0012258:	0f b7 d2             	movzx  edx,dx
c001225b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012260:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012266:	75 28                	jne    c0012290 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001226c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012270:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012274:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012278:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001227c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012280:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012284:	83 c4 1c             	add    esp,0x1c
c0012287:	5b                   	pop    ebx
c0012288:	5e                   	pop    esi
c0012289:	5f                   	pop    edi
c001228a:	5d                   	pop    ebp
c001228b:	e9 5c 9a 00 00       	jmp    c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012290:	83 c4 1c             	add    esp,0x1c
c0012293:	5b                   	pop    ebx
c0012294:	5e                   	pop    esi
c0012295:	5f                   	pop    edi
c0012296:	5d                   	pop    ebp
c0012297:	c3                   	ret    

c0012298 <VgaText::getCursorX()>:
c0012298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001229f:	c3                   	ret    

c00122a0 <VgaText::getCursorY()>:
c00122a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122a4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122a7:	c3                   	ret    

c00122a8 <VgaText::setCursor(int, int)>:
c00122a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122b0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00122b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00122ba:	e9 95 fd ff ff       	jmp    c0012054 <VgaText::updateCursor()>

c00122bf <setActiveTerminal(VgaText*)>:
c00122bf:	53                   	push   ebx
c00122c0:	83 ec 08             	sub    esp,0x8
c00122c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122c7:	85 db                	test   ebx,ebx
c00122c9:	75 11                	jne    c00122dc <setActiveTerminal(VgaText*)+0x1d>
c00122cb:	c7 44 24 10 46 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b46
c00122d3:	83 c4 08             	add    esp,0x8
c00122d6:	5b                   	pop    ebx
c00122d7:	e9 c4 d9 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c00122dc:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c00122e1:	85 c0                	test   eax,eax
c00122e3:	74 0c                	je     c00122f1 <setActiveTerminal(VgaText*)+0x32>
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	50                   	push   eax
c00122e9:	e8 66 fd ff ff       	call   c0012054 <VgaText::updateCursor()>
c00122ee:	83 c4 10             	add    esp,0x10
c00122f1:	89 1d f4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1f4,ebx
c00122f7:	50                   	push   eax
c00122f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122fb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122fe:	53                   	push   ebx
c00122ff:	e8 a4 ff ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c0012304:	83 c4 18             	add    esp,0x18
c0012307:	5b                   	pop    ebx
c0012308:	c3                   	ret    
c0012309:	90                   	nop

c001230a <VgaText::clearScreen()>:
c001230a:	57                   	push   edi
c001230b:	56                   	push   esi
c001230c:	31 f6                	xor    esi,esi
c001230e:	53                   	push   ebx
c001230f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012313:	52                   	push   edx
c0012314:	6a 00                	push   0x0
c0012316:	6a 00                	push   0x0
c0012318:	53                   	push   ebx
c0012319:	e8 8a ff ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c001231e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001232b:	7e 20                	jle    c001234d <VgaText::clearScreen()+0x43>
c001232d:	31 ff                	xor    edi,edi
c001232f:	50                   	push   eax
c0012330:	50                   	push   eax
c0012331:	56                   	push   esi
c0012332:	57                   	push   edi
c0012333:	47                   	inc    edi
c0012334:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012337:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001233a:	6a 20                	push   0x20
c001233c:	53                   	push   ebx
c001233d:	e8 aa fe ff ff       	call   c00121ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012342:	83 c4 20             	add    esp,0x20
c0012345:	83 ff 50             	cmp    edi,0x50
c0012348:	75 e5                	jne    c001232f <VgaText::clearScreen()+0x25>
c001234a:	46                   	inc    esi
c001234b:	eb db                	jmp    c0012328 <VgaText::clearScreen()+0x1e>
c001234d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012354:	5b                   	pop    ebx
c0012355:	5e                   	pop    esi
c0012356:	5f                   	pop    edi
c0012357:	c3                   	ret    

c0012358 <VgaText::setCursorX(int)>:
c0012358:	83 ec 10             	sub    esp,0x10
c001235b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001235f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012366:	50                   	push   eax
c0012367:	e8 3c ff ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c001236c:	83 c4 1c             	add    esp,0x1c
c001236f:	c3                   	ret    

c0012370 <VgaText::setCursorY(int)>:
c0012370:	83 ec 10             	sub    esp,0x10
c0012373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001237b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001237e:	50                   	push   eax
c001237f:	e8 24 ff ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c0012384:	83 c4 1c             	add    esp,0x1c
c0012387:	c3                   	ret    

c0012388 <VgaText::incrementCursor(bool)>:
c0012388:	56                   	push   esi
c0012389:	53                   	push   ebx
c001238a:	51                   	push   ecx
c001238b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001238f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012393:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012396:	40                   	inc    eax
c0012397:	83 f8 50             	cmp    eax,0x50
c001239a:	74 05                	je     c00123a1 <VgaText::incrementCursor(bool)+0x19>
c001239c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001239f:	eb 24                	jmp    c00123c5 <VgaText::incrementCursor(bool)+0x3d>
c00123a1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00123ab:	8d 50 01             	lea    edx,[eax+0x1]
c00123ae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00123b1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00123b4:	75 0f                	jne    c00123c5 <VgaText::incrementCursor(bool)+0x3d>
c00123b6:	83 ec 0c             	sub    esp,0xc
c00123b9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00123bc:	53                   	push   ebx
c00123bd:	e8 88 fd ff ff       	call   c001214a <VgaText::scrollScreen()>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	89 f0                	mov    eax,esi
c00123c7:	84 c0                	test   al,al
c00123c9:	74 0c                	je     c00123d7 <VgaText::incrementCursor(bool)+0x4f>
c00123cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123cf:	5a                   	pop    edx
c00123d0:	5b                   	pop    ebx
c00123d1:	5e                   	pop    esi
c00123d2:	e9 7d fc ff ff       	jmp    c0012054 <VgaText::updateCursor()>
c00123d7:	58                   	pop    eax
c00123d8:	5b                   	pop    ebx
c00123d9:	5e                   	pop    esi
c00123da:	c3                   	ret    
c00123db:	90                   	nop

c00123dc <VgaText::decrementCursor(bool)>:
c00123dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00123e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123e4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00123e7:	85 c0                	test   eax,eax
c00123e9:	74 04                	je     c00123ef <VgaText::decrementCursor(bool)+0x13>
c00123eb:	48                   	dec    eax
c00123ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00123ef:	84 c9                	test   cl,cl
c00123f1:	74 09                	je     c00123fc <VgaText::decrementCursor(bool)+0x20>
c00123f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00123f7:	e9 58 fc ff ff       	jmp    c0012054 <VgaText::updateCursor()>
c00123fc:	c3                   	ret    
c00123fd:	90                   	nop

c00123fe <VgaText::putchar(char, VgaColour, VgaColour)>:
c00123fe:	53                   	push   ebx
c00123ff:	83 ec 08             	sub    esp,0x8
c0012402:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001240b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001240f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012413:	83 f8 07             	cmp    eax,0x7
c0012416:	75 21                	jne    c0012439 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012418:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012420:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012428:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012430:	83 c4 08             	add    esp,0x8
c0012433:	5b                   	pop    ebx
c0012434:	e9 f2 65 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012439:	83 f8 0d             	cmp    eax,0xd
c001243c:	75 09                	jne    c0012447 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001243e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012445:	eb 2d                	jmp    c0012474 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012447:	83 f8 0a             	cmp    eax,0xa
c001244a:	75 31                	jne    c001247d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001244c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001244f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012456:	8d 50 01             	lea    edx,[eax+0x1]
c0012459:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001245c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001245f:	75 0f                	jne    c0012470 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012467:	53                   	push   ebx
c0012468:	e8 dd fc ff ff       	call   c001214a <VgaText::scrollScreen()>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012474:	83 c4 08             	add    esp,0x8
c0012477:	5b                   	pop    ebx
c0012478:	e9 d7 fb ff ff       	jmp    c0012054 <VgaText::updateCursor()>
c001247d:	83 f8 08             	cmp    eax,0x8
c0012480:	75 25                	jne    c00124a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012482:	50                   	push   eax
c0012483:	50                   	push   eax
c0012484:	6a 01                	push   0x1
c0012486:	53                   	push   ebx
c0012487:	e8 50 ff ff ff       	call   c00123dc <VgaText::decrementCursor(bool)>
c001248c:	5a                   	pop    edx
c001248d:	59                   	pop    ecx
c001248e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012491:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012494:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012497:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001249a:	6a 20                	push   0x20
c001249c:	53                   	push   ebx
c001249d:	e8 4a fd ff ff       	call   c00121ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124a2:	83 c4 28             	add    esp,0x28
c00124a5:	5b                   	pop    ebx
c00124a6:	c3                   	ret    
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124ad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124b0:	51                   	push   ecx
c00124b1:	52                   	push   edx
c00124b2:	50                   	push   eax
c00124b3:	53                   	push   ebx
c00124b4:	e8 33 fd ff ff       	call   c00121ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124b9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00124bd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00124c5:	83 c4 28             	add    esp,0x28
c00124c8:	5b                   	pop    ebx
c00124c9:	e9 ba fe ff ff       	jmp    c0012388 <VgaText::incrementCursor(bool)>

c00124ce <VgaText::putchar(char)>:
c00124ce:	57                   	push   edi
c00124cf:	56                   	push   esi
c00124d0:	53                   	push   ebx
c00124d1:	83 ec 10             	sub    esp,0x10
c00124d4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00124dc:	89 f8                	mov    eax,edi
c00124de:	0f be c0             	movsx  eax,al
c00124e1:	83 f8 5b             	cmp    eax,0x5b
c00124e4:	75 18                	jne    c00124fe <VgaText::putchar(char)+0x30>
c00124e6:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00124ea:	74 20                	je     c001250c <VgaText::putchar(char)+0x3e>
c00124ec:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00124f2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00124f9:	e9 c1 00 00 00       	jmp    c00125bf <VgaText::putchar(char)+0xf1>
c00124fe:	83 f8 1b             	cmp    eax,0x1b
c0012501:	75 09                	jne    c001250c <VgaText::putchar(char)+0x3e>
c0012503:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012507:	e9 b3 00 00 00       	jmp    c00125bf <VgaText::putchar(char)+0xf1>
c001250c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001250f:	84 c9                	test   cl,cl
c0012511:	0f 84 98 00 00 00    	je     c00125af <VgaText::putchar(char)+0xe1>
c0012517:	8d 77 c0             	lea    esi,[edi-0x40]
c001251a:	89 f2                	mov    edx,esi
c001251c:	80 fa 3e             	cmp    dl,0x3e
c001251f:	77 78                	ja     c0012599 <VgaText::putchar(char)+0xcb>
c0012521:	83 f8 6d             	cmp    eax,0x6d
c0012524:	75 47                	jne    c001256d <VgaText::putchar(char)+0x9f>
c0012526:	31 f6                	xor    esi,esi
c0012528:	31 d2                	xor    edx,edx
c001252a:	31 c0                	xor    eax,eax
c001252c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001252f:	7e 2d                	jle    c001255e <VgaText::putchar(char)+0x90>
c0012531:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012536:	83 fa 3b             	cmp    edx,0x3b
c0012539:	75 17                	jne    c0012552 <VgaText::putchar(char)+0x84>
c001253b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001253f:	50                   	push   eax
c0012540:	53                   	push   ebx
c0012541:	e8 24 fb ff ff       	call   c001206a <VgaText::doANSI_SGR(int)>
c0012546:	59                   	pop    ecx
c0012547:	31 d2                	xor    edx,edx
c0012549:	5f                   	pop    edi
c001254a:	31 c0                	xor    eax,eax
c001254c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012550:	eb 09                	jmp    c001255b <VgaText::putchar(char)+0x8d>
c0012552:	6b c0 0a             	imul   eax,eax,0xa
c0012555:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012559:	88 ca                	mov    dl,cl
c001255b:	46                   	inc    esi
c001255c:	eb ce                	jmp    c001252c <VgaText::putchar(char)+0x5e>
c001255e:	84 d2                	test   dl,dl
c0012560:	74 2f                	je     c0012591 <VgaText::putchar(char)+0xc3>
c0012562:	50                   	push   eax
c0012563:	53                   	push   ebx
c0012564:	e8 01 fb ff ff       	call   c001206a <VgaText::doANSI_SGR(int)>
c0012569:	58                   	pop    eax
c001256a:	5a                   	pop    edx
c001256b:	eb 24                	jmp    c0012591 <VgaText::putchar(char)+0xc3>
c001256d:	83 f8 4a             	cmp    eax,0x4a
c0012570:	75 1f                	jne    c0012591 <VgaText::putchar(char)+0xc3>
c0012572:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012576:	75 19                	jne    c0012591 <VgaText::putchar(char)+0xc3>
c0012578:	83 ec 0c             	sub    esp,0xc
c001257b:	53                   	push   ebx
c001257c:	e8 89 fd ff ff       	call   c001230a <VgaText::clearScreen()>
c0012581:	83 c4 0c             	add    esp,0xc
c0012584:	6a 00                	push   0x0
c0012586:	6a 00                	push   0x0
c0012588:	53                   	push   ebx
c0012589:	e8 1a fd ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c001258e:	83 c4 10             	add    esp,0x10
c0012591:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012597:	eb 26                	jmp    c00125bf <VgaText::putchar(char)+0xf1>
c0012599:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001259c:	83 f8 0e             	cmp    eax,0xe
c001259f:	7f 1e                	jg     c00125bf <VgaText::putchar(char)+0xf1>
c00125a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00125a4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00125a7:	89 f9                	mov    ecx,edi
c00125a9:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00125ad:	eb 10                	jmp    c00125bf <VgaText::putchar(char)+0xf1>
c00125af:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125b2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125b5:	50                   	push   eax
c00125b6:	53                   	push   ebx
c00125b7:	e8 42 fe ff ff       	call   c00123fe <VgaText::putchar(char, VgaColour, VgaColour)>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	5b                   	pop    ebx
c00125c3:	5e                   	pop    esi
c00125c4:	5f                   	pop    edi
c00125c5:	c3                   	ret    

c00125c6 <VgaText::putx(unsigned int)>:
c00125c6:	57                   	push   edi
c00125c7:	b9 11 00 00 00       	mov    ecx,0x11
c00125cc:	56                   	push   esi
c00125cd:	be cf 33 02 c0       	mov    esi,0xc00233cf
c00125d2:	53                   	push   ebx
c00125d3:	83 ec 20             	sub    esp,0x20
c00125d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00125da:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125de:	fc                   	cld    
c00125df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125e1:	be 08 00 00 00       	mov    esi,0x8
c00125e6:	50                   	push   eax
c00125e7:	50                   	push   eax
c00125e8:	89 d8                	mov    eax,ebx
c00125ea:	c1 e3 04             	shl    ebx,0x4
c00125ed:	c1 e8 1c             	shr    eax,0x1c
c00125f0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00125f5:	50                   	push   eax
c00125f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125fa:	e8 cf fe ff ff       	call   c00124ce <VgaText::putchar(char)>
c00125ff:	83 c4 10             	add    esp,0x10
c0012602:	4e                   	dec    esi
c0012603:	75 e1                	jne    c00125e6 <VgaText::putx(unsigned int)+0x20>
c0012605:	83 c4 20             	add    esp,0x20
c0012608:	5b                   	pop    ebx
c0012609:	5e                   	pop    esi
c001260a:	5f                   	pop    edi
c001260b:	c3                   	ret    

c001260c <VgaText::puts(char const*)>:
c001260c:	53                   	push   ebx
c001260d:	83 ec 08             	sub    esp,0x8
c0012610:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012614:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012617:	85 c0                	test   eax,eax
c0012619:	74 12                	je     c001262d <VgaText::puts(char const*)+0x21>
c001261b:	43                   	inc    ebx
c001261c:	51                   	push   ecx
c001261d:	51                   	push   ecx
c001261e:	50                   	push   eax
c001261f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012623:	e8 a6 fe ff ff       	call   c00124ce <VgaText::putchar(char)>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	eb e7                	jmp    c0012614 <VgaText::puts(char const*)+0x8>
c001262d:	83 c4 08             	add    esp,0x8
c0012630:	5b                   	pop    ebx
c0012631:	c3                   	ret    

c0012632 <VgaText::write(unsigned long long, void*, int*)>:
c0012632:	55                   	push   ebp
c0012633:	57                   	push   edi
c0012634:	56                   	push   esi
c0012635:	53                   	push   ebx
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001263d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012641:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012645:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001264c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001264f:	39 eb                	cmp    ebx,ebp
c0012651:	74 13                	je     c0012666 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012653:	43                   	inc    ebx
c0012654:	50                   	push   eax
c0012655:	50                   	push   eax
c0012656:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001265a:	50                   	push   eax
c001265b:	56                   	push   esi
c001265c:	e8 6d fe ff ff       	call   c00124ce <VgaText::putchar(char)>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	eb e9                	jmp    c001264f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012666:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001266d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012671:	89 38                	mov    DWORD PTR [eax],edi
c0012673:	83 c4 0c             	add    esp,0xc
c0012676:	31 c0                	xor    eax,eax
c0012678:	5b                   	pop    ebx
c0012679:	5e                   	pop    esi
c001267a:	5f                   	pop    edi
c001267b:	5d                   	pop    ebp
c001267c:	c3                   	ret    
c001267d:	90                   	nop

c001267e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001267e:	55                   	push   ebp
c001267f:	57                   	push   edi
c0012680:	56                   	push   esi
c0012681:	53                   	push   ebx
c0012682:	83 ec 1c             	sub    esp,0x1c
c0012685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012689:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001268d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012691:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012694:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012698:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001269c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a0:	85 db                	test   ebx,ebx
c00126a2:	75 14                	jne    c00126b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00126a4:	c7 44 24 30 54 4b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024b54
c00126ac:	83 c4 1c             	add    esp,0x1c
c00126af:	5b                   	pop    ebx
c00126b0:	5e                   	pop    esi
c00126b1:	5f                   	pop    edi
c00126b2:	5d                   	pop    ebp
c00126b3:	e9 e8 d5 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c00126b8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00126bf:	50                   	push   eax
c00126c0:	50                   	push   eax
c00126c1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00126c6:	50                   	push   eax
c00126c7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00126cc:	50                   	push   eax
c00126cd:	e8 66 fa ff ff       	call   c0012138 <VgaText::combineColours(unsigned char, unsigned char)>
c00126d2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00126dc:	0f b6 e8             	movzx  ebp,al
c00126df:	0f b7 c9             	movzx  ecx,cx
c00126e2:	01 c9                	add    ecx,ecx
c00126e4:	01 cb                	add    ebx,ecx
c00126e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126e9:	85 c0                	test   eax,eax
c00126eb:	0f 84 ef 00 00 00    	je     c00127e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00126f1:	83 f8 0d             	cmp    eax,0xd
c00126f4:	75 0c                	jne    c0012702 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00126f6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00126fd:	e9 d8 00 00 00       	jmp    c00127da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012702:	83 f8 0a             	cmp    eax,0xa
c0012705:	75 44                	jne    c001274b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012707:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001270a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012711:	8d 48 01             	lea    ecx,[eax+0x1]
c0012714:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012717:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001271a:	75 0f                	jne    c001272b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012722:	57                   	push   edi
c0012723:	e8 22 fa ff ff       	call   c001214a <VgaText::scrollScreen()>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	83 ec 0c             	sub    esp,0xc
c001272e:	57                   	push   edi
c001272f:	e8 20 f9 ff ff       	call   c0012054 <VgaText::updateCursor()>
c0012734:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012738:	83 c4 10             	add    esp,0x10
c001273b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001273e:	0f b7 db             	movzx  ebx,bx
c0012741:	01 db                	add    ebx,ebx
c0012743:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012746:	e9 8f 00 00 00       	jmp    c00127da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001274b:	83 f8 08             	cmp    eax,0x8
c001274e:	75 34                	jne    c0012784 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012750:	51                   	push   ecx
c0012751:	51                   	push   ecx
c0012752:	6a 01                	push   0x1
c0012754:	57                   	push   edi
c0012755:	e8 82 fc ff ff       	call   c00123dc <VgaText::decrementCursor(bool)>
c001275a:	5b                   	pop    ebx
c001275b:	58                   	pop    eax
c001275c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001275f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012762:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012765:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012768:	6a 20                	push   0x20
c001276a:	57                   	push   edi
c001276b:	e8 7c fa ff ff       	call   c00121ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012770:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012774:	83 c4 20             	add    esp,0x20
c0012777:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001277a:	0f b7 db             	movzx  ebx,bx
c001277d:	01 db                	add    ebx,ebx
c001277f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012782:	eb 56                	jmp    c00127da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012784:	52                   	push   edx
c0012785:	52                   	push   edx
c0012786:	55                   	push   ebp
c0012787:	50                   	push   eax
c0012788:	e8 4f fa ff ff       	call   c00121dc <VgaText::combineCharAndColour(char, unsigned char)>
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	66 89 03             	mov    WORD PTR [ebx],ax
c0012793:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012799:	75 1d                	jne    c00127b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001279b:	83 ec 0c             	sub    esp,0xc
c001279e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00127a1:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00127a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127af:	50                   	push   eax
c00127b0:	e8 37 95 00 00       	call   c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>
c00127b5:	83 c4 20             	add    esp,0x20
c00127b8:	83 c3 02             	add    ebx,0x2
c00127bb:	50                   	push   eax
c00127bc:	50                   	push   eax
c00127bd:	6a 00                	push   0x0
c00127bf:	57                   	push   edi
c00127c0:	e8 c3 fb ff ff       	call   c0012388 <VgaText::incrementCursor(bool)>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00127cc:	75 0c                	jne    c00127da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127ce:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00127d2:	0f b7 db             	movzx  ebx,bx
c00127d5:	01 db                	add    ebx,ebx
c00127d7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00127da:	46                   	inc    esi
c00127db:	e9 06 ff ff ff       	jmp    c00126e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	57                   	push   edi
c00127e4:	e8 6b f8 ff ff       	call   c0012054 <VgaText::updateCursor()>
c00127e9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00127f0:	83 c4 2c             	add    esp,0x2c
c00127f3:	5b                   	pop    ebx
c00127f4:	5e                   	pop    esi
c00127f5:	5f                   	pop    edi
c00127f6:	5d                   	pop    ebp
c00127f7:	c3                   	ret    

c00127f8 <VgaText::VgaText(char const*)>:
c00127f8:	56                   	push   esi
c00127f9:	53                   	push   ebx
c00127fa:	83 ec 04             	sub    esp,0x4
c00127fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012801:	83 ec 08             	sub    esp,0x8
c0012804:	6a 00                	push   0x0
c0012806:	50                   	push   eax
c0012807:	e8 d8 05 00 00       	call   c0012de4 <UnixFile::UnixFile(int)>
c001280c:	83 c4 10             	add    esp,0x10
c001280f:	ba 8c 4b 02 c0       	mov    edx,0xc0024b8c
c0012814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012818:	89 10                	mov    DWORD PTR [eax],edx
c001281a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012829:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012834:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012844:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001284b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012865:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	68 64 4b 02 c0       	push   0xc0024b64
c0012874:	e8 03 47 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012880:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012887:	83 ec 0c             	sub    esp,0xc
c001288a:	6a 01                	push   0x1
c001288c:	e8 a6 09 00 00       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	89 c2                	mov    edx,eax
c0012896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001289d:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c00128a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128aa:	89 c6                	mov    esi,eax
c00128ac:	e8 e3 d5 ff ff       	call   c000fe94 <Phys::allocatePage()>
c00128b1:	68 05 0c 00 00       	push   0xc05
c00128b6:	56                   	push   esi
c00128b7:	50                   	push   eax
c00128b8:	53                   	push   ebx
c00128b9:	e8 5c 10 00 00       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c8:	83 ec 04             	sub    esp,0x4
c00128cb:	68 a0 0f 00 00       	push   0xfa0
c00128d0:	6a 00                	push   0x0
c00128d2:	50                   	push   eax
c00128d3:	e8 18 dc fe ff       	call   c00004f0 <memset>
c00128d8:	83 c4 10             	add    esp,0x10
c00128db:	83 ec 04             	sub    esp,0x4
c00128de:	6a 00                	push   0x0
c00128e0:	6a 07                	push   0x7
c00128e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e6:	e8 13 f8 ff ff       	call   c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	83 ec 04             	sub    esp,0x4
c00128f1:	6a 00                	push   0x0
c00128f3:	6a 00                	push   0x0
c00128f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128f9:	e8 aa f9 ff ff       	call   c00122a8 <VgaText::setCursor(int, int)>
c00128fe:	83 c4 10             	add    esp,0x10
c0012901:	83 ec 0c             	sub    esp,0xc
c0012904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012908:	e8 fd f9 ff ff       	call   c001230a <VgaText::clearScreen()>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012914:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291c:	05 82 00 00 00       	add    eax,0x82
c0012921:	83 ec 04             	sub    esp,0x4
c0012924:	68 80 00 00 00       	push   0x80
c0012929:	6a 00                	push   0x0
c001292b:	50                   	push   eax
c001292c:	e8 bf db fe ff       	call   c00004f0 <memset>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012938:	05 02 01 00 00       	add    eax,0x102
c001293d:	83 ec 04             	sub    esp,0x4
c0012940:	68 80 00 00 00       	push   0x80
c0012945:	6a 00                	push   0x0
c0012947:	50                   	push   eax
c0012948:	e8 a3 db fe ff       	call   c00004f0 <memset>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	90                   	nop
c0012951:	83 c4 04             	add    esp,0x4
c0012954:	5b                   	pop    ebx
c0012955:	5e                   	pop    esi
c0012956:	c3                   	ret    
c0012957:	90                   	nop

c0012958 <VgaText::receiveKey(unsigned char)>:
c0012958:	55                   	push   ebp
c0012959:	57                   	push   edi
c001295a:	56                   	push   esi
c001295b:	53                   	push   ebx
c001295c:	83 ec 2c             	sub    esp,0x2c
c001295f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012963:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012967:	89 ef                	mov    edi,ebp
c0012969:	81 e7 ff 00 00 00    	and    edi,0xff
c001296f:	0f 84 66 01 00 00    	je     c0012adb <VgaText::receiveKey(unsigned char)+0x183>
c0012975:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001297b:	83 ff 08             	cmp    edi,0x8
c001297e:	75 73                	jne    c00129f3 <VgaText::receiveKey(unsigned char)+0x9b>
c0012980:	83 ec 0c             	sub    esp,0xc
c0012983:	56                   	push   esi
c0012984:	e8 e7 db fe ff       	call   c0000570 <strlen>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	85 c0                	test   eax,eax
c001298e:	0f 84 02 01 00 00    	je     c0012a96 <VgaText::receiveKey(unsigned char)+0x13e>
c0012994:	50                   	push   eax
c0012995:	50                   	push   eax
c0012996:	6a 08                	push   0x8
c0012998:	53                   	push   ebx
c0012999:	e8 30 fb ff ff       	call   c00124ce <VgaText::putchar(char)>
c001299e:	89 34 24             	mov    DWORD PTR [esp],esi
c00129a1:	e8 ca db fe ff       	call   c0000570 <strlen>
c00129a6:	83 c4 10             	add    esp,0x10
c00129a9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00129b1:	83 fa 0d             	cmp    edx,0xd
c00129b4:	89 d0                	mov    eax,edx
c00129b6:	0f 95 c1             	setne  cl
c00129b9:	83 fa 1f             	cmp    edx,0x1f
c00129bc:	0f 9e c2             	setle  dl
c00129bf:	0f b6 d2             	movzx  edx,dl
c00129c2:	85 ca                	test   edx,ecx
c00129c4:	74 17                	je     c00129dd <VgaText::receiveKey(unsigned char)+0x85>
c00129c6:	83 e8 08             	sub    eax,0x8
c00129c9:	3c 02                	cmp    al,0x2
c00129cb:	76 10                	jbe    c00129dd <VgaText::receiveKey(unsigned char)+0x85>
c00129cd:	55                   	push   ebp
c00129ce:	55                   	push   ebp
c00129cf:	68 77 4b 02 c0       	push   0xc0024b77
c00129d4:	53                   	push   ebx
c00129d5:	e8 32 fc ff ff       	call   c001260c <VgaText::puts(char const*)>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	56                   	push   esi
c00129e1:	e8 8a db fe ff       	call   c0000570 <strlen>
c00129e6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00129ee:	e9 a0 00 00 00       	jmp    c0012a93 <VgaText::receiveKey(unsigned char)+0x13b>
c00129f3:	83 ec 0c             	sub    esp,0xc
c00129f6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00129fc:	50                   	push   eax
c00129fd:	e8 6e db fe ff       	call   c0000570 <strlen>
c0012a02:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a09:	e8 62 db fe ff       	call   c0000570 <strlen>
c0012a0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a12:	83 c4 10             	add    esp,0x10
c0012a15:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012a19:	3d 80 00 00 00       	cmp    eax,0x80
c0012a1e:	0f 87 b7 00 00 00    	ja     c0012adb <VgaText::receiveKey(unsigned char)+0x183>
c0012a24:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012a27:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012a2a:	3c 1e                	cmp    al,0x1e
c0012a2c:	0f 96 c0             	setbe  al
c0012a2f:	80 fa 01             	cmp    dl,0x1
c0012a32:	0f 97 c2             	seta   dl
c0012a35:	0f b6 d2             	movzx  edx,dl
c0012a38:	85 c2                	test   edx,eax
c0012a3a:	74 2e                	je     c0012a6a <VgaText::receiveKey(unsigned char)+0x112>
c0012a3c:	83 ff 0d             	cmp    edi,0xd
c0012a3f:	74 29                	je     c0012a6a <VgaText::receiveKey(unsigned char)+0x112>
c0012a41:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a44:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a47:	68 7d 4b 02 c0       	push   0xc0024b7d
c0012a4c:	53                   	push   ebx
c0012a4d:	e8 2c fc ff ff       	call   c001267e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012a52:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a55:	8d 45 40             	lea    eax,[ebp+0x40]
c0012a58:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a5b:	0f b6 c0             	movzx  eax,al
c0012a5e:	50                   	push   eax
c0012a5f:	53                   	push   ebx
c0012a60:	e8 99 f9 ff ff       	call   c00123fe <VgaText::putchar(char, VgaColour, VgaColour)>
c0012a65:	83 c4 20             	add    esp,0x20
c0012a68:	eb 11                	jmp    c0012a7b <VgaText::receiveKey(unsigned char)+0x123>
c0012a6a:	89 e8                	mov    eax,ebp
c0012a6c:	51                   	push   ecx
c0012a6d:	0f be c0             	movsx  eax,al
c0012a70:	51                   	push   ecx
c0012a71:	50                   	push   eax
c0012a72:	53                   	push   ebx
c0012a73:	e8 56 fa ff ff       	call   c00124ce <VgaText::putchar(char)>
c0012a78:	83 c4 10             	add    esp,0x10
c0012a7b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012a80:	89 e8                	mov    eax,ebp
c0012a82:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012a86:	52                   	push   edx
c0012a87:	52                   	push   edx
c0012a88:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012a8c:	50                   	push   eax
c0012a8d:	56                   	push   esi
c0012a8e:	e8 ad dd fe ff       	call   c0000840 <strcat>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012a9c:	b0 01                	mov    al,0x1
c0012a9e:	83 ff 1c             	cmp    edi,0x1c
c0012aa1:	77 0e                	ja     c0012ab1 <VgaText::receiveKey(unsigned char)+0x159>
c0012aa3:	b8 08 04 00 10       	mov    eax,0x10000408
c0012aa8:	89 f9                	mov    ecx,edi
c0012aaa:	d3 e8                	shr    eax,cl
c0012aac:	f7 d0                	not    eax
c0012aae:	83 e0 01             	and    eax,0x1
c0012ab1:	84 c0                	test   al,al
c0012ab3:	74 04                	je     c0012ab9 <VgaText::receiveKey(unsigned char)+0x161>
c0012ab5:	84 d2                	test   dl,dl
c0012ab7:	74 22                	je     c0012adb <VgaText::receiveKey(unsigned char)+0x183>
c0012ab9:	81 c3 02 01 00 00    	add    ebx,0x102
c0012abf:	50                   	push   eax
c0012ac0:	50                   	push   eax
c0012ac1:	56                   	push   esi
c0012ac2:	53                   	push   ebx
c0012ac3:	e8 78 dd fe ff       	call   c0000840 <strcat>
c0012ac8:	83 c4 0c             	add    esp,0xc
c0012acb:	68 80 00 00 00       	push   0x80
c0012ad0:	6a 00                	push   0x0
c0012ad2:	56                   	push   esi
c0012ad3:	e8 18 da fe ff       	call   c00004f0 <memset>
c0012ad8:	83 c4 10             	add    esp,0x10
c0012adb:	83 c4 2c             	add    esp,0x2c
c0012ade:	5b                   	pop    ebx
c0012adf:	5e                   	pop    esi
c0012ae0:	5f                   	pop    edi
c0012ae1:	5d                   	pop    ebp
c0012ae2:	c3                   	ret    
c0012ae3:	90                   	nop

c0012ae4 <VgaText::doUpdate()>:
c0012ae4:	c3                   	ret    
c0012ae5:	66 90                	xchg   ax,ax
c0012ae7:	90                   	nop

c0012ae8 <TSS::TSS()>:
c0012ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012af3:	90                   	nop
c0012af4:	c3                   	ret    
c0012af5:	90                   	nop
c0012af6:	66 90                	xchg   ax,ax

c0012af8 <TSS::setESP(unsigned long)>:
c0012af8:	55                   	push   ebp
c0012af9:	89 e5                	mov    ebp,esp
c0012afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012afe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b07:	90                   	nop
c0012b08:	5d                   	pop    ebp
c0012b09:	c3                   	ret    
c0012b0a:	66 90                	xchg   ax,ax

c0012b0c <TSS::flush()>:
c0012b0c:	55                   	push   ebp
c0012b0d:	89 e5                	mov    ebp,esp
c0012b0f:	83 ec 10             	sub    esp,0x10
c0012b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b17:	83 c8 03             	or     eax,0x3
c0012b1a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012b1e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012b22:	66 89 d0             	mov    ax,dx
c0012b25:	0f 00 d8             	ltr    ax
c0012b28:	90                   	nop
c0012b29:	c9                   	leave  
c0012b2a:	c3                   	ret    
c0012b2b:	90                   	nop

c0012b2c <TSS::setup(unsigned long, unsigned long)>:
c0012b2c:	55                   	push   ebp
c0012b2d:	89 e5                	mov    ebp,esp
c0012b2f:	83 ec 18             	sub    esp,0x18
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	6a 68                	push   0x68
c0012b37:	e8 0f cd ff ff       	call   c000f84b <malloc>
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	89 c2                	mov    edx,eax
c0012b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b4d:	83 ec 08             	sub    esp,0x8
c0012b50:	50                   	push   eax
c0012b51:	68 a0 4b 02 c0       	push   0xc0024ba0
c0012b56:	e8 21 44 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012b5b:	83 c4 10             	add    esp,0x10
c0012b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b64:	83 ec 04             	sub    esp,0x4
c0012b67:	6a 68                	push   0x68
c0012b69:	6a 00                	push   0x0
c0012b6b:	50                   	push   eax
c0012b6c:	e8 7f d9 fe ff       	call   c00004f0 <memset>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b7a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b86:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b9e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012baa:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bb6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bc2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bce:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bda:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012be6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012be9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012bf5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bfe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012c05:	83 ec 0c             	sub    esp,0xc
c0012c08:	68 b7 4b 02 c0       	push   0xc0024bb7
c0012c0d:	e8 6a 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c1b:	0f 20 da             	mov    edx,cr3
c0012c1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012c21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012c24:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	68 ba 4b 02 c0       	push   0xc0024bba
c0012c2f:	e8 48 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c3d:	83 ec 08             	sub    esp,0x8
c0012c40:	50                   	push   eax
c0012c41:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c44:	50                   	push   eax
c0012c45:	e8 66 bc ff ff       	call   c000e8b0 <GDTEntry::setBase(unsigned int)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	83 ec 08             	sub    esp,0x8
c0012c50:	6a 68                	push   0x68
c0012c52:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c55:	50                   	push   eax
c0012c56:	e8 71 bc ff ff       	call   c000e8cc <GDTEntry::setLimit(unsigned int)>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012c62:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c65:	83 e0 0f             	and    eax,0xf
c0012c68:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c6b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c6e:	83 c8 40             	or     eax,0x40
c0012c71:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c74:	83 ec 0c             	sub    esp,0xc
c0012c77:	68 bd 4b 02 c0       	push   0xc0024bbd
c0012c7c:	e8 fb 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012c89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c8f:	83 ec 08             	sub    esp,0x8
c0012c92:	50                   	push   eax
c0012c93:	68 c0 4b 02 c0       	push   0xc0024bc0
c0012c98:	e8 df 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012ca5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012cab:	05 64 01 00 00       	add    eax,0x164
c0012cb0:	83 ec 04             	sub    esp,0x4
c0012cb3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012cb6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012cb9:	50                   	push   eax
c0012cba:	e8 41 bc ff ff       	call   c000e900 <GDT::addEntry(GDTEntry)>
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	89 c2                	mov    edx,eax
c0012cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cc7:	89 10                	mov    DWORD PTR [eax],edx
c0012cc9:	83 ec 0c             	sub    esp,0xc
c0012ccc:	68 d5 4b 02 c0       	push   0xc0024bd5
c0012cd1:	e8 a6 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012cde:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ce4:	05 64 01 00 00       	add    eax,0x164
c0012ce9:	83 ec 0c             	sub    esp,0xc
c0012cec:	50                   	push   eax
c0012ced:	e8 38 bc ff ff       	call   c000e92a <GDT::flush()>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	83 ec 0c             	sub    esp,0xc
c0012cf8:	68 d8 4b 02 c0       	push   0xc0024bd8
c0012cfd:	e8 7a 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d0a:	c9                   	leave  
c0012d0b:	c3                   	ret    

c0012d0c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d17:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d1c:	75 08                	jne    c0012d26 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012d1e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d24:	eb 38                	jmp    c0012d5e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012d26:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012d2b:	75 17                	jne    c0012d44 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012d2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012d35:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012d3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d41:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012d44:	89 c1                	mov    ecx,eax
c0012d46:	83 e1 fd             	and    ecx,0xfffffffd
c0012d49:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012d4f:	74 cd                	je     c0012d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d51:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d56:	83 e0 ef             	and    eax,0xffffffef
c0012d59:	83 f8 08             	cmp    eax,0x8
c0012d5c:	76 c0                	jbe    c0012d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d5e:	31 c0                	xor    eax,eax
c0012d60:	c3                   	ret    
c0012d61:	90                   	nop

c0012d62 <ReservedFilename::isAtty()>:
c0012d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d69:	31 c0                	xor    eax,eax
c0012d6b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012d71:	74 09                	je     c0012d7c <ReservedFilename::isAtty()+0x1a>
c0012d73:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012d79:	0f 94 c0             	sete   al
c0012d7c:	c3                   	ret    
c0012d7d:	90                   	nop

c0012d7e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d92:	75 08                	jne    c0012d9c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012d94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d9a:	eb 3d                	jmp    c0012dd9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012d9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012da1:	75 17                	jne    c0012dba <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012da8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012dab:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012db1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012db7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012dba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012dbf:	75 04                	jne    c0012dc5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012dc1:	89 0a                	mov    DWORD PTR [edx],ecx
c0012dc3:	eb 14                	jmp    c0012dd9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012dc5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012dca:	74 c8                	je     c0012d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012dcc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012dd1:	83 e0 ef             	and    eax,0xffffffef
c0012dd4:	83 f8 08             	cmp    eax,0x8
c0012dd7:	76 bb                	jbe    c0012d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012dd9:	31 c0                	xor    eax,eax
c0012ddb:	c3                   	ret    

c0012ddc <UnixFile::getFileDescriptor()>:
c0012ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012de0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012de3:	c3                   	ret    

c0012de4 <UnixFile::UnixFile(int)>:
c0012de4:	53                   	push   ebx
c0012de5:	83 ec 28             	sub    esp,0x28
c0012de8:	ba 04 4c 02 c0       	mov    edx,0xc0024c04
c0012ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df1:	89 10                	mov    DWORD PTR [eax],edx
c0012df3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012dfb:	0f 8f 90 01 00 00    	jg     c0012f91 <UnixFile::UnixFile(int)+0x1ad>
c0012e01:	a1 60 6f 02 c0       	mov    eax,ds:0xc0026f60
c0012e06:	8d 50 01             	lea    edx,[eax+0x1]
c0012e09:	89 15 60 6f 02 c0    	mov    DWORD PTR ds:0xc0026f60,edx
c0012e0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e13:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e16:	83 ec 08             	sub    esp,0x8
c0012e19:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e1d:	68 78 d2 02 c0       	push   0xc002d278
c0012e22:	e8 07 f9 00 00       	call   c002272e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	a0 74 d2 02 c0       	mov    al,ds:0xc002d274
c0012e2f:	83 f0 01             	xor    eax,0x1
c0012e32:	0f b6 c0             	movzx  eax,al
c0012e35:	85 c0                	test   eax,eax
c0012e37:	0f 84 55 01 00 00    	je     c0012f92 <UnixFile::UnixFile(int)+0x1ae>
c0012e3d:	c6 05 74 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d274,0x1
c0012e44:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e53:	e8 f3 c9 ff ff       	call   c000f84b <malloc>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	89 c3                	mov    ebx,eax
c0012e5d:	83 ec 08             	sub    esp,0x8
c0012e60:	68 03 ff ff 0f       	push   0xfffff03
c0012e65:	53                   	push   ebx
c0012e66:	e8 2d 01 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012e6b:	83 c4 10             	add    esp,0x10
c0012e6e:	89 1d 6c d2 02 c0    	mov    DWORD PTR ds:0xc002d26c,ebx
c0012e74:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012e7c:	83 ec 0c             	sub    esp,0xc
c0012e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e83:	e8 c3 c9 ff ff       	call   c000f84b <malloc>
c0012e88:	83 c4 10             	add    esp,0x10
c0012e8b:	89 c3                	mov    ebx,eax
c0012e8d:	83 ec 08             	sub    esp,0x8
c0012e90:	68 01 ff ff 0f       	push   0xfffff01
c0012e95:	53                   	push   ebx
c0012e96:	e8 fd 00 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012e9b:	83 c4 10             	add    esp,0x10
c0012e9e:	89 1d 70 d2 02 c0    	mov    DWORD PTR ds:0xc002d270,ebx
c0012ea4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012eac:	83 ec 0c             	sub    esp,0xc
c0012eaf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012eb3:	e8 93 c9 ff ff       	call   c000f84b <malloc>
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	89 c3                	mov    ebx,eax
c0012ebd:	83 ec 08             	sub    esp,0x8
c0012ec0:	68 00 ff ff 0f       	push   0xfffff00
c0012ec5:	53                   	push   ebx
c0012ec6:	e8 cd 00 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012ecb:	83 c4 10             	add    esp,0x10
c0012ece:	89 1d 64 d2 02 c0    	mov    DWORD PTR ds:0xc002d264,ebx
c0012ed4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ee3:	e8 63 c9 ff ff       	call   c000f84b <malloc>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	89 c3                	mov    ebx,eax
c0012eed:	83 ec 08             	sub    esp,0x8
c0012ef0:	68 02 ff ff 0f       	push   0xfffff02
c0012ef5:	53                   	push   ebx
c0012ef6:	e8 9d 00 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012efb:	83 c4 10             	add    esp,0x10
c0012efe:	89 1d 68 d2 02 c0    	mov    DWORD PTR ds:0xc002d268,ebx
c0012f04:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f0c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012f11:	7f 7f                	jg     c0012f92 <UnixFile::UnixFile(int)+0x1ae>
c0012f13:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012f1b:	83 ec 0c             	sub    esp,0xc
c0012f1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f22:	e8 24 c9 ff ff       	call   c000f84b <malloc>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	89 c3                	mov    ebx,eax
c0012f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f30:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012f35:	83 ec 08             	sub    esp,0x8
c0012f38:	50                   	push   eax
c0012f39:	53                   	push   ebx
c0012f3a:	e8 59 00 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f46:	89 1c 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],ebx
c0012f4d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012f55:	83 ec 0c             	sub    esp,0xc
c0012f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f5c:	e8 ea c8 ff ff       	call   c000f84b <malloc>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	89 c3                	mov    ebx,eax
c0012f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f6a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012f6f:	83 ec 08             	sub    esp,0x8
c0012f72:	50                   	push   eax
c0012f73:	53                   	push   ebx
c0012f74:	e8 1f 00 00 00       	call   c0012f98 <ReservedFilename::ReservedFilename(int)>
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	89 1c 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],ebx
c0012f87:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f8c:	e9 7b ff ff ff       	jmp    c0012f0c <UnixFile::UnixFile(int)+0x128>
c0012f91:	90                   	nop
c0012f92:	83 c4 28             	add    esp,0x28
c0012f95:	5b                   	pop    ebx
c0012f96:	c3                   	ret    
c0012f97:	90                   	nop

c0012f98 <ReservedFilename::ReservedFilename(int)>:
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9f:	83 ec 08             	sub    esp,0x8
c0012fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa6:	50                   	push   eax
c0012fa7:	e8 38 fe ff ff       	call   c0012de4 <UnixFile::UnixFile(int)>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	ba 20 4c 02 c0       	mov    edx,0xc0024c20
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	89 10                	mov    DWORD PTR [eax],edx
c0012fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012fc5:	90                   	nop
c0012fc6:	83 c4 0c             	add    esp,0xc
c0012fc9:	c3                   	ret    

c0012fca <UnixFile::~UnixFile()>:
c0012fca:	83 ec 1c             	sub    esp,0x1c
c0012fcd:	ba 04 4c 02 c0       	mov    edx,0xc0024c04
c0012fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fd6:	89 10                	mov    DWORD PTR [eax],edx
c0012fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fdf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012fe4:	7f 76                	jg     c001305c <UnixFile::~UnixFile()+0x92>
c0012fe6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	68 78 d2 02 c0       	push   0xc002d278
c0012ff6:	e8 07 f8 00 00       	call   c0022802 <LinkedList<UnixFile>::getFirstElement()>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013002:	83 ec 0c             	sub    esp,0xc
c0013005:	68 78 d2 02 c0       	push   0xc002d278
c001300a:	e8 fb f7 00 00       	call   c002280a <LinkedList<UnixFile>::removeFirst()>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013016:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001301a:	74 43                	je     c001305f <UnixFile::~UnixFile()+0x95>
c001301c:	83 ec 08             	sub    esp,0x8
c001301f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013023:	68 78 d2 02 c0       	push   0xc002d278
c0013028:	e8 01 f7 00 00       	call   c002272e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013034:	8d 50 01             	lea    edx,[eax+0x1]
c0013037:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001303b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013040:	0f 94 c0             	sete   al
c0013043:	0f b6 c0             	movzx  eax,al
c0013046:	85 c0                	test   eax,eax
c0013048:	74 a4                	je     c0012fee <UnixFile::~UnixFile()+0x24>
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	68 dc 4b 02 c0       	push   0xc0024bdc
c0013052:	e8 49 cc ff ff       	call   c000fca0 <KePanic(char const*)>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	eb 92                	jmp    c0012fee <UnixFile::~UnixFile()+0x24>
c001305c:	90                   	nop
c001305d:	eb 01                	jmp    c0013060 <UnixFile::~UnixFile()+0x96>
c001305f:	90                   	nop
c0013060:	90                   	nop
c0013061:	83 c4 1c             	add    esp,0x1c
c0013064:	c3                   	ret    
c0013065:	90                   	nop

c0013066 <UnixFile::~UnixFile()>:
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	83 ec 0c             	sub    esp,0xc
c001306c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013070:	e8 55 ff ff ff       	call   c0012fca <UnixFile::~UnixFile()>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	83 ec 08             	sub    esp,0x8
c001307b:	6a 0c                	push   0xc
c001307d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013081:	e8 de a2 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	83 c4 0c             	add    esp,0xc
c001308c:	c3                   	ret    
c001308d:	90                   	nop

c001308e <ReservedFilename::~ReservedFilename()>:
c001308e:	83 ec 0c             	sub    esp,0xc
c0013091:	ba 20 4c 02 c0       	mov    edx,0xc0024c20
c0013096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309a:	89 10                	mov    DWORD PTR [eax],edx
c001309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a0:	83 ec 0c             	sub    esp,0xc
c00130a3:	50                   	push   eax
c00130a4:	e8 21 ff ff ff       	call   c0012fca <UnixFile::~UnixFile()>
c00130a9:	83 c4 10             	add    esp,0x10
c00130ac:	90                   	nop
c00130ad:	83 c4 0c             	add    esp,0xc
c00130b0:	c3                   	ret    
c00130b1:	90                   	nop

c00130b2 <ReservedFilename::~ReservedFilename()>:
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	83 ec 0c             	sub    esp,0xc
c00130b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130bc:	e8 cd ff ff ff       	call   c001308e <ReservedFilename::~ReservedFilename()>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	83 ec 08             	sub    esp,0x8
c00130c7:	6a 0c                	push   0xc
c00130c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cd:	e8 92 a2 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	83 c4 0c             	add    esp,0xc
c00130d8:	c3                   	ret    

c00130d9 <KeGetFileFromDescriptor(int)>:
c00130d9:	53                   	push   ebx
c00130da:	83 ec 08             	sub    esp,0x8
c00130dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130e1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00130e7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00130ed:	7f 30                	jg     c001311f <KeGetFileFromDescriptor(int)+0x46>
c00130ef:	83 ec 0c             	sub    esp,0xc
c00130f2:	68 78 d2 02 c0       	push   0xc002d278
c00130f7:	e8 06 f7 00 00       	call   c0022802 <LinkedList<UnixFile>::getFirstElement()>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	8d 50 ff             	lea    edx,[eax-0x1]
c0013102:	83 fa fd             	cmp    edx,0xfffffffd
c0013105:	76 04                	jbe    c001310b <KeGetFileFromDescriptor(int)+0x32>
c0013107:	31 c0                	xor    eax,eax
c0013109:	eb 6e                	jmp    c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c001310b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001310e:	74 69                	je     c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c0013110:	52                   	push   edx
c0013111:	52                   	push   edx
c0013112:	50                   	push   eax
c0013113:	68 78 d2 02 c0       	push   0xc002d278
c0013118:	e8 8f f7 00 00       	call   c00228ac <LinkedList<UnixFile>::getNext(UnixFile*)>
c001311d:	eb dd                	jmp    c00130fc <KeGetFileFromDescriptor(int)+0x23>
c001311f:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c0013124:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001312a:	74 4d                	je     c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c001312c:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c0013131:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013137:	74 40                	je     c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c0013139:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c001313e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013144:	74 33                	je     c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c0013146:	a1 64 d2 02 c0       	mov    eax,ds:0xc002d264
c001314b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013151:	74 26                	je     c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c0013153:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013159:	83 f8 08             	cmp    eax,0x8
c001315c:	77 09                	ja     c0013167 <KeGetFileFromDescriptor(int)+0x8e>
c001315e:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c0013165:	eb 12                	jmp    c0013179 <KeGetFileFromDescriptor(int)+0xa0>
c0013167:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001316d:	83 fb 08             	cmp    ebx,0x8
c0013170:	77 95                	ja     c0013107 <KeGetFileFromDescriptor(int)+0x2e>
c0013172:	8b 04 9d 00 d2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e00]
c0013179:	83 c4 08             	add    esp,0x8
c001317c:	5b                   	pop    ebx
c001317d:	c3                   	ret    

c001317e <__static_initialization_and_destruction_0(int, int)>:
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013186:	75 34                	jne    c00131bc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013188:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013190:	75 2a                	jne    c00131bc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	68 78 d2 02 c0       	push   0xc002d278
c001319a:	e8 4d f5 00 00       	call   c00226ec <LinkedList<UnixFile>::LinkedList()>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	83 ec 04             	sub    esp,0x4
c00131a5:	68 a8 67 02 c0       	push   0xc00267a8
c00131aa:	68 78 d2 02 c0       	push   0xc002d278
c00131af:	68 ea 26 02 c0       	push   0xc00226ea
c00131b4:	e8 5b a1 ff ff       	call   c000d314 <__cxa_atexit>
c00131b9:	83 c4 10             	add    esp,0x10
c00131bc:	90                   	nop
c00131bd:	83 c4 0c             	add    esp,0xc
c00131c0:	c3                   	ret    

c00131c1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00131c1:	83 ec 0c             	sub    esp,0xc
c00131c4:	83 ec 08             	sub    esp,0x8
c00131c7:	68 ff ff 00 00       	push   0xffff
c00131cc:	6a 01                	push   0x1
c00131ce:	e8 ab ff ff ff       	call   c001317e <__static_initialization_and_destruction_0(int, int)>
c00131d3:	83 c4 10             	add    esp,0x10
c00131d6:	83 c4 0c             	add    esp,0xc
c00131d9:	c3                   	ret    

c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00131da:	53                   	push   ebx
c00131db:	8b 15 68 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f68
c00131e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00131e9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00131ef:	89 d8                	mov    eax,ebx
c00131f1:	d1 e8                	shr    eax,1
c00131f3:	01 d0                	add    eax,edx
c00131f5:	80 e3 01             	and    bl,0x1
c00131f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00131fa:	75 09                	jne    c0013205 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00131fc:	83 e2 f0             	and    edx,0xfffffff0
c00131ff:	09 ca                	or     edx,ecx
c0013201:	88 10                	mov    BYTE PTR [eax],dl
c0013203:	5b                   	pop    ebx
c0013204:	c3                   	ret    
c0013205:	83 e2 0f             	and    edx,0xf
c0013208:	0f b6 c9             	movzx  ecx,cl
c001320b:	c1 e1 04             	shl    ecx,0x4
c001320e:	09 ca                	or     edx,ecx
c0013210:	88 10                	mov    BYTE PTR [eax],dl
c0013212:	5b                   	pop    ebx
c0013213:	c3                   	ret    

c0013214 <Virt::getPageState(unsigned long)>:
c0013214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013218:	8b 0d 68 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f68
c001321e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013224:	89 d0                	mov    eax,edx
c0013226:	d1 e8                	shr    eax,1
c0013228:	80 e2 01             	and    dl,0x1
c001322b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001322e:	74 03                	je     c0013233 <Virt::getPageState(unsigned long)+0x1f>
c0013230:	c1 e8 04             	shr    eax,0x4
c0013233:	83 e0 0f             	and    eax,0xf
c0013236:	c3                   	ret    

c0013237 <Virt::allocateKernelVirtualPages(int)>:
c0013237:	55                   	push   ebp
c0013238:	31 ed                	xor    ebp,ebp
c001323a:	57                   	push   edi
c001323b:	31 ff                	xor    edi,edi
c001323d:	56                   	push   esi
c001323e:	53                   	push   ebx
c001323f:	31 db                	xor    ebx,ebx
c0013241:	83 ec 0c             	sub    esp,0xc
c0013244:	8b 35 64 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f64
c001324a:	56                   	push   esi
c001324b:	e8 c4 ff ff ff       	call   c0013214 <Virt::getPageState(unsigned long)>
c0013250:	5a                   	pop    edx
c0013251:	84 c0                	test   al,al
c0013253:	75 41                	jne    c0013296 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013255:	85 db                	test   ebx,ebx
c0013257:	75 02                	jne    c001325b <Virt::allocateKernelVirtualPages(int)+0x24>
c0013259:	89 f5                	mov    ebp,esi
c001325b:	83 c3 01             	add    ebx,0x1
c001325e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013262:	74 5f                	je     c00132c3 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013264:	83 c6 01             	add    esi,0x1
c0013267:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001326d:	76 34                	jbe    c00132a3 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001326f:	c7 05 64 6f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026f64,0xc8000
c0013279:	f7 c7 01 00 00 00    	test   edi,0x1
c001327f:	75 2a                	jne    c00132ab <Virt::allocateKernelVirtualPages(int)+0x74>
c0013281:	be 00 80 0c 00       	mov    esi,0xc8000
c0013286:	bf 01 00 00 00       	mov    edi,0x1
c001328b:	56                   	push   esi
c001328c:	e8 83 ff ff ff       	call   c0013214 <Virt::getPageState(unsigned long)>
c0013291:	5a                   	pop    edx
c0013292:	84 c0                	test   al,al
c0013294:	74 bf                	je     c0013255 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013296:	31 db                	xor    ebx,ebx
c0013298:	83 c6 01             	add    esi,0x1
c001329b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00132a1:	77 cc                	ja     c001326f <Virt::allocateKernelVirtualPages(int)+0x38>
c00132a3:	89 35 64 6f 02 c0    	mov    DWORD PTR ds:0xc0026f64,esi
c00132a9:	eb 9f                	jmp    c001324a <Virt::allocateKernelVirtualPages(int)+0x13>
c00132ab:	83 ec 0c             	sub    esp,0xc
c00132ae:	68 34 4c 02 c0       	push   0xc0024c34
c00132b3:	e8 e8 c9 ff ff       	call   c000fca0 <KePanic(char const*)>
c00132b8:	8b 35 64 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f64
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	eb 87                	jmp    c001324a <Virt::allocateKernelVirtualPages(int)+0x13>
c00132c3:	89 2d 64 6f 02 c0    	mov    DWORD PTR ds:0xc0026f64,ebp
c00132c9:	83 fb 01             	cmp    ebx,0x1
c00132cc:	74 6f                	je     c001333d <Virt::allocateKernelVirtualPages(int)+0x106>
c00132ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132d2:	85 c9                	test   ecx,ecx
c00132d4:	74 49                	je     c001331f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00132d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132da:	89 e8                	mov    eax,ebp
c00132dc:	31 db                	xor    ebx,ebx
c00132de:	8d 79 ff             	lea    edi,[ecx-0x1]
c00132e1:	eb 18                	jmp    c00132fb <Virt::allocateKernelVirtualPages(int)+0xc4>
c00132e3:	6a 01                	push   0x1
c00132e5:	83 c3 01             	add    ebx,0x1
c00132e8:	50                   	push   eax
c00132e9:	e8 ec fe ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132ee:	58                   	pop    eax
c00132ef:	5a                   	pop    edx
c00132f0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00132f4:	74 29                	je     c001331f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00132f6:	a1 64 6f 02 c0       	mov    eax,ds:0xc0026f64
c00132fb:	8d 50 01             	lea    edx,[eax+0x1]
c00132fe:	85 db                	test   ebx,ebx
c0013300:	89 15 64 6f 02 c0    	mov    DWORD PTR ds:0xc0026f64,edx
c0013306:	74 24                	je     c001332c <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013308:	39 df                	cmp    edi,ebx
c001330a:	75 d7                	jne    c00132e3 <Virt::allocateKernelVirtualPages(int)+0xac>
c001330c:	6a 03                	push   0x3
c001330e:	83 c3 01             	add    ebx,0x1
c0013311:	50                   	push   eax
c0013312:	e8 c3 fe ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013317:	59                   	pop    ecx
c0013318:	5e                   	pop    esi
c0013319:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001331d:	75 d7                	jne    c00132f6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001331f:	83 c4 0c             	add    esp,0xc
c0013322:	89 e8                	mov    eax,ebp
c0013324:	5b                   	pop    ebx
c0013325:	c1 e0 0c             	shl    eax,0xc
c0013328:	5e                   	pop    esi
c0013329:	5f                   	pop    edi
c001332a:	5d                   	pop    ebp
c001332b:	c3                   	ret    
c001332c:	6a 02                	push   0x2
c001332e:	bb 01 00 00 00       	mov    ebx,0x1
c0013333:	50                   	push   eax
c0013334:	e8 a1 fe ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013339:	58                   	pop    eax
c001333a:	5a                   	pop    edx
c001333b:	eb b9                	jmp    c00132f6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001333d:	6a 04                	push   0x4
c001333f:	8d 45 01             	lea    eax,[ebp+0x1]
c0013342:	55                   	push   ebp
c0013343:	a3 64 6f 02 c0       	mov    ds:0xc0026f64,eax
c0013348:	e8 8d fe ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001334d:	5b                   	pop    ebx
c001334e:	89 e8                	mov    eax,ebp
c0013350:	5e                   	pop    esi
c0013351:	c1 e0 0c             	shl    eax,0xc
c0013354:	83 c4 0c             	add    esp,0xc
c0013357:	5b                   	pop    ebx
c0013358:	5e                   	pop    esi
c0013359:	5f                   	pop    edi
c001335a:	5d                   	pop    ebp
c001335b:	c3                   	ret    

c001335c <Virt::freeSwapfilePage(unsigned long)>:
c001335c:	53                   	push   ebx
c001335d:	8b 15 8c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d28c
c0013363:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013367:	b8 01 00 00 00       	mov    eax,0x1
c001336c:	89 cb                	mov    ebx,ecx
c001336e:	d3 e0                	shl    eax,cl
c0013370:	c1 eb 05             	shr    ebx,0x5
c0013373:	f7 d0                	not    eax
c0013375:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013378:	21 c1                	and    ecx,eax
c001337a:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001337d:	5b                   	pop    ebx
c001337e:	c3                   	ret    

c001337f <Virt::swapIDToSector(unsigned long)>:
c001337f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013383:	8b 15 6c 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f6c
c0013389:	8b 0d 74 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f74
c001338f:	0f af c2             	imul   eax,edx
c0013392:	01 c8                	add    eax,ecx
c0013394:	c3                   	ret    

c0013395 <Virt::allocateSwapfilePage()>:
c0013395:	55                   	push   ebp
c0013396:	31 d2                	xor    edx,edx
c0013398:	57                   	push   edi
c0013399:	56                   	push   esi
c001339a:	53                   	push   ebx
c001339b:	83 ec 0c             	sub    esp,0xc
c001339e:	8b 0d 6c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f6c
c00133a4:	a1 70 6f 02 c0       	mov    eax,ds:0xc0026f70
c00133a9:	f7 f1                	div    ecx
c00133ab:	39 0d 70 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f70,ecx
c00133b1:	72 2f                	jb     c00133e2 <Virt::allocateSwapfilePage()+0x4d>
c00133b3:	8b 35 8c d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d28c
c00133b9:	8b 16                	mov    edx,DWORD PTR [esi]
c00133bb:	f6 c2 01             	test   dl,0x1
c00133be:	74 3e                	je     c00133fe <Virt::allocateSwapfilePage()+0x69>
c00133c0:	31 c9                	xor    ecx,ecx
c00133c2:	bf 01 00 00 00       	mov    edi,0x1
c00133c7:	eb 12                	jmp    c00133db <Virt::allocateSwapfilePage()+0x46>
c00133c9:	89 fd                	mov    ebp,edi
c00133cb:	89 ca                	mov    edx,ecx
c00133cd:	d3 e5                	shl    ebp,cl
c00133cf:	c1 ea 05             	shr    edx,0x5
c00133d2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00133d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00133d7:	85 ea                	test   edx,ebp
c00133d9:	74 2c                	je     c0013407 <Virt::allocateSwapfilePage()+0x72>
c00133db:	83 c1 01             	add    ecx,0x1
c00133de:	39 c8                	cmp    eax,ecx
c00133e0:	77 e7                	ja     c00133c9 <Virt::allocateSwapfilePage()+0x34>
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	68 47 4f 02 c0       	push   0xc0024f47
c00133ea:	e8 b1 c8 ff ff       	call   c000fca0 <KePanic(char const*)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	31 c9                	xor    ecx,ecx
c00133f4:	83 c4 0c             	add    esp,0xc
c00133f7:	89 c8                	mov    eax,ecx
c00133f9:	5b                   	pop    ebx
c00133fa:	5e                   	pop    esi
c00133fb:	5f                   	pop    edi
c00133fc:	5d                   	pop    ebp
c00133fd:	c3                   	ret    
c00133fe:	89 f3                	mov    ebx,esi
c0013400:	bd 01 00 00 00       	mov    ebp,0x1
c0013405:	31 c9                	xor    ecx,ecx
c0013407:	09 ea                	or     edx,ebp
c0013409:	89 c8                	mov    eax,ecx
c001340b:	89 13                	mov    DWORD PTR [ebx],edx
c001340d:	83 c4 0c             	add    esp,0xc
c0013410:	5b                   	pop    ebx
c0013411:	5e                   	pop    esi
c0013412:	5f                   	pop    edi
c0013413:	5d                   	pop    ebp
c0013414:	c3                   	ret    

c0013415 <Virt::virtualMemorySetup()>:
c0013415:	53                   	push   ebx
c0013416:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001341b:	6a 0f                	push   0xf
c001341d:	53                   	push   ebx
c001341e:	83 c3 01             	add    ebx,0x1
c0013421:	e8 b4 fd ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013426:	58                   	pop    eax
c0013427:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001342d:	5a                   	pop    edx
c001342e:	75 eb                	jne    c001341b <Virt::virtualMemorySetup()+0x6>
c0013430:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013435:	6a 00                	push   0x0
c0013437:	53                   	push   ebx
c0013438:	83 c3 01             	add    ebx,0x1
c001343b:	e8 9a fd ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013440:	59                   	pop    ecx
c0013441:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013447:	58                   	pop    eax
c0013448:	75 eb                	jne    c0013435 <Virt::virtualMemorySetup()+0x20>
c001344a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001344f:	6a 0f                	push   0xf
c0013451:	53                   	push   ebx
c0013452:	83 c3 01             	add    ebx,0x1
c0013455:	e8 80 fd ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001345a:	58                   	pop    eax
c001345b:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013461:	5a                   	pop    edx
c0013462:	75 eb                	jne    c001344f <Virt::virtualMemorySetup()+0x3a>
c0013464:	5b                   	pop    ebx
c0013465:	c3                   	ret    

c0013466 <Virt::setupPageSwapping(int)>:
c0013466:	53                   	push   ebx
c0013467:	83 ec 0c             	sub    esp,0xc
c001346a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001346e:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c0013473:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013479:	8b 10                	mov    edx,DWORD PTR [eax]
c001347b:	53                   	push   ebx
c001347c:	c1 e3 0b             	shl    ebx,0xb
c001347f:	68 5e 4f 02 c0       	push   0xc0024f5e
c0013484:	50                   	push   eax
c0013485:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013488:	89 1d 70 6f 02 c0    	mov    DWORD PTR ds:0xc0026f70,ebx
c001348e:	c6 05 78 6f 02 c0 43 	mov    BYTE PTR ds:0xc0026f78,0x43
c0013495:	c1 eb 08             	shr    ebx,0x8
c0013498:	a3 74 6f 02 c0       	mov    ds:0xc0026f74,eax
c001349d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134a0:	c7 05 6c 6f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026f6c,0x8
c00134aa:	e8 9c c3 ff ff       	call   c000f84b <malloc>
c00134af:	83 c4 0c             	add    esp,0xc
c00134b2:	89 c1                	mov    ecx,eax
c00134b4:	a3 8c d2 02 c0       	mov    ds:0xc002d28c,eax
c00134b9:	31 d2                	xor    edx,edx
c00134bb:	a1 70 6f 02 c0       	mov    eax,ds:0xc0026f70
c00134c0:	f7 35 6c 6f 02 c0    	div    DWORD PTR ds:0xc0026f6c
c00134c6:	c1 e8 05             	shr    eax,0x5
c00134c9:	50                   	push   eax
c00134ca:	6a 00                	push   0x0
c00134cc:	51                   	push   ecx
c00134cd:	e8 1e d0 fe ff       	call   c00004f0 <memset>
c00134d2:	83 c4 18             	add    esp,0x18
c00134d5:	5b                   	pop    ebx
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <VAS::setCPUSpecific(unsigned long)>:
c00134d8:	c3                   	ret    
c00134d9:	90                   	nop

c00134da <VAS::VAS(VAS*)>:
c00134da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00134f0:	90                   	nop
c00134f1:	c3                   	ret    

c00134f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00134f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134f6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00134fb:	89 c2                	mov    edx,eax
c00134fd:	c1 e8 0a             	shr    eax,0xa
c0013500:	c1 ea 16             	shr    edx,0x16
c0013503:	83 f9 01             	cmp    ecx,0x1
c0013506:	19 c9                	sbb    ecx,ecx
c0013508:	c1 e2 0c             	shl    edx,0xc
c001350b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013511:	25 fc 0f 00 00       	and    eax,0xffc
c0013516:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001351d:	01 d0                	add    eax,edx
c001351f:	c3                   	ret    

c0013520 <VAS::getPageTableEntry(unsigned long)>:
c0013520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013524:	89 ca                	mov    edx,ecx
c0013526:	c1 e9 0a             	shr    ecx,0xa
c0013529:	c1 ea 16             	shr    edx,0x16
c001352c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013532:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013538:	c1 e0 0c             	shl    eax,0xc
c001353b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001353e:	c3                   	ret    

c001353f <Virt::freeKernelVirtualPages(unsigned long)>:
c001353f:	55                   	push   ebp
c0013540:	57                   	push   edi
c0013541:	bf 01 00 00 00       	mov    edi,0x1
c0013546:	56                   	push   esi
c0013547:	53                   	push   ebx
c0013548:	83 ec 1c             	sub    esp,0x1c
c001354b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001354f:	c1 ee 0c             	shr    esi,0xc
c0013552:	eb 48                	jmp    c001359c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013554:	83 ec 08             	sub    esp,0x8
c0013557:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001355c:	55                   	push   ebp
c001355d:	50                   	push   eax
c001355e:	e8 bd ff ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	8b 10                	mov    edx,DWORD PTR [eax]
c0013568:	f6 c6 04             	test   dh,0x4
c001356b:	75 70                	jne    c00135dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001356d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013573:	83 fb 04             	cmp    ebx,0x4
c0013576:	0f 84 8a 00 00 00    	je     c0013606 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001357c:	83 fb 02             	cmp    ebx,0x2
c001357f:	0f 84 9a 00 00 00    	je     c001361f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013585:	83 fb 03             	cmp    ebx,0x3
c0013588:	0f 84 be 00 00 00    	je     c001364c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001358e:	83 fb 01             	cmp    ebx,0x1
c0013591:	0f 84 a2 00 00 00    	je     c0013639 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013597:	83 c6 01             	add    esi,0x1
c001359a:	31 ff                	xor    edi,edi
c001359c:	56                   	push   esi
c001359d:	89 f5                	mov    ebp,esi
c001359f:	e8 70 fc ff ff       	call   c0013214 <Virt::getPageState(unsigned long)>
c00135a4:	c1 e5 0c             	shl    ebp,0xc
c00135a7:	0f b6 d8             	movzx  ebx,al
c00135aa:	5a                   	pop    edx
c00135ab:	85 db                	test   ebx,ebx
c00135ad:	75 a5                	jne    c0013554 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	68 75 4f 02 c0       	push   0xc0024f75
c00135b7:	e8 e4 c6 ff ff       	call   c000fca0 <KePanic(char const*)>
c00135bc:	5a                   	pop    edx
c00135bd:	59                   	pop    ecx
c00135be:	55                   	push   ebp
c00135bf:	8b 2d 90 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d290
c00135c5:	55                   	push   ebp
c00135c6:	e8 55 ff ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00135d0:	f6 c6 04             	test   dh,0x4
c00135d3:	75 08                	jne    c00135dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00135d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135db:	eb ba                	jmp    c0013597 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00135e7:	83 ec 0c             	sub    esp,0xc
c00135ea:	52                   	push   edx
c00135eb:	e8 3b c8 ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c00135f0:	83 c4 10             	add    esp,0x10
c00135f3:	83 fb 04             	cmp    ebx,0x4
c00135f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013600:	0f 85 76 ff ff ff    	jne    c001357c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013606:	83 e7 01             	and    edi,0x1
c0013609:	75 46                	jne    c0013651 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001360b:	c7 44 24 30 54 4c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024c54
c0013613:	83 c4 1c             	add    esp,0x1c
c0013616:	5b                   	pop    ebx
c0013617:	5e                   	pop    esi
c0013618:	5f                   	pop    edi
c0013619:	5d                   	pop    ebp
c001361a:	e9 81 c6 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001361f:	83 e7 01             	and    edi,0x1
c0013622:	75 15                	jne    c0013639 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013624:	83 ec 0c             	sub    esp,0xc
c0013627:	68 91 4f 02 c0       	push   0xc0024f91
c001362c:	e8 6f c6 ff ff       	call   c000fca0 <KePanic(char const*)>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	e9 5e ff ff ff       	jmp    c0013597 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013639:	83 ec 08             	sub    esp,0x8
c001363c:	6a 00                	push   0x0
c001363e:	56                   	push   esi
c001363f:	e8 96 fb ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	e9 4b ff ff ff       	jmp    c0013597 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001364c:	83 e7 01             	and    edi,0x1
c001364f:	75 16                	jne    c0013667 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013651:	83 ec 08             	sub    esp,0x8
c0013654:	6a 00                	push   0x0
c0013656:	56                   	push   esi
c0013657:	e8 7e fb ff ff       	call   c00131da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	83 c4 1c             	add    esp,0x1c
c0013662:	5b                   	pop    ebx
c0013663:	5e                   	pop    esi
c0013664:	5f                   	pop    edi
c0013665:	5d                   	pop    ebp
c0013666:	c3                   	ret    
c0013667:	c7 44 24 30 ad 4f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024fad
c001366f:	83 c4 1c             	add    esp,0x1c
c0013672:	5b                   	pop    ebx
c0013673:	5e                   	pop    esi
c0013674:	5f                   	pop    edi
c0013675:	5d                   	pop    ebp
c0013676:	e9 25 c6 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001367b:	90                   	nop

c001367c <VAS::freeAllocatedPages(unsigned long)>:
c001367c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013684:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013688:	74 09                	je     c0013693 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001368a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001368e:	e9 ac fe ff ff       	jmp    c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c0013693:	c7 44 24 04 78 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c78
c001369b:	e9 dc 38 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00136a0 <VAS::virtualToPhysical(unsigned long)>:
c00136a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136a4:	50                   	push   eax
c00136a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136a9:	52                   	push   edx
c00136aa:	e8 71 fe ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c00136af:	59                   	pop    ecx
c00136b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00136b2:	5a                   	pop    edx
c00136b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136b8:	c3                   	ret    
c00136b9:	90                   	nop

c00136ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00136ba:	55                   	push   ebp
c00136bb:	57                   	push   edi
c00136bc:	56                   	push   esi
c00136bd:	53                   	push   ebx
c00136be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136c2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00136c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00136ce:	85 db                	test   ebx,ebx
c00136d0:	7e 24                	jle    c00136f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00136d2:	c1 e3 0c             	shl    ebx,0xc
c00136d5:	01 f3                	add    ebx,esi
c00136d7:	56                   	push   esi
c00136d8:	81 c6 00 10 00 00    	add    esi,0x1000
c00136de:	55                   	push   ebp
c00136df:	e8 3c fe ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c00136e4:	5a                   	pop    edx
c00136e5:	59                   	pop    ecx
c00136e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136ec:	21 f9                	and    ecx,edi
c00136ee:	09 d1                	or     ecx,edx
c00136f0:	39 f3                	cmp    ebx,esi
c00136f2:	89 08                	mov    DWORD PTR [eax],ecx
c00136f4:	75 e1                	jne    c00136d7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00136f6:	5b                   	pop    ebx
c00136f7:	5e                   	pop    esi
c00136f8:	5f                   	pop    edi
c00136f9:	5d                   	pop    ebp
c00136fa:	c3                   	ret    
c00136fb:	90                   	nop

c00136fc <VAS::VAS()>:
c00136fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013700:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001370b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013716:	a3 90 d2 02 c0       	mov    ds:0xc002d290,eax
c001371b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001371f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013727:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001372a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001372e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013735:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c001373a:	b8 00 80 02 c0       	mov    eax,0xc0028000
c001373f:	29 c2                	sub    edx,eax
c0013741:	89 d0                	mov    eax,edx
c0013743:	05 ff 0f 00 00       	add    eax,0xfff
c0013748:	c1 e8 0c             	shr    eax,0xc
c001374b:	89 c2                	mov    edx,eax
c001374d:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013752:	6a 04                	push   0x4
c0013754:	6a ff                	push   0xffffffff
c0013756:	52                   	push   edx
c0013757:	50                   	push   eax
c0013758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001375c:	e8 59 ff ff ff       	call   c00136ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013761:	83 c4 14             	add    esp,0x14
c0013764:	90                   	nop
c0013765:	c3                   	ret    

c0013766 <VAS::setToWriteCombining(unsigned long, int)>:
c0013766:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c001376b:	50                   	push   eax
c001376c:	6a ff                	push   0xffffffff
c001376e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013772:	52                   	push   edx
c0013773:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013777:	51                   	push   ecx
c0013778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001377c:	50                   	push   eax
c001377d:	e8 38 ff ff ff       	call   c00136ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013782:	83 c4 14             	add    esp,0x14
c0013785:	c3                   	ret    

c0013786 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001378a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001378d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013791:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013794:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013799:	83 f8 01             	cmp    eax,0x1
c001379c:	19 c0                	sbb    eax,eax
c001379e:	83 ca 03             	or     edx,0x3
c00137a1:	83 e0 fc             	and    eax,0xfffffffc
c00137a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00137ab:	0f 20 d8             	mov    eax,cr3
c00137ae:	0f 22 d8             	mov    cr3,eax
c00137b1:	c3                   	ret    

c00137b2 <VAS::~VAS()>:
c00137b2:	83 ec 2c             	sub    esp,0x2c
c00137b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00137bd:	fa                   	cli    
c00137be:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00137c3:	83 c0 01             	add    eax,0x1
c00137c6:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00137cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00137d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00137d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00137d5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00137db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137df:	6a 01                	push   0x1
c00137e1:	50                   	push   eax
c00137e2:	e8 9f ff ff ff       	call   c0013786 <VAS::mapOtherVASIn(bool, VAS*)>
c00137e7:	83 c4 0c             	add    esp,0xc
c00137ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00137f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00137fa:	0f 8f d8 00 00 00    	jg     c00138d8 <VAS::~VAS()+0x126>
c0013800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013804:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001380b:	c1 e2 02             	shl    edx,0x2
c001380e:	01 d0                	add    eax,edx
c0013810:	8b 00                	mov    eax,DWORD PTR [eax]
c0013812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381a:	83 e0 01             	and    eax,0x1
c001381d:	0f 84 ab 00 00 00    	je     c00138ce <VAS::~VAS()+0x11c>
c0013823:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001382b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013833:	7f 74                	jg     c00138a9 <VAS::~VAS()+0xf7>
c0013835:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013839:	c1 e0 0a             	shl    eax,0xa
c001383c:	89 c2                	mov    edx,eax
c001383e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013842:	01 d0                	add    eax,edx
c0013844:	c1 e0 0c             	shl    eax,0xc
c0013847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013850:	8b 00                	mov    eax,DWORD PTR [eax]
c0013852:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013855:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001385b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001385f:	6a 01                	push   0x1
c0013861:	50                   	push   eax
c0013862:	e8 8b fc ff ff       	call   c00134f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013867:	83 c4 0c             	add    esp,0xc
c001386a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013872:	8b 00                	mov    eax,DWORD PTR [eax]
c0013874:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001387c:	25 01 04 00 00       	and    eax,0x401
c0013881:	3d 01 04 00 00       	cmp    eax,0x401
c0013886:	75 1a                	jne    c00138a2 <VAS::~VAS()+0xf0>
c0013888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001388c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013891:	83 ec 0c             	sub    esp,0xc
c0013894:	50                   	push   eax
c0013895:	e8 91 c5 ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138a2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00138a7:	eb 82                	jmp    c001382b <VAS::~VAS()+0x79>
c00138a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ad:	25 00 04 00 00       	and    eax,0x400
c00138b2:	74 1a                	je     c00138ce <VAS::~VAS()+0x11c>
c00138b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138bd:	83 ec 0c             	sub    esp,0xc
c00138c0:	50                   	push   eax
c00138c1:	e8 65 c5 ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138ce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00138d3:	e9 1a ff ff ff       	jmp    c00137f2 <VAS::~VAS()+0x40>
c00138d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138df:	83 ec 0c             	sub    esp,0xc
c00138e2:	50                   	push   eax
c00138e3:	e8 57 fc ff ff       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138f2:	83 ec 0c             	sub    esp,0xc
c00138f5:	50                   	push   eax
c00138f6:	e8 30 c5 ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c00138fb:	83 c4 10             	add    esp,0x10
c00138fe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013903:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001390b:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013910:	85 c0                	test   eax,eax
c0013912:	75 01                	jne    c0013915 <VAS::~VAS()+0x163>
c0013914:	fb                   	sti    
c0013915:	90                   	nop
c0013916:	83 c4 2c             	add    esp,0x2c
c0013919:	c3                   	ret    

c001391a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001391a:	55                   	push   ebp
c001391b:	57                   	push   edi
c001391c:	56                   	push   esi
c001391d:	53                   	push   ebx
c001391e:	83 ec 1c             	sub    esp,0x1c
c0013921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001392f:	77 08                	ja     c0013939 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013931:	0f 20 d8             	mov    eax,cr3
c0013934:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013937:	75 49                	jne    c0013982 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013939:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001393d:	09 d8                	or     eax,ebx
c001393f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013944:	75 59                	jne    c001399f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013946:	89 de                	mov    esi,ebx
c0013948:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001394b:	c1 ee 16             	shr    esi,0x16
c001394e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013955:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013959:	74 56                	je     c00139b1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001395b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001395f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013963:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013969:	c1 eb 0a             	shr    ebx,0xa
c001396c:	c1 e6 0c             	shl    esi,0xc
c001396f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013975:	09 d0                	or     eax,edx
c0013977:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001397a:	83 c4 1c             	add    esp,0x1c
c001397d:	5b                   	pop    ebx
c001397e:	5e                   	pop    esi
c001397f:	5f                   	pop    edi
c0013980:	5d                   	pop    ebp
c0013981:	c3                   	ret    
c0013982:	83 ec 0c             	sub    esp,0xc
c0013985:	68 9c 4c 02 c0       	push   0xc0024c9c
c001398a:	e8 ed 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001398f:	83 c4 10             	add    esp,0x10
c0013992:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013996:	09 d8                	or     eax,ebx
c0013998:	a9 ff 0f 00 00       	test   eax,0xfff
c001399d:	74 a7                	je     c0013946 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001399f:	83 ec 0c             	sub    esp,0xc
c00139a2:	68 04 4d 02 c0       	push   0xc0024d04
c00139a7:	e8 f4 c2 ff ff       	call   c000fca0 <KePanic(char const*)>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	eb 95                	jmp    c0013946 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00139b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00139b5:	e8 da c4 ff ff       	call   c000fe94 <Phys::allocatePage()>
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	89 c5                	mov    ebp,eax
c00139bf:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c00139c5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00139c9:	6a 01                	push   0x1
c00139cb:	e8 67 f8 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c00139d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00139d7:	6a 01                	push   0x1
c00139d9:	50                   	push   eax
c00139da:	55                   	push   ebp
c00139db:	81 cd 07 04 00 00    	or     ebp,0x407
c00139e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139e5:	51                   	push   ecx
c00139e6:	e8 19 01 00 00       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00139eb:	83 c4 1c             	add    esp,0x1c
c00139ee:	68 00 10 00 00       	push   0x1000
c00139f3:	6a 00                	push   0x0
c00139f5:	50                   	push   eax
c00139f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139fa:	e8 f1 ca fe ff       	call   c00004f0 <memset>
c00139ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a06:	e8 34 fb ff ff       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c0013a0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a0f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013a18:	e9 3e ff ff ff       	jmp    c001395b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013a1d:	90                   	nop

c0013a1e <VAS::allocatePages(int, int)>:
c0013a1e:	55                   	push   ebp
c0013a1f:	57                   	push   edi
c0013a20:	56                   	push   esi
c0013a21:	53                   	push   ebx
c0013a22:	83 ec 1c             	sub    esp,0x1c
c0013a25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013a2d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013a31:	75 71                	jne    c0013aa4 <VAS::allocatePages(int, int)+0x86>
c0013a33:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a3a:	85 c0                	test   eax,eax
c0013a3c:	74 4d                	je     c0013a8b <VAS::allocatePages(int, int)+0x6d>
c0013a3e:	89 dd                	mov    ebp,ebx
c0013a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a44:	c1 e5 0c             	shl    ebp,0xc
c0013a47:	01 c5                	add    ebp,eax
c0013a49:	85 db                	test   ebx,ebx
c0013a4b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013a4e:	7e 29                	jle    c0013a79 <VAS::allocatePages(int, int)+0x5b>
c0013a50:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a58:	81 cf 00 04 00 00    	or     edi,0x400
c0013a5e:	e8 31 c4 ff ff       	call   c000fe94 <Phys::allocatePage()>
c0013a63:	57                   	push   edi
c0013a64:	53                   	push   ebx
c0013a65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a6b:	50                   	push   eax
c0013a6c:	56                   	push   esi
c0013a6d:	e8 a8 fe ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	39 dd                	cmp    ebp,ebx
c0013a77:	75 e5                	jne    c0013a5e <VAS::allocatePages(int, int)+0x40>
c0013a79:	0f 20 d8             	mov    eax,cr3
c0013a7c:	0f 22 d8             	mov    cr3,eax
c0013a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a83:	83 c4 1c             	add    esp,0x1c
c0013a86:	5b                   	pop    ebx
c0013a87:	5e                   	pop    esi
c0013a88:	5f                   	pop    edi
c0013a89:	5d                   	pop    ebp
c0013a8a:	c3                   	ret    
c0013a8b:	83 ec 0c             	sub    esp,0xc
c0013a8e:	68 28 4d 02 c0       	push   0xc0024d28
c0013a93:	e8 08 c2 ff ff       	call   c000fca0 <KePanic(char const*)>
c0013a98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	eb 9a                	jmp    c0013a3e <VAS::allocatePages(int, int)+0x20>
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	53                   	push   ebx
c0013aa8:	e8 8a f7 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0013aad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013ab9:	77 37                	ja     c0013af2 <VAS::allocatePages(int, int)+0xd4>
c0013abb:	85 db                	test   ebx,ebx
c0013abd:	7e ba                	jle    c0013a79 <VAS::allocatePages(int, int)+0x5b>
c0013abf:	c1 e3 0c             	shl    ebx,0xc
c0013ac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ac6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013aca:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013acd:	81 cf 00 04 00 00    	or     edi,0x400
c0013ad3:	89 c3                	mov    ebx,eax
c0013ad5:	e8 ba c3 ff ff       	call   c000fe94 <Phys::allocatePage()>
c0013ada:	57                   	push   edi
c0013adb:	53                   	push   ebx
c0013adc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ae2:	50                   	push   eax
c0013ae3:	56                   	push   esi
c0013ae4:	e8 31 fe ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	39 dd                	cmp    ebp,ebx
c0013aee:	75 e5                	jne    c0013ad5 <VAS::allocatePages(int, int)+0xb7>
c0013af0:	eb 87                	jmp    c0013a79 <VAS::allocatePages(int, int)+0x5b>
c0013af2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013af6:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0013afb:	09 c2                	or     edx,eax
c0013afd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013b01:	eb b8                	jmp    c0013abb <VAS::allocatePages(int, int)+0x9d>
c0013b03:	90                   	nop

c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013b04:	55                   	push   ebp
c0013b05:	57                   	push   edi
c0013b06:	56                   	push   esi
c0013b07:	53                   	push   ebx
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013b13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013b17:	85 db                	test   ebx,ebx
c0013b19:	7e 2f                	jle    c0013b4a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013b1b:	c1 e3 0c             	shl    ebx,0xc
c0013b1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b22:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013b26:	01 d3                	add    ebx,edx
c0013b28:	55                   	push   ebp
c0013b29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b31:	29 c2                	sub    edx,eax
c0013b33:	01 f2                	add    edx,esi
c0013b35:	52                   	push   edx
c0013b36:	56                   	push   esi
c0013b37:	81 c6 00 10 00 00    	add    esi,0x1000
c0013b3d:	57                   	push   edi
c0013b3e:	e8 d7 fd ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	39 de                	cmp    esi,ebx
c0013b48:	75 de                	jne    c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013b4a:	0f 20 d8             	mov    eax,cr3
c0013b4d:	0f 22 d8             	mov    cr3,eax
c0013b50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b54:	83 c4 0c             	add    esp,0xc
c0013b57:	5b                   	pop    ebx
c0013b58:	5e                   	pop    esi
c0013b59:	5f                   	pop    edi
c0013b5a:	5d                   	pop    ebp
c0013b5b:	c3                   	ret    

c0013b5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013b5c:	55                   	push   ebp
c0013b5d:	57                   	push   edi
c0013b5e:	56                   	push   esi
c0013b5f:	53                   	push   ebx
c0013b60:	83 ec 1c             	sub    esp,0x1c
c0013b63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013b67:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013b6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b6f:	09 f8                	or     eax,edi
c0013b71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013b75:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b7a:	75 4f                	jne    c0013bcb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013b7c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013b80:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013b83:	c1 eb 16             	shr    ebx,0x16
c0013b86:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013b8d:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013b91:	74 52                	je     c0013be5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013b93:	0f b6 f2             	movzx  esi,dl
c0013b96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013b9a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013b9e:	c1 e8 0a             	shr    eax,0xa
c0013ba1:	83 fe 01             	cmp    esi,0x1
c0013ba4:	19 d2                	sbb    edx,edx
c0013ba6:	c1 e3 0c             	shl    ebx,0xc
c0013ba9:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013baf:	25 fc 0f 00 00       	and    eax,0xffc
c0013bb4:	01 d8                	add    eax,ebx
c0013bb6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013bba:	09 d9                	or     ecx,ebx
c0013bbc:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013bc3:	83 c4 1c             	add    esp,0x1c
c0013bc6:	5b                   	pop    ebx
c0013bc7:	5e                   	pop    esi
c0013bc8:	5f                   	pop    edi
c0013bc9:	5d                   	pop    ebp
c0013bca:	c3                   	ret    
c0013bcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013bcf:	83 ec 0c             	sub    esp,0xc
c0013bd2:	68 54 4d 02 c0       	push   0xc0024d54
c0013bd7:	e8 c4 c0 ff ff       	call   c000fca0 <KePanic(char const*)>
c0013bdc:	83 c4 10             	add    esp,0x10
c0013bdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013be3:	eb 97                	jmp    c0013b7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013be5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013be9:	e8 a6 c2 ff ff       	call   c000fe94 <Phys::allocatePage()>
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	89 c5                	mov    ebp,eax
c0013bf3:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c0013bf9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013bfd:	6a 01                	push   0x1
c0013bff:	e8 33 f6 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0013c04:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c0b:	6a 01                	push   0x1
c0013c0d:	50                   	push   eax
c0013c0e:	55                   	push   ebp
c0013c0f:	81 cd 07 04 00 00    	or     ebp,0x407
c0013c15:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c19:	51                   	push   ecx
c0013c1a:	e8 e5 fe ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c1f:	83 c4 1c             	add    esp,0x1c
c0013c22:	68 00 10 00 00       	push   0x1000
c0013c27:	6a 00                	push   0x0
c0013c29:	50                   	push   eax
c0013c2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c2e:	e8 bd c8 fe ff       	call   c00004f0 <memset>
c0013c33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c3a:	e8 00 f9 ff ff       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c0013c3f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013c48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c4c:	e9 42 ff ff ff       	jmp    c0013b93 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013c51:	90                   	nop

c0013c52 <VAS::VAS(bool)>:
c0013c52:	53                   	push   ebx
c0013c53:	83 ec 28             	sub    esp,0x28
c0013c56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013c5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c78:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c7c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013c7f:	e8 10 c2 ff ff       	call   c000fe94 <Phys::allocatePage()>
c0013c84:	89 c2                	mov    edx,eax
c0013c86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c8a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013c8d:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c0013c93:	83 ec 0c             	sub    esp,0xc
c0013c96:	6a 01                	push   0x1
c0013c98:	e8 9a f5 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0013c9d:	83 c4 10             	add    esp,0x10
c0013ca0:	89 c2                	mov    edx,eax
c0013ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ca6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ca9:	83 ec 0c             	sub    esp,0xc
c0013cac:	6a 03                	push   0x3
c0013cae:	6a 01                	push   0x1
c0013cb0:	52                   	push   edx
c0013cb1:	50                   	push   eax
c0013cb2:	53                   	push   ebx
c0013cb3:	e8 4c fe ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013cb8:	83 c4 20             	add    esp,0x20
c0013cbb:	89 c2                	mov    edx,eax
c0013cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cc4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ccc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013cd4:	7f 1d                	jg     c0013cf3 <VAS::VAS(bool)+0xa1>
c0013cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cdd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ce1:	c1 e2 02             	shl    edx,0x2
c0013ce4:	01 d0                	add    eax,edx
c0013ce6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013cec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013cf1:	eb d9                	jmp    c0013ccc <VAS::VAS(bool)+0x7a>
c0013cf3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013cfb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013d03:	7f 59                	jg     c0013d5e <VAS::VAS(bool)+0x10c>
c0013d05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d09:	2d 00 02 00 00       	sub    eax,0x200
c0013d0e:	c1 e0 0c             	shl    eax,0xc
c0013d11:	89 c2                	mov    edx,eax
c0013d13:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0013d18:	89 d1                	mov    ecx,edx
c0013d1a:	09 c1                	or     ecx,eax
c0013d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d27:	c1 e2 02             	shl    edx,0x2
c0013d2a:	01 d0                	add    eax,edx
c0013d2c:	83 c9 05             	or     ecx,0x5
c0013d2f:	89 ca                	mov    edx,ecx
c0013d31:	89 10                	mov    DWORD PTR [eax],edx
c0013d33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d37:	2d 40 03 00 00       	sub    eax,0x340
c0013d3c:	83 f8 7f             	cmp    eax,0x7f
c0013d3f:	77 16                	ja     c0013d57 <VAS::VAS(bool)+0x105>
c0013d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d45:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d4c:	c1 e2 02             	shl    edx,0x2
c0013d4f:	01 d0                	add    eax,edx
c0013d51:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d57:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013d5c:	eb 9d                	jmp    c0013cfb <VAS::VAS(bool)+0xa9>
c0013d5e:	8b 15 28 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d428
c0013d64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d6b:	05 20 0c 00 00       	add    eax,0xc20
c0013d70:	81 ca 03 40 00 00    	or     edx,0x4003
c0013d76:	89 10                	mov    DWORD PTR [eax],edx
c0013d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013d7f:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0013d84:	09 c2                	or     edx,eax
c0013d86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d8d:	05 fc 0f 00 00       	add    eax,0xffc
c0013d92:	83 ca 03             	or     edx,0x3
c0013d95:	89 10                	mov    DWORD PTR [eax],edx
c0013d97:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013d9c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	50                   	push   eax
c0013da6:	e8 07 5f ff ff       	call   c0009cb2 <Device::getName()>
c0013dab:	83 c4 10             	add    esp,0x10
c0013dae:	83 ec 08             	sub    esp,0x8
c0013db1:	68 c7 4f 02 c0       	push   0xc0024fc7
c0013db6:	50                   	push   eax
c0013db7:	e8 94 c9 fe ff       	call   c0000750 <strcmp>
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	85 c0                	test   eax,eax
c0013dc1:	0f 94 c0             	sete   al
c0013dc4:	0f b6 c0             	movzx  eax,al
c0013dc7:	85 c0                	test   eax,eax
c0013dc9:	74 68                	je     c0013e33 <VAS::VAS(bool)+0x1e1>
c0013dcb:	fa                   	cli    
c0013dcc:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013dd1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013dd7:	05 68 09 00 00       	add    eax,0x968
c0013ddc:	83 ec 0c             	sub    esp,0xc
c0013ddf:	50                   	push   eax
c0013de0:	e8 59 ad ff ff       	call   c000eb3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013de5:	83 c4 10             	add    esp,0x10
c0013de8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ded:	89 c3                	mov    ebx,eax
c0013def:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013df4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013dfa:	05 68 09 00 00       	add    eax,0x968
c0013dff:	83 ec 0c             	sub    esp,0xc
c0013e02:	50                   	push   eax
c0013e03:	e8 36 ad ff ff       	call   c000eb3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e08:	83 c4 10             	add    esp,0x10
c0013e0b:	83 ec 08             	sub    esp,0x8
c0013e0e:	50                   	push   eax
c0013e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e13:	e8 08 f7 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e22:	6a 11                	push   0x11
c0013e24:	53                   	push   ebx
c0013e25:	50                   	push   eax
c0013e26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e2a:	e8 eb fa ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e2f:	83 c4 10             	add    esp,0x10
c0013e32:	fb                   	sti    
c0013e33:	90                   	nop
c0013e34:	83 c4 28             	add    esp,0x28
c0013e37:	5b                   	pop    ebx
c0013e38:	c3                   	ret    
c0013e39:	90                   	nop

c0013e3a <VAS::evict(unsigned long)>:
c0013e3a:	55                   	push   ebp
c0013e3b:	57                   	push   edi
c0013e3c:	56                   	push   esi
c0013e3d:	53                   	push   ebx
c0013e3e:	83 ec 24             	sub    esp,0x24
c0013e41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e4d:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013e52:	50                   	push   eax
c0013e53:	68 d5 4f 02 c0       	push   0xc0024fd5
c0013e58:	e8 1f 31 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013e5d:	e8 33 f5 ff ff       	call   c0013395 <Virt::allocateSwapfilePage()>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	89 c7                	mov    edi,eax
c0013e67:	a1 6c 6f 02 c0       	mov    eax,ds:0xc0026f6c
c0013e6c:	85 c0                	test   eax,eax
c0013e6e:	7e 40                	jle    c0013eb0 <VAS::evict(unsigned long)+0x76>
c0013e70:	89 ee                	mov    esi,ebp
c0013e72:	31 db                	xor    ebx,ebx
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	57                   	push   edi
c0013e78:	e8 02 f5 ff ff       	call   c001337f <Virt::swapIDToSector(unsigned long)>
c0013e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e80:	01 d8                	add    eax,ebx
c0013e82:	6a 01                	push   0x1
c0013e84:	31 d2                	xor    edx,edx
c0013e86:	83 c3 01             	add    ebx,0x1
c0013e89:	52                   	push   edx
c0013e8a:	81 c6 00 02 00 00    	add    esi,0x200
c0013e90:	50                   	push   eax
c0013e91:	0f be 05 78 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f78
c0013e98:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013e9f:	50                   	push   eax
c0013ea0:	e8 39 6c ff ff       	call   c000aade <LogicalDisk::write(unsigned long long, int, void*)>
c0013ea5:	83 c4 20             	add    esp,0x20
c0013ea8:	39 1d 6c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f6c,ebx
c0013eae:	7f c4                	jg     c0013e74 <VAS::evict(unsigned long)+0x3a>
c0013eb0:	83 ec 08             	sub    esp,0x8
c0013eb3:	c1 e7 0c             	shl    edi,0xc
c0013eb6:	55                   	push   ebp
c0013eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ebb:	50                   	push   eax
c0013ebc:	e8 5f f6 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0013ec1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ec3:	89 d3                	mov    ebx,edx
c0013ec5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013ecb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013ed1:	09 d7                	or     edi,edx
c0013ed3:	89 38                	mov    DWORD PTR [eax],edi
c0013ed5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ed8:	8b 15 88 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d288
c0013ede:	83 c2 01             	add    edx,0x1
c0013ee1:	89 15 88 d2 02 c0    	mov    DWORD PTR ds:0xc002d288,edx
c0013ee7:	e8 3f bf ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c0013eec:	0f 20 d8             	mov    eax,cr3
c0013eef:	0f 22 d8             	mov    cr3,eax
c0013ef2:	8b 0d 88 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d288
c0013ef8:	51                   	push   ecx
c0013ef9:	55                   	push   ebp
c0013efa:	53                   	push   ebx
c0013efb:	68 78 4d 02 c0       	push   0xc0024d78
c0013f00:	e8 77 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f05:	83 c4 18             	add    esp,0x18
c0013f08:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0013f0d:	50                   	push   eax
c0013f0e:	8d 50 01             	lea    edx,[eax+0x1]
c0013f11:	68 ea 4f 02 c0       	push   0xc0024fea
c0013f16:	89 15 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,edx
c0013f1c:	e8 5b 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f21:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013f26:	c7 44 24 40 fc 4f 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024ffc
c0013f2e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013f32:	83 c4 2c             	add    esp,0x2c
c0013f35:	5b                   	pop    ebx
c0013f36:	5e                   	pop    esi
c0013f37:	5f                   	pop    edi
c0013f38:	5d                   	pop    ebp
c0013f39:	e9 3e 30 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013f3e <VAS::canLockPage(unsigned long)>:
c0013f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f42:	50                   	push   eax
c0013f43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f47:	52                   	push   edx
c0013f48:	e8 d3 f5 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0013f4d:	59                   	pop    ecx
c0013f4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f50:	5a                   	pop    edx
c0013f51:	c1 e8 0b             	shr    eax,0xb
c0013f54:	83 e0 01             	and    eax,0x1
c0013f57:	c3                   	ret    

c0013f58 <VAS::unlockPage(unsigned long)>:
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f5f:	50                   	push   eax
c0013f60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013f64:	52                   	push   edx
c0013f65:	e8 b6 f5 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0013f6a:	59                   	pop    ecx
c0013f6b:	5a                   	pop    edx
c0013f6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f6e:	f6 c6 08             	test   dh,0x8
c0013f71:	75 09                	jne    c0013f7c <VAS::unlockPage(unsigned long)+0x24>
c0013f73:	80 ce 08             	or     dh,0x8
c0013f76:	89 10                	mov    DWORD PTR [eax],edx
c0013f78:	83 c4 0c             	add    esp,0xc
c0013f7b:	c3                   	ret    
c0013f7c:	c7 44 24 10 ac 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024dac
c0013f84:	83 c4 0c             	add    esp,0xc
c0013f87:	e9 14 bd ff ff       	jmp    c000fca0 <KePanic(char const*)>

c0013f8c <VAS::canLockPages(unsigned long, int)>:
c0013f8c:	55                   	push   ebp
c0013f8d:	57                   	push   edi
c0013f8e:	56                   	push   esi
c0013f8f:	53                   	push   ebx
c0013f90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013f94:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013f98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f9c:	85 ff                	test   edi,edi
c0013f9e:	7e 23                	jle    c0013fc3 <VAS::canLockPages(unsigned long, int)+0x37>
c0013fa0:	31 f6                	xor    esi,esi
c0013fa2:	eb 0d                	jmp    c0013fb1 <VAS::canLockPages(unsigned long, int)+0x25>
c0013fa4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013faa:	83 c6 01             	add    esi,0x1
c0013fad:	39 f7                	cmp    edi,esi
c0013faf:	74 0d                	je     c0013fbe <VAS::canLockPages(unsigned long, int)+0x32>
c0013fb1:	53                   	push   ebx
c0013fb2:	55                   	push   ebp
c0013fb3:	e8 86 ff ff ff       	call   c0013f3e <VAS::canLockPage(unsigned long)>
c0013fb8:	5a                   	pop    edx
c0013fb9:	84 c0                	test   al,al
c0013fbb:	59                   	pop    ecx
c0013fbc:	75 e6                	jne    c0013fa4 <VAS::canLockPages(unsigned long, int)+0x18>
c0013fbe:	5b                   	pop    ebx
c0013fbf:	5e                   	pop    esi
c0013fc0:	5f                   	pop    edi
c0013fc1:	5d                   	pop    ebp
c0013fc2:	c3                   	ret    
c0013fc3:	b0 01                	mov    al,0x1
c0013fc5:	eb f7                	jmp    c0013fbe <VAS::canLockPages(unsigned long, int)+0x32>
c0013fc7:	90                   	nop

c0013fc8 <VAS::unlockPages(unsigned long, int)>:
c0013fc8:	55                   	push   ebp
c0013fc9:	57                   	push   edi
c0013fca:	56                   	push   esi
c0013fcb:	53                   	push   ebx
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fd3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013fd7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013fdb:	85 ff                	test   edi,edi
c0013fdd:	7e 1c                	jle    c0013ffb <VAS::unlockPages(unsigned long, int)+0x33>
c0013fdf:	31 f6                	xor    esi,esi
c0013fe1:	83 ec 08             	sub    esp,0x8
c0013fe4:	83 c6 01             	add    esi,0x1
c0013fe7:	53                   	push   ebx
c0013fe8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013fee:	55                   	push   ebp
c0013fef:	e8 64 ff ff ff       	call   c0013f58 <VAS::unlockPage(unsigned long)>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	39 f7                	cmp    edi,esi
c0013ff9:	75 e6                	jne    c0013fe1 <VAS::unlockPages(unsigned long, int)+0x19>
c0013ffb:	83 c4 0c             	add    esp,0xc
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	5f                   	pop    edi
c0014001:	5d                   	pop    ebp
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014004:	55                   	push   ebp
c0014005:	57                   	push   edi
c0014006:	56                   	push   esi
c0014007:	53                   	push   ebx
c0014008:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001400e:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014015:	89 c5                	mov    ebp,eax
c0014017:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c001401d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014022:	77 11                	ja     c0014035 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014024:	85 ed                	test   ebp,ebp
c0014026:	75 1d                	jne    c0014045 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014028:	31 c0                	xor    eax,eax
c001402a:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014030:	5b                   	pop    ebx
c0014031:	5e                   	pop    esi
c0014032:	5f                   	pop    edi
c0014033:	5d                   	pop    ebp
c0014034:	c3                   	ret    
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	68 11 50 02 c0       	push   0xc0025011
c001403d:	e8 5e bc ff ff       	call   c000fca0 <KePanic(char const*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	83 ec 08             	sub    esp,0x8
c0014048:	55                   	push   ebp
c0014049:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c0014050:	53                   	push   ebx
c0014051:	e8 ca f4 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	89 c3                	mov    ebx,eax
c001405b:	85 c0                	test   eax,eax
c001405d:	74 c9                	je     c0014028 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001405f:	8b 38                	mov    edi,DWORD PTR [eax]
c0014061:	f7 c7 00 02 00 00    	test   edi,0x200
c0014067:	0f 85 b3 00 00 00    	jne    c0014120 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c001406d:	89 f8                	mov    eax,edi
c001406f:	25 01 04 00 00       	and    eax,0x401
c0014074:	3d 00 04 00 00       	cmp    eax,0x400
c0014079:	75 ad                	jne    c0014028 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001407b:	e8 14 be ff ff       	call   c000fe94 <Phys::allocatePage()>
c0014080:	c1 ef 0c             	shr    edi,0xc
c0014083:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014085:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001408b:	09 c2                	or     edx,eax
c001408d:	81 ca 01 08 00 00    	or     edx,0x801
c0014093:	89 13                	mov    DWORD PTR [ebx],edx
c0014095:	8b 15 6c 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f6c
c001409b:	85 d2                	test   edx,edx
c001409d:	7e 4d                	jle    c00140ec <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c001409f:	89 ee                	mov    esi,ebp
c00140a1:	31 db                	xor    ebx,ebx
c00140a3:	83 ec 08             	sub    esp,0x8
c00140a6:	56                   	push   esi
c00140a7:	68 38 50 02 c0       	push   0xc0025038
c00140ac:	e8 cb 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00140b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140b4:	e8 c6 f2 ff ff       	call   c001337f <Virt::swapIDToSector(unsigned long)>
c00140b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00140bc:	01 d8                	add    eax,ebx
c00140be:	6a 01                	push   0x1
c00140c0:	31 d2                	xor    edx,edx
c00140c2:	83 c3 01             	add    ebx,0x1
c00140c5:	52                   	push   edx
c00140c6:	81 c6 00 02 00 00    	add    esi,0x200
c00140cc:	50                   	push   eax
c00140cd:	0f be 05 78 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f78
c00140d4:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00140db:	50                   	push   eax
c00140dc:	e8 91 69 ff ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c00140e1:	83 c4 20             	add    esp,0x20
c00140e4:	39 1d 6c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f6c,ebx
c00140ea:	7f b7                	jg     c00140a3 <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c00140ec:	83 ec 04             	sub    esp,0x4
c00140ef:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c00140f4:	83 e8 01             	sub    eax,0x1
c00140f7:	50                   	push   eax
c00140f8:	a3 88 d2 02 c0       	mov    ds:0xc002d288,eax
c00140fd:	55                   	push   ebp
c00140fe:	68 23 50 02 c0       	push   0xc0025023
c0014103:	e8 74 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014108:	89 3c 24             	mov    DWORD PTR [esp],edi
c001410b:	e8 4c f2 ff ff       	call   c001335c <Virt::freeSwapfilePage(unsigned long)>
c0014110:	0f 20 d8             	mov    eax,cr3
c0014113:	0f 22 d8             	mov    cr3,eax
c0014116:	b0 01                	mov    al,0x1
c0014118:	83 c4 10             	add    esp,0x10
c001411b:	e9 0a ff ff ff       	jmp    c001402a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	68 dc 4d 02 c0       	push   0xc0024ddc
c0014128:	e8 4f 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001412d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001412f:	e8 60 bd ff ff       	call   c000fe94 <Phys::allocatePage()>
c0014134:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001413a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001413c:	83 c9 01             	or     ecx,0x1
c001413f:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014141:	0f 20 da             	mov    edx,cr3
c0014144:	0f 22 da             	mov    cr3,edx
c0014147:	ba 00 10 00 00       	mov    edx,0x1000
c001414c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014150:	89 d1                	mov    ecx,edx
c0014152:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014154:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014156:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001415c:	09 c8                	or     eax,ecx
c001415e:	83 c8 02             	or     eax,0x2
c0014161:	89 03                	mov    DWORD PTR [ebx],eax
c0014163:	0f 20 d8             	mov    eax,cr3
c0014166:	0f 22 d8             	mov    cr3,eax
c0014169:	8d 74 24 10          	lea    esi,[esp+0x10]
c001416d:	89 ef                	mov    edi,ebp
c001416f:	89 d1                	mov    ecx,edx
c0014171:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014173:	b0 01                	mov    al,0x1
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	e9 ad fe ff ff       	jmp    c001402a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c001417d:	90                   	nop

c001417e <VAS::lockPage(unsigned long)>:
c001417e:	56                   	push   esi
c001417f:	53                   	push   ebx
c0014180:	83 ec 04             	sub    esp,0x4
c0014183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014187:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001418b:	50                   	push   eax
c001418c:	56                   	push   esi
c001418d:	e8 8e f3 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0014192:	5a                   	pop    edx
c0014193:	89 c3                	mov    ebx,eax
c0014195:	59                   	pop    ecx
c0014196:	8b 00                	mov    eax,DWORD PTR [eax]
c0014198:	a8 01                	test   al,0x1
c001419a:	74 10                	je     c00141ac <VAS::lockPage(unsigned long)+0x2e>
c001419c:	f6 c4 08             	test   ah,0x8
c001419f:	74 28                	je     c00141c9 <VAS::lockPage(unsigned long)+0x4b>
c00141a1:	80 e4 f7             	and    ah,0xf7
c00141a4:	89 03                	mov    DWORD PTR [ebx],eax
c00141a6:	83 c4 04             	add    esp,0x4
c00141a9:	5b                   	pop    ebx
c00141aa:	5e                   	pop    esi
c00141ab:	c3                   	ret    
c00141ac:	83 ec 08             	sub    esp,0x8
c00141af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141b4:	50                   	push   eax
c00141b5:	56                   	push   esi
c00141b6:	e8 49 fe ff ff       	call   c0014004 <VAS::tryLoadBackOffDisk(unsigned long)>
c00141bb:	83 c4 10             	add    esp,0x10
c00141be:	84 c0                	test   al,al
c00141c0:	74 19                	je     c00141db <VAS::lockPage(unsigned long)+0x5d>
c00141c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141c4:	f6 c4 08             	test   ah,0x8
c00141c7:	75 d8                	jne    c00141a1 <VAS::lockPage(unsigned long)+0x23>
c00141c9:	c7 44 24 10 ac 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024dac
c00141d1:	83 c4 04             	add    esp,0x4
c00141d4:	5b                   	pop    ebx
c00141d5:	5e                   	pop    esi
c00141d6:	e9 c5 ba ff ff       	jmp    c000fca0 <KePanic(char const*)>
c00141db:	83 ec 0c             	sub    esp,0xc
c00141de:	68 fc 4d 02 c0       	push   0xc0024dfc
c00141e3:	e8 b8 ba ff ff       	call   c000fca0 <KePanic(char const*)>
c00141e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141ea:	83 c4 10             	add    esp,0x10
c00141ed:	eb ad                	jmp    c001419c <VAS::lockPage(unsigned long)+0x1e>
c00141ef:	90                   	nop

c00141f0 <VAS::lockPages(unsigned long, int)>:
c00141f0:	55                   	push   ebp
c00141f1:	57                   	push   edi
c00141f2:	56                   	push   esi
c00141f3:	53                   	push   ebx
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00141fb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00141ff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014203:	85 ff                	test   edi,edi
c0014205:	7e 1c                	jle    c0014223 <VAS::lockPages(unsigned long, int)+0x33>
c0014207:	31 f6                	xor    esi,esi
c0014209:	83 ec 08             	sub    esp,0x8
c001420c:	83 c6 01             	add    esi,0x1
c001420f:	53                   	push   ebx
c0014210:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014216:	55                   	push   ebp
c0014217:	e8 62 ff ff ff       	call   c001417e <VAS::lockPage(unsigned long)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	39 f7                	cmp    edi,esi
c0014221:	75 e6                	jne    c0014209 <VAS::lockPages(unsigned long, int)+0x19>
c0014223:	83 c4 0c             	add    esp,0xc
c0014226:	5b                   	pop    ebx
c0014227:	5e                   	pop    esi
c0014228:	5f                   	pop    edi
c0014229:	5d                   	pop    ebp
c001422a:	c3                   	ret    
c001422b:	90                   	nop

c001422c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001422c:	55                   	push   ebp
c001422d:	57                   	push   edi
c001422e:	56                   	push   esi
c001422f:	53                   	push   ebx
c0014230:	83 ec 28             	sub    esp,0x28
c0014233:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014237:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001423b:	50                   	push   eax
c001423c:	e8 f6 ef ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0014241:	83 c4 0c             	add    esp,0xc
c0014244:	89 c5                	mov    ebp,eax
c0014246:	6a 07                	push   0x7
c0014248:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001424c:	52                   	push   edx
c001424d:	56                   	push   esi
c001424e:	e8 cb f7 ff ff       	call   c0013a1e <VAS::allocatePages(int, int)>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	89 c7                	mov    edi,eax
c0014258:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001425c:	85 c9                	test   ecx,ecx
c001425e:	74 2f                	je     c001428f <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014260:	31 db                	xor    ebx,ebx
c0014262:	e8 2d bc ff ff       	call   c000fe94 <Phys::allocatePage()>
c0014267:	83 c3 01             	add    ebx,0x1
c001426a:	6a 03                	push   0x3
c001426c:	55                   	push   ebp
c001426d:	50                   	push   eax
c001426e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014272:	56                   	push   esi
c0014273:	e8 a2 f6 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014278:	6a 07                	push   0x7
c001427a:	57                   	push   edi
c001427b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001427f:	50                   	push   eax
c0014280:	56                   	push   esi
c0014281:	e8 94 f6 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014286:	83 c4 20             	add    esp,0x20
c0014289:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c001428d:	75 d3                	jne    c0014262 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001428f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014293:	89 28                	mov    DWORD PTR [eax],ebp
c0014295:	83 c4 1c             	add    esp,0x1c
c0014298:	89 f8                	mov    eax,edi
c001429a:	5b                   	pop    ebx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	5d                   	pop    ebp
c001429e:	c3                   	ret    
c001429f:	90                   	nop

c00142a0 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00142a0:	53                   	push   ebx
c00142a1:	83 ec 14             	sub    esp,0x14
c00142a4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00142a8:	68 2c 4e 02 c0       	push   0xc0024e2c
c00142ad:	e8 ca 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142b2:	c7 04 24 8c 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e8c
c00142b9:	e8 be 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142be:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142c2:	83 c4 18             	add    esp,0x18
c00142c5:	5b                   	pop    ebx
c00142c6:	e9 74 f2 ff ff       	jmp    c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c00142cb:	90                   	nop

c00142cc <VAS::scanForEviction()>:
c00142cc:	57                   	push   edi
c00142cd:	56                   	push   esi
c00142ce:	31 f6                	xor    esi,esi
c00142d0:	53                   	push   ebx
c00142d1:	83 ec 18             	sub    esp,0x18
c00142d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142d8:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00142dd:	50                   	push   eax
c00142de:	68 08 4f 02 c0       	push   0xc0024f08
c00142e3:	e8 94 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142e8:	c7 04 24 51 50 02 c0 	mov    DWORD PTR [esp],0xc0025051
c00142ef:	e8 88 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142f4:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014300:	75 0e                	jne    c0014310 <VAS::scanForEviction()+0x44>
c0014302:	89 da                	mov    edx,ebx
c0014304:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014307:	c1 ea 16             	shr    edx,0x16
c001430a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001430e:	74 5b                	je     c001436b <VAS::scanForEviction()+0x9f>
c0014310:	83 ec 08             	sub    esp,0x8
c0014313:	53                   	push   ebx
c0014314:	57                   	push   edi
c0014315:	e8 06 f2 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	8b 10                	mov    edx,DWORD PTR [eax]
c001431f:	89 d1                	mov    ecx,edx
c0014321:	c1 e9 0c             	shr    ecx,0xc
c0014324:	74 10                	je     c0014336 <VAS::scanForEviction()+0x6a>
c0014326:	89 d1                	mov    ecx,edx
c0014328:	81 e1 00 0c 00 00    	and    ecx,0xc00
c001432e:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014334:	74 40                	je     c0014376 <VAS::scanForEviction()+0xaa>
c0014336:	81 c3 00 10 00 00    	add    ebx,0x1000
c001433c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014342:	76 2d                	jbe    c0014371 <VAS::scanForEviction()+0xa5>
c0014344:	83 c6 01             	add    esi,0x1
c0014347:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001434e:	83 fe 03             	cmp    esi,0x3
c0014351:	74 37                	je     c001438a <VAS::scanForEviction()+0xbe>
c0014353:	31 db                	xor    ebx,ebx
c0014355:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001435b:	75 b3                	jne    c0014310 <VAS::scanForEviction()+0x44>
c001435d:	89 da                	mov    edx,ebx
c001435f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014362:	c1 ea 16             	shr    edx,0x16
c0014365:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014369:	75 a5                	jne    c0014310 <VAS::scanForEviction()+0x44>
c001436b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014371:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014374:	eb 84                	jmp    c00142fa <VAS::scanForEviction()+0x2e>
c0014376:	f6 c2 01             	test   dl,0x1
c0014379:	74 bb                	je     c0014336 <VAS::scanForEviction()+0x6a>
c001437b:	f6 c2 20             	test   dl,0x20
c001437e:	74 13                	je     c0014393 <VAS::scanForEviction()+0xc7>
c0014380:	83 e2 df             	and    edx,0xffffffdf
c0014383:	89 10                	mov    DWORD PTR [eax],edx
c0014385:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014388:	eb ac                	jmp    c0014336 <VAS::scanForEviction()+0x6a>
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	31 c0                	xor    eax,eax
c001438f:	5b                   	pop    ebx
c0014390:	5e                   	pop    esi
c0014391:	5f                   	pop    edi
c0014392:	c3                   	ret    
c0014393:	83 ec 08             	sub    esp,0x8
c0014396:	89 d0                	mov    eax,edx
c0014398:	25 00 f0 ff ff       	and    eax,0xfffff000
c001439d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143a1:	53                   	push   ebx
c00143a2:	68 6d 50 02 c0       	push   0xc002506d
c00143a7:	e8 d0 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143ac:	58                   	pop    eax
c00143ad:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00143b0:	5a                   	pop    edx
c00143b1:	51                   	push   ecx
c00143b2:	57                   	push   edi
c00143b3:	e8 82 fa ff ff       	call   c0013e3a <VAS::evict(unsigned long)>
c00143b8:	5b                   	pop    ebx
c00143b9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00143bc:	5e                   	pop    esi
c00143bd:	50                   	push   eax
c00143be:	68 81 50 02 c0       	push   0xc0025081
c00143c3:	e8 b4 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143c8:	58                   	pop    eax
c00143c9:	5a                   	pop    edx
c00143ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ce:	50                   	push   eax
c00143cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143d3:	68 94 50 02 c0       	push   0xc0025094
c00143d8:	e8 9f 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143dd:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00143e0:	81 c1 00 10 00 00    	add    ecx,0x1000
c00143e6:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00143e9:	8b 3d 30 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d330
c00143ef:	5b                   	pop    ebx
c00143f0:	5e                   	pop    esi
c00143f1:	57                   	push   edi
c00143f2:	68 28 4f 02 c0       	push   0xc0024f28
c00143f7:	e8 80 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014403:	83 c4 10             	add    esp,0x10
c0014406:	5b                   	pop    ebx
c0014407:	5e                   	pop    esi
c0014408:	5f                   	pop    edi
c0014409:	c3                   	ret    

c001440a <mapVASFirstTime>:
c001440a:	55                   	push   ebp
c001440b:	57                   	push   edi
c001440c:	56                   	push   esi
c001440d:	53                   	push   ebx
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014416:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014419:	83 fa 01             	cmp    edx,0x1
c001441c:	0f 84 cb 00 00 00    	je     c00144ed <mapVASFirstTime+0xe3>
c0014422:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014425:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014428:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001442d:	c1 e5 15             	shl    ebp,0x15
c0014430:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014435:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001443b:	29 eb                	sub    ebx,ebp
c001443d:	29 ef                	sub    edi,ebp
c001443f:	e8 50 ba ff ff       	call   c000fe94 <Phys::allocatePage()>
c0014444:	83 ec 0c             	sub    esp,0xc
c0014447:	68 03 04 00 00       	push   0x403
c001444c:	6a 01                	push   0x1
c001444e:	53                   	push   ebx
c001444f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014455:	50                   	push   eax
c0014456:	56                   	push   esi
c0014457:	e8 a8 f6 ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001445c:	83 c4 20             	add    esp,0x20
c001445f:	39 fb                	cmp    ebx,edi
c0014461:	75 dc                	jne    c001443f <mapVASFirstTime+0x35>
c0014463:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014468:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001446d:	29 eb                	sub    ebx,ebp
c001446f:	29 ef                	sub    edi,ebp
c0014471:	e8 1e ba ff ff       	call   c000fe94 <Phys::allocatePage()>
c0014476:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001447a:	83 fa 01             	cmp    edx,0x1
c001447d:	19 d2                	sbb    edx,edx
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	83 e2 04             	and    edx,0x4
c0014485:	81 c2 03 04 00 00    	add    edx,0x403
c001448b:	52                   	push   edx
c001448c:	6a 01                	push   0x1
c001448e:	53                   	push   ebx
c001448f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014495:	50                   	push   eax
c0014496:	56                   	push   esi
c0014497:	e8 68 f6 ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001449c:	83 c4 20             	add    esp,0x20
c001449f:	39 df                	cmp    edi,ebx
c00144a1:	75 ce                	jne    c0014471 <mapVASFirstTime+0x67>
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c00144ab:	6a 04                	push   0x4
c00144ad:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00144b3:	6a ff                	push   0xffffffff
c00144b5:	c1 eb 0c             	shr    ebx,0xc
c00144b8:	53                   	push   ebx
c00144b9:	68 00 80 02 c0       	push   0xc0028000
c00144be:	56                   	push   esi
c00144bf:	e8 f6 f1 ff ff       	call   c00136ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00144c4:	83 c4 14             	add    esp,0x14
c00144c7:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c00144cc:	6a 04                	push   0x4
c00144ce:	6a ff                	push   0xffffffff
c00144d0:	53                   	push   ebx
c00144d1:	68 00 80 02 c0       	push   0xc0028000
c00144d6:	50                   	push   eax
c00144d7:	e8 de f1 ff ff       	call   c00136ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00144dc:	0f 20 d8             	mov    eax,cr3
c00144df:	0f 22 d8             	mov    cr3,eax
c00144e2:	83 c4 20             	add    esp,0x20
c00144e5:	83 c4 0c             	add    esp,0xc
c00144e8:	5b                   	pop    ebx
c00144e9:	5e                   	pop    esi
c00144ea:	5f                   	pop    edi
c00144eb:	5d                   	pop    ebp
c00144ec:	c3                   	ret    
c00144ed:	83 ec 0c             	sub    esp,0xc
c00144f0:	68 a1 50 02 c0       	push   0xc00250a1
c00144f5:	e8 82 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	83 c4 0c             	add    esp,0xc
c0014500:	5b                   	pop    ebx
c0014501:	5e                   	pop    esi
c0014502:	5f                   	pop    edi
c0014503:	5d                   	pop    ebp
c0014504:	c3                   	ret    

c0014505 <SysAlarm(regs*)>:
c0014505:	53                   	push   ebx
c0014506:	83 ec 10             	sub    esp,0x10
c0014509:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001450d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014510:	68 ba 50 02 c0       	push   0xc00250ba
c0014515:	e8 62 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001451a:	83 c4 0c             	add    esp,0xc
c001451d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014520:	31 d2                	xor    edx,edx
c0014522:	52                   	push   edx
c0014523:	50                   	push   eax
c0014524:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001452a:	e8 ad 09 00 00       	call   c0014edc <KeAlarm(ThreadControlBlock*, unsigned long long)>
c001452f:	83 c4 18             	add    esp,0x18
c0014532:	5b                   	pop    ebx
c0014533:	c3                   	ret    

c0014534 <SysEject(regs*)>:
c0014534:	83 ec 0c             	sub    esp,0xc
c0014537:	83 ca ff             	or     edx,0xffffffff
c001453a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001453e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014541:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014546:	83 e9 41             	sub    ecx,0x41
c0014549:	83 f9 19             	cmp    ecx,0x19
c001454c:	77 18                	ja     c0014566 <SysEject(regs*)+0x32>
c001454e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0014555:	85 c9                	test   ecx,ecx
c0014557:	74 0d                	je     c0014566 <SysEject(regs*)+0x32>
c0014559:	83 ec 0c             	sub    esp,0xc
c001455c:	51                   	push   ecx
c001455d:	e8 a6 64 ff ff       	call   c000aa08 <LogicalDisk::eject()>
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	99                   	cdq    
c0014566:	83 c4 0c             	add    esp,0xc
c0014569:	c3                   	ret    

c001456a <SysExit(regs*)>:
c001456a:	83 ec 18             	sub    esp,0x18
c001456d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014571:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014574:	e8 af 2a 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c0014579:	83 c8 ff             	or     eax,0xffffffff
c001457c:	83 c4 1c             	add    esp,0x1c
c001457f:	89 c2                	mov    edx,eax
c0014581:	c3                   	ret    

c0014582 <SysGetCwd(regs*)>:
c0014582:	83 ec 10             	sub    esp,0x10
c0014585:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014589:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001458c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001458f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014594:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014597:	e8 82 38 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c001459c:	83 c4 1c             	add    esp,0x1c
c001459f:	99                   	cdq    
c00145a0:	c3                   	ret    

c00145a1 <SysGetPID(regs*)>:
c00145a1:	83 ec 14             	sub    esp,0x14
c00145a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145ac:	ff 30                	push   DWORD PTR [eax]
c00145ae:	68 cf 50 02 c0       	push   0xc00250cf
c00145b3:	e8 c4 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00145c2:	83 c4 1c             	add    esp,0x1c
c00145c5:	99                   	cdq    
c00145c6:	c3                   	ret    

c00145c7 <SysGetRAMData(regs*)>:
c00145c7:	8b 0d 7c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d17c
c00145cd:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c00145d2:	03 05 78 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d178
c00145d8:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00145de:	99                   	cdq    
c00145df:	f7 f9                	idiv   ecx
c00145e1:	c1 e0 18             	shl    eax,0x18
c00145e4:	09 c8                	or     eax,ecx
c00145e6:	99                   	cdq    
c00145e7:	c3                   	ret    

c00145e8 <SysGetVGAPtr(regs*)>:
c00145e8:	55                   	push   ebp
c00145e9:	57                   	push   edi
c00145ea:	56                   	push   esi
c00145eb:	53                   	push   ebx
c00145ec:	83 ec 1c             	sub    esp,0x1c
c00145ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00145f3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00145f6:	83 f8 ff             	cmp    eax,0xffffffff
c00145f9:	74 23                	je     c001461e <SysGetVGAPtr(regs*)+0x36>
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	50                   	push   eax
c00145ff:	e8 d0 24 00 00       	call   c0016ad4 <KeProcessFromPID(int)>
c0014604:	31 d2                	xor    edx,edx
c0014606:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	b8 01 00 00 00       	mov    eax,0x1
c0014612:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014617:	75 11                	jne    c001462a <SysGetVGAPtr(regs*)+0x42>
c0014619:	e9 80 00 00 00       	jmp    c001469e <SysGetVGAPtr(regs*)+0xb6>
c001461e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014623:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001462a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001462e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014632:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014638:	74 0c                	je     c0014646 <SysGetVGAPtr(regs*)+0x5e>
c001463a:	83 ec 0c             	sub    esp,0xc
c001463d:	55                   	push   ebp
c001463e:	e8 7c dc ff ff       	call   c00122bf <setActiveTerminal(VgaText*)>
c0014643:	83 c4 10             	add    esp,0x10
c0014646:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014649:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001464c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014651:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014653:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014656:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014659:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c001465f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014662:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014665:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001466b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001466f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014672:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014679:	c1 e8 07             	shr    eax,0x7
c001467c:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014682:	50                   	push   eax
c0014683:	50                   	push   eax
c0014684:	68 de 50 02 c0       	push   0xc00250de
c0014689:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001468c:	05 ac 0f 00 00       	add    eax,0xfac
c0014691:	50                   	push   eax
c0014692:	e8 a9 bf fe ff       	call   c0000640 <strcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	31 c0                	xor    eax,eax
c001469c:	31 d2                	xor    edx,edx
c001469e:	83 c4 1c             	add    esp,0x1c
c00146a1:	5b                   	pop    ebx
c00146a2:	5e                   	pop    esi
c00146a3:	5f                   	pop    edi
c00146a4:	5d                   	pop    ebp
c00146a5:	c3                   	ret    
c00146a6:	66 90                	xchg   ax,ax

c00146a8 <SysKill(regs*)>:
c00146a8:	53                   	push   ebx
c00146a9:	83 ec 08             	sub    esp,0x8
c00146ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146b0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00146b4:	75 16                	jne    c00146cc <SysKill(regs*)+0x24>
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	68 e8 50 02 c0       	push   0xc00250e8
c00146be:	e8 dd b5 ff ff       	call   c000fca0 <KePanic(char const*)>
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	e9 89 00 00 00       	jmp    c0014754 <SysKill(regs*)+0xac>
c00146cb:	90                   	nop
c00146cc:	83 ec 0c             	sub    esp,0xc
c00146cf:	68 4c d3 02 c0       	push   0xc002d34c
c00146d4:	e8 cf dc 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00146d9:	8d 76 00             	lea    esi,[esi+0x0]
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	85 c0                	test   eax,eax
c00146e1:	74 19                	je     c00146fc <SysKill(regs*)+0x54>
c00146e3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146e6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00146e9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00146eb:	74 33                	je     c0014720 <SysKill(regs*)+0x78>
c00146ed:	52                   	push   edx
c00146ee:	52                   	push   edx
c00146ef:	50                   	push   eax
c00146f0:	68 4c d3 02 c0       	push   0xc002d34c
c00146f5:	e8 ba e1 00 00       	call   c00228b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00146fa:	eb e0                	jmp    c00146dc <SysKill(regs*)+0x34>
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	68 40 d3 02 c0       	push   0xc002d340
c0014704:	e8 9f dc 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014709:	8d 76 00             	lea    esi,[esi+0x0]
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	85 c0                	test   eax,eax
c0014711:	74 41                	je     c0014754 <SysKill(regs*)+0xac>
c0014713:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014716:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014719:	39 0a                	cmp    DWORD PTR [edx],ecx
c001471b:	75 27                	jne    c0014744 <SysKill(regs*)+0x9c>
c001471d:	8d 76 00             	lea    esi,[esi+0x0]
c0014720:	51                   	push   ecx
c0014721:	51                   	push   ecx
c0014722:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001472a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001472d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014733:	e8 83 c7 ff ff       	call   c0010ebb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	31 c0                	xor    eax,eax
c001473d:	31 d2                	xor    edx,edx
c001473f:	eb 1b                	jmp    c001475c <SysKill(regs*)+0xb4>
c0014741:	8d 76 00             	lea    esi,[esi+0x0]
c0014744:	52                   	push   edx
c0014745:	52                   	push   edx
c0014746:	50                   	push   eax
c0014747:	68 40 d3 02 c0       	push   0xc002d340
c001474c:	e8 63 e1 00 00       	call   c00228b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014751:	eb b9                	jmp    c001470c <SysKill(regs*)+0x64>
c0014753:	90                   	nop
c0014754:	83 c8 ff             	or     eax,0xffffffff
c0014757:	89 c2                	mov    edx,eax
c0014759:	8d 76 00             	lea    esi,[esi+0x0]
c001475c:	83 c4 08             	add    esp,0x8
c001475f:	5b                   	pop    ebx
c0014760:	c3                   	ret    

c0014761 <SysLoadDLL(regs*)>:
c0014761:	56                   	push   esi
c0014762:	31 d2                	xor    edx,edx
c0014764:	53                   	push   ebx
c0014765:	b8 01 00 00 00       	mov    eax,0x1
c001476a:	53                   	push   ebx
c001476b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001476f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014773:	0f 84 82 00 00 00    	je     c00147fb <SysLoadDLL(regs*)+0x9a>
c0014779:	83 ec 0c             	sub    esp,0xc
c001477c:	68 14 01 00 00       	push   0x114
c0014781:	e8 c5 b0 ff ff       	call   c000f84b <malloc>
c0014786:	83 c4 0c             	add    esp,0xc
c0014789:	89 c3                	mov    ebx,eax
c001478b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014790:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014793:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014796:	53                   	push   ebx
c0014797:	e8 ee 39 ff ff       	call   c000818a <File::File(char const*, Process*)>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	31 d2                	xor    edx,edx
c00147a1:	b8 02 00 00 00       	mov    eax,0x2
c00147a6:	85 db                	test   ebx,ebx
c00147a8:	74 51                	je     c00147fb <SysLoadDLL(regs*)+0x9a>
c00147aa:	83 ec 0c             	sub    esp,0xc
c00147ad:	53                   	push   ebx
c00147ae:	e8 b9 3c ff ff       	call   c000846c <File::exists()>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	84 c0                	test   al,al
c00147b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ba:	75 11                	jne    c00147cd <SysLoadDLL(regs*)+0x6c>
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	53                   	push   ebx
c00147c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	b8 03 00 00 00       	mov    eax,0x3
c00147cb:	eb 2c                	jmp    c00147f9 <SysLoadDLL(regs*)+0x98>
c00147cd:	83 ec 0c             	sub    esp,0xc
c00147d0:	53                   	push   ebx
c00147d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147d4:	83 c4 0c             	add    esp,0xc
c00147d7:	6a 00                	push   0x0
c00147d9:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c00147df:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147e2:	e8 a5 16 00 00       	call   c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	88 c1                	mov    cl,al
c00147ec:	31 d2                	xor    edx,edx
c00147ee:	31 c0                	xor    eax,eax
c00147f0:	84 c9                	test   cl,cl
c00147f2:	75 07                	jne    c00147fb <SysLoadDLL(regs*)+0x9a>
c00147f4:	b8 04 00 00 00       	mov    eax,0x4
c00147f9:	31 d2                	xor    edx,edx
c00147fb:	59                   	pop    ecx
c00147fc:	5b                   	pop    ebx
c00147fd:	5e                   	pop    esi
c00147fe:	c3                   	ret    

c00147ff <SysPause(regs*)>:
c00147ff:	83 ec 18             	sub    esp,0x18
c0014802:	6a 08                	push   0x8
c0014804:	e8 df 20 00 00       	call   c00168e8 <blockTask(TaskState)>
c0014809:	31 c0                	xor    eax,eax
c001480b:	31 d2                	xor    edx,edx
c001480d:	83 c4 1c             	add    esp,0x1c
c0014810:	c3                   	ret    

c0014811 <SysPthreadCreate(regs*)>:
c0014811:	83 ec 18             	sub    esp,0x18
c0014814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014819:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001481c:	e8 9f 1e 00 00       	call   c00166c0 <Process::createUserThread()>
c0014821:	31 c0                	xor    eax,eax
c0014823:	31 d2                	xor    edx,edx
c0014825:	83 c4 1c             	add    esp,0x1c
c0014828:	c3                   	ret    

c0014829 <SysPthreadGetTID(regs*)>:
c0014829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001482e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014831:	99                   	cdq    
c0014832:	c3                   	ret    

c0014833 <SysInternalPthreadGetContext(regs*)>:
c0014833:	31 c0                	xor    eax,eax
c0014835:	31 d2                	xor    edx,edx
c0014837:	c3                   	ret    

c0014838 <SysInternalPthreadGetStartLocation(regs*)>:
c0014838:	31 c0                	xor    eax,eax
c001483a:	31 d2                	xor    edx,edx
c001483c:	c3                   	ret    

c001483d <SysPthreadJoin(regs*)>:
c001483d:	31 c0                	xor    eax,eax
c001483f:	31 d2                	xor    edx,edx
c0014841:	c3                   	ret    

c0014842 <SysPthreadExit(regs*)>:
c0014842:	83 ec 18             	sub    esp,0x18
c0014845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014849:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001484c:	e8 d7 27 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c0014851:	83 c8 ff             	or     eax,0xffffffff
c0014854:	83 c4 1c             	add    esp,0x1c
c0014857:	89 c2                	mov    edx,eax
c0014859:	c3                   	ret    

c001485a <SysRead(regs*)>:
c001485a:	57                   	push   edi
c001485b:	56                   	push   esi
c001485c:	53                   	push   ebx
c001485d:	83 ec 10             	sub    esp,0x10
c0014860:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014864:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014867:	83 f8 02             	cmp    eax,0x2
c001486a:	77 10                	ja     c001487c <SysRead(regs*)+0x22>
c001486c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014871:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014874:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001487a:	eb 0e                	jmp    c001488a <SysRead(regs*)+0x30>
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	50                   	push   eax
c0014880:	e8 54 e8 ff ff       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	89 c1                	mov    ecx,eax
c001488a:	83 c8 ff             	or     eax,0xffffffff
c001488d:	85 c9                	test   ecx,ecx
c001488f:	89 c2                	mov    edx,eax
c0014891:	74 28                	je     c00148bb <SysRead(regs*)+0x61>
c0014893:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001489b:	31 ff                	xor    edi,edi
c001489d:	83 ec 0c             	sub    esp,0xc
c00148a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00148a2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00148a6:	52                   	push   edx
c00148a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148aa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00148ad:	57                   	push   edi
c00148ae:	56                   	push   esi
c00148af:	51                   	push   ecx
c00148b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00148b7:	83 c4 20             	add    esp,0x20
c00148ba:	99                   	cdq    
c00148bb:	83 c4 10             	add    esp,0x10
c00148be:	5b                   	pop    ebx
c00148bf:	5e                   	pop    esi
c00148c0:	5f                   	pop    edi
c00148c1:	c3                   	ret    

c00148c2 <SysRegisterSignal(regs*)>:
c00148c2:	83 ec 18             	sub    esp,0x18
c00148c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c9:	6a 00                	push   0x0
c00148cb:	6a 00                	push   0x0
c00148cd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00148d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00148d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148db:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00148e1:	e8 9f c5 ff ff       	call   c0010e85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00148e6:	83 c4 2c             	add    esp,0x2c
c00148e9:	99                   	cdq    
c00148ea:	c3                   	ret    

c00148eb <SysRegistryGetTypeFromPath(regs*)>:
c00148eb:	53                   	push   ebx
c00148ec:	81 ec 40 01 00 00    	sub    esp,0x140
c00148f2:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00148f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148fc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148ff:	e8 b4 96 ff ff       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014904:	83 c4 10             	add    esp,0x10
c0014907:	89 c1                	mov    ecx,eax
c0014909:	85 c0                	test   eax,eax
c001490b:	74 15                	je     c0014922 <SysRegistryGetTypeFromPath(regs*)+0x37>
c001490d:	50                   	push   eax
c001490e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014912:	50                   	push   eax
c0014913:	51                   	push   ecx
c0014914:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014917:	e8 80 92 ff ff       	call   c000db9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001491c:	83 c4 10             	add    esp,0x10
c001491f:	99                   	cdq    
c0014920:	eb 05                	jmp    c0014927 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014922:	83 c8 ff             	or     eax,0xffffffff
c0014925:	89 c2                	mov    edx,eax
c0014927:	81 c4 38 01 00 00    	add    esp,0x138
c001492d:	5b                   	pop    ebx
c001492e:	c3                   	ret    

c001492f <SysRegistryReadExtent(regs*)>:
c001492f:	83 ec 1c             	sub    esp,0x1c
c0014932:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014936:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014939:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001493c:	85 c0                	test   eax,eax
c001493e:	79 1f                	jns    c001495f <SysRegistryReadExtent(regs*)+0x30>
c0014940:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014945:	52                   	push   edx
c0014946:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001494a:	52                   	push   edx
c001494b:	50                   	push   eax
c001494c:	51                   	push   ecx
c001494d:	e8 3c 91 ff ff       	call   c000da8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014952:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001495a:	83 c4 10             	add    esp,0x10
c001495d:	eb 14                	jmp    c0014973 <SysRegistryReadExtent(regs*)+0x44>
c001495f:	83 ec 04             	sub    esp,0x4
c0014962:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014965:	50                   	push   eax
c0014966:	51                   	push   ecx
c0014967:	e8 bc 8b ff ff       	call   c000d528 <CmGetString(Reghive_Tag*, int, char*)>
c001496c:	83 c4 10             	add    esp,0x10
c001496f:	31 c0                	xor    eax,eax
c0014971:	31 d2                	xor    edx,edx
c0014973:	83 c4 1c             	add    esp,0x1c
c0014976:	c3                   	ret    

c0014977 <SysRegistryPathToExtentLookup(regs*)>:
c0014977:	83 ec 14             	sub    esp,0x14
c001497a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001497e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014981:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014984:	e8 2f 96 ff ff       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014989:	83 c4 1c             	add    esp,0x1c
c001498c:	99                   	cdq    
c001498d:	c3                   	ret    

c001498e <SysRegistryEnterDirectory(regs*)>:
c001498e:	83 ec 14             	sub    esp,0x14
c0014991:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014995:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014998:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001499b:	e8 ff 8b ff ff       	call   c000d59f <CmEnterDirectory(Reghive_Tag*, int)>
c00149a0:	83 c4 1c             	add    esp,0x1c
c00149a3:	99                   	cdq    
c00149a4:	c3                   	ret    

c00149a5 <SysRegistryGetNext(regs*)>:
c00149a5:	83 ec 14             	sub    esp,0x14
c00149a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149af:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149b2:	e8 27 8c ff ff       	call   c000d5de <CmGetNext(Reghive_Tag*, int)>
c00149b7:	83 c4 1c             	add    esp,0x1c
c00149ba:	99                   	cdq    
c00149bb:	c3                   	ret    

c00149bc <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00149bc:	57                   	push   edi
c00149bd:	56                   	push   esi
c00149be:	53                   	push   ebx
c00149bf:	81 ec 34 01 00 00    	sub    esp,0x134
c00149c5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00149cc:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00149d0:	57                   	push   edi
c00149d1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00149d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149d7:	e8 c0 91 ff ff       	call   c000db9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00149dc:	89 c3                	mov    ebx,eax
c00149de:	58                   	pop    eax
c00149df:	5a                   	pop    edx
c00149e0:	57                   	push   edi
c00149e1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00149e4:	e8 57 bc fe ff       	call   c0000640 <strcpy>
c00149e9:	89 d8                	mov    eax,ebx
c00149eb:	81 c4 40 01 00 00    	add    esp,0x140
c00149f1:	99                   	cdq    
c00149f2:	5b                   	pop    ebx
c00149f3:	5e                   	pop    esi
c00149f4:	5f                   	pop    edi
c00149f5:	c3                   	ret    

c00149f6 <SysRegistryOpen(regs*)>:
c00149f6:	83 ec 18             	sub    esp,0x18
c00149f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a00:	e8 b3 89 ff ff       	call   c000d3b8 <CmOpen(char const*)>
c0014a05:	83 c4 1c             	add    esp,0x1c
c0014a08:	99                   	cdq    
c0014a09:	c3                   	ret    

c0014a0a <SysRegistryClose(regs*)>:
c0014a0a:	83 ec 18             	sub    esp,0x18
c0014a0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a11:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a14:	e8 bd 8a ff ff       	call   c000d4d6 <CmClose(Reghive_Tag*)>
c0014a19:	31 c0                	xor    eax,eax
c0014a1b:	31 d2                	xor    edx,edx
c0014a1d:	83 c4 1c             	add    esp,0x1c
c0014a20:	c3                   	ret    

c0014a21 <SysRegistryEasyReadString(regs*)>:
c0014a21:	57                   	push   edi
c0014a22:	56                   	push   esi
c0014a23:	53                   	push   ebx
c0014a24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a28:	83 ec 0c             	sub    esp,0xc
c0014a2b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a2e:	e8 85 89 ff ff       	call   c000d3b8 <CmOpen(char const*)>
c0014a33:	5a                   	pop    edx
c0014a34:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a37:	59                   	pop    ecx
c0014a38:	89 c3                	mov    ebx,eax
c0014a3a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a3d:	50                   	push   eax
c0014a3e:	e8 75 95 ff ff       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	89 c1                	mov    ecx,eax
c0014a48:	b8 01 00 00 00       	mov    eax,0x1
c0014a4d:	85 c9                	test   ecx,ecx
c0014a4f:	7e 16                	jle    c0014a67 <SysRegistryEasyReadString(regs*)+0x46>
c0014a51:	50                   	push   eax
c0014a52:	57                   	push   edi
c0014a53:	51                   	push   ecx
c0014a54:	53                   	push   ebx
c0014a55:	e8 ce 8a ff ff       	call   c000d528 <CmGetString(Reghive_Tag*, int, char*)>
c0014a5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a5d:	e8 74 8a ff ff       	call   c000d4d6 <CmClose(Reghive_Tag*)>
c0014a62:	83 c4 10             	add    esp,0x10
c0014a65:	31 c0                	xor    eax,eax
c0014a67:	5b                   	pop    ebx
c0014a68:	31 d2                	xor    edx,edx
c0014a6a:	5e                   	pop    esi
c0014a6b:	5f                   	pop    edi
c0014a6c:	c3                   	ret    

c0014a6d <SysRegistryEasyReadInteger(regs*)>:
c0014a6d:	56                   	push   esi
c0014a6e:	53                   	push   ebx
c0014a6f:	83 ec 10             	sub    esp,0x10
c0014a72:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014a76:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a79:	e8 3a 89 ff ff       	call   c000d3b8 <CmOpen(char const*)>
c0014a7e:	5a                   	pop    edx
c0014a7f:	89 c3                	mov    ebx,eax
c0014a81:	59                   	pop    ecx
c0014a82:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a85:	50                   	push   eax
c0014a86:	e8 2d 95 ff ff       	call   c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c1                	mov    ecx,eax
c0014a90:	b8 01 00 00 00       	mov    eax,0x1
c0014a95:	85 c9                	test   ecx,ecx
c0014a97:	7e 18                	jle    c0014ab1 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014a99:	50                   	push   eax
c0014a9a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014a9d:	51                   	push   ecx
c0014a9e:	53                   	push   ebx
c0014a9f:	e8 ea 8f ff ff       	call   c000da8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014aa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aa7:	e8 2a 8a ff ff       	call   c000d4d6 <CmClose(Reghive_Tag*)>
c0014aac:	83 c4 10             	add    esp,0x10
c0014aaf:	31 c0                	xor    eax,eax
c0014ab1:	59                   	pop    ecx
c0014ab2:	31 d2                	xor    edx,edx
c0014ab4:	5b                   	pop    ebx
c0014ab5:	5e                   	pop    esi
c0014ab6:	c3                   	ret    

c0014ab7 <SysSbrk(regs*)>:
c0014ab7:	56                   	push   esi
c0014ab8:	53                   	push   ebx
c0014ab9:	50                   	push   eax
c0014aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014abf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ac3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ac6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014ac9:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014acf:	85 db                	test   ebx,ebx
c0014ad1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014ad4:	74 02                	je     c0014ad8 <SysSbrk(regs*)+0x21>
c0014ad6:	79 06                	jns    c0014ade <SysSbrk(regs*)+0x27>
c0014ad8:	89 f0                	mov    eax,esi
c0014ada:	31 d2                	xor    edx,edx
c0014adc:	eb 2a                	jmp    c0014b08 <SysSbrk(regs*)+0x51>
c0014ade:	83 c8 ff             	or     eax,0xffffffff
c0014ae1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ae7:	89 c2                	mov    edx,eax
c0014ae9:	77 1d                	ja     c0014b08 <SysSbrk(regs*)+0x51>
c0014aeb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014af1:	50                   	push   eax
c0014af2:	c1 ea 0c             	shr    edx,0xc
c0014af5:	68 07 0c 00 00       	push   0xc07
c0014afa:	52                   	push   edx
c0014afb:	51                   	push   ecx
c0014afc:	e8 1d ef ff ff       	call   c0013a1e <VAS::allocatePages(int, int)>
c0014b01:	89 f0                	mov    eax,esi
c0014b03:	31 d2                	xor    edx,edx
c0014b05:	83 c4 10             	add    esp,0x10
c0014b08:	59                   	pop    ecx
c0014b09:	5b                   	pop    ebx
c0014b0a:	5e                   	pop    esi
c0014b0b:	c3                   	ret    

c0014b0c <SysSetCwd(regs*)>:
c0014b0c:	83 ec 14             	sub    esp,0x14
c0014b0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b13:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b1e:	e8 e8 39 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0014b23:	83 c4 1c             	add    esp,0x1c
c0014b26:	99                   	cdq    
c0014b27:	c3                   	ret    

c0014b28 <SysSetTime(regs*)>:
c0014b28:	55                   	push   ebp
c0014b29:	31 d2                	xor    edx,edx
c0014b2b:	57                   	push   edi
c0014b2c:	56                   	push   esi
c0014b2d:	be 18 00 00 00       	mov    esi,0x18
c0014b32:	53                   	push   ebx
c0014b33:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014b38:	83 ec 20             	sub    esp,0x20
c0014b3b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014b3f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014b42:	f7 f3                	div    ebx
c0014b44:	89 d7                	mov    edi,edx
c0014b46:	31 d2                	xor    edx,edx
c0014b48:	f7 f3                	div    ebx
c0014b4a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014b51:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014b56:	31 d2                	xor    edx,edx
c0014b58:	f7 f3                	div    ebx
c0014b5a:	31 d2                	xor    edx,edx
c0014b5c:	f7 f6                	div    esi
c0014b5e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014b61:	89 d5                	mov    ebp,edx
c0014b63:	89 c3                	mov    ebx,eax
c0014b65:	be 0c 00 00 00       	mov    esi,0xc
c0014b6a:	83 e3 1f             	and    ebx,0x1f
c0014b6d:	c1 e8 05             	shr    eax,0x5
c0014b70:	43                   	inc    ebx
c0014b71:	31 d2                	xor    edx,edx
c0014b73:	f7 f6                	div    esi
c0014b75:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014b79:	57                   	push   edi
c0014b7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b7e:	55                   	push   ebp
c0014b7f:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014b83:	56                   	push   esi
c0014b84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b88:	53                   	push   ebx
c0014b89:	68 09 51 02 c0       	push   0xc0025109
c0014b8e:	e8 e9 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b93:	83 c4 1c             	add    esp,0x1c
c0014b96:	57                   	push   edi
c0014b97:	c1 e7 10             	shl    edi,0x10
c0014b9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b9e:	55                   	push   ebp
c0014b9f:	56                   	push   esi
c0014ba0:	c1 e6 10             	shl    esi,0x10
c0014ba3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ba7:	53                   	push   ebx
c0014ba8:	68 2b 51 02 c0       	push   0xc002512b
c0014bad:	e8 ca 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014bb2:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0014bb7:	31 d2                	xor    edx,edx
c0014bb9:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0014bbf:	31 c0                	xor    eax,eax
c0014bc1:	88 d8                	mov    al,bl
c0014bc3:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014bc7:	0f b7 d8             	movzx  ebx,ax
c0014bca:	09 f3                	or     ebx,esi
c0014bcc:	89 d8                	mov    eax,ebx
c0014bce:	89 eb                	mov    ebx,ebp
c0014bd0:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014bd4:	88 da                	mov    dl,bl
c0014bd6:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014bda:	83 c4 1c             	add    esp,0x1c
c0014bdd:	89 d6                	mov    esi,edx
c0014bdf:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014be5:	09 fe                	or     esi,edi
c0014be7:	56                   	push   esi
c0014be8:	50                   	push   eax
c0014be9:	51                   	push   ecx
c0014bea:	e8 8d 49 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014bef:	83 c4 2c             	add    esp,0x2c
c0014bf2:	83 f0 01             	xor    eax,0x1
c0014bf5:	5b                   	pop    ebx
c0014bf6:	0f b6 c0             	movzx  eax,al
c0014bf9:	5e                   	pop    esi
c0014bfa:	31 d2                	xor    edx,edx
c0014bfc:	5f                   	pop    edi
c0014bfd:	5d                   	pop    ebp
c0014bfe:	c3                   	ret    

c0014bff <SysSymlink(regs*)>:
c0014bff:	56                   	push   esi
c0014c00:	83 c8 ff             	or     eax,0xffffffff
c0014c03:	53                   	push   ebx
c0014c04:	89 c2                	mov    edx,eax
c0014c06:	81 ec 34 02 00 00    	sub    esp,0x234
c0014c0c:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014c13:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014c17:	74 50                	je     c0014c69 <SysSymlink(regs*)+0x6a>
c0014c19:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014c1c:	85 c9                	test   ecx,ecx
c0014c1e:	74 49                	je     c0014c69 <SysSymlink(regs*)+0x6a>
c0014c20:	6a 01                	push   0x1
c0014c22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c2a:	05 0c 01 00 00       	add    eax,0x10c
c0014c2f:	50                   	push   eax
c0014c30:	51                   	push   ecx
c0014c31:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c35:	56                   	push   esi
c0014c36:	e8 37 32 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c3b:	6a 01                	push   0x1
c0014c3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c45:	05 0c 01 00 00       	add    eax,0x10c
c0014c4a:	50                   	push   eax
c0014c4b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c4e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014c55:	53                   	push   ebx
c0014c56:	e8 17 32 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c5b:	83 c4 18             	add    esp,0x18
c0014c5e:	56                   	push   esi
c0014c5f:	53                   	push   ebx
c0014c60:	e8 3b 2e ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0014c65:	83 c4 10             	add    esp,0x10
c0014c68:	99                   	cdq    
c0014c69:	81 c4 34 02 00 00    	add    esp,0x234
c0014c6f:	5b                   	pop    ebx
c0014c70:	5e                   	pop    esi
c0014c71:	c3                   	ret    

c0014c72 <SysTimezone(regs*)>:
c0014c72:	83 ec 0c             	sub    esp,0xc
c0014c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c79:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014c7d:	75 17                	jne    c0014c96 <SysTimezone(regs*)+0x24>
c0014c7f:	83 ec 0c             	sub    esp,0xc
c0014c82:	68 4d 51 02 c0       	push   0xc002514d
c0014c87:	e8 f0 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c8c:	83 c8 ff             	or     eax,0xffffffff
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	89 c2                	mov    edx,eax
c0014c94:	eb 16                	jmp    c0014cac <SysTimezone(regs*)+0x3a>
c0014c96:	83 ec 0c             	sub    esp,0xc
c0014c99:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c9c:	e8 68 43 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014ca1:	31 d2                	xor    edx,edx
c0014ca3:	83 f0 01             	xor    eax,0x1
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	0f b6 c0             	movzx  eax,al
c0014cac:	83 c4 0c             	add    esp,0xc
c0014caf:	c3                   	ret    

c0014cb0 <SysTruncate(regs*)>:
c0014cb0:	55                   	push   ebp
c0014cb1:	57                   	push   edi
c0014cb2:	31 ff                	xor    edi,edi
c0014cb4:	56                   	push   esi
c0014cb5:	53                   	push   ebx
c0014cb6:	83 ec 0c             	sub    esp,0xc
c0014cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014cc0:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014cc3:	89 ce                	mov    esi,ecx
c0014cc5:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014cc9:	0f 84 9a 00 00 00    	je     c0014d69 <SysTruncate(regs*)+0xb9>
c0014ccf:	83 ec 0c             	sub    esp,0xc
c0014cd2:	68 14 01 00 00       	push   0x114
c0014cd7:	e8 6f ab ff ff       	call   c000f84b <malloc>
c0014cdc:	83 c4 0c             	add    esp,0xc
c0014cdf:	89 c3                	mov    ebx,eax
c0014ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ce6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014ce9:	55                   	push   ebp
c0014cea:	53                   	push   ebx
c0014ceb:	e8 9a 34 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	31 d2                	xor    edx,edx
c0014cf5:	b8 03 00 00 00       	mov    eax,0x3
c0014cfa:	85 db                	test   ebx,ebx
c0014cfc:	0f 84 a2 00 00 00    	je     c0014da4 <SysTruncate(regs*)+0xf4>
c0014d02:	51                   	push   ecx
c0014d03:	51                   	push   ecx
c0014d04:	6a 02                	push   0x2
c0014d06:	53                   	push   ebx
c0014d07:	e8 9c 34 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0014d0c:	83 c4 10             	add    esp,0x10
c0014d0f:	85 c0                	test   eax,eax
c0014d11:	74 13                	je     c0014d26 <SysTruncate(regs*)+0x76>
c0014d13:	83 ec 0c             	sub    esp,0xc
c0014d16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d18:	53                   	push   ebx
c0014d19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	b8 04 00 00 00       	mov    eax,0x4
c0014d24:	eb 7c                	jmp    c0014da2 <SysTruncate(regs*)+0xf2>
c0014d26:	52                   	push   edx
c0014d27:	57                   	push   edi
c0014d28:	56                   	push   esi
c0014d29:	53                   	push   ebx
c0014d2a:	e8 8d 35 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014d2f:	83 c4 10             	add    esp,0x10
c0014d32:	85 c0                	test   eax,eax
c0014d34:	74 1b                	je     c0014d51 <SysTruncate(regs*)+0xa1>
c0014d36:	83 ec 0c             	sub    esp,0xc
c0014d39:	53                   	push   ebx
c0014d3a:	e8 c7 34 ff ff       	call   c0008206 <File::close()>
c0014d3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	b8 05 00 00 00       	mov    eax,0x5
c0014d4f:	eb 51                	jmp    c0014da2 <SysTruncate(regs*)+0xf2>
c0014d51:	83 ec 0c             	sub    esp,0xc
c0014d54:	53                   	push   ebx
c0014d55:	e8 ac 34 ff ff       	call   c0008206 <File::close()>
c0014d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	31 c0                	xor    eax,eax
c0014d67:	eb 39                	jmp    c0014da2 <SysTruncate(regs*)+0xf2>
c0014d69:	31 d2                	xor    edx,edx
c0014d6b:	b8 01 00 00 00       	mov    eax,0x1
c0014d70:	83 fd 02             	cmp    ebp,0x2
c0014d73:	7e 2f                	jle    c0014da4 <SysTruncate(regs*)+0xf4>
c0014d75:	83 ec 0c             	sub    esp,0xc
c0014d78:	51                   	push   ecx
c0014d79:	e8 5b e3 ff ff       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0014d7e:	83 c4 10             	add    esp,0x10
c0014d81:	89 c1                	mov    ecx,eax
c0014d83:	31 d2                	xor    edx,edx
c0014d85:	b8 02 00 00 00       	mov    eax,0x2
c0014d8a:	85 c9                	test   ecx,ecx
c0014d8c:	74 16                	je     c0014da4 <SysTruncate(regs*)+0xf4>
c0014d8e:	50                   	push   eax
c0014d8f:	57                   	push   edi
c0014d90:	56                   	push   esi
c0014d91:	51                   	push   ecx
c0014d92:	e8 25 35 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	85 c0                	test   eax,eax
c0014d9c:	0f 95 c0             	setne  al
c0014d9f:	0f b6 c0             	movzx  eax,al
c0014da2:	31 d2                	xor    edx,edx
c0014da4:	83 c4 0c             	add    esp,0xc
c0014da7:	5b                   	pop    ebx
c0014da8:	5e                   	pop    esi
c0014da9:	5f                   	pop    edi
c0014daa:	5d                   	pop    ebp
c0014dab:	c3                   	ret    

c0014dac <SysWrite(regs*)>:
c0014dac:	57                   	push   edi
c0014dad:	56                   	push   esi
c0014dae:	53                   	push   ebx
c0014daf:	83 ec 10             	sub    esp,0x10
c0014db2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014db6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014db9:	83 f8 02             	cmp    eax,0x2
c0014dbc:	77 10                	ja     c0014dce <SysWrite(regs*)+0x22>
c0014dbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dc6:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014dcc:	eb 0e                	jmp    c0014ddc <SysWrite(regs*)+0x30>
c0014dce:	83 ec 0c             	sub    esp,0xc
c0014dd1:	50                   	push   eax
c0014dd2:	e8 02 e3 ff ff       	call   c00130d9 <KeGetFileFromDescriptor(int)>
c0014dd7:	83 c4 10             	add    esp,0x10
c0014dda:	89 c1                	mov    ecx,eax
c0014ddc:	83 c8 ff             	or     eax,0xffffffff
c0014ddf:	85 c9                	test   ecx,ecx
c0014de1:	89 c2                	mov    edx,eax
c0014de3:	74 28                	je     c0014e0d <SysWrite(regs*)+0x61>
c0014de5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ded:	31 ff                	xor    edi,edi
c0014def:	83 ec 0c             	sub    esp,0xc
c0014df2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014df4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014df8:	52                   	push   edx
c0014df9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dfc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014dff:	57                   	push   edi
c0014e00:	56                   	push   esi
c0014e01:	51                   	push   ecx
c0014e02:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014e05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e09:	83 c4 20             	add    esp,0x20
c0014e0c:	99                   	cdq    
c0014e0d:	83 c4 10             	add    esp,0x10
c0014e10:	5b                   	pop    ebx
c0014e11:	5e                   	pop    esi
c0014e12:	5f                   	pop    edi
c0014e13:	c3                   	ret    

c0014e14 <SysWsbe(regs*)>:
c0014e14:	55                   	push   ebp
c0014e15:	57                   	push   edi
c0014e16:	56                   	push   esi
c0014e17:	53                   	push   ebx
c0014e18:	83 ec 3c             	sub    esp,0x3c
c0014e1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014e1f:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014e26:	75 2d                	jne    c0014e55 <SysWsbe(regs*)+0x41>
c0014e28:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014e2f:	75 24                	jne    c0014e55 <SysWsbe(regs*)+0x41>
c0014e31:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014e38:	75 1b                	jne    c0014e55 <SysWsbe(regs*)+0x41>
c0014e3a:	6a 01                	push   0x1
c0014e3c:	6a 00                	push   0x0
c0014e3e:	68 5e 9f 00 c0       	push   0xc0009f5e
c0014e43:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0014e49:	e8 0e 17 00 00       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c0014e4e:	83 c4 10             	add    esp,0x10
c0014e51:	31 c0                	xor    eax,eax
c0014e53:	eb 52                	jmp    c0014ea7 <SysWsbe(regs*)+0x93>
c0014e55:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014e59:	be 62 51 02 c0       	mov    esi,0xc0025162
c0014e5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0014e63:	fc                   	cld    
c0014e64:	83 ec 0c             	sub    esp,0xc
c0014e67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014e69:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014e6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e75:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014e7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e7d:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014e80:	57                   	push   edi
c0014e81:	e8 ea b6 fe ff       	call   c0000570 <strlen>
c0014e86:	5a                   	pop    edx
c0014e87:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014e8b:	52                   	push   edx
c0014e8c:	31 d2                	xor    edx,edx
c0014e8e:	57                   	push   edi
c0014e8f:	52                   	push   edx
c0014e90:	50                   	push   eax
c0014e91:	56                   	push   esi
c0014e92:	ff d5                	call   ebp
c0014e94:	83 c4 14             	add    esp,0x14
c0014e97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e9a:	e8 89 21 00 00       	call   c0017028 <KeTerminateCurrentThread(int)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014ea7:	83 c4 3c             	add    esp,0x3c
c0014eaa:	31 d2                	xor    edx,edx
c0014eac:	5b                   	pop    ebx
c0014ead:	5e                   	pop    esi
c0014eae:	5f                   	pop    edi
c0014eaf:	5d                   	pop    ebp
c0014eb0:	c3                   	ret    

c0014eb1 <SysYield(regs*)>:
c0014eb1:	83 ec 0c             	sub    esp,0xc
c0014eb4:	fa                   	cli    
c0014eb5:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0014ebb:	e8 68 19 00 00       	call   c0016828 <schedule()>
c0014ec0:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0014ec7:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0014ece:	75 01                	jne    c0014ed1 <SysYield(regs*)+0x20>
c0014ed0:	fb                   	sti    
c0014ed1:	31 c0                	xor    eax,eax
c0014ed3:	31 d2                	xor    edx,edx
c0014ed5:	83 c4 0c             	add    esp,0xc
c0014ed8:	c3                   	ret    
c0014ed9:	66 90                	xchg   ax,ax
c0014edb:	90                   	nop

c0014edc <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014edc:	55                   	push   ebp
c0014edd:	57                   	push   edi
c0014ede:	56                   	push   esi
c0014edf:	53                   	push   ebx
c0014ee0:	83 ec 2c             	sub    esp,0x2c
c0014ee3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014ee7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014eef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ef3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014ef7:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014efa:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0014efe:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014f02:	c1 e0 08             	shl    eax,0x8
c0014f05:	09 c1                	or     ecx,eax
c0014f07:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014f0b:	c1 e0 10             	shl    eax,0x10
c0014f0e:	09 c1                	or     ecx,eax
c0014f10:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f14:	83 e0 7f             	and    eax,0x7f
c0014f17:	c1 e0 18             	shl    eax,0x18
c0014f1a:	09 c8                	or     eax,ecx
c0014f1c:	89 c5                	mov    ebp,eax
c0014f1e:	89 f8                	mov    eax,edi
c0014f20:	80 f4 00             	xor    ah,0x0
c0014f23:	89 c3                	mov    ebx,eax
c0014f25:	89 e8                	mov    eax,ebp
c0014f27:	80 f4 00             	xor    ah,0x0
c0014f2a:	89 c6                	mov    esi,eax
c0014f2c:	89 f0                	mov    eax,esi
c0014f2e:	09 d8                	or     eax,ebx
c0014f30:	74 42                	je     c0014f74 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014f32:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014f36:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014f39:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014f3d:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014f41:	c1 e0 08             	shl    eax,0x8
c0014f44:	09 c6                	or     esi,eax
c0014f46:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014f4a:	c1 e0 10             	shl    eax,0x10
c0014f4d:	09 c6                	or     esi,eax
c0014f4f:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f53:	83 e0 7f             	and    eax,0x7f
c0014f56:	c1 e0 18             	shl    eax,0x18
c0014f59:	09 f0                	or     eax,esi
c0014f5b:	89 c3                	mov    ebx,eax
c0014f5d:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0014f62:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0014f68:	29 c1                	sub    ecx,eax
c0014f6a:	19 d3                	sbb    ebx,edx
c0014f6c:	89 c8                	mov    eax,ecx
c0014f6e:	89 da                	mov    edx,ebx
c0014f70:	eb 0e                	jmp    c0014f80 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014f72:	66 90                	xchg   ax,ax
c0014f74:	b8 00 00 00 00       	mov    eax,0x0
c0014f79:	ba 00 00 00 00       	mov    edx,0x0
c0014f7e:	66 90                	xchg   ax,ax
c0014f80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f84:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f8c:	80 f4 00             	xor    ah,0x0
c0014f8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f97:	80 f4 00             	xor    ah,0x0
c0014f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f9e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014fa2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014fa6:	89 e8                	mov    eax,ebp
c0014fa8:	09 f8                	or     eax,edi
c0014faa:	74 30                	je     c0014fdc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014fac:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c0014fb2:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c0014fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fc0:	01 c8                	add    eax,ecx
c0014fc2:	11 da                	adc    edx,ebx
c0014fc4:	89 c6                	mov    esi,eax
c0014fc6:	83 e6 ff             	and    esi,0xffffffff
c0014fc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fcc:	89 d0                	mov    eax,edx
c0014fce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fd7:	eb 13                	jmp    c0014fec <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fdc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fe3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014feb:	90                   	nop
c0014fec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ff0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014ff3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0014ff7:	89 cf                	mov    edi,ecx
c0014ff9:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0014ffc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014fff:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015003:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015008:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c001500b:	83 e1 00             	and    ecx,0x0
c001500e:	09 ca                	or     edx,ecx
c0015010:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015013:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015017:	c1 ea 08             	shr    edx,0x8
c001501a:	0f b6 d2             	movzx  edx,dl
c001501d:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015020:	83 e1 00             	and    ecx,0x0
c0015023:	09 ca                	or     edx,ecx
c0015025:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015028:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001502c:	c1 ea 10             	shr    edx,0x10
c001502f:	0f b6 d2             	movzx  edx,dl
c0015032:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015035:	83 e1 00             	and    ecx,0x0
c0015038:	09 ca                	or     edx,ecx
c001503a:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001503d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015041:	c1 ea 18             	shr    edx,0x18
c0015044:	83 e2 7f             	and    edx,0x7f
c0015047:	89 d3                	mov    ebx,edx
c0015049:	83 e3 7f             	and    ebx,0x7f
c001504c:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001504f:	83 e2 80             	and    edx,0xffffff80
c0015052:	88 d1                	mov    cl,dl
c0015054:	88 da                	mov    dl,bl
c0015056:	09 ca                	or     edx,ecx
c0015058:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001505b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001505f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015063:	83 c4 2c             	add    esp,0x2c
c0015066:	5b                   	pop    ebx
c0015067:	5e                   	pop    esi
c0015068:	5f                   	pop    edi
c0015069:	5d                   	pop    ebp
c001506a:	c3                   	ret    
c001506b:	90                   	nop

c001506c <KeCheckAlarm(ThreadControlBlock*)>:
c001506c:	55                   	push   ebp
c001506d:	57                   	push   edi
c001506e:	56                   	push   esi
c001506f:	53                   	push   ebx
c0015070:	83 ec 0c             	sub    esp,0xc
c0015073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015077:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001507a:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001507e:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015082:	c1 e5 08             	shl    ebp,0x8
c0015085:	09 fd                	or     ebp,edi
c0015087:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001508b:	c1 e7 10             	shl    edi,0x10
c001508e:	09 ef                	or     edi,ebp
c0015090:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015094:	83 e0 7f             	and    eax,0x7f
c0015097:	c1 e0 18             	shl    eax,0x18
c001509a:	09 f8                	or     eax,edi
c001509c:	89 c1                	mov    ecx,eax
c001509e:	89 d0                	mov    eax,edx
c00150a0:	80 f4 00             	xor    ah,0x0
c00150a3:	89 c3                	mov    ebx,eax
c00150a5:	89 c8                	mov    eax,ecx
c00150a7:	80 f4 00             	xor    ah,0x0
c00150aa:	89 c6                	mov    esi,eax
c00150ac:	89 f0                	mov    eax,esi
c00150ae:	09 d8                	or     eax,ebx
c00150b0:	0f 84 9e 00 00 00    	je     c0015154 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00150b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150ba:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00150bd:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00150c1:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00150c5:	c1 e6 08             	shl    esi,0x8
c00150c8:	09 de                	or     esi,ebx
c00150ca:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00150ce:	c1 e3 10             	shl    ebx,0x10
c00150d1:	09 f3                	or     ebx,esi
c00150d3:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00150d7:	83 e1 7f             	and    ecx,0x7f
c00150da:	c1 e1 18             	shl    ecx,0x18
c00150dd:	09 d9                	or     ecx,ebx
c00150df:	89 ca                	mov    edx,ecx
c00150e1:	89 c1                	mov    ecx,eax
c00150e3:	89 d3                	mov    ebx,edx
c00150e5:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00150ea:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00150f0:	39 c8                	cmp    eax,ecx
c00150f2:	89 d0                	mov    eax,edx
c00150f4:	19 d8                	sbb    eax,ebx
c00150f6:	72 5c                	jb     c0015154 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00150f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150fc:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015103:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015106:	83 e2 00             	and    edx,0x0
c0015109:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001510c:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001510f:	83 e2 00             	and    edx,0x0
c0015112:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015115:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015118:	83 e2 00             	and    edx,0x0
c001511b:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001511e:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015121:	83 e2 80             	and    edx,0xffffff80
c0015124:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015127:	83 ec 0c             	sub    esp,0xc
c001512a:	68 8e 51 02 c0       	push   0xc002518e
c001512f:	e8 48 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001513e:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015144:	83 ec 08             	sub    esp,0x8
c0015147:	6a 0e                	push   0xe
c0015149:	50                   	push   eax
c001514a:	e8 6c bd ff ff       	call   c0010ebb <KeRaiseSignal(SigHandlerBlock*, int)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	66 90                	xchg   ax,ax
c0015154:	90                   	nop
c0015155:	83 c4 0c             	add    esp,0xc
c0015158:	5b                   	pop    ebx
c0015159:	5e                   	pop    esi
c001515a:	5f                   	pop    edi
c001515b:	5d                   	pop    ebp
c001515c:	c3                   	ret    

c001515d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001515d:	55                   	push   ebp
c001515e:	57                   	push   edi
c001515f:	56                   	push   esi
c0015160:	53                   	push   ebx
c0015161:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015167:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001516f:	0f 95 c0             	setne  al
c0015172:	31 d2                	xor    edx,edx
c0015174:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001517c:	0f 94 c2             	sete   dl
c001517f:	85 c2                	test   edx,eax
c0015181:	74 34                	je     c00151b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015183:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001518e:	74 27                	je     c00151b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015190:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015197:	05 00 10 00 00       	add    eax,0x1000
c001519c:	89 c1                	mov    ecx,eax
c001519e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00151a3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00151a9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00151b0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00151b7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00151be:	83 ec 0c             	sub    esp,0xc
c00151c1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00151c7:	6a 01                	push   0x1
c00151c9:	e8 69 e0 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	89 c3                	mov    ebx,eax
c00151d3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00151d9:	0f 86 26 01 00 00    	jbe    c0015305 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00151df:	c1 ee 0c             	shr    esi,0xc
c00151e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00151e9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00151ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00151f5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00151fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015200:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015207:	29 ef                	sub    edi,ebp
c0015209:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001520d:	0f 83 f9 00 00 00    	jae    c001530c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015213:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015219:	76 05                	jbe    c0015220 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001521b:	bf 00 10 00 00       	mov    edi,0x1000
c0015220:	83 ec 0c             	sub    esp,0xc
c0015223:	31 d2                	xor    edx,edx
c0015225:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001522c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001522e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015232:	50                   	push   eax
c0015233:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015237:	56                   	push   esi
c0015238:	52                   	push   edx
c0015239:	57                   	push   edi
c001523a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015241:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015244:	83 c4 20             	add    esp,0x20
c0015247:	85 c0                	test   eax,eax
c0015249:	75 06                	jne    c0015251 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001524b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001524f:	74 13                	je     c0015264 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015251:	83 ec 0c             	sub    esp,0xc
c0015254:	53                   	push   ebx
c0015255:	e8 e5 e2 ff ff       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	31 c0                	xor    eax,eax
c001525f:	e9 80 01 00 00       	jmp    c00153e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015264:	fa                   	cli    
c0015265:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c001526b:	e8 24 ac ff ff       	call   c000fe94 <Phys::allocatePage()>
c0015270:	6a 07                	push   0x7
c0015272:	89 c7                	mov    edi,eax
c0015274:	53                   	push   ebx
c0015275:	50                   	push   eax
c0015276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001527b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001527e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015284:	e8 91 e6 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015289:	83 c4 0c             	add    esp,0xc
c001528c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015293:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015299:	6a 00                	push   0x0
c001529b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a3:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152a9:	e8 d8 e4 ff ff       	call   c0013786 <VAS::mapOtherVASIn(bool, VAS*)>
c00152ae:	58                   	pop    eax
c00152af:	5a                   	pop    edx
c00152b0:	68 07 0c 00 00       	push   0xc07
c00152b5:	55                   	push   ebp
c00152b6:	57                   	push   edi
c00152b7:	89 df                	mov    edi,ebx
c00152b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00152c0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152c6:	6a 00                	push   0x0
c00152c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152d0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152d6:	e8 81 e8 ff ff       	call   c0013b5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00152db:	b9 00 10 00 00       	mov    ecx,0x1000
c00152e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152e2:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00152e9:	83 c4 20             	add    esp,0x20
c00152ec:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00152f3:	75 01                	jne    c00152f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00152f5:	fb                   	sti    
c00152f6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00152fc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015300:	e9 f0 fe ff ff       	jmp    c00151f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015305:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001530c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015313:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015319:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001531f:	0f 86 b1 00 00 00    	jbe    c00153d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015325:	fa                   	cli    
c0015326:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c001532c:	c1 ee 0c             	shr    esi,0xc
c001532f:	51                   	push   ecx
c0015330:	31 ff                	xor    edi,edi
c0015332:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015339:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001533f:	6a 00                	push   0x0
c0015341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015346:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015349:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001534f:	e8 32 e4 ff ff       	call   c0013786 <VAS::mapOtherVASIn(bool, VAS*)>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	e8 38 ab ff ff       	call   c000fe94 <Phys::allocatePage()>
c001535c:	47                   	inc    edi
c001535d:	6a 07                	push   0x7
c001535f:	53                   	push   ebx
c0015360:	50                   	push   eax
c0015361:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015365:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001536b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001536e:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015374:	e8 a1 e5 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015379:	58                   	pop    eax
c001537a:	5a                   	pop    edx
c001537b:	68 07 0c 00 00       	push   0xc07
c0015380:	55                   	push   ebp
c0015381:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001538b:	50                   	push   eax
c001538c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015393:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015399:	6a 00                	push   0x0
c001539b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a3:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153a9:	e8 ae e7 ff ff       	call   c0013b5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153ae:	83 c4 1c             	add    esp,0x1c
c00153b1:	68 00 10 00 00       	push   0x1000
c00153b6:	6a 00                	push   0x0
c00153b8:	53                   	push   ebx
c00153b9:	e8 32 b1 fe ff       	call   c00004f0 <memset>
c00153be:	83 c4 10             	add    esp,0x10
c00153c1:	39 fe                	cmp    esi,edi
c00153c3:	77 92                	ja     c0015357 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00153c5:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00153cc:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00153d3:	75 01                	jne    c00153d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00153d5:	fb                   	sti    
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	53                   	push   ebx
c00153da:	e8 60 e1 ff ff       	call   c001353f <Virt::freeKernelVirtualPages(unsigned long)>
c00153df:	83 c4 10             	add    esp,0x10
c00153e2:	b0 01                	mov    al,0x1
c00153e4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00153ea:	5b                   	pop    ebx
c00153eb:	5e                   	pop    esi
c00153ec:	5f                   	pop    edi
c00153ed:	5d                   	pop    ebp
c00153ee:	c3                   	ret    

c00153ef <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00153ef:	55                   	push   ebp
c00153f0:	57                   	push   edi
c00153f1:	56                   	push   esi
c00153f2:	53                   	push   ebx
c00153f3:	83 ec 68             	sub    esp,0x68
c00153f6:	68 14 01 00 00       	push   0x114
c00153fb:	e8 4b a4 ff ff       	call   c000f84b <malloc>
c0015400:	83 c4 0c             	add    esp,0xc
c0015403:	89 c6                	mov    esi,eax
c0015405:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015409:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001540d:	50                   	push   eax
c001540e:	e8 77 2d ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015413:	5b                   	pop    ebx
c0015414:	5f                   	pop    edi
c0015415:	6a 01                	push   0x1
c0015417:	56                   	push   esi
c0015418:	e8 8b 2d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	85 c0                	test   eax,eax
c0015422:	0f 85 c6 01 00 00    	jne    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015428:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	6a 34                	push   0x34
c0015435:	e8 11 a4 ff ff       	call   c000f84b <malloc>
c001543a:	59                   	pop    ecx
c001543b:	89 c3                	mov    ebx,eax
c001543d:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015441:	8b 06                	mov    eax,DWORD PTR [esi]
c0015443:	57                   	push   edi
c0015444:	53                   	push   ebx
c0015445:	6a 00                	push   0x0
c0015447:	6a 34                	push   0x34
c0015449:	56                   	push   esi
c001544a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001544d:	83 c4 20             	add    esp,0x20
c0015450:	85 c0                	test   eax,eax
c0015452:	0f 85 96 01 00 00    	jne    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015458:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001545e:	0f 85 8a 01 00 00    	jne    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015464:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015467:	85 c0                	test   eax,eax
c0015469:	0f 84 7f 01 00 00    	je     c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001546f:	52                   	push   edx
c0015470:	31 d2                	xor    edx,edx
c0015472:	52                   	push   edx
c0015473:	50                   	push   eax
c0015474:	56                   	push   esi
c0015475:	e8 ec 2d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	85 c0                	test   eax,eax
c001547f:	0f 85 69 01 00 00    	jne    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015485:	83 ec 0c             	sub    esp,0xc
c0015488:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001548b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001548f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015493:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015497:	0f af c2             	imul   eax,edx
c001549a:	50                   	push   eax
c001549b:	e8 ab a3 ff ff       	call   c000f84b <malloc>
c00154a0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00154a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154ad:	31 ff                	xor    edi,edi
c00154af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00154b3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00154b7:	0f af c2             	imul   eax,edx
c00154ba:	99                   	cdq    
c00154bb:	52                   	push   edx
c00154bc:	50                   	push   eax
c00154bd:	56                   	push   esi
c00154be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00154c1:	83 c4 20             	add    esp,0x20
c00154c4:	0f b7 c7             	movzx  eax,di
c00154c7:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00154cb:	73 71                	jae    c001553e <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00154cd:	6b c0 28             	imul   eax,eax,0x28
c00154d0:	55                   	push   ebp
c00154d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154d5:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00154d9:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00154dc:	6b d2 28             	imul   edx,edx,0x28
c00154df:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00154e3:	31 d2                	xor    edx,edx
c00154e5:	52                   	push   edx
c00154e6:	50                   	push   eax
c00154e7:	56                   	push   esi
c00154e8:	e8 79 2d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00154ed:	83 c4 0c             	add    esp,0xc
c00154f0:	6a 20                	push   0x20
c00154f2:	6a 00                	push   0x0
c00154f4:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00154f8:	55                   	push   ebp
c00154f9:	e8 f2 af fe ff       	call   c00004f0 <memset>
c00154fe:	58                   	pop    eax
c00154ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0015501:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015505:	52                   	push   edx
c0015506:	55                   	push   ebp
c0015507:	6a 00                	push   0x0
c0015509:	6a 1f                	push   0x1f
c001550b:	56                   	push   esi
c001550c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001550f:	83 c4 18             	add    esp,0x18
c0015512:	55                   	push   ebp
c0015513:	68 9f 51 02 c0       	push   0xc002519f
c0015518:	e8 33 b2 fe ff       	call   c0000750 <strcmp>
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	85 c0                	test   eax,eax
c0015522:	75 17                	jne    c001553b <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015524:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015528:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001552c:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015532:	83 c8 80             	or     eax,0xffffff80
c0015535:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c001553b:	47                   	inc    edi
c001553c:	eb 86                	jmp    c00154c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001553e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015541:	85 c0                	test   eax,eax
c0015543:	0f 84 a5 00 00 00    	je     c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015549:	31 d2                	xor    edx,edx
c001554b:	57                   	push   edi
c001554c:	52                   	push   edx
c001554d:	50                   	push   eax
c001554e:	56                   	push   esi
c001554f:	e8 12 2d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	85 c0                	test   eax,eax
c0015559:	0f 85 8f 00 00 00    	jne    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001555f:	83 ec 0c             	sub    esp,0xc
c0015562:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015566:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001556a:	31 ed                	xor    ebp,ebp
c001556c:	0f af c2             	imul   eax,edx
c001556f:	50                   	push   eax
c0015570:	e8 d6 a2 ff ff       	call   c000f84b <malloc>
c0015575:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015579:	59                   	pop    ecx
c001557a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001557c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015580:	50                   	push   eax
c0015581:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015585:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015589:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001558d:	0f af c2             	imul   eax,edx
c0015590:	99                   	cdq    
c0015591:	52                   	push   edx
c0015592:	50                   	push   eax
c0015593:	56                   	push   esi
c0015594:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015597:	83 c4 20             	add    esp,0x20
c001559a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155a2:	0f b7 fd             	movzx  edi,bp
c00155a5:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00155a9:	0f 83 80 00 00 00    	jae    c001562f <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c00155af:	c1 e7 05             	shl    edi,0x5
c00155b2:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c00155b6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00155b9:	75 6e                	jne    c0015629 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00155bb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00155be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155c2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00155c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155c9:	52                   	push   edx
c00155ca:	31 d2                	xor    edx,edx
c00155cc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00155cf:	52                   	push   edx
c00155d0:	50                   	push   eax
c00155d1:	56                   	push   esi
c00155d2:	e8 8f 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	85 c0                	test   eax,eax
c00155dc:	74 17                	je     c00155f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00155de:	83 ec 0c             	sub    esp,0xc
c00155e1:	68 ae 51 02 c0       	push   0xc00251ae
c00155e6:	e8 91 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	31 c0                	xor    eax,eax
c00155f0:	e9 8a 00 00 00       	jmp    c001567f <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00155f5:	83 ec 0c             	sub    esp,0xc
c00155f8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00155fb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00155fe:	50                   	push   eax
c00155ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015603:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015607:	56                   	push   esi
c0015608:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001560f:	e8 49 fb ff ff       	call   c001515d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015614:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015618:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001561c:	83 c4 20             	add    esp,0x20
c001561f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015623:	73 04                	jae    c0015629 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015629:	45                   	inc    ebp
c001562a:	e9 73 ff ff ff       	jmp    c00155a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c001562f:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015633:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015637:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001563b:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001564a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001564f:	05 00 10 00 00       	add    eax,0x1000
c0015654:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015657:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001565b:	e8 fb a1 ff ff       	call   c000f85b <free>
c0015660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015663:	e8 f3 a1 ff ff       	call   c000f85b <free>
c0015668:	58                   	pop    eax
c0015669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001566d:	e8 e9 a1 ff ff       	call   c000f85b <free>
c0015672:	89 34 24             	mov    DWORD PTR [esp],esi
c0015675:	e8 8c 2b ff ff       	call   c0008206 <File::close()>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	b0 01                	mov    al,0x1
c001567f:	83 c4 5c             	add    esp,0x5c
c0015682:	5b                   	pop    ebx
c0015683:	5e                   	pop    esi
c0015684:	5f                   	pop    edi
c0015685:	5d                   	pop    ebp
c0015686:	c3                   	ret    

c0015687 <Thr::runtimeReferenceHelper()>:
c0015687:	83 ec 18             	sub    esp,0x18
c001568a:	68 b6 51 02 c0       	push   0xc00251b6
c001568f:	e8 e8 18 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015694:	fa                   	cli    
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	eb fe                	jmp    c0015698 <Thr::runtimeReferenceHelper()+0x11>

c001569a <Thr::getAddressOfKernelSymbol(char const*)>:
c001569a:	57                   	push   edi
c001569b:	56                   	push   esi
c001569c:	53                   	push   ebx
c001569d:	31 db                	xor    ebx,ebx
c001569f:	39 1d 00 d3 02 c0    	cmp    DWORD PTR ds:0xc002d300,ebx
c00156a5:	7e 3c                	jle    c00156e3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00156a7:	8b 34 9d e0 d2 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2d20]
c00156ae:	31 ff                	xor    edi,edi
c00156b0:	39 3c 9d a0 d2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2d60],edi
c00156b7:	7e 27                	jle    c00156e0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00156b9:	50                   	push   eax
c00156ba:	50                   	push   eax
c00156bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00156c1:	03 04 9d c0 d2 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2d40]
c00156c8:	50                   	push   eax
c00156c9:	e8 82 b0 fe ff       	call   c0000750 <strcmp>
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	85 c0                	test   eax,eax
c00156d3:	75 05                	jne    c00156da <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00156d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00156d8:	eb 0b                	jmp    c00156e5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00156da:	83 c6 10             	add    esi,0x10
c00156dd:	47                   	inc    edi
c00156de:	eb d0                	jmp    c00156b0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00156e0:	43                   	inc    ebx
c00156e1:	eb bc                	jmp    c001569f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00156e3:	31 c0                	xor    eax,eax
c00156e5:	5b                   	pop    ebx
c00156e6:	5e                   	pop    esi
c00156e7:	5f                   	pop    edi
c00156e8:	c3                   	ret    

c00156e9 <Thr::loadKernelSymbolTable(char const*)>:
c00156e9:	55                   	push   ebp
c00156ea:	57                   	push   edi
c00156eb:	56                   	push   esi
c00156ec:	53                   	push   ebx
c00156ed:	83 ec 68             	sub    esp,0x68
c00156f0:	8b 35 58 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d358
c00156f6:	68 14 01 00 00       	push   0x114
c00156fb:	e8 4b a1 ff ff       	call   c000f84b <malloc>
c0015700:	83 c4 0c             	add    esp,0xc
c0015703:	89 c3                	mov    ebx,eax
c0015705:	56                   	push   esi
c0015706:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001570a:	50                   	push   eax
c001570b:	e8 7a 2a ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015710:	5e                   	pop    esi
c0015711:	5f                   	pop    edi
c0015712:	6a 01                	push   0x1
c0015714:	53                   	push   ebx
c0015715:	e8 8e 2a ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001571a:	83 c4 10             	add    esp,0x10
c001571d:	85 c0                	test   eax,eax
c001571f:	74 0a                	je     c001572b <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015721:	83 ec 0c             	sub    esp,0xc
c0015724:	68 d8 51 02 c0       	push   0xc00251d8
c0015729:	eb 34                	jmp    c001575f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001572b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015733:	83 ec 0c             	sub    esp,0xc
c0015736:	6a 34                	push   0x34
c0015738:	e8 0e a1 ff ff       	call   c000f84b <malloc>
c001573d:	59                   	pop    ecx
c001573e:	89 c7                	mov    edi,eax
c0015740:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015746:	56                   	push   esi
c0015747:	57                   	push   edi
c0015748:	6a 00                	push   0x0
c001574a:	6a 34                	push   0x34
c001574c:	53                   	push   ebx
c001574d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015750:	83 c4 20             	add    esp,0x20
c0015753:	85 c0                	test   eax,eax
c0015755:	74 17                	je     c001576e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015757:	83 ec 0c             	sub    esp,0xc
c001575a:	68 ef 51 02 c0       	push   0xc00251ef
c001575f:	e8 3c a5 ff ff       	call   c000fca0 <KePanic(char const*)>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	31 c0                	xor    eax,eax
c0015769:	e9 31 02 00 00       	jmp    c001599f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001576e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015774:	75 e1                	jne    c0015757 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015776:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015779:	85 c0                	test   eax,eax
c001577b:	74 da                	je     c0015757 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001577d:	52                   	push   edx
c001577e:	31 d2                	xor    edx,edx
c0015780:	52                   	push   edx
c0015781:	50                   	push   eax
c0015782:	53                   	push   ebx
c0015783:	e8 de 2a ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	85 c0                	test   eax,eax
c001578d:	75 c8                	jne    c0015757 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001578f:	83 ec 0c             	sub    esp,0xc
c0015792:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015796:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001579a:	31 ed                	xor    ebp,ebp
c001579c:	0f af c2             	imul   eax,edx
c001579f:	50                   	push   eax
c00157a0:	e8 a6 a0 ff ff       	call   c000f84b <malloc>
c00157a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00157ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00157ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157b2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157ba:	0f af c2             	imul   eax,edx
c00157bd:	99                   	cdq    
c00157be:	52                   	push   edx
c00157bf:	50                   	push   eax
c00157c0:	53                   	push   ebx
c00157c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157c4:	83 c4 20             	add    esp,0x20
c00157c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00157cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00157d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00157df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157e7:	0f b7 f5             	movzx  esi,bp
c00157ea:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00157ee:	0f 83 a7 00 00 00    	jae    c001589b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00157f4:	6b f6 28             	imul   esi,esi,0x28
c00157f7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00157fb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00157fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015802:	50                   	push   eax
c0015803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015807:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001580b:	8b 16                	mov    edx,DWORD PTR [esi]
c001580d:	6b c0 28             	imul   eax,eax,0x28
c0015810:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015814:	89 d0                	mov    eax,edx
c0015816:	31 d2                	xor    edx,edx
c0015818:	52                   	push   edx
c0015819:	50                   	push   eax
c001581a:	53                   	push   ebx
c001581b:	e8 46 2a ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015820:	83 c4 0c             	add    esp,0xc
c0015823:	6a 20                	push   0x20
c0015825:	6a 00                	push   0x0
c0015827:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001582b:	52                   	push   edx
c001582c:	e8 bf ac fe ff       	call   c00004f0 <memset>
c0015831:	58                   	pop    eax
c0015832:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015834:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015838:	51                   	push   ecx
c0015839:	8d 54 24 40          	lea    edx,[esp+0x40]
c001583d:	52                   	push   edx
c001583e:	6a 00                	push   0x0
c0015840:	6a 1f                	push   0x1f
c0015842:	53                   	push   ebx
c0015843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015846:	83 c4 18             	add    esp,0x18
c0015849:	68 06 52 02 c0       	push   0xc0025206
c001584e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015852:	52                   	push   edx
c0015853:	e8 f8 ae fe ff       	call   c0000750 <strcmp>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	85 c0                	test   eax,eax
c001585d:	75 0f                	jne    c001586e <Thr::loadKernelSymbolTable(char const*)+0x185>
c001585f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015862:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001586a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001586e:	50                   	push   eax
c001586f:	50                   	push   eax
c0015870:	68 0e 52 02 c0       	push   0xc002520e
c0015875:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015879:	50                   	push   eax
c001587a:	e8 d1 ae fe ff       	call   c0000750 <strcmp>
c001587f:	83 c4 10             	add    esp,0x10
c0015882:	85 c0                	test   eax,eax
c0015884:	75 0f                	jne    c0015895 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015886:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015889:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001588d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015891:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015895:	45                   	inc    ebp
c0015896:	e9 4c ff ff ff       	jmp    c00157e7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001589b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158a0:	75 10                	jne    c00158b2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00158a2:	83 ec 0c             	sub    esp,0xc
c00158a5:	68 16 52 02 c0       	push   0xc0025216
c00158aa:	e8 f1 a3 ff ff       	call   c000fca0 <KePanic(char const*)>
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00158b7:	75 10                	jne    c00158c9 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00158b9:	83 ec 0c             	sub    esp,0xc
c00158bc:	68 16 52 02 c0       	push   0xc0025216
c00158c1:	e8 da a3 ff ff       	call   c000fca0 <KePanic(char const*)>
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	31 d2                	xor    edx,edx
c00158cb:	50                   	push   eax
c00158cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158d0:	52                   	push   edx
c00158d1:	50                   	push   eax
c00158d2:	53                   	push   ebx
c00158d3:	e8 8e 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00158d8:	5a                   	pop    edx
c00158d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00158dd:	e8 69 9f ff ff       	call   c000f84b <malloc>
c00158e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00158e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158ea:	31 c9                	xor    ecx,ecx
c00158ec:	5e                   	pop    esi
c00158ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158ef:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00158f3:	55                   	push   ebp
c00158f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158f8:	51                   	push   ecx
c00158f9:	52                   	push   edx
c00158fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00158fe:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015902:	53                   	push   ebx
c0015903:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015906:	83 c4 14             	add    esp,0x14
c0015909:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001590d:	e8 39 9f ff ff       	call   c000f84b <malloc>
c0015912:	89 c6                	mov    esi,eax
c0015914:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015916:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015919:	56                   	push   esi
c001591a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001591e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015922:	51                   	push   ecx
c0015923:	52                   	push   edx
c0015924:	53                   	push   ebx
c0015925:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015928:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001592c:	8b 15 00 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d300
c0015932:	83 c4 1c             	add    esp,0x1c
c0015935:	c1 e8 04             	shr    eax,0x4
c0015938:	89 04 95 a0 d2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2d60],eax
c001593f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015943:	31 d2                	xor    edx,edx
c0015945:	52                   	push   edx
c0015946:	50                   	push   eax
c0015947:	53                   	push   ebx
c0015948:	e8 19 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001594d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001594f:	31 d2                	xor    edx,edx
c0015951:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015954:	56                   	push   esi
c0015955:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015959:	52                   	push   edx
c001595a:	50                   	push   eax
c001595b:	53                   	push   ebx
c001595c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001595f:	83 c4 14             	add    esp,0x14
c0015962:	53                   	push   ebx
c0015963:	e8 9e 28 ff ff       	call   c0008206 <File::close()>
c0015968:	5d                   	pop    ebp
c0015969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001596d:	e8 e9 9e ff ff       	call   c000f85b <free>
c0015972:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015975:	e8 e1 9e ff ff       	call   c000f85b <free>
c001597a:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c001597f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015983:	8d 50 01             	lea    edx,[eax+0x1]
c0015986:	89 0c 85 e0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d20],ecx
c001598d:	89 34 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],esi
c0015994:	89 15 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,edx
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	b0 01                	mov    al,0x1
c001599f:	83 c4 5c             	add    esp,0x5c
c00159a2:	5b                   	pop    ebx
c00159a3:	5e                   	pop    esi
c00159a4:	5f                   	pop    edi
c00159a5:	5d                   	pop    ebp
c00159a6:	c3                   	ret    

c00159a7 <KeIsELFValid(Elf32_Ehdr*)>:
c00159a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159ab:	31 c0                	xor    eax,eax
c00159ad:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c00159b0:	75 13                	jne    c00159c5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159b2:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c00159b6:	75 0d                	jne    c00159c5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159b8:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c00159bc:	75 07                	jne    c00159c5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159be:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c00159c2:	0f 94 c0             	sete   al
c00159c5:	c3                   	ret    

c00159c6 <KeGetELFSectionHeader(unsigned char*, int)>:
c00159c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159ca:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c00159cf:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c00159d2:	01 d0                	add    eax,edx
c00159d4:	c3                   	ret    

c00159d5 <KeGetELFProgramHeader(unsigned char*, int)>:
c00159d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00159dd:	c1 e0 05             	shl    eax,0x5
c00159e0:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c00159e3:	01 d0                	add    eax,edx
c00159e5:	c3                   	ret    

c00159e6 <KeLookupELFString(unsigned char*, int)>:
c00159e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00159ea:	31 c0                	xor    eax,eax
c00159ec:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c00159f0:	85 d2                	test   edx,edx
c00159f2:	74 14                	je     c0015a08 <KeLookupELFString(unsigned char*, int)+0x22>
c00159f4:	52                   	push   edx
c00159f5:	51                   	push   ecx
c00159f6:	e8 cb ff ff ff       	call   c00159c6 <KeGetELFSectionHeader(unsigned char*, int)>
c00159fb:	5a                   	pop    edx
c00159fc:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00159ff:	5a                   	pop    edx
c0015a00:	89 c8                	mov    eax,ecx
c0015a02:	74 04                	je     c0015a08 <KeLookupELFString(unsigned char*, int)+0x22>
c0015a04:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0015a08:	c3                   	ret    

c0015a09 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0015a09:	55                   	push   ebp
c0015a0a:	57                   	push   edi
c0015a0b:	56                   	push   esi
c0015a0c:	53                   	push   ebx
c0015a0d:	31 db                	xor    ebx,ebx
c0015a0f:	83 ec 1c             	sub    esp,0x1c
c0015a12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a16:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015a19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a1d:	89 c5                	mov    ebp,eax
c0015a1f:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0015a24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a2c:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015a30:	39 d8                	cmp    eax,ebx
c0015a32:	0f 8e 81 00 00 00    	jle    c0015ab9 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c0015a38:	53                   	push   ebx
c0015a39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015a3d:	e8 93 ff ff ff       	call   c00159d5 <KeGetELFProgramHeader(unsigned char*, int)>
c0015a42:	5a                   	pop    edx
c0015a43:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0015a46:	59                   	pop    ecx
c0015a47:	75 6a                	jne    c0015ab3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a49:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0015a4c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0015a4f:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0015a52:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015a55:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015a59:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015a5e:	75 22                	jne    c0015a82 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	68 30 52 02 c0       	push   0xc0025230
c0015a68:	e8 33 a2 ff ff       	call   c000fca0 <KePanic(char const*)>
c0015a6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a71:	01 f2                	add    edx,esi
c0015a73:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	39 d5                	cmp    ebp,edx
c0015a7c:	73 35                	jae    c0015ab3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a7e:	89 d5                	mov    ebp,edx
c0015a80:	eb 31                	jmp    c0015ab3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a82:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015a86:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015a89:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0015a8d:	01 f2                	add    edx,esi
c0015a8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a93:	89 d7                	mov    edi,edx
c0015a95:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0015a98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a9a:	50                   	push   eax
c0015a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a9f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0015aa3:	50                   	push   eax
c0015aa4:	6a 00                	push   0x0
c0015aa6:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0015aaa:	52                   	push   edx
c0015aab:	e8 40 aa fe ff       	call   c00004f0 <memset>
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	43                   	inc    ebx
c0015ab4:	e9 6f ff ff ff       	jmp    c0015a28 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c0015ab9:	83 c4 1c             	add    esp,0x1c
c0015abc:	89 e8                	mov    eax,ebp
c0015abe:	5b                   	pop    ebx
c0015abf:	5e                   	pop    esi
c0015ac0:	5f                   	pop    edi
c0015ac1:	5d                   	pop    ebp
c0015ac2:	c3                   	ret    

c0015ac3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0015ac3:	57                   	push   edi
c0015ac4:	56                   	push   esi
c0015ac5:	53                   	push   ebx
c0015ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015aca:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ad2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ad6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ad9:	85 db                	test   ebx,ebx
c0015adb:	74 04                	je     c0015ae1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015add:	85 c0                	test   eax,eax
c0015adf:	75 05                	jne    c0015ae6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0015ae1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015ae4:	eb 5c                	jmp    c0015b42 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0015ae6:	50                   	push   eax
c0015ae7:	51                   	push   ecx
c0015ae8:	e8 d9 fe ff ff       	call   c00159c6 <KeGetELFSectionHeader(unsigned char*, int)>
c0015aed:	5f                   	pop    edi
c0015aee:	89 c7                	mov    edi,eax
c0015af0:	5a                   	pop    edx
c0015af1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015af4:	31 d2                	xor    edx,edx
c0015af6:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0015af9:	39 c3                	cmp    ebx,eax
c0015afb:	73 e4                	jae    c0015ae1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015afd:	c1 e3 04             	shl    ebx,0x4
c0015b00:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0015b03:	01 cb                	add    ebx,ecx
c0015b05:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0015b09:	85 d2                	test   edx,edx
c0015b0b:	75 39                	jne    c0015b46 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015b0d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0015b10:	51                   	push   ecx
c0015b11:	e8 b0 fe ff ff       	call   c00159c6 <KeGetELFSectionHeader(unsigned char*, int)>
c0015b16:	52                   	push   edx
c0015b17:	03 0b                	add    ecx,DWORD PTR [ebx]
c0015b19:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015b1c:	51                   	push   ecx
c0015b1d:	e8 78 fb ff ff       	call   c001569a <Thr::getAddressOfKernelSymbol(char const*)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	85 c0                	test   eax,eax
c0015b27:	75 32                	jne    c0015b5b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b29:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c0015b2d:	75 03                	jne    c0015b32 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c0015b2f:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	68 59 52 02 c0       	push   0xc0025259
c0015b3a:	e8 3d 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	31 c0                	xor    eax,eax
c0015b44:	eb 15                	jmp    c0015b5b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b46:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015b49:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0015b4f:	74 0a                	je     c0015b5b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b55:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015b59:	01 d0                	add    eax,edx
c0015b5b:	5b                   	pop    ebx
c0015b5c:	5e                   	pop    esi
c0015b5d:	5f                   	pop    edi
c0015b5e:	c3                   	ret    

c0015b5f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0015b5f:	55                   	push   ebp
c0015b60:	57                   	push   edi
c0015b61:	56                   	push   esi
c0015b62:	53                   	push   ebx
c0015b63:	83 ec 1c             	sub    esp,0x1c
c0015b66:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0015b6a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015b6e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015b72:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0015b75:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0015b77:	29 ef                	sub    edi,ebp
c0015b79:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0015b7c:	01 fb                	add    ebx,edi
c0015b7e:	c1 ea 08             	shr    edx,0x8
c0015b81:	74 2d                	je     c0015bb0 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0015b83:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b88:	50                   	push   eax
c0015b89:	50                   	push   eax
c0015b8a:	55                   	push   ebp
c0015b8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015b8f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0015b93:	50                   	push   eax
c0015b94:	52                   	push   edx
c0015b95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015b99:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0015b9c:	51                   	push   ecx
c0015b9d:	e8 21 ff ff ff       	call   c0015ac3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0015ba2:	83 c4 20             	add    esp,0x20
c0015ba5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015baa:	74 06                	je     c0015bb2 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0015bac:	31 c0                	xor    eax,eax
c0015bae:	eb 27                	jmp    c0015bd7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015bb0:	31 c0                	xor    eax,eax
c0015bb2:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0015bb6:	83 fa 01             	cmp    edx,0x1
c0015bb9:	75 04                	jne    c0015bbf <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c0015bbb:	01 03                	add    DWORD PTR [ebx],eax
c0015bbd:	eb 16                	jmp    c0015bd5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015bbf:	83 fa 02             	cmp    edx,0x2
c0015bc2:	75 08                	jne    c0015bcc <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0015bc4:	03 03                	add    eax,DWORD PTR [ebx]
c0015bc6:	29 d8                	sub    eax,ebx
c0015bc8:	89 03                	mov    DWORD PTR [ebx],eax
c0015bca:	eb 09                	jmp    c0015bd5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015bcc:	31 c0                	xor    eax,eax
c0015bce:	83 fa 08             	cmp    edx,0x8
c0015bd1:	75 04                	jne    c0015bd7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015bd3:	01 3b                	add    DWORD PTR [ebx],edi
c0015bd5:	b0 01                	mov    al,0x1
c0015bd7:	83 c4 1c             	add    esp,0x1c
c0015bda:	5b                   	pop    ebx
c0015bdb:	5e                   	pop    esi
c0015bdc:	5f                   	pop    edi
c0015bdd:	5d                   	pop    ebp
c0015bde:	c3                   	ret    

c0015bdf <KePerformRelocations(unsigned char*, unsigned long)>:
c0015bdf:	55                   	push   ebp
c0015be0:	31 ed                	xor    ebp,ebp
c0015be2:	57                   	push   edi
c0015be3:	56                   	push   esi
c0015be4:	53                   	push   ebx
c0015be5:	83 ec 1c             	sub    esp,0x1c
c0015be8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015bec:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0015bf0:	39 e8                	cmp    eax,ebp
c0015bf2:	0f 8e 92 00 00 00    	jle    c0015c8a <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0015bf8:	55                   	push   ebp
c0015bf9:	56                   	push   esi
c0015bfa:	e8 c7 fd ff ff       	call   c00159c6 <KeGetELFSectionHeader(unsigned char*, int)>
c0015bff:	5a                   	pop    edx
c0015c00:	89 c3                	mov    ebx,eax
c0015c02:	59                   	pop    ecx
c0015c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015c06:	83 f8 09             	cmp    eax,0x9
c0015c09:	75 64                	jne    c0015c6f <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c0015c0b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c0e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0015c11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c15:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c1c:	ff 33                	push   DWORD PTR [ebx]
c0015c1e:	56                   	push   esi
c0015c1f:	e8 c2 fd ff ff       	call   c00159e6 <KeLookupELFString(unsigned char*, int)>
c0015c24:	68 7a 52 02 c0       	push   0xc002527a
c0015c29:	50                   	push   eax
c0015c2a:	e8 21 ab fe ff       	call   c0000750 <strcmp>
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	89 c1                	mov    ecx,eax
c0015c34:	85 c0                	test   eax,eax
c0015c36:	75 4c                	jne    c0015c84 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c3c:	31 d2                	xor    edx,edx
c0015c3e:	01 f7                	add    edi,esi
c0015c40:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0015c44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0015c4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c50:	7d 32                	jge    c0015c84 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c52:	57                   	push   edi
c0015c53:	83 c7 08             	add    edi,0x8
c0015c56:	53                   	push   ebx
c0015c57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c5b:	56                   	push   esi
c0015c5c:	e8 fe fe ff ff       	call   c0015b5f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	84 c0                	test   al,al
c0015c66:	74 24                	je     c0015c8c <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0015c68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c6c:	41                   	inc    ecx
c0015c6d:	eb d9                	jmp    c0015c48 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0015c6f:	83 f8 04             	cmp    eax,0x4
c0015c72:	75 10                	jne    c0015c84 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	68 83 52 02 c0       	push   0xc0025283
c0015c7c:	e8 1f a0 ff ff       	call   c000fca0 <KePanic(char const*)>
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	45                   	inc    ebp
c0015c85:	e9 62 ff ff ff       	jmp    c0015bec <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0015c8a:	b0 01                	mov    al,0x1
c0015c8c:	83 c4 1c             	add    esp,0x1c
c0015c8f:	5b                   	pop    ebx
c0015c90:	5e                   	pop    esi
c0015c91:	5f                   	pop    edi
c0015c92:	5d                   	pop    ebp
c0015c93:	c3                   	ret    

c0015c94 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0015c94:	57                   	push   edi
c0015c95:	56                   	push   esi
c0015c96:	53                   	push   ebx
c0015c97:	83 ec 10             	sub    esp,0x10
c0015c9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c9e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015ca2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015ca6:	53                   	push   ebx
c0015ca7:	e8 fb fc ff ff       	call   c00159a7 <KeIsELFValid(Elf32_Ehdr*)>
c0015cac:	59                   	pop    ecx
c0015cad:	84 c0                	test   al,al
c0015caf:	75 04                	jne    c0015cb5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0015cb1:	31 c0                	xor    eax,eax
c0015cb3:	eb 4d                	jmp    c0015d02 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015cb5:	81 e6 ff 00 00 00    	and    esi,0xff
c0015cbb:	74 07                	je     c0015cc4 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0015cbd:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0015cc2:	74 ed                	je     c0015cb1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015cc4:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0015cc9:	74 e6                	je     c0015cb1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015ccb:	52                   	push   edx
c0015ccc:	57                   	push   edi
c0015ccd:	56                   	push   esi
c0015cce:	53                   	push   ebx
c0015ccf:	e8 35 fd ff ff       	call   c0015a09 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0015cd4:	59                   	pop    ecx
c0015cd5:	5a                   	pop    edx
c0015cd6:	50                   	push   eax
c0015cd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cdb:	68 a4 52 02 c0       	push   0xc00252a4
c0015ce0:	e8 97 12 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	85 f6                	test   esi,esi
c0015cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cee:	74 12                	je     c0015d02 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015cf0:	50                   	push   eax
c0015cf1:	50                   	push   eax
c0015cf2:	57                   	push   edi
c0015cf3:	53                   	push   ebx
c0015cf4:	e8 e6 fe ff ff       	call   c0015bdf <KePerformRelocations(unsigned char*, unsigned long)>
c0015cf9:	83 c4 10             	add    esp,0x10
c0015cfc:	84 c0                	test   al,al
c0015cfe:	74 b1                	je     c0015cb1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015d00:	89 f8                	mov    eax,edi
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	5b                   	pop    ebx
c0015d06:	5e                   	pop    esi
c0015d07:	5f                   	pop    edi
c0015d08:	c3                   	ret    

c0015d09 <KeLoadDriver(char const*)>:
c0015d09:	55                   	push   ebp
c0015d0a:	57                   	push   edi
c0015d0b:	56                   	push   esi
c0015d0c:	53                   	push   ebx
c0015d0d:	83 ec 34             	sub    esp,0x34
c0015d10:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015d14:	56                   	push   esi
c0015d15:	68 c8 52 02 c0       	push   0xc00252c8
c0015d1a:	e8 5d 12 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015d1f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015d26:	e8 20 9b ff ff       	call   c000f84b <malloc>
c0015d2b:	83 c4 0c             	add    esp,0xc
c0015d2e:	89 c3                	mov    ebx,eax
c0015d30:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0015d36:	56                   	push   esi
c0015d37:	50                   	push   eax
c0015d38:	e8 4d 24 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	85 db                	test   ebx,ebx
c0015d42:	0f 84 0e 01 00 00    	je     c0015e56 <KeLoadDriver(char const*)+0x14d>
c0015d48:	55                   	push   ebp
c0015d49:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015d4d:	50                   	push   eax
c0015d4e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015d52:	50                   	push   eax
c0015d53:	53                   	push   ebx
c0015d54:	e8 51 27 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015d61:	0f 85 ef 00 00 00    	jne    c0015e56 <KeLoadDriver(char const*)+0x14d>
c0015d67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d6f:	89 d1                	mov    ecx,edx
c0015d71:	09 c1                	or     ecx,eax
c0015d73:	0f 84 dd 00 00 00    	je     c0015e56 <KeLoadDriver(char const*)+0x14d>
c0015d79:	05 ff 0f 00 00       	add    eax,0xfff
c0015d7e:	83 d2 00             	adc    edx,0x0
c0015d81:	51                   	push   ecx
c0015d82:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015d86:	6a 03                	push   0x3
c0015d88:	50                   	push   eax
c0015d89:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0015d8f:	e8 8a dc ff ff       	call   c0013a1e <VAS::allocatePages(int, int)>
c0015d94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d98:	5e                   	pop    esi
c0015d99:	5f                   	pop    edi
c0015d9a:	6a 01                	push   0x1
c0015d9c:	53                   	push   ebx
c0015d9d:	e8 06 24 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	85 c0                	test   eax,eax
c0015da7:	74 11                	je     c0015dba <KeLoadDriver(char const*)+0xb1>
c0015da9:	83 ec 0c             	sub    esp,0xc
c0015dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dae:	53                   	push   ebx
c0015daf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	e9 9c 00 00 00       	jmp    c0015e56 <KeLoadDriver(char const*)+0x14d>
c0015dba:	83 ec 0c             	sub    esp,0xc
c0015dbd:	31 ed                	xor    ebp,ebp
c0015dbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015dc3:	e8 83 9a ff ff       	call   c000f84b <malloc>
c0015dc8:	5a                   	pop    edx
c0015dc9:	89 c6                	mov    esi,eax
c0015dcb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015dcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dd1:	52                   	push   edx
c0015dd2:	56                   	push   esi
c0015dd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ddb:	53                   	push   ebx
c0015ddc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ddf:	83 c4 14             	add    esp,0x14
c0015de2:	53                   	push   ebx
c0015de3:	e8 1e 24 ff ff       	call   c0008206 <File::close()>
c0015de8:	83 c4 0c             	add    esp,0xc
c0015deb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015def:	6a 01                	push   0x1
c0015df1:	56                   	push   esi
c0015df2:	e8 9d fe ff ff       	call   c0015c94 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	89 c3                	mov    ebx,eax
c0015dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e04:	05 ff 0f 00 00       	add    eax,0xfff
c0015e09:	bf 00 00 00 00       	mov    edi,0x0
c0015e0e:	83 d2 00             	adc    edx,0x0
c0015e11:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015e15:	c1 ea 0c             	shr    edx,0xc
c0015e18:	39 c5                	cmp    ebp,eax
c0015e1a:	89 d1                	mov    ecx,edx
c0015e1c:	89 f8                	mov    eax,edi
c0015e1e:	19 c8                	sbb    eax,ecx
c0015e20:	73 36                	jae    c0015e58 <KeLoadDriver(char const*)+0x14f>
c0015e22:	50                   	push   eax
c0015e23:	50                   	push   eax
c0015e24:	89 e8                	mov    eax,ebp
c0015e26:	c1 e0 0c             	shl    eax,0xc
c0015e29:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0015e2d:	50                   	push   eax
c0015e2e:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0015e34:	e8 e7 d6 ff ff       	call   c0013520 <VAS::getPageTableEntry(unsigned long)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e3e:	a8 60                	test   al,0x60
c0015e40:	75 11                	jne    c0015e53 <KeLoadDriver(char const*)+0x14a>
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015e4a:	50                   	push   eax
c0015e4b:	e8 db 9f ff ff       	call   c000fe2b <Phys::freePage(unsigned long)>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	45                   	inc    ebp
c0015e54:	eb a6                	jmp    c0015dfc <KeLoadDriver(char const*)+0xf3>
c0015e56:	31 db                	xor    ebx,ebx
c0015e58:	83 c4 2c             	add    esp,0x2c
c0015e5b:	89 d8                	mov    eax,ebx
c0015e5d:	5b                   	pop    ebx
c0015e5e:	5e                   	pop    esi
c0015e5f:	5f                   	pop    edi
c0015e60:	5d                   	pop    ebp
c0015e61:	c3                   	ret    

c0015e62 <KeExecuteDriver(unsigned long, void*)>:
c0015e62:	56                   	push   esi
c0015e63:	53                   	push   ebx
c0015e64:	51                   	push   ecx
c0015e65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015e6d:	85 db                	test   ebx,ebx
c0015e6f:	75 10                	jne    c0015e81 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0015e71:	83 ec 0c             	sub    esp,0xc
c0015e74:	68 de 52 02 c0       	push   0xc00252de
c0015e79:	e8 22 9e ff ff       	call   c000fca0 <KePanic(char const*)>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0015e85:	89 d8                	mov    eax,ebx
c0015e87:	5a                   	pop    edx
c0015e88:	5b                   	pop    ebx
c0015e89:	5e                   	pop    esi
c0015e8a:	ff e0                	jmp    eax

c0015e8c <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0015e8c:	57                   	push   edi
c0015e8d:	56                   	push   esi
c0015e8e:	53                   	push   ebx
c0015e8f:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0015e95:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0015e9c:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0015ea3:	56                   	push   esi
c0015ea4:	e8 60 fe ff ff       	call   c0015d09 <KeLoadDriver(char const*)>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	85 c0                	test   eax,eax
c0015eae:	74 16                	je     c0015ec6 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0015eb0:	53                   	push   ebx
c0015eb1:	53                   	push   ebx
c0015eb2:	b3 01                	mov    bl,0x1
c0015eb4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0015ebb:	50                   	push   eax
c0015ebc:	e8 a1 ff ff ff       	call   c0015e62 <KeExecuteDriver(unsigned long, void*)>
c0015ec1:	83 c4 10             	add    esp,0x10
c0015ec4:	eb 2d                	jmp    c0015ef3 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015ec6:	89 fb                	mov    ebx,edi
c0015ec8:	84 db                	test   bl,bl
c0015eca:	74 27                	je     c0015ef3 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015ecc:	50                   	push   eax
c0015ecd:	50                   	push   eax
c0015ece:	68 08 53 02 c0       	push   0xc0025308
c0015ed3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015ed7:	53                   	push   ebx
c0015ed8:	e8 63 a7 fe ff       	call   c0000640 <strcpy>
c0015edd:	5a                   	pop    edx
c0015ede:	59                   	pop    ecx
c0015edf:	56                   	push   esi
c0015ee0:	53                   	push   ebx
c0015ee1:	e8 5a a9 fe ff       	call   c0000840 <strcat>
c0015ee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ee9:	e8 b2 9d ff ff       	call   c000fca0 <KePanic(char const*)>
c0015eee:	31 db                	xor    ebx,ebx
c0015ef0:	83 c4 10             	add    esp,0x10
c0015ef3:	81 c4 00 01 00 00    	add    esp,0x100
c0015ef9:	88 d8                	mov    al,bl
c0015efb:	5b                   	pop    ebx
c0015efc:	5e                   	pop    esi
c0015efd:	5f                   	pop    edi
c0015efe:	c3                   	ret    

c0015eff <KeProcessExec(Process*, char const*)>:
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 04             	sub    esp,0x4
c0015f04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f08:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0015f0e:	85 f6                	test   esi,esi
c0015f10:	74 16                	je     c0015f28 <KeProcessExec(Process*, char const*)+0x29>
c0015f12:	83 ec 0c             	sub    esp,0xc
c0015f15:	56                   	push   esi
c0015f16:	e8 97 d8 ff ff       	call   c00137b2 <VAS::~VAS()>
c0015f1b:	58                   	pop    eax
c0015f1c:	5a                   	pop    edx
c0015f1d:	6a 14                	push   0x14
c0015f1f:	56                   	push   esi
c0015f20:	e8 3f 74 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	6a 14                	push   0x14
c0015f2d:	e8 19 99 ff ff       	call   c000f84b <malloc>
c0015f32:	89 c6                	mov    esi,eax
c0015f34:	58                   	pop    eax
c0015f35:	5a                   	pop    edx
c0015f36:	6a 00                	push   0x0
c0015f38:	56                   	push   esi
c0015f39:	e8 14 dd ff ff       	call   c0013c52 <VAS::VAS(bool)>
c0015f3e:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0015f44:	59                   	pop    ecx
c0015f45:	5e                   	pop    esi
c0015f46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f4a:	50                   	push   eax
c0015f4b:	53                   	push   ebx
c0015f4c:	e8 9e f4 ff ff       	call   c00153ef <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015f51:	83 c4 14             	add    esp,0x14
c0015f54:	31 c0                	xor    eax,eax
c0015f56:	5b                   	pop    ebx
c0015f57:	5e                   	pop    esi
c0015f58:	c3                   	ret    
c0015f59:	66 90                	xchg   ax,ax
c0015f5b:	90                   	nop

c0015f5c <userModeEntryPoint(void*)>:
c0015f5c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0015f64:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0015f69:	85 c0                	test   eax,eax
c0015f6b:	75 03                	jne    c0015f70 <userModeEntryPoint(void*)+0x14>
c0015f6d:	fb                   	sti    
c0015f6e:	66 90                	xchg   ax,ax
c0015f70:	fb                   	sti    
c0015f71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f79:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0015f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f83:	e9 b7 a2 fe ff       	jmp    c000023f <goToUsermode>

c0015f88 <changeTSS>:
c0015f88:	83 ec 14             	sub    esp,0x14
c0015f8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f90:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0015f93:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015f98:	c1 e2 15             	shl    edx,0x15
c0015f9b:	29 d0                	sub    eax,edx
c0015f9d:	50                   	push   eax
c0015f9e:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0015fa3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015fa9:	05 68 11 00 00       	add    eax,0x1168
c0015fae:	50                   	push   eax
c0015faf:	e8 44 cb ff ff       	call   c0012af8 <TSS::setESP(unsigned long)>
c0015fb4:	83 c4 1c             	add    esp,0x1c
c0015fb7:	c3                   	ret    

c0015fb8 <switchToThread(ThreadControlBlock*)>:
c0015fb8:	57                   	push   edi
c0015fb9:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0015fbf:	56                   	push   esi
c0015fc0:	85 c9                	test   ecx,ecx
c0015fc2:	53                   	push   ebx
c0015fc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fc7:	0f 85 9b 00 00 00    	jne    c0016068 <switchToThread(ThreadControlBlock*)+0xb0>
c0015fcd:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0015fd1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015fd7:	0f 84 87 00 00 00    	je     c0016064 <switchToThread(ThreadControlBlock*)+0xac>
c0015fdd:	b8 00 04 00 00       	mov    eax,0x400
c0015fe2:	29 d0                	sub    eax,edx
c0015fe4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0015fe7:	d1 f8                	sar    eax,1
c0015fe9:	01 d0                	add    eax,edx
c0015feb:	90                   	nop
c0015fec:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0015fef:	e8 9a 4a 00 00       	call   c001aa8e <HalQueryPerformanceCounter()>
c0015ff4:	a3 70 d3 02 c0       	mov    ds:0xc002d370,eax
c0015ff9:	89 15 74 d3 02 c0    	mov    DWORD PTR ds:0xc002d374,edx
c0015fff:	89 c6                	mov    esi,eax
c0016001:	89 d7                	mov    edi,edx
c0016003:	2b 35 60 d3 02 c0    	sub    esi,DWORD PTR ds:0xc002d360
c0016009:	a3 60 d3 02 c0       	mov    ds:0xc002d360,eax
c001600e:	1b 3d 64 d3 02 c0    	sbb    edi,DWORD PTR ds:0xc002d364
c0016014:	89 35 68 d3 02 c0    	mov    DWORD PTR ds:0xc002d368,esi
c001601a:	89 3d 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edi
c0016020:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016026:	89 15 64 d3 02 c0    	mov    DWORD PTR ds:0xc002d364,edx
c001602c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001602f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016032:	01 c6                	add    esi,eax
c0016034:	11 d7                	adc    edi,edx
c0016036:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016039:	83 ec 0c             	sub    esp,0xc
c001603c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001603f:	53                   	push   ebx
c0016040:	e8 32 a2 fe ff       	call   c0000277 <switchToThreadASM>
c0016045:	0f 20 c0             	mov    eax,cr0
c0016048:	83 c8 08             	or     eax,0x8
c001604b:	0f 22 c0             	mov    cr0,eax
c001604e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001605a:	5b                   	pop    ebx
c001605b:	5e                   	pop    esi
c001605c:	5f                   	pop    edi
c001605d:	e9 0a f0 ff ff       	jmp    c001506c <KeCheckAlarm(ThreadControlBlock*)>
c0016062:	66 90                	xchg   ax,ax
c0016064:	31 c0                	xor    eax,eax
c0016066:	eb 84                	jmp    c0015fec <switchToThread(ThreadControlBlock*)+0x34>
c0016068:	5b                   	pop    ebx
c0016069:	c7 05 28 d3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x1
c0016073:	5e                   	pop    esi
c0016074:	5f                   	pop    edi
c0016075:	c3                   	ret    
c0016076:	66 90                	xchg   ax,ax

c0016078 <Process::addArgs(char**)>:
c0016078:	57                   	push   edi
c0016079:	56                   	push   esi
c001607a:	53                   	push   ebx
c001607b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001607f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016083:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c001608d:	85 ff                	test   edi,edi
c001608f:	74 4f                	je     c00160e0 <Process::addArgs(char**)+0x68>
c0016091:	8b 07                	mov    eax,DWORD PTR [edi]
c0016093:	85 c0                	test   eax,eax
c0016095:	74 49                	je     c00160e0 <Process::addArgs(char**)+0x68>
c0016097:	31 db                	xor    ebx,ebx
c0016099:	8d 76 00             	lea    esi,[esi+0x0]
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	50                   	push   eax
c00160a0:	e8 cb a4 fe ff       	call   c0000570 <strlen>
c00160a5:	83 c0 01             	add    eax,0x1
c00160a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00160ab:	e8 9b 97 ff ff       	call   c000f84b <malloc>
c00160b0:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00160b7:	5a                   	pop    edx
c00160b8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00160bb:	59                   	pop    ecx
c00160bc:	83 c3 01             	add    ebx,0x1
c00160bf:	52                   	push   edx
c00160c0:	50                   	push   eax
c00160c1:	e8 7a a5 fe ff       	call   c0000640 <strcpy>
c00160c6:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00160cc:	83 c4 10             	add    esp,0x10
c00160cf:	83 c1 01             	add    ecx,0x1
c00160d2:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00160d8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00160db:	85 c0                	test   eax,eax
c00160dd:	75 bd                	jne    c001609c <Process::addArgs(char**)+0x24>
c00160df:	90                   	nop
c00160e0:	5b                   	pop    ebx
c00160e1:	5e                   	pop    esi
c00160e2:	5f                   	pop    edi
c00160e3:	c3                   	ret    

c00160e4 <Process::Process(char const*, Process*, char**)>:
c00160e4:	56                   	push   esi
c00160e5:	53                   	push   ebx
c00160e6:	83 ec 14             	sub    esp,0x14
c00160e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ed:	05 0c 02 00 00       	add    eax,0x20c
c00160f2:	bb 07 00 00 00       	mov    ebx,0x7
c00160f7:	89 c6                	mov    esi,eax
c00160f9:	8d 76 00             	lea    esi,[esi+0x0]
c00160fc:	85 db                	test   ebx,ebx
c00160fe:	78 14                	js     c0016114 <Process::Process(char const*, Process*, char**)+0x30>
c0016100:	83 ec 0c             	sub    esp,0xc
c0016103:	56                   	push   esi
c0016104:	e8 b7 c7 00 00       	call   c00228c0 <ThreadControlBlock::ThreadControlBlock()>
c0016109:	83 c4 10             	add    esp,0x10
c001610c:	83 c6 73             	add    esi,0x73
c001610f:	83 eb 01             	sub    ebx,0x1
c0016112:	eb e8                	jmp    c00160fc <Process::Process(char const*, Process*, char**)+0x18>
c0016114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016118:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001611f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016123:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001612a:	83 ec 0c             	sub    esp,0xc
c001612d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016131:	e8 5a 84 ff ff       	call   c000e590 <KeNewProcessEnv(Process*)>
c0016136:	83 c4 10             	add    esp,0x10
c0016139:	89 c2                	mov    edx,eax
c001613b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001613f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016149:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016152:	a1 7c 6f 02 c0       	mov    eax,ds:0xc0026f7c
c0016157:	8d 50 01             	lea    edx,[eax+0x1]
c001615a:	89 15 7c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f7c,edx
c0016160:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016164:	89 02                	mov    DWORD PTR [edx],eax
c0016166:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001616e:	83 ec 0c             	sub    esp,0xc
c0016171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016175:	e8 d1 96 ff ff       	call   c000f84b <malloc>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	89 c3                	mov    ebx,eax
c001617f:	83 ec 08             	sub    esp,0x8
c0016182:	6a 00                	push   0x0
c0016184:	53                   	push   ebx
c0016185:	e8 c8 da ff ff       	call   c0013c52 <VAS::VAS(bool)>
c001618a:	83 c4 10             	add    esp,0x10
c001618d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016191:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00161a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161ad:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00161b3:	e8 5b ac ff ff       	call   c0010e13 <KeInitSignals()>
c00161b8:	89 c2                	mov    edx,eax
c00161ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161be:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00161c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00161ce:	85 c0                	test   eax,eax
c00161d0:	74 42                	je     c0016214 <Process::Process(char const*, Process*, char**)+0x130>
c00161d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d6:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00161dc:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00161e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e6:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c00161ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00161f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00161fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016200:	05 0c 01 00 00       	add    eax,0x10c
c0016205:	83 ec 08             	sub    esp,0x8
c0016208:	52                   	push   edx
c0016209:	50                   	push   eax
c001620a:	e8 31 a4 fe ff       	call   c0000640 <strcpy>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	eb 7c                	jmp    c0016290 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016214:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016223:	e8 23 96 ff ff       	call   c000f84b <malloc>
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	89 c3                	mov    ebx,eax
c001622d:	83 ec 08             	sub    esp,0x8
c0016230:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016234:	53                   	push   ebx
c0016235:	e8 be c5 ff ff       	call   c00127f8 <VgaText::VgaText(char const*)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016241:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001624b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	50                   	push   eax
c0016255:	e8 f4 bd ff ff       	call   c001204e <addToTerminalCycle(VgaText*)>
c001625a:	83 c4 10             	add    esp,0x10
c001625d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016261:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016267:	83 ec 0c             	sub    esp,0xc
c001626a:	50                   	push   eax
c001626b:	e8 4f c0 ff ff       	call   c00122bf <setActiveTerminal(VgaText*)>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016277:	05 0c 01 00 00       	add    eax,0x10c
c001627c:	83 ec 08             	sub    esp,0x8
c001627f:	68 1c 53 02 c0       	push   0xc002531c
c0016284:	50                   	push   eax
c0016285:	e8 b6 a3 fe ff       	call   c0000640 <strcpy>
c001628a:	83 c4 10             	add    esp,0x10
c001628d:	8d 76 00             	lea    esi,[esi+0x0]
c0016290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016294:	83 c0 0c             	add    eax,0xc
c0016297:	83 ec 08             	sub    esp,0x8
c001629a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001629e:	50                   	push   eax
c001629f:	e8 9c a3 fe ff       	call   c0000640 <strcpy>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	83 ec 08             	sub    esp,0x8
c00162aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00162ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b2:	e8 c1 fd ff ff       	call   c0016078 <Process::addArgs(char**)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162be:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00162c4:	83 e2 7f             	and    edx,0x7f
c00162c7:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00162cd:	83 ec 08             	sub    esp,0x8
c00162d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d8:	e8 12 f1 ff ff       	call   c00153ef <Thr::loadProgramIntoMemory(Process*, char const*)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00162e8:	83 f0 01             	xor    eax,0x1
c00162eb:	88 c2                	mov    dl,al
c00162ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f1:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c00162f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00162fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016302:	52                   	push   edx
c0016303:	50                   	push   eax
c0016304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016308:	68 88 53 02 c0       	push   0xc0025388
c001630d:	e8 6a 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016312:	83 c4 10             	add    esp,0x10
c0016315:	90                   	nop
c0016316:	83 c4 14             	add    esp,0x14
c0016319:	5b                   	pop    ebx
c001631a:	5e                   	pop    esi
c001631b:	c3                   	ret    

c001631c <Process::Process(bool, char const*, Process*, char**)>:
c001631c:	56                   	push   esi
c001631d:	53                   	push   ebx
c001631e:	83 ec 24             	sub    esp,0x24
c0016321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016325:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001632d:	05 0c 02 00 00       	add    eax,0x20c
c0016332:	bb 07 00 00 00       	mov    ebx,0x7
c0016337:	89 c6                	mov    esi,eax
c0016339:	8d 76 00             	lea    esi,[esi+0x0]
c001633c:	85 db                	test   ebx,ebx
c001633e:	78 14                	js     c0016354 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	56                   	push   esi
c0016344:	e8 77 c5 00 00       	call   c00228c0 <ThreadControlBlock::ThreadControlBlock()>
c0016349:	83 c4 10             	add    esp,0x10
c001634c:	83 c6 73             	add    esi,0x73
c001634f:	83 eb 01             	sub    ebx,0x1
c0016352:	eb e8                	jmp    c001633c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016358:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001635f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016363:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001636a:	83 ec 0c             	sub    esp,0xc
c001636d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016371:	e8 1a 82 ff ff       	call   c000e590 <KeNewProcessEnv(Process*)>
c0016376:	83 c4 10             	add    esp,0x10
c0016379:	89 c2                	mov    edx,eax
c001637b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001637f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016385:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016389:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016392:	a1 7c 6f 02 c0       	mov    eax,ds:0xc0026f7c
c0016397:	8d 50 01             	lea    edx,[eax+0x1]
c001639a:	89 15 7c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f7c,edx
c00163a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00163a4:	89 02                	mov    DWORD PTR [edx],eax
c00163a6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00163ae:	83 ec 0c             	sub    esp,0xc
c00163b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00163b5:	e8 91 94 ff ff       	call   c000f84b <malloc>
c00163ba:	83 c4 10             	add    esp,0x10
c00163bd:	89 c3                	mov    ebx,eax
c00163bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00163c4:	83 ec 08             	sub    esp,0x8
c00163c7:	50                   	push   eax
c00163c8:	53                   	push   ebx
c00163c9:	e8 84 d8 ff ff       	call   c0013c52 <VAS::VAS(bool)>
c00163ce:	83 c4 10             	add    esp,0x10
c00163d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163d5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00163db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163df:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00163e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163ed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00163f1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00163f7:	e8 17 aa ff ff       	call   c0010e13 <KeInitSignals()>
c00163fc:	89 c2                	mov    edx,eax
c00163fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016402:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016408:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001640c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016412:	85 c0                	test   eax,eax
c0016414:	74 42                	je     c0016458 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001641a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016420:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016426:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001642a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016430:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016434:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001643a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016444:	05 0c 01 00 00       	add    eax,0x10c
c0016449:	83 ec 08             	sub    esp,0x8
c001644c:	52                   	push   edx
c001644d:	50                   	push   eax
c001644e:	e8 ed a1 fe ff       	call   c0000640 <strcpy>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	eb 7c                	jmp    c00164d4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016458:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016460:	83 ec 0c             	sub    esp,0xc
c0016463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016467:	e8 df 93 ff ff       	call   c000f84b <malloc>
c001646c:	83 c4 10             	add    esp,0x10
c001646f:	89 c3                	mov    ebx,eax
c0016471:	83 ec 08             	sub    esp,0x8
c0016474:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016478:	53                   	push   ebx
c0016479:	e8 7a c3 ff ff       	call   c00127f8 <VgaText::VgaText(char const*)>
c001647e:	83 c4 10             	add    esp,0x10
c0016481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016485:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001648b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001648f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016495:	83 ec 0c             	sub    esp,0xc
c0016498:	50                   	push   eax
c0016499:	e8 b0 bb ff ff       	call   c001204e <addToTerminalCycle(VgaText*)>
c001649e:	83 c4 10             	add    esp,0x10
c00164a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00164ab:	83 ec 0c             	sub    esp,0xc
c00164ae:	50                   	push   eax
c00164af:	e8 0b be ff ff       	call   c00122bf <setActiveTerminal(VgaText*)>
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164bb:	05 0c 01 00 00       	add    eax,0x10c
c00164c0:	83 ec 08             	sub    esp,0x8
c00164c3:	68 1c 53 02 c0       	push   0xc002531c
c00164c8:	50                   	push   eax
c00164c9:	e8 72 a1 fe ff       	call   c0000640 <strcpy>
c00164ce:	83 c4 10             	add    esp,0x10
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164d8:	83 c0 0c             	add    eax,0xc
c00164db:	83 ec 08             	sub    esp,0x8
c00164de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00164e2:	50                   	push   eax
c00164e3:	e8 58 a1 fe ff       	call   c0000640 <strcpy>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	83 ec 08             	sub    esp,0x8
c00164ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00164f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00164f6:	e8 7d fb ff ff       	call   c0016078 <Process::addArgs(char**)>
c00164fb:	83 c4 10             	add    esp,0x10
c00164fe:	90                   	nop
c00164ff:	83 c4 24             	add    esp,0x24
c0016502:	5b                   	pop    ebx
c0016503:	5e                   	pop    esi
c0016504:	c3                   	ret    
c0016505:	8d 76 00             	lea    esi,[esi+0x0]

c0016508 <taskStartupFunction>:
c0016508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016510:	c3                   	ret    
c0016511:	8d 76 00             	lea    esi,[esi+0x0]

c0016514 <KeDisablePreemption()>:
c0016514:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c0016519:	85 c0                	test   eax,eax
c001651b:	75 13                	jne    c0016530 <KeDisablePreemption()+0x1c>
c001651d:	8a 15 0c d1 02 c0    	mov    dl,BYTE PTR ds:0xc002d10c
c0016523:	c6 05 0c d1 02 c0 00 	mov    BYTE PTR ds:0xc002d10c,0x0
c001652a:	88 15 08 d3 02 c0    	mov    BYTE PTR ds:0xc002d308,dl
c0016530:	83 c0 01             	add    eax,0x1
c0016533:	a3 0c d3 02 c0       	mov    ds:0xc002d30c,eax
c0016538:	c3                   	ret    
c0016539:	8d 76 00             	lea    esi,[esi+0x0]

c001653c <KeRestorePreemption()>:
c001653c:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c0016541:	83 e8 01             	sub    eax,0x1
c0016544:	a3 0c d3 02 c0       	mov    ds:0xc002d30c,eax
c0016549:	75 0d                	jne    c0016558 <KeRestorePreemption()+0x1c>
c001654b:	a0 08 d3 02 c0       	mov    al,ds:0xc002d308
c0016550:	a2 0c d1 02 c0       	mov    ds:0xc002d10c,al
c0016555:	8d 76 00             	lea    esi,[esi+0x0]
c0016558:	c3                   	ret    
c0016559:	90                   	nop
c001655a:	66 90                	xchg   ax,ax

c001655c <Process::createThread(void (*)(void*), void*, int)>:
c001655c:	55                   	push   ebp
c001655d:	31 c9                	xor    ecx,ecx
c001655f:	57                   	push   edi
c0016560:	56                   	push   esi
c0016561:	53                   	push   ebx
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016569:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016570:	89 f2                	mov    edx,esi
c0016572:	66 90                	xchg   ax,ax
c0016574:	0f b7 c2             	movzx  eax,dx
c0016577:	80 e2 01             	and    dl,0x1
c001657a:	74 18                	je     c0016594 <Process::createThread(void (*)(void*), void*, int)+0x38>
c001657c:	d1 f8                	sar    eax,1
c001657e:	83 c1 01             	add    ecx,0x1
c0016581:	89 c2                	mov    edx,eax
c0016583:	83 f9 10             	cmp    ecx,0x10
c0016586:	75 ec                	jne    c0016574 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016588:	83 c4 0c             	add    esp,0xc
c001658b:	31 db                	xor    ebx,ebx
c001658d:	89 d8                	mov    eax,ebx
c001658f:	5b                   	pop    ebx
c0016590:	5e                   	pop    esi
c0016591:	5f                   	pop    edi
c0016592:	5d                   	pop    ebp
c0016593:	c3                   	ret    
c0016594:	b8 01 00 00 00       	mov    eax,0x1
c0016599:	d3 e0                	shl    eax,cl
c001659b:	09 c6                	or     esi,eax
c001659d:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00165a0:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00165a7:	01 c0                	add    eax,eax
c00165a9:	01 c8                	add    eax,ecx
c00165ab:	01 c0                	add    eax,eax
c00165ad:	01 c8                	add    eax,ecx
c00165af:	8d 04 80             	lea    eax,[eax+eax*4]
c00165b2:	01 d8                	add    eax,ebx
c00165b4:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00165bb:	75 0b                	jne    c00165c8 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c00165bd:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00165c7:	90                   	nop
c00165c8:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00165d4:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00165d7:	01 c0                	add    eax,eax
c00165d9:	01 c8                	add    eax,ecx
c00165db:	01 c0                	add    eax,eax
c00165dd:	01 c8                	add    eax,ecx
c00165df:	8d 3c 80             	lea    edi,[eax+eax*4]
c00165e2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00165e5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00165eb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00165f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00165f5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00165fb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016601:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016607:	89 ca                	mov    edx,ecx
c0016609:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016610:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016614:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c001661e:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016628:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c001662f:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016636:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c001663d:	f7 da                	neg    edx
c001663f:	c1 e2 15             	shl    edx,0x15
c0016642:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016648:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001664e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016652:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001665c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016662:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016668:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c001666e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016678:	83 e2 80             	and    edx,0xffffff80
c001667b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016685:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c001668b:	68 00 01 00 00       	push   0x100
c0016690:	e8 b6 91 ff ff       	call   c000f84b <malloc>
c0016695:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016698:	58                   	pop    eax
c0016699:	5a                   	pop    edx
c001669a:	53                   	push   ebx
c001669b:	68 20 53 02 c0       	push   0xc0025320
c00166a0:	e8 d7 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00166a5:	59                   	pop    ecx
c00166a6:	5e                   	pop    esi
c00166a7:	53                   	push   ebx
c00166a8:	68 4c d3 02 c0       	push   0xc002d34c
c00166ad:	e8 ba bd 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166b2:	89 d8                	mov    eax,ebx
c00166b4:	83 c4 10             	add    esp,0x10
c00166b7:	83 c4 0c             	add    esp,0xc
c00166ba:	5b                   	pop    ebx
c00166bb:	5e                   	pop    esi
c00166bc:	5f                   	pop    edi
c00166bd:	5d                   	pop    ebp
c00166be:	c3                   	ret    
c00166bf:	90                   	nop

c00166c0 <Process::createUserThread()>:
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	68 80 00 00 00       	push   0x80
c00166c8:	6a 00                	push   0x0
c00166ca:	68 5c 5f 01 c0       	push   0xc0015f5c
c00166cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166d3:	50                   	push   eax
c00166d4:	e8 83 fe ff ff       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c00166d9:	83 c4 1c             	add    esp,0x1c
c00166dc:	c3                   	ret    
c00166dd:	8d 76 00             	lea    esi,[esi+0x0]

c00166e0 <setupMultitasking(void (*)())>:
c00166e0:	56                   	push   esi
c00166e1:	53                   	push   ebx
c00166e2:	83 ec 04             	sub    esp,0x4
c00166e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e9:	eb 11                	jmp    c00166fc <setupMultitasking(void (*)())+0x1c>
c00166eb:	90                   	nop
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 4c d3 02 c0       	push   0xc002d34c
c00166f4:	e8 b7 bc 00 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	68 4c d3 02 c0       	push   0xc002d34c
c0016704:	e8 83 bc 00 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	84 c0                	test   al,al
c001670e:	74 dc                	je     c00166ec <setupMultitasking(void (*)())+0xc>
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	68 c4 07 00 00       	push   0x7c4
c0016718:	e8 2e 91 ff ff       	call   c000f84b <malloc>
c001671d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016724:	89 c3                	mov    ebx,eax
c0016726:	6a 00                	push   0x0
c0016728:	68 34 53 02 c0       	push   0xc0025334
c001672d:	6a 01                	push   0x1
c001672f:	50                   	push   eax
c0016730:	e8 e7 fb ff ff       	call   c001631c <Process::Process(bool, char const*, Process*, char**)>
c0016735:	83 c4 14             	add    esp,0x14
c0016738:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c001673e:	89 1d 58 d3 02 c0    	mov    DWORD PTR ds:0xc002d358,ebx
c0016744:	50                   	push   eax
c0016745:	e8 75 bb ff ff       	call   c00122bf <setActiveTerminal(VgaText*)>
c001674a:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016751:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001675b:	83 c8 01             	or     eax,0x1
c001675e:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016765:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001676b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001676e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016778:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001677e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016784:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001678e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016798:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00167a2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00167a8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00167b2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00167b8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00167c2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00167c9:	e8 7d 90 ff ff       	call   c000f84b <malloc>
c00167ce:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00167d8:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00167de:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00167e5:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00167ec:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00167f3:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00167fa:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016800:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016806:	5a                   	pop    edx
c0016807:	59                   	pop    ecx
c0016808:	68 1c 53 02 c0       	push   0xc002531c
c001680d:	50                   	push   eax
c001680e:	e8 2d 9e fe ff       	call   c0000640 <strcpy>
c0016813:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001681a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001681e:	83 c4 14             	add    esp,0x14
c0016821:	5b                   	pop    ebx
c0016822:	5e                   	pop    esi
c0016823:	e9 41 9a fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016828 <schedule()>:
c0016828:	8b 15 2c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d32c
c001682e:	85 d2                	test   edx,edx
c0016830:	74 0e                	je     c0016840 <schedule()+0x18>
c0016832:	c7 05 28 d3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x1
c001683c:	c3                   	ret    
c001683d:	8d 76 00             	lea    esi,[esi+0x0]
c0016840:	53                   	push   ebx
c0016841:	83 ec 14             	sub    esp,0x14
c0016844:	68 4c d3 02 c0       	push   0xc002d34c
c0016849:	e8 3e bb 00 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	84 c0                	test   al,al
c0016853:	75 3f                	jne    c0016894 <schedule()+0x6c>
c0016855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001685a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001685d:	83 fa 01             	cmp    edx,0x1
c0016860:	74 3a                	je     c001689c <schedule()+0x74>
c0016862:	66 90                	xchg   ax,ax
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	68 4c d3 02 c0       	push   0xc002d34c
c001686c:	e8 37 bb 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016871:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016878:	89 c3                	mov    ebx,eax
c001687a:	e8 31 bb 00 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001687f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016886:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016889:	e8 2a f7 ff ff       	call   c0015fb8 <switchToThread(ThreadControlBlock*)>
c001688e:	83 c4 10             	add    esp,0x10
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	83 c4 08             	add    esp,0x8
c0016897:	5b                   	pop    ebx
c0016898:	c3                   	ret    
c0016899:	8d 76 00             	lea    esi,[esi+0x0]
c001689c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168a3:	83 ec 08             	sub    esp,0x8
c00168a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168ab:	50                   	push   eax
c00168ac:	68 4c d3 02 c0       	push   0xc002d34c
c00168b1:	e8 b6 bb 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	eb a9                	jmp    c0016864 <schedule()+0x3c>
c00168bb:	90                   	nop

c00168bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00168cb:	e8 58 ff ff ff       	call   c0016828 <schedule()>
c00168d0:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00168d8:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00168dd:	85 c0                	test   eax,eax
c00168df:	75 03                	jne    c00168e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00168e1:	fb                   	sti    
c00168e2:	66 90                	xchg   ax,ax
c00168e4:	83 c4 0c             	add    esp,0xc
c00168e7:	c3                   	ret    

c00168e8 <blockTask(TaskState)>:
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	fa                   	cli    
c00168ec:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00168f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168f5:	83 c0 01             	add    eax,0x1
c00168f8:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00168fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016902:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016905:	e8 1e ff ff ff       	call   c0016828 <schedule()>
c001690a:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016912:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016918:	85 d2                	test   edx,edx
c001691a:	75 04                	jne    c0016920 <blockTask(TaskState)+0x38>
c001691c:	fb                   	sti    
c001691d:	8d 76 00             	lea    esi,[esi+0x0]
c0016920:	83 c4 0c             	add    esp,0xc
c0016923:	c3                   	ret    

c0016924 <waitTask(int, int*, int)>:
c0016924:	83 ec 18             	sub    esp,0x18
c0016927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001692c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016930:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016933:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001693c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001693f:	6a 07                	push   0x7
c0016941:	e8 a2 ff ff ff       	call   c00168e8 <blockTask(TaskState)>
c0016946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016951:	85 d2                	test   edx,edx
c0016953:	74 0b                	je     c0016960 <waitTask(int, int*, int)+0x3c>
c0016955:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016958:	89 02                	mov    DWORD PTR [edx],eax
c001695a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001695f:	90                   	nop
c0016960:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016963:	83 c4 0c             	add    esp,0xc
c0016966:	c3                   	ret    
c0016967:	90                   	nop

c0016968 <milliTenthSleepUntil(unsigned long long)>:
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001696f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016973:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0016979:	89 d1                	mov    ecx,edx
c001697b:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c0016981:	73 05                	jae    c0016988 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016983:	90                   	nop
c0016984:	83 c4 0c             	add    esp,0xc
c0016987:	c3                   	ret    
c0016988:	fa                   	cli    
c0016989:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c001698f:	83 ec 08             	sub    esp,0x8
c0016992:	83 c1 01             	add    ecx,0x1
c0016995:	89 0d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ecx
c001699b:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c00169a1:	83 c1 01             	add    ecx,0x1
c00169a4:	89 0d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ecx
c00169aa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00169b0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00169b3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00169b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169bb:	50                   	push   eax
c00169bc:	68 40 d3 02 c0       	push   0xc002d340
c00169c1:	e8 a6 ba 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169c6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00169cd:	e8 16 ff ff ff       	call   c00168e8 <blockTask(TaskState)>
c00169d2:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00169d7:	83 c4 10             	add    esp,0x10
c00169da:	83 e8 01             	sub    eax,0x1
c00169dd:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00169e2:	85 c0                	test   eax,eax
c00169e4:	75 0a                	jne    c00169f0 <milliTenthSleepUntil(unsigned long long)+0x88>
c00169e6:	8b 15 28 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d328
c00169ec:	85 d2                	test   edx,edx
c00169ee:	75 18                	jne    c0016a08 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00169f0:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00169f8:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00169fd:	85 c0                	test   eax,eax
c00169ff:	75 83                	jne    c0016984 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016a01:	fb                   	sti    
c0016a02:	83 c4 0c             	add    esp,0xc
c0016a05:	c3                   	ret    
c0016a06:	66 90                	xchg   ax,ax
c0016a08:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0016a12:	e8 11 fe ff ff       	call   c0016828 <schedule()>
c0016a17:	eb d7                	jmp    c00169f0 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016a19:	8d 76 00             	lea    esi,[esi+0x0]

c0016a1c <milliTenthSleep(unsigned long long)>:
c0016a1c:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0016a21:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0016a27:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016a2b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016a2f:	e9 34 ff ff ff       	jmp    c0016968 <milliTenthSleepUntil(unsigned long long)>

c0016a34 <sleep(unsigned long long)>:
c0016a34:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016a3c:	b8 10 27 00 00       	mov    eax,0x2710
c0016a41:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016a45:	01 ca                	add    edx,ecx
c0016a47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016a4f:	eb cb                	jmp    c0016a1c <milliTenthSleep(unsigned long long)>
c0016a51:	8d 76 00             	lea    esi,[esi+0x0]

c0016a54 <sleep(unsigned int)>:
c0016a54:	83 ec 14             	sub    esp,0x14
c0016a57:	b8 10 27 00 00       	mov    eax,0x2710
c0016a5c:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016a60:	52                   	push   edx
c0016a61:	50                   	push   eax
c0016a62:	e8 b5 ff ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c0016a67:	83 c4 1c             	add    esp,0x1c
c0016a6a:	c3                   	ret    
c0016a6b:	90                   	nop

c0016a6c <milliTenthSleep(unsigned int)>:
c0016a6c:	83 ec 14             	sub    esp,0x14
c0016a6f:	31 d2                	xor    edx,edx
c0016a71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a75:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0016a7b:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c0016a81:	52                   	push   edx
c0016a82:	50                   	push   eax
c0016a83:	e8 e0 fe ff ff       	call   c0016968 <milliTenthSleepUntil(unsigned long long)>
c0016a88:	83 c4 1c             	add    esp,0x1c
c0016a8b:	c3                   	ret    

c0016a8c <taskReturned>:
c0016a8c:	83 ec 18             	sub    esp,0x18
c0016a8f:	68 bc 53 02 c0       	push   0xc00253bc
c0016a94:	e8 07 92 ff ff       	call   c000fca0 <KePanic(char const*)>
c0016a99:	83 c4 10             	add    esp,0x10
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	6a 02                	push   0x2
c0016aa1:	e8 42 fe ff ff       	call   c00168e8 <blockTask(TaskState)>
c0016aa6:	fa                   	cli    
c0016aa7:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016aac:	83 c0 01             	add    eax,0x1
c0016aaf:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016ab4:	e8 6f fd ff ff       	call   c0016828 <schedule()>
c0016ab9:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016ac1:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	85 d2                	test   edx,edx
c0016acc:	75 ce                	jne    c0016a9c <taskReturned+0x10>
c0016ace:	fb                   	sti    
c0016acf:	eb cb                	jmp    c0016a9c <taskReturned+0x10>
c0016ad1:	8d 76 00             	lea    esi,[esi+0x0]

c0016ad4 <KeProcessFromPID(int)>:
c0016ad4:	57                   	push   edi
c0016ad5:	56                   	push   esi
c0016ad6:	53                   	push   ebx
c0016ad7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016adb:	fa                   	cli    
c0016adc:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016ae1:	83 ec 0c             	sub    esp,0xc
c0016ae4:	83 c0 01             	add    eax,0x1
c0016ae7:	68 4c d3 02 c0       	push   0xc002d34c
c0016aec:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016af1:	e8 b2 b8 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	89 c7                	mov    edi,eax
c0016afb:	eb 17                	jmp    c0016b14 <KeProcessFromPID(int)+0x40>
c0016afd:	8d 76 00             	lea    esi,[esi+0x0]
c0016b00:	83 ec 0c             	sub    esp,0xc
c0016b03:	68 4c d3 02 c0       	push   0xc002d34c
c0016b08:	e8 9b b8 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	39 f8                	cmp    eax,edi
c0016b12:	74 50                	je     c0016b64 <KeProcessFromPID(int)+0x90>
c0016b14:	83 ec 0c             	sub    esp,0xc
c0016b17:	68 4c d3 02 c0       	push   0xc002d34c
c0016b1c:	e8 87 b8 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b21:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016b28:	89 c3                	mov    ebx,eax
c0016b2a:	e8 81 b8 00 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b2f:	59                   	pop    ecx
c0016b30:	58                   	pop    eax
c0016b31:	53                   	push   ebx
c0016b32:	68 4c d3 02 c0       	push   0xc002d34c
c0016b37:	e8 30 b9 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b3c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	39 30                	cmp    DWORD PTR [eax],esi
c0016b44:	75 ba                	jne    c0016b00 <KeProcessFromPID(int)+0x2c>
c0016b46:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016b4e:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016b54:	85 d2                	test   edx,edx
c0016b56:	74 08                	je     c0016b60 <KeProcessFromPID(int)+0x8c>
c0016b58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b5b:	5b                   	pop    ebx
c0016b5c:	5e                   	pop    esi
c0016b5d:	5f                   	pop    edi
c0016b5e:	c3                   	ret    
c0016b5f:	90                   	nop
c0016b60:	fb                   	sti    
c0016b61:	eb f5                	jmp    c0016b58 <KeProcessFromPID(int)+0x84>
c0016b63:	90                   	nop
c0016b64:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016b6c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016b71:	85 c0                	test   eax,eax
c0016b73:	75 07                	jne    c0016b7c <KeProcessFromPID(int)+0xa8>
c0016b75:	fb                   	sti    
c0016b76:	31 c0                	xor    eax,eax
c0016b78:	5b                   	pop    ebx
c0016b79:	5e                   	pop    esi
c0016b7a:	5f                   	pop    edi
c0016b7b:	c3                   	ret    
c0016b7c:	5b                   	pop    ebx
c0016b7d:	31 c0                	xor    eax,eax
c0016b7f:	5e                   	pop    esi
c0016b80:	5f                   	pop    edi
c0016b81:	c3                   	ret    
c0016b82:	66 90                	xchg   ax,ax

c0016b84 <unblockTask(ThreadControlBlock*)>:
c0016b84:	53                   	push   ebx
c0016b85:	83 ec 08             	sub    esp,0x8
c0016b88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b8c:	fa                   	cli    
c0016b8d:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016b93:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016b96:	83 c2 01             	add    edx,0x1
c0016b99:	85 c0                	test   eax,eax
c0016b9b:	89 15 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edx
c0016ba1:	74 6d                	je     c0016c10 <unblockTask(ThreadControlBlock*)+0x8c>
c0016ba3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016ba6:	83 f8 01             	cmp    eax,0x1
c0016ba9:	74 39                	je     c0016be4 <unblockTask(ThreadControlBlock*)+0x60>
c0016bab:	83 ec 0c             	sub    esp,0xc
c0016bae:	68 4c d3 02 c0       	push   0xc002d34c
c0016bb3:	e8 f0 b7 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bb8:	83 c4 10             	add    esp,0x10
c0016bbb:	85 c0                	test   eax,eax
c0016bbd:	75 1d                	jne    c0016bdc <unblockTask(ThreadControlBlock*)+0x58>
c0016bbf:	eb 63                	jmp    c0016c24 <unblockTask(ThreadControlBlock*)+0xa0>
c0016bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016bc4:	83 ec 08             	sub    esp,0x8
c0016bc7:	50                   	push   eax
c0016bc8:	68 4c d3 02 c0       	push   0xc002d34c
c0016bcd:	e8 e2 bc 00 00       	call   c00228b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	85 c0                	test   eax,eax
c0016bd7:	74 4b                	je     c0016c24 <unblockTask(ThreadControlBlock*)+0xa0>
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bdc:	39 c3                	cmp    ebx,eax
c0016bde:	75 e4                	jne    c0016bc4 <unblockTask(ThreadControlBlock*)+0x40>
c0016be0:	eb 12                	jmp    c0016bf4 <unblockTask(ThreadControlBlock*)+0x70>
c0016be2:	66 90                	xchg   ax,ax
c0016be4:	83 ec 0c             	sub    esp,0xc
c0016be7:	68 52 53 02 c0       	push   0xc0025352
c0016bec:	e8 8b 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016bf1:	83 c4 10             	add    esp,0x10
c0016bf4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016bfc:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016c01:	85 c0                	test   eax,eax
c0016c03:	75 03                	jne    c0016c08 <unblockTask(ThreadControlBlock*)+0x84>
c0016c05:	fb                   	sti    
c0016c06:	66 90                	xchg   ax,ax
c0016c08:	83 c4 08             	add    esp,0x8
c0016c0b:	5b                   	pop    ebx
c0016c0c:	c3                   	ret    
c0016c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c10:	83 ec 0c             	sub    esp,0xc
c0016c13:	68 3b 53 02 c0       	push   0xc002533b
c0016c18:	e8 5f 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016c1d:	83 c4 10             	add    esp,0x10
c0016c20:	eb d2                	jmp    c0016bf4 <unblockTask(ThreadControlBlock*)+0x70>
c0016c22:	66 90                	xchg   ax,ax
c0016c24:	83 ec 08             	sub    esp,0x8
c0016c27:	53                   	push   ebx
c0016c28:	68 4c d3 02 c0       	push   0xc002d34c
c0016c2d:	e8 3a b8 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	eb bd                	jmp    c0016bf4 <unblockTask(ThreadControlBlock*)+0x70>
c0016c37:	90                   	nop

c0016c38 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016c38:	55                   	push   ebp
c0016c39:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016c3e:	57                   	push   edi
c0016c3f:	56                   	push   esi
c0016c40:	53                   	push   ebx
c0016c41:	83 ec 1c             	sub    esp,0x1c
c0016c44:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c48:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0016c4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016c4e:	d3 c0                	rol    eax,cl
c0016c50:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0016c57:	21 c8                	and    eax,ecx
c0016c59:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0016c60:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c63:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0016c6b:	0f 85 b7 01 00 00    	jne    c0016e28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016c71:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0016c77:	85 ed                	test   ebp,ebp
c0016c79:	7e 29                	jle    c0016ca4 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0016c7b:	31 f6                	xor    esi,esi
c0016c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0016c8a:	83 c6 01             	add    esi,0x1
c0016c8d:	57                   	push   edi
c0016c8e:	e8 c8 8b ff ff       	call   c000f85b <free>
c0016c93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0016c9f:	7f df                	jg     c0016c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0016ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca4:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016cae:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016cb1:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0016cb7:	89 f7                	mov    edi,esi
c0016cb9:	85 ed                	test   ebp,ebp
c0016cbb:	74 1b                	je     c0016cd8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016cbd:	83 ec 0c             	sub    esp,0xc
c0016cc0:	55                   	push   ebp
c0016cc1:	e8 e6 77 ff ff       	call   c000e4ac <EnvVarContainer::~EnvVarContainer()>
c0016cc6:	59                   	pop    ecx
c0016cc7:	5e                   	pop    esi
c0016cc8:	6a 0c                	push   0xc
c0016cca:	55                   	push   ebp
c0016ccb:	e8 94 66 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0016cd0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	89 f7                	mov    edi,esi
c0016cd8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016cde:	85 c0                	test   eax,eax
c0016ce0:	0f 84 b6 00 00 00    	je     c0016d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0016ce6:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0016ce9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ced:	31 c9                	xor    ecx,ecx
c0016cef:	eb 17                	jmp    c0016d08 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cf4:	83 c1 01             	add    ecx,0x1
c0016cf7:	83 f9 10             	cmp    ecx,0x10
c0016cfa:	0f 84 9c 00 00 00    	je     c0016d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0016d00:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016d06:	66 90                	xchg   ax,ax
c0016d08:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0016d0f:	d3 fa                	sar    edx,cl
c0016d11:	80 e2 01             	and    dl,0x1
c0016d14:	74 de                	je     c0016cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d16:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0016d19:	01 d2                	add    edx,edx
c0016d1b:	01 ca                	add    edx,ecx
c0016d1d:	01 d2                	add    edx,edx
c0016d1f:	01 ca                	add    edx,ecx
c0016d21:	8d 14 92             	lea    edx,[edx+edx*4]
c0016d24:	01 d0                	add    eax,edx
c0016d26:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016d2c:	83 fd 07             	cmp    ebp,0x7
c0016d2f:	75 c3                	jne    c0016cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d31:	05 40 02 00 00       	add    eax,0x240
c0016d36:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0016d39:	83 fd ff             	cmp    ebp,0xffffffff
c0016d3c:	0f 8c ee 00 00 00    	jl     c0016e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0016d42:	0f 84 ac 01 00 00    	je     c0016ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0016d48:	85 ed                	test   ebp,ebp
c0016d4a:	0f 84 90 01 00 00    	je     c0016ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0016d50:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016d52:	75 a0                	jne    c0016cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d54:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016d5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016d5e:	01 d0                	add    eax,edx
c0016d60:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0016d6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d70:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d76:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016d7d:	50                   	push   eax
c0016d7e:	e8 01 fe ff ff       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016d89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d8d:	89 f7                	mov    edi,esi
c0016d8f:	83 c1 01             	add    ecx,0x1
c0016d92:	83 f9 10             	cmp    ecx,0x10
c0016d95:	0f 85 65 ff ff ff    	jne    c0016d00 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016d9b:	90                   	nop
c0016d9c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0016da2:	85 c0                	test   eax,eax
c0016da4:	74 62                	je     c0016e08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0016da6:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0016dac:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0016db2:	74 54                	je     c0016e08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0016db4:	83 ec 0c             	sub    esp,0xc
c0016db7:	68 4c d3 02 c0       	push   0xc002d34c
c0016dbc:	e8 e7 b5 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dc1:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016dc8:	89 c7                	mov    edi,eax
c0016dca:	e8 bd b5 00 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	84 c0                	test   al,al
c0016dd4:	0f 84 ce 00 00 00    	je     c0016ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0016dda:	66 90                	xchg   ax,ax
c0016ddc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ddf:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016de5:	85 d2                	test   edx,edx
c0016de7:	74 0f                	je     c0016df8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016de9:	83 ec 0c             	sub    esp,0xc
c0016dec:	8b 02                	mov    eax,DWORD PTR [edx]
c0016dee:	52                   	push   edx
c0016def:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016df2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016df5:	83 c4 10             	add    esp,0x10
c0016df8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0016e02:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0016e05:	8d 76 00             	lea    esi,[esi+0x0]
c0016e08:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0016e0e:	85 db                	test   ebx,ebx
c0016e10:	74 16                	je     c0016e28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	53                   	push   ebx
c0016e16:	e8 97 c9 ff ff       	call   c00137b2 <VAS::~VAS()>
c0016e1b:	58                   	pop    eax
c0016e1c:	5a                   	pop    edx
c0016e1d:	6a 14                	push   0x14
c0016e1f:	53                   	push   ebx
c0016e20:	e8 3f 65 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	83 c4 1c             	add    esp,0x1c
c0016e2b:	5b                   	pop    ebx
c0016e2c:	5e                   	pop    esi
c0016e2d:	5f                   	pop    edi
c0016e2e:	5d                   	pop    ebp
c0016e2f:	c3                   	ret    
c0016e30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016e34:	83 ec 0c             	sub    esp,0xc
c0016e37:	68 f0 53 02 c0       	push   0xc00253f0
c0016e3c:	e8 5f 8e ff ff       	call   c000fca0 <KePanic(char const*)>
c0016e41:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	89 f7                	mov    edi,esi
c0016e49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e4d:	e9 a2 fe ff ff       	jmp    c0016cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016e52:	66 90                	xchg   ax,ax
c0016e54:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016e5a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0016e60:	75 1e                	jne    c0016e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016e62:	83 ec 0c             	sub    esp,0xc
c0016e65:	68 58 54 02 c0       	push   0xc0025458
c0016e6a:	e8 0d 01 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016e6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016e76:	e8 6d fa ff ff       	call   c00168e8 <blockTask(TaskState)>
c0016e7b:	83 c4 10             	add    esp,0x10
c0016e7e:	66 90                	xchg   ax,ax
c0016e80:	83 ec 08             	sub    esp,0x8
c0016e83:	56                   	push   esi
c0016e84:	68 4c d3 02 c0       	push   0xc002d34c
c0016e89:	e8 de b5 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8e:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016e95:	e8 0e b5 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	39 f8                	cmp    eax,edi
c0016e9f:	0f 84 37 ff ff ff    	je     c0016ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	83 ec 0c             	sub    esp,0xc
c0016eab:	68 4c d3 02 c0       	push   0xc002d34c
c0016eb0:	e8 f3 b4 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eb5:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016ebc:	89 c6                	mov    esi,eax
c0016ebe:	e8 ed b4 00 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	39 f3                	cmp    ebx,esi
c0016ec8:	74 b6                	je     c0016e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016eca:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0016ecd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ed0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0016ed6:	75 a8                	jne    c0016e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016ed8:	e9 77 ff ff ff       	jmp    c0016e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0016edd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016ee4:	83 ec 0c             	sub    esp,0xc
c0016ee7:	68 24 54 02 c0       	push   0xc0025424
c0016eec:	e9 4b ff ff ff       	jmp    c0016e3c <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0016ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef4:	8b 36                	mov    esi,DWORD PTR [esi]
c0016ef6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016efa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0016efd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f00:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0016f06:	01 d7                	add    edi,edx
c0016f08:	89 f8                	mov    eax,edi
c0016f0a:	e9 51 fe ff ff       	jmp    c0016d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0016f0f:	90                   	nop

c0016f10 <cleanerTaskFunction(void*)>:
c0016f10:	53                   	push   ebx
c0016f11:	83 ec 08             	sub    esp,0x8
c0016f14:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016f1c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016f21:	85 c0                	test   eax,eax
c0016f23:	75 03                	jne    c0016f28 <cleanerTaskFunction(void*)+0x18>
c0016f25:	fb                   	sti    
c0016f26:	66 90                	xchg   ax,ax
c0016f28:	fa                   	cli    
c0016f29:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016f2e:	83 c0 01             	add    eax,0x1
c0016f31:	80 3d 14 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d314,0x0
c0016f38:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016f3d:	0f 85 c9 00 00 00    	jne    c001700c <cleanerTaskFunction(void*)+0xfc>
c0016f43:	83 ec 0c             	sub    esp,0xc
c0016f46:	6a 02                	push   0x2
c0016f48:	e8 6f f9 ff ff       	call   c00168bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016f4d:	83 c4 10             	add    esp,0x10
c0016f50:	c6 05 14 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d314,0x0
c0016f57:	fa                   	cli    
c0016f58:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0016f5e:	8b 1d 2c d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d32c
c0016f64:	83 c1 01             	add    ecx,0x1
c0016f67:	83 c3 01             	add    ebx,0x1
c0016f6a:	89 0d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ecx
c0016f70:	89 1d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ebx
c0016f76:	fa                   	cli    
c0016f77:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016f7c:	83 c0 01             	add    eax,0x1
c0016f7f:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016f84:	eb 2a                	jmp    c0016fb0 <cleanerTaskFunction(void*)+0xa0>
c0016f86:	66 90                	xchg   ax,ax
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	68 34 d3 02 c0       	push   0xc002d334
c0016f90:	e8 13 b4 00 00       	call   c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f95:	c7 04 24 34 d3 02 c0 	mov    DWORD PTR [esp],0xc002d334
c0016f9c:	89 c3                	mov    ebx,eax
c0016f9e:	e8 0d b4 00 00       	call   c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fa6:	e8 8d fc ff ff       	call   c0016c38 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016fab:	83 c4 10             	add    esp,0x10
c0016fae:	66 90                	xchg   ax,ax
c0016fb0:	83 ec 0c             	sub    esp,0xc
c0016fb3:	68 34 d3 02 c0       	push   0xc002d334
c0016fb8:	e8 cf b3 00 00       	call   c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016fbd:	83 c4 10             	add    esp,0x10
c0016fc0:	84 c0                	test   al,al
c0016fc2:	74 c4                	je     c0016f88 <cleanerTaskFunction(void*)+0x78>
c0016fc4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016fcc:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016fd2:	85 d2                	test   edx,edx
c0016fd4:	75 02                	jne    c0016fd8 <cleanerTaskFunction(void*)+0xc8>
c0016fd6:	fb                   	sti    
c0016fd7:	90                   	nop
c0016fd8:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0016fdd:	83 e8 01             	sub    eax,0x1
c0016fe0:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0016fe5:	0f 85 29 ff ff ff    	jne    c0016f14 <cleanerTaskFunction(void*)+0x4>
c0016feb:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0016ff0:	85 c0                	test   eax,eax
c0016ff2:	0f 84 1c ff ff ff    	je     c0016f14 <cleanerTaskFunction(void*)+0x4>
c0016ff8:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0017002:	e8 21 f8 ff ff       	call   c0016828 <schedule()>
c0017007:	e9 08 ff ff ff       	jmp    c0016f14 <cleanerTaskFunction(void*)+0x4>
c001700c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017014:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017019:	85 c0                	test   eax,eax
c001701b:	0f 85 2f ff ff ff    	jne    c0016f50 <cleanerTaskFunction(void*)+0x40>
c0017021:	fb                   	sti    
c0017022:	e9 29 ff ff ff       	jmp    c0016f50 <cleanerTaskFunction(void*)+0x40>
c0017027:	90                   	nop

c0017028 <KeTerminateCurrentThread(int)>:
c0017028:	83 ec 14             	sub    esp,0x14
c001702b:	fa                   	cli    
c001702c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017031:	83 c0 01             	add    eax,0x1
c0017034:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017039:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c001703e:	83 c0 01             	add    eax,0x1
c0017041:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0017046:	fa                   	cli    
c0017047:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001704c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017050:	83 c0 01             	add    eax,0x1
c0017053:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001705d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017065:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017068:	50                   	push   eax
c0017069:	68 34 d3 02 c0       	push   0xc002d334
c001706e:	e8 f9 b3 00 00       	call   c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017082:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0017087:	85 c0                	test   eax,eax
c0017089:	0f 84 81 00 00 00    	je     c0017110 <KeTerminateCurrentThread(int)+0xe8>
c001708f:	83 ec 0c             	sub    esp,0xc
c0017092:	c6 05 14 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d314,0x1
c0017099:	50                   	push   eax
c001709a:	e8 e5 fa ff ff       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c001709f:	83 c4 10             	add    esp,0x10
c00170a2:	66 90                	xchg   ax,ax
c00170a4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00170ac:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00170b1:	85 c0                	test   eax,eax
c00170b3:	75 03                	jne    c00170b8 <KeTerminateCurrentThread(int)+0x90>
c00170b5:	fb                   	sti    
c00170b6:	66 90                	xchg   ax,ax
c00170b8:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00170bd:	83 e8 01             	sub    eax,0x1
c00170c0:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00170c5:	75 09                	jne    c00170d0 <KeTerminateCurrentThread(int)+0xa8>
c00170c7:	83 3d 28 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d328,0x0
c00170ce:	75 54                	jne    c0017124 <KeTerminateCurrentThread(int)+0xfc>
c00170d0:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00170d8:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c00170de:	85 c9                	test   ecx,ecx
c00170e0:	75 06                	jne    c00170e8 <KeTerminateCurrentThread(int)+0xc0>
c00170e2:	66 90                	xchg   ax,ax
c00170e4:	fb                   	sti    
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]
c00170e8:	fa                   	cli    
c00170e9:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00170ee:	83 c0 01             	add    eax,0x1
c00170f1:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00170f6:	e8 2d f7 ff ff       	call   c0016828 <schedule()>
c00170fb:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017103:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0017109:	85 d2                	test   edx,edx
c001710b:	75 db                	jne    c00170e8 <KeTerminateCurrentThread(int)+0xc0>
c001710d:	eb d5                	jmp    c00170e4 <KeTerminateCurrentThread(int)+0xbc>
c001710f:	90                   	nop
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	68 69 53 02 c0       	push   0xc0025369
c0017118:	e8 5f fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	eb 82                	jmp    c00170a4 <KeTerminateCurrentThread(int)+0x7c>
c0017122:	66 90                	xchg   ax,ax
c0017124:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c001712e:	e8 f5 f6 ff ff       	call   c0016828 <schedule()>
c0017133:	eb 9b                	jmp    c00170d0 <KeTerminateCurrentThread(int)+0xa8>
c0017135:	8d 76 00             	lea    esi,[esi+0x0]

c0017138 <__static_initialization_and_destruction_0(int, int)>:
c0017138:	83 ec 0c             	sub    esp,0xc
c001713b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017140:	0f 85 8e 00 00 00    	jne    c00171d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017146:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001714e:	0f 85 80 00 00 00    	jne    c00171d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	68 4c d3 02 c0       	push   0xc002d34c
c001715c:	e8 ab b7 00 00       	call   c002290c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017161:	83 c4 10             	add    esp,0x10
c0017164:	83 ec 04             	sub    esp,0x4
c0017167:	68 a8 67 02 c0       	push   0xc00267a8
c001716c:	68 4c d3 02 c0       	push   0xc002d34c
c0017171:	68 bc 28 02 c0       	push   0xc00228bc
c0017176:	e8 99 61 ff ff       	call   c000d314 <__cxa_atexit>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	83 ec 0c             	sub    esp,0xc
c0017181:	68 40 d3 02 c0       	push   0xc002d340
c0017186:	e8 81 b7 00 00       	call   c002290c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	83 ec 04             	sub    esp,0x4
c0017191:	68 a8 67 02 c0       	push   0xc00267a8
c0017196:	68 40 d3 02 c0       	push   0xc002d340
c001719b:	68 bc 28 02 c0       	push   0xc00228bc
c00171a0:	e8 6f 61 ff ff       	call   c000d314 <__cxa_atexit>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	68 34 d3 02 c0       	push   0xc002d334
c00171b0:	e8 57 b7 00 00       	call   c002290c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 ec 04             	sub    esp,0x4
c00171bb:	68 a8 67 02 c0       	push   0xc00267a8
c00171c0:	68 34 d3 02 c0       	push   0xc002d334
c00171c5:	68 bc 28 02 c0       	push   0xc00228bc
c00171ca:	e8 45 61 ff ff       	call   c000d314 <__cxa_atexit>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	66 90                	xchg   ax,ax
c00171d4:	90                   	nop
c00171d5:	83 c4 0c             	add    esp,0xc
c00171d8:	c3                   	ret    
c00171d9:	8d 76 00             	lea    esi,[esi+0x0]

c00171dc <_GLOBAL__sub_I_keNextPID>:
c00171dc:	83 ec 0c             	sub    esp,0xc
c00171df:	83 ec 08             	sub    esp,0x8
c00171e2:	68 ff ff 00 00       	push   0xffff
c00171e7:	6a 01                	push   0x1
c00171e9:	e8 4a ff ff ff       	call   c0017138 <__static_initialization_and_destruction_0(int, int)>
c00171ee:	83 c4 10             	add    esp,0x10
c00171f1:	83 c4 0c             	add    esp,0xc
c00171f4:	c3                   	ret    

c00171f5 <Vm::inbv(unsigned short)>:
c00171f5:	55                   	push   ebp
c00171f6:	89 e5                	mov    ebp,esp
c00171f8:	83 ec 14             	sub    esp,0x14
c00171fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00171fe:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017202:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017206:	3d fe fe 00 00       	cmp    eax,0xfefe
c001720b:	75 07                	jne    c0017214 <Vm::inbv(unsigned short)+0x1f>
c001720d:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017212:	eb 16                	jmp    c001722a <Vm::inbv(unsigned short)+0x35>
c0017214:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017218:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001721c:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017220:	89 c2                	mov    edx,eax
c0017222:	ec                   	in     al,dx
c0017223:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017226:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017229:	90                   	nop
c001722a:	c9                   	leave  
c001722b:	c3                   	ret    

c001722c <Vm::outbv(unsigned short, unsigned char)>:
c001722c:	55                   	push   ebp
c001722d:	89 e5                	mov    ebp,esp
c001722f:	83 ec 18             	sub    esp,0x18
c0017232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017235:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017238:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001723c:	88 d0                	mov    al,dl
c001723e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017241:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017245:	3d fe fe 00 00       	cmp    eax,0xfefe
c001724a:	75 2d                	jne    c0017279 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c001724c:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017251:	8d 50 01             	lea    edx,[eax+0x1]
c0017254:	89 15 90 d3 02 c0    	mov    DWORD PTR ds:0xc002d390,edx
c001725a:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c001725d:	88 90 a0 d3 02 c0    	mov    BYTE PTR [eax-0x3ffd2c60],dl
c0017263:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017268:	83 f8 20             	cmp    eax,0x20
c001726b:	75 23                	jne    c0017290 <Vm::outbv(unsigned short, unsigned char)+0x64>
c001726d:	c7 05 90 d3 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x1f
c0017277:	eb 17                	jmp    c0017290 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017279:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c001727d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017281:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017285:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017288:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001728b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001728f:	ee                   	out    dx,al
c0017290:	90                   	nop
c0017291:	c9                   	leave  
c0017292:	c3                   	ret    

c0017293 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017293:	55                   	push   ebp
c0017294:	89 e5                	mov    ebp,esp
c0017296:	83 ec 08             	sub    esp,0x8
c0017299:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001729c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001729f:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00172a3:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00172a7:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00172ab:	c1 e0 04             	shl    eax,0x4
c00172ae:	89 c2                	mov    edx,eax
c00172b0:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00172b4:	01 d0                	add    eax,edx
c00172b6:	c9                   	leave  
c00172b7:	c3                   	ret    

c00172b8 <Vm::getSegment(unsigned int)>:
c00172b8:	55                   	push   ebp
c00172b9:	89 e5                	mov    ebp,esp
c00172bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172be:	c1 e8 10             	shr    eax,0x10
c00172c1:	5d                   	pop    ebp
c00172c2:	c3                   	ret    

c00172c3 <Vm::getOffset(unsigned int)>:
c00172c3:	55                   	push   ebp
c00172c4:	89 e5                	mov    ebp,esp
c00172c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172c9:	5d                   	pop    ebp
c00172ca:	c3                   	ret    

c00172cb <Vm::mainloop2()>:
c00172cb:	55                   	push   ebp
c00172cc:	89 e5                	mov    ebp,esp
c00172ce:	53                   	push   ebx
c00172cf:	83 ec 04             	sub    esp,0x4
c00172d2:	fa                   	cli    
c00172d3:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00172d8:	83 c0 01             	add    eax,0x1
c00172db:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00172e0:	c6 05 89 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d389,0x1
c00172e7:	83 ec 0c             	sub    esp,0xc
c00172ea:	6a 02                	push   0x2
c00172ec:	e8 cb f5 ff ff       	call   c00168bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00172f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172fb:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c00172ff:	0f b7 d8             	movzx  ebx,ax
c0017302:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017307:	8b 00                	mov    eax,DWORD PTR [eax]
c0017309:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c001730d:	0f b7 c8             	movzx  ecx,ax
c0017310:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017315:	8b 00                	mov    eax,DWORD PTR [eax]
c0017317:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c001731b:	0f b7 d0             	movzx  edx,ax
c001731e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017323:	8b 00                	mov    eax,DWORD PTR [eax]
c0017325:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017329:	0f b7 c0             	movzx  eax,ax
c001732c:	53                   	push   ebx
c001732d:	51                   	push   ecx
c001732e:	52                   	push   edx
c001732f:	50                   	push   eax
c0017330:	e8 da 8e fe ff       	call   c000020f <goToVM86>
c0017335:	83 c4 10             	add    esp,0x10
c0017338:	90                   	nop
c0017339:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001733c:	c9                   	leave  
c001733d:	c3                   	ret    

c001733e <Vm::mainVm8086Loop(void*)>:
c001733e:	55                   	push   ebp
c001733f:	89 e5                	mov    ebp,esp
c0017341:	83 ec 08             	sub    esp,0x8
c0017344:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001734c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017351:	85 c0                	test   eax,eax
c0017353:	75 01                	jne    c0017356 <Vm::mainVm8086Loop(void*)+0x18>
c0017355:	fb                   	sti    
c0017356:	e8 70 ff ff ff       	call   c00172cb <Vm::mainloop2()>
c001735b:	90                   	nop
c001735c:	c9                   	leave  
c001735d:	c3                   	ret    

c001735e <Vm::mainloop3(unsigned long)>:
c001735e:	55                   	push   ebp
c001735f:	89 e5                	mov    ebp,esp
c0017361:	83 ec 08             	sub    esp,0x8
c0017364:	fa                   	cli    
c0017365:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001736a:	83 c0 01             	add    eax,0x1
c001736d:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017372:	c6 05 88 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d388,0x1
c0017379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001737c:	a3 84 d3 02 c0       	mov    ds:0xc002d384,eax
c0017381:	83 ec 0c             	sub    esp,0xc
c0017384:	6a 02                	push   0x2
c0017386:	e8 31 f5 ff ff       	call   c00168bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001738b:	83 c4 10             	add    esp,0x10
c001738e:	e8 38 ff ff ff       	call   c00172cb <Vm::mainloop2()>
c0017393:	90                   	nop
c0017394:	c9                   	leave  
c0017395:	c3                   	ret    

c0017396 <Vm::initialise8086()>:
c0017396:	55                   	push   ebp
c0017397:	89 e5                	mov    ebp,esp
c0017399:	83 ec 08             	sub    esp,0x8
c001739c:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00173a1:	68 80 00 00 00       	push   0x80
c00173a6:	6a 00                	push   0x0
c00173a8:	68 3e 73 01 c0       	push   0xc001733e
c00173ad:	50                   	push   eax
c00173ae:	e8 a9 f1 ff ff       	call   c001655c <Process::createThread(void (*)(void*), void*, int)>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	a3 8c d3 02 c0       	mov    ds:0xc002d38c,eax
c00173bb:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00173c0:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00173c6:	83 ec 0c             	sub    esp,0xc
c00173c9:	6a 07                	push   0x7
c00173cb:	68 10 01 00 00       	push   0x110
c00173d0:	6a 00                	push   0x0
c00173d2:	6a 00                	push   0x0
c00173d4:	50                   	push   eax
c00173d5:	e8 2a c7 ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173da:	83 c4 20             	add    esp,0x20
c00173dd:	90                   	nop
c00173de:	c9                   	leave  
c00173df:	c3                   	ret    

c00173e0 <Vm::resetConventionalMemory8086()>:
c00173e0:	55                   	push   ebp
c00173e1:	89 e5                	mov    ebp,esp
c00173e3:	83 ec 10             	sub    esp,0x10
c00173e6:	c9                   	leave  
c00173e7:	c3                   	ret    

c00173e8 <Vm::finish8086()>:
c00173e8:	55                   	push   ebp
c00173e9:	89 e5                	mov    ebp,esp
c00173eb:	83 ec 18             	sub    esp,0x18
c00173ee:	fa                   	cli    
c00173ef:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00173f4:	83 c0 01             	add    eax,0x1
c00173f7:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00173fc:	a0 88 d3 02 c0       	mov    al,ds:0xc002d388
c0017401:	0f b6 c0             	movzx  eax,al
c0017404:	85 c0                	test   eax,eax
c0017406:	75 19                	jne    c0017421 <Vm::finish8086()+0x39>
c0017408:	e8 1b f4 ff ff       	call   c0016828 <schedule()>
c001740d:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017415:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001741a:	85 c0                	test   eax,eax
c001741c:	75 d0                	jne    c00173ee <Vm::finish8086()+0x6>
c001741e:	fb                   	sti    
c001741f:	eb cd                	jmp    c00173ee <Vm::finish8086()+0x6>
c0017421:	90                   	nop
c0017422:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c0017427:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001742a:	c6 05 88 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d388,0x0
c0017431:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c0017436:	83 ec 0c             	sub    esp,0xc
c0017439:	50                   	push   eax
c001743a:	e8 45 f7 ff ff       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c001743f:	83 c4 10             	add    esp,0x10
c0017442:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001744a:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001744f:	85 c0                	test   eax,eax
c0017451:	75 01                	jne    c0017454 <Vm::finish8086()+0x6c>
c0017453:	fb                   	sti    
c0017454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017457:	c9                   	leave  
c0017458:	c3                   	ret    

c0017459 <Vm::getOutput8086(unsigned char*)>:
c0017459:	55                   	push   ebp
c001745a:	89 e5                	mov    ebp,esp
c001745c:	57                   	push   edi
c001745d:	56                   	push   esi
c001745e:	53                   	push   ebx
c001745f:	83 ec 20             	sub    esp,0x20
c0017462:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017467:	89 c2                	mov    edx,eax
c0017469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001746c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001746f:	c7 45 e8 a0 d3 02 c0 	mov    DWORD PTR [ebp-0x18],0xc002d3a0
c0017476:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017479:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001747c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001747f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017482:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017485:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017488:	89 c6                	mov    esi,eax
c001748a:	89 d7                	mov    edi,edx
c001748c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001748e:	89 c8                	mov    eax,ecx
c0017490:	89 fa                	mov    edx,edi
c0017492:	89 f3                	mov    ebx,esi
c0017494:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017497:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c001749a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001749d:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c00174a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00174a5:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c00174af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00174b2:	83 c4 20             	add    esp,0x20
c00174b5:	5b                   	pop    ebx
c00174b6:	5e                   	pop    esi
c00174b7:	5f                   	pop    edi
c00174b8:	5d                   	pop    ebp
c00174b9:	c3                   	ret    

c00174ba <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00174ba:	55                   	push   ebp
c00174bb:	89 e5                	mov    ebp,esp
c00174bd:	57                   	push   edi
c00174be:	56                   	push   esi
c00174bf:	53                   	push   ebx
c00174c0:	83 ec 4c             	sub    esp,0x4c
c00174c3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00174c6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00174c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00174cc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00174cf:	66 89 5d b4          	mov    WORD PTR [ebp-0x4c],bx
c00174d3:	66 89 4d b0          	mov    WORD PTR [ebp-0x50],cx
c00174d7:	66 89 55 ac          	mov    WORD PTR [ebp-0x54],dx
c00174db:	66 89 45 a8          	mov    WORD PTR [ebp-0x58],ax
c00174df:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00174e4:	83 f0 01             	xor    eax,0x1
c00174e7:	0f b6 c0             	movzx  eax,al
c00174ea:	85 c0                	test   eax,eax
c00174ec:	0f 84 93 00 00 00    	je     c0017585 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c00174f2:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
c00174f9:	83 ec 0c             	sub    esp,0xc
c00174fc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00174ff:	e8 47 83 ff ff       	call   c000f84b <malloc>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	89 c3                	mov    ebx,eax
c0017509:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001750e:	83 ec 04             	sub    esp,0x4
c0017511:	50                   	push   eax
c0017512:	68 80 54 02 c0       	push   0xc0025480
c0017517:	53                   	push   ebx
c0017518:	e8 6d 0c ff ff       	call   c000818a <File::File(char const*, Process*)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0017523:	83 ec 08             	sub    esp,0x8
c0017526:	6a 12                	push   0x12
c0017528:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001752b:	e8 78 0c ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017530:	83 c4 10             	add    esp,0x10
c0017533:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017536:	8b 00                	mov    eax,DWORD PTR [eax]
c0017538:	83 c0 10             	add    eax,0x10
c001753b:	8b 00                	mov    eax,DWORD PTR [eax]
c001753d:	83 ec 0c             	sub    esp,0xc
c0017540:	8d 55 c0             	lea    edx,[ebp-0x40]
c0017543:	52                   	push   edx
c0017544:	6a 00                	push   0x0
c0017546:	6a 00                	push   0x0
c0017548:	68 00 00 11 00       	push   0x110000
c001754d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017550:	ff d0                	call   eax
c0017552:	83 c4 20             	add    esp,0x20
c0017555:	83 ec 0c             	sub    esp,0xc
c0017558:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001755b:	e8 a6 0c ff ff       	call   c0008206 <File::close()>
c0017560:	83 c4 10             	add    esp,0x10
c0017563:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0017567:	74 15                	je     c001757e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc4>
c0017569:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001756c:	8b 00                	mov    eax,DWORD PTR [eax]
c001756e:	83 c0 08             	add    eax,0x8
c0017571:	8b 00                	mov    eax,DWORD PTR [eax]
c0017573:	83 ec 0c             	sub    esp,0xc
c0017576:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017579:	ff d0                	call   eax
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c0017585:	e8 56 fe ff ff       	call   c00173e0 <Vm::resetConventionalMemory8086()>
c001758a:	fa                   	cli    
c001758b:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017590:	83 c0 01             	add    eax,0x1
c0017593:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017598:	a0 89 d3 02 c0       	mov    al,ds:0xc002d389
c001759d:	0f b6 c0             	movzx  eax,al
c00175a0:	85 c0                	test   eax,eax
c00175a2:	75 19                	jne    c00175bd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x103>
c00175a4:	e8 7f f2 ff ff       	call   c0016828 <schedule()>
c00175a9:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00175b1:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00175b6:	85 c0                	test   eax,eax
c00175b8:	75 d0                	jne    c001758a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xd0>
c00175ba:	fb                   	sti    
c00175bb:	eb cd                	jmp    c001758a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xd0>
c00175bd:	90                   	nop
c00175be:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00175c4:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00175c7:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c00175cb:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00175d1:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00175d4:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c00175d8:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00175de:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00175e1:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c00175e5:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00175eb:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c00175ee:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c00175f2:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175f7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00175fb:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c0017605:	83 ec 04             	sub    esp,0x4
c0017608:	6a 20                	push   0x20
c001760a:	6a 00                	push   0x0
c001760c:	68 a0 d3 02 c0       	push   0xc002d3a0
c0017611:	e8 da 8e fe ff       	call   c00004f0 <memset>
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c001761c:	0f b7 55 b4          	movzx  edx,WORD PTR [ebp-0x4c]
c0017620:	0f b7 45 b0          	movzx  eax,WORD PTR [ebp-0x50]
c0017624:	83 ec 08             	sub    esp,0x8
c0017627:	52                   	push   edx
c0017628:	50                   	push   eax
c0017629:	e8 65 fc ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0017634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017637:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001763a:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001763d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017640:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017643:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0017646:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0017649:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
c001764c:	89 c6                	mov    esi,eax
c001764e:	89 d7                	mov    edi,edx
c0017650:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017652:	89 c8                	mov    eax,ecx
c0017654:	89 fa                	mov    edx,edi
c0017656:	89 f3                	mov    ebx,esi
c0017658:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
c001765b:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
c001765e:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017661:	c6 05 89 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d389,0x0
c0017668:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017670:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017675:	85 c0                	test   eax,eax
c0017677:	75 01                	jne    c001767a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c0>
c0017679:	fb                   	sti    
c001767a:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c001767f:	83 ec 0c             	sub    esp,0xc
c0017682:	50                   	push   eax
c0017683:	e8 fc f4 ff ff       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	b0 01                	mov    al,0x1
c001768d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017690:	5b                   	pop    ebx
c0017691:	5e                   	pop    esi
c0017692:	5f                   	pop    edi
c0017693:	5d                   	pop    ebp
c0017694:	c3                   	ret    

c0017695 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017695:	55                   	push   ebp
c0017696:	89 e5                	mov    ebp,esp
c0017698:	56                   	push   esi
c0017699:	53                   	push   ebx
c001769a:	83 ec 40             	sub    esp,0x40
c001769d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00176a0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00176a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00176a6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00176a9:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00176ad:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00176b1:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00176b5:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00176b9:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00176be:	83 f0 01             	xor    eax,0x1
c00176c1:	0f b6 c0             	movzx  eax,al
c00176c4:	85 c0                	test   eax,eax
c00176c6:	0f 84 97 00 00 00    	je     c0017763 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xce>
c00176cc:	c7 45 e4 14 01 00 00 	mov    DWORD PTR [ebp-0x1c],0x114
c00176d3:	83 ec 0c             	sub    esp,0xc
c00176d6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00176d9:	e8 6d 81 ff ff       	call   c000f84b <malloc>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	89 c3                	mov    ebx,eax
c00176e3:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00176e8:	83 ec 04             	sub    esp,0x4
c00176eb:	50                   	push   eax
c00176ec:	68 80 54 02 c0       	push   0xc0025480
c00176f1:	53                   	push   ebx
c00176f2:	e8 93 0a ff ff       	call   c000818a <File::File(char const*, Process*)>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00176fd:	83 ec 08             	sub    esp,0x8
c0017700:	6a 12                	push   0x12
c0017702:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017705:	e8 9e 0a ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0017711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017714:	8b 00                	mov    eax,DWORD PTR [eax]
c0017716:	83 c0 10             	add    eax,0x10
c0017719:	8b 00                	mov    eax,DWORD PTR [eax]
c001771b:	83 ec 0c             	sub    esp,0xc
c001771e:	8d 55 cc             	lea    edx,[ebp-0x34]
c0017721:	52                   	push   edx
c0017722:	6a 00                	push   0x0
c0017724:	6a 00                	push   0x0
c0017726:	68 00 00 11 00       	push   0x110000
c001772b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001772e:	ff d0                	call   eax
c0017730:	83 c4 20             	add    esp,0x20
c0017733:	83 ec 0c             	sub    esp,0xc
c0017736:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017739:	e8 c8 0a ff ff       	call   c0008206 <File::close()>
c001773e:	83 c4 10             	add    esp,0x10
c0017741:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017745:	74 15                	je     c001775c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc7>
c0017747:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001774a:	8b 00                	mov    eax,DWORD PTR [eax]
c001774c:	83 c0 08             	add    eax,0x8
c001774f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017751:	83 ec 0c             	sub    esp,0xc
c0017754:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017757:	ff d0                	call   eax
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c0017763:	e8 78 fc ff ff       	call   c00173e0 <Vm::resetConventionalMemory8086()>
c0017768:	83 ec 08             	sub    esp,0x8
c001776b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001776e:	68 9c 54 02 c0       	push   0xc002549c
c0017773:	e8 04 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	fa                   	cli    
c001777c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017781:	83 c0 01             	add    eax,0x1
c0017784:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017789:	a0 89 d3 02 c0       	mov    al,ds:0xc002d389
c001778e:	0f b6 c0             	movzx  eax,al
c0017791:	85 c0                	test   eax,eax
c0017793:	75 19                	jne    c00177ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x119>
c0017795:	e8 8e f0 ff ff       	call   c0016828 <schedule()>
c001779a:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00177a2:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00177a7:	85 c0                	test   eax,eax
c00177a9:	75 d0                	jne    c001777b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c00177ab:	fb                   	sti    
c00177ac:	eb cd                	jmp    c001777b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c00177ae:	90                   	nop
c00177af:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00177b5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00177b8:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c00177bc:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00177c2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00177c5:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c00177c9:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00177cf:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00177d2:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c00177d6:	8b 15 8c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d38c
c00177dc:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c00177df:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c00177e3:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00177e8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00177ec:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c00177f6:	83 ec 04             	sub    esp,0x4
c00177f9:	6a 20                	push   0x20
c00177fb:	6a 00                	push   0x0
c00177fd:	68 a0 d3 02 c0       	push   0xc002d3a0
c0017802:	e8 e9 8c fe ff       	call   c00004f0 <memset>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
c0017811:	83 ec 0c             	sub    esp,0xc
c0017814:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0017817:	e8 2f 80 ff ff       	call   c000f84b <malloc>
c001781c:	83 c4 10             	add    esp,0x10
c001781f:	89 c3                	mov    ebx,eax
c0017821:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c0017826:	83 ec 04             	sub    esp,0x4
c0017829:	50                   	push   eax
c001782a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001782d:	53                   	push   ebx
c001782e:	e8 57 09 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0017839:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001783d:	75 29                	jne    c0017868 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1d3>
c001783f:	83 ec 0c             	sub    esp,0xc
c0017842:	68 be 54 02 c0       	push   0xc00254be
c0017847:	e8 54 84 ff ff       	call   c000fca0 <KePanic(char const*)>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017857:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001785c:	85 c0                	test   eax,eax
c001785e:	75 01                	jne    c0017861 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1cc>
c0017860:	fb                   	sti    
c0017861:	b0 00                	mov    al,0x0
c0017863:	e9 fb 00 00 00       	jmp    c0017963 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ce>
c0017868:	83 ec 04             	sub    esp,0x4
c001786b:	8d 45 d7             	lea    eax,[ebp-0x29]
c001786e:	50                   	push   eax
c001786f:	8d 45 d8             	lea    eax,[ebp-0x28]
c0017872:	50                   	push   eax
c0017873:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017876:	e8 2f 0c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0017881:	0f b6 c0             	movzx  eax,al
c0017884:	85 c0                	test   eax,eax
c0017886:	74 29                	je     c00178b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21c>
c0017888:	83 ec 0c             	sub    esp,0xc
c001788b:	68 d2 54 02 c0       	push   0xc00254d2
c0017890:	e8 0b 84 ff ff       	call   c000fca0 <KePanic(char const*)>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00178a0:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00178a5:	85 c0                	test   eax,eax
c00178a7:	75 01                	jne    c00178aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x215>
c00178a9:	fb                   	sti    
c00178aa:	b0 00                	mov    al,0x0
c00178ac:	e9 b2 00 00 00       	jmp    c0017963 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ce>
c00178b1:	83 ec 08             	sub    esp,0x8
c00178b4:	6a 01                	push   0x1
c00178b6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00178b9:	e8 ea 08 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00178c4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00178c8:	74 26                	je     c00178f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x25b>
c00178ca:	83 ec 0c             	sub    esp,0xc
c00178cd:	68 eb 54 02 c0       	push   0xc00254eb
c00178d2:	e8 c9 83 ff ff       	call   c000fca0 <KePanic(char const*)>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00178e2:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00178e7:	85 c0                	test   eax,eax
c00178e9:	75 01                	jne    c00178ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x257>
c00178eb:	fb                   	sti    
c00178ec:	b0 00                	mov    al,0x0
c00178ee:	eb 73                	jmp    c0017963 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ce>
c00178f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00178f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00178f5:	83 c0 0c             	add    eax,0xc
c00178f8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00178fa:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c00178fe:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017902:	83 ec 08             	sub    esp,0x8
c0017905:	52                   	push   edx
c0017906:	50                   	push   eax
c0017907:	e8 87 f9 ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c001790c:	83 c4 10             	add    esp,0x10
c001790f:	89 c6                	mov    esi,eax
c0017911:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0017914:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0017917:	83 ec 0c             	sub    esp,0xc
c001791a:	8d 4d d0             	lea    ecx,[ebp-0x30]
c001791d:	51                   	push   ecx
c001791e:	56                   	push   esi
c001791f:	52                   	push   edx
c0017920:	50                   	push   eax
c0017921:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017924:	ff d3                	call   ebx
c0017926:	83 c4 20             	add    esp,0x20
c0017929:	83 ec 0c             	sub    esp,0xc
c001792c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001792f:	e8 d2 08 ff ff       	call   c0008206 <File::close()>
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	c6 05 89 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d389,0x0
c001793e:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017946:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001794b:	85 c0                	test   eax,eax
c001794d:	75 01                	jne    c0017950 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2bb>
c001794f:	fb                   	sti    
c0017950:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	50                   	push   eax
c0017959:	e8 26 f2 ff ff       	call   c0016b84 <unblockTask(ThreadControlBlock*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	b0 01                	mov    al,0x1
c0017963:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017966:	5b                   	pop    ebx
c0017967:	5e                   	pop    esi
c0017968:	5d                   	pop    ebp
c0017969:	c3                   	ret    

c001796a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001796a:	55                   	push   ebp
c001796b:	89 e5                	mov    ebp,esp
c001796d:	83 ec 68             	sub    esp,0x68
c0017970:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017973:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017976:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c001797a:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001797e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0017985:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017988:	83 e8 06             	sub    eax,0x6
c001798b:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001798f:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0017993:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017997:	52                   	push   edx
c0017998:	50                   	push   eax
c0017999:	e8 f5 f8 ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c001799e:	83 c4 08             	add    esp,0x8
c00179a1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00179a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179a7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179aa:	83 e8 06             	sub    eax,0x6
c00179ad:	0f b7 d0             	movzx  edx,ax
c00179b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00179b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179bc:	83 c0 02             	add    eax,0x2
c00179bf:	0f b7 c0             	movzx  eax,ax
c00179c2:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00179c5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00179c8:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c00179cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00179cf:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00179d2:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c00179d6:	88 c2                	mov    dl,al
c00179d8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00179db:	88 10                	mov    BYTE PTR [eax],dl
c00179dd:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c00179e1:	c1 e8 08             	shr    eax,0x8
c00179e4:	89 c2                	mov    edx,eax
c00179e6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00179e9:	83 c0 01             	add    eax,0x1
c00179ec:	88 10                	mov    BYTE PTR [eax],dl
c00179ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179f4:	0f b7 c0             	movzx  eax,ax
c00179f7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00179fa:	83 c2 02             	add    edx,0x2
c00179fd:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0017a00:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c0017a04:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017a07:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017a0a:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0017a0e:	88 c2                	mov    dl,al
c0017a10:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017a13:	88 10                	mov    BYTE PTR [eax],dl
c0017a15:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0017a19:	c1 e8 08             	shr    eax,0x8
c0017a1c:	89 c2                	mov    edx,eax
c0017a1e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017a21:	83 c0 01             	add    eax,0x1
c0017a24:	88 10                	mov    BYTE PTR [eax],dl
c0017a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a2c:	0f b7 c0             	movzx  eax,ax
c0017a2f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017a32:	83 c2 04             	add    edx,0x4
c0017a35:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017a38:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017a3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017a3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017a42:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017a46:	88 c2                	mov    dl,al
c0017a48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017a4b:	88 10                	mov    BYTE PTR [eax],dl
c0017a4d:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017a51:	c1 e8 08             	shr    eax,0x8
c0017a54:	89 c2                	mov    edx,eax
c0017a56:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017a59:	83 c0 01             	add    eax,0x1
c0017a5c:	88 10                	mov    BYTE PTR [eax],dl
c0017a5e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a65:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017a68:	0f b6 c0             	movzx  eax,al
c0017a6b:	85 c0                	test   eax,eax
c0017a6d:	74 5e                	je     c0017acd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017a6f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017a72:	83 c0 04             	add    eax,0x4
c0017a75:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017a78:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017a7b:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017a7e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017a81:	8a 00                	mov    al,BYTE PTR [eax]
c0017a83:	0f b6 c0             	movzx  eax,al
c0017a86:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017a89:	83 c2 01             	add    edx,0x1
c0017a8c:	8a 12                	mov    dl,BYTE PTR [edx]
c0017a8e:	0f b6 d2             	movzx  edx,dl
c0017a91:	c1 e2 08             	shl    edx,0x8
c0017a94:	09 d0                	or     eax,edx
c0017a96:	80 cc 02             	or     ah,0x2
c0017a99:	0f b7 c0             	movzx  eax,ax
c0017a9c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017a9f:	83 c2 04             	add    edx,0x4
c0017aa2:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017aa5:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0017aa9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017aac:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017aaf:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0017ab3:	88 c2                	mov    dl,al
c0017ab5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017ab8:	88 10                	mov    BYTE PTR [eax],dl
c0017aba:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0017abe:	c1 e8 08             	shr    eax,0x8
c0017ac1:	89 c2                	mov    edx,eax
c0017ac3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017ac6:	83 c0 01             	add    eax,0x1
c0017ac9:	88 10                	mov    BYTE PTR [eax],dl
c0017acb:	eb 5e                	jmp    c0017b2b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0017acd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017ad0:	83 c0 04             	add    eax,0x4
c0017ad3:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0017ad6:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0017ad9:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0017adc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0017adf:	8a 00                	mov    al,BYTE PTR [eax]
c0017ae1:	0f b6 c0             	movzx  eax,al
c0017ae4:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0017ae7:	83 c2 01             	add    edx,0x1
c0017aea:	8a 12                	mov    dl,BYTE PTR [edx]
c0017aec:	0f b6 d2             	movzx  edx,dl
c0017aef:	c1 e2 08             	shl    edx,0x8
c0017af2:	09 d0                	or     eax,edx
c0017af4:	0f b7 c0             	movzx  eax,ax
c0017af7:	25 ff fd 00 00       	and    eax,0xfdff
c0017afc:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017aff:	83 c2 04             	add    edx,0x4
c0017b02:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c0017b05:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0017b09:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017b0c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017b0f:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0017b13:	88 c2                	mov    dl,al
c0017b15:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017b18:	88 10                	mov    BYTE PTR [eax],dl
c0017b1a:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0017b1e:	c1 e8 08             	shr    eax,0x8
c0017b21:	89 c2                	mov    edx,eax
c0017b23:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017b26:	83 c0 01             	add    eax,0x1
c0017b29:	88 10                	mov    BYTE PTR [eax],dl
c0017b2b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b32:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017b36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b39:	c1 e0 02             	shl    eax,0x2
c0017b3c:	8d 50 02             	lea    edx,[eax+0x2]
c0017b3f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017b42:	01 d0                	add    eax,edx
c0017b44:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017b47:	0f b7 d0             	movzx  edx,ax
c0017b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b4d:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017b50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b53:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017b5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017b5d:	01 d0                	add    eax,edx
c0017b5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017b62:	0f b7 d0             	movzx  edx,ax
c0017b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b68:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b6b:	90                   	nop
c0017b6c:	c9                   	leave  
c0017b6d:	c3                   	ret    

c0017b6e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017b6e:	55                   	push   ebp
c0017b6f:	89 e5                	mov    ebp,esp
c0017b71:	83 ec 28             	sub    esp,0x28
c0017b74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b7a:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017b7e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017b82:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b86:	c1 e0 04             	shl    eax,0x4
c0017b89:	89 c2                	mov    edx,eax
c0017b8b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b8f:	01 d0                	add    eax,edx
c0017b91:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017b96:	7e 10                	jle    c0017ba8 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	68 04 55 02 c0       	push   0xc0025504
c0017ba0:	e8 fb 80 ff ff       	call   c000fca0 <KePanic(char const*)>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017bac:	c1 e0 04             	shl    eax,0x4
c0017baf:	89 c2                	mov    edx,eax
c0017bb1:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017bb5:	01 d0                	add    eax,edx
c0017bb7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017bba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0017bbf:	c9                   	leave  
c0017bc0:	c3                   	ret    

c0017bc1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017bc1:	55                   	push   ebp
c0017bc2:	89 e5                	mov    ebp,esp
c0017bc4:	83 ec 28             	sub    esp,0x28
c0017bc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017bca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017bcd:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017bd1:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017bd5:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017bd9:	c1 e0 04             	shl    eax,0x4
c0017bdc:	89 c2                	mov    edx,eax
c0017bde:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017be2:	01 d0                	add    eax,edx
c0017be4:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017be9:	7e 10                	jle    c0017bfb <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0017beb:	83 ec 0c             	sub    esp,0xc
c0017bee:	68 04 55 02 c0       	push   0xc0025504
c0017bf3:	e8 a8 80 ff ff       	call   c000fca0 <KePanic(char const*)>
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017bff:	c1 e0 04             	shl    eax,0x4
c0017c02:	89 c2                	mov    edx,eax
c0017c04:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c08:	01 d0                	add    eax,edx
c0017c0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017c0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017c10:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017c13:	c9                   	leave  
c0017c14:	c3                   	ret    

c0017c15 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017c15:	55                   	push   ebp
c0017c16:	89 e5                	mov    ebp,esp
c0017c18:	83 ec 28             	sub    esp,0x28
c0017c1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017c1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017c21:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017c25:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017c29:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017c2d:	c1 e0 04             	shl    eax,0x4
c0017c30:	89 c2                	mov    edx,eax
c0017c32:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c36:	01 d0                	add    eax,edx
c0017c38:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017c3d:	7e 10                	jle    c0017c4f <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0017c3f:	83 ec 0c             	sub    esp,0xc
c0017c42:	68 04 55 02 c0       	push   0xc0025504
c0017c47:	e8 54 80 ff ff       	call   c000fca0 <KePanic(char const*)>
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017c53:	c1 e0 04             	shl    eax,0x4
c0017c56:	89 c2                	mov    edx,eax
c0017c58:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c5c:	01 d0                	add    eax,edx
c0017c5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017c61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c66:	c9                   	leave  
c0017c67:	c3                   	ret    

c0017c68 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017c68:	55                   	push   ebp
c0017c69:	89 e5                	mov    ebp,esp
c0017c6b:	83 ec 28             	sub    esp,0x28
c0017c6e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017c74:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017c77:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017c7b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017c7f:	88 c8                	mov    al,cl
c0017c81:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0017c84:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017c88:	c1 e0 04             	shl    eax,0x4
c0017c8b:	89 c2                	mov    edx,eax
c0017c8d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c91:	01 d0                	add    eax,edx
c0017c93:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017c98:	7e 10                	jle    c0017caa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0017c9a:	83 ec 0c             	sub    esp,0xc
c0017c9d:	68 04 55 02 c0       	push   0xc0025504
c0017ca2:	e8 f9 7f ff ff       	call   c000fca0 <KePanic(char const*)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017cae:	c1 e0 04             	shl    eax,0x4
c0017cb1:	89 c2                	mov    edx,eax
c0017cb3:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017cb7:	01 d0                	add    eax,edx
c0017cb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017cbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017cbf:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0017cc2:	88 10                	mov    BYTE PTR [eax],dl
c0017cc4:	90                   	nop
c0017cc5:	c9                   	leave  
c0017cc6:	c3                   	ret    

c0017cc7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017cc7:	55                   	push   ebp
c0017cc8:	89 e5                	mov    ebp,esp
c0017cca:	83 ec 28             	sub    esp,0x28
c0017ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0017cd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017cd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017cd6:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0017cda:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0017cde:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0017ce2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ce6:	c1 e0 04             	shl    eax,0x4
c0017ce9:	89 c2                	mov    edx,eax
c0017ceb:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017cef:	01 d0                	add    eax,edx
c0017cf1:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017cf6:	7e 10                	jle    c0017d08 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	68 04 55 02 c0       	push   0xc0025504
c0017d00:	e8 9b 7f ff ff       	call   c000fca0 <KePanic(char const*)>
c0017d05:	83 c4 10             	add    esp,0x10
c0017d08:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d0c:	c1 e0 04             	shl    eax,0x4
c0017d0f:	89 c2                	mov    edx,eax
c0017d11:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017d15:	01 d0                	add    eax,edx
c0017d17:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017d1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017d1d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017d20:	66 89 02             	mov    WORD PTR [edx],ax
c0017d23:	90                   	nop
c0017d24:	c9                   	leave  
c0017d25:	c3                   	ret    

c0017d26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017d26:	55                   	push   ebp
c0017d27:	89 e5                	mov    ebp,esp
c0017d29:	83 ec 28             	sub    esp,0x28
c0017d2c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017d2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017d32:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017d36:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017d3a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d3e:	c1 e0 04             	shl    eax,0x4
c0017d41:	89 c2                	mov    edx,eax
c0017d43:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017d47:	01 d0                	add    eax,edx
c0017d49:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017d4e:	7e 10                	jle    c0017d60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	68 04 55 02 c0       	push   0xc0025504
c0017d58:	e8 43 7f ff ff       	call   c000fca0 <KePanic(char const*)>
c0017d5d:	83 c4 10             	add    esp,0x10
c0017d60:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017d64:	c1 e0 04             	shl    eax,0x4
c0017d67:	89 c2                	mov    edx,eax
c0017d69:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017d6d:	01 d0                	add    eax,edx
c0017d6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017d75:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017d78:	89 10                	mov    DWORD PTR [eax],edx
c0017d7a:	90                   	nop
c0017d7b:	c9                   	leave  
c0017d7c:	c3                   	ret    

c0017d7d <Vm::faultHandler(regs*)>:
c0017d7d:	55                   	push   ebp
c0017d7e:	89 e5                	mov    ebp,esp
c0017d80:	57                   	push   edi
c0017d81:	56                   	push   esi
c0017d82:	53                   	push   ebx
c0017d83:	81 ec ac 00 00 00    	sub    esp,0xac
c0017d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d8f:	0f b7 d0             	movzx  edx,ax
c0017d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d98:	0f b7 c0             	movzx  eax,ax
c0017d9b:	52                   	push   edx
c0017d9c:	50                   	push   eax
c0017d9d:	e8 f1 f4 ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c0017da2:	83 c4 08             	add    esp,0x8
c0017da5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dab:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017dae:	0f b7 d0             	movzx  edx,ax
c0017db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017db4:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017db7:	0f b7 c0             	movzx  eax,ax
c0017dba:	52                   	push   edx
c0017dbb:	50                   	push   eax
c0017dbc:	e8 d2 f4 ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c0017dc1:	83 c4 08             	add    esp,0x8
c0017dc4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dca:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017dcd:	0f b7 d0             	movzx  edx,ax
c0017dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dd3:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017dd6:	0f b7 c0             	movzx  eax,ax
c0017dd9:	52                   	push   edx
c0017dda:	50                   	push   eax
c0017ddb:	e8 b3 f4 ff ff       	call   c0017293 <Vm::realToLinear(unsigned short, unsigned short)>
c0017de0:	83 c4 08             	add    esp,0x8
c0017de3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017de6:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0017ded:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017df0:	83 c0 02             	add    eax,0x2
c0017df3:	8a 00                	mov    al,BYTE PTR [eax]
c0017df5:	0f b6 f8             	movzx  edi,al
c0017df8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017dfb:	83 c0 01             	add    eax,0x1
c0017dfe:	8a 00                	mov    al,BYTE PTR [eax]
c0017e00:	0f b6 f0             	movzx  esi,al
c0017e03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017e06:	8a 00                	mov    al,BYTE PTR [eax]
c0017e08:	0f b6 d8             	movzx  ebx,al
c0017e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e0e:	8b 48 38             	mov    ecx,DWORD PTR [eax+0x38]
c0017e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e14:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0017e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e1d:	c1 e0 04             	shl    eax,0x4
c0017e20:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0017e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e2c:	03 85 54 ff ff ff    	add    eax,DWORD PTR [ebp-0xac]
c0017e32:	57                   	push   edi
c0017e33:	56                   	push   esi
c0017e34:	53                   	push   ebx
c0017e35:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017e38:	51                   	push   ecx
c0017e39:	52                   	push   edx
c0017e3a:	50                   	push   eax
c0017e3b:	68 23 55 02 c0       	push   0xc0025523
c0017e40:	e8 37 f1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017e45:	83 c4 20             	add    esp,0x20
c0017e48:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0017e4c:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0017e50:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0017e54:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017e57:	8a 00                	mov    al,BYTE PTR [eax]
c0017e59:	0f b6 c0             	movzx  eax,al
c0017e5c:	83 e8 26             	sub    eax,0x26
c0017e5f:	3d d5 00 00 00       	cmp    eax,0xd5
c0017e64:	0f 87 f4 0c 00 00    	ja     c0018b5e <Vm::faultHandler(regs*)+0xde1>
c0017e6a:	8b 04 85 a0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa60]
c0017e71:	ff e0                	jmp    eax
c0017e73:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0017e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e7d:	8d 50 01             	lea    edx,[eax+0x1]
c0017e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e86:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017e8a:	e9 83 0d 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017e8f:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0017e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e99:	8d 50 01             	lea    edx,[eax+0x1]
c0017e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ea2:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017ea6:	e9 67 0d 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017eab:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0017eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ebb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ebe:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017ec2:	e9 4b 0d 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017ec7:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0017ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ece:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ed1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ed7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017eda:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017ede:	e9 2f 0d 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017ee3:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0017ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eed:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ef3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ef6:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017efa:	e9 13 0d 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017eff:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0017f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f09:	8d 50 01             	lea    edx,[eax+0x1]
c0017f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f12:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017f16:	e9 f7 0c 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017f1b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0017f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f25:	8d 50 01             	lea    edx,[eax+0x1]
c0017f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f2e:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017f32:	e9 db 0c 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017f37:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0017f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f41:	8d 50 01             	lea    edx,[eax+0x1]
c0017f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f4a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017f4e:	e9 bf 0c 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f59:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f62:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017f66:	e9 a7 0c 00 00       	jmp    c0018c12 <Vm::faultHandler(regs*)+0xe95>
c0017f6b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017f6f:	85 c0                	test   eax,eax
c0017f71:	74 5b                	je     c0017fce <Vm::faultHandler(regs*)+0x251>
c0017f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f76:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f79:	83 e8 04             	sub    eax,0x4
c0017f7c:	0f b7 d0             	movzx  edx,ax
c0017f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f82:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017f85:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0017f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f8f:	25 ff 0d 00 00       	and    eax,0xdff
c0017f94:	89 c2                	mov    edx,eax
c0017f96:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017f99:	89 10                	mov    DWORD PTR [eax],edx
c0017f9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017fa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fa2:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017fa5:	0f b6 c0             	movzx  eax,al
c0017fa8:	85 c0                	test   eax,eax
c0017faa:	74 11                	je     c0017fbd <Vm::faultHandler(regs*)+0x240>
c0017fac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fb1:	80 cc 02             	or     ah,0x2
c0017fb4:	89 c2                	mov    edx,eax
c0017fb6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017fb9:	89 10                	mov    DWORD PTR [eax],edx
c0017fbb:	eb 64                	jmp    c0018021 <Vm::faultHandler(regs*)+0x2a4>
c0017fbd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fc2:	80 e4 fd             	and    ah,0xfd
c0017fc5:	89 c2                	mov    edx,eax
c0017fc7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017fca:	89 10                	mov    DWORD PTR [eax],edx
c0017fcc:	eb 53                	jmp    c0018021 <Vm::faultHandler(regs*)+0x2a4>
c0017fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fd1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017fd4:	83 e8 02             	sub    eax,0x2
c0017fd7:	0f b7 d0             	movzx  edx,ax
c0017fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fdd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017fe0:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0017fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fe7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017fed:	66 89 02             	mov    WORD PTR [edx],ax
c0017ff0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ff5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ff7:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017ffa:	0f b6 c0             	movzx  eax,al
c0017ffd:	85 c0                	test   eax,eax
c0017fff:	74 11                	je     c0018012 <Vm::faultHandler(regs*)+0x295>
c0018001:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018004:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018007:	80 cc 02             	or     ah,0x2
c001800a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001800d:	66 89 02             	mov    WORD PTR [edx],ax
c0018010:	eb 0f                	jmp    c0018021 <Vm::faultHandler(regs*)+0x2a4>
c0018012:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018015:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018018:	80 e4 fd             	and    ah,0xfd
c001801b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001801e:	66 89 02             	mov    WORD PTR [edx],ax
c0018021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018024:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018027:	8d 50 01             	lea    edx,[eax+0x1]
c001802a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001802d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018030:	b0 01                	mov    al,0x1
c0018032:	e9 e0 0b 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018037:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001803b:	85 c0                	test   eax,eax
c001803d:	74 46                	je     c0018085 <Vm::faultHandler(regs*)+0x308>
c001803f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018042:	8b 00                	mov    eax,DWORD PTR [eax]
c0018044:	25 ff 0d 00 00       	and    eax,0xdff
c0018049:	0d 00 02 02 00       	or     eax,0x20200
c001804e:	89 c2                	mov    edx,eax
c0018050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018053:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018056:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018059:	8b 00                	mov    eax,DWORD PTR [eax]
c001805b:	25 00 02 00 00       	and    eax,0x200
c0018060:	89 c2                	mov    edx,eax
c0018062:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018067:	8b 00                	mov    eax,DWORD PTR [eax]
c0018069:	85 d2                	test   edx,edx
c001806b:	0f 95 c2             	setne  dl
c001806e:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018074:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018077:	83 c0 04             	add    eax,0x4
c001807a:	0f b7 d0             	movzx  edx,ax
c001807d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018080:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018083:	eb 47                	jmp    c00180cc <Vm::faultHandler(regs*)+0x34f>
c0018085:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018088:	66 8b 00             	mov    ax,WORD PTR [eax]
c001808b:	0f b7 c0             	movzx  eax,ax
c001808e:	0d 00 02 02 00       	or     eax,0x20200
c0018093:	89 c2                	mov    edx,eax
c0018095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018098:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001809b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001809e:	66 8b 00             	mov    ax,WORD PTR [eax]
c00180a1:	0f b7 c0             	movzx  eax,ax
c00180a4:	25 00 02 00 00       	and    eax,0x200
c00180a9:	89 c2                	mov    edx,eax
c00180ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b2:	85 d2                	test   edx,edx
c00180b4:	0f 95 c2             	setne  dl
c00180b7:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00180ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180bd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00180c0:	83 c0 02             	add    eax,0x2
c00180c3:	0f b7 d0             	movzx  edx,ax
c00180c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180c9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00180cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180d2:	8d 50 01             	lea    edx,[eax+0x1]
c00180d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180db:	b0 01                	mov    al,0x1
c00180dd:	e9 35 0b 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c00180e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180e5:	83 c0 01             	add    eax,0x1
c00180e8:	8a 00                	mov    al,BYTE PTR [eax]
c00180ea:	0f b6 c0             	movzx  eax,al
c00180ed:	3d ee 00 00 00       	cmp    eax,0xee
c00180f2:	75 19                	jne    c001810d <Vm::faultHandler(regs*)+0x390>
c00180f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180f7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00180fa:	83 ec 0c             	sub    esp,0xc
c00180fd:	50                   	push   eax
c00180fe:	e8 5b f2 ff ff       	call   c001735e <Vm::mainloop3(unsigned long)>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	b0 01                	mov    al,0x1
c0018108:	e9 0a 0b 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c001810d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018110:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018113:	0f b7 c8             	movzx  ecx,ax
c0018116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018119:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001811c:	0f b7 d0             	movzx  edx,ax
c001811f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018122:	83 c0 01             	add    eax,0x1
c0018125:	8a 00                	mov    al,BYTE PTR [eax]
c0018127:	0f b6 c0             	movzx  eax,al
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	51                   	push   ecx
c001812e:	52                   	push   edx
c001812f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018132:	50                   	push   eax
c0018133:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018136:	e8 2f f8 ff ff       	call   c001796a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001813b:	83 c4 20             	add    esp,0x20
c001813e:	b0 01                	mov    al,0x1
c0018140:	e9 d2 0a 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018145:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001814a:	8b 00                	mov    eax,DWORD PTR [eax]
c001814c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018153:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018156:	8d 50 01             	lea    edx,[eax+0x1]
c0018159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001815c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001815f:	b0 01                	mov    al,0x1
c0018161:	e9 b1 0a 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018166:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001816b:	8b 00                	mov    eax,DWORD PTR [eax]
c001816d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018174:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018177:	8d 50 01             	lea    edx,[eax+0x1]
c001817a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001817d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018180:	b0 01                	mov    al,0x1
c0018182:	e9 90 0a 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018187:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001818a:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c001818d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018190:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018193:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018196:	8a 00                	mov    al,BYTE PTR [eax]
c0018198:	0f b6 c0             	movzx  eax,al
c001819b:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c001819e:	83 c2 01             	add    edx,0x1
c00181a1:	8a 12                	mov    dl,BYTE PTR [edx]
c00181a3:	0f b6 d2             	movzx  edx,dl
c00181a6:	c1 e2 08             	shl    edx,0x8
c00181a9:	09 d0                	or     eax,edx
c00181ab:	0f b7 d0             	movzx  edx,ax
c00181ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00181b4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00181b7:	83 c0 02             	add    eax,0x2
c00181ba:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00181bd:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00181c0:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00181c3:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00181c6:	8a 00                	mov    al,BYTE PTR [eax]
c00181c8:	0f b6 c0             	movzx  eax,al
c00181cb:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c00181ce:	83 c2 01             	add    edx,0x1
c00181d1:	8a 12                	mov    dl,BYTE PTR [edx]
c00181d3:	0f b6 d2             	movzx  edx,dl
c00181d6:	c1 e2 08             	shl    edx,0x8
c00181d9:	09 d0                	or     eax,edx
c00181db:	0f b7 d0             	movzx  edx,ax
c00181de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181e1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00181e4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00181e7:	83 c0 04             	add    eax,0x4
c00181ea:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c00181ed:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00181f0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c00181f3:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c00181f6:	8a 00                	mov    al,BYTE PTR [eax]
c00181f8:	0f b6 c0             	movzx  eax,al
c00181fb:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c00181fe:	83 c2 01             	add    edx,0x1
c0018201:	8a 12                	mov    dl,BYTE PTR [edx]
c0018203:	0f b6 d2             	movzx  edx,dl
c0018206:	c1 e2 08             	shl    edx,0x8
c0018209:	09 d0                	or     eax,edx
c001820b:	0f b7 c0             	movzx  eax,ax
c001820e:	0d 00 02 02 00       	or     eax,0x20200
c0018213:	89 c2                	mov    edx,eax
c0018215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018218:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001821b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001821e:	83 c0 04             	add    eax,0x4
c0018221:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018224:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018227:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c001822a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001822d:	8a 00                	mov    al,BYTE PTR [eax]
c001822f:	0f b6 c0             	movzx  eax,al
c0018232:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018235:	83 c2 01             	add    edx,0x1
c0018238:	8a 12                	mov    dl,BYTE PTR [edx]
c001823a:	0f b6 d2             	movzx  edx,dl
c001823d:	c1 e2 08             	shl    edx,0x8
c0018240:	09 d0                	or     eax,edx
c0018242:	0f b7 c0             	movzx  eax,ax
c0018245:	25 00 02 00 00       	and    eax,0x200
c001824a:	89 c2                	mov    edx,eax
c001824c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018251:	8b 00                	mov    eax,DWORD PTR [eax]
c0018253:	85 d2                	test   edx,edx
c0018255:	0f 95 c2             	setne  dl
c0018258:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c001825b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001825e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018261:	83 c0 06             	add    eax,0x6
c0018264:	0f b7 d0             	movzx  edx,ax
c0018267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001826a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001826d:	b0 01                	mov    al,0x1
c001826f:	e9 a3 09 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018274:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c001827a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001827d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018280:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018284:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018288:	85 c0                	test   eax,eax
c001828a:	74 7a                	je     c0018306 <Vm::faultHandler(regs*)+0x589>
c001828c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001828f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018292:	3d ff ff 00 00       	cmp    eax,0xffff
c0018297:	76 6d                	jbe    c0018306 <Vm::faultHandler(regs*)+0x589>
c0018299:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001829c:	83 c0 05             	add    eax,0x5
c001829f:	8a 00                	mov    al,BYTE PTR [eax]
c00182a1:	0f b6 c0             	movzx  eax,al
c00182a4:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00182aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182ad:	83 c0 04             	add    eax,0x4
c00182b0:	8a 00                	mov    al,BYTE PTR [eax]
c00182b2:	0f b6 f8             	movzx  edi,al
c00182b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182b8:	83 c0 03             	add    eax,0x3
c00182bb:	8a 00                	mov    al,BYTE PTR [eax]
c00182bd:	0f b6 f0             	movzx  esi,al
c00182c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182c3:	83 c0 02             	add    eax,0x2
c00182c6:	8a 00                	mov    al,BYTE PTR [eax]
c00182c8:	0f b6 d8             	movzx  ebx,al
c00182cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182ce:	83 c0 01             	add    eax,0x1
c00182d1:	8a 00                	mov    al,BYTE PTR [eax]
c00182d3:	0f b6 c8             	movzx  ecx,al
c00182d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182d9:	8a 00                	mov    al,BYTE PTR [eax]
c00182db:	0f b6 d0             	movzx  edx,al
c00182de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00182e1:	8a 00                	mov    al,BYTE PTR [eax]
c00182e3:	0f b6 c0             	movzx  eax,al
c00182e6:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00182ec:	57                   	push   edi
c00182ed:	56                   	push   esi
c00182ee:	53                   	push   ebx
c00182ef:	51                   	push   ecx
c00182f0:	52                   	push   edx
c00182f1:	50                   	push   eax
c00182f2:	68 40 55 02 c0       	push   0xc0025540
c00182f7:	e8 80 ec fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00182fc:	83 c4 20             	add    esp,0x20
c00182ff:	b0 00                	mov    al,0x0
c0018301:	e9 11 09 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018309:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001830c:	0f b7 c0             	movzx  eax,ax
c001830f:	83 ec 0c             	sub    esp,0xc
c0018312:	50                   	push   eax
c0018313:	e8 dd ee ff ff       	call   c00171f5 <Vm::inbv(unsigned short)>
c0018318:	83 c4 10             	add    esp,0x10
c001831b:	0f b6 c8             	movzx  ecx,al
c001831e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018321:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018324:	0f b7 d0             	movzx  edx,ax
c0018327:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c001832b:	83 ec 04             	sub    esp,0x4
c001832e:	51                   	push   ecx
c001832f:	52                   	push   edx
c0018330:	50                   	push   eax
c0018331:	e8 32 f9 ff ff       	call   c0017c68 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018336:	83 c4 10             	add    esp,0x10
c0018339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001833c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001833f:	25 00 04 00 00       	and    eax,0x400
c0018344:	85 c0                	test   eax,eax
c0018346:	74 14                	je     c001835c <Vm::faultHandler(regs*)+0x5df>
c0018348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001834b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001834e:	83 e8 01             	sub    eax,0x1
c0018351:	0f b7 d0             	movzx  edx,ax
c0018354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018357:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001835a:	eb 12                	jmp    c001836e <Vm::faultHandler(regs*)+0x5f1>
c001835c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001835f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018362:	83 c0 01             	add    eax,0x1
c0018365:	0f b7 d0             	movzx  edx,ax
c0018368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001836b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001836e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018371:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018374:	8d 50 01             	lea    edx,[eax+0x1]
c0018377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001837a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001837d:	b0 01                	mov    al,0x1
c001837f:	e9 93 08 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018384:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c001838a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001838d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018390:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018394:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018398:	85 c0                	test   eax,eax
c001839a:	74 7a                	je     c0018416 <Vm::faultHandler(regs*)+0x699>
c001839c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001839f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00183a2:	3d ff ff 00 00       	cmp    eax,0xffff
c00183a7:	76 6d                	jbe    c0018416 <Vm::faultHandler(regs*)+0x699>
c00183a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183ac:	83 c0 05             	add    eax,0x5
c00183af:	8a 00                	mov    al,BYTE PTR [eax]
c00183b1:	0f b6 c0             	movzx  eax,al
c00183b4:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00183ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183bd:	83 c0 04             	add    eax,0x4
c00183c0:	8a 00                	mov    al,BYTE PTR [eax]
c00183c2:	0f b6 f8             	movzx  edi,al
c00183c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183c8:	83 c0 03             	add    eax,0x3
c00183cb:	8a 00                	mov    al,BYTE PTR [eax]
c00183cd:	0f b6 f0             	movzx  esi,al
c00183d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183d3:	83 c0 02             	add    eax,0x2
c00183d6:	8a 00                	mov    al,BYTE PTR [eax]
c00183d8:	0f b6 d8             	movzx  ebx,al
c00183db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183de:	83 c0 01             	add    eax,0x1
c00183e1:	8a 00                	mov    al,BYTE PTR [eax]
c00183e3:	0f b6 c8             	movzx  ecx,al
c00183e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183e9:	8a 00                	mov    al,BYTE PTR [eax]
c00183eb:	0f b6 d0             	movzx  edx,al
c00183ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183f1:	8a 00                	mov    al,BYTE PTR [eax]
c00183f3:	0f b6 c0             	movzx  eax,al
c00183f6:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00183fc:	57                   	push   edi
c00183fd:	56                   	push   esi
c00183fe:	53                   	push   ebx
c00183ff:	51                   	push   ecx
c0018400:	52                   	push   edx
c0018401:	50                   	push   eax
c0018402:	68 40 55 02 c0       	push   0xc0025540
c0018407:	e8 70 eb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001840c:	83 c4 20             	add    esp,0x20
c001840f:	b0 00                	mov    al,0x0
c0018411:	e9 01 08 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018416:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001841a:	85 c0                	test   eax,eax
c001841c:	74 6f                	je     c001848d <Vm::faultHandler(regs*)+0x710>
c001841e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018421:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018424:	0f b7 c0             	movzx  eax,ax
c0018427:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c001842b:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c001842f:	89 c2                	mov    edx,eax
c0018431:	ed                   	in     eax,dx
c0018432:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018435:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001843b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001843e:	0f b7 d0             	movzx  edx,ax
c0018441:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018445:	83 ec 04             	sub    esp,0x4
c0018448:	51                   	push   ecx
c0018449:	52                   	push   edx
c001844a:	50                   	push   eax
c001844b:	e8 d6 f8 ff ff       	call   c0017d26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018450:	83 c4 10             	add    esp,0x10
c0018453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018456:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018459:	25 00 04 00 00       	and    eax,0x400
c001845e:	85 c0                	test   eax,eax
c0018460:	74 17                	je     c0018479 <Vm::faultHandler(regs*)+0x6fc>
c0018462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018465:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018468:	83 e8 04             	sub    eax,0x4
c001846b:	0f b7 d0             	movzx  edx,ax
c001846e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018471:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018474:	e9 83 00 00 00       	jmp    c00184fc <Vm::faultHandler(regs*)+0x77f>
c0018479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001847c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001847f:	83 c0 04             	add    eax,0x4
c0018482:	0f b7 d0             	movzx  edx,ax
c0018485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018488:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001848b:	eb 6f                	jmp    c00184fc <Vm::faultHandler(regs*)+0x77f>
c001848d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018490:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018493:	0f b7 c0             	movzx  eax,ax
c0018496:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c001849a:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c001849e:	89 c2                	mov    edx,eax
c00184a0:	66 ed                	in     ax,dx
c00184a2:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c00184a6:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c00184a9:	0f b7 c8             	movzx  ecx,ax
c00184ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184b2:	0f b7 d0             	movzx  edx,ax
c00184b5:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00184b9:	83 ec 04             	sub    esp,0x4
c00184bc:	51                   	push   ecx
c00184bd:	52                   	push   edx
c00184be:	50                   	push   eax
c00184bf:	e8 03 f8 ff ff       	call   c0017cc7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00184c4:	83 c4 10             	add    esp,0x10
c00184c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184cd:	25 00 04 00 00       	and    eax,0x400
c00184d2:	85 c0                	test   eax,eax
c00184d4:	74 14                	je     c00184ea <Vm::faultHandler(regs*)+0x76d>
c00184d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184dc:	83 e8 02             	sub    eax,0x2
c00184df:	0f b7 d0             	movzx  edx,ax
c00184e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184e5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00184e8:	eb 12                	jmp    c00184fc <Vm::faultHandler(regs*)+0x77f>
c00184ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184f0:	83 c0 02             	add    eax,0x2
c00184f3:	0f b7 d0             	movzx  edx,ax
c00184f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00184fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018502:	8d 50 01             	lea    edx,[eax+0x1]
c0018505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018508:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001850b:	b0 01                	mov    al,0x1
c001850d:	e9 05 07 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018512:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018518:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c001851c:	83 f8 06             	cmp    eax,0x6
c001851f:	77 4f                	ja     c0018570 <Vm::faultHandler(regs*)+0x7f3>
c0018521:	8b 04 85 f8 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda708]
c0018528:	ff e0                	jmp    eax
c001852a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001852d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018530:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018534:	eb 3a                	jmp    c0018570 <Vm::faultHandler(regs*)+0x7f3>
c0018536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018539:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001853c:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018540:	eb 2e                	jmp    c0018570 <Vm::faultHandler(regs*)+0x7f3>
c0018542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018545:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018548:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001854c:	eb 22                	jmp    c0018570 <Vm::faultHandler(regs*)+0x7f3>
c001854e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018551:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018554:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018558:	eb 16                	jmp    c0018570 <Vm::faultHandler(regs*)+0x7f3>
c001855a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001855d:	8b 00                	mov    eax,DWORD PTR [eax]
c001855f:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018563:	eb 0b                	jmp    c0018570 <Vm::faultHandler(regs*)+0x7f3>
c0018565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018568:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001856b:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001856f:	90                   	nop
c0018570:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018574:	85 c0                	test   eax,eax
c0018576:	74 7a                	je     c00185f2 <Vm::faultHandler(regs*)+0x875>
c0018578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001857b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001857e:	3d ff ff 00 00       	cmp    eax,0xffff
c0018583:	76 6d                	jbe    c00185f2 <Vm::faultHandler(regs*)+0x875>
c0018585:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018588:	83 c0 05             	add    eax,0x5
c001858b:	8a 00                	mov    al,BYTE PTR [eax]
c001858d:	0f b6 c0             	movzx  eax,al
c0018590:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018596:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018599:	83 c0 04             	add    eax,0x4
c001859c:	8a 00                	mov    al,BYTE PTR [eax]
c001859e:	0f b6 f8             	movzx  edi,al
c00185a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185a4:	83 c0 03             	add    eax,0x3
c00185a7:	8a 00                	mov    al,BYTE PTR [eax]
c00185a9:	0f b6 f0             	movzx  esi,al
c00185ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185af:	83 c0 02             	add    eax,0x2
c00185b2:	8a 00                	mov    al,BYTE PTR [eax]
c00185b4:	0f b6 d8             	movzx  ebx,al
c00185b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185ba:	83 c0 01             	add    eax,0x1
c00185bd:	8a 00                	mov    al,BYTE PTR [eax]
c00185bf:	0f b6 c8             	movzx  ecx,al
c00185c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185c5:	8a 00                	mov    al,BYTE PTR [eax]
c00185c7:	0f b6 d0             	movzx  edx,al
c00185ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185cd:	8a 00                	mov    al,BYTE PTR [eax]
c00185cf:	0f b6 c0             	movzx  eax,al
c00185d2:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00185d8:	57                   	push   edi
c00185d9:	56                   	push   esi
c00185da:	53                   	push   ebx
c00185db:	51                   	push   ecx
c00185dc:	52                   	push   edx
c00185dd:	50                   	push   eax
c00185de:	68 40 55 02 c0       	push   0xc0025540
c00185e3:	e8 94 e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00185e8:	83 c4 20             	add    esp,0x20
c00185eb:	b0 00                	mov    al,0x0
c00185ed:	e9 25 06 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c00185f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185f5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00185f8:	0f b7 d0             	movzx  edx,ax
c00185fb:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c00185ff:	83 ec 08             	sub    esp,0x8
c0018602:	52                   	push   edx
c0018603:	50                   	push   eax
c0018604:	e8 65 f5 ff ff       	call   c0017b6e <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	0f b6 d0             	movzx  edx,al
c001860f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018612:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018615:	0f b7 c0             	movzx  eax,ax
c0018618:	83 ec 08             	sub    esp,0x8
c001861b:	52                   	push   edx
c001861c:	50                   	push   eax
c001861d:	e8 0a ec ff ff       	call   c001722c <Vm::outbv(unsigned short, unsigned char)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018628:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001862b:	25 00 04 00 00       	and    eax,0x400
c0018630:	85 c0                	test   eax,eax
c0018632:	74 14                	je     c0018648 <Vm::faultHandler(regs*)+0x8cb>
c0018634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018637:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001863a:	83 e8 01             	sub    eax,0x1
c001863d:	0f b7 d0             	movzx  edx,ax
c0018640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018643:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018646:	eb 12                	jmp    c001865a <Vm::faultHandler(regs*)+0x8dd>
c0018648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001864b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001864e:	83 c0 01             	add    eax,0x1
c0018651:	0f b7 d0             	movzx  edx,ax
c0018654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018657:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001865a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001865d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018660:	8d 50 01             	lea    edx,[eax+0x1]
c0018663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018666:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018669:	b0 01                	mov    al,0x1
c001866b:	e9 a7 05 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018670:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018676:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c001867a:	83 f8 06             	cmp    eax,0x6
c001867d:	77 4f                	ja     c00186ce <Vm::faultHandler(regs*)+0x951>
c001867f:	8b 04 85 14 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda6ec]
c0018686:	ff e0                	jmp    eax
c0018688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001868b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001868e:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018692:	eb 3a                	jmp    c00186ce <Vm::faultHandler(regs*)+0x951>
c0018694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018697:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001869a:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001869e:	eb 2e                	jmp    c00186ce <Vm::faultHandler(regs*)+0x951>
c00186a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00186a6:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00186aa:	eb 22                	jmp    c00186ce <Vm::faultHandler(regs*)+0x951>
c00186ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00186b2:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00186b6:	eb 16                	jmp    c00186ce <Vm::faultHandler(regs*)+0x951>
c00186b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bd:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00186c1:	eb 0b                	jmp    c00186ce <Vm::faultHandler(regs*)+0x951>
c00186c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c6:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00186c9:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00186cd:	90                   	nop
c00186ce:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00186d2:	85 c0                	test   eax,eax
c00186d4:	74 7a                	je     c0018750 <Vm::faultHandler(regs*)+0x9d3>
c00186d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00186dc:	3d ff ff 00 00       	cmp    eax,0xffff
c00186e1:	76 6d                	jbe    c0018750 <Vm::faultHandler(regs*)+0x9d3>
c00186e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00186e6:	83 c0 05             	add    eax,0x5
c00186e9:	8a 00                	mov    al,BYTE PTR [eax]
c00186eb:	0f b6 c0             	movzx  eax,al
c00186ee:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00186f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00186f7:	83 c0 04             	add    eax,0x4
c00186fa:	8a 00                	mov    al,BYTE PTR [eax]
c00186fc:	0f b6 f8             	movzx  edi,al
c00186ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018702:	83 c0 03             	add    eax,0x3
c0018705:	8a 00                	mov    al,BYTE PTR [eax]
c0018707:	0f b6 f0             	movzx  esi,al
c001870a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001870d:	83 c0 02             	add    eax,0x2
c0018710:	8a 00                	mov    al,BYTE PTR [eax]
c0018712:	0f b6 d8             	movzx  ebx,al
c0018715:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018718:	83 c0 01             	add    eax,0x1
c001871b:	8a 00                	mov    al,BYTE PTR [eax]
c001871d:	0f b6 c8             	movzx  ecx,al
c0018720:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018723:	8a 00                	mov    al,BYTE PTR [eax]
c0018725:	0f b6 d0             	movzx  edx,al
c0018728:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001872b:	8a 00                	mov    al,BYTE PTR [eax]
c001872d:	0f b6 c0             	movzx  eax,al
c0018730:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018736:	57                   	push   edi
c0018737:	56                   	push   esi
c0018738:	53                   	push   ebx
c0018739:	51                   	push   ecx
c001873a:	52                   	push   edx
c001873b:	50                   	push   eax
c001873c:	68 40 55 02 c0       	push   0xc0025540
c0018741:	e8 36 e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018746:	83 c4 20             	add    esp,0x20
c0018749:	b0 00                	mov    al,0x0
c001874b:	e9 c7 04 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018750:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018754:	85 c0                	test   eax,eax
c0018756:	74 6e                	je     c00187c6 <Vm::faultHandler(regs*)+0xa49>
c0018758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001875b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001875e:	0f b7 d0             	movzx  edx,ax
c0018761:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018765:	83 ec 08             	sub    esp,0x8
c0018768:	52                   	push   edx
c0018769:	50                   	push   eax
c001876a:	e8 a6 f4 ff ff       	call   c0017c15 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001876f:	83 c4 10             	add    esp,0x10
c0018772:	89 c2                	mov    edx,eax
c0018774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018777:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001877a:	0f b7 c0             	movzx  eax,ax
c001877d:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c0018781:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c0018784:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018787:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c001878b:	ef                   	out    dx,eax
c001878c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001878f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018792:	25 00 04 00 00       	and    eax,0x400
c0018797:	85 c0                	test   eax,eax
c0018799:	74 17                	je     c00187b2 <Vm::faultHandler(regs*)+0xa35>
c001879b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001879e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00187a1:	83 e8 04             	sub    eax,0x4
c00187a4:	0f b7 d0             	movzx  edx,ax
c00187a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187aa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00187ad:	e9 80 00 00 00       	jmp    c0018832 <Vm::faultHandler(regs*)+0xab5>
c00187b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00187b8:	83 c0 04             	add    eax,0x4
c00187bb:	0f b7 d0             	movzx  edx,ax
c00187be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00187c4:	eb 6c                	jmp    c0018832 <Vm::faultHandler(regs*)+0xab5>
c00187c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00187cc:	0f b7 d0             	movzx  edx,ax
c00187cf:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00187d3:	83 ec 08             	sub    esp,0x8
c00187d6:	52                   	push   edx
c00187d7:	50                   	push   eax
c00187d8:	e8 e4 f3 ff ff       	call   c0017bc1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	0f b7 c0             	movzx  eax,ax
c00187e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00187e6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00187e9:	0f b7 d2             	movzx  edx,dx
c00187ec:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c00187f0:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c00187f4:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c00187f7:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c00187fb:	66 ef                	out    dx,ax
c00187fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018800:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018803:	25 00 04 00 00       	and    eax,0x400
c0018808:	85 c0                	test   eax,eax
c001880a:	74 14                	je     c0018820 <Vm::faultHandler(regs*)+0xaa3>
c001880c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001880f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018812:	83 e8 02             	sub    eax,0x2
c0018815:	0f b7 d0             	movzx  edx,ax
c0018818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001881b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001881e:	eb 12                	jmp    c0018832 <Vm::faultHandler(regs*)+0xab5>
c0018820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018823:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018826:	83 c0 02             	add    eax,0x2
c0018829:	0f b7 d0             	movzx  edx,ax
c001882c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001882f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018835:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018838:	8d 50 01             	lea    edx,[eax+0x1]
c001883b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001883e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018841:	b0 01                	mov    al,0x1
c0018843:	e9 cf 03 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001884b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001884e:	b0 00                	mov    al,0x0
c0018850:	89 c2                	mov    edx,eax
c0018852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018855:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018858:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001885b:	83 c0 01             	add    eax,0x1
c001885e:	8a 00                	mov    al,BYTE PTR [eax]
c0018860:	0f b6 c0             	movzx  eax,al
c0018863:	83 ec 0c             	sub    esp,0xc
c0018866:	50                   	push   eax
c0018867:	e8 89 e9 ff ff       	call   c00171f5 <Vm::inbv(unsigned short)>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	88 c1                	mov    cl,al
c0018871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018874:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018877:	0f b6 c1             	movzx  eax,cl
c001887a:	09 c2                	or     edx,eax
c001887c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001887f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018885:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018888:	8d 50 02             	lea    edx,[eax+0x2]
c001888b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001888e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018891:	b0 01                	mov    al,0x1
c0018893:	e9 7f 03 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018898:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001889c:	85 c0                	test   eax,eax
c001889e:	74 24                	je     c00188c4 <Vm::faultHandler(regs*)+0xb47>
c00188a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188a3:	83 c0 01             	add    eax,0x1
c00188a6:	8a 00                	mov    al,BYTE PTR [eax]
c00188a8:	0f b6 c0             	movzx  eax,al
c00188ab:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c00188af:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c00188b3:	89 c2                	mov    edx,eax
c00188b5:	ed                   	in     eax,dx
c00188b6:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c00188b9:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c00188bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188bf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00188c2:	eb 42                	jmp    c0018906 <Vm::faultHandler(regs*)+0xb89>
c00188c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188c7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00188ca:	25 00 00 ff ff       	and    eax,0xffff0000
c00188cf:	89 c2                	mov    edx,eax
c00188d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00188d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188da:	83 c0 01             	add    eax,0x1
c00188dd:	8a 00                	mov    al,BYTE PTR [eax]
c00188df:	0f b6 c0             	movzx  eax,al
c00188e2:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c00188e6:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c00188ea:	89 c2                	mov    edx,eax
c00188ec:	66 ed                	in     ax,dx
c00188ee:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c00188f2:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c00188f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00188f8:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c00188fb:	0f b7 c0             	movzx  eax,ax
c00188fe:	09 c2                	or     edx,eax
c0018900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018903:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018909:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001890c:	8d 50 02             	lea    edx,[eax+0x2]
c001890f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018912:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018915:	b0 01                	mov    al,0x1
c0018917:	e9 fb 02 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c001891c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001891f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018922:	0f b6 d0             	movzx  edx,al
c0018925:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018928:	83 c0 01             	add    eax,0x1
c001892b:	8a 00                	mov    al,BYTE PTR [eax]
c001892d:	0f b6 c0             	movzx  eax,al
c0018930:	83 ec 08             	sub    esp,0x8
c0018933:	52                   	push   edx
c0018934:	50                   	push   eax
c0018935:	e8 f2 e8 ff ff       	call   c001722c <Vm::outbv(unsigned short, unsigned char)>
c001893a:	83 c4 10             	add    esp,0x10
c001893d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018940:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018943:	8d 50 02             	lea    edx,[eax+0x2]
c0018946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018949:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001894c:	b0 01                	mov    al,0x1
c001894e:	e9 c4 02 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018953:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018957:	85 c0                	test   eax,eax
c0018959:	74 28                	je     c0018983 <Vm::faultHandler(regs*)+0xc06>
c001895b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001895e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018961:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018964:	83 c0 01             	add    eax,0x1
c0018967:	8a 00                	mov    al,BYTE PTR [eax]
c0018969:	0f b6 c0             	movzx  eax,al
c001896c:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c0018970:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c0018976:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c001897c:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018980:	ef                   	out    dx,eax
c0018981:	eb 31                	jmp    c00189b4 <Vm::faultHandler(regs*)+0xc37>
c0018983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018986:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018989:	0f b7 c0             	movzx  eax,ax
c001898c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001898f:	83 c2 01             	add    edx,0x1
c0018992:	8a 12                	mov    dl,BYTE PTR [edx]
c0018994:	0f b6 d2             	movzx  edx,dl
c0018997:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c001899e:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00189a5:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c00189ab:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00189b2:	66 ef                	out    dx,ax
c00189b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189ba:	8d 50 02             	lea    edx,[eax+0x2]
c00189bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189c3:	b0 01                	mov    al,0x1
c00189c5:	e9 4d 02 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c00189ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189cd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00189d0:	b0 00                	mov    al,0x0
c00189d2:	89 c2                	mov    edx,eax
c00189d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189d7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00189da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00189e0:	0f b7 c0             	movzx  eax,ax
c00189e3:	83 ec 0c             	sub    esp,0xc
c00189e6:	50                   	push   eax
c00189e7:	e8 09 e8 ff ff       	call   c00171f5 <Vm::inbv(unsigned short)>
c00189ec:	83 c4 10             	add    esp,0x10
c00189ef:	88 c1                	mov    cl,al
c00189f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00189f7:	0f b6 c1             	movzx  eax,cl
c00189fa:	09 c2                	or     edx,eax
c00189fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ff:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a08:	8d 50 01             	lea    edx,[eax+0x1]
c0018a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a11:	b0 01                	mov    al,0x1
c0018a13:	e9 ff 01 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018a18:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018a1c:	85 c0                	test   eax,eax
c0018a1e:	74 2e                	je     c0018a4e <Vm::faultHandler(regs*)+0xcd1>
c0018a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a23:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018a26:	0f b7 c0             	movzx  eax,ax
c0018a29:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0018a30:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0018a37:	89 c2                	mov    edx,eax
c0018a39:	ed                   	in     eax,dx
c0018a3a:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0018a40:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0018a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a49:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a4c:	eb 4c                	jmp    c0018a9a <Vm::faultHandler(regs*)+0xd1d>
c0018a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a51:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018a54:	25 00 00 ff ff       	and    eax,0xffff0000
c0018a59:	89 c2                	mov    edx,eax
c0018a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a5e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a64:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018a67:	0f b7 c0             	movzx  eax,ax
c0018a6a:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0018a71:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0018a78:	89 c2                	mov    edx,eax
c0018a7a:	66 ed                	in     ax,dx
c0018a7c:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0018a83:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c0018a89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018a8c:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018a8f:	0f b7 c0             	movzx  eax,ax
c0018a92:	09 c2                	or     edx,eax
c0018a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a9d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018aa0:	8d 50 01             	lea    edx,[eax+0x1]
c0018aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aa6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018aa9:	b0 01                	mov    al,0x1
c0018aab:	e9 67 01 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ab3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018ab6:	0f b6 d0             	movzx  edx,al
c0018ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018abc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018abf:	0f b7 c0             	movzx  eax,ax
c0018ac2:	83 ec 08             	sub    esp,0x8
c0018ac5:	52                   	push   edx
c0018ac6:	50                   	push   eax
c0018ac7:	e8 60 e7 ff ff       	call   c001722c <Vm::outbv(unsigned short, unsigned char)>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ad2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ad5:	8d 50 01             	lea    edx,[eax+0x1]
c0018ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018adb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ade:	b0 01                	mov    al,0x1
c0018ae0:	e9 32 01 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018ae5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018ae9:	85 c0                	test   eax,eax
c0018aeb:	74 2c                	je     c0018b19 <Vm::faultHandler(regs*)+0xd9c>
c0018aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018af0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018af6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018af9:	0f b7 c0             	movzx  eax,ax
c0018afc:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c0018b03:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c0018b09:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018b0f:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018b16:	ef                   	out    dx,eax
c0018b17:	eb 2f                	jmp    c0018b48 <Vm::faultHandler(regs*)+0xdcb>
c0018b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b1c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018b1f:	0f b7 c0             	movzx  eax,ax
c0018b22:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018b25:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018b28:	0f b7 d2             	movzx  edx,dx
c0018b2b:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0018b32:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0018b39:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0018b3f:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0018b46:	66 ef                	out    dx,ax
c0018b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b4e:	8d 50 01             	lea    edx,[eax+0x1]
c0018b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b57:	b0 01                	mov    al,0x1
c0018b59:	e9 b9 00 00 00       	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018b5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b61:	83 c0 05             	add    eax,0x5
c0018b64:	8a 00                	mov    al,BYTE PTR [eax]
c0018b66:	0f b6 c0             	movzx  eax,al
c0018b69:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018b6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b72:	83 c0 04             	add    eax,0x4
c0018b75:	8a 00                	mov    al,BYTE PTR [eax]
c0018b77:	0f b6 f8             	movzx  edi,al
c0018b7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b7d:	83 c0 03             	add    eax,0x3
c0018b80:	8a 00                	mov    al,BYTE PTR [eax]
c0018b82:	0f b6 f0             	movzx  esi,al
c0018b85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b88:	83 c0 02             	add    eax,0x2
c0018b8b:	8a 00                	mov    al,BYTE PTR [eax]
c0018b8d:	0f b6 d8             	movzx  ebx,al
c0018b90:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b93:	83 c0 01             	add    eax,0x1
c0018b96:	8a 00                	mov    al,BYTE PTR [eax]
c0018b98:	0f b6 c8             	movzx  ecx,al
c0018b9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b9e:	8a 00                	mov    al,BYTE PTR [eax]
c0018ba0:	0f b6 d0             	movzx  edx,al
c0018ba3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0018ba8:	0f b6 c0             	movzx  eax,al
c0018bab:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018bb1:	57                   	push   edi
c0018bb2:	56                   	push   esi
c0018bb3:	53                   	push   ebx
c0018bb4:	51                   	push   ecx
c0018bb5:	52                   	push   edx
c0018bb6:	50                   	push   eax
c0018bb7:	68 70 55 02 c0       	push   0xc0025570
c0018bbc:	e8 bb e3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018bc1:	83 c4 20             	add    esp,0x20
c0018bc4:	83 ec 0c             	sub    esp,0xc
c0018bc7:	6a 60                	push   0x60
c0018bc9:	e8 27 e6 ff ff       	call   c00171f5 <Vm::inbv(unsigned short)>
c0018bce:	83 c4 10             	add    esp,0x10
c0018bd1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018bd4:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018bd8:	83 f8 1c             	cmp    eax,0x1c
c0018bdb:	74 09                	je     c0018be6 <Vm::faultHandler(regs*)+0xe69>
c0018bdd:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018be1:	83 f8 5a             	cmp    eax,0x5a
c0018be4:	75 24                	jne    c0018c0a <Vm::faultHandler(regs*)+0xe8d>
c0018be6:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018bea:	83 f8 1c             	cmp    eax,0x1c
c0018bed:	74 09                	je     c0018bf8 <Vm::faultHandler(regs*)+0xe7b>
c0018bef:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018bf3:	83 f8 5a             	cmp    eax,0x5a
c0018bf6:	75 15                	jne    c0018c0d <Vm::faultHandler(regs*)+0xe90>
c0018bf8:	83 ec 0c             	sub    esp,0xc
c0018bfb:	6a 60                	push   0x60
c0018bfd:	e8 f3 e5 ff ff       	call   c00171f5 <Vm::inbv(unsigned short)>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018c08:	eb dc                	jmp    c0018be6 <Vm::faultHandler(regs*)+0xe69>
c0018c0a:	90                   	nop
c0018c0b:	eb b7                	jmp    c0018bc4 <Vm::faultHandler(regs*)+0xe47>
c0018c0d:	90                   	nop
c0018c0e:	b0 00                	mov    al,0x0
c0018c10:	eb 05                	jmp    c0018c17 <Vm::faultHandler(regs*)+0xe9a>
c0018c12:	e9 3d f2 ff ff       	jmp    c0017e54 <Vm::faultHandler(regs*)+0xd7>
c0018c17:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018c1a:	5b                   	pop    ebx
c0018c1b:	5e                   	pop    esi
c0018c1c:	5f                   	pop    edi
c0018c1d:	5d                   	pop    ebp
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <IOAPIC::close(int, int, void*)>:
c0018c20:	b8 00 00 00 00       	mov    eax,0x0
c0018c25:	c3                   	ret    

c0018c26 <apicGetBase()>:
c0018c26:	55                   	push   ebp
c0018c27:	89 e5                	mov    ebp,esp
c0018c29:	83 ec 18             	sub    esp,0x18
c0018c2c:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0018c31:	83 e0 08             	and    eax,0x8
c0018c34:	0f b6 c0             	movzx  eax,al
c0018c37:	85 c0                	test   eax,eax
c0018c39:	75 07                	jne    c0018c42 <apicGetBase()+0x1c>
c0018c3b:	b8 00 00 00 00       	mov    eax,0x0
c0018c40:	eb 1b                	jmp    c0018c5d <apicGetBase()+0x37>
c0018c42:	83 ec 0c             	sub    esp,0xc
c0018c45:	6a 1b                	push   0x1b
c0018c47:	e8 61 15 00 00       	call   c001a1ad <x86rdmsr(unsigned int)>
c0018c4c:	83 c4 10             	add    esp,0x10
c0018c4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018c52:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018c55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c58:	25 00 00 ff ff       	and    eax,0xffff0000
c0018c5d:	c9                   	leave  
c0018c5e:	c3                   	ret    
c0018c5f:	90                   	nop

c0018c60 <IOAPIC::IOAPIC()>:
c0018c60:	83 ec 0c             	sub    esp,0xc
c0018c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c67:	83 ec 08             	sub    esp,0x8
c0018c6a:	68 30 59 02 c0       	push   0xc0025930
c0018c6f:	50                   	push   eax
c0018c70:	e8 41 0f ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	ba 50 59 02 c0       	mov    edx,0xc0025950
c0018c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c81:	89 10                	mov    DWORD PTR [eax],edx
c0018c83:	90                   	nop
c0018c84:	83 c4 0c             	add    esp,0xc
c0018c87:	c3                   	ret    

c0018c88 <apicOpen()>:
c0018c88:	55                   	push   ebp
c0018c89:	89 e5                	mov    ebp,esp
c0018c8b:	53                   	push   ebx
c0018c8c:	83 ec 34             	sub    esp,0x34
c0018c8f:	83 ec 0c             	sub    esp,0xc
c0018c92:	68 38 59 02 c0       	push   0xc0025938
c0018c97:	e8 e0 e2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	a0 00 d4 02 c0       	mov    al,ds:0xc002d400
c0018ca4:	83 f0 01             	xor    eax,0x1
c0018ca7:	0f b6 c0             	movzx  eax,al
c0018caa:	85 c0                	test   eax,eax
c0018cac:	0f 84 a3 00 00 00    	je     c0018d55 <apicOpen()+0xcd>
c0018cb2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018cb6:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0018cbb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018cbf:	0f b6 c0             	movzx  eax,al
c0018cc2:	39 c2                	cmp    edx,eax
c0018cc4:	0f 83 84 00 00 00    	jae    c0018d4e <apicOpen()+0xc6>
c0018cca:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018cd1:	83 ec 0c             	sub    esp,0xc
c0018cd4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018cd7:	e8 6f 6b ff ff       	call   c000f84b <malloc>
c0018cdc:	83 c4 10             	add    esp,0x10
c0018cdf:	89 c3                	mov    ebx,eax
c0018ce1:	83 ec 0c             	sub    esp,0xc
c0018ce4:	53                   	push   ebx
c0018ce5:	e8 76 ff ff ff       	call   c0018c60 <IOAPIC::IOAPIC()>
c0018cea:	83 c4 10             	add    esp,0x10
c0018ced:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018cf0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018cf4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018cf7:	89 14 85 e0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c20],edx
c0018cfe:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c0018d03:	83 c0 01             	add    eax,0x1
c0018d06:	a3 c0 d3 02 c0       	mov    ds:0xc002d3c0,eax
c0018d0b:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0018d10:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018d16:	83 ec 08             	sub    esp,0x8
c0018d19:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018d1c:	50                   	push   eax
c0018d1d:	e8 32 0d ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018d22:	83 c4 10             	add    esp,0x10
c0018d25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2a:	83 c0 08             	add    eax,0x8
c0018d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018d33:	6a 00                	push   0x0
c0018d35:	6a 00                	push   0x0
c0018d37:	52                   	push   edx
c0018d38:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018d3b:	ff d0                	call   eax
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018d43:	83 c0 01             	add    eax,0x1
c0018d46:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018d49:	e9 68 ff ff ff       	jmp    c0018cb6 <apicOpen()+0x2e>
c0018d4e:	c6 05 00 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d400,0x1
c0018d55:	e8 cc fe ff ff       	call   c0018c26 <apicGetBase()>
c0018d5a:	05 f0 00 00 00       	add    eax,0xf0
c0018d5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018d62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018d6a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018d71:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018d78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018d7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018d7e:	89 10                	mov    DWORD PTR [eax],edx
c0018d80:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018d87:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018d8c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018d8f:	7d 7c                	jge    c0018e0d <apicOpen()+0x185>
c0018d91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d94:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018d9b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018d9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018da1:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018da8:	c1 e8 08             	shr    eax,0x8
c0018dab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018daf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018db2:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018db9:	c1 e8 18             	shr    eax,0x18
c0018dbc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018dbf:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018dc3:	3d ff 00 00 00       	cmp    eax,0xff
c0018dc8:	75 3a                	jne    c0018e04 <apicOpen()+0x17c>
c0018dca:	e8 57 fe ff ff       	call   c0018c26 <apicGetBase()>
c0018dcf:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018dd3:	83 fa 01             	cmp    edx,0x1
c0018dd6:	75 07                	jne    c0018ddf <apicOpen()+0x157>
c0018dd8:	ba 60 03 00 00       	mov    edx,0x360
c0018ddd:	eb 05                	jmp    c0018de4 <apicOpen()+0x15c>
c0018ddf:	ba 50 03 00 00       	mov    edx,0x350
c0018de4:	01 d0                	add    eax,edx
c0018de6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018de9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018df1:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018df8:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018dfc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018dff:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018e02:	89 10                	mov    DWORD PTR [eax],edx
c0018e04:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018e08:	e9 7a ff ff ff       	jmp    c0018d87 <apicOpen()+0xff>
c0018e0d:	90                   	nop
c0018e0e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018e11:	c9                   	leave  
c0018e12:	c3                   	ret    
c0018e13:	90                   	nop

c0018e14 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018e14:	55                   	push   ebp
c0018e15:	89 e5                	mov    ebp,esp
c0018e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e20:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018e23:	72 1d                	jb     c0018e42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e28:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e31:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018e37:	01 d0                	add    eax,edx
c0018e39:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018e3c:	73 04                	jae    c0018e42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018e3e:	b0 01                	mov    al,0x1
c0018e40:	eb 02                	jmp    c0018e44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018e42:	b0 00                	mov    al,0x0
c0018e44:	5d                   	pop    ebp
c0018e45:	c3                   	ret    

c0018e46 <IOAPIC::read(int)>:
c0018e46:	55                   	push   ebp
c0018e47:	89 e5                	mov    ebp,esp
c0018e49:	83 ec 10             	sub    esp,0x10
c0018e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018e58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018e5b:	0f b6 d0             	movzx  edx,al
c0018e5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018e61:	89 10                	mov    DWORD PTR [eax],edx
c0018e63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018e66:	83 c0 10             	add    eax,0x10
c0018e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e6b:	c9                   	leave  
c0018e6c:	c3                   	ret    
c0018e6d:	90                   	nop

c0018e6e <IOAPIC::open(int, int, void*)>:
c0018e6e:	55                   	push   ebp
c0018e6f:	89 e5                	mov    ebp,esp
c0018e71:	57                   	push   edi
c0018e72:	56                   	push   esi
c0018e73:	53                   	push   ebx
c0018e74:	83 ec 04             	sub    esp,0x4
c0018e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018e7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e86:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018e8c:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e96:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ea5:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eb8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ec1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018ec7:	0f b6 f0             	movzx  esi,al
c0018eca:	89 d0                	mov    eax,edx
c0018ecc:	ba 00 00 00 00       	mov    edx,0x0
c0018ed1:	89 c7                	mov    edi,eax
c0018ed3:	83 e7 ff             	and    edi,0xffffffff
c0018ed6:	89 f9                	mov    ecx,edi
c0018ed8:	0f b6 da             	movzx  ebx,dl
c0018edb:	89 c8                	mov    eax,ecx
c0018edd:	89 da                	mov    edx,ebx
c0018edf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018ee2:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018ee5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018ee9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018eed:	83 e0 00             	and    eax,0x0
c0018ef0:	09 d0                	or     eax,edx
c0018ef2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ef9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018eff:	8d 50 01             	lea    edx,[eax+0x1]
c0018f02:	88 d1                	mov    cl,dl
c0018f04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018f07:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018f0d:	0f b6 d0             	movzx  edx,al
c0018f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f13:	83 c2 08             	add    edx,0x8
c0018f16:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018f1a:	0f b6 c9             	movzx  ecx,cl
c0018f1d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018f23:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018f27:	6a 01                	push   0x1
c0018f29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018f2c:	e8 15 ff ff ff       	call   c0018e46 <IOAPIC::read(int)>
c0018f31:	83 c4 08             	add    esp,0x8
c0018f34:	c1 f8 10             	sar    eax,0x10
c0018f37:	0f b6 c0             	movzx  eax,al
c0018f3a:	8d 50 01             	lea    edx,[eax+0x1]
c0018f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f40:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018f46:	b8 00 00 00 00       	mov    eax,0x0
c0018f4b:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018f4e:	5b                   	pop    ebx
c0018f4f:	5e                   	pop    esi
c0018f50:	5f                   	pop    edi
c0018f51:	5d                   	pop    ebp
c0018f52:	c3                   	ret    
c0018f53:	90                   	nop

c0018f54 <IOAPIC::write(int, int)>:
c0018f54:	55                   	push   ebp
c0018f55:	89 e5                	mov    ebp,esp
c0018f57:	83 ec 10             	sub    esp,0x10
c0018f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018f66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018f69:	0f b6 d0             	movzx  edx,al
c0018f6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018f6f:	89 10                	mov    DWORD PTR [eax],edx
c0018f71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018f74:	8d 50 10             	lea    edx,[eax+0x10]
c0018f77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018f7a:	89 02                	mov    DWORD PTR [edx],eax
c0018f7c:	90                   	nop
c0018f7d:	c9                   	leave  
c0018f7e:	c3                   	ret    
c0018f7f:	90                   	nop

c0018f80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018f80:	55                   	push   ebp
c0018f81:	89 e5                	mov    ebp,esp
c0018f83:	53                   	push   ebx
c0018f84:	83 ec 2c             	sub    esp,0x2c
c0018f87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018f8a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018f8d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018f90:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018f93:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018f96:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018f99:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018f9c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018f9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018fa2:	88 d8                	mov    al,bl
c0018fa4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018fa7:	88 c8                	mov    al,cl
c0018fa9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018fac:	88 d0                	mov    al,dl
c0018fae:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018fb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018fb5:	83 c0 08             	add    eax,0x8
c0018fb8:	01 c0                	add    eax,eax
c0018fba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018fbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018fc1:	83 c0 08             	add    eax,0x8
c0018fc4:	01 c0                	add    eax,eax
c0018fc6:	83 c0 01             	add    eax,0x1
c0018fc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018fcc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018fcf:	50                   	push   eax
c0018fd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018fd3:	e8 6e fe ff ff       	call   c0018e46 <IOAPIC::read(int)>
c0018fd8:	83 c4 08             	add    esp,0x8
c0018fdb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018fde:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018fe5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018fe8:	c1 e0 18             	shl    eax,0x18
c0018feb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018fee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018ff1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018ff4:	52                   	push   edx
c0018ff5:	50                   	push   eax
c0018ff6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018ff9:	e8 56 ff ff ff       	call   c0018f54 <IOAPIC::write(int, int)>
c0018ffe:	83 c4 0c             	add    esp,0xc
c0019001:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019004:	50                   	push   eax
c0019005:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019008:	e8 39 fe ff ff       	call   c0018e46 <IOAPIC::read(int)>
c001900d:	83 c4 08             	add    esp,0x8
c0019010:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019013:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001901a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0019021:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019028:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001902c:	85 c0                	test   eax,eax
c001902e:	74 09                	je     c0019039 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0019030:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019037:	eb 07                	jmp    c0019040 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019039:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0019040:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019044:	85 c0                	test   eax,eax
c0019046:	74 09                	je     c0019051 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019048:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001904f:	eb 07                	jmp    c0019058 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0019051:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019058:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001905f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019063:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019069:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001906c:	52                   	push   edx
c001906d:	50                   	push   eax
c001906e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019071:	e8 de fe ff ff       	call   c0018f54 <IOAPIC::write(int, int)>
c0019076:	83 c4 0c             	add    esp,0xc
c0019079:	90                   	nop
c001907a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001907d:	c9                   	leave  
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <noCopro(unsigned long)>:
c0019080:	c3                   	ret    

c0019081 <HalRestart()>:
c0019081:	e4 64                	in     al,0x64
c0019083:	a8 02                	test   al,0x2
c0019085:	75 fa                	jne    c0019081 <HalRestart()>
c0019087:	b0 fe                	mov    al,0xfe
c0019089:	e6 64                	out    0x64,al
c001908b:	c3                   	ret    

c001908c <HalShutdown()>:
c001908c:	c3                   	ret    

c001908d <HalSleep()>:
c001908d:	c3                   	ret    

c001908e <CPU::close(int, int, void*)>:
c001908e:	31 c0                	xor    eax,eax
c0019090:	c3                   	ret    

c0019091 <x86ReadCMOS(unsigned char)>:
c0019091:	83 ec 14             	sub    esp,0x14
c0019094:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019098:	88 04 24             	mov    BYTE PTR [esp],al
c001909b:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c00190a0:	0f b6 c0             	movzx  eax,al
c00190a3:	85 c0                	test   eax,eax
c00190a5:	74 04                	je     c00190ab <x86ReadCMOS(unsigned char)+0x1a>
c00190a7:	b2 00                	mov    dl,0x0
c00190a9:	eb 02                	jmp    c00190ad <x86ReadCMOS(unsigned char)+0x1c>
c00190ab:	b2 80                	mov    dl,0x80
c00190ad:	8a 04 24             	mov    al,BYTE PTR [esp]
c00190b0:	09 d0                	or     eax,edx
c00190b2:	0f b6 c0             	movzx  eax,al
c00190b5:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00190bc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00190c0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00190c4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00190c9:	ee                   	out    dx,al
c00190ca:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00190d1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00190d6:	89 c2                	mov    edx,eax
c00190d8:	ec                   	in     al,dx
c00190d9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190dd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190e1:	83 c4 14             	add    esp,0x14
c00190e4:	c3                   	ret    

c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>:
c00190e5:	83 ec 18             	sub    esp,0x18
c00190e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00190f0:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00190f4:	88 04 24             	mov    BYTE PTR [esp],al
c00190f7:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c00190fc:	0f b6 c0             	movzx  eax,al
c00190ff:	85 c0                	test   eax,eax
c0019101:	74 04                	je     c0019107 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0019103:	b2 00                	mov    dl,0x0
c0019105:	eb 02                	jmp    c0019109 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019107:	b2 80                	mov    dl,0x80
c0019109:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001910d:	09 d0                	or     eax,edx
c001910f:	0f b6 c0             	movzx  eax,al
c0019112:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019119:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001911d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019121:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019126:	ee                   	out    dx,al
c0019127:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001912b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019132:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019136:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001913a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001913f:	ee                   	out    dx,al
c0019140:	90                   	nop
c0019141:	83 c4 18             	add    esp,0x18
c0019144:	c3                   	ret    

c0019145 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019145:	60                   	pusha  
c0019146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001914a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001914e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019152:	9c                   	pushf  
c0019153:	fa                   	cli    
c0019154:	0f 09                	wbinvd 
c0019156:	0f 30                	wrmsr  
c0019158:	9d                   	popf   
c0019159:	89 c2                	mov    edx,eax
c001915b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001915f:	89 10                	mov    DWORD PTR [eax],edx
c0019161:	61                   	popa   
c0019162:	90                   	nop
c0019163:	c3                   	ret    

c0019164 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019164:	60                   	pusha  
c0019165:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019169:	89 c1                	mov    ecx,eax
c001916b:	9c                   	pushf  
c001916c:	fa                   	cli    
c001916d:	0f 09                	wbinvd 
c001916f:	31 c0                	xor    eax,eax
c0019171:	31 d2                	xor    edx,edx
c0019173:	0f 32                	rdmsr  
c0019175:	9d                   	popf   
c0019176:	89 c2                	mov    edx,eax
c0019178:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001917c:	89 10                	mov    DWORD PTR [eax],edx
c001917e:	61                   	popa   
c001917f:	90                   	nop
c0019180:	c3                   	ret    

c0019181 <AMD_K6_writeback(int, int, int)>:
c0019181:	83 ec 20             	sub    esp,0x20
c0019184:	a1 70 d1 02 c0       	mov    eax,ds:0xc002d170
c0019189:	c1 e8 14             	shr    eax,0x14
c001918c:	c1 e8 02             	shr    eax,0x2
c001918f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019193:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019198:	0f 85 9e 00 00 00    	jne    c001923c <AMD_K6_writeback(int, int, int)+0xbb>
c001919e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00191a6:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00191ab:	75 19                	jne    c00191c6 <AMD_K6_writeback(int, int, int)+0x45>
c00191ad:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00191b2:	7f 0a                	jg     c00191be <AMD_K6_writeback(int, int, int)+0x3d>
c00191b4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00191bc:	eb 08                	jmp    c00191c6 <AMD_K6_writeback(int, int, int)+0x45>
c00191be:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00191c6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00191cb:	7c 6e                	jl     c001923b <AMD_K6_writeback(int, int, int)+0xba>
c00191cd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00191d2:	7e 09                	jle    c00191dd <AMD_K6_writeback(int, int, int)+0x5c>
c00191d4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00191d9:	74 36                	je     c0019211 <AMD_K6_writeback(int, int, int)+0x90>
c00191db:	eb 5e                	jmp    c001923b <AMD_K6_writeback(int, int, int)+0xba>
c00191dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191e1:	50                   	push   eax
c00191e2:	68 82 00 00 c0       	push   0xc0000082
c00191e7:	e8 78 ff ff ff       	call   c0019164 <AMD_K6_read_msr(unsigned int, REGS*)>
c00191ec:	83 c4 08             	add    esp,0x8
c00191ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191f3:	01 c0                	add    eax,eax
c00191f5:	83 e0 7f             	and    eax,0x7f
c00191f8:	89 c2                	mov    edx,eax
c00191fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191fe:	50                   	push   eax
c00191ff:	6a 00                	push   0x0
c0019201:	52                   	push   edx
c0019202:	68 82 00 00 c0       	push   0xc0000082
c0019207:	e8 39 ff ff ff       	call   c0019145 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	eb 2b                	jmp    c001923c <AMD_K6_writeback(int, int, int)+0xbb>
c0019211:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019215:	50                   	push   eax
c0019216:	68 82 00 00 c0       	push   0xc0000082
c001921b:	e8 44 ff ff ff       	call   c0019164 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019220:	83 c4 08             	add    esp,0x8
c0019223:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019227:	50                   	push   eax
c0019228:	6a 00                	push   0x0
c001922a:	6a 00                	push   0x0
c001922c:	68 82 00 00 c0       	push   0xc0000082
c0019231:	e8 0f ff ff ff       	call   c0019145 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	eb 01                	jmp    c001923c <AMD_K6_writeback(int, int, int)+0xbb>
c001923b:	90                   	nop
c001923c:	90                   	nop
c001923d:	83 c4 20             	add    esp,0x20
c0019240:	c3                   	ret    

c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019241:	56                   	push   esi
c0019242:	53                   	push   ebx
c0019243:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0019248:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001924c:	75 32                	jne    c0019280 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001924e:	8b 15 20 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d420
c0019254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019258:	89 10                	mov    DWORD PTR [eax],edx
c001925a:	8b 15 1c d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d41c
c0019260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019264:	89 10                	mov    DWORD PTR [eax],edx
c0019266:	8b 15 18 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d418
c001926c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019270:	89 10                	mov    DWORD PTR [eax],edx
c0019272:	8b 15 14 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d414
c0019278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001927c:	89 10                	mov    DWORD PTR [eax],edx
c001927e:	eb 5c                	jmp    c00192dc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019284:	ba 00 00 00 00       	mov    edx,0x0
c0019289:	89 d1                	mov    ecx,edx
c001928b:	0f a2                	cpuid  
c001928d:	89 c6                	mov    esi,eax
c001928f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019293:	89 30                	mov    DWORD PTR [eax],esi
c0019295:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019299:	89 18                	mov    DWORD PTR [eax],ebx
c001929b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001929f:	89 08                	mov    DWORD PTR [eax],ecx
c00192a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192a5:	89 10                	mov    DWORD PTR [eax],edx
c00192a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192ab:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c00192b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00192b6:	a3 20 d4 02 c0       	mov    ds:0xc002d420,eax
c00192bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00192c1:	a3 1c d4 02 c0       	mov    ds:0xc002d41c,eax
c00192c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00192cc:	a3 18 d4 02 c0       	mov    ds:0xc002d418,eax
c00192d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00192d7:	a3 14 d4 02 c0       	mov    ds:0xc002d414,eax
c00192dc:	5b                   	pop    ebx
c00192dd:	5e                   	pop    esi
c00192de:	c3                   	ret    

c00192df <cpuidCheckEDX(unsigned int)>:
c00192df:	83 ec 10             	sub    esp,0x10
c00192e2:	89 e0                	mov    eax,esp
c00192e4:	50                   	push   eax
c00192e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192e9:	50                   	push   eax
c00192ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192ee:	50                   	push   eax
c00192ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192f3:	50                   	push   eax
c00192f4:	6a 01                	push   0x1
c00192f6:	e8 46 ff ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192fb:	83 c4 14             	add    esp,0x14
c00192fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019301:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019305:	0f 95 c0             	setne  al
c0019308:	83 c4 10             	add    esp,0x10
c001930b:	c3                   	ret    

c001930c <cpuidCheckECX(unsigned int)>:
c001930c:	83 ec 10             	sub    esp,0x10
c001930f:	89 e0                	mov    eax,esp
c0019311:	50                   	push   eax
c0019312:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019316:	50                   	push   eax
c0019317:	8d 44 24 10          	lea    eax,[esp+0x10]
c001931b:	50                   	push   eax
c001931c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019320:	50                   	push   eax
c0019321:	6a 01                	push   0x1
c0019323:	e8 19 ff ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019328:	83 c4 14             	add    esp,0x14
c001932b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001932f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019333:	0f 95 c0             	setne  al
c0019336:	83 c4 10             	add    esp,0x10
c0019339:	c3                   	ret    

c001933a <cpuidCheckExtendedEBX(unsigned int)>:
c001933a:	83 ec 10             	sub    esp,0x10
c001933d:	89 e0                	mov    eax,esp
c001933f:	50                   	push   eax
c0019340:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019344:	50                   	push   eax
c0019345:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019349:	50                   	push   eax
c001934a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001934e:	50                   	push   eax
c001934f:	6a 07                	push   0x7
c0019351:	e8 eb fe ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019356:	83 c4 14             	add    esp,0x14
c0019359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001935d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019361:	0f 95 c0             	setne  al
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	c3                   	ret    

c0019368 <cpuidCheckExtendedECX(unsigned int)>:
c0019368:	83 ec 10             	sub    esp,0x10
c001936b:	89 e0                	mov    eax,esp
c001936d:	50                   	push   eax
c001936e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019372:	50                   	push   eax
c0019373:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019377:	50                   	push   eax
c0019378:	8d 44 24 18          	lea    eax,[esp+0x18]
c001937c:	50                   	push   eax
c001937d:	6a 07                	push   0x7
c001937f:	e8 bd fe ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019384:	83 c4 14             	add    esp,0x14
c0019387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001938b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001938f:	0f 95 c0             	setne  al
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	c3                   	ret    

c0019396 <HalDetectFeatures()>:
c0019396:	57                   	push   edi
c0019397:	56                   	push   esi
c0019398:	53                   	push   ebx
c0019399:	81 ec 90 00 00 00    	sub    esp,0x90
c001939f:	83 ec 04             	sub    esp,0x4
c00193a2:	6a 08                	push   0x8
c00193a4:	6a 00                	push   0x0
c00193a6:	68 4c d4 02 c0       	push   0xc002d44c
c00193ab:	e8 40 71 fe ff       	call   c00004f0 <memset>
c00193b0:	83 c4 10             	add    esp,0x10
c00193b3:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00193b8:	83 c8 04             	or     eax,0x4
c00193bb:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00193c0:	83 ec 0c             	sub    esp,0xc
c00193c3:	68 74 59 02 c0       	push   0xc0025974
c00193c8:	e8 af db fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00193cd:	83 c4 10             	add    esp,0x10
c00193d0:	e8 24 6e fe ff       	call   c00001f9 <detectCPUID>
c00193d5:	85 c0                	test   eax,eax
c00193d7:	0f 95 c0             	setne  al
c00193da:	83 e0 01             	and    eax,0x1
c00193dd:	83 e0 01             	and    eax,0x1
c00193e0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00193e3:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00193e8:	83 e0 fd             	and    eax,0xfffffffd
c00193eb:	88 c2                	mov    dl,al
c00193ed:	88 c8                	mov    al,cl
c00193ef:	09 d0                	or     eax,edx
c00193f1:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00193f6:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00193fb:	83 e0 02             	and    eax,0x2
c00193fe:	0f b6 c0             	movzx  eax,al
c0019401:	85 c0                	test   eax,eax
c0019403:	0f 84 84 02 00 00    	je     c001968d <HalDetectFeatures()+0x2f7>
c0019409:	83 ec 0c             	sub    esp,0xc
c001940c:	6a 20                	push   0x20
c001940e:	e8 cc fe ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	83 e0 01             	and    eax,0x1
c0019419:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019420:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019425:	83 e0 f7             	and    eax,0xfffffff7
c0019428:	88 c2                	mov    dl,al
c001942a:	88 c8                	mov    al,cl
c001942c:	09 d0                	or     eax,edx
c001942e:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019433:	83 ec 0c             	sub    esp,0xc
c0019436:	68 00 00 00 04       	push   0x4000000
c001943b:	e8 9f fe ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	89 c1                	mov    ecx,eax
c0019445:	83 e1 01             	and    ecx,0x1
c0019448:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001944d:	83 e0 fe             	and    eax,0xfffffffe
c0019450:	88 c2                	mov    dl,al
c0019452:	88 c8                	mov    al,cl
c0019454:	09 d0                	or     eax,edx
c0019456:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c001945b:	83 ec 0c             	sub    esp,0xc
c001945e:	68 80 00 00 00       	push   0x80
c0019463:	e8 77 fe ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	89 c1                	mov    ecx,eax
c001946d:	c1 e1 07             	shl    ecx,0x7
c0019470:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019475:	83 e0 7f             	and    eax,0x7f
c0019478:	88 c2                	mov    dl,al
c001947a:	88 c8                	mov    al,cl
c001947c:	09 d0                	or     eax,edx
c001947e:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019483:	83 ec 0c             	sub    esp,0xc
c0019486:	68 00 00 80 00       	push   0x800000
c001948b:	e8 4f fe ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	83 e0 01             	and    eax,0x1
c0019496:	89 c1                	mov    ecx,eax
c0019498:	c1 e1 05             	shl    ecx,0x5
c001949b:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00194a0:	83 e0 df             	and    eax,0xffffffdf
c00194a3:	88 c2                	mov    dl,al
c00194a5:	88 c8                	mov    al,cl
c00194a7:	09 d0                	or     eax,edx
c00194a9:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00194ae:	83 ec 0c             	sub    esp,0xc
c00194b1:	6a 01                	push   0x1
c00194b3:	e8 b4 3d ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	0f b6 c0             	movzx  eax,al
c00194be:	85 c0                	test   eax,eax
c00194c0:	75 17                	jne    c00194d9 <HalDetectFeatures()+0x143>
c00194c2:	83 ec 0c             	sub    esp,0xc
c00194c5:	68 00 04 00 00       	push   0x400
c00194ca:	e8 9d 3d ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00194cf:	83 c4 10             	add    esp,0x10
c00194d2:	0f b6 c0             	movzx  eax,al
c00194d5:	85 c0                	test   eax,eax
c00194d7:	74 04                	je     c00194dd <HalDetectFeatures()+0x147>
c00194d9:	b0 01                	mov    al,0x1
c00194db:	eb 02                	jmp    c00194df <HalDetectFeatures()+0x149>
c00194dd:	b0 00                	mov    al,0x0
c00194df:	0f b6 c0             	movzx  eax,al
c00194e2:	85 c0                	test   eax,eax
c00194e4:	74 0f                	je     c00194f5 <HalDetectFeatures()+0x15f>
c00194e6:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00194eb:	83 e0 fe             	and    eax,0xfffffffe
c00194ee:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00194f3:	eb 28                	jmp    c001951d <HalDetectFeatures()+0x187>
c00194f5:	83 ec 0c             	sub    esp,0xc
c00194f8:	68 00 02 00 00       	push   0x200
c00194fd:	e8 dd fd ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019502:	83 c4 10             	add    esp,0x10
c0019505:	89 c1                	mov    ecx,eax
c0019507:	83 e1 01             	and    ecx,0x1
c001950a:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001950f:	83 e0 fe             	and    eax,0xfffffffe
c0019512:	88 c2                	mov    dl,al
c0019514:	88 c8                	mov    al,cl
c0019516:	09 d0                	or     eax,edx
c0019518:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001951d:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019522:	83 e0 01             	and    eax,0x1
c0019525:	0f b6 c0             	movzx  eax,al
c0019528:	85 c0                	test   eax,eax
c001952a:	74 1c                	je     c0019548 <HalDetectFeatures()+0x1b2>
c001952c:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019531:	83 e0 08             	and    eax,0x8
c0019534:	0f b6 c0             	movzx  eax,al
c0019537:	85 c0                	test   eax,eax
c0019539:	75 0d                	jne    c0019548 <HalDetectFeatures()+0x1b2>
c001953b:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019540:	83 e0 fe             	and    eax,0xfffffffe
c0019543:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019548:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019550:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019558:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019560:	85 c0                	test   eax,eax
c0019562:	0f 84 ab 00 00 00    	je     c0019613 <HalDetectFeatures()+0x27d>
c0019568:	83 ec 0c             	sub    esp,0xc
c001956b:	6a 01                	push   0x1
c001956d:	e8 9a fd ff ff       	call   c001930c <cpuidCheckECX(unsigned int)>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	83 e0 01             	and    eax,0x1
c0019578:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001957b:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019580:	83 e0 fd             	and    eax,0xfffffffd
c0019583:	88 c2                	mov    dl,al
c0019585:	88 c8                	mov    al,cl
c0019587:	09 d0                	or     eax,edx
c0019589:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c001958e:	83 ec 0c             	sub    esp,0xc
c0019591:	68 00 02 00 00       	push   0x200
c0019596:	e8 71 fd ff ff       	call   c001930c <cpuidCheckECX(unsigned int)>
c001959b:	83 c4 10             	add    esp,0x10
c001959e:	83 e0 01             	and    eax,0x1
c00195a1:	89 c1                	mov    ecx,eax
c00195a3:	c1 e1 04             	shl    ecx,0x4
c00195a6:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c00195ab:	83 e0 ef             	and    eax,0xffffffef
c00195ae:	88 c2                	mov    dl,al
c00195b0:	88 c8                	mov    al,cl
c00195b2:	09 d0                	or     eax,edx
c00195b4:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c00195b9:	83 ec 0c             	sub    esp,0xc
c00195bc:	68 00 00 08 00       	push   0x80000
c00195c1:	e8 46 fd ff ff       	call   c001930c <cpuidCheckECX(unsigned int)>
c00195c6:	83 c4 10             	add    esp,0x10
c00195c9:	83 e0 01             	and    eax,0x1
c00195cc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00195d3:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c00195d8:	83 e0 fb             	and    eax,0xfffffffb
c00195db:	88 c2                	mov    dl,al
c00195dd:	88 c8                	mov    al,cl
c00195df:	09 d0                	or     eax,edx
c00195e1:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c00195e6:	83 ec 0c             	sub    esp,0xc
c00195e9:	68 00 00 10 00       	push   0x100000
c00195ee:	e8 19 fd ff ff       	call   c001930c <cpuidCheckECX(unsigned int)>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	83 e0 01             	and    eax,0x1
c00195f9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019600:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019605:	83 e0 f7             	and    eax,0xfffffff7
c0019608:	88 c2                	mov    dl,al
c001960a:	88 c8                	mov    al,cl
c001960c:	09 d0                	or     eax,edx
c001960e:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019613:	83 ec 0c             	sub    esp,0xc
c0019616:	8d 44 24 24          	lea    eax,[esp+0x24]
c001961a:	50                   	push   eax
c001961b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001961f:	50                   	push   eax
c0019620:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019624:	50                   	push   eax
c0019625:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019629:	50                   	push   eax
c001962a:	68 00 00 00 80       	push   0x80000000
c001962f:	e8 0d fc ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019634:	83 c4 20             	add    esp,0x20
c0019637:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001963b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019640:	76 4b                	jbe    c001968d <HalDetectFeatures()+0x2f7>
c0019642:	83 ec 0c             	sub    esp,0xc
c0019645:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019649:	50                   	push   eax
c001964a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001964e:	50                   	push   eax
c001964f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019653:	50                   	push   eax
c0019654:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019658:	50                   	push   eax
c0019659:	68 01 00 00 80       	push   0x80000001
c001965e:	e8 de fb ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019663:	83 c4 20             	add    esp,0x20
c0019666:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001966b:	83 e0 bf             	and    eax,0xffffffbf
c001966e:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019673:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019678:	83 e0 fd             	and    eax,0xfffffffd
c001967b:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019680:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019685:	83 e0 fe             	and    eax,0xfffffffe
c0019688:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c001968d:	83 ec 0c             	sub    esp,0xc
c0019690:	68 00 04 00 00       	push   0x400
c0019695:	e8 d2 3b ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001969a:	83 c4 10             	add    esp,0x10
c001969d:	0f b6 c0             	movzx  eax,al
c00196a0:	85 c0                	test   eax,eax
c00196a2:	74 0d                	je     c00196b1 <HalDetectFeatures()+0x31b>
c00196a4:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00196a9:	83 e0 fb             	and    eax,0xfffffffb
c00196ac:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00196b1:	c6 05 48 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d448,0x1
c00196b8:	83 ec 04             	sub    esp,0x4
c00196bb:	6a 0d                	push   0xd
c00196bd:	6a 00                	push   0x0
c00196bf:	68 30 d4 02 c0       	push   0xc002d430
c00196c4:	e8 27 6e fe ff       	call   c00004f0 <memset>
c00196c9:	83 c4 10             	add    esp,0x10
c00196cc:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00196d1:	83 e0 02             	and    eax,0x2
c00196d4:	0f b6 c0             	movzx  eax,al
c00196d7:	85 c0                	test   eax,eax
c00196d9:	0f 84 16 08 00 00    	je     c0019ef5 <HalDetectFeatures()+0xb5f>
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	6a 10                	push   0x10
c00196e4:	e8 f6 fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	83 e0 01             	and    eax,0x1
c00196ef:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00196f6:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c00196fb:	83 e0 f7             	and    eax,0xfffffff7
c00196fe:	88 c2                	mov    dl,al
c0019700:	88 c8                	mov    al,cl
c0019702:	09 d0                	or     eax,edx
c0019704:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019709:	83 ec 0c             	sub    esp,0xc
c001970c:	6a 40                	push   0x40
c001970e:	e8 cc fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019713:	83 c4 10             	add    esp,0x10
c0019716:	83 e0 01             	and    eax,0x1
c0019719:	89 c1                	mov    ecx,eax
c001971b:	c1 e1 04             	shl    ecx,0x4
c001971e:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019723:	83 e0 ef             	and    eax,0xffffffef
c0019726:	88 c2                	mov    dl,al
c0019728:	88 c8                	mov    al,cl
c001972a:	09 d0                	or     eax,edx
c001972c:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	6a 08                	push   0x8
c0019736:	e8 a4 fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	83 e0 01             	and    eax,0x1
c0019741:	89 c1                	mov    ecx,eax
c0019743:	c1 e1 05             	shl    ecx,0x5
c0019746:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c001974b:	83 e0 df             	and    eax,0xffffffdf
c001974e:	88 c2                	mov    dl,al
c0019750:	88 c8                	mov    al,cl
c0019752:	09 d0                	or     eax,edx
c0019754:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019759:	83 ec 0c             	sub    esp,0xc
c001975c:	68 00 20 00 00       	push   0x2000
c0019761:	e8 79 fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019766:	83 c4 10             	add    esp,0x10
c0019769:	83 e0 01             	and    eax,0x1
c001976c:	89 c1                	mov    ecx,eax
c001976e:	c1 e1 06             	shl    ecx,0x6
c0019771:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019776:	83 e0 bf             	and    eax,0xffffffbf
c0019779:	88 c2                	mov    dl,al
c001977b:	88 c8                	mov    al,cl
c001977d:	09 d0                	or     eax,edx
c001977f:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	68 00 00 01 00       	push   0x10000
c001978c:	e8 4e fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	89 c1                	mov    ecx,eax
c0019796:	c1 e1 07             	shl    ecx,0x7
c0019799:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c001979e:	83 e0 7f             	and    eax,0x7f
c00197a1:	88 c2                	mov    dl,al
c00197a3:	88 c8                	mov    al,cl
c00197a5:	09 d0                	or     eax,edx
c00197a7:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c00197ac:	83 ec 0c             	sub    esp,0xc
c00197af:	6a 01                	push   0x1
c00197b1:	e8 29 fb ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c00197b6:	83 c4 10             	add    esp,0x10
c00197b9:	83 e0 01             	and    eax,0x1
c00197bc:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00197c3:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c00197c8:	83 e0 f7             	and    eax,0xfffffff7
c00197cb:	88 c2                	mov    dl,al
c00197cd:	88 c8                	mov    al,cl
c00197cf:	09 d0                	or     eax,edx
c00197d1:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c00197d6:	83 ec 0c             	sub    esp,0xc
c00197d9:	68 00 08 00 00       	push   0x800
c00197de:	e8 fc fa ff ff       	call   c00192df <cpuidCheckEDX(unsigned int)>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	89 c1                	mov    ecx,eax
c00197e8:	83 e1 01             	and    ecx,0x1
c00197eb:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c00197f0:	83 e0 fe             	and    eax,0xfffffffe
c00197f3:	88 c2                	mov    dl,al
c00197f5:	88 c8                	mov    al,cl
c00197f7:	09 d0                	or     eax,edx
c00197f9:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c00197fe:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019803:	83 e0 40             	and    eax,0x40
c0019806:	0f b6 c0             	movzx  eax,al
c0019809:	85 c0                	test   eax,eax
c001980b:	74 0a                	je     c0019817 <HalDetectFeatures()+0x481>
c001980d:	c7 05 28 d4 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d428,0x100
c0019817:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c001981c:	83 e0 80             	and    eax,0xffffff80
c001981f:	0f b6 c0             	movzx  eax,al
c0019822:	85 c0                	test   eax,eax
c0019824:	74 0a                	je     c0019830 <HalDetectFeatures()+0x49a>
c0019826:	c7 05 24 d4 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d424,0x80
c0019830:	83 ec 0c             	sub    esp,0xc
c0019833:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019837:	50                   	push   eax
c0019838:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001983c:	50                   	push   eax
c001983d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019841:	50                   	push   eax
c0019842:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019846:	50                   	push   eax
c0019847:	6a 00                	push   0x0
c0019849:	e8 f3 f9 ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001984e:	83 c4 20             	add    esp,0x20
c0019851:	c7 44 24 48 30 d4 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d430
c0019859:	8d 44 24 10          	lea    eax,[esp+0x10]
c001985d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019861:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019869:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001986d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019871:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019875:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019879:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001987d:	89 c6                	mov    esi,eax
c001987f:	89 d7                	mov    edi,edx
c0019881:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019883:	89 c8                	mov    eax,ecx
c0019885:	89 fa                	mov    edx,edi
c0019887:	89 f3                	mov    ebx,esi
c0019889:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001988d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019891:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019895:	b8 34 d4 02 c0       	mov    eax,0xc002d434
c001989a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001989e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00198a6:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00198ae:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00198b2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00198b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00198ba:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00198be:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00198c2:	89 c6                	mov    esi,eax
c00198c4:	89 d7                	mov    edi,edx
c00198c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198c8:	89 c8                	mov    eax,ecx
c00198ca:	89 fa                	mov    edx,edi
c00198cc:	89 f3                	mov    ebx,esi
c00198ce:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00198d2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00198d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00198da:	b8 38 d4 02 c0       	mov    eax,0xc002d438
c00198df:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00198e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00198ea:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00198ee:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00198f6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00198fd:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019901:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019905:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001990c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019910:	89 c6                	mov    esi,eax
c0019912:	89 d7                	mov    edi,edx
c0019914:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019916:	89 c8                	mov    eax,ecx
c0019918:	89 fa                	mov    edx,edi
c001991a:	89 f3                	mov    ebx,esi
c001991c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019920:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019924:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	68 89 59 02 c0       	push   0xc0025989
c0019930:	68 30 d4 02 c0       	push   0xc002d430
c0019935:	e8 16 6e fe ff       	call   c0000750 <strcmp>
c001993a:	83 c4 10             	add    esp,0x10
c001993d:	85 c0                	test   eax,eax
c001993f:	74 19                	je     c001995a <HalDetectFeatures()+0x5c4>
c0019941:	83 ec 08             	sub    esp,0x8
c0019944:	68 96 59 02 c0       	push   0xc0025996
c0019949:	68 30 d4 02 c0       	push   0xc002d430
c001994e:	e8 fd 6d fe ff       	call   c0000750 <strcmp>
c0019953:	83 c4 10             	add    esp,0x10
c0019956:	85 c0                	test   eax,eax
c0019958:	75 04                	jne    c001995e <HalDetectFeatures()+0x5c8>
c001995a:	b0 01                	mov    al,0x1
c001995c:	eb 02                	jmp    c0019960 <HalDetectFeatures()+0x5ca>
c001995e:	b0 00                	mov    al,0x0
c0019960:	0f b6 c0             	movzx  eax,al
c0019963:	85 c0                	test   eax,eax
c0019965:	74 0f                	je     c0019976 <HalDetectFeatures()+0x5e0>
c0019967:	c7 05 44 d4 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x2
c0019971:	e9 0d 03 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019976:	83 ec 08             	sub    esp,0x8
c0019979:	68 a3 59 02 c0       	push   0xc00259a3
c001997e:	68 30 d4 02 c0       	push   0xc002d430
c0019983:	e8 c8 6d fe ff       	call   c0000750 <strcmp>
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	85 c0                	test   eax,eax
c001998d:	74 19                	je     c00199a8 <HalDetectFeatures()+0x612>
c001998f:	83 ec 08             	sub    esp,0x8
c0019992:	68 b0 59 02 c0       	push   0xc00259b0
c0019997:	68 30 d4 02 c0       	push   0xc002d430
c001999c:	e8 af 6d fe ff       	call   c0000750 <strcmp>
c00199a1:	83 c4 10             	add    esp,0x10
c00199a4:	85 c0                	test   eax,eax
c00199a6:	75 04                	jne    c00199ac <HalDetectFeatures()+0x616>
c00199a8:	b0 01                	mov    al,0x1
c00199aa:	eb 02                	jmp    c00199ae <HalDetectFeatures()+0x618>
c00199ac:	b0 00                	mov    al,0x0
c00199ae:	0f b6 c0             	movzx  eax,al
c00199b1:	85 c0                	test   eax,eax
c00199b3:	74 0f                	je     c00199c4 <HalDetectFeatures()+0x62e>
c00199b5:	c7 05 44 d4 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x4
c00199bf:	e9 bf 02 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c00199c4:	83 ec 08             	sub    esp,0x8
c00199c7:	68 bd 59 02 c0       	push   0xc00259bd
c00199cc:	68 30 d4 02 c0       	push   0xc002d430
c00199d1:	e8 7a 6d fe ff       	call   c0000750 <strcmp>
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	85 c0                	test   eax,eax
c00199db:	74 19                	je     c00199f6 <HalDetectFeatures()+0x660>
c00199dd:	83 ec 08             	sub    esp,0x8
c00199e0:	68 ca 59 02 c0       	push   0xc00259ca
c00199e5:	68 30 d4 02 c0       	push   0xc002d430
c00199ea:	e8 61 6d fe ff       	call   c0000750 <strcmp>
c00199ef:	83 c4 10             	add    esp,0x10
c00199f2:	85 c0                	test   eax,eax
c00199f4:	75 04                	jne    c00199fa <HalDetectFeatures()+0x664>
c00199f6:	b0 01                	mov    al,0x1
c00199f8:	eb 02                	jmp    c00199fc <HalDetectFeatures()+0x666>
c00199fa:	b0 00                	mov    al,0x0
c00199fc:	0f b6 c0             	movzx  eax,al
c00199ff:	85 c0                	test   eax,eax
c0019a01:	74 0f                	je     c0019a12 <HalDetectFeatures()+0x67c>
c0019a03:	c7 05 44 d4 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x5
c0019a0d:	e9 71 02 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019a12:	83 ec 08             	sub    esp,0x8
c0019a15:	68 d7 59 02 c0       	push   0xc00259d7
c0019a1a:	68 30 d4 02 c0       	push   0xc002d430
c0019a1f:	e8 2c 6d fe ff       	call   c0000750 <strcmp>
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	85 c0                	test   eax,eax
c0019a29:	0f 94 c0             	sete   al
c0019a2c:	0f b6 c0             	movzx  eax,al
c0019a2f:	85 c0                	test   eax,eax
c0019a31:	74 0f                	je     c0019a42 <HalDetectFeatures()+0x6ac>
c0019a33:	c7 05 44 d4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x1
c0019a3d:	e9 41 02 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019a42:	83 ec 08             	sub    esp,0x8
c0019a45:	68 e4 59 02 c0       	push   0xc00259e4
c0019a4a:	68 30 d4 02 c0       	push   0xc002d430
c0019a4f:	e8 fc 6c fe ff       	call   c0000750 <strcmp>
c0019a54:	83 c4 10             	add    esp,0x10
c0019a57:	85 c0                	test   eax,eax
c0019a59:	0f 94 c0             	sete   al
c0019a5c:	0f b6 c0             	movzx  eax,al
c0019a5f:	85 c0                	test   eax,eax
c0019a61:	74 0f                	je     c0019a72 <HalDetectFeatures()+0x6dc>
c0019a63:	c7 05 44 d4 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x3
c0019a6d:	e9 11 02 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019a72:	83 ec 08             	sub    esp,0x8
c0019a75:	68 a3 59 02 c0       	push   0xc00259a3
c0019a7a:	68 30 d4 02 c0       	push   0xc002d430
c0019a7f:	e8 cc 6c fe ff       	call   c0000750 <strcmp>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	85 c0                	test   eax,eax
c0019a89:	0f 94 c0             	sete   al
c0019a8c:	0f b6 c0             	movzx  eax,al
c0019a8f:	85 c0                	test   eax,eax
c0019a91:	74 0f                	je     c0019aa2 <HalDetectFeatures()+0x70c>
c0019a93:	c7 05 44 d4 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x6
c0019a9d:	e9 e1 01 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019aa2:	83 ec 08             	sub    esp,0x8
c0019aa5:	68 f1 59 02 c0       	push   0xc00259f1
c0019aaa:	68 30 d4 02 c0       	push   0xc002d430
c0019aaf:	e8 9c 6c fe ff       	call   c0000750 <strcmp>
c0019ab4:	83 c4 10             	add    esp,0x10
c0019ab7:	85 c0                	test   eax,eax
c0019ab9:	0f 94 c0             	sete   al
c0019abc:	0f b6 c0             	movzx  eax,al
c0019abf:	85 c0                	test   eax,eax
c0019ac1:	74 0f                	je     c0019ad2 <HalDetectFeatures()+0x73c>
c0019ac3:	c7 05 44 d4 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x7
c0019acd:	e9 b1 01 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019ad2:	83 ec 08             	sub    esp,0x8
c0019ad5:	68 fe 59 02 c0       	push   0xc00259fe
c0019ada:	68 30 d4 02 c0       	push   0xc002d430
c0019adf:	e8 6c 6c fe ff       	call   c0000750 <strcmp>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	85 c0                	test   eax,eax
c0019ae9:	0f 94 c0             	sete   al
c0019aec:	0f b6 c0             	movzx  eax,al
c0019aef:	85 c0                	test   eax,eax
c0019af1:	74 0f                	je     c0019b02 <HalDetectFeatures()+0x76c>
c0019af3:	c7 05 44 d4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x8
c0019afd:	e9 81 01 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019b02:	83 ec 08             	sub    esp,0x8
c0019b05:	68 0b 5a 02 c0       	push   0xc0025a0b
c0019b0a:	68 30 d4 02 c0       	push   0xc002d430
c0019b0f:	e8 3c 6c fe ff       	call   c0000750 <strcmp>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	85 c0                	test   eax,eax
c0019b19:	0f 94 c0             	sete   al
c0019b1c:	0f b6 c0             	movzx  eax,al
c0019b1f:	85 c0                	test   eax,eax
c0019b21:	74 0f                	je     c0019b32 <HalDetectFeatures()+0x79c>
c0019b23:	c7 05 44 d4 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x9
c0019b2d:	e9 51 01 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019b32:	83 ec 08             	sub    esp,0x8
c0019b35:	68 18 5a 02 c0       	push   0xc0025a18
c0019b3a:	68 30 d4 02 c0       	push   0xc002d430
c0019b3f:	e8 0c 6c fe ff       	call   c0000750 <strcmp>
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	85 c0                	test   eax,eax
c0019b49:	0f 94 c0             	sete   al
c0019b4c:	0f b6 c0             	movzx  eax,al
c0019b4f:	85 c0                	test   eax,eax
c0019b51:	74 0f                	je     c0019b62 <HalDetectFeatures()+0x7cc>
c0019b53:	c7 05 44 d4 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xa
c0019b5d:	e9 21 01 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019b62:	83 ec 08             	sub    esp,0x8
c0019b65:	68 25 5a 02 c0       	push   0xc0025a25
c0019b6a:	68 30 d4 02 c0       	push   0xc002d430
c0019b6f:	e8 dc 6b fe ff       	call   c0000750 <strcmp>
c0019b74:	83 c4 10             	add    esp,0x10
c0019b77:	85 c0                	test   eax,eax
c0019b79:	0f 94 c0             	sete   al
c0019b7c:	0f b6 c0             	movzx  eax,al
c0019b7f:	85 c0                	test   eax,eax
c0019b81:	74 0f                	je     c0019b92 <HalDetectFeatures()+0x7fc>
c0019b83:	c7 05 44 d4 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xb
c0019b8d:	e9 f1 00 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019b92:	83 ec 08             	sub    esp,0x8
c0019b95:	68 32 5a 02 c0       	push   0xc0025a32
c0019b9a:	68 30 d4 02 c0       	push   0xc002d430
c0019b9f:	e8 ac 6b fe ff       	call   c0000750 <strcmp>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	85 c0                	test   eax,eax
c0019ba9:	0f 94 c0             	sete   al
c0019bac:	0f b6 c0             	movzx  eax,al
c0019baf:	85 c0                	test   eax,eax
c0019bb1:	74 0f                	je     c0019bc2 <HalDetectFeatures()+0x82c>
c0019bb3:	c7 05 44 d4 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xc
c0019bbd:	e9 c1 00 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019bc2:	83 ec 08             	sub    esp,0x8
c0019bc5:	68 3f 5a 02 c0       	push   0xc0025a3f
c0019bca:	68 30 d4 02 c0       	push   0xc002d430
c0019bcf:	e8 7c 6b fe ff       	call   c0000750 <strcmp>
c0019bd4:	83 c4 10             	add    esp,0x10
c0019bd7:	85 c0                	test   eax,eax
c0019bd9:	0f 94 c0             	sete   al
c0019bdc:	0f b6 c0             	movzx  eax,al
c0019bdf:	85 c0                	test   eax,eax
c0019be1:	74 0f                	je     c0019bf2 <HalDetectFeatures()+0x85c>
c0019be3:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019bed:	e9 91 00 00 00       	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019bf2:	83 ec 08             	sub    esp,0x8
c0019bf5:	68 4c 5a 02 c0       	push   0xc0025a4c
c0019bfa:	68 30 d4 02 c0       	push   0xc002d430
c0019bff:	e8 4c 6b fe ff       	call   c0000750 <strcmp>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	85 c0                	test   eax,eax
c0019c09:	0f 94 c0             	sete   al
c0019c0c:	0f b6 c0             	movzx  eax,al
c0019c0f:	85 c0                	test   eax,eax
c0019c11:	74 0c                	je     c0019c1f <HalDetectFeatures()+0x889>
c0019c13:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019c1d:	eb 64                	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019c1f:	83 ec 08             	sub    esp,0x8
c0019c22:	68 59 5a 02 c0       	push   0xc0025a59
c0019c27:	68 30 d4 02 c0       	push   0xc002d430
c0019c2c:	e8 1f 6b fe ff       	call   c0000750 <strcmp>
c0019c31:	83 c4 10             	add    esp,0x10
c0019c34:	85 c0                	test   eax,eax
c0019c36:	0f 94 c0             	sete   al
c0019c39:	0f b6 c0             	movzx  eax,al
c0019c3c:	85 c0                	test   eax,eax
c0019c3e:	74 0c                	je     c0019c4c <HalDetectFeatures()+0x8b6>
c0019c40:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019c4a:	eb 37                	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019c4c:	83 ec 08             	sub    esp,0x8
c0019c4f:	68 66 5a 02 c0       	push   0xc0025a66
c0019c54:	68 30 d4 02 c0       	push   0xc002d430
c0019c59:	e8 f2 6a fe ff       	call   c0000750 <strcmp>
c0019c5e:	83 c4 10             	add    esp,0x10
c0019c61:	85 c0                	test   eax,eax
c0019c63:	0f 94 c0             	sete   al
c0019c66:	0f b6 c0             	movzx  eax,al
c0019c69:	85 c0                	test   eax,eax
c0019c6b:	74 0c                	je     c0019c79 <HalDetectFeatures()+0x8e3>
c0019c6d:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019c77:	eb 0a                	jmp    c0019c83 <HalDetectFeatures()+0x8ed>
c0019c79:	c7 05 44 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x0
c0019c83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c87:	83 f8 06             	cmp    eax,0x6
c0019c8a:	0f 86 cc 00 00 00    	jbe    c0019d5c <HalDetectFeatures()+0x9c6>
c0019c90:	83 ec 0c             	sub    esp,0xc
c0019c93:	68 80 00 00 00       	push   0x80
c0019c98:	e8 9d f6 ff ff       	call   c001933a <cpuidCheckExtendedEBX(unsigned int)>
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	89 c1                	mov    ecx,eax
c0019ca2:	83 e1 01             	and    ecx,0x1
c0019ca5:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019caa:	83 e0 fe             	and    eax,0xfffffffe
c0019cad:	88 c2                	mov    dl,al
c0019caf:	88 c8                	mov    al,cl
c0019cb1:	09 d0                	or     eax,edx
c0019cb3:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	68 00 00 10 00       	push   0x100000
c0019cc0:	e8 75 f6 ff ff       	call   c001933a <cpuidCheckExtendedEBX(unsigned int)>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	83 e0 01             	and    eax,0x1
c0019ccb:	89 c1                	mov    ecx,eax
c0019ccd:	c1 e1 06             	shl    ecx,0x6
c0019cd0:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019cd5:	83 e0 bf             	and    eax,0xffffffbf
c0019cd8:	88 c2                	mov    dl,al
c0019cda:	88 c8                	mov    al,cl
c0019cdc:	09 d0                	or     eax,edx
c0019cde:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019ce3:	83 ec 0c             	sub    esp,0xc
c0019ce6:	68 00 00 04 00       	push   0x40000
c0019ceb:	e8 4a f6 ff ff       	call   c001933a <cpuidCheckExtendedEBX(unsigned int)>
c0019cf0:	83 c4 10             	add    esp,0x10
c0019cf3:	83 e0 01             	and    eax,0x1
c0019cf6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019cf9:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019cfe:	83 e0 fd             	and    eax,0xfffffffd
c0019d01:	88 c2                	mov    dl,al
c0019d03:	88 c8                	mov    al,cl
c0019d05:	09 d0                	or     eax,edx
c0019d07:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	6a 04                	push   0x4
c0019d11:	e8 52 f6 ff ff       	call   c0019368 <cpuidCheckExtendedECX(unsigned int)>
c0019d16:	83 c4 10             	add    esp,0x10
c0019d19:	83 e0 01             	and    eax,0x1
c0019d1c:	89 c1                	mov    ecx,eax
c0019d1e:	c1 e1 05             	shl    ecx,0x5
c0019d21:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019d26:	83 e0 df             	and    eax,0xffffffdf
c0019d29:	88 c2                	mov    dl,al
c0019d2b:	88 c8                	mov    al,cl
c0019d2d:	09 d0                	or     eax,edx
c0019d2f:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019d34:	83 ec 0c             	sub    esp,0xc
c0019d37:	6a 20                	push   0x20
c0019d39:	e8 2a f6 ff ff       	call   c0019368 <cpuidCheckExtendedECX(unsigned int)>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	83 e0 01             	and    eax,0x1
c0019d44:	89 c1                	mov    ecx,eax
c0019d46:	c1 e1 04             	shl    ecx,0x4
c0019d49:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019d4e:	83 e0 ef             	and    eax,0xffffffef
c0019d51:	88 c2                	mov    dl,al
c0019d53:	88 c8                	mov    al,cl
c0019d55:	09 d0                	or     eax,edx
c0019d57:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019d5c:	83 ec 0c             	sub    esp,0xc
c0019d5f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d63:	50                   	push   eax
c0019d64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d68:	50                   	push   eax
c0019d69:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d6d:	50                   	push   eax
c0019d6e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d72:	50                   	push   eax
c0019d73:	6a 01                	push   0x1
c0019d75:	e8 c7 f4 ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d7a:	83 c4 20             	add    esp,0x20
c0019d7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d81:	83 e0 0f             	and    eax,0xf
c0019d84:	a2 40 d4 02 c0       	mov    ds:0xc002d440,al
c0019d89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d8d:	c1 e8 04             	shr    eax,0x4
c0019d90:	83 e0 0f             	and    eax,0xf
c0019d93:	a2 3e d4 02 c0       	mov    ds:0xc002d43e,al
c0019d98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d9c:	c1 e8 08             	shr    eax,0x8
c0019d9f:	83 e0 0f             	and    eax,0xf
c0019da2:	a2 3d d4 02 c0       	mov    ds:0xc002d43d,al
c0019da7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dab:	c1 e8 0c             	shr    eax,0xc
c0019dae:	83 e0 03             	and    eax,0x3
c0019db1:	a2 3f d4 02 c0       	mov    ds:0xc002d43f,al
c0019db6:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019dbb:	0f b6 c0             	movzx  eax,al
c0019dbe:	83 f8 06             	cmp    eax,0x6
c0019dc1:	74 0d                	je     c0019dd0 <HalDetectFeatures()+0xa3a>
c0019dc3:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019dc8:	0f b6 c0             	movzx  eax,al
c0019dcb:	83 f8 0f             	cmp    eax,0xf
c0019dce:	75 18                	jne    c0019de8 <HalDetectFeatures()+0xa52>
c0019dd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dd4:	c1 e8 10             	shr    eax,0x10
c0019dd7:	c1 e0 04             	shl    eax,0x4
c0019dda:	88 c2                	mov    dl,al
c0019ddc:	a0 3e d4 02 c0       	mov    al,ds:0xc002d43e
c0019de1:	09 d0                	or     eax,edx
c0019de3:	a2 3e d4 02 c0       	mov    ds:0xc002d43e,al
c0019de8:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019ded:	0f b6 c0             	movzx  eax,al
c0019df0:	83 f8 0f             	cmp    eax,0xf
c0019df3:	75 15                	jne    c0019e0a <HalDetectFeatures()+0xa74>
c0019df5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019df9:	c1 e8 14             	shr    eax,0x14
c0019dfc:	88 c2                	mov    dl,al
c0019dfe:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019e03:	01 d0                	add    eax,edx
c0019e05:	a2 3d d4 02 c0       	mov    ds:0xc002d43d,al
c0019e0a:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019e12:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019e1a:	85 c0                	test   eax,eax
c0019e1c:	74 2d                	je     c0019e4b <HalDetectFeatures()+0xab5>
c0019e1e:	83 ec 0c             	sub    esp,0xc
c0019e21:	68 00 00 00 40       	push   0x40000000
c0019e26:	e8 e1 f4 ff ff       	call   c001930c <cpuidCheckECX(unsigned int)>
c0019e2b:	83 c4 10             	add    esp,0x10
c0019e2e:	83 e0 01             	and    eax,0x1
c0019e31:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019e38:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019e3d:	83 e0 fb             	and    eax,0xfffffffb
c0019e40:	88 c2                	mov    dl,al
c0019e42:	88 c8                	mov    al,cl
c0019e44:	09 d0                	or     eax,edx
c0019e46:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019e4b:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019e50:	83 c8 04             	or     eax,0x4
c0019e53:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019e58:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019e5d:	83 c8 08             	or     eax,0x8
c0019e60:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019e65:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019e6a:	83 c8 10             	or     eax,0x10
c0019e6d:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e79:	50                   	push   eax
c0019e7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e7e:	50                   	push   eax
c0019e7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019e83:	50                   	push   eax
c0019e84:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019e88:	50                   	push   eax
c0019e89:	68 00 00 00 80       	push   0x80000000
c0019e8e:	e8 ae f3 ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019e93:	83 c4 20             	add    esp,0x20
c0019e96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e9a:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019e9f:	0f 86 96 01 00 00    	jbe    c001a03b <HalDetectFeatures()+0xca5>
c0019ea5:	83 ec 0c             	sub    esp,0xc
c0019ea8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eac:	50                   	push   eax
c0019ead:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019eb1:	50                   	push   eax
c0019eb2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019eb6:	50                   	push   eax
c0019eb7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ebb:	50                   	push   eax
c0019ebc:	68 01 00 00 80       	push   0x80000001
c0019ec1:	e8 7b f3 ff ff       	call   c0019241 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019ec6:	83 c4 20             	add    esp,0x20
c0019ec9:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019ece:	83 e0 7f             	and    eax,0x7f
c0019ed1:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019ed6:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019edb:	83 e0 fb             	and    eax,0xfffffffb
c0019ede:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019ee3:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019ee8:	83 e0 fd             	and    eax,0xfffffffd
c0019eeb:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019ef0:	e9 46 01 00 00       	jmp    c001a03b <HalDetectFeatures()+0xca5>
c0019ef5:	83 ec 08             	sub    esp,0x8
c0019ef8:	68 d7 59 02 c0       	push   0xc00259d7
c0019efd:	68 30 d4 02 c0       	push   0xc002d430
c0019f02:	e8 39 67 fe ff       	call   c0000640 <strcpy>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	c7 05 44 d4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x1
c0019f14:	e8 aa 62 fe ff       	call   c00001c3 <is486>
c0019f19:	85 c0                	test   eax,eax
c0019f1b:	0f 95 c0             	setne  al
c0019f1e:	0f b6 c0             	movzx  eax,al
c0019f21:	85 c0                	test   eax,eax
c0019f23:	0f 84 8d 00 00 00    	je     c0019fb6 <HalDetectFeatures()+0xc20>
c0019f29:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019f2e:	83 c8 04             	or     eax,0x4
c0019f31:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019f36:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019f3b:	83 c8 08             	or     eax,0x8
c0019f3e:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019f43:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019f48:	83 c8 10             	or     eax,0x10
c0019f4b:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019f50:	0f 20 c0             	mov    eax,cr0
c0019f53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f5b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019f62:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019f69:	83 e0 04             	and    eax,0x4
c0019f6c:	74 1e                	je     c0019f8c <HalDetectFeatures()+0xbf6>
c0019f6e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019f75:	83 e0 10             	and    eax,0x10
c0019f78:	75 12                	jne    c0019f8c <HalDetectFeatures()+0xbf6>
c0019f7a:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019f7f:	83 e0 f7             	and    eax,0xfffffff7
c0019f82:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019f87:	e9 af 00 00 00       	jmp    c001a03b <HalDetectFeatures()+0xca5>
c0019f8c:	e8 0d 62 fe ff       	call   c000019e <hasLegacyFPU>
c0019f91:	83 e0 01             	and    eax,0x1
c0019f94:	83 e0 01             	and    eax,0x1
c0019f97:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019f9e:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019fa3:	83 e0 f7             	and    eax,0xfffffff7
c0019fa6:	88 c2                	mov    dl,al
c0019fa8:	88 c8                	mov    al,cl
c0019faa:	09 d0                	or     eax,edx
c0019fac:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019fb1:	e9 85 00 00 00       	jmp    c001a03b <HalDetectFeatures()+0xca5>
c0019fb6:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019fbb:	83 e0 fb             	and    eax,0xfffffffb
c0019fbe:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019fc3:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019fc8:	83 e0 f7             	and    eax,0xfffffff7
c0019fcb:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019fd0:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019fd5:	83 e0 ef             	and    eax,0xffffffef
c0019fd8:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019fdd:	0f 20 c0             	mov    eax,cr0
c0019fe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fe4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fe8:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019fef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019ff6:	83 e0 04             	and    eax,0x4
c0019ff9:	74 1b                	je     c001a016 <HalDetectFeatures()+0xc80>
c0019ffb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a002:	83 e0 10             	and    eax,0x10
c001a005:	75 0f                	jne    c001a016 <HalDetectFeatures()+0xc80>
c001a007:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a00c:	83 e0 f7             	and    eax,0xfffffff7
c001a00f:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c001a014:	eb 25                	jmp    c001a03b <HalDetectFeatures()+0xca5>
c001a016:	e8 83 61 fe ff       	call   c000019e <hasLegacyFPU>
c001a01b:	83 e0 01             	and    eax,0x1
c001a01e:	83 e0 01             	and    eax,0x1
c001a021:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a028:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a02d:	83 e0 f7             	and    eax,0xfffffff7
c001a030:	88 c2                	mov    dl,al
c001a032:	88 c8                	mov    al,cl
c001a034:	09 d0                	or     eax,edx
c001a036:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c001a03b:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a040:	83 e0 08             	and    eax,0x8
c001a043:	0f b6 c0             	movzx  eax,al
c001a046:	85 c0                	test   eax,eax
c001a048:	75 25                	jne    c001a06f <HalDetectFeatures()+0xcd9>
c001a04a:	e8 4f 61 fe ff       	call   c000019e <hasLegacyFPU>
c001a04f:	83 e0 01             	and    eax,0x1
c001a052:	83 e0 01             	and    eax,0x1
c001a055:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a05c:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a061:	83 e0 f7             	and    eax,0xfffffff7
c001a064:	88 c2                	mov    dl,al
c001a066:	88 c8                	mov    al,cl
c001a068:	09 d0                	or     eax,edx
c001a06a:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c001a06f:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a074:	83 e0 08             	and    eax,0x8
c001a077:	0f b6 c0             	movzx  eax,al
c001a07a:	85 c0                	test   eax,eax
c001a07c:	74 0d                	je     c001a08b <HalDetectFeatures()+0xcf5>
c001a07e:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a083:	83 c8 10             	or     eax,0x10
c001a086:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a08b:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a090:	83 e0 10             	and    eax,0x10
c001a093:	0f b6 c0             	movzx  eax,al
c001a096:	85 c0                	test   eax,eax
c001a098:	75 23                	jne    c001a0bd <HalDetectFeatures()+0xd27>
c001a09a:	e8 17 7c 00 00       	call   c0021cb6 <x87Detect>
c001a09f:	83 e0 01             	and    eax,0x1
c001a0a2:	83 e0 01             	and    eax,0x1
c001a0a5:	89 c1                	mov    ecx,eax
c001a0a7:	c1 e1 04             	shl    ecx,0x4
c001a0aa:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a0af:	83 e0 ef             	and    eax,0xffffffef
c001a0b2:	88 c2                	mov    dl,al
c001a0b4:	88 c8                	mov    al,cl
c001a0b6:	09 d0                	or     eax,edx
c001a0b8:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a0bd:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a0c2:	83 e0 01             	and    eax,0x1
c001a0c5:	0f b6 c0             	movzx  eax,al
c001a0c8:	85 c0                	test   eax,eax
c001a0ca:	75 2d                	jne    c001a0f9 <HalDetectFeatures()+0xd63>
c001a0cc:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a0d1:	83 e0 02             	and    eax,0x2
c001a0d4:	0f b6 c0             	movzx  eax,al
c001a0d7:	85 c0                	test   eax,eax
c001a0d9:	75 1e                	jne    c001a0f9 <HalDetectFeatures()+0xd63>
c001a0db:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a0e0:	83 e0 04             	and    eax,0x4
c001a0e3:	0f b6 c0             	movzx  eax,al
c001a0e6:	85 c0                	test   eax,eax
c001a0e8:	75 0f                	jne    c001a0f9 <HalDetectFeatures()+0xd63>
c001a0ea:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a0ef:	83 e0 08             	and    eax,0x8
c001a0f2:	0f b6 c0             	movzx  eax,al
c001a0f5:	85 c0                	test   eax,eax
c001a0f7:	74 0d                	je     c001a106 <HalDetectFeatures()+0xd70>
c001a0f9:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a0fe:	83 c8 80             	or     eax,0xffffff80
c001a101:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a106:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a10b:	83 e0 10             	and    eax,0x10
c001a10e:	0f b6 c0             	movzx  eax,al
c001a111:	85 c0                	test   eax,eax
c001a113:	74 2f                	je     c001a144 <HalDetectFeatures()+0xdae>
c001a115:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a11a:	83 e0 80             	and    eax,0xffffff80
c001a11d:	0f b6 c0             	movzx  eax,al
c001a120:	85 c0                	test   eax,eax
c001a122:	75 20                	jne    c001a144 <HalDetectFeatures()+0xdae>
c001a124:	e8 47 7b 00 00       	call   c0021c70 <sseDetect>
c001a129:	83 e0 01             	and    eax,0x1
c001a12c:	89 c1                	mov    ecx,eax
c001a12e:	c1 e1 07             	shl    ecx,0x7
c001a131:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a136:	83 e0 7f             	and    eax,0x7f
c001a139:	88 c2                	mov    dl,al
c001a13b:	88 c8                	mov    al,cl
c001a13d:	09 d0                	or     eax,edx
c001a13f:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a144:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a149:	83 e0 80             	and    eax,0xffffff80
c001a14c:	0f b6 c0             	movzx  eax,al
c001a14f:	85 c0                	test   eax,eax
c001a151:	74 1c                	je     c001a16f <HalDetectFeatures()+0xdd9>
c001a153:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a158:	83 e0 20             	and    eax,0x20
c001a15b:	0f b6 c0             	movzx  eax,al
c001a15e:	85 c0                	test   eax,eax
c001a160:	75 0d                	jne    c001a16f <HalDetectFeatures()+0xdd9>
c001a162:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001a167:	83 e0 df             	and    eax,0xffffffdf
c001a16a:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c001a16f:	c6 05 48 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d448,0x0
c001a176:	90                   	nop
c001a177:	81 c4 90 00 00 00    	add    esp,0x90
c001a17d:	5b                   	pop    ebx
c001a17e:	5e                   	pop    esi
c001a17f:	5f                   	pop    edi
c001a180:	c3                   	ret    

c001a181 <HalEnableNMI()>:
c001a181:	c6 05 2c d4 02 c0 01 	mov    BYTE PTR ds:0xc002d42c,0x1
c001a188:	6a 10                	push   0x10
c001a18a:	e8 02 ef ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001a18f:	83 c4 04             	add    esp,0x4
c001a192:	90                   	nop
c001a193:	c3                   	ret    

c001a194 <HalDisableNMI()>:
c001a194:	c6 05 2c d4 02 c0 00 	mov    BYTE PTR ds:0xc002d42c,0x0
c001a19b:	6a 10                	push   0x10
c001a19d:	e8 ef ee ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001a1a2:	83 c4 04             	add    esp,0x4
c001a1a5:	90                   	nop
c001a1a6:	c3                   	ret    

c001a1a7 <HalGetNMIState()>:
c001a1a7:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c001a1ac:	c3                   	ret    

c001a1ad <x86rdmsr(unsigned int)>:
c001a1ad:	83 ec 1c             	sub    esp,0x1c
c001a1b0:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a1b5:	83 e0 08             	and    eax,0x8
c001a1b8:	0f b6 c0             	movzx  eax,al
c001a1bb:	85 c0                	test   eax,eax
c001a1bd:	75 10                	jne    c001a1cf <x86rdmsr(unsigned int)+0x22>
c001a1bf:	83 ec 0c             	sub    esp,0xc
c001a1c2:	68 72 5a 02 c0       	push   0xc0025a72
c001a1c7:	e8 d4 5a ff ff       	call   c000fca0 <KePanic(char const*)>
c001a1cc:	83 c4 10             	add    esp,0x10
c001a1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1d3:	89 c1                	mov    ecx,eax
c001a1d5:	0f 32                	rdmsr  
c001a1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1e7:	83 c4 1c             	add    esp,0x1c
c001a1ea:	c3                   	ret    

c001a1eb <x86wrmsr(unsigned int, unsigned long long)>:
c001a1eb:	83 ec 1c             	sub    esp,0x1c
c001a1ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1fe:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a203:	83 e0 08             	and    eax,0x8
c001a206:	0f b6 c0             	movzx  eax,al
c001a209:	85 c0                	test   eax,eax
c001a20b:	75 10                	jne    c001a21d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a20d:	83 ec 0c             	sub    esp,0xc
c001a210:	68 78 5a 02 c0       	push   0xc0025a78
c001a215:	e8 86 5a ff ff       	call   c000fca0 <KePanic(char const*)>
c001a21a:	83 c4 10             	add    esp,0x10
c001a21d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a221:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a225:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a229:	0f 30                	wrmsr  
c001a22b:	90                   	nop
c001a22c:	83 c4 1c             	add    esp,0x1c
c001a22f:	c3                   	ret    

c001a230 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a230:	83 ec 0c             	sub    esp,0xc
c001a233:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a238:	8b 00                	mov    eax,DWORD PTR [eax]
c001a23a:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a23d:	0f b6 c0             	movzx  eax,al
c001a240:	85 c0                	test   eax,eax
c001a242:	74 11                	je     c001a255 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a244:	83 ec 0c             	sub    esp,0xc
c001a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a24b:	e8 2d db ff ff       	call   c0017d7d <Vm::faultHandler(regs*)>
c001a250:	83 c4 10             	add    esp,0x10
c001a253:	eb 02                	jmp    c001a257 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a255:	b0 00                	mov    al,0x0
c001a257:	83 c4 0c             	add    esp,0xc
c001a25a:	c3                   	ret    

c001a25b <HalFindRSDP()>:
c001a25b:	83 ec 1c             	sub    esp,0x1c
c001a25e:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c001a263:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a268:	7e 17                	jle    c001a281 <HalFindRSDP()+0x26>
c001a26a:	83 ec 0c             	sub    esp,0xc
c001a26d:	68 00 04 00 00       	push   0x400
c001a272:	e8 f5 2f ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	0f b6 c0             	movzx  eax,al
c001a27d:	85 c0                	test   eax,eax
c001a27f:	74 04                	je     c001a285 <HalFindRSDP()+0x2a>
c001a281:	b0 01                	mov    al,0x1
c001a283:	eb 02                	jmp    c001a287 <HalFindRSDP()+0x2c>
c001a285:	b0 00                	mov    al,0x0
c001a287:	0f b6 c0             	movzx  eax,al
c001a28a:	85 c0                	test   eax,eax
c001a28c:	74 1d                	je     c001a2ab <HalFindRSDP()+0x50>
c001a28e:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a293:	83 e0 fb             	and    eax,0xfffffffb
c001a296:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a29b:	83 ec 0c             	sub    esp,0xc
c001a29e:	68 7e 5a 02 c0       	push   0xc0025a7e
c001a2a3:	e8 d4 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2a8:	83 c4 10             	add    esp,0x10
c001a2ab:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a2b0:	83 e0 04             	and    eax,0x4
c001a2b3:	0f b6 c0             	movzx  eax,al
c001a2b6:	85 c0                	test   eax,eax
c001a2b8:	75 17                	jne    c001a2d1 <HalFindRSDP()+0x76>
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	68 8d 5a 02 c0       	push   0xc0025a8d
c001a2c2:	e8 b5 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	b8 00 00 00 00       	mov    eax,0x0
c001a2cf:	eb 63                	jmp    c001a334 <HalFindRSDP()+0xd9>
c001a2d1:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a2d9:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a2e1:	77 2f                	ja     c001a312 <HalFindRSDP()+0xb7>
c001a2e3:	83 ec 04             	sub    esp,0x4
c001a2e6:	6a 08                	push   0x8
c001a2e8:	68 97 5a 02 c0       	push   0xc0025a97
c001a2ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2f1:	e8 8a 60 fe ff       	call   c0000380 <memcmp>
c001a2f6:	83 c4 10             	add    esp,0x10
c001a2f9:	85 c0                	test   eax,eax
c001a2fb:	0f 94 c0             	sete   al
c001a2fe:	0f b6 c0             	movzx  eax,al
c001a301:	85 c0                	test   eax,eax
c001a303:	74 06                	je     c001a30b <HalFindRSDP()+0xb0>
c001a305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a309:	eb 29                	jmp    c001a334 <HalFindRSDP()+0xd9>
c001a30b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a310:	eb c7                	jmp    c001a2d9 <HalFindRSDP()+0x7e>
c001a312:	83 ec 0c             	sub    esp,0xc
c001a315:	68 a0 5a 02 c0       	push   0xc0025aa0
c001a31a:	e8 5d cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a327:	83 e0 fb             	and    eax,0xfffffffb
c001a32a:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a32f:	b8 00 00 00 00       	mov    eax,0x0
c001a334:	83 c4 1c             	add    esp,0x1c
c001a337:	c3                   	ret    

c001a338 <HalHandlePageFault(void*, void*)>:
c001a338:	83 ec 1c             	sub    esp,0x1c
c001a33b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a340:	8b 00                	mov    eax,DWORD PTR [eax]
c001a342:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a345:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a34b:	0f 20 d2             	mov    edx,cr2
c001a34e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a352:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a356:	83 ec 08             	sub    esp,0x8
c001a359:	52                   	push   edx
c001a35a:	50                   	push   eax
c001a35b:	e8 a4 9c ff ff       	call   c0014004 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a360:	83 c4 10             	add    esp,0x10
c001a363:	83 c4 1c             	add    esp,0x1c
c001a366:	c3                   	ret    

c001a367 <HalHandleOpcodeFault(void*, void*)>:
c001a367:	83 ec 1c             	sub    esp,0x1c
c001a36a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a36e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a372:	a0 48 d4 02 c0       	mov    al,ds:0xc002d448
c001a377:	0f b6 c0             	movzx  eax,al
c001a37a:	85 c0                	test   eax,eax
c001a37c:	74 25                	je     c001a3a3 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	68 98 5c 02 c0       	push   0xc0025c98
c001a386:	e8 f1 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a392:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a395:	8d 50 19             	lea    edx,[eax+0x19]
c001a398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a39c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a39f:	b0 01                	mov    al,0x1
c001a3a1:	eb 02                	jmp    c001a3a5 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a3a3:	b0 00                	mov    al,0x0
c001a3a5:	83 c4 1c             	add    esp,0x1c
c001a3a8:	c3                   	ret    

c001a3a9 <HalDisplayDebugInfo(void*)>:
c001a3a9:	83 ec 2c             	sub    esp,0x2c
c001a3ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3b4:	0f 20 c0             	mov    eax,cr0
c001a3b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3bb:	0f 20 d0             	mov    eax,cr2
c001a3be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3c2:	0f 20 d8             	mov    eax,cr3
c001a3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3c9:	0f 20 e0             	mov    eax,cr4
c001a3cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3d4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a3d7:	83 ec 08             	sub    esp,0x8
c001a3da:	50                   	push   eax
c001a3db:	68 ba 5a 02 c0       	push   0xc0025aba
c001a3e0:	e8 97 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a3ef:	83 ec 08             	sub    esp,0x8
c001a3f2:	50                   	push   eax
c001a3f3:	68 ab 5a 02 c0       	push   0xc0025aab
c001a3f8:	e8 7f cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a404:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a407:	83 ec 08             	sub    esp,0x8
c001a40a:	50                   	push   eax
c001a40b:	68 b6 5a 02 c0       	push   0xc0025ab6
c001a410:	e8 67 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a41c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a41f:	83 ec 08             	sub    esp,0x8
c001a422:	50                   	push   eax
c001a423:	68 c5 5a 02 c0       	push   0xc0025ac5
c001a428:	e8 4f cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a42d:	83 c4 10             	add    esp,0x10
c001a430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a434:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a437:	83 ec 08             	sub    esp,0x8
c001a43a:	50                   	push   eax
c001a43b:	68 d0 5a 02 c0       	push   0xc0025ad0
c001a440:	e8 37 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	83 ec 08             	sub    esp,0x8
c001a44b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a44f:	68 db 5a 02 c0       	push   0xc0025adb
c001a454:	e8 23 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a459:	83 c4 10             	add    esp,0x10
c001a45c:	83 ec 08             	sub    esp,0x8
c001a45f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a463:	68 e6 5a 02 c0       	push   0xc0025ae6
c001a468:	e8 0f cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a474:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a477:	c1 e0 05             	shl    eax,0x5
c001a47a:	8d 90 80 6f 02 c0    	lea    edx,[eax-0x3ffd9080]
c001a480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a484:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a487:	83 ec 04             	sub    esp,0x4
c001a48a:	52                   	push   edx
c001a48b:	50                   	push   eax
c001a48c:	68 f1 5a 02 c0       	push   0xc0025af1
c001a491:	e8 e6 ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a49e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4a4:	83 ec 0c             	sub    esp,0xc
c001a4a7:	50                   	push   eax
c001a4a8:	e8 12 7e ff ff       	call   c00122bf <setActiveTerminal(VgaText*)>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4b5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4bb:	83 ec 08             	sub    esp,0x8
c001a4be:	68 00 5b 02 c0       	push   0xc0025b00
c001a4c3:	50                   	push   eax
c001a4c4:	e8 43 81 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a4c9:	83 c4 10             	add    esp,0x10
c001a4cc:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4d1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4db:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a4de:	83 ec 08             	sub    esp,0x8
c001a4e1:	52                   	push   edx
c001a4e2:	50                   	push   eax
c001a4e3:	e8 de 80 ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4f0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4f6:	83 ec 08             	sub    esp,0x8
c001a4f9:	68 0e 5b 02 c0       	push   0xc0025b0e
c001a4fe:	50                   	push   eax
c001a4ff:	e8 08 81 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a504:	83 c4 10             	add    esp,0x10
c001a507:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a50c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a512:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a517:	8b 12                	mov    edx,DWORD PTR [edx]
c001a519:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a51c:	83 c2 0c             	add    edx,0xc
c001a51f:	83 ec 08             	sub    esp,0x8
c001a522:	52                   	push   edx
c001a523:	50                   	push   eax
c001a524:	e8 e3 80 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a531:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a537:	83 ec 08             	sub    esp,0x8
c001a53a:	68 17 5b 02 c0       	push   0xc0025b17
c001a53f:	50                   	push   eax
c001a540:	e8 c7 80 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a545:	83 c4 10             	add    esp,0x10
c001a548:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a54d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a553:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a557:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a55a:	83 ec 08             	sub    esp,0x8
c001a55d:	52                   	push   edx
c001a55e:	50                   	push   eax
c001a55f:	e8 62 80 ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a56c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a572:	83 ec 08             	sub    esp,0x8
c001a575:	68 1f 5b 02 c0       	push   0xc0025b1f
c001a57a:	50                   	push   eax
c001a57b:	e8 8c 80 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a580:	83 c4 10             	add    esp,0x10
c001a583:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a588:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a58e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a592:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a595:	83 ec 08             	sub    esp,0x8
c001a598:	52                   	push   edx
c001a599:	50                   	push   eax
c001a59a:	e8 27 80 ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a59f:	83 c4 10             	add    esp,0x10
c001a5a2:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a5a7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5ad:	83 ec 08             	sub    esp,0x8
c001a5b0:	68 27 5b 02 c0       	push   0xc0025b27
c001a5b5:	50                   	push   eax
c001a5b6:	e8 51 80 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a5bb:	83 c4 10             	add    esp,0x10
c001a5be:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a5c3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5cd:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a5d0:	83 ec 08             	sub    esp,0x8
c001a5d3:	52                   	push   edx
c001a5d4:	50                   	push   eax
c001a5d5:	e8 ec 7f ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a5e2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5e8:	83 ec 08             	sub    esp,0x8
c001a5eb:	68 2f 5b 02 c0       	push   0xc0025b2f
c001a5f0:	50                   	push   eax
c001a5f1:	e8 16 80 ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a5f6:	83 c4 10             	add    esp,0x10
c001a5f9:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a5fe:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a604:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a608:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a60b:	83 ec 08             	sub    esp,0x8
c001a60e:	52                   	push   edx
c001a60f:	50                   	push   eax
c001a610:	e8 b1 7f ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a61d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a623:	83 ec 08             	sub    esp,0x8
c001a626:	68 37 5b 02 c0       	push   0xc0025b37
c001a62b:	50                   	push   eax
c001a62c:	e8 db 7f ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a639:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a63f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a643:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a646:	83 ec 08             	sub    esp,0x8
c001a649:	52                   	push   edx
c001a64a:	50                   	push   eax
c001a64b:	e8 76 7f ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a658:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a65e:	83 ec 08             	sub    esp,0x8
c001a661:	68 3f 5b 02 c0       	push   0xc0025b3f
c001a666:	50                   	push   eax
c001a667:	e8 a0 7f ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a66c:	83 c4 10             	add    esp,0x10
c001a66f:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a674:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a67a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a67e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a681:	83 ec 08             	sub    esp,0x8
c001a684:	52                   	push   edx
c001a685:	50                   	push   eax
c001a686:	e8 3b 7f ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a68b:	83 c4 10             	add    esp,0x10
c001a68e:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a693:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a699:	83 ec 08             	sub    esp,0x8
c001a69c:	68 47 5b 02 c0       	push   0xc0025b47
c001a6a1:	50                   	push   eax
c001a6a2:	e8 65 7f ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a6af:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6b5:	83 ec 08             	sub    esp,0x8
c001a6b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6bc:	50                   	push   eax
c001a6bd:	e8 04 7f ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a6ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6d0:	83 ec 08             	sub    esp,0x8
c001a6d3:	68 50 5b 02 c0       	push   0xc0025b50
c001a6d8:	50                   	push   eax
c001a6d9:	e8 2e 7f ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a6de:	83 c4 10             	add    esp,0x10
c001a6e1:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a6e6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6ec:	83 ec 08             	sub    esp,0x8
c001a6ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f3:	50                   	push   eax
c001a6f4:	e8 cd 7e ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a701:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a707:	83 ec 08             	sub    esp,0x8
c001a70a:	68 58 5b 02 c0       	push   0xc0025b58
c001a70f:	50                   	push   eax
c001a710:	e8 f7 7e ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a715:	83 c4 10             	add    esp,0x10
c001a718:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a71d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a723:	83 ec 08             	sub    esp,0x8
c001a726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a72a:	50                   	push   eax
c001a72b:	e8 96 7e ff ff       	call   c00125c6 <VgaText::putx(unsigned int)>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	fa                   	cli    
c001a734:	f4                   	hlt    
c001a735:	eb fe                	jmp    c001a735 <HalDisplayDebugInfo(void*)+0x38c>

c001a737 <HalReceivedNMI()>:
c001a737:	83 ec 1c             	sub    esp,0x1c
c001a73a:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a745:	89 c2                	mov    edx,eax
c001a747:	ec                   	in     al,dx
c001a748:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a74c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a750:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a754:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a75b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a75f:	89 c2                	mov    edx,eax
c001a761:	ec                   	in     al,dx
c001a762:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a766:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a76a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a76e:	83 ec 0c             	sub    esp,0xc
c001a771:	68 60 5b 02 c0       	push   0xc0025b60
c001a776:	e8 01 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a77b:	83 c4 10             	add    esp,0x10
c001a77e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a783:	83 e0 10             	and    eax,0x10
c001a786:	74 10                	je     c001a798 <HalReceivedNMI()+0x61>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	68 71 5b 02 c0       	push   0xc0025b71
c001a790:	e8 0b 55 ff ff       	call   c000fca0 <KePanic(char const*)>
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a79d:	83 e0 40             	and    eax,0x40
c001a7a0:	74 10                	je     c001a7b2 <HalReceivedNMI()+0x7b>
c001a7a2:	83 ec 0c             	sub    esp,0xc
c001a7a5:	68 7e 5b 02 c0       	push   0xc0025b7e
c001a7aa:	e8 f1 54 ff ff       	call   c000fca0 <KePanic(char const*)>
c001a7af:	83 c4 10             	add    esp,0x10
c001a7b2:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a7b6:	0f be c0             	movsx  eax,al
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	79 10                	jns    c001a7cd <HalReceivedNMI()+0x96>
c001a7bd:	83 ec 0c             	sub    esp,0xc
c001a7c0:	68 88 5b 02 c0       	push   0xc0025b88
c001a7c5:	e8 d6 54 ff ff       	call   c000fca0 <KePanic(char const*)>
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	90                   	nop
c001a7ce:	83 c4 1c             	add    esp,0x1c
c001a7d1:	c3                   	ret    

c001a7d2 <HalSystemIdle()>:
c001a7d2:	56                   	push   esi
c001a7d3:	53                   	push   ebx
c001a7d4:	83 ec 14             	sub    esp,0x14
c001a7d7:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a7dc:	83 e0 10             	and    eax,0x10
c001a7df:	0f b6 c0             	movzx  eax,al
c001a7e2:	85 c0                	test   eax,eax
c001a7e4:	74 43                	je     c001a829 <HalSystemIdle()+0x57>
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	68 e1 00 00 00       	push   0xe1
c001a7ee:	e8 ba f9 ff ff       	call   c001a1ad <x86rdmsr(unsigned int)>
c001a7f3:	83 c4 10             	add    esp,0x10
c001a7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a802:	83 e0 02             	and    eax,0x2
c001a805:	89 c3                	mov    ebx,eax
c001a807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a80b:	83 e0 00             	and    eax,0x0
c001a80e:	89 c6                	mov    esi,eax
c001a810:	83 ec 04             	sub    esp,0x4
c001a813:	56                   	push   esi
c001a814:	53                   	push   ebx
c001a815:	68 e1 00 00 00       	push   0xe1
c001a81a:	e8 cc f9 ff ff       	call   c001a1eb <x86wrmsr(unsigned int, unsigned long long)>
c001a81f:	83 c4 10             	add    esp,0x10
c001a822:	e8 6d 59 fe ff       	call   c0000194 <doTPAUSE>
c001a827:	eb 01                	jmp    c001a82a <HalSystemIdle()+0x58>
c001a829:	f4                   	hlt    
c001a82a:	90                   	nop
c001a82b:	83 c4 14             	add    esp,0x14
c001a82e:	5b                   	pop    ebx
c001a82f:	5e                   	pop    esi
c001a830:	c3                   	ret    

c001a831 <i386SaveCoprocessor(void*)>:
c001a831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a835:	83 c0 3f             	add    eax,0x3f
c001a838:	83 e0 c0             	and    eax,0xffffffc0
c001a83b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a83f:	ff 25 10 d4 02 c0    	jmp    DWORD PTR ds:0xc002d410

c001a845 <i386LoadCoprocessor(void*)>:
c001a845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a849:	83 c0 3f             	add    eax,0x3f
c001a84c:	83 e0 c0             	and    eax,0xffffffc0
c001a84f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a853:	ff 25 0c d4 02 c0    	jmp    DWORD PTR ds:0xc002d40c

c001a859 <x87EmulHandler(regs*, void*)>:
c001a859:	53                   	push   ebx
c001a85a:	83 ec 08             	sub    esp,0x8
c001a85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a862:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a866:	74 10                	je     c001a878 <x87EmulHandler(regs*, void*)+0x1f>
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	68 95 5b 02 c0       	push   0xc0025b95
c001a870:	e8 2b 54 ff ff       	call   c000fca0 <KePanic(char const*)>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	0f 20 c0             	mov    eax,cr0
c001a87b:	a8 08                	test   al,0x8
c001a87d:	74 59                	je     c001a8d8 <x87EmulHandler(regs*, void*)+0x7f>
c001a87f:	0f 06                	clts   
c001a881:	a1 08 d4 02 c0       	mov    eax,ds:0xc002d408
c001a886:	85 c0                	test   eax,eax
c001a888:	74 0e                	je     c001a898 <x87EmulHandler(regs*, void*)+0x3f>
c001a88a:	83 ec 0c             	sub    esp,0xc
c001a88d:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a890:	e8 9c ff ff ff       	call   c001a831 <i386SaveCoprocessor(void*)>
c001a895:	83 c4 10             	add    esp,0x10
c001a898:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a89e:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a8a2:	75 12                	jne    c001a8b6 <x87EmulHandler(regs*, void*)+0x5d>
c001a8a4:	83 ec 0c             	sub    esp,0xc
c001a8a7:	68 40 02 00 00       	push   0x240
c001a8ac:	e8 9a 4f ff ff       	call   c000f84b <malloc>
c001a8b1:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a8b4:	eb 10                	jmp    c001a8c6 <x87EmulHandler(regs*, void*)+0x6d>
c001a8b6:	83 ec 0c             	sub    esp,0xc
c001a8b9:	a1 08 d4 02 c0       	mov    eax,ds:0xc002d408
c001a8be:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a8c1:	e8 7f ff ff ff       	call   c001a845 <i386LoadCoprocessor(void*)>
c001a8c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8cb:	83 c4 10             	add    esp,0x10
c001a8ce:	a3 08 d4 02 c0       	mov    ds:0xc002d408,eax
c001a8d3:	83 c4 08             	add    esp,0x8
c001a8d6:	5b                   	pop    ebx
c001a8d7:	c3                   	ret    
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	68 a9 5b 02 c0       	push   0xc0025ba9
c001a8e0:	e8 97 c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a8e5:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a8ed:	83 c4 18             	add    esp,0x18
c001a8f0:	5b                   	pop    ebx
c001a8f1:	e9 32 c7 ff ff       	jmp    c0017028 <KeTerminateCurrentThread(int)>

c001a8f6 <HalInitialiseCoprocessor()>:
c001a8f6:	83 ec 10             	sub    esp,0x10
c001a8f9:	c7 05 08 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d408,0x0
c001a903:	6a 00                	push   0x0
c001a905:	68 59 a8 01 c0       	push   0xc001a859
c001a90a:	6a 07                	push   0x7
c001a90c:	e8 de 07 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a911:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a916:	83 c4 10             	add    esp,0x10
c001a919:	a8 80                	test   al,0x80
c001a91b:	74 1c                	je     c001a939 <HalInitialiseCoprocessor()+0x43>
c001a91d:	c7 05 10 d4 02 c0 88 1c 02 c0 	mov    DWORD PTR ds:0xc002d410,0xc0021c88
c001a927:	c7 05 0c d4 02 c0 90 1c 02 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0021c90
c001a931:	83 c4 0c             	add    esp,0xc
c001a934:	e9 5f 73 00 00       	jmp    c0021c98 <sseInit>
c001a939:	a8 10                	test   al,0x10
c001a93b:	74 1c                	je     c001a959 <HalInitialiseCoprocessor()+0x63>
c001a93d:	c7 05 10 d4 02 c0 d7 1c 02 c0 	mov    DWORD PTR ds:0xc002d410,0xc0021cd7
c001a947:	c7 05 0c d4 02 c0 de 1c 02 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0021cde
c001a951:	83 c4 0c             	add    esp,0xc
c001a954:	e9 8c 73 00 00       	jmp    c0021ce5 <x87Init>
c001a959:	c7 05 10 d4 02 c0 80 90 01 c0 	mov    DWORD PTR ds:0xc002d410,0xc0019080
c001a963:	c7 05 0c d4 02 c0 80 90 01 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0019080
c001a96d:	0f 20 c0             	mov    eax,cr0
c001a970:	83 c8 04             	or     eax,0x4
c001a973:	0f 22 c0             	mov    cr0,eax
c001a976:	83 c4 0c             	add    esp,0xc
c001a979:	c3                   	ret    

c001a97a <HalPanic(char const*)>:
c001a97a:	53                   	push   ebx
c001a97b:	83 ec 10             	sub    esp,0x10
c001a97e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a982:	fa                   	cli    
c001a983:	53                   	push   ebx
c001a984:	68 bf 5b 02 c0       	push   0xc0025bbf
c001a989:	e8 ee c5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a98e:	a1 04 d4 02 c0       	mov    eax,ds:0xc002d404
c001a993:	83 c4 10             	add    esp,0x10
c001a996:	85 c0                	test   eax,eax
c001a998:	74 09                	je     c001a9a3 <HalPanic(char const*)+0x29>
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	53                   	push   ebx
c001a99e:	ff d0                	call   eax
c001a9a0:	83 c4 10             	add    esp,0x10
c001a9a3:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c001a9a8:	85 c0                	test   eax,eax
c001a9aa:	0f 84 dc 00 00 00    	je     c001aa8c <HalPanic(char const*)+0x112>
c001a9b0:	52                   	push   edx
c001a9b1:	6a 01                	push   0x1
c001a9b3:	6a 0f                	push   0xf
c001a9b5:	50                   	push   eax
c001a9b6:	e8 43 77 ff ff       	call   c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a9bb:	59                   	pop    ecx
c001a9bc:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a9c2:	e8 43 79 ff ff       	call   c001230a <VgaText::clearScreen()>
c001a9c7:	58                   	pop    eax
c001a9c8:	5a                   	pop    edx
c001a9c9:	68 7c 4b 02 c0       	push   0xc0024b7c
c001a9ce:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a9d4:	e8 5d 77 ff ff       	call   c0012136 <VgaText::setTitle(char*)>
c001a9d9:	83 c4 0c             	add    esp,0xc
c001a9dc:	6a 01                	push   0x1
c001a9de:	6a 0f                	push   0xf
c001a9e0:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a9e6:	e8 13 77 ff ff       	call   c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a9eb:	59                   	pop    ecx
c001a9ec:	58                   	pop    eax
c001a9ed:	68 d8 5b 02 c0       	push   0xc0025bd8
c001a9f2:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a9f8:	e8 0f 7c ff ff       	call   c001260c <VgaText::puts(char const*)>
c001a9fd:	83 c4 0c             	add    esp,0xc
c001aa00:	6a 0f                	push   0xf
c001aa02:	6a 01                	push   0x1
c001aa04:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa0a:	e8 ef 76 ff ff       	call   c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aa0f:	58                   	pop    eax
c001aa10:	5a                   	pop    edx
c001aa11:	68 e1 5b 02 c0       	push   0xc0025be1
c001aa16:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa1c:	e8 eb 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa21:	83 c4 0c             	add    esp,0xc
c001aa24:	6a 01                	push   0x1
c001aa26:	6a 0f                	push   0xf
c001aa28:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa2e:	e8 cb 76 ff ff       	call   c00120fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aa33:	59                   	pop    ecx
c001aa34:	58                   	pop    eax
c001aa35:	68 25 5c 02 c0       	push   0xc0025c25
c001aa3a:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa40:	e8 c7 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa45:	58                   	pop    eax
c001aa46:	5a                   	pop    edx
c001aa47:	68 ee 5b 02 c0       	push   0xc0025bee
c001aa4c:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa52:	e8 b5 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa57:	59                   	pop    ecx
c001aa58:	58                   	pop    eax
c001aa59:	68 28 5c 02 c0       	push   0xc0025c28
c001aa5e:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa64:	e8 a3 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa69:	58                   	pop    eax
c001aa6a:	5a                   	pop    edx
c001aa6b:	53                   	push   ebx
c001aa6c:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa72:	e8 95 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa77:	59                   	pop    ecx
c001aa78:	5b                   	pop    ebx
c001aa79:	68 25 5c 02 c0       	push   0xc0025c25
c001aa7e:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aa84:	e8 83 7b ff ff       	call   c001260c <VgaText::puts(char const*)>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	eb fe                	jmp    c001aa8c <HalPanic(char const*)+0x112>

c001aa8e <HalQueryPerformanceCounter()>:
c001aa8e:	31 c0                	xor    eax,eax
c001aa90:	31 d2                	xor    edx,edx
c001aa92:	f6 05 4e d4 02 c0 08 	test   BYTE PTR ds:0xc002d44e,0x8
c001aa99:	75 02                	jne    c001aa9d <HalQueryPerformanceCounter()+0xf>
c001aa9b:	0f 31                	rdtsc  
c001aa9d:	c3                   	ret    

c001aa9e <HalInitialise()>:
c001aa9e:	53                   	push   ebx
c001aa9f:	83 ec 08             	sub    esp,0x8
c001aaa2:	e8 ef e8 ff ff       	call   c0019396 <HalDetectFeatures()>
c001aaa7:	83 ec 0c             	sub    esp,0xc
c001aaaa:	68 81 90 01 c0       	push   0xc0019081
c001aaaf:	e8 2e 5b ff ff       	call   c00105e2 <KeRegisterRestartHandler(void (*)())>
c001aab4:	c7 04 24 8c 90 01 c0 	mov    DWORD PTR [esp],0xc001908c
c001aabb:	e8 18 5b ff ff       	call   c00105d8 <KeRegisterShutdownHandler(void (*)())>
c001aac0:	c7 04 24 8d 90 01 c0 	mov    DWORD PTR [esp],0xc001908d
c001aac7:	e8 20 5b ff ff       	call   c00105ec <KeRegisterSleepHandler(void (*)())>
c001aacc:	e8 c7 18 ff ff       	call   c000c398 <scanMADT()>
c001aad1:	83 c4 10             	add    esp,0x10
c001aad4:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001aadb:	75 0d                	jne    c001aaea <HalInitialise()+0x4c>
c001aadd:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001aae2:	83 e0 fe             	and    eax,0xfffffffe
c001aae5:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001aaea:	e8 dd 08 00 00       	call   c001b3cc <picOpen()>
c001aaef:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001aaf6:	74 0a                	je     c001ab02 <HalInitialise()+0x64>
c001aaf8:	e8 1f 08 00 00       	call   c001b31c <picDisable()>
c001aafd:	e8 86 e1 ff ff       	call   c0018c88 <apicOpen()>
c001ab02:	bb 0f 00 00 00       	mov    ebx,0xf
c001ab07:	50                   	push   eax
c001ab08:	6a 00                	push   0x0
c001ab0a:	68 88 e8 00 c0       	push   0xc000e888
c001ab0f:	6a 02                	push   0x2
c001ab11:	e8 d9 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab16:	83 c4 0c             	add    esp,0xc
c001ab19:	6a 00                	push   0x0
c001ab1b:	68 00 e8 00 c0       	push   0xc000e800
c001ab20:	6a 06                	push   0x6
c001ab22:	e8 c8 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab27:	83 c4 0c             	add    esp,0xc
c001ab2a:	6a 00                	push   0x0
c001ab2c:	68 98 e8 00 c0       	push   0xc000e898
c001ab31:	6a 08                	push   0x8
c001ab33:	e8 b7 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab38:	83 c4 0c             	add    esp,0xc
c001ab3b:	6a 00                	push   0x0
c001ab3d:	68 58 e7 00 c0       	push   0xc000e758
c001ab42:	6a 0d                	push   0xd
c001ab44:	e8 a6 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab49:	83 c4 0c             	add    esp,0xc
c001ab4c:	6a 00                	push   0x0
c001ab4e:	68 ac e7 00 c0       	push   0xc000e7ac
c001ab53:	6a 0e                	push   0xe
c001ab55:	e8 95 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab5a:	83 c4 0c             	add    esp,0xc
c001ab5d:	6a 00                	push   0x0
c001ab5f:	68 54 e8 00 c0       	push   0xc000e854
c001ab64:	6a 00                	push   0x0
c001ab66:	e8 84 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab6b:	83 c4 0c             	add    esp,0xc
c001ab6e:	6a 00                	push   0x0
c001ab70:	68 54 e8 00 c0       	push   0xc000e854
c001ab75:	6a 01                	push   0x1
c001ab77:	e8 73 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab7c:	83 c4 0c             	add    esp,0xc
c001ab7f:	6a 00                	push   0x0
c001ab81:	68 54 e8 00 c0       	push   0xc000e854
c001ab86:	6a 03                	push   0x3
c001ab88:	e8 62 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab8d:	83 c4 0c             	add    esp,0xc
c001ab90:	6a 00                	push   0x0
c001ab92:	68 54 e8 00 c0       	push   0xc000e854
c001ab97:	6a 04                	push   0x4
c001ab99:	e8 51 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ab9e:	83 c4 0c             	add    esp,0xc
c001aba1:	6a 00                	push   0x0
c001aba3:	68 54 e8 00 c0       	push   0xc000e854
c001aba8:	6a 05                	push   0x5
c001abaa:	e8 40 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001abaf:	83 c4 0c             	add    esp,0xc
c001abb2:	6a 00                	push   0x0
c001abb4:	68 54 e8 00 c0       	push   0xc000e854
c001abb9:	6a 00                	push   0x0
c001abbb:	e8 2f 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001abc0:	83 c4 0c             	add    esp,0xc
c001abc3:	6a 00                	push   0x0
c001abc5:	68 54 e8 00 c0       	push   0xc000e854
c001abca:	6a 01                	push   0x1
c001abcc:	e8 1e 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001abd1:	83 c4 0c             	add    esp,0xc
c001abd4:	6a 00                	push   0x0
c001abd6:	68 54 e8 00 c0       	push   0xc000e854
c001abdb:	6a 09                	push   0x9
c001abdd:	e8 0d 05 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001abe2:	83 c4 0c             	add    esp,0xc
c001abe5:	6a 00                	push   0x0
c001abe7:	68 54 e8 00 c0       	push   0xc000e854
c001abec:	6a 0a                	push   0xa
c001abee:	e8 fc 04 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001abf3:	83 c4 0c             	add    esp,0xc
c001abf6:	6a 00                	push   0x0
c001abf8:	68 54 e8 00 c0       	push   0xc000e854
c001abfd:	6a 0b                	push   0xb
c001abff:	e8 eb 04 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	50                   	push   eax
c001ac08:	6a 00                	push   0x0
c001ac0a:	68 54 e8 00 c0       	push   0xc000e854
c001ac0f:	53                   	push   ebx
c001ac10:	43                   	inc    ebx
c001ac11:	e8 d9 04 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	83 fb 1e             	cmp    ebx,0x1e
c001ac1c:	75 e9                	jne    c001ac07 <HalInitialise()+0x169>
c001ac1e:	50                   	push   eax
c001ac1f:	6a 00                	push   0x0
c001ac21:	68 98 1f 01 c0       	push   0xc0011f98
c001ac26:	6a 60                	push   0x60
c001ac28:	e8 c2 04 00 00       	call   c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac2d:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001ac32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ac3c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001ac43:	e8 03 4c ff ff       	call   c000f84b <malloc>
c001ac48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac4b:	89 c3                	mov    ebx,eax
c001ac4d:	e8 e8 0e 00 00       	call   c001bb3a <RTC::RTC()>
c001ac52:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001ac5c:	5a                   	pop    edx
c001ac5d:	59                   	pop    ecx
c001ac5e:	53                   	push   ebx
c001ac5f:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c001ac65:	e8 ea ed fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ac6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac6c:	6a 00                	push   0x0
c001ac6e:	6a 00                	push   0x0
c001ac70:	6a 00                	push   0x0
c001ac72:	53                   	push   ebx
c001ac73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac76:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001ac7b:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001ac81:	83 c4 28             	add    esp,0x28
c001ac84:	5b                   	pop    ebx
c001ac85:	c3                   	ret    

c001ac86 <HalMakeBeep(int)>:
c001ac86:	53                   	push   ebx
c001ac87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ac8b:	85 db                	test   ebx,ebx
c001ac8d:	75 07                	jne    c001ac96 <HalMakeBeep(int)+0x10>
c001ac8f:	e4 61                	in     al,0x61
c001ac91:	83 e0 fc             	and    eax,0xfffffffc
c001ac94:	eb 26                	jmp    c001acbc <HalMakeBeep(int)+0x36>
c001ac96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ac9b:	99                   	cdq    
c001ac9c:	f7 fb                	idiv   ebx
c001ac9e:	89 c1                	mov    ecx,eax
c001aca0:	b0 b6                	mov    al,0xb6
c001aca2:	e6 43                	out    0x43,al
c001aca4:	88 c8                	mov    al,cl
c001aca6:	e6 42                	out    0x42,al
c001aca8:	89 c8                	mov    eax,ecx
c001acaa:	c1 e8 08             	shr    eax,0x8
c001acad:	e6 42                	out    0x42,al
c001acaf:	e4 61                	in     al,0x61
c001acb1:	89 c2                	mov    edx,eax
c001acb3:	83 ca 03             	or     edx,0x3
c001acb6:	38 d0                	cmp    al,dl
c001acb8:	74 04                	je     c001acbe <HalMakeBeep(int)+0x38>
c001acba:	88 d0                	mov    al,dl
c001acbc:	e6 61                	out    0x61,al
c001acbe:	5b                   	pop    ebx
c001acbf:	c3                   	ret    

c001acc0 <HalGetRand()>:
c001acc0:	31 c0                	xor    eax,eax
c001acc2:	c3                   	ret    

c001acc3 <HalEndOfInterrupt(int)>:
c001acc3:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001acca:	74 1d                	je     c001ace9 <HalEndOfInterrupt(int)+0x26>
c001accc:	83 ec 18             	sub    esp,0x18
c001accf:	6a 1b                	push   0x1b
c001acd1:	e8 d7 f4 ff ff       	call   c001a1ad <x86rdmsr(unsigned int)>
c001acd6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001acdb:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ace5:	83 c4 1c             	add    esp,0x1c
c001ace8:	c3                   	ret    
c001ace9:	e9 62 08 00 00       	jmp    c001b550 <picEOI(int)>

c001acee <CPU::CPU()>:
c001acee:	83 ec 0c             	sub    esp,0xc
c001acf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf5:	83 ec 08             	sub    esp,0x8
c001acf8:	68 c6 59 02 c0       	push   0xc00259c6
c001acfd:	50                   	push   eax
c001acfe:	e8 b3 ee fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001ad03:	83 c4 10             	add    esp,0x10
c001ad06:	ba c4 5c 02 c0       	mov    edx,0xc0025cc4
c001ad0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0f:	89 10                	mov    DWORD PTR [eax],edx
c001ad11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad15:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ad1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad23:	05 64 01 00 00       	add    eax,0x164
c001ad28:	83 ec 0c             	sub    esp,0xc
c001ad2b:	50                   	push   eax
c001ad2c:	e8 b9 3b ff ff       	call   c000e8ea <GDT::GDT()>
c001ad31:	83 c4 10             	add    esp,0x10
c001ad34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad38:	05 68 09 00 00       	add    eax,0x968
c001ad3d:	83 ec 0c             	sub    esp,0xc
c001ad40:	50                   	push   eax
c001ad41:	e8 f6 3d ff ff       	call   c000eb3c <IDT::IDT()>
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4d:	05 68 11 00 00       	add    eax,0x1168
c001ad52:	83 ec 0c             	sub    esp,0xc
c001ad55:	50                   	push   eax
c001ad56:	e8 8d 7d ff ff       	call   c0012ae8 <TSS::TSS()>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad62:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ad6c:	90                   	nop
c001ad6d:	83 c4 0c             	add    esp,0xc
c001ad70:	c3                   	ret    
c001ad71:	90                   	nop

c001ad72 <CPU::setupSMEP()>:
c001ad72:	0f 20 e0             	mov    eax,cr4
c001ad75:	0d 00 00 10 00       	or     eax,0x100000
c001ad7a:	0f 22 e0             	mov    cr4,eax
c001ad7d:	c3                   	ret    

c001ad7e <CPU::setupUMIP()>:
c001ad7e:	0f 20 e0             	mov    eax,cr4
c001ad81:	80 cc 08             	or     ah,0x8
c001ad84:	0f 22 e0             	mov    cr4,eax
c001ad87:	c3                   	ret    

c001ad88 <CPU::setupTSC()>:
c001ad88:	0f 20 e0             	mov    eax,cr4
c001ad8b:	83 c8 04             	or     eax,0x4
c001ad8e:	0f 22 e0             	mov    cr4,eax
c001ad91:	c3                   	ret    

c001ad92 <CPU::setupLargePages()>:
c001ad92:	0f 20 e0             	mov    eax,cr4
c001ad95:	83 c8 10             	or     eax,0x10
c001ad98:	0f 22 e0             	mov    cr4,eax
c001ad9b:	c3                   	ret    

c001ad9c <CPU::setupPAT()>:
c001ad9c:	f6 05 4c d4 02 c0 08 	test   BYTE PTR ds:0xc002d44c,0x8
c001ada3:	74 28                	je     c001adcd <CPU::setupPAT()+0x31>
c001ada5:	53                   	push   ebx
c001ada6:	83 ec 14             	sub    esp,0x14
c001ada9:	68 77 02 00 00       	push   0x277
c001adae:	e8 fa f3 ff ff       	call   c001a1ad <x86rdmsr(unsigned int)>
c001adb3:	83 c4 0c             	add    esp,0xc
c001adb6:	83 e2 f8             	and    edx,0xfffffff8
c001adb9:	83 ca 01             	or     edx,0x1
c001adbc:	52                   	push   edx
c001adbd:	50                   	push   eax
c001adbe:	68 77 02 00 00       	push   0x277
c001adc3:	e8 23 f4 ff ff       	call   c001a1eb <x86wrmsr(unsigned int, unsigned long long)>
c001adc8:	83 c4 18             	add    esp,0x18
c001adcb:	5b                   	pop    ebx
c001adcc:	c3                   	ret    
c001adcd:	c3                   	ret    

c001adce <CPU::setupMTRR()>:
c001adce:	c3                   	ret    
c001adcf:	90                   	nop

c001add0 <CPU::setupGlobalPages()>:
c001add0:	0f 20 e0             	mov    eax,cr4
c001add3:	0c 80                	or     al,0x80
c001add5:	0f 22 e0             	mov    cr4,eax
c001add8:	c3                   	ret    
c001add9:	90                   	nop

c001adda <CPU::allowUsermodeDataAccess()>:
c001adda:	f6 05 4f d4 02 c0 40 	test   BYTE PTR ds:0xc002d44f,0x40
c001ade1:	74 03                	je     c001ade6 <CPU::allowUsermodeDataAccess()+0xc>
c001ade3:	0f 01 cb             	stac   
c001ade6:	c3                   	ret    
c001ade7:	90                   	nop

c001ade8 <CPU::prohibitUsermodeDataAccess()>:
c001ade8:	f6 05 4f d4 02 c0 40 	test   BYTE PTR ds:0xc002d44f,0x40
c001adef:	74 03                	je     c001adf4 <CPU::prohibitUsermodeDataAccess()+0xc>
c001adf1:	0f 01 ca             	clac   
c001adf4:	c3                   	ret    
c001adf5:	90                   	nop

c001adf6 <CPU::setupSMAP()>:
c001adf6:	0f 20 e0             	mov    eax,cr4
c001adf9:	0d 00 00 20 00       	or     eax,0x200000
c001adfe:	0f 22 e0             	mov    cr4,eax
c001ae01:	eb e5                	jmp    c001ade8 <CPU::prohibitUsermodeDataAccess()>
c001ae03:	90                   	nop

c001ae04 <CPU::setupFeatures()>:
c001ae04:	53                   	push   ebx
c001ae05:	83 ec 08             	sub    esp,0x8
c001ae08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae0c:	f6 05 4f d4 02 c0 20 	test   BYTE PTR ds:0xc002d44f,0x20
c001ae13:	74 18                	je     c001ae2d <CPU::setupFeatures()+0x29>
c001ae15:	83 ec 0c             	sub    esp,0xc
c001ae18:	68 33 5c 02 c0       	push   0xc0025c33
c001ae1d:	e8 5a c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ae22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae25:	e8 54 ff ff ff       	call   c001ad7e <CPU::setupUMIP()>
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	f6 05 4e d4 02 c0 08 	test   BYTE PTR ds:0xc002d44e,0x8
c001ae34:	74 18                	je     c001ae4e <CPU::setupFeatures()+0x4a>
c001ae36:	83 ec 0c             	sub    esp,0xc
c001ae39:	68 3d 5c 02 c0       	push   0xc0025c3d
c001ae3e:	e8 39 c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ae43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae46:	e8 3d ff ff ff       	call   c001ad88 <CPU::setupTSC()>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	f6 05 4e d4 02 c0 20 	test   BYTE PTR ds:0xc002d44e,0x20
c001ae55:	74 18                	je     c001ae6f <CPU::setupFeatures()+0x6b>
c001ae57:	83 ec 0c             	sub    esp,0xc
c001ae5a:	68 46 5c 02 c0       	push   0xc0025c46
c001ae5f:	e8 18 c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ae64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae67:	e8 26 ff ff ff       	call   c001ad92 <CPU::setupLargePages()>
c001ae6c:	83 c4 10             	add    esp,0x10
c001ae6f:	f6 05 4e d4 02 c0 40 	test   BYTE PTR ds:0xc002d44e,0x40
c001ae76:	74 18                	je     c001ae90 <CPU::setupFeatures()+0x8c>
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	68 4f 5c 02 c0       	push   0xc0025c4f
c001ae80:	e8 f7 c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ae85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae88:	e8 43 ff ff ff       	call   c001add0 <CPU::setupGlobalPages()>
c001ae8d:	83 c4 10             	add    esp,0x10
c001ae90:	f6 05 4e d4 02 c0 80 	test   BYTE PTR ds:0xc002d44e,0x80
c001ae97:	74 18                	je     c001aeb1 <CPU::setupFeatures()+0xad>
c001ae99:	83 ec 0c             	sub    esp,0xc
c001ae9c:	68 61 5c 02 c0       	push   0xc0025c61
c001aea1:	e8 d6 c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aea6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aea9:	e8 ee fe ff ff       	call   c001ad9c <CPU::setupPAT()>
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	f6 05 50 d4 02 c0 04 	test   BYTE PTR ds:0xc002d450,0x4
c001aeb8:	74 11                	je     c001aecb <CPU::setupFeatures()+0xc7>
c001aeba:	c7 44 24 10 6a 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025c6a
c001aec2:	83 c4 08             	add    esp,0x8
c001aec5:	5b                   	pop    ebx
c001aec6:	e9 b1 c0 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001aecb:	83 c4 08             	add    esp,0x8
c001aece:	5b                   	pop    ebx
c001aecf:	c3                   	ret    

c001aed0 <CPU::open(int, int, void*)>:
c001aed0:	55                   	push   ebp
c001aed1:	57                   	push   edi
c001aed2:	56                   	push   esi
c001aed3:	53                   	push   ebx
c001aed4:	83 ec 18             	sub    esp,0x18
c001aed7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aedb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aedf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001aee3:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001aee9:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001aeef:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001aef5:	50                   	push   eax
c001aef6:	e8 51 3a ff ff       	call   c000e94c <GDT::setup()>
c001aefb:	83 c4 0c             	add    esp,0xc
c001aefe:	6a 00                	push   0x0
c001af00:	68 ef be ad de       	push   0xdeadbeef
c001af05:	55                   	push   ebp
c001af06:	e8 21 7c ff ff       	call   c0012b2c <TSS::setup(unsigned long, unsigned long)>
c001af0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af0e:	e8 f9 7b ff ff       	call   c0012b0c <TSS::flush()>
c001af13:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001af19:	89 04 24             	mov    DWORD PTR [esp],eax
c001af1c:	e8 91 3c ff ff       	call   c000ebb2 <IDT::setup()>
c001af21:	b8 00 04 00 00       	mov    eax,0x400
c001af26:	0f 23 f8             	mov    dr7,eax
c001af29:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001af33:	e8 5c 4f ff ff       	call   c000fe94 <Phys::allocatePage()>
c001af38:	83 c4 10             	add    esp,0x10
c001af3b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001af41:	85 f6                	test   esi,esi
c001af43:	89 38                	mov    DWORD PTR [eax],edi
c001af45:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001af4b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001af4e:	74 10                	je     c001af60 <CPU::open(int, int, void*)+0x90>
c001af50:	50                   	push   eax
c001af51:	50                   	push   eax
c001af52:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001af58:	56                   	push   esi
c001af59:	e8 7a 85 ff ff       	call   c00134d8 <VAS::setCPUSpecific(unsigned long)>
c001af5e:	eb 0d                	jmp    c001af6d <CPU::open(int, int, void*)+0x9d>
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	68 74 5c 02 c0       	push   0xc0025c74
c001af68:	e8 33 4d ff ff       	call   c000fca0 <KePanic(char const*)>
c001af6d:	83 c4 10             	add    esp,0x10
c001af70:	83 ec 0c             	sub    esp,0xc
c001af73:	68 82 5c 02 c0       	push   0xc0025c82
c001af78:	e8 3c 23 ff ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001af7d:	e8 1c fb ff ff       	call   c001aa9e <HalInitialise()>
c001af82:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001af89:	e8 de 22 ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001af8e:	0f b6 c0             	movzx  eax,al
c001af91:	83 f8 01             	cmp    eax,0x1
c001af94:	19 c0                	sbb    eax,eax
c001af96:	83 e0 46             	and    eax,0x46
c001af99:	83 c0 1e             	add    eax,0x1e
c001af9c:	89 04 24             	mov    DWORD PTR [esp],eax
c001af9f:	e8 15 01 ff ff       	call   c000b0b9 <setupTimer(int)>
c001afa4:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001afaa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001afb1:	e8 b6 22 ff ff       	call   c000d26c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	84 c0                	test   al,al
c001afbb:	74 0c                	je     c001afc9 <CPU::open(int, int, void*)+0xf9>
c001afbd:	83 ec 0c             	sub    esp,0xc
c001afc0:	53                   	push   ebx
c001afc1:	e8 3e fe ff ff       	call   c001ae04 <CPU::setupFeatures()>
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	83 c4 0c             	add    esp,0xc
c001afcc:	31 c0                	xor    eax,eax
c001afce:	5b                   	pop    ebx
c001afcf:	5e                   	pop    esi
c001afd0:	5f                   	pop    edi
c001afd1:	5d                   	pop    ebp
c001afd2:	c3                   	ret    

c001afd3 <convertLegacyIRQNumber(int)>:
c001afd3:	83 ec 0c             	sub    esp,0xc
c001afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afda:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001afe1:	74 0c                	je     c001afef <convertLegacyIRQNumber(int)+0x1c>
c001afe3:	83 f8 0f             	cmp    eax,0xf
c001afe6:	7f 0b                	jg     c001aff3 <convertLegacyIRQNumber(int)+0x20>
c001afe8:	0f b6 80 e8 67 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9818]
c001afef:	83 c4 0c             	add    esp,0xc
c001aff2:	c3                   	ret    
c001aff3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aff7:	83 ec 0c             	sub    esp,0xc
c001affa:	68 e8 5c 02 c0       	push   0xc0025ce8
c001afff:	e8 9c 4c ff ff       	call   c000fca0 <KePanic(char const*)>
c001b004:	83 c4 10             	add    esp,0x10
c001b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b00b:	83 c4 0c             	add    esp,0xc
c001b00e:	c3                   	ret    

c001b00f <KeSetupInterrupts()>:
c001b00f:	31 c0                	xor    eax,eax
c001b011:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001b01b:	c7 80 60 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba0],0x0
c001b025:	c7 80 64 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1b9c],0x0
c001b02f:	c7 80 64 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2b9c],0x0
c001b039:	c7 80 68 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1b98],0x0
c001b043:	c7 80 68 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2b98],0x0
c001b04d:	c7 80 6c e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1b94],0x0
c001b057:	c7 80 6c d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2b94],0x0
c001b061:	83 c0 10             	add    eax,0x10
c001b064:	3d 00 10 00 00       	cmp    eax,0x1000
c001b069:	75 a6                	jne    c001b011 <KeSetupInterrupts()+0x2>
c001b06b:	c3                   	ret    

c001b06c <int_handler>:
c001b06c:	55                   	push   ebp
c001b06d:	57                   	push   edi
c001b06e:	56                   	push   esi
c001b06f:	53                   	push   ebx
c001b070:	83 ec 0c             	sub    esp,0xc
c001b073:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b077:	eb 02                	jmp    c001b07b <int_handler+0xf>
c001b079:	fa                   	cli    
c001b07a:	f4                   	hlt    
c001b07b:	e8 1a 4c ff ff       	call   c000fc9a <KeIsKernelInPanic()>
c001b080:	84 c0                	test   al,al
c001b082:	75 f5                	jne    c001b079 <int_handler+0xd>
c001b084:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b087:	8d 46 e0             	lea    eax,[esi-0x20]
c001b08a:	83 f8 17             	cmp    eax,0x17
c001b08d:	76 40                	jbe    c001b0cf <int_handler+0x63>
c001b08f:	c1 e6 04             	shl    esi,0x4
c001b092:	31 db                	xor    ebx,ebx
c001b094:	8d ae 60 e4 02 c0    	lea    ebp,[esi-0x3ffd1ba0]
c001b09a:	81 c6 60 d4 02 c0    	add    esi,0xc002d460
c001b0a0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b0a4:	85 c0                	test   eax,eax
c001b0a6:	74 13                	je     c001b0bb <int_handler+0x4f>
c001b0a8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b0ab:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b0af:	74 2c                	je     c001b0dd <int_handler+0x71>
c001b0b1:	83 ec 08             	sub    esp,0x8
c001b0b4:	52                   	push   edx
c001b0b5:	57                   	push   edi
c001b0b6:	ff d0                	call   eax
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	83 c3 01             	add    ebx,0x1
c001b0be:	83 fb 04             	cmp    ebx,0x4
c001b0c1:	75 dd                	jne    c001b0a0 <int_handler+0x34>
c001b0c3:	83 c4 0c             	add    esp,0xc
c001b0c6:	31 c0                	xor    eax,eax
c001b0c8:	5b                   	pop    ebx
c001b0c9:	31 d2                	xor    edx,edx
c001b0cb:	5e                   	pop    esi
c001b0cc:	5f                   	pop    edi
c001b0cd:	5d                   	pop    ebp
c001b0ce:	c3                   	ret    
c001b0cf:	83 ec 0c             	sub    esp,0xc
c001b0d2:	50                   	push   eax
c001b0d3:	e8 eb fb ff ff       	call   c001acc3 <HalEndOfInterrupt(int)>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	eb b2                	jmp    c001b08f <int_handler+0x23>
c001b0dd:	83 ec 08             	sub    esp,0x8
c001b0e0:	52                   	push   edx
c001b0e1:	57                   	push   edi
c001b0e2:	ff d0                	call   eax
c001b0e4:	83 c4 10             	add    esp,0x10
c001b0e7:	83 c4 0c             	add    esp,0xc
c001b0ea:	5b                   	pop    ebx
c001b0eb:	5e                   	pop    esi
c001b0ec:	5f                   	pop    edi
c001b0ed:	5d                   	pop    ebp
c001b0ee:	c3                   	ret    

c001b0ef <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b0ef:	56                   	push   esi
c001b0f0:	31 c0                	xor    eax,eax
c001b0f2:	53                   	push   ebx
c001b0f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b0f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0fb:	89 ca                	mov    edx,ecx
c001b0fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b101:	c1 e2 04             	shl    edx,0x4
c001b104:	83 bc 82 60 e4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1ba0],0x0
c001b10c:	74 17                	je     c001b125 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b10e:	83 c0 01             	add    eax,0x1
c001b111:	83 f8 04             	cmp    eax,0x4
c001b114:	75 ee                	jne    c001b104 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b116:	c7 44 24 0c 49 5d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025d49
c001b11e:	5b                   	pop    ebx
c001b11f:	5e                   	pop    esi
c001b120:	e9 7b 4b ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001b125:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b128:	89 1c 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],ebx
c001b12f:	89 34 85 60 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ba0],esi
c001b136:	5b                   	pop    ebx
c001b137:	5e                   	pop    esi
c001b138:	c3                   	ret    

c001b139 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b139:	57                   	push   edi
c001b13a:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001b141:	56                   	push   esi
c001b142:	53                   	push   ebx
c001b143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b147:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b14b:	74 54                	je     c001b1a1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001b14d:	89 c7                	mov    edi,eax
c001b14f:	84 c0                	test   al,al
c001b151:	74 1d                	je     c001b170 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b153:	83 fe 0f             	cmp    esi,0xf
c001b156:	0f 8f d5 00 00 00    	jg     c001b231 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001b15c:	0f b6 b6 e8 67 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9818]
c001b163:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001b16b:	d1 ef                	shr    edi,1
c001b16d:	83 e7 01             	and    edi,0x1
c001b170:	83 ec 08             	sub    esp,0x8
c001b173:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c001b178:	31 db                	xor    ebx,ebx
c001b17a:	50                   	push   eax
c001b17b:	68 56 5d 02 c0       	push   0xc0025d56
c001b180:	e8 f7 bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c001b18d:	85 c0                	test   eax,eax
c001b18f:	7f 55                	jg     c001b1e6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	68 6d 5d 02 c0       	push   0xc0025d6d
c001b199:	e8 02 4b ff ff       	call   c000fca0 <KePanic(char const*)>
c001b19e:	83 c4 10             	add    esp,0x10
c001b1a1:	8d 7e 20             	lea    edi,[esi+0x20]
c001b1a4:	89 f8                	mov    eax,edi
c001b1a6:	31 d2                	xor    edx,edx
c001b1a8:	c1 e0 04             	shl    eax,0x4
c001b1ab:	8b 8c 90 60 e4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1ba0]
c001b1b2:	85 c9                	test   ecx,ecx
c001b1b4:	0f 84 8e 00 00 00    	je     c001b248 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001b1ba:	83 c2 01             	add    edx,0x1
c001b1bd:	83 fa 04             	cmp    edx,0x4
c001b1c0:	75 e9                	jne    c001b1ab <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b1c2:	83 ec 0c             	sub    esp,0xc
c001b1c5:	68 24 5d 02 c0       	push   0xc0025d24
c001b1ca:	e8 d1 4a ff ff       	call   c000fca0 <KePanic(char const*)>
c001b1cf:	83 c4 10             	add    esp,0x10
c001b1d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1d7:	5b                   	pop    ebx
c001b1d8:	5e                   	pop    esi
c001b1d9:	5f                   	pop    edi
c001b1da:	c3                   	ret    
c001b1db:	83 c3 01             	add    ebx,0x1
c001b1de:	39 1d c0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3c0,ebx
c001b1e4:	7e ab                	jle    c001b191 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001b1e6:	83 ec 08             	sub    esp,0x8
c001b1e9:	8b 04 9d e0 d3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2c20]
c001b1f0:	56                   	push   esi
c001b1f1:	50                   	push   eax
c001b1f2:	e8 1d dc ff ff       	call   c0018e14 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	84 c0                	test   al,al
c001b1fc:	74 dd                	je     c001b1db <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001b1fe:	83 ec 04             	sub    esp,0x4
c001b201:	89 f8                	mov    eax,edi
c001b203:	8b 1c 9d e0 d3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2c20]
c001b20a:	0f b6 f8             	movzx  edi,al
c001b20d:	57                   	push   edi
c001b20e:	8d 7e 20             	lea    edi,[esi+0x20]
c001b211:	6a 00                	push   0x0
c001b213:	89 f8                	mov    eax,edi
c001b215:	0f b6 c0             	movzx  eax,al
c001b218:	50                   	push   eax
c001b219:	89 f0                	mov    eax,esi
c001b21b:	6a 00                	push   0x0
c001b21d:	0f b6 c0             	movzx  eax,al
c001b220:	6a 00                	push   0x0
c001b222:	50                   	push   eax
c001b223:	53                   	push   ebx
c001b224:	e8 57 dd ff ff       	call   c0018f80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b229:	83 c4 20             	add    esp,0x20
c001b22c:	e9 73 ff ff ff       	jmp    c001b1a4 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001b231:	83 ec 0c             	sub    esp,0xc
c001b234:	31 ff                	xor    edi,edi
c001b236:	68 e8 5c 02 c0       	push   0xc0025ce8
c001b23b:	e8 60 4a ff ff       	call   c000fca0 <KePanic(char const*)>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	e9 28 ff ff ff       	jmp    c001b170 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b248:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b24b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b24f:	89 14 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],edx
c001b256:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b25a:	5b                   	pop    ebx
c001b25b:	89 14 85 60 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ba0],edx
c001b262:	89 f0                	mov    eax,esi
c001b264:	5e                   	pop    esi
c001b265:	5f                   	pop    edi
c001b266:	c3                   	ret    

c001b267 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b26b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b26f:	c1 e0 04             	shl    eax,0x4
c001b272:	8d 50 10             	lea    edx,[eax+0x10]
c001b275:	39 88 60 e4 02 c0    	cmp    DWORD PTR [eax-0x3ffd1ba0],ecx
c001b27b:	74 08                	je     c001b285 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b27d:	83 c0 04             	add    eax,0x4
c001b280:	39 d0                	cmp    eax,edx
c001b282:	75 f1                	jne    c001b275 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b284:	c3                   	ret    
c001b285:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001b28f:	c7 80 60 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba0],0x0
c001b299:	eb e2                	jmp    c001b27d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b29b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b29b:	53                   	push   ebx
c001b29c:	83 ec 08             	sub    esp,0x8
c001b29f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b2a8:	74 09                	je     c001b2b3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b2aa:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001b2b1:	75 37                	jne    c001b2ea <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b7:	83 c0 20             	add    eax,0x20
c001b2ba:	c1 e0 04             	shl    eax,0x4
c001b2bd:	8d 50 10             	lea    edx,[eax+0x10]
c001b2c0:	39 98 60 e4 02 c0    	cmp    DWORD PTR [eax-0x3ffd1ba0],ebx
c001b2c6:	74 0c                	je     c001b2d4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b2c8:	83 c0 04             	add    eax,0x4
c001b2cb:	39 d0                	cmp    eax,edx
c001b2cd:	75 f1                	jne    c001b2c0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b2cf:	83 c4 08             	add    esp,0x8
c001b2d2:	5b                   	pop    ebx
c001b2d3:	c3                   	ret    
c001b2d4:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001b2de:	c7 80 60 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba0],0x0
c001b2e8:	eb de                	jmp    c001b2c8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b2ea:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b2ef:	7f 11                	jg     c001b302 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b2f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f5:	0f b6 80 e8 67 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9818]
c001b2fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b300:	eb b1                	jmp    c001b2b3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 7a 5d 02 c0       	push   0xc0025d7a
c001b30a:	e8 91 49 ff ff       	call   c000fca0 <KePanic(char const*)>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	eb 9f                	jmp    c001b2b3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001b314 <picIoWait()>:
c001b314:	eb 00                	jmp    c001b316 <picIoWait()+0x2>
c001b316:	eb 00                	jmp    c001b318 <picIoWait()+0x4>
c001b318:	90                   	nop
c001b319:	c3                   	ret    
c001b31a:	66 90                	xchg   ax,ax

c001b31c <picDisable()>:
c001b31c:	83 ec 10             	sub    esp,0x10
c001b31f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b326:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b32b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b32f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b334:	ee                   	out    dx,al
c001b335:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b33c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b341:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b345:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b34a:	ee                   	out    dx,al
c001b34b:	90                   	nop
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	c3                   	ret    

c001b350 <picGetIRQReg(int)>:
c001b350:	83 ec 10             	sub    esp,0x10
c001b353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b357:	0f b6 c0             	movzx  eax,al
c001b35a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b361:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b365:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b369:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b36e:	ee                   	out    dx,al
c001b36f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b373:	0f b6 c0             	movzx  eax,al
c001b376:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b37d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b381:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b385:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b38a:	ee                   	out    dx,al
c001b38b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b392:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b397:	89 c2                	mov    edx,eax
c001b399:	ec                   	in     al,dx
c001b39a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b39e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b3a2:	0f b6 c0             	movzx  eax,al
c001b3a5:	c1 e0 08             	shl    eax,0x8
c001b3a8:	89 c1                	mov    ecx,eax
c001b3aa:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b3b1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b3b6:	89 c2                	mov    edx,eax
c001b3b8:	ec                   	in     al,dx
c001b3b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b3bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b3c1:	0f b6 c0             	movzx  eax,al
c001b3c4:	09 c8                	or     eax,ecx
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	c3                   	ret    
c001b3ca:	66 90                	xchg   ax,ax

c001b3cc <picOpen()>:
c001b3cc:	83 ec 50             	sub    esp,0x50
c001b3cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b3d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b3db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b3df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3e3:	ee                   	out    dx,al
c001b3e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b3eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b3f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b3f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3f8:	ee                   	out    dx,al
c001b3f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b401:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b409:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b414:	89 c2                	mov    edx,eax
c001b416:	ec                   	in     al,dx
c001b417:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b41b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b41f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b423:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b42a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b42e:	89 c2                	mov    edx,eax
c001b430:	ec                   	in     al,dx
c001b431:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b435:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b439:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b43d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b444:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b449:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b44d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b451:	ee                   	out    dx,al
c001b452:	e8 bd fe ff ff       	call   c001b314 <picIoWait()>
c001b457:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b45e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b463:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b467:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b46b:	ee                   	out    dx,al
c001b46c:	e8 a3 fe ff ff       	call   c001b314 <picIoWait()>
c001b471:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b475:	0f b6 c0             	movzx  eax,al
c001b478:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b47f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b483:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b487:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b48b:	ee                   	out    dx,al
c001b48c:	e8 83 fe ff ff       	call   c001b314 <picIoWait()>
c001b491:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b495:	0f b6 c0             	movzx  eax,al
c001b498:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b49f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b4a3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b4a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4ab:	ee                   	out    dx,al
c001b4ac:	e8 63 fe ff ff       	call   c001b314 <picIoWait()>
c001b4b1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b4b8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b4bd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b4c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4c5:	ee                   	out    dx,al
c001b4c6:	e8 49 fe ff ff       	call   c001b314 <picIoWait()>
c001b4cb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b4d2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b4d7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b4db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4df:	ee                   	out    dx,al
c001b4e0:	e8 2f fe ff ff       	call   c001b314 <picIoWait()>
c001b4e5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b4ec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b4f1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b4f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b4f9:	ee                   	out    dx,al
c001b4fa:	e8 15 fe ff ff       	call   c001b314 <picIoWait()>
c001b4ff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b506:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b50b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b50f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b513:	ee                   	out    dx,al
c001b514:	e8 fb fd ff ff       	call   c001b314 <picIoWait()>
c001b519:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b51e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b525:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b529:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b52d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b531:	ee                   	out    dx,al
c001b532:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b537:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b53e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b542:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b546:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b54a:	ee                   	out    dx,al
c001b54b:	90                   	nop
c001b54c:	83 c4 50             	add    esp,0x50
c001b54f:	c3                   	ret    

c001b550 <picEOI(int)>:
c001b550:	83 ec 10             	sub    esp,0x10
c001b553:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b558:	75 1e                	jne    c001b578 <picEOI(int)+0x28>
c001b55a:	6a 0b                	push   0xb
c001b55c:	e8 ef fd ff ff       	call   c001b350 <picGetIRQReg(int)>
c001b561:	83 c4 04             	add    esp,0x4
c001b564:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b569:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b56e:	25 80 00 00 00       	and    eax,0x80
c001b573:	74 73                	je     c001b5e8 <picEOI(int)+0x98>
c001b575:	8d 76 00             	lea    esi,[esi+0x0]
c001b578:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b57d:	75 31                	jne    c001b5b0 <picEOI(int)+0x60>
c001b57f:	6a 0b                	push   0xb
c001b581:	e8 ca fd ff ff       	call   c001b350 <picGetIRQReg(int)>
c001b586:	83 c4 04             	add    esp,0x4
c001b589:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b58e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b592:	98                   	cwde   
c001b593:	85 c0                	test   eax,eax
c001b595:	78 19                	js     c001b5b0 <picEOI(int)+0x60>
c001b597:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b59e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b5a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b5a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b5ac:	ee                   	out    dx,al
c001b5ad:	eb 3d                	jmp    c001b5ec <picEOI(int)+0x9c>
c001b5af:	90                   	nop
c001b5b0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b5b5:	7e 19                	jle    c001b5d0 <picEOI(int)+0x80>
c001b5b7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b5be:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b5c3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b5c7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b5cc:	ee                   	out    dx,al
c001b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5d0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b5d7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b5dc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b5e0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b5e5:	ee                   	out    dx,al
c001b5e6:	eb 04                	jmp    c001b5ec <picEOI(int)+0x9c>
c001b5e8:	90                   	nop
c001b5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5ec:	83 c4 10             	add    esp,0x10
c001b5ef:	c3                   	ret    

c001b5f0 <RTC::open(int, int, void*)>:
c001b5f0:	31 c0                	xor    eax,eax
c001b5f2:	c3                   	ret    
c001b5f3:	90                   	nop

c001b5f4 <RTC::close(int, int, void*)>:
c001b5f4:	31 c0                	xor    eax,eax
c001b5f6:	c3                   	ret    
c001b5f7:	90                   	nop

c001b5f8 <RTC::timeInSecondsUTC()>:
c001b5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b602:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b608:	c3                   	ret    
c001b609:	90                   	nop

c001b60a <RTC::timeInDatetimeUTC()>:
c001b60a:	53                   	push   ebx
c001b60b:	83 ec 14             	sub    esp,0x14
c001b60e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b616:	8b 10                	mov    edx,DWORD PTR [eax]
c001b618:	50                   	push   eax
c001b619:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	52                   	push   edx
c001b620:	50                   	push   eax
c001b621:	53                   	push   ebx
c001b622:	e8 23 e0 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b627:	89 d8                	mov    eax,ebx
c001b629:	83 c4 14             	add    esp,0x14
c001b62c:	5b                   	pop    ebx
c001b62d:	c2 04 00             	ret    0x4

c001b630 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b630:	56                   	push   esi
c001b631:	53                   	push   ebx
c001b632:	83 ec 14             	sub    esp,0x14
c001b635:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b639:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b63b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b63e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b642:	52                   	push   edx
c001b643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b64b:	50                   	push   eax
c001b64c:	e8 f9 df fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b655:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b659:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b65d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b661:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b665:	89 f0                	mov    eax,esi
c001b667:	83 c4 20             	add    esp,0x20
c001b66a:	5b                   	pop    ebx
c001b66b:	5e                   	pop    esi
c001b66c:	ff e0                	jmp    eax

c001b66e <RTC::~RTC()>:
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	ba a4 5d 02 c0       	mov    edx,0xc0025da4
c001b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67a:	89 10                	mov    DWORD PTR [eax],edx
c001b67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	50                   	push   eax
c001b684:	e8 63 da fe ff       	call   c00090ec <Clock::~Clock()>
c001b689:	83 c4 10             	add    esp,0x10
c001b68c:	90                   	nop
c001b68d:	83 c4 0c             	add    esp,0xc
c001b690:	c3                   	ret    
c001b691:	90                   	nop

c001b692 <RTC::~RTC()>:
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	83 ec 0c             	sub    esp,0xc
c001b698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b69c:	e8 cd ff ff ff       	call   c001b66e <RTC::~RTC()>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	83 ec 08             	sub    esp,0x8
c001b6a7:	68 60 01 00 00       	push   0x160
c001b6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6b0:	e8 af 1c ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c001b6b5:	83 c4 10             	add    esp,0x10
c001b6b8:	83 c4 0c             	add    esp,0xc
c001b6bb:	c3                   	ret    

c001b6bc <RTC::get_update_in_progress_flag()>:
c001b6bc:	83 ec 18             	sub    esp,0x18
c001b6bf:	6a 0a                	push   0xa
c001b6c1:	e8 cb d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b6c6:	83 c4 1c             	add    esp,0x1c
c001b6c9:	0f b6 c0             	movzx  eax,al
c001b6cc:	c1 e8 07             	shr    eax,0x7
c001b6cf:	c3                   	ret    

c001b6d0 <RTC::completeRTCRefresh()>:
c001b6d0:	55                   	push   ebp
c001b6d1:	57                   	push   edi
c001b6d2:	56                   	push   esi
c001b6d3:	53                   	push   ebx
c001b6d4:	83 ec 3c             	sub    esp,0x3c
c001b6d7:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b6dd:	83 ec 0c             	sub    esp,0xc
c001b6e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b6e4:	e8 d3 ff ff ff       	call   c001b6bc <RTC::get_update_in_progress_flag()>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	84 c0                	test   al,al
c001b6ee:	74 0e                	je     c001b6fe <RTC::completeRTCRefresh()+0x2e>
c001b6f0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b6f6:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b6fc:	73 df                	jae    c001b6dd <RTC::completeRTCRefresh()+0xd>
c001b6fe:	83 ec 0c             	sub    esp,0xc
c001b701:	6a 00                	push   0x0
c001b703:	e8 89 d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b708:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b70f:	89 c5                	mov    ebp,eax
c001b711:	e8 7b d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b716:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b71d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b721:	e8 6b d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b726:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b72d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b731:	e8 5b d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b736:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b73d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b741:	e8 4b d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b746:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b74d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b751:	e8 3b d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b756:	0f b6 c0             	movzx  eax,al
c001b759:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b75d:	83 c4 10             	add    esp,0x10
c001b760:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b766:	83 ec 0c             	sub    esp,0xc
c001b769:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b76d:	e8 4a ff ff ff       	call   c001b6bc <RTC::get_update_in_progress_flag()>
c001b772:	83 c4 10             	add    esp,0x10
c001b775:	84 c0                	test   al,al
c001b777:	74 0e                	je     c001b787 <RTC::completeRTCRefresh()+0xb7>
c001b779:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b77f:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b785:	73 df                	jae    c001b766 <RTC::completeRTCRefresh()+0x96>
c001b787:	83 ec 0c             	sub    esp,0xc
c001b78a:	6a 00                	push   0x0
c001b78c:	e8 00 d9 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b791:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b798:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b79c:	e8 f0 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b7a1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b7a8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7ac:	e8 e0 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b7b1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b7b8:	88 c3                	mov    bl,al
c001b7ba:	e8 d2 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b7bf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b7c6:	89 c6                	mov    esi,eax
c001b7c8:	e8 c4 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b7cd:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b7d4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7d8:	e8 b4 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b7dd:	89 e9                	mov    ecx,ebp
c001b7df:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7e3:	0f b6 f8             	movzx  edi,al
c001b7e6:	83 c4 10             	add    esp,0x10
c001b7e9:	0f b6 eb             	movzx  ebp,bl
c001b7ec:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b7f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7f5:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b7fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7fe:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b802:	0f 94 c0             	sete   al
c001b805:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b809:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b80d:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b812:	0f 94 c2             	sete   dl
c001b815:	21 d0                	and    eax,edx
c001b817:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b81b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b81f:	0f 94 c2             	sete   dl
c001b822:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b826:	21 c2                	and    edx,eax
c001b828:	89 f0                	mov    eax,esi
c001b82a:	0f b6 c0             	movzx  eax,al
c001b82d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b831:	89 f0                	mov    eax,esi
c001b833:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b837:	0f 94 c0             	sete   al
c001b83a:	21 d0                	and    eax,edx
c001b83c:	31 d2                	xor    edx,edx
c001b83e:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b842:	0f 94 c2             	sete   dl
c001b845:	85 c2                	test   edx,eax
c001b847:	75 27                	jne    c001b870 <RTC::completeRTCRefresh()+0x1a0>
c001b849:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b84d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b851:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b855:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b859:	89 f0                	mov    eax,esi
c001b85b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b85f:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b863:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b867:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b86b:	e9 f0 fe ff ff       	jmp    c001b760 <RTC::completeRTCRefresh()+0x90>
c001b870:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b874:	75 d3                	jne    c001b849 <RTC::completeRTCRefresh()+0x179>
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	6a 0b                	push   0xb
c001b87b:	e8 11 d8 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	a8 04                	test   al,0x4
c001b885:	75 7a                	jne    c001b901 <RTC::completeRTCRefresh()+0x231>
c001b887:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b88b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b88f:	83 e1 0f             	and    ecx,0xf
c001b892:	c1 ea 04             	shr    edx,0x4
c001b895:	83 e6 0f             	and    esi,0xf
c001b898:	6b d2 0a             	imul   edx,edx,0xa
c001b89b:	c1 ef 04             	shr    edi,0x4
c001b89e:	01 d1                	add    ecx,edx
c001b8a0:	6b ff 0a             	imul   edi,edi,0xa
c001b8a3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b8a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b8ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b8af:	c1 ea 04             	shr    edx,0x4
c001b8b2:	83 e1 0f             	and    ecx,0xf
c001b8b5:	6b d2 0a             	imul   edx,edx,0xa
c001b8b8:	01 d1                	add    ecx,edx
c001b8ba:	89 ea                	mov    edx,ebp
c001b8bc:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b8c0:	c1 ea 04             	shr    edx,0x4
c001b8c3:	89 d9                	mov    ecx,ebx
c001b8c5:	83 e2 07             	and    edx,0x7
c001b8c8:	83 e1 0f             	and    ecx,0xf
c001b8cb:	6b d2 0a             	imul   edx,edx,0xa
c001b8ce:	83 e3 80             	and    ebx,0xffffff80
c001b8d1:	01 d1                	add    ecx,edx
c001b8d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8d7:	09 cb                	or     ebx,ecx
c001b8d9:	c1 ea 04             	shr    edx,0x4
c001b8dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b8e0:	6b d2 0a             	imul   edx,edx,0xa
c001b8e3:	83 e1 0f             	and    ecx,0xf
c001b8e6:	01 d6                	add    esi,edx
c001b8e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8ec:	c1 ea 04             	shr    edx,0x4
c001b8ef:	6b d2 0a             	imul   edx,edx,0xa
c001b8f2:	01 d1                	add    ecx,edx
c001b8f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8f8:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b8fc:	83 e2 0f             	and    edx,0xf
c001b8ff:	01 d7                	add    edi,edx
c001b901:	a8 02                	test   al,0x2
c001b903:	75 15                	jne    c001b91a <RTC::completeRTCRefresh()+0x24a>
c001b905:	f6 c3 80             	test   bl,0x80
c001b908:	74 10                	je     c001b91a <RTC::completeRTCRefresh()+0x24a>
c001b90a:	83 e3 7f             	and    ebx,0x7f
c001b90d:	b9 18 00 00 00       	mov    ecx,0x18
c001b912:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b915:	99                   	cdq    
c001b916:	f7 f9                	idiv   ecx
c001b918:	88 d3                	mov    bl,dl
c001b91a:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b920:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b926:	77 06                	ja     c001b92e <RTC::completeRTCRefresh()+0x25e>
c001b928:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b92e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b933:	31 c9                	xor    ecx,ecx
c001b935:	c1 e0 10             	shl    eax,0x10
c001b938:	89 cf                	mov    edi,ecx
c001b93a:	c1 e5 10             	shl    ebp,0x10
c001b93d:	31 d2                	xor    edx,edx
c001b93f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b945:	09 c7                	or     edi,eax
c001b947:	89 f0                	mov    eax,esi
c001b949:	89 f9                	mov    ecx,edi
c001b94b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b94f:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b953:	88 c2                	mov    dl,al
c001b955:	88 d9                	mov    cl,bl
c001b957:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b95b:	0f b7 c2             	movzx  eax,dx
c001b95e:	09 e8                	or     eax,ebp
c001b960:	89 c2                	mov    edx,eax
c001b962:	50                   	push   eax
c001b963:	50                   	push   eax
c001b964:	51                   	push   ecx
c001b965:	52                   	push   edx
c001b966:	e8 d1 d8 fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b96b:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b96f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b975:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b97b:	83 c4 4c             	add    esp,0x4c
c001b97e:	5b                   	pop    ebx
c001b97f:	5e                   	pop    esi
c001b980:	5f                   	pop    edi
c001b981:	5d                   	pop    ebp
c001b982:	c3                   	ret    
c001b983:	90                   	nop

c001b984 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b984:	55                   	push   ebp
c001b985:	57                   	push   edi
c001b986:	56                   	push   esi
c001b987:	53                   	push   ebx
c001b988:	83 ec 34             	sub    esp,0x34
c001b98b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b98f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b993:	6a 00                	push   0x0
c001b995:	89 fb                	mov    ebx,edi
c001b997:	6a 00                	push   0x0
c001b999:	e8 47 d7 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b99e:	5d                   	pop    ebp
c001b99f:	58                   	pop    eax
c001b9a0:	6a 00                	push   0x0
c001b9a2:	6a 02                	push   0x2
c001b9a4:	e8 3c d7 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b9a9:	31 d2                	xor    edx,edx
c001b9ab:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b9b2:	89 f9                	mov    ecx,edi
c001b9b4:	89 f8                	mov    eax,edi
c001b9b6:	c1 e9 10             	shr    ecx,0x10
c001b9b9:	0f b6 c4             	movzx  eax,ah
c001b9bc:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b9c0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b9c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9c8:	b9 64 00 00 00       	mov    ecx,0x64
c001b9cd:	89 f0                	mov    eax,esi
c001b9cf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b9d3:	89 f0                	mov    eax,esi
c001b9d5:	0f b6 c4             	movzx  eax,ah
c001b9d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9dc:	89 f0                	mov    eax,esi
c001b9de:	c1 e8 10             	shr    eax,0x10
c001b9e1:	f7 f1                	div    ecx
c001b9e3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b9e7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b9eb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b9ef:	e8 9d d6 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001b9f4:	83 c4 10             	add    esp,0x10
c001b9f7:	89 c5                	mov    ebp,eax
c001b9f9:	a8 04                	test   al,0x4
c001b9fb:	75 6e                	jne    c001ba6b <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b9fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	0f b6 c1             	movzx  eax,cl
c001ba06:	b9 0a 00 00 00       	mov    ecx,0xa
c001ba0b:	f7 f1                	div    ecx
c001ba0d:	c1 e0 04             	shl    eax,0x4
c001ba10:	09 d0                	or     eax,edx
c001ba12:	31 d2                	xor    edx,edx
c001ba14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba18:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ba1d:	f7 f1                	div    ecx
c001ba1f:	c1 e0 04             	shl    eax,0x4
c001ba22:	09 d0                	or     eax,edx
c001ba24:	31 d2                	xor    edx,edx
c001ba26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba2a:	0f b6 c3             	movzx  eax,bl
c001ba2d:	f7 f1                	div    ecx
c001ba2f:	c1 e0 04             	shl    eax,0x4
c001ba32:	09 d0                	or     eax,edx
c001ba34:	31 d2                	xor    edx,edx
c001ba36:	89 c3                	mov    ebx,eax
c001ba38:	89 f0                	mov    eax,esi
c001ba3a:	0f b6 c0             	movzx  eax,al
c001ba3d:	f7 f1                	div    ecx
c001ba3f:	c1 e0 04             	shl    eax,0x4
c001ba42:	09 d0                	or     eax,edx
c001ba44:	31 d2                	xor    edx,edx
c001ba46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba4f:	f7 f1                	div    ecx
c001ba51:	c1 e0 04             	shl    eax,0x4
c001ba54:	09 d0                	or     eax,edx
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba60:	f7 f1                	div    ecx
c001ba62:	c1 e0 04             	shl    eax,0x4
c001ba65:	09 d0                	or     eax,edx
c001ba67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba6b:	83 e5 02             	and    ebp,0x2
c001ba6e:	75 1e                	jne    c001ba8e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ba70:	0f b6 c3             	movzx  eax,bl
c001ba73:	83 f8 0b             	cmp    eax,0xb
c001ba76:	76 10                	jbe    c001ba88 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001ba78:	8d 53 f4             	lea    edx,[ebx-0xc]
c001ba7b:	88 d3                	mov    bl,dl
c001ba7d:	84 d2                	test   dl,dl
c001ba7f:	75 02                	jne    c001ba83 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001ba81:	b3 0c                	mov    bl,0xc
c001ba83:	83 cb 80             	or     ebx,0xffffff80
c001ba86:	eb 06                	jmp    c001ba8e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ba88:	85 c0                	test   eax,eax
c001ba8a:	75 02                	jne    c001ba8e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ba8c:	b3 0c                	mov    bl,0xc
c001ba8e:	0f b6 db             	movzx  ebx,bl
c001ba91:	50                   	push   eax
c001ba92:	50                   	push   eax
c001ba93:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001ba98:	52                   	push   edx
c001ba99:	6a 00                	push   0x0
c001ba9b:	e8 45 d6 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001baa0:	5a                   	pop    edx
c001baa1:	59                   	pop    ecx
c001baa2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001baa7:	50                   	push   eax
c001baa8:	6a 02                	push   0x2
c001baaa:	e8 36 d6 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001baaf:	5e                   	pop    esi
c001bab0:	5f                   	pop    edi
c001bab1:	53                   	push   ebx
c001bab2:	6a 04                	push   0x4
c001bab4:	e8 2c d6 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001bab9:	5d                   	pop    ebp
c001baba:	58                   	pop    eax
c001babb:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001bac0:	52                   	push   edx
c001bac1:	6a 07                	push   0x7
c001bac3:	e8 1d d6 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001bac8:	58                   	pop    eax
c001bac9:	5a                   	pop    edx
c001baca:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bacf:	50                   	push   eax
c001bad0:	6a 08                	push   0x8
c001bad2:	e8 0e d6 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001bad7:	59                   	pop    ecx
c001bad8:	5b                   	pop    ebx
c001bad9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bade:	55                   	push   ebp
c001badf:	6a 09                	push   0x9
c001bae1:	e8 ff d5 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001bae6:	5e                   	pop    esi
c001bae7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001baeb:	e8 e0 fb ff ff       	call   c001b6d0 <RTC::completeRTCRefresh()>
c001baf0:	83 c4 3c             	add    esp,0x3c
c001baf3:	b0 01                	mov    al,0x1
c001baf5:	5b                   	pop    ebx
c001baf6:	5e                   	pop    esi
c001baf7:	5f                   	pop    edi
c001baf8:	5d                   	pop    ebp
c001baf9:	c3                   	ret    

c001bafa <rtcIRQHandler(regs*, void*)>:
c001bafa:	53                   	push   ebx
c001bafb:	83 ec 14             	sub    esp,0x14
c001bafe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb02:	6a 0c                	push   0xc
c001bb04:	e8 88 d5 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001bb09:	83 c4 10             	add    esp,0x10
c001bb0c:	a8 80                	test   al,0x80
c001bb0e:	74 24                	je     c001bb34 <rtcIRQHandler(regs*, void*)+0x3a>
c001bb10:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001bb17:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001bb1e:	66 ff 05 60 f4 02 c0 	inc    WORD PTR ds:0xc002f460
c001bb25:	75 0d                	jne    c001bb34 <rtcIRQHandler(regs*, void*)+0x3a>
c001bb27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bb2b:	83 c4 08             	add    esp,0x8
c001bb2e:	5b                   	pop    ebx
c001bb2f:	e9 9c fb ff ff       	jmp    c001b6d0 <RTC::completeRTCRefresh()>
c001bb34:	83 c4 08             	add    esp,0x8
c001bb37:	5b                   	pop    ebx
c001bb38:	c3                   	ret    
c001bb39:	90                   	nop

c001bb3a <RTC::RTC()>:
c001bb3a:	83 ec 1c             	sub    esp,0x1c
c001bb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb41:	83 ec 08             	sub    esp,0x8
c001bb44:	68 87 5d 02 c0       	push   0xc0025d87
c001bb49:	50                   	push   eax
c001bb4a:	e8 67 d5 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001bb4f:	83 c4 10             	add    esp,0x10
c001bb52:	ba a4 5d 02 c0       	mov    edx,0xc0025da4
c001bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb5b:	89 10                	mov    DWORD PTR [eax],edx
c001bb5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb61:	83 ec 0c             	sub    esp,0xc
c001bb64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb68:	6a 01                	push   0x1
c001bb6a:	68 fa ba 01 c0       	push   0xc001bafa
c001bb6f:	6a 08                	push   0x8
c001bb71:	50                   	push   eax
c001bb72:	e8 89 de fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb77:	83 c4 20             	add    esp,0x20
c001bb7a:	89 c2                	mov    edx,eax
c001bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb80:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb86:	fa                   	cli    
c001bb87:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001bb8c:	83 c0 01             	add    eax,0x1
c001bb8f:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	6a 0b                	push   0xb
c001bb99:	e8 f3 d4 ff ff       	call   c0019091 <x86ReadCMOS(unsigned char)>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bba5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bba9:	83 c8 10             	or     eax,0x10
c001bbac:	0f b6 c0             	movzx  eax,al
c001bbaf:	83 ec 08             	sub    esp,0x8
c001bbb2:	50                   	push   eax
c001bbb3:	6a 0b                	push   0xb
c001bbb5:	e8 2b d5 ff ff       	call   c00190e5 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbba:	83 c4 10             	add    esp,0x10
c001bbbd:	83 ec 0c             	sub    esp,0xc
c001bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbc4:	e8 07 fb ff ff       	call   c001b6d0 <RTC::completeRTCRefresh()>
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001bbd4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001bbd9:	85 c0                	test   eax,eax
c001bbdb:	75 01                	jne    c001bbde <RTC::RTC()+0xa4>
c001bbdd:	fb                   	sti    
c001bbde:	90                   	nop
c001bbdf:	83 c4 1c             	add    esp,0x1c
c001bbe2:	c3                   	ret    
c001bbe3:	90                   	nop

c001bbe4 <HalConsoleScroll(int, int)>:
c001bbe4:	83 ec 10             	sub    esp,0x10
c001bbe7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001bbef:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001bbf7:	90                   	nop
c001bbf8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bbfd:	0f 8f e1 00 00 00    	jg     c001bce4 <HalConsoleScroll(int, int)+0x100>
c001bc03:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bc0b:	90                   	nop
c001bc0c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001bc14:	0f 8f be 00 00 00    	jg     c001bcd8 <HalConsoleScroll(int, int)+0xf4>
c001bc1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc1e:	89 d0                	mov    eax,edx
c001bc20:	c1 e0 02             	shl    eax,0x2
c001bc23:	01 d0                	add    eax,edx
c001bc25:	c1 e0 05             	shl    eax,0x5
c001bc28:	89 c2                	mov    edx,eax
c001bc2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc2e:	01 d0                	add    eax,edx
c001bc30:	89 c2                	mov    edx,eax
c001bc32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001bc39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc3d:	89 d0                	mov    eax,edx
c001bc3f:	c1 e0 02             	shl    eax,0x2
c001bc42:	01 d0                	add    eax,edx
c001bc44:	c1 e0 05             	shl    eax,0x5
c001bc47:	89 c2                	mov    edx,eax
c001bc49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc4d:	01 d0                	add    eax,edx
c001bc4f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001bc55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc59:	01 c2                	add    edx,eax
c001bc5b:	8a 01                	mov    al,BYTE PTR [ecx]
c001bc5d:	88 02                	mov    BYTE PTR [edx],al
c001bc5f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bc64:	75 66                	jne    c001bccc <HalConsoleScroll(int, int)+0xe8>
c001bc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc6a:	83 e0 01             	and    eax,0x1
c001bc6d:	74 39                	je     c001bca8 <HalConsoleScroll(int, int)+0xc4>
c001bc6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc73:	83 e0 0f             	and    eax,0xf
c001bc76:	88 c2                	mov    dl,al
c001bc78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc7c:	c1 e0 04             	shl    eax,0x4
c001bc7f:	09 d0                	or     eax,edx
c001bc81:	88 c1                	mov    cl,al
c001bc83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc87:	89 d0                	mov    eax,edx
c001bc89:	c1 e0 02             	shl    eax,0x2
c001bc8c:	01 d0                	add    eax,edx
c001bc8e:	c1 e0 05             	shl    eax,0x5
c001bc91:	89 c2                	mov    edx,eax
c001bc93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc97:	01 d0                	add    eax,edx
c001bc99:	89 c2                	mov    edx,eax
c001bc9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc9f:	01 d0                	add    eax,edx
c001bca1:	88 ca                	mov    dl,cl
c001bca3:	88 10                	mov    BYTE PTR [eax],dl
c001bca5:	eb 25                	jmp    c001bccc <HalConsoleScroll(int, int)+0xe8>
c001bca7:	90                   	nop
c001bca8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcac:	89 d0                	mov    eax,edx
c001bcae:	c1 e0 02             	shl    eax,0x2
c001bcb1:	01 d0                	add    eax,edx
c001bcb3:	c1 e0 05             	shl    eax,0x5
c001bcb6:	89 c2                	mov    edx,eax
c001bcb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcbc:	01 d0                	add    eax,edx
c001bcbe:	89 c2                	mov    edx,eax
c001bcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc4:	01 d0                	add    eax,edx
c001bcc6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001bcd1:	e9 36 ff ff ff       	jmp    c001bc0c <HalConsoleScroll(int, int)+0x28>
c001bcd6:	66 90                	xchg   ax,ax
c001bcd8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bcdd:	e9 16 ff ff ff       	jmp    c001bbf8 <HalConsoleScroll(int, int)+0x14>
c001bce2:	66 90                	xchg   ax,ax
c001bce4:	90                   	nop
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	c3                   	ret    
c001bce9:	8d 76 00             	lea    esi,[esi+0x0]

c001bcec <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001bcec:	83 ec 14             	sub    esp,0x14
c001bcef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcf3:	88 04 24             	mov    BYTE PTR [esp],al
c001bcf6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bcf9:	0f b6 c0             	movzx  eax,al
c001bcfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd00:	89 d1                	mov    ecx,edx
c001bd02:	83 e1 0f             	and    ecx,0xf
c001bd05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd09:	c1 e2 04             	shl    edx,0x4
c001bd0c:	0f b6 d2             	movzx  edx,dl
c001bd0f:	09 ca                	or     edx,ecx
c001bd11:	c1 e2 08             	shl    edx,0x8
c001bd14:	09 d0                	or     eax,edx
c001bd16:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001bd1b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001bd23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd27:	89 d0                	mov    eax,edx
c001bd29:	c1 e0 02             	shl    eax,0x2
c001bd2c:	01 d0                	add    eax,edx
c001bd2e:	c1 e0 04             	shl    eax,0x4
c001bd31:	89 c2                	mov    edx,eax
c001bd33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd37:	01 d0                	add    eax,edx
c001bd39:	01 c0                	add    eax,eax
c001bd3b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001bd3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd43:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001bd48:	66 89 02             	mov    WORD PTR [edx],ax
c001bd4b:	90                   	nop
c001bd4c:	83 c4 14             	add    esp,0x14
c001bd4f:	c3                   	ret    

c001bd50 <HalConsoleCursorUpdate(int, int)>:
c001bd50:	83 ec 20             	sub    esp,0x20
c001bd53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd57:	89 c2                	mov    edx,eax
c001bd59:	c1 e2 02             	shl    edx,0x2
c001bd5c:	01 d0                	add    eax,edx
c001bd5e:	c1 e0 04             	shl    eax,0x4
c001bd61:	89 c2                	mov    edx,eax
c001bd63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd67:	01 d0                	add    eax,edx
c001bd69:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001bd6e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bd75:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bd7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd82:	ee                   	out    dx,al
c001bd83:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bd88:	0f b6 c0             	movzx  eax,al
c001bd8b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bd92:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bd96:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bd9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd9e:	ee                   	out    dx,al
c001bd9f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bda6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bdab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bdaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bdb3:	ee                   	out    dx,al
c001bdb4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bdb9:	c1 e8 08             	shr    eax,0x8
c001bdbc:	0f b6 c0             	movzx  eax,al
c001bdbf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bdc6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bdca:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bdce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdd2:	ee                   	out    dx,al
c001bdd3:	90                   	nop
c001bdd4:	83 c4 20             	add    esp,0x20
c001bdd7:	c3                   	ret    

c001bdd8 <FAT::getName()>:
c001bdd8:	b8 d8 5d 02 c0       	mov    eax,0xc0025dd8
c001bddd:	c3                   	ret    
c001bdde:	66 90                	xchg   ax,ax

c001bde0 <FAT::tell(void*, unsigned long long*)>:
c001bde0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bde5:	75 09                	jne    c001bdf0 <FAT::tell(void*, unsigned long long*)+0x10>
c001bde7:	b8 04 00 00 00       	mov    eax,0x4
c001bdec:	c3                   	ret    
c001bded:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bdf5:	75 09                	jne    c001be00 <FAT::tell(void*, unsigned long long*)+0x20>
c001bdf7:	b8 04 00 00 00       	mov    eax,0x4
c001bdfc:	c3                   	ret    
c001bdfd:	8d 76 00             	lea    esi,[esi+0x0]
c001be00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001be07:	ba 00 00 00 00       	mov    edx,0x0
c001be0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001be10:	89 01                	mov    DWORD PTR [ecx],eax
c001be12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001be15:	b8 00 00 00 00       	mov    eax,0x0
c001be1a:	c3                   	ret    
c001be1b:	90                   	nop

c001be1c <FAT::stat(void*, unsigned long long*)>:
c001be1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001be21:	75 09                	jne    c001be2c <FAT::stat(void*, unsigned long long*)+0x10>
c001be23:	b8 04 00 00 00       	mov    eax,0x4
c001be28:	c3                   	ret    
c001be29:	8d 76 00             	lea    esi,[esi+0x0]
c001be2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001be31:	75 09                	jne    c001be3c <FAT::stat(void*, unsigned long long*)+0x20>
c001be33:	b8 04 00 00 00       	mov    eax,0x4
c001be38:	c3                   	ret    
c001be39:	8d 76 00             	lea    esi,[esi+0x0]
c001be3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001be43:	ba 00 00 00 00       	mov    edx,0x0
c001be48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001be4c:	89 01                	mov    DWORD PTR [ecx],eax
c001be4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001be51:	b8 00 00 00 00       	mov    eax,0x0
c001be56:	c3                   	ret    
c001be57:	90                   	nop

c001be58 <FAT::~FAT()>:
c001be58:	83 ec 0c             	sub    esp,0xc
c001be5b:	ba 24 5e 02 c0       	mov    edx,0xc0025e24
c001be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be64:	89 10                	mov    DWORD PTR [eax],edx
c001be66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be6a:	83 ec 0c             	sub    esp,0xc
c001be6d:	50                   	push   eax
c001be6e:	e8 79 bf fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	90                   	nop
c001be77:	83 c4 0c             	add    esp,0xc
c001be7a:	c3                   	ret    
c001be7b:	90                   	nop

c001be7c <FAT::~FAT()>:
c001be7c:	83 ec 0c             	sub    esp,0xc
c001be7f:	83 ec 0c             	sub    esp,0xc
c001be82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be86:	e8 cd ff ff ff       	call   c001be58 <FAT::~FAT()>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	83 ec 08             	sub    esp,0x8
c001be91:	6a 08                	push   0x8
c001be93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be97:	e8 c8 14 ff ff       	call   c000d364 <operator delete(void*, unsigned long)>
c001be9c:	83 c4 10             	add    esp,0x10
c001be9f:	83 c4 0c             	add    esp,0xc
c001bea2:	c3                   	ret    
c001bea3:	90                   	nop

c001bea4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bea4:	83 ec 1c             	sub    esp,0x1c
c001bea7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001beae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001beb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001beb7:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bebe:	83 f8 ff             	cmp    eax,0xffffffff
c001bec1:	75 35                	jne    c001bef8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bec3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bec7:	88 c2                	mov    dl,al
c001bec9:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bece:	01 d0                	add    eax,edx
c001bed0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bed4:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001beda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bede:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001bee5:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001beea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001beee:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001bef5:	eb 19                	jmp    c001bf10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bef7:	90                   	nop
c001bef8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001befc:	88 c2                	mov    dl,al
c001befe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf02:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bf09:	01 d0                	add    eax,edx
c001bf0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bf0f:	90                   	nop
c001bf10:	83 ec 04             	sub    esp,0x4
c001bf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf1b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bf1f:	50                   	push   eax
c001bf20:	e8 93 92 fe ff       	call   c00051b8 <f_getlabel>
c001bf25:	83 c4 10             	add    esp,0x10
c001bf28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf31:	75 09                	jne    c001bf3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bf33:	b8 00 00 00 00       	mov    eax,0x0
c001bf38:	eb 0a                	jmp    c001bf44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bf3a:	66 90                	xchg   ax,ax
c001bf3c:	b8 01 00 00 00       	mov    eax,0x1
c001bf41:	8d 76 00             	lea    esi,[esi+0x0]
c001bf44:	83 c4 1c             	add    esp,0x1c
c001bf47:	c3                   	ret    

c001bf48 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bf48:	57                   	push   edi
c001bf49:	83 ec 58             	sub    esp,0x58
c001bf4c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bf54:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bf58:	b8 00 00 00 00       	mov    eax,0x0
c001bf5d:	b9 0f 00 00 00       	mov    ecx,0xf
c001bf62:	fc                   	cld    
c001bf63:	89 d7                	mov    edi,edx
c001bf65:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bf67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bf6b:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bf72:	83 f8 ff             	cmp    eax,0xffffffff
c001bf75:	75 35                	jne    c001bfac <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001bf77:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf7b:	88 c2                	mov    dl,al
c001bf7d:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bf82:	01 d0                	add    eax,edx
c001bf84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf88:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001bf8e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bf92:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001bf99:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bf9e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bfa2:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001bfa9:	eb 19                	jmp    c001bfc4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001bfab:	90                   	nop
c001bfac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bfb0:	88 c2                	mov    dl,al
c001bfb2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bfb6:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bfbd:	01 d0                	add    eax,edx
c001bfbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfc3:	90                   	nop
c001bfc4:	83 ec 08             	sub    esp,0x8
c001bfc7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bfcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfcf:	50                   	push   eax
c001bfd0:	e8 6b 48 fe ff       	call   c0000840 <strcat>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	83 ec 0c             	sub    esp,0xc
c001bfdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfdf:	50                   	push   eax
c001bfe0:	e8 24 93 fe ff       	call   c0005309 <f_setlabel>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bfec:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bff1:	75 09                	jne    c001bffc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001bff3:	b8 00 00 00 00       	mov    eax,0x0
c001bff8:	eb 0a                	jmp    c001c004 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001bffa:	66 90                	xchg   ax,ax
c001bffc:	b8 01 00 00 00       	mov    eax,0x1
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	83 c4 58             	add    esp,0x58
c001c007:	5f                   	pop    edi
c001c008:	c3                   	ret    
c001c009:	90                   	nop
c001c00a:	66 90                	xchg   ax,ax

c001c00c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001c00c:	83 ec 2c             	sub    esp,0x2c
c001c00f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c017:	83 ec 08             	sub    esp,0x8
c001c01a:	68 fc 5d 02 c0       	push   0xc0025dfc
c001c01f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c023:	e8 28 47 fe ff       	call   c0000750 <strcmp>
c001c028:	83 c4 10             	add    esp,0x10
c001c02b:	85 c0                	test   eax,eax
c001c02d:	0f 94 c0             	sete   al
c001c030:	0f b6 c0             	movzx  eax,al
c001c033:	85 c0                	test   eax,eax
c001c035:	74 0d                	je     c001c044 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001c037:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c03f:	e9 c0 00 00 00       	jmp    c001c104 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c044:	83 ec 08             	sub    esp,0x8
c001c047:	68 ee 5d 02 c0       	push   0xc0025dee
c001c04c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c050:	e8 fb 46 fe ff       	call   c0000750 <strcmp>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	85 c0                	test   eax,eax
c001c05a:	0f 94 c0             	sete   al
c001c05d:	0f b6 c0             	movzx  eax,al
c001c060:	85 c0                	test   eax,eax
c001c062:	74 10                	je     c001c074 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001c064:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c06c:	e9 93 00 00 00       	jmp    c001c104 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	83 ec 08             	sub    esp,0x8
c001c077:	68 f4 5d 02 c0       	push   0xc0025df4
c001c07c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c080:	e8 cb 46 fe ff       	call   c0000750 <strcmp>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	85 c0                	test   eax,eax
c001c08a:	0f 94 c0             	sete   al
c001c08d:	0f b6 c0             	movzx  eax,al
c001c090:	85 c0                	test   eax,eax
c001c092:	74 0c                	je     c001c0a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001c094:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c09c:	eb 66                	jmp    c001c104 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c09e:	66 90                	xchg   ax,ax
c001c0a0:	83 ec 08             	sub    esp,0x8
c001c0a3:	68 fc 2d 02 c0       	push   0xc0022dfc
c001c0a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c0ac:	e8 9f 46 fe ff       	call   c0000750 <strcmp>
c001c0b1:	83 c4 10             	add    esp,0x10
c001c0b4:	85 c0                	test   eax,eax
c001c0b6:	0f 94 c0             	sete   al
c001c0b9:	0f b6 c0             	movzx  eax,al
c001c0bc:	85 c0                	test   eax,eax
c001c0be:	74 0c                	je     c001c0cc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001c0c0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001c0c8:	eb 3a                	jmp    c001c104 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c0ca:	66 90                	xchg   ax,ax
c001c0cc:	83 ec 08             	sub    esp,0x8
c001c0cf:	68 fa 5d 02 c0       	push   0xc0025dfa
c001c0d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c0d8:	e8 73 46 fe ff       	call   c0000750 <strcmp>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	85 c0                	test   eax,eax
c001c0e2:	0f 94 c0             	sete   al
c001c0e5:	0f b6 c0             	movzx  eax,al
c001c0e8:	85 c0                	test   eax,eax
c001c0ea:	74 0c                	je     c001c0f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001c0ec:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001c0f4:	eb 0e                	jmp    c001c104 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c0f6:	66 90                	xchg   ax,ax
c001c0f8:	b8 08 00 00 00       	mov    eax,0x8
c001c0fd:	e9 ea 00 00 00       	jmp    c001c1ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c102:	66 90                	xchg   ax,ax
c001c104:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001c10b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001c110:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c114:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001c11b:	83 f8 ff             	cmp    eax,0xffffffff
c001c11e:	75 34                	jne    c001c154 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001c120:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c124:	88 c2                	mov    dl,al
c001c126:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c12b:	01 d0                	add    eax,edx
c001c12d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c131:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001c137:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c13b:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001c142:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c147:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c14b:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001c152:	eb 18                	jmp    c001c16c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001c154:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c158:	88 c2                	mov    dl,al
c001c15a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c15e:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001c165:	01 d0                	add    eax,edx
c001c167:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c16b:	90                   	nop
c001c16c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c170:	88 04 24             	mov    BYTE PTR [esp],al
c001c173:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c17b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c183:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001c188:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c190:	83 ec 0c             	sub    esp,0xc
c001c193:	68 00 20 00 00       	push   0x2000
c001c198:	e8 ae 36 ff ff       	call   c000f84b <malloc>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1a4:	68 00 20 00 00       	push   0x2000
c001c1a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1b1:	50                   	push   eax
c001c1b2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001c1b6:	50                   	push   eax
c001c1b7:	e8 4a 94 fe ff       	call   c0005606 <f_mkfs>
c001c1bc:	83 c4 10             	add    esp,0x10
c001c1bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c1c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c1c8:	75 0a                	jne    c001c1d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001c1ca:	b8 00 00 00 00       	mov    eax,0x0
c001c1cf:	eb 1b                	jmp    c001c1ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001c1d9:	75 09                	jne    c001c1e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001c1db:	b8 09 00 00 00       	mov    eax,0x9
c001c1e0:	eb 0a                	jmp    c001c1ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c1e2:	66 90                	xchg   ax,ax
c001c1e4:	b8 01 00 00 00       	mov    eax,0x1
c001c1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1ec:	83 c4 2c             	add    esp,0x2c
c001c1ef:	c3                   	ret    

c001c1f0 <FAT::tryMount(LogicalDisk*, int)>:
c001c1f0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c1f6:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c1fb:	83 f8 14             	cmp    eax,0x14
c001c1fe:	75 18                	jne    c001c218 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c200:	83 ec 0c             	sub    esp,0xc
c001c203:	68 00 5e 02 c0       	push   0xc0025e00
c001c208:	e8 93 3a ff ff       	call   c000fca0 <KePanic(char const*)>
c001c20d:	83 c4 10             	add    esp,0x10
c001c210:	b0 00                	mov    al,0x0
c001c212:	e9 ed 01 00 00       	jmp    c001c404 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c217:	90                   	nop
c001c218:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c21f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c225:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c22b:	3d 00 02 00 00       	cmp    eax,0x200
c001c230:	74 0a                	je     c001c23c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c232:	b0 00                	mov    al,0x0
c001c234:	e9 cb 01 00 00       	jmp    c001c404 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c239:	8d 76 00             	lea    esi,[esi+0x0]
c001c23c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c244:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c24b:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001c252:	83 f8 ff             	cmp    eax,0xffffffff
c001c255:	74 09                	je     c001c260 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c257:	b0 01                	mov    al,0x1
c001c259:	e9 a6 01 00 00       	jmp    c001c404 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c25e:	66 90                	xchg   ax,ax
c001c260:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c26a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c272:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c279:	88 c2                	mov    dl,al
c001c27b:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c280:	01 d0                	add    eax,edx
c001c282:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c289:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001c28f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c296:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001c29d:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c2a2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c2a9:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001c2b0:	83 ec 0c             	sub    esp,0xc
c001c2b3:	68 34 02 00 00       	push   0x234
c001c2b8:	e8 8e 35 ff ff       	call   c000f84b <malloc>
c001c2bd:	83 c4 10             	add    esp,0x10
c001c2c0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c2c7:	83 ec 04             	sub    esp,0x4
c001c2ca:	6a 00                	push   0x0
c001c2cc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c2d3:	50                   	push   eax
c001c2d4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c2db:	e8 01 7b fe ff       	call   c0003de1 <f_mount>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c2ea:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c2f2:	74 1c                	je     c001c310 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c2f4:	83 ec 0c             	sub    esp,0xc
c001c2f7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c2fe:	e8 68 35 ff ff       	call   c000f86b <rfree>
c001c303:	83 c4 10             	add    esp,0x10
c001c306:	b0 00                	mov    al,0x0
c001c308:	e9 f7 00 00 00       	jmp    c001c404 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c30d:	8d 76 00             	lea    esi,[esi+0x0]
c001c310:	83 ec 04             	sub    esp,0x4
c001c313:	68 00 01 00 00       	push   0x100
c001c318:	6a 00                	push   0x0
c001c31a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c321:	50                   	push   eax
c001c322:	e8 c9 41 fe ff       	call   c00004f0 <memset>
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	83 ec 08             	sub    esp,0x8
c001c32d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c334:	50                   	push   eax
c001c335:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c33c:	50                   	push   eax
c001c33d:	e8 fe 44 fe ff       	call   c0000840 <strcat>
c001c342:	83 c4 10             	add    esp,0x10
c001c345:	83 ec 08             	sub    esp,0x8
c001c348:	68 0e 5e 02 c0       	push   0xc0025e0e
c001c34d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c354:	50                   	push   eax
c001c355:	e8 e6 44 fe ff       	call   c0000840 <strcat>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	83 ec 04             	sub    esp,0x4
c001c360:	6a 01                	push   0x1
c001c362:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c369:	50                   	push   eax
c001c36a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c36e:	50                   	push   eax
c001c36f:	e8 cf 7a fe ff       	call   c0003e43 <f_open>
c001c374:	83 c4 10             	add    esp,0x10
c001c377:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c37e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c385:	85 c0                	test   eax,eax
c001c387:	74 0b                	je     c001c394 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c389:	78 31                	js     c001c3bc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c38b:	83 e8 04             	sub    eax,0x4
c001c38e:	83 f8 01             	cmp    eax,0x1
c001c391:	77 29                	ja     c001c3bc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c393:	90                   	nop
c001c394:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c39c:	83 ec 0c             	sub    esp,0xc
c001c39f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3a3:	50                   	push   eax
c001c3a4:	e8 69 82 fe ff       	call   c0004612 <f_close>
c001c3a9:	83 c4 10             	add    esp,0x10
c001c3ac:	90                   	nop
c001c3ad:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c3b5:	85 c0                	test   eax,eax
c001c3b7:	74 43                	je     c001c3fc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c3b9:	eb 31                	jmp    c001c3ec <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c3bb:	90                   	nop
c001c3bc:	83 ec 0c             	sub    esp,0xc
c001c3bf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c3c6:	e8 a0 34 ff ff       	call   c000f86b <rfree>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	83 ec 04             	sub    esp,0x4
c001c3d1:	6a 00                	push   0x0
c001c3d3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c3da:	50                   	push   eax
c001c3db:	6a 00                	push   0x0
c001c3dd:	e8 ff 79 fe ff       	call   c0003de1 <f_mount>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	b0 00                	mov    al,0x0
c001c3e7:	eb 1b                	jmp    c001c404 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3ec:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c3f1:	83 c0 01             	add    eax,0x1
c001c3f4:	a3 80 f4 02 c0       	mov    ds:0xc002f480,eax
c001c3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3fc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c403:	90                   	nop
c001c404:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c40a:	c3                   	ret    
c001c40b:	90                   	nop

c001c40c <FAT::allocateSwapfile(char const*, int)>:
c001c40c:	55                   	push   ebp
c001c40d:	57                   	push   edi
c001c40e:	56                   	push   esi
c001c40f:	53                   	push   ebx
c001c410:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c416:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c421:	83 ec 0c             	sub    esp,0xc
c001c424:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c42b:	e8 1b 34 ff ff       	call   c000f84b <malloc>
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	89 c7                	mov    edi,eax
c001c435:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001c43a:	83 ec 04             	sub    esp,0x4
c001c43d:	50                   	push   eax
c001c43e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c445:	57                   	push   edi
c001c446:	e8 3f bd fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c455:	83 ec 04             	sub    esp,0x4
c001c458:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c45c:	50                   	push   eax
c001c45d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c461:	50                   	push   eax
c001c462:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c469:	e8 3c c0 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c46e:	83 c4 10             	add    esp,0x10
c001c471:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c478:	c1 e0 14             	shl    eax,0x14
c001c47b:	89 c7                	mov    edi,eax
c001c47d:	89 c5                	mov    ebp,eax
c001c47f:	c1 fd 1f             	sar    ebp,0x1f
c001c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c48a:	89 f9                	mov    ecx,edi
c001c48c:	31 c1                	xor    ecx,eax
c001c48e:	89 cb                	mov    ebx,ecx
c001c490:	89 e9                	mov    ecx,ebp
c001c492:	31 d1                	xor    ecx,edx
c001c494:	89 ce                	mov    esi,ecx
c001c496:	89 f0                	mov    eax,esi
c001c498:	09 d8                	or     eax,ebx
c001c49a:	0f 84 9c 00 00 00    	je     c001c53c <FAT::allocateSwapfile(char const*, int)+0x130>
c001c4a0:	83 ec 0c             	sub    esp,0xc
c001c4a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c4aa:	e8 c7 be fe ff       	call   c0008376 <File::unlink()>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	83 ec 08             	sub    esp,0x8
c001c4b5:	6a 12                	push   0x12
c001c4b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c4be:	e8 e5 bc fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c4cd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c4d3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c4da:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c4e1:	c1 e0 14             	shl    eax,0x14
c001c4e4:	83 ec 04             	sub    esp,0x4
c001c4e7:	6a 01                	push   0x1
c001c4e9:	50                   	push   eax
c001c4ea:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c4f1:	e8 a3 8f fe ff       	call   c0005499 <f_expand>
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c500:	8b 00                	mov    eax,DWORD PTR [eax]
c001c502:	83 c0 10             	add    eax,0x10
c001c505:	8b 00                	mov    eax,DWORD PTR [eax]
c001c507:	83 ec 0c             	sub    esp,0xc
c001c50a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c50e:	52                   	push   edx
c001c50f:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c513:	52                   	push   edx
c001c514:	6a 00                	push   0x0
c001c516:	68 00 04 00 00       	push   0x400
c001c51b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c522:	ff d0                	call   eax
c001c524:	83 c4 20             	add    esp,0x20
c001c527:	83 ec 0c             	sub    esp,0xc
c001c52a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c531:	e8 d0 bc fe ff       	call   c0008206 <File::close()>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	8d 76 00             	lea    esi,[esi+0x0]
c001c53c:	83 ec 08             	sub    esp,0x8
c001c53f:	6a 01                	push   0x1
c001c541:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c548:	e8 5b bc fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c54d:	83 c4 10             	add    esp,0x10
c001c550:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c557:	8b 00                	mov    eax,DWORD PTR [eax]
c001c559:	83 c0 0c             	add    eax,0xc
c001c55c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c55e:	83 ec 0c             	sub    esp,0xc
c001c561:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c565:	52                   	push   edx
c001c566:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c56a:	52                   	push   edx
c001c56b:	6a 00                	push   0x0
c001c56d:	6a 04                	push   0x4
c001c56f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c576:	ff d0                	call   eax
c001c578:	83 c4 20             	add    esp,0x20
c001c57b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c582:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c588:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c58f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c596:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c599:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c5aa:	e8 57 bc fe ff       	call   c0008206 <File::close()>
c001c5af:	83 c4 10             	add    esp,0x10
c001c5b2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c5b9:	ba 00 00 00 00       	mov    edx,0x0
c001c5be:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c5c4:	5b                   	pop    ebx
c001c5c5:	5e                   	pop    esi
c001c5c6:	5f                   	pop    edi
c001c5c7:	5d                   	pop    ebp
c001c5c8:	c3                   	ret    
c001c5c9:	90                   	nop
c001c5ca:	66 90                	xchg   ax,ax

c001c5cc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c5cc:	57                   	push   edi
c001c5cd:	56                   	push   esi
c001c5ce:	53                   	push   ebx
c001c5cf:	81 ec 50 02 00 00    	sub    esp,0x250
c001c5d5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c5dd:	74 0d                	je     c001c5ec <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c5df:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c5e7:	75 0f                	jne    c001c5f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5ec:	b8 04 00 00 00       	mov    eax,0x4
c001c5f1:	e9 3a 01 00 00       	jmp    c001c730 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c5f6:	66 90                	xchg   ax,ax
c001c5f8:	83 ec 08             	sub    esp,0x8
c001c5fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c602:	50                   	push   eax
c001c603:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c60a:	e8 d0 82 fe ff       	call   c00048df <f_readdir>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c619:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c620:	83 ec 0c             	sub    esp,0xc
c001c623:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c62a:	83 c0 16             	add    eax,0x16
c001c62d:	50                   	push   eax
c001c62e:	e8 3d 3f fe ff       	call   c0000570 <strlen>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	ba 00 00 00 00       	mov    edx,0x0
c001c63b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c63f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c643:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c64a:	0f b6 c0             	movzx  eax,al
c001c64d:	83 e0 10             	and    eax,0x10
c001c650:	74 0a                	je     c001c65c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c652:	b8 02 00 00 00       	mov    eax,0x2
c001c657:	eb 0b                	jmp    c001c664 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c659:	8d 76 00             	lea    esi,[esi+0x0]
c001c65c:	b8 01 00 00 00       	mov    eax,0x1
c001c661:	8d 76 00             	lea    esi,[esi+0x0]
c001c664:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c668:	83 ec 08             	sub    esp,0x8
c001c66b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c672:	83 c0 16             	add    eax,0x16
c001c675:	50                   	push   eax
c001c676:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c67a:	83 c0 10             	add    eax,0x10
c001c67d:	50                   	push   eax
c001c67e:	e8 bd 3f fe ff       	call   c0000640 <strcpy>
c001c683:	83 c4 10             	add    esp,0x10
c001c686:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c68d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c694:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c698:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c69f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c6a6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c6ad:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c6b4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c6bb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c6c2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c6c9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c6d0:	89 c6                	mov    esi,eax
c001c6d2:	89 d7                	mov    edi,edx
c001c6d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6d6:	89 c8                	mov    eax,ecx
c001c6d8:	89 fa                	mov    edx,edi
c001c6da:	89 f3                	mov    ebx,esi
c001c6dc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c6e3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c6ea:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c6f1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c6f8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c6fe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c705:	0f be c0             	movsx  eax,al
c001c708:	85 c0                	test   eax,eax
c001c70a:	75 08                	jne    c001c714 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c70c:	b8 07 00 00 00       	mov    eax,0x7
c001c711:	eb 1d                	jmp    c001c730 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c713:	90                   	nop
c001c714:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c71b:	85 c0                	test   eax,eax
c001c71d:	75 09                	jne    c001c728 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c71f:	b8 00 00 00 00       	mov    eax,0x0
c001c724:	eb 0a                	jmp    c001c730 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c726:	66 90                	xchg   ax,ax
c001c728:	b8 01 00 00 00       	mov    eax,0x1
c001c72d:	8d 76 00             	lea    esi,[esi+0x0]
c001c730:	81 c4 50 02 00 00    	add    esp,0x250
c001c736:	5b                   	pop    ebx
c001c737:	5e                   	pop    esi
c001c738:	5f                   	pop    edi
c001c739:	c3                   	ret    
c001c73a:	66 90                	xchg   ax,ax

c001c73c <FAT::read(void*, unsigned long, void*, int*)>:
c001c73c:	83 ec 1c             	sub    esp,0x1c
c001c73f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c744:	74 0a                	je     c001c750 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c746:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c74b:	75 0b                	jne    c001c758 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c74d:	8d 76 00             	lea    esi,[esi+0x0]
c001c750:	b8 04 00 00 00       	mov    eax,0x4
c001c755:	eb 41                	jmp    c001c798 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c757:	90                   	nop
c001c758:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c75c:	50                   	push   eax
c001c75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c761:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c765:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c769:	e8 98 79 fe ff       	call   c0004106 <f_read>
c001c76e:	83 c4 10             	add    esp,0x10
c001c771:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c779:	89 c2                	mov    edx,eax
c001c77b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c77f:	89 10                	mov    DWORD PTR [eax],edx
c001c781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c785:	85 c0                	test   eax,eax
c001c787:	75 07                	jne    c001c790 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c789:	b8 00 00 00 00       	mov    eax,0x0
c001c78e:	eb 08                	jmp    c001c798 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c790:	b8 01 00 00 00       	mov    eax,0x1
c001c795:	8d 76 00             	lea    esi,[esi+0x0]
c001c798:	83 c4 1c             	add    esp,0x1c
c001c79b:	c3                   	ret    

c001c79c <FAT::write(void*, unsigned long, void*, int*)>:
c001c79c:	83 ec 1c             	sub    esp,0x1c
c001c79f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c7a4:	74 0a                	je     c001c7b0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c7a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c7ab:	75 0b                	jne    c001c7b8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b0:	b8 04 00 00 00       	mov    eax,0x4
c001c7b5:	eb 41                	jmp    c001c7f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c7b7:	90                   	nop
c001c7b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c7bc:	50                   	push   eax
c001c7bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c7c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7c9:	e8 37 7b fe ff       	call   c0004305 <f_write>
c001c7ce:	83 c4 10             	add    esp,0x10
c001c7d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7d9:	89 c2                	mov    edx,eax
c001c7db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7df:	89 10                	mov    DWORD PTR [eax],edx
c001c7e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e5:	85 c0                	test   eax,eax
c001c7e7:	75 07                	jne    c001c7f0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c7e9:	b8 00 00 00 00       	mov    eax,0x0
c001c7ee:	eb 08                	jmp    c001c7f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c7f0:	b8 01 00 00 00       	mov    eax,0x1
c001c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f8:	83 c4 1c             	add    esp,0x1c
c001c7fb:	c3                   	ret    

c001c7fc <FAT::close(void*)>:
c001c7fc:	83 ec 1c             	sub    esp,0x1c
c001c7ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c804:	75 0a                	jne    c001c810 <FAT::close(void*)+0x14>
c001c806:	b8 04 00 00 00       	mov    eax,0x4
c001c80b:	eb 3f                	jmp    c001c84c <FAT::close(void*)+0x50>
c001c80d:	8d 76 00             	lea    esi,[esi+0x0]
c001c810:	83 ec 0c             	sub    esp,0xc
c001c813:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c817:	e8 f6 7d fe ff       	call   c0004612 <f_close>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c823:	83 ec 0c             	sub    esp,0xc
c001c826:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c82a:	e8 2c 30 ff ff       	call   c000f85b <free>
c001c82f:	83 c4 10             	add    esp,0x10
c001c832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c836:	85 c0                	test   eax,eax
c001c838:	75 0a                	jne    c001c844 <FAT::close(void*)+0x48>
c001c83a:	b8 00 00 00 00       	mov    eax,0x0
c001c83f:	eb 0b                	jmp    c001c84c <FAT::close(void*)+0x50>
c001c841:	8d 76 00             	lea    esi,[esi+0x0]
c001c844:	b8 01 00 00 00       	mov    eax,0x1
c001c849:	8d 76 00             	lea    esi,[esi+0x0]
c001c84c:	83 c4 1c             	add    esp,0x1c
c001c84f:	c3                   	ret    

c001c850 <FAT::closeDir(void*)>:
c001c850:	83 ec 1c             	sub    esp,0x1c
c001c853:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c858:	75 0a                	jne    c001c864 <FAT::closeDir(void*)+0x14>
c001c85a:	b8 04 00 00 00       	mov    eax,0x4
c001c85f:	eb 3f                	jmp    c001c8a0 <FAT::closeDir(void*)+0x50>
c001c861:	8d 76 00             	lea    esi,[esi+0x0]
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c86b:	e8 4d 80 fe ff       	call   c00048bd <f_closedir>
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c877:	83 ec 0c             	sub    esp,0xc
c001c87a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c87e:	e8 d8 2f ff ff       	call   c000f85b <free>
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c88a:	85 c0                	test   eax,eax
c001c88c:	75 0a                	jne    c001c898 <FAT::closeDir(void*)+0x48>
c001c88e:	b8 00 00 00 00       	mov    eax,0x0
c001c893:	eb 0b                	jmp    c001c8a0 <FAT::closeDir(void*)+0x50>
c001c895:	8d 76 00             	lea    esi,[esi+0x0]
c001c898:	b8 01 00 00 00       	mov    eax,0x1
c001c89d:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a0:	83 c4 1c             	add    esp,0x1c
c001c8a3:	c3                   	ret    

c001c8a4 <FAT::truncate(void*, unsigned long long)>:
c001c8a4:	83 ec 2c             	sub    esp,0x2c
c001c8a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c8bc:	75 0a                	jne    c001c8c8 <FAT::truncate(void*, unsigned long long)+0x24>
c001c8be:	b8 04 00 00 00       	mov    eax,0x4
c001c8c3:	eb 47                	jmp    c001c90c <FAT::truncate(void*, unsigned long long)+0x68>
c001c8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c8db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8df:	83 ec 08             	sub    esp,0x8
c001c8e2:	50                   	push   eax
c001c8e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c8e7:	e8 55 7d fe ff       	call   c0004641 <f_lseek>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8f7:	85 c0                	test   eax,eax
c001c8f9:	75 09                	jne    c001c904 <FAT::truncate(void*, unsigned long long)+0x60>
c001c8fb:	b8 00 00 00 00       	mov    eax,0x0
c001c900:	eb 0a                	jmp    c001c90c <FAT::truncate(void*, unsigned long long)+0x68>
c001c902:	66 90                	xchg   ax,ax
c001c904:	b8 01 00 00 00       	mov    eax,0x1
c001c909:	8d 76 00             	lea    esi,[esi+0x0]
c001c90c:	83 c4 2c             	add    esp,0x2c
c001c90f:	c3                   	ret    

c001c910 <FAT::seek(void*, unsigned long long)>:
c001c910:	83 ec 2c             	sub    esp,0x2c
c001c913:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c91b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c91f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c923:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c928:	75 0a                	jne    c001c934 <FAT::seek(void*, unsigned long long)+0x24>
c001c92a:	b8 04 00 00 00       	mov    eax,0x4
c001c92f:	eb 33                	jmp    c001c964 <FAT::seek(void*, unsigned long long)+0x54>
c001c931:	8d 76 00             	lea    esi,[esi+0x0]
c001c934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c938:	83 ec 08             	sub    esp,0x8
c001c93b:	50                   	push   eax
c001c93c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c940:	e8 fc 7c fe ff       	call   c0004641 <f_lseek>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c94c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c950:	85 c0                	test   eax,eax
c001c952:	75 08                	jne    c001c95c <FAT::seek(void*, unsigned long long)+0x4c>
c001c954:	b8 00 00 00 00       	mov    eax,0x0
c001c959:	eb 09                	jmp    c001c964 <FAT::seek(void*, unsigned long long)+0x54>
c001c95b:	90                   	nop
c001c95c:	b8 01 00 00 00       	mov    eax,0x1
c001c961:	8d 76 00             	lea    esi,[esi+0x0]
c001c964:	83 c4 2c             	add    esp,0x2c
c001c967:	c3                   	ret    

c001c968 <fatWrapperReadDisk>:
c001c968:	53                   	push   ebx
c001c969:	83 ec 18             	sub    esp,0x18
c001c96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c970:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c974:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c979:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c980:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c984:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c988:	ba 00 00 00 00       	mov    edx,0x0
c001c98d:	83 ec 0c             	sub    esp,0xc
c001c990:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c994:	53                   	push   ebx
c001c995:	52                   	push   edx
c001c996:	50                   	push   eax
c001c997:	51                   	push   ecx
c001c998:	e8 d5 e0 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001c99d:	83 c4 20             	add    esp,0x20
c001c9a0:	83 c4 18             	add    esp,0x18
c001c9a3:	5b                   	pop    ebx
c001c9a4:	c3                   	ret    
c001c9a5:	8d 76 00             	lea    esi,[esi+0x0]

c001c9a8 <fatWrapperWriteDisk>:
c001c9a8:	53                   	push   ebx
c001c9a9:	83 ec 18             	sub    esp,0x18
c001c9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c9b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c9b9:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c9c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c9c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9c8:	ba 00 00 00 00       	mov    edx,0x0
c001c9cd:	83 ec 0c             	sub    esp,0xc
c001c9d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c9d4:	53                   	push   ebx
c001c9d5:	52                   	push   edx
c001c9d6:	50                   	push   eax
c001c9d7:	51                   	push   ecx
c001c9d8:	e8 01 e1 fe ff       	call   c000aade <LogicalDisk::write(unsigned long long, int, void*)>
c001c9dd:	83 c4 20             	add    esp,0x20
c001c9e0:	83 c4 18             	add    esp,0x18
c001c9e3:	5b                   	pop    ebx
c001c9e4:	c3                   	ret    
c001c9e5:	8d 76 00             	lea    esi,[esi+0x0]

c001c9e8 <fatWrapperIoctl>:
c001c9e8:	53                   	push   ebx
c001c9e9:	83 ec 28             	sub    esp,0x28
c001c9ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c9f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c9f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c9f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c9fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca01:	83 f8 02             	cmp    eax,0x2
c001ca04:	75 32                	jne    c001ca38 <fatWrapperIoctl+0x50>
c001ca06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ca0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca0e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca13:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001ca1a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ca20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ca26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca2a:	66 89 02             	mov    WORD PTR [edx],ax
c001ca2d:	b8 00 00 00 00       	mov    eax,0x0
c001ca32:	e9 c5 00 00 00       	jmp    c001cafc <fatWrapperIoctl+0x114>
c001ca37:	90                   	nop
c001ca38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca3d:	83 f8 01             	cmp    eax,0x1
c001ca40:	75 6a                	jne    c001caac <fatWrapperIoctl+0xc4>
c001ca42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ca46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca4f:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001ca56:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ca5c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ca62:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ca68:	89 c8                	mov    eax,ecx
c001ca6a:	89 da                	mov    edx,ebx
c001ca6c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca70:	c1 e0 0a             	shl    eax,0xa
c001ca73:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ca78:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001ca7f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ca85:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ca8b:	89 cb                	mov    ebx,ecx
c001ca8d:	c1 fb 1f             	sar    ebx,0x1f
c001ca90:	53                   	push   ebx
c001ca91:	51                   	push   ecx
c001ca92:	52                   	push   edx
c001ca93:	50                   	push   eax
c001ca94:	e8 5b 55 00 00       	call   c0021ff4 <__udivdi3>
c001ca99:	83 c4 10             	add    esp,0x10
c001ca9c:	89 c2                	mov    edx,eax
c001ca9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caa2:	89 10                	mov    DWORD PTR [eax],edx
c001caa4:	b8 00 00 00 00       	mov    eax,0x0
c001caa9:	eb 51                	jmp    c001cafc <fatWrapperIoctl+0x114>
c001caab:	90                   	nop
c001caac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cab1:	85 c0                	test   eax,eax
c001cab3:	75 07                	jne    c001cabc <fatWrapperIoctl+0xd4>
c001cab5:	b8 00 00 00 00       	mov    eax,0x0
c001caba:	eb 40                	jmp    c001cafc <fatWrapperIoctl+0x114>
c001cabc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cac1:	83 f8 03             	cmp    eax,0x3
c001cac4:	75 1a                	jne    c001cae0 <fatWrapperIoctl+0xf8>
c001cac6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001caca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cace:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cad2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001cad8:	b8 00 00 00 00       	mov    eax,0x0
c001cadd:	eb 1d                	jmp    c001cafc <fatWrapperIoctl+0x114>
c001cadf:	90                   	nop
c001cae0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cae5:	83 f8 04             	cmp    eax,0x4
c001cae8:	75 0a                	jne    c001caf4 <fatWrapperIoctl+0x10c>
c001caea:	b8 00 00 00 00       	mov    eax,0x0
c001caef:	eb 0b                	jmp    c001cafc <fatWrapperIoctl+0x114>
c001caf1:	8d 76 00             	lea    esi,[esi+0x0]
c001caf4:	b8 04 00 00 00       	mov    eax,0x4
c001caf9:	8d 76 00             	lea    esi,[esi+0x0]
c001cafc:	83 c4 28             	add    esp,0x28
c001caff:	5b                   	pop    ebx
c001cb00:	c3                   	ret    
c001cb01:	90                   	nop
c001cb02:	66 90                	xchg   ax,ax

c001cb04 <FAT::FAT()>:
c001cb04:	83 ec 1c             	sub    esp,0x1c
c001cb07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb0b:	83 ec 0c             	sub    esp,0xc
c001cb0e:	50                   	push   eax
c001cb0f:	e8 b4 b2 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	ba 24 5e 02 c0       	mov    edx,0xc0025e24
c001cb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb20:	89 10                	mov    DWORD PTR [eax],edx
c001cb22:	c7 05 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f480,0x0
c001cb2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cb34:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001cb39:	7f 19                	jg     c001cb54 <FAT::FAT()+0x50>
c001cb3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb3f:	c7 04 85 a0 f4 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0b60],0xffffffff
c001cb4a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cb4f:	eb e3                	jmp    c001cb34 <FAT::FAT()+0x30>
c001cb51:	8d 76 00             	lea    esi,[esi+0x0]
c001cb54:	90                   	nop
c001cb55:	83 c4 1c             	add    esp,0x1c
c001cb58:	c3                   	ret    
c001cb59:	90                   	nop
c001cb5a:	66 90                	xchg   ax,ax

c001cb5c <FAT::fixFilepath(char*)>:
c001cb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb60:	8a 00                	mov    al,BYTE PTR [eax]
c001cb62:	0f be c0             	movsx  eax,al
c001cb65:	83 f8 40             	cmp    eax,0x40
c001cb68:	7e 2e                	jle    c001cb98 <FAT::fixFilepath(char*)+0x3c>
c001cb6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb6e:	8a 00                	mov    al,BYTE PTR [eax]
c001cb70:	83 e8 41             	sub    eax,0x41
c001cb73:	88 c2                	mov    dl,al
c001cb75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb79:	88 10                	mov    BYTE PTR [eax],dl
c001cb7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb7f:	8a 00                	mov    al,BYTE PTR [eax]
c001cb81:	0f be c0             	movsx  eax,al
c001cb84:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001cb8b:	83 c0 30             	add    eax,0x30
c001cb8e:	88 c2                	mov    dl,al
c001cb90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb94:	88 10                	mov    BYTE PTR [eax],dl
c001cb96:	66 90                	xchg   ax,ax
c001cb98:	90                   	nop
c001cb99:	c3                   	ret    
c001cb9a:	66 90                	xchg   ax,ax

c001cb9c <FAT::open(char const*, void**, FileOpenMode)>:
c001cb9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cba2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cbaa:	74 0c                	je     c001cbb8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001cbac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cbb4:	75 0e                	jne    c001cbc4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001cbb6:	66 90                	xchg   ax,ax
c001cbb8:	b8 04 00 00 00       	mov    eax,0x4
c001cbbd:	e9 46 01 00 00       	jmp    c001cd08 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cbc2:	66 90                	xchg   ax,ax
c001cbc4:	83 ec 08             	sub    esp,0x8
c001cbc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cbd2:	50                   	push   eax
c001cbd3:	e8 68 3a fe ff       	call   c0000640 <strcpy>
c001cbd8:	83 c4 10             	add    esp,0x10
c001cbdb:	83 ec 08             	sub    esp,0x8
c001cbde:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cbe2:	50                   	push   eax
c001cbe3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbea:	e8 6d ff ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001cbfa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cc01:	83 e0 01             	and    eax,0x1
c001cc04:	74 12                	je     c001cc18 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001cc06:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc0d:	83 c8 01             	or     eax,0x1
c001cc10:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cc17:	90                   	nop
c001cc18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cc1f:	83 e0 04             	and    eax,0x4
c001cc22:	74 24                	je     c001cc48 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001cc24:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc2b:	83 c8 30             	or     eax,0x30
c001cc2e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cc35:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc3c:	83 c8 02             	or     eax,0x2
c001cc3f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cc46:	66 90                	xchg   ax,ax
c001cc48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cc4f:	83 e0 02             	and    eax,0x2
c001cc52:	74 14                	je     c001cc68 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001cc54:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc5b:	83 c8 02             	or     eax,0x2
c001cc5e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cc65:	8d 76 00             	lea    esi,[esi+0x0]
c001cc68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cc6f:	83 e0 08             	and    eax,0x8
c001cc72:	74 14                	je     c001cc88 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001cc74:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc7b:	83 c8 04             	or     eax,0x4
c001cc7e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cc85:	8d 76 00             	lea    esi,[esi+0x0]
c001cc88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cc8f:	83 e0 10             	and    eax,0x10
c001cc92:	74 14                	je     c001cca8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001cc94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cc9b:	83 c8 08             	or     eax,0x8
c001cc9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cca5:	8d 76 00             	lea    esi,[esi+0x0]
c001cca8:	83 ec 0c             	sub    esp,0xc
c001ccab:	68 28 02 00 00       	push   0x228
c001ccb0:	e8 96 2b ff ff       	call   c000f84b <malloc>
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	89 c2                	mov    edx,eax
c001ccba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ccc1:	89 10                	mov    DWORD PTR [eax],edx
c001ccc3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001cccb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ccd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccd4:	83 ec 04             	sub    esp,0x4
c001ccd7:	52                   	push   edx
c001ccd8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ccdc:	52                   	push   edx
c001ccdd:	50                   	push   eax
c001ccde:	e8 60 71 fe ff       	call   c0003e43 <f_open>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001cced:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ccf5:	74 09                	je     c001cd00 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001ccf7:	b8 01 00 00 00       	mov    eax,0x1
c001ccfc:	eb 0a                	jmp    c001cd08 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ccfe:	66 90                	xchg   ax,ax
c001cd00:	b8 00 00 00 00       	mov    eax,0x0
c001cd05:	8d 76 00             	lea    esi,[esi+0x0]
c001cd08:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cd0e:	c3                   	ret    
c001cd0f:	90                   	nop

c001cd10 <FAT::openDir(char const*, void**)>:
c001cd10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cd16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cd1e:	74 0c                	je     c001cd2c <FAT::openDir(char const*, void**)+0x1c>
c001cd20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cd28:	75 0e                	jne    c001cd38 <FAT::openDir(char const*, void**)+0x28>
c001cd2a:	66 90                	xchg   ax,ax
c001cd2c:	b8 04 00 00 00       	mov    eax,0x4
c001cd31:	e9 82 00 00 00       	jmp    c001cdb8 <FAT::openDir(char const*, void**)+0xa8>
c001cd36:	66 90                	xchg   ax,ax
c001cd38:	83 ec 08             	sub    esp,0x8
c001cd3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd42:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd46:	50                   	push   eax
c001cd47:	e8 f4 38 fe ff       	call   c0000640 <strcpy>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	83 ec 08             	sub    esp,0x8
c001cd52:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd56:	50                   	push   eax
c001cd57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd5e:	e8 f9 fd ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	6a 30                	push   0x30
c001cd6b:	e8 db 2a ff ff       	call   c000f84b <malloc>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	89 c2                	mov    edx,eax
c001cd75:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cd7c:	89 10                	mov    DWORD PTR [eax],edx
c001cd7e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cd85:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd87:	83 ec 08             	sub    esp,0x8
c001cd8a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	e8 5d 7a fe ff       	call   c00047f2 <f_opendir>
c001cd95:	83 c4 10             	add    esp,0x10
c001cd98:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cd9f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cda7:	74 07                	je     c001cdb0 <FAT::openDir(char const*, void**)+0xa0>
c001cda9:	b8 01 00 00 00       	mov    eax,0x1
c001cdae:	eb 08                	jmp    c001cdb8 <FAT::openDir(char const*, void**)+0xa8>
c001cdb0:	b8 00 00 00 00       	mov    eax,0x0
c001cdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001cdb8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cdbe:	c3                   	ret    
c001cdbf:	90                   	nop

c001cdc0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cdc0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cdc6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cdce:	75 0c                	jne    c001cddc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cdd0:	b8 04 00 00 00       	mov    eax,0x4
c001cdd5:	e9 d6 00 00 00       	jmp    c001ceb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cdda:	66 90                	xchg   ax,ax
c001cddc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cde4:	75 0a                	jne    c001cdf0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cde6:	b8 04 00 00 00       	mov    eax,0x4
c001cdeb:	e9 c0 00 00 00       	jmp    c001ceb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cdf0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cdf8:	75 0a                	jne    c001ce04 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cdfa:	b8 04 00 00 00       	mov    eax,0x4
c001cdff:	e9 ac 00 00 00       	jmp    c001ceb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ce04:	83 ec 08             	sub    esp,0x8
c001ce07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ce15:	50                   	push   eax
c001ce16:	e8 25 38 fe ff       	call   c0000640 <strcpy>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	83 ec 08             	sub    esp,0x8
c001ce21:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ce28:	50                   	push   eax
c001ce29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce30:	e8 27 fd ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	83 ec 08             	sub    esp,0x8
c001ce3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ce3f:	50                   	push   eax
c001ce40:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ce47:	50                   	push   eax
c001ce48:	e8 24 7b fe ff       	call   c0004971 <f_stat>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ce57:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ce5e:	85 c0                	test   eax,eax
c001ce60:	74 0a                	je     c001ce6c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ce62:	83 f8 04             	cmp    eax,0x4
c001ce65:	74 39                	je     c001cea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ce67:	eb 3f                	jmp    c001cea8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ce69:	8d 76 00             	lea    esi,[esi+0x0]
c001ce6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ce70:	0f b6 c0             	movzx  eax,al
c001ce73:	83 e0 10             	and    eax,0x10
c001ce76:	0f 95 c2             	setne  dl
c001ce79:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ce80:	88 10                	mov    BYTE PTR [eax],dl
c001ce82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce86:	ba 00 00 00 00       	mov    edx,0x0
c001ce8b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ce92:	89 01                	mov    DWORD PTR [ecx],eax
c001ce94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ce97:	b8 00 00 00 00       	mov    eax,0x0
c001ce9c:	eb 12                	jmp    c001ceb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ce9e:	66 90                	xchg   ax,ax
c001cea0:	b8 02 00 00 00       	mov    eax,0x2
c001cea5:	eb 09                	jmp    c001ceb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cea7:	90                   	nop
c001cea8:	b8 01 00 00 00       	mov    eax,0x1
c001cead:	8d 76 00             	lea    esi,[esi+0x0]
c001ceb0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ceb6:	c3                   	ret    
c001ceb7:	90                   	nop

c001ceb8 <FAT::unlink(char const*)>:
c001ceb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cebe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cec6:	75 08                	jne    c001ced0 <FAT::unlink(char const*)+0x18>
c001cec8:	b8 04 00 00 00       	mov    eax,0x4
c001cecd:	eb 61                	jmp    c001cf30 <FAT::unlink(char const*)+0x78>
c001cecf:	90                   	nop
c001ced0:	83 ec 08             	sub    esp,0x8
c001ced3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ceda:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cede:	50                   	push   eax
c001cedf:	e8 5c 37 fe ff       	call   c0000640 <strcpy>
c001cee4:	83 c4 10             	add    esp,0x10
c001cee7:	83 ec 08             	sub    esp,0x8
c001ceea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ceee:	50                   	push   eax
c001ceef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cef6:	e8 61 fc ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001cefb:	83 c4 10             	add    esp,0x10
c001cefe:	83 ec 0c             	sub    esp,0xc
c001cf01:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf05:	50                   	push   eax
c001cf06:	e8 d8 7c fe ff       	call   c0004be3 <f_unlink>
c001cf0b:	83 c4 10             	add    esp,0x10
c001cf0e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cf15:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cf1c:	85 c0                	test   eax,eax
c001cf1e:	75 08                	jne    c001cf28 <FAT::unlink(char const*)+0x70>
c001cf20:	b8 00 00 00 00       	mov    eax,0x0
c001cf25:	eb 09                	jmp    c001cf30 <FAT::unlink(char const*)+0x78>
c001cf27:	90                   	nop
c001cf28:	b8 01 00 00 00       	mov    eax,0x1
c001cf2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf30:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cf36:	c3                   	ret    
c001cf37:	90                   	nop

c001cf38 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cf38:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cf3e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001cf45:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001cf4c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cf50:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cf54:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cf5c:	75 0a                	jne    c001cf68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001cf5e:	b8 04 00 00 00       	mov    eax,0x4
c001cf63:	e9 7c 01 00 00       	jmp    c001d0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cf68:	83 ec 08             	sub    esp,0x8
c001cf6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cf72:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cf76:	50                   	push   eax
c001cf77:	e8 c4 36 fe ff       	call   c0000640 <strcpy>
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	83 ec 08             	sub    esp,0x8
c001cf82:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf86:	50                   	push   eax
c001cf87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cf8e:	e8 c9 fb ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001cf93:	83 c4 10             	add    esp,0x10
c001cf96:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cf9e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cfa6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cfab:	83 e0 01             	and    eax,0x1
c001cfae:	74 14                	je     c001cfc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001cfb0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cfb7:	83 c8 01             	or     eax,0x1
c001cfba:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cfc9:	83 e0 02             	and    eax,0x2
c001cfcc:	74 12                	je     c001cfe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001cfce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cfd5:	83 c8 20             	or     eax,0x20
c001cfd8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cfdf:	90                   	nop
c001cfe0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cfe5:	83 e0 04             	and    eax,0x4
c001cfe8:	74 12                	je     c001cffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001cfea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cff1:	83 c8 04             	or     eax,0x4
c001cff4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cffb:	90                   	nop
c001cffc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d001:	83 e0 08             	and    eax,0x8
c001d004:	74 12                	je     c001d018 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001d006:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d00d:	83 c8 02             	or     eax,0x2
c001d010:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d017:	90                   	nop
c001d018:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d01d:	83 e0 01             	and    eax,0x1
c001d020:	74 12                	je     c001d034 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001d022:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d029:	83 c8 01             	or     eax,0x1
c001d02c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d033:	90                   	nop
c001d034:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d039:	83 e0 02             	and    eax,0x2
c001d03c:	74 12                	je     c001d050 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001d03e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d045:	83 c8 20             	or     eax,0x20
c001d048:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d04f:	90                   	nop
c001d050:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d055:	83 e0 04             	and    eax,0x4
c001d058:	74 12                	je     c001d06c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001d05a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d061:	83 c8 04             	or     eax,0x4
c001d064:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d06b:	90                   	nop
c001d06c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d071:	83 e0 08             	and    eax,0x8
c001d074:	74 12                	je     c001d088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001d076:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d07d:	83 c8 02             	or     eax,0x2
c001d080:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d087:	90                   	nop
c001d088:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001d08f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d096:	09 d0                	or     eax,edx
c001d098:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d09f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001d0a7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001d0af:	83 ec 04             	sub    esp,0x4
c001d0b2:	52                   	push   edx
c001d0b3:	50                   	push   eax
c001d0b4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d0b8:	50                   	push   eax
c001d0b9:	e8 9a 7f fe ff       	call   c0005058 <f_chmod>
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001d0c8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001d0cf:	85 c0                	test   eax,eax
c001d0d1:	75 09                	jne    c001d0dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001d0d3:	b8 00 00 00 00       	mov    eax,0x0
c001d0d8:	eb 0a                	jmp    c001d0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001d0da:	66 90                	xchg   ax,ax
c001d0dc:	b8 01 00 00 00       	mov    eax,0x1
c001d0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001d0e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d0ea:	c3                   	ret    
c001d0eb:	90                   	nop

c001d0ec <FAT::rename(char const*, char const*)>:
c001d0ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d0f2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001d0fa:	74 0c                	je     c001d108 <FAT::rename(char const*, char const*)+0x1c>
c001d0fc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001d104:	75 0e                	jne    c001d114 <FAT::rename(char const*, char const*)+0x28>
c001d106:	66 90                	xchg   ax,ax
c001d108:	b8 04 00 00 00       	mov    eax,0x4
c001d10d:	e9 9e 00 00 00       	jmp    c001d1b0 <FAT::rename(char const*, char const*)+0xc4>
c001d112:	66 90                	xchg   ax,ax
c001d114:	83 ec 08             	sub    esp,0x8
c001d117:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d11e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d125:	50                   	push   eax
c001d126:	e8 15 35 fe ff       	call   c0000640 <strcpy>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	83 ec 08             	sub    esp,0x8
c001d131:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001d138:	50                   	push   eax
c001d139:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d140:	e8 17 fa ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001d145:	83 c4 10             	add    esp,0x10
c001d148:	83 ec 08             	sub    esp,0x8
c001d14b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001d152:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d156:	50                   	push   eax
c001d157:	e8 e4 34 fe ff       	call   c0000640 <strcpy>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	83 ec 08             	sub    esp,0x8
c001d162:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d166:	50                   	push   eax
c001d167:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d16e:	e8 e9 f9 ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001d173:	83 c4 10             	add    esp,0x10
c001d176:	83 ec 08             	sub    esp,0x8
c001d179:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d17d:	50                   	push   eax
c001d17e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d185:	50                   	push   eax
c001d186:	e8 15 7d fe ff       	call   c0004ea0 <f_rename>
c001d18b:	83 c4 10             	add    esp,0x10
c001d18e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001d195:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001d19c:	85 c0                	test   eax,eax
c001d19e:	75 08                	jne    c001d1a8 <FAT::rename(char const*, char const*)+0xbc>
c001d1a0:	b8 00 00 00 00       	mov    eax,0x0
c001d1a5:	eb 09                	jmp    c001d1b0 <FAT::rename(char const*, char const*)+0xc4>
c001d1a7:	90                   	nop
c001d1a8:	b8 01 00 00 00       	mov    eax,0x1
c001d1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d1b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d1b6:	c3                   	ret    
c001d1b7:	90                   	nop

c001d1b8 <FAT::mkdir(char const*)>:
c001d1b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d1be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d1c6:	75 08                	jne    c001d1d0 <FAT::mkdir(char const*)+0x18>
c001d1c8:	b8 04 00 00 00       	mov    eax,0x4
c001d1cd:	eb 61                	jmp    c001d230 <FAT::mkdir(char const*)+0x78>
c001d1cf:	90                   	nop
c001d1d0:	83 ec 08             	sub    esp,0x8
c001d1d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d1da:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d1de:	50                   	push   eax
c001d1df:	e8 5c 34 fe ff       	call   c0000640 <strcpy>
c001d1e4:	83 c4 10             	add    esp,0x10
c001d1e7:	83 ec 08             	sub    esp,0x8
c001d1ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d1ee:	50                   	push   eax
c001d1ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d1f6:	e8 61 f9 ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	83 ec 0c             	sub    esp,0xc
c001d201:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d205:	50                   	push   eax
c001d206:	e8 fa 7a fe ff       	call   c0004d05 <f_mkdir>
c001d20b:	83 c4 10             	add    esp,0x10
c001d20e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d215:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d21c:	85 c0                	test   eax,eax
c001d21e:	75 08                	jne    c001d228 <FAT::mkdir(char const*)+0x70>
c001d220:	b8 00 00 00 00       	mov    eax,0x0
c001d225:	eb 09                	jmp    c001d230 <FAT::mkdir(char const*)+0x78>
c001d227:	90                   	nop
c001d228:	b8 01 00 00 00       	mov    eax,0x1
c001d22d:	8d 76 00             	lea    esi,[esi+0x0]
c001d230:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d236:	c3                   	ret    
c001d237:	90                   	nop

c001d238 <FAT::exists(char const*)>:
c001d238:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d23e:	83 ec 08             	sub    esp,0x8
c001d241:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d248:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d24c:	50                   	push   eax
c001d24d:	e8 ee 33 fe ff       	call   c0000640 <strcpy>
c001d252:	83 c4 10             	add    esp,0x10
c001d255:	83 ec 08             	sub    esp,0x8
c001d258:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d25c:	50                   	push   eax
c001d25d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d264:	e8 f3 f8 ff ff       	call   c001cb5c <FAT::fixFilepath(char*)>
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	83 ec 08             	sub    esp,0x8
c001d26f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d276:	50                   	push   eax
c001d277:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d27b:	50                   	push   eax
c001d27c:	e8 f0 76 fe ff       	call   c0004971 <f_stat>
c001d281:	83 c4 10             	add    esp,0x10
c001d284:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d28b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d292:	85 c0                	test   eax,eax
c001d294:	75 06                	jne    c001d29c <FAT::exists(char const*)+0x64>
c001d296:	b0 01                	mov    al,0x1
c001d298:	eb 06                	jmp    c001d2a0 <FAT::exists(char const*)+0x68>
c001d29a:	66 90                	xchg   ax,ax
c001d29c:	b0 00                	mov    al,0x0
c001d29e:	66 90                	xchg   ax,ax
c001d2a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d2a6:	c3                   	ret    
c001d2a7:	90                   	nop

c001d2a8 <isoReadDiscSectorHelper>:
c001d2a8:	83 ec 2c             	sub    esp,0x2c
c001d2ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d2b3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d2b8:	83 e8 41             	sub    eax,0x41
c001d2bb:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001d2c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2c6:	ba 00 00 00 00       	mov    edx,0x0
c001d2cb:	83 ec 0c             	sub    esp,0xc
c001d2ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	51                   	push   ecx
c001d2d9:	e8 94 d7 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001d2de:	83 c4 20             	add    esp,0x20
c001d2e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2e5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d2ea:	74 0c                	je     c001d2f8 <isoReadDiscSectorHelper+0x50>
c001d2ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d2f0:	c1 e0 0b             	shl    eax,0xb
c001d2f3:	eb 0b                	jmp    c001d300 <isoReadDiscSectorHelper+0x58>
c001d2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2f8:	b8 00 00 00 00       	mov    eax,0x0
c001d2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d300:	83 c4 2c             	add    esp,0x2c
c001d303:	c3                   	ret    

c001d304 <iso_kprintf>:
c001d304:	83 ec 0c             	sub    esp,0xc
c001d307:	83 ec 08             	sub    esp,0x8
c001d30a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d30e:	68 fc 5a 02 c0       	push   0xc0025afc
c001d313:	e8 64 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	90                   	nop
c001d31c:	83 c4 0c             	add    esp,0xc
c001d31f:	c3                   	ret    

c001d320 <iso_kprintfd>:
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	83 ec 08             	sub    esp,0x8
c001d326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d32a:	68 8e 50 02 c0       	push   0xc002508e
c001d32f:	e8 48 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	90                   	nop
c001d338:	83 c4 0c             	add    esp,0xc
c001d33b:	c3                   	ret    

c001d33c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d33c:	b8 08 00 00 00       	mov    eax,0x8
c001d341:	c3                   	ret    

c001d342 <ISO9660::truncate(void*, unsigned long long)>:
c001d342:	b8 01 00 00 00       	mov    eax,0x1
c001d347:	c3                   	ret    

c001d348 <ISO9660::getName()>:
c001d348:	b8 88 5e 02 c0       	mov    eax,0xc0025e88
c001d34d:	c3                   	ret    

c001d34e <ISO9660::closeDir(void*)>:
c001d34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d352:	8b 00                	mov    eax,DWORD PTR [eax]
c001d354:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d357:	90                   	nop

c001d358 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d358:	b8 01 00 00 00       	mov    eax,0x1
c001d35d:	c3                   	ret    

c001d35e <ISO9660::unlink(char const*)>:
c001d35e:	b8 01 00 00 00       	mov    eax,0x1
c001d363:	c3                   	ret    

c001d364 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d364:	b8 03 00 00 00       	mov    eax,0x3
c001d369:	c3                   	ret    

c001d36a <ISO9660::rename(char const*, char const*)>:
c001d36a:	b8 01 00 00 00       	mov    eax,0x1
c001d36f:	c3                   	ret    

c001d370 <ISO9660::mkdir(char const*)>:
c001d370:	b8 01 00 00 00       	mov    eax,0x1
c001d375:	c3                   	ret    

c001d376 <ISO9660::~ISO9660()>:
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	ba c8 5f 02 c0       	mov    edx,0xc0025fc8
c001d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d382:	89 10                	mov    DWORD PTR [eax],edx
c001d384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d388:	83 ec 0c             	sub    esp,0xc
c001d38b:	50                   	push   eax
c001d38c:	e8 5b aa fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001d391:	83 c4 10             	add    esp,0x10
c001d394:	90                   	nop
c001d395:	83 c4 0c             	add    esp,0xc
c001d398:	c3                   	ret    
c001d399:	90                   	nop

c001d39a <ISO9660::~ISO9660()>:
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a4:	e8 cd ff ff ff       	call   c001d376 <ISO9660::~ISO9660()>
c001d3a9:	83 c4 10             	add    esp,0x10
c001d3ac:	83 ec 08             	sub    esp,0x8
c001d3af:	6a 08                	push   0x8
c001d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3b5:	e8 aa ff fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c001d3ba:	83 c4 10             	add    esp,0x10
c001d3bd:	83 c4 0c             	add    esp,0xc
c001d3c0:	c3                   	ret    
c001d3c1:	90                   	nop

c001d3c2 <ISO9660::exists(char const*)>:
c001d3c2:	83 ec 18             	sub    esp,0x18
c001d3c5:	68 a3 5e 02 c0       	push   0xc0025ea3
c001d3ca:	e8 d1 28 ff ff       	call   c000fca0 <KePanic(char const*)>
c001d3cf:	31 c0                	xor    eax,eax
c001d3d1:	83 c4 1c             	add    esp,0x1c
c001d3d4:	c3                   	ret    
c001d3d5:	90                   	nop

c001d3d6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d3d6:	56                   	push   esi
c001d3d7:	53                   	push   ebx
c001d3d8:	53                   	push   ebx
c001d3d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d3e1:	85 db                	test   ebx,ebx
c001d3e3:	0f 84 ca 00 00 00    	je     c001d4b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d3e9:	85 f6                	test   esi,esi
c001d3eb:	0f 84 c2 00 00 00    	je     c001d4b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d3f1:	b8 03 00 00 00       	mov    eax,0x3
c001d3f6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d3fb:	0f 85 b7 00 00 00    	jne    c001d4b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d401:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d403:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d40a:	38 0d 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,cl
c001d410:	74 1b                	je     c001d42d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d412:	85 c0                	test   eax,eax
c001d414:	74 10                	je     c001d426 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d416:	83 ec 0c             	sub    esp,0xc
c001d419:	68 c1 5e 02 c0       	push   0xc0025ec1
c001d41e:	e8 7d 28 ff ff       	call   c000fca0 <KePanic(char const*)>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	8a 03                	mov    al,BYTE PTR [ebx]
c001d428:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d42d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d430:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d437:	85 c0                	test   eax,eax
c001d439:	74 09                	je     c001d444 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d43b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d442:	74 48                	je     c001d48c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	68 d1 5e 02 c0       	push   0xc0025ed1
c001d44c:	e8 2b 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d451:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d45e:	85 c0                	test   eax,eax
c001d460:	74 17                	je     c001d479 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d462:	83 ec 0c             	sub    esp,0xc
c001d465:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d46c:	68 f1 5e 02 c0       	push   0xc0025ef1
c001d471:	e8 06 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d476:	83 c4 10             	add    esp,0x10
c001d479:	83 ec 0c             	sub    esp,0xc
c001d47c:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d483:	50                   	push   eax
c001d484:	e8 a5 97 fe ff       	call   c0006c2e <init_percd>
c001d489:	83 c4 10             	add    esp,0x10
c001d48c:	83 c3 03             	add    ebx,0x3
c001d48f:	51                   	push   ecx
c001d490:	51                   	push   ecx
c001d491:	6a 00                	push   0x0
c001d493:	53                   	push   ebx
c001d494:	e8 5c 92 fe ff       	call   c00066f5 <iso_open>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	89 c2                	mov    edx,eax
c001d49e:	b8 01 00 00 00       	mov    eax,0x1
c001d4a3:	83 fa ff             	cmp    edx,0xffffffff
c001d4a6:	74 10                	je     c001d4b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d4a8:	83 c2 32             	add    edx,0x32
c001d4ab:	31 c0                	xor    eax,eax
c001d4ad:	01 d2                	add    edx,edx
c001d4af:	89 16                	mov    DWORD PTR [esi],edx
c001d4b1:	eb 05                	jmp    c001d4b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d4b3:	b8 04 00 00 00       	mov    eax,0x4
c001d4b8:	5a                   	pop    edx
c001d4b9:	5b                   	pop    ebx
c001d4ba:	5e                   	pop    esi
c001d4bb:	c3                   	ret    

c001d4bc <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d4bc:	53                   	push   ebx
c001d4bd:	83 ec 08             	sub    esp,0x8
c001d4c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4c8:	85 c0                	test   eax,eax
c001d4ca:	74 2d                	je     c001d4f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d4cc:	85 db                	test   ebx,ebx
c001d4ce:	74 29                	je     c001d4f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d4d0:	b9 02 00 00 00       	mov    ecx,0x2
c001d4d5:	52                   	push   edx
c001d4d6:	99                   	cdq    
c001d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4db:	f7 f9                	idiv   ecx
c001d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d4e1:	83 e8 32             	sub    eax,0x32
c001d4e4:	50                   	push   eax
c001d4e5:	e8 b3 92 fe ff       	call   c000679d <iso_read>
c001d4ea:	83 c4 10             	add    esp,0x10
c001d4ed:	89 03                	mov    DWORD PTR [ebx],eax
c001d4ef:	09 d0                	or     eax,edx
c001d4f1:	0f 94 c0             	sete   al
c001d4f4:	0f b6 c0             	movzx  eax,al
c001d4f7:	eb 05                	jmp    c001d4fe <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d4f9:	b8 04 00 00 00       	mov    eax,0x4
c001d4fe:	83 c4 08             	add    esp,0x8
c001d501:	5b                   	pop    ebx
c001d502:	c3                   	ret    
c001d503:	90                   	nop

c001d504 <ISO9660::seek(void*, unsigned long long)>:
c001d504:	57                   	push   edi
c001d505:	56                   	push   esi
c001d506:	b8 04 00 00 00       	mov    eax,0x4
c001d50b:	51                   	push   ecx
c001d50c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d510:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d514:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d518:	85 d2                	test   edx,edx
c001d51a:	74 26                	je     c001d542 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d51c:	6a 00                	push   0x0
c001d51e:	b9 02 00 00 00       	mov    ecx,0x2
c001d523:	57                   	push   edi
c001d524:	89 d0                	mov    eax,edx
c001d526:	56                   	push   esi
c001d527:	99                   	cdq    
c001d528:	f7 f9                	idiv   ecx
c001d52a:	83 e8 32             	sub    eax,0x32
c001d52d:	50                   	push   eax
c001d52e:	e8 80 93 fe ff       	call   c00068b3 <iso_seek>
c001d533:	83 c4 10             	add    esp,0x10
c001d536:	31 f0                	xor    eax,esi
c001d538:	31 fa                	xor    edx,edi
c001d53a:	09 d0                	or     eax,edx
c001d53c:	0f 95 c0             	setne  al
c001d53f:	0f b6 c0             	movzx  eax,al
c001d542:	5a                   	pop    edx
c001d543:	5e                   	pop    esi
c001d544:	5f                   	pop    edi
c001d545:	c3                   	ret    

c001d546 <ISO9660::tell(void*, unsigned long long*)>:
c001d546:	53                   	push   ebx
c001d547:	83 ec 08             	sub    esp,0x8
c001d54a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d54e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d552:	85 c0                	test   eax,eax
c001d554:	74 24                	je     c001d57a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d556:	85 db                	test   ebx,ebx
c001d558:	74 20                	je     c001d57a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	b9 02 00 00 00       	mov    ecx,0x2
c001d562:	99                   	cdq    
c001d563:	f7 f9                	idiv   ecx
c001d565:	83 e8 32             	sub    eax,0x32
c001d568:	50                   	push   eax
c001d569:	e8 c9 93 fe ff       	call   c0006937 <iso_tell>
c001d56e:	83 c4 10             	add    esp,0x10
c001d571:	89 03                	mov    DWORD PTR [ebx],eax
c001d573:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d576:	31 c0                	xor    eax,eax
c001d578:	eb 05                	jmp    c001d57f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d57a:	b8 04 00 00 00       	mov    eax,0x4
c001d57f:	83 c4 08             	add    esp,0x8
c001d582:	5b                   	pop    ebx
c001d583:	c3                   	ret    

c001d584 <ISO9660::stat(void*, unsigned long long*)>:
c001d584:	53                   	push   ebx
c001d585:	83 ec 14             	sub    esp,0x14
c001d588:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d58c:	68 15 5f 02 c0       	push   0xc0025f15
c001d591:	e8 e6 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d59e:	74 2c                	je     c001d5cc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d5a0:	85 db                	test   ebx,ebx
c001d5a2:	74 28                	je     c001d5cc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	b9 02 00 00 00       	mov    ecx,0x2
c001d5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b0:	99                   	cdq    
c001d5b1:	f7 f9                	idiv   ecx
c001d5b3:	83 e8 32             	sub    eax,0x32
c001d5b6:	50                   	push   eax
c001d5b7:	e8 ac 93 fe ff       	call   c0006968 <iso_total>
c001d5bc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d5c3:	89 03                	mov    DWORD PTR [ebx],eax
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	31 c0                	xor    eax,eax
c001d5ca:	eb 05                	jmp    c001d5d1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d5cc:	b8 04 00 00 00       	mov    eax,0x4
c001d5d1:	83 c4 08             	add    esp,0x8
c001d5d4:	5b                   	pop    ebx
c001d5d5:	c3                   	ret    

c001d5d6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d5d6:	55                   	push   ebp
c001d5d7:	57                   	push   edi
c001d5d8:	56                   	push   esi
c001d5d9:	53                   	push   ebx
c001d5da:	83 ec 18             	sub    esp,0x18
c001d5dd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d5e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5e9:	68 1d 5f 02 c0       	push   0xc0025f1d
c001d5ee:	e8 89 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	85 ff                	test   edi,edi
c001d5f8:	0f 94 c0             	sete   al
c001d5fb:	85 f6                	test   esi,esi
c001d5fd:	0f 94 c2             	sete   dl
c001d600:	09 d0                	or     eax,edx
c001d602:	a8 01                	test   al,0x1
c001d604:	0f 85 dd 00 00 00    	jne    c001d6e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d60a:	85 db                	test   ebx,ebx
c001d60c:	0f 84 d5 00 00 00    	je     c001d6e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d612:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d615:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d61b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d622:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d629:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d62b:	38 0d 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,cl
c001d631:	74 1b                	je     c001d64e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d633:	85 c0                	test   eax,eax
c001d635:	74 10                	je     c001d647 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d637:	83 ec 0c             	sub    esp,0xc
c001d63a:	68 c1 5e 02 c0       	push   0xc0025ec1
c001d63f:	e8 5c 26 ff ff       	call   c000fca0 <KePanic(char const*)>
c001d644:	83 c4 10             	add    esp,0x10
c001d647:	8a 03                	mov    al,BYTE PTR [ebx]
c001d649:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d64e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d651:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d658:	85 c0                	test   eax,eax
c001d65a:	74 09                	je     c001d665 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d65c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d663:	74 51                	je     c001d6b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	68 25 5f 02 c0       	push   0xc0025f25
c001d66d:	e8 0a 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d672:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d680:	74 21                	je     c001d6a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	68 45 5f 02 c0       	push   0xc0025f45
c001d68a:	e8 ed 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d68f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d69c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d6a3:	83 ec 0c             	sub    esp,0xc
c001d6a6:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d6ad:	50                   	push   eax
c001d6ae:	e8 7b 95 fe ff       	call   c0006c2e <init_percd>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	83 c3 03             	add    ebx,0x3
c001d6b9:	52                   	push   edx
c001d6ba:	52                   	push   edx
c001d6bb:	6a 00                	push   0x0
c001d6bd:	53                   	push   ebx
c001d6be:	e8 32 90 fe ff       	call   c00066f5 <iso_open>
c001d6c3:	83 c4 10             	add    esp,0x10
c001d6c6:	89 c5                	mov    ebp,eax
c001d6c8:	83 f8 ff             	cmp    eax,0xffffffff
c001d6cb:	75 21                	jne    c001d6ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d6cd:	50                   	push   eax
c001d6ce:	50                   	push   eax
c001d6cf:	6a 01                	push   0x1
c001d6d1:	53                   	push   ebx
c001d6d2:	e8 1e 90 fe ff       	call   c00066f5 <iso_open>
c001d6d7:	83 c4 10             	add    esp,0x10
c001d6da:	ba 02 00 00 00       	mov    edx,0x2
c001d6df:	40                   	inc    eax
c001d6e0:	74 2b                	je     c001d70d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d6e2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d6e5:	eb 24                	jmp    c001d70b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d6e7:	ba 04 00 00 00       	mov    edx,0x4
c001d6ec:	eb 1f                	jmp    c001d70d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d6ee:	83 ec 0c             	sub    esp,0xc
c001d6f1:	50                   	push   eax
c001d6f2:	e8 71 92 fe ff       	call   c0006968 <iso_total>
c001d6f7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d6fe:	89 07                	mov    DWORD PTR [edi],eax
c001d700:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d703:	e8 77 90 fe ff       	call   c000677f <iso_close>
c001d708:	83 c4 10             	add    esp,0x10
c001d70b:	31 d2                	xor    edx,edx
c001d70d:	83 c4 0c             	add    esp,0xc
c001d710:	89 d0                	mov    eax,edx
c001d712:	5b                   	pop    ebx
c001d713:	5e                   	pop    esi
c001d714:	5f                   	pop    edi
c001d715:	5d                   	pop    ebp
c001d716:	c3                   	ret    
c001d717:	90                   	nop

c001d718 <ISO9660::close(void*)>:
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	b8 04 00 00 00       	mov    eax,0x4
c001d720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d724:	85 d2                	test   edx,edx
c001d726:	74 1b                	je     c001d743 <ISO9660::close(void*)+0x2b>
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	b9 02 00 00 00       	mov    ecx,0x2
c001d730:	89 d0                	mov    eax,edx
c001d732:	99                   	cdq    
c001d733:	f7 f9                	idiv   ecx
c001d735:	83 e8 32             	sub    eax,0x32
c001d738:	50                   	push   eax
c001d739:	e8 41 90 fe ff       	call   c000677f <iso_close>
c001d73e:	83 c4 10             	add    esp,0x10
c001d741:	31 c0                	xor    eax,eax
c001d743:	83 c4 0c             	add    esp,0xc
c001d746:	c3                   	ret    
c001d747:	90                   	nop

c001d748 <ISO9660::openDir(char const*, void**)>:
c001d748:	56                   	push   esi
c001d749:	53                   	push   ebx
c001d74a:	50                   	push   eax
c001d74b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d74f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d753:	85 db                	test   ebx,ebx
c001d755:	0f 84 bd 00 00 00    	je     c001d818 <ISO9660::openDir(char const*, void**)+0xd0>
c001d75b:	85 f6                	test   esi,esi
c001d75d:	0f 84 b5 00 00 00    	je     c001d818 <ISO9660::openDir(char const*, void**)+0xd0>
c001d763:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d765:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d76c:	38 15 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,dl
c001d772:	74 1b                	je     c001d78f <ISO9660::openDir(char const*, void**)+0x47>
c001d774:	85 c0                	test   eax,eax
c001d776:	74 10                	je     c001d788 <ISO9660::openDir(char const*, void**)+0x40>
c001d778:	83 ec 0c             	sub    esp,0xc
c001d77b:	68 c1 5e 02 c0       	push   0xc0025ec1
c001d780:	e8 1b 25 ff ff       	call   c000fca0 <KePanic(char const*)>
c001d785:	83 c4 10             	add    esp,0x10
c001d788:	8a 03                	mov    al,BYTE PTR [ebx]
c001d78a:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d78f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d792:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d799:	85 c0                	test   eax,eax
c001d79b:	74 10                	je     c001d7ad <ISO9660::openDir(char const*, void**)+0x65>
c001d79d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d7a4:	74 1a                	je     c001d7c0 <ISO9660::openDir(char const*, void**)+0x78>
c001d7a6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d7ad:	83 ec 0c             	sub    esp,0xc
c001d7b0:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d7b7:	50                   	push   eax
c001d7b8:	e8 71 94 fe ff       	call   c0006c2e <init_percd>
c001d7bd:	83 c4 10             	add    esp,0x10
c001d7c0:	83 c3 03             	add    ebx,0x3
c001d7c3:	50                   	push   eax
c001d7c4:	50                   	push   eax
c001d7c5:	6a 01                	push   0x1
c001d7c7:	53                   	push   ebx
c001d7c8:	e8 28 8f fe ff       	call   c00066f5 <iso_open>
c001d7cd:	83 c4 10             	add    esp,0x10
c001d7d0:	89 c3                	mov    ebx,eax
c001d7d2:	83 f8 ff             	cmp    eax,0xffffffff
c001d7d5:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d7da:	75 1c                	jne    c001d7f8 <ISO9660::openDir(char const*, void**)+0xb0>
c001d7dc:	53                   	push   ebx
c001d7dd:	53                   	push   ebx
c001d7de:	68 69 5f 02 c0       	push   0xc0025f69
c001d7e3:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d7e9:	e8 1e 4e ff ff       	call   c001260c <VgaText::puts(char const*)>
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	b8 01 00 00 00       	mov    eax,0x1
c001d7f6:	eb 25                	jmp    c001d81d <ISO9660::openDir(char const*, void**)+0xd5>
c001d7f8:	01 db                	add    ebx,ebx
c001d7fa:	51                   	push   ecx
c001d7fb:	83 c3 65             	add    ebx,0x65
c001d7fe:	51                   	push   ecx
c001d7ff:	68 7c 5f 02 c0       	push   0xc0025f7c
c001d804:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d80a:	e8 fd 4d ff ff       	call   c001260c <VgaText::puts(char const*)>
c001d80f:	89 1e                	mov    DWORD PTR [esi],ebx
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	31 c0                	xor    eax,eax
c001d816:	eb 05                	jmp    c001d81d <ISO9660::openDir(char const*, void**)+0xd5>
c001d818:	b8 04 00 00 00       	mov    eax,0x4
c001d81d:	5a                   	pop    edx
c001d81e:	5b                   	pop    ebx
c001d81f:	5e                   	pop    esi
c001d820:	c3                   	ret    
c001d821:	90                   	nop

c001d822 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d822:	55                   	push   ebp
c001d823:	57                   	push   edi
c001d824:	56                   	push   esi
c001d825:	53                   	push   ebx
c001d826:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d82c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d833:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d83a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d842:	0f 84 e7 00 00 00    	je     c001d92f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d848:	85 db                	test   ebx,ebx
c001d84a:	0f 84 df 00 00 00    	je     c001d92f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d850:	83 ec 0c             	sub    esp,0xc
c001d853:	68 8f 5f 02 c0       	push   0xc0025f8f
c001d858:	e8 1f 97 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d85d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d864:	b9 02 00 00 00       	mov    ecx,0x2
c001d869:	99                   	cdq    
c001d86a:	f7 f9                	idiv   ecx
c001d86c:	83 e8 32             	sub    eax,0x32
c001d86f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d872:	e8 43 91 fe ff       	call   c00069ba <iso_readdir>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	89 c6                	mov    esi,eax
c001d87c:	85 c0                	test   eax,eax
c001d87e:	75 37                	jne    c001d8b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d880:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d885:	56                   	push   esi
c001d886:	56                   	push   esi
c001d887:	68 9a 5f 02 c0       	push   0xc0025f9a
c001d88c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d892:	e8 75 4d ff ff       	call   c001260c <VgaText::puts(char const*)>
c001d897:	83 c4 0c             	add    esp,0xc
c001d89a:	68 10 01 00 00       	push   0x110
c001d89f:	6a 00                	push   0x0
c001d8a1:	57                   	push   edi
c001d8a2:	e8 49 2c fe ff       	call   c00004f0 <memset>
c001d8a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	b8 01 00 00 00       	mov    eax,0x1
c001d8b5:	eb 7d                	jmp    c001d934 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d8b7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d8bd:	8d 68 08             	lea    ebp,[eax+0x8]
c001d8c0:	83 ec 0c             	sub    esp,0xc
c001d8c3:	55                   	push   ebp
c001d8c4:	e8 a7 2c fe ff       	call   c0000570 <strlen>
c001d8c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d8d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d8dc:	75 0a                	jne    c001d8e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d8de:	b8 02 00 00 00       	mov    eax,0x2
c001d8e3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d8e6:	74 05                	je     c001d8ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d8e8:	b8 01 00 00 00       	mov    eax,0x1
c001d8ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8f1:	50                   	push   eax
c001d8f2:	50                   	push   eax
c001d8f3:	55                   	push   ebp
c001d8f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d8fc:	50                   	push   eax
c001d8fd:	e8 3e 2d fe ff       	call   c0000640 <strcpy>
c001d902:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d909:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d90b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d911:	5a                   	pop    edx
c001d912:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d917:	59                   	pop    ecx
c001d918:	68 ad 5f 02 c0       	push   0xc0025fad
c001d91d:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d923:	e8 e4 4c ff ff       	call   c001260c <VgaText::puts(char const*)>
c001d928:	83 c4 10             	add    esp,0x10
c001d92b:	31 c0                	xor    eax,eax
c001d92d:	eb 05                	jmp    c001d934 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d92f:	b8 04 00 00 00       	mov    eax,0x4
c001d934:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d93a:	5b                   	pop    ebx
c001d93b:	5e                   	pop    esi
c001d93c:	5f                   	pop    edi
c001d93d:	5d                   	pop    ebp
c001d93e:	c3                   	ret    

c001d93f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d93f:	57                   	push   edi
c001d940:	56                   	push   esi
c001d941:	53                   	push   ebx
c001d942:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d946:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d94a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d94e:	39 35 84 f5 02 c0    	cmp    DWORD PTR ds:0xc002f584,esi
c001d954:	0f be cb             	movsx  ecx,bl
c001d957:	75 0b                	jne    c001d964 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d959:	0f be 05 24 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027224
c001d960:	39 c8                	cmp    eax,ecx
c001d962:	74 47                	je     c001d9ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d964:	83 ec 0c             	sub    esp,0xc
c001d967:	31 d2                	xor    edx,edx
c001d969:	68 a0 f5 02 c0       	push   0xc002f5a0
c001d96e:	6a 01                	push   0x1
c001d970:	52                   	push   edx
c001d971:	56                   	push   esi
c001d972:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d979:	e8 f4 d0 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001d97e:	83 c4 20             	add    esp,0x20
c001d981:	85 c0                	test   eax,eax
c001d983:	75 0e                	jne    c001d993 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d985:	89 35 84 f5 02 c0    	mov    DWORD PTR ds:0xc002f584,esi
c001d98b:	88 1d 24 72 02 c0    	mov    BYTE PTR ds:0xc0027224,bl
c001d991:	eb 18                	jmp    c001d9ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d993:	50                   	push   eax
c001d994:	68 00 08 00 00       	push   0x800
c001d999:	6a 00                	push   0x0
c001d99b:	57                   	push   edi
c001d99c:	e8 4f 2b fe ff       	call   c00004f0 <memset>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	b8 01 00 00 00       	mov    eax,0x1
c001d9a9:	eb 0e                	jmp    c001d9b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d9ab:	be a0 f5 02 c0       	mov    esi,0xc002f5a0
c001d9b0:	b9 00 08 00 00       	mov    ecx,0x800
c001d9b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9b7:	31 c0                	xor    eax,eax
c001d9b9:	5b                   	pop    ebx
c001d9ba:	5e                   	pop    esi
c001d9bb:	5f                   	pop    edi
c001d9bc:	c3                   	ret    
c001d9bd:	90                   	nop

c001d9be <ISO9660::tryMount(LogicalDisk*, int)>:
c001d9be:	53                   	push   ebx
c001d9bf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d9c5:	c7 05 84 f5 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002f584,0xdeadbeef
c001d9cf:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d9d6:	8d 58 41             	lea    ebx,[eax+0x41]
c001d9d9:	0f be db             	movsx  ebx,bl
c001d9dc:	53                   	push   ebx
c001d9dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d9e1:	50                   	push   eax
c001d9e2:	6a 10                	push   0x10
c001d9e4:	e8 56 ff ff ff       	call   c001d93f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	31 d2                	xor    edx,edx
c001d9ee:	85 c0                	test   eax,eax
c001d9f0:	75 33                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d9f2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d9f7:	75 2c                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d9f9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d9fe:	75 25                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001da00:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001da05:	75 1e                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001da07:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001da0c:	75 17                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001da0e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001da13:	75 10                	jne    c001da25 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	53                   	push   ebx
c001da19:	e8 10 92 fe ff       	call   c0006c2e <init_percd>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	40                   	inc    eax
c001da22:	0f 95 c2             	setne  dl
c001da25:	88 d0                	mov    al,dl
c001da27:	81 c4 08 08 00 00    	add    esp,0x808
c001da2d:	5b                   	pop    ebx
c001da2e:	c3                   	ret    
c001da2f:	90                   	nop

c001da30 <ISO9660::ISO9660()>:
c001da30:	83 ec 0c             	sub    esp,0xc
c001da33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da37:	83 ec 0c             	sub    esp,0xc
c001da3a:	50                   	push   eax
c001da3b:	e8 88 a3 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001da40:	83 c4 10             	add    esp,0x10
c001da43:	ba c8 5f 02 c0       	mov    edx,0xc0025fc8
c001da48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da4c:	89 10                	mov    DWORD PTR [eax],edx
c001da4e:	e8 ed 92 fe ff       	call   c0006d40 <fs_iso9660_init>
c001da53:	90                   	nop
c001da54:	83 c4 0c             	add    esp,0xc
c001da57:	c3                   	ret    

c001da58 <SoundCard::beginPlayback()>:
c001da58:	c7 44 24 04 2c 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc002602c
c001da60:	e9 3b 22 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001da65:	90                   	nop

c001da66 <SoundCard::stopPlayback()>:
c001da66:	c7 44 24 04 2c 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc002602c
c001da6e:	e9 2d 22 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001da73:	90                   	nop

c001da74 <SoundCard::SoundCard(char const*)>:
c001da74:	83 ec 1c             	sub    esp,0x1c
c001da77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7b:	83 ec 08             	sub    esp,0x8
c001da7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da82:	50                   	push   eax
c001da83:	e8 2e c1 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	ba 78 60 02 c0       	mov    edx,0xc0026078
c001da90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da94:	89 10                	mov    DWORD PTR [eax],edx
c001da96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001daaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001dabd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001dacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001dad9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dae1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001dae6:	7f 1a                	jg     c001db02 <SoundCard::SoundCard(char const*)+0x8e>
c001dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001daf0:	83 c2 54             	add    edx,0x54
c001daf3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001dafb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001db00:	eb df                	jmp    c001dae1 <SoundCard::SoundCard(char const*)+0x6d>
c001db02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db06:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001db0d:	90                   	nop
c001db0e:	83 c4 1c             	add    esp,0x1c
c001db11:	c3                   	ret    

c001db12 <SoundCard::~SoundCard()>:
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	ba 78 60 02 c0       	mov    edx,0xc0026078
c001db1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1e:	89 10                	mov    DWORD PTR [eax],edx
c001db20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	50                   	push   eax
c001db28:	e8 29 be fe ff       	call   c0009956 <Device::~Device()>
c001db2d:	83 c4 10             	add    esp,0x10
c001db30:	90                   	nop
c001db31:	83 c4 0c             	add    esp,0xc
c001db34:	c3                   	ret    
c001db35:	90                   	nop

c001db36 <SoundCard::~SoundCard()>:
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	83 ec 0c             	sub    esp,0xc
c001db3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db40:	e8 cd ff ff ff       	call   c001db12 <SoundCard::~SoundCard()>
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	83 ec 08             	sub    esp,0x8
c001db4b:	68 e8 01 00 00       	push   0x1e8
c001db50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db54:	e8 0b f8 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	83 c4 0c             	add    esp,0xc
c001db5f:	c3                   	ret    

c001db60 <SoundCard::configureRates(int, int, int)>:
c001db60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db64:	31 c0                	xor    eax,eax
c001db66:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001db6d:	75 20                	jne    c001db8f <SoundCard::configureRates(int, int, int)+0x2f>
c001db6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db73:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001db79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db7d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001db83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db87:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001db8d:	b0 01                	mov    al,0x1
c001db8f:	c3                   	ret    

c001db90 <SoundCard::getSamples16(int, short*)>:
c001db90:	55                   	push   ebp
c001db91:	57                   	push   edi
c001db92:	31 ff                	xor    edi,edi
c001db94:	56                   	push   esi
c001db95:	53                   	push   ebx
c001db96:	31 db                	xor    ebx,ebx
c001db98:	83 ec 10             	sub    esp,0x10
c001db9b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001db9f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dba3:	8d 04 36             	lea    eax,[esi+esi*1]
c001dba6:	50                   	push   eax
c001dba7:	6a 00                	push   0x0
c001dba9:	55                   	push   ebp
c001dbaa:	e8 41 29 fe ff       	call   c00004f0 <memset>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001dbbd:	85 c0                	test   eax,eax
c001dbbf:	74 1b                	je     c001dbdc <SoundCard::getSamples16(int, short*)+0x4c>
c001dbc1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dbc5:	75 15                	jne    c001dbdc <SoundCard::getSamples16(int, short*)+0x4c>
c001dbc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dbcb:	55                   	push   ebp
c001dbcc:	56                   	push   esi
c001dbcd:	50                   	push   eax
c001dbce:	e8 8d 03 00 00       	call   c001df60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001dbd3:	83 c4 10             	add    esp,0x10
c001dbd6:	39 c7                	cmp    edi,eax
c001dbd8:	7d 02                	jge    c001dbdc <SoundCard::getSamples16(int, short*)+0x4c>
c001dbda:	89 c7                	mov    edi,eax
c001dbdc:	43                   	inc    ebx
c001dbdd:	83 fb 20             	cmp    ebx,0x20
c001dbe0:	75 d0                	jne    c001dbb2 <SoundCard::getSamples16(int, short*)+0x22>
c001dbe2:	83 c4 0c             	add    esp,0xc
c001dbe5:	89 f8                	mov    eax,edi
c001dbe7:	5b                   	pop    ebx
c001dbe8:	5e                   	pop    esi
c001dbe9:	5f                   	pop    edi
c001dbea:	5d                   	pop    ebp
c001dbeb:	c3                   	ret    

c001dbec <SoundCard::getSamples32(int, int*)>:
c001dbec:	55                   	push   ebp
c001dbed:	57                   	push   edi
c001dbee:	31 ff                	xor    edi,edi
c001dbf0:	56                   	push   esi
c001dbf1:	31 f6                	xor    esi,esi
c001dbf3:	53                   	push   ebx
c001dbf4:	83 ec 10             	sub    esp,0x10
c001dbf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dbfb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001dbff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dc03:	c1 e0 02             	shl    eax,0x2
c001dc06:	50                   	push   eax
c001dc07:	6a 00                	push   0x0
c001dc09:	55                   	push   ebp
c001dc0a:	e8 e1 28 fe ff       	call   c00004f0 <memset>
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001dc19:	85 c0                	test   eax,eax
c001dc1b:	74 1b                	je     c001dc38 <SoundCard::getSamples32(int, int*)+0x4c>
c001dc1d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dc21:	75 15                	jne    c001dc38 <SoundCard::getSamples32(int, int*)+0x4c>
c001dc23:	53                   	push   ebx
c001dc24:	55                   	push   ebp
c001dc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc29:	50                   	push   eax
c001dc2a:	e8 fd 03 00 00       	call   c001e02c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001dc2f:	83 c4 10             	add    esp,0x10
c001dc32:	39 c6                	cmp    esi,eax
c001dc34:	7d 02                	jge    c001dc38 <SoundCard::getSamples32(int, int*)+0x4c>
c001dc36:	89 c6                	mov    esi,eax
c001dc38:	47                   	inc    edi
c001dc39:	83 ff 20             	cmp    edi,0x20
c001dc3c:	75 d4                	jne    c001dc12 <SoundCard::getSamples32(int, int*)+0x26>
c001dc3e:	85 f6                	test   esi,esi
c001dc40:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001dc47:	75 0f                	jne    c001dc58 <SoundCard::getSamples32(int, int*)+0x6c>
c001dc49:	85 c0                	test   eax,eax
c001dc4b:	74 1b                	je     c001dc68 <SoundCard::getSamples32(int, int*)+0x7c>
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc52:	53                   	push   ebx
c001dc53:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001dc56:	eb 0d                	jmp    c001dc65 <SoundCard::getSamples32(int, int*)+0x79>
c001dc58:	85 c0                	test   eax,eax
c001dc5a:	75 0c                	jne    c001dc68 <SoundCard::getSamples32(int, int*)+0x7c>
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc61:	53                   	push   ebx
c001dc62:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001dc65:	83 c4 10             	add    esp,0x10
c001dc68:	83 c4 0c             	add    esp,0xc
c001dc6b:	89 f0                	mov    eax,esi
c001dc6d:	5b                   	pop    ebx
c001dc6e:	5e                   	pop    esi
c001dc6f:	5f                   	pop    edi
c001dc70:	5d                   	pop    ebp
c001dc71:	c3                   	ret    

c001dc72 <SoundCard::addChannel(SoundPort*)>:
c001dc72:	83 ec 0c             	sub    esp,0xc
c001dc75:	31 c0                	xor    eax,eax
c001dc77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc7b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001dc83:	74 1b                	je     c001dca0 <SoundCard::addChannel(SoundPort*)+0x2e>
c001dc85:	40                   	inc    eax
c001dc86:	83 f8 20             	cmp    eax,0x20
c001dc89:	75 f0                	jne    c001dc7b <SoundCard::addChannel(SoundPort*)+0x9>
c001dc8b:	83 ec 0c             	sub    esp,0xc
c001dc8e:	68 51 60 02 c0       	push   0xc0026051
c001dc93:	e8 08 20 ff ff       	call   c000fca0 <KePanic(char const*)>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	83 c8 ff             	or     eax,0xffffffff
c001dc9e:	eb 0b                	jmp    c001dcab <SoundCard::addChannel(SoundPort*)+0x39>
c001dca0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dca4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001dcab:	83 c4 0c             	add    esp,0xc
c001dcae:	c3                   	ret    
c001dcaf:	90                   	nop

c001dcb0 <SoundCard::removeChannel(int)>:
c001dcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcb8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001dcc3:	c3                   	ret    

c001dcc4 <SoundPort::SoundPort(int, int, int, int)>:
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dce2:	89 10                	mov    DWORD PTR [eax],edx
c001dce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcf7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dcfa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001dcff:	75 13                	jne    c001dd14 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001dd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd05:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd07:	05 a0 0f 00 00       	add    eax,0xfa0
c001dd0c:	01 c0                	add    eax,eax
c001dd0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd12:	66 90                	xchg   ax,ax
c001dd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd1c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001dd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd23:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001dd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dd31:	c1 e0 02             	shl    eax,0x2
c001dd34:	83 ec 0c             	sub    esp,0xc
c001dd37:	50                   	push   eax
c001dd38:	e8 0e 1b ff ff       	call   c000f84b <malloc>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	89 c2                	mov    edx,eax
c001dd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd46:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dd49:	90                   	nop
c001dd4a:	83 c4 0c             	add    esp,0xc
c001dd4d:	c3                   	ret    
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <SoundPort::~SoundPort()>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd5a:	85 c0                	test   eax,eax
c001dd5c:	74 1e                	je     c001dd7c <SoundPort::~SoundPort()+0x2c>
c001dd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd65:	83 ec 0c             	sub    esp,0xc
c001dd68:	50                   	push   eax
c001dd69:	e8 ed 1a ff ff       	call   c000f85b <free>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd75:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd7c:	90                   	nop
c001dd7d:	83 c4 0c             	add    esp,0xc
c001dd80:	c3                   	ret    
c001dd81:	90                   	nop
c001dd82:	66 90                	xchg   ax,ax

c001dd84 <SoundPort::unpause()>:
c001dd84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd88:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001dd8c:	c3                   	ret    
c001dd8d:	90                   	nop
c001dd8e:	66 90                	xchg   ax,ax

c001dd90 <SoundPort::pause()>:
c001dd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd94:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001dd98:	c3                   	ret    
c001dd99:	90                   	nop
c001dd9a:	66 90                	xchg   ax,ax

c001dd9c <SoundPort::getBufferUsed()>:
c001dd9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dda0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001dda3:	c3                   	ret    

c001dda4 <SoundPort::getBufferSize()>:
c001dda4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dda8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ddab:	c3                   	ret    

c001ddac <SoundPort::buffer8(signed char*, int)>:
c001ddac:	55                   	push   ebp
c001ddad:	57                   	push   edi
c001ddae:	56                   	push   esi
c001ddaf:	53                   	push   ebx
c001ddb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddb4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ddb8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ddbb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ddbe:	74 70                	je     c001de30 <SoundPort::buffer8(signed char*, int)+0x84>
c001ddc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddc4:	85 c9                	test   ecx,ecx
c001ddc6:	7e 68                	jle    c001de30 <SoundPort::buffer8(signed char*, int)+0x84>
c001ddc8:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001ddcc:	8d 48 01             	lea    ecx,[eax+0x1]
c001ddcf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ddd2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ddd5:	89 f1                	mov    ecx,esi
c001ddd7:	c1 e1 18             	shl    ecx,0x18
c001ddda:	29 f1                	sub    ecx,esi
c001dddc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dddf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dde2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dde5:	74 51                	je     c001de38 <SoundPort::buffer8(signed char*, int)+0x8c>
c001dde7:	31 ff                	xor    edi,edi
c001dde9:	eb 25                	jmp    c001de10 <SoundPort::buffer8(signed char*, int)+0x64>
c001ddeb:	90                   	nop
c001ddec:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ddf1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ddf4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ddf7:	89 f3                	mov    ebx,esi
c001ddf9:	c1 e3 18             	shl    ebx,0x18
c001ddfc:	29 f3                	sub    ebx,esi
c001ddfe:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001de01:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001de04:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001de07:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001de0a:	74 1c                	je     c001de28 <SoundPort::buffer8(signed char*, int)+0x7c>
c001de0c:	89 c7                	mov    edi,eax
c001de0e:	66 90                	xchg   ax,ax
c001de10:	8d 47 01             	lea    eax,[edi+0x1]
c001de13:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001de17:	75 d3                	jne    c001ddec <SoundPort::buffer8(signed char*, int)+0x40>
c001de19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de1d:	8d 76 00             	lea    esi,[esi+0x0]
c001de20:	5b                   	pop    ebx
c001de21:	5e                   	pop    esi
c001de22:	5f                   	pop    edi
c001de23:	5d                   	pop    ebp
c001de24:	c3                   	ret    
c001de25:	8d 76 00             	lea    esi,[esi+0x0]
c001de28:	5b                   	pop    ebx
c001de29:	8d 47 02             	lea    eax,[edi+0x2]
c001de2c:	5e                   	pop    esi
c001de2d:	5f                   	pop    edi
c001de2e:	5d                   	pop    ebp
c001de2f:	c3                   	ret    
c001de30:	5b                   	pop    ebx
c001de31:	31 c0                	xor    eax,eax
c001de33:	5e                   	pop    esi
c001de34:	5f                   	pop    edi
c001de35:	5d                   	pop    ebp
c001de36:	c3                   	ret    
c001de37:	90                   	nop
c001de38:	b8 01 00 00 00       	mov    eax,0x1
c001de3d:	eb e1                	jmp    c001de20 <SoundPort::buffer8(signed char*, int)+0x74>
c001de3f:	90                   	nop

c001de40 <SoundPort::buffer16(short*, int)>:
c001de40:	55                   	push   ebp
c001de41:	57                   	push   edi
c001de42:	56                   	push   esi
c001de43:	53                   	push   ebx
c001de44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001de4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001de4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001de52:	74 70                	je     c001dec4 <SoundPort::buffer16(short*, int)+0x84>
c001de54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de58:	85 c9                	test   ecx,ecx
c001de5a:	7e 68                	jle    c001dec4 <SoundPort::buffer16(short*, int)+0x84>
c001de5c:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001de60:	8d 48 01             	lea    ecx,[eax+0x1]
c001de63:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001de66:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001de69:	89 f1                	mov    ecx,esi
c001de6b:	c1 e1 10             	shl    ecx,0x10
c001de6e:	29 f1                	sub    ecx,esi
c001de70:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001de73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001de76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001de79:	74 51                	je     c001decc <SoundPort::buffer16(short*, int)+0x8c>
c001de7b:	31 ff                	xor    edi,edi
c001de7d:	eb 25                	jmp    c001dea4 <SoundPort::buffer16(short*, int)+0x64>
c001de7f:	90                   	nop
c001de80:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001de85:	8d 59 01             	lea    ebx,[ecx+0x1]
c001de88:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001de8b:	89 f3                	mov    ebx,esi
c001de8d:	c1 e3 10             	shl    ebx,0x10
c001de90:	29 f3                	sub    ebx,esi
c001de92:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001de95:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001de98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001de9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001de9e:	74 1c                	je     c001debc <SoundPort::buffer16(short*, int)+0x7c>
c001dea0:	89 c7                	mov    edi,eax
c001dea2:	66 90                	xchg   ax,ax
c001dea4:	8d 47 01             	lea    eax,[edi+0x1]
c001dea7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001deab:	75 d3                	jne    c001de80 <SoundPort::buffer16(short*, int)+0x40>
c001dead:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001deb1:	8d 76 00             	lea    esi,[esi+0x0]
c001deb4:	5b                   	pop    ebx
c001deb5:	5e                   	pop    esi
c001deb6:	5f                   	pop    edi
c001deb7:	5d                   	pop    ebp
c001deb8:	c3                   	ret    
c001deb9:	8d 76 00             	lea    esi,[esi+0x0]
c001debc:	5b                   	pop    ebx
c001debd:	8d 47 02             	lea    eax,[edi+0x2]
c001dec0:	5e                   	pop    esi
c001dec1:	5f                   	pop    edi
c001dec2:	5d                   	pop    ebp
c001dec3:	c3                   	ret    
c001dec4:	5b                   	pop    ebx
c001dec5:	31 c0                	xor    eax,eax
c001dec7:	5e                   	pop    esi
c001dec8:	5f                   	pop    edi
c001dec9:	5d                   	pop    ebp
c001deca:	c3                   	ret    
c001decb:	90                   	nop
c001decc:	b8 01 00 00 00       	mov    eax,0x1
c001ded1:	eb e1                	jmp    c001deb4 <SoundPort::buffer16(short*, int)+0x74>
c001ded3:	90                   	nop

c001ded4 <SoundPort::buffer32(int*, int)>:
c001ded4:	55                   	push   ebp
c001ded5:	57                   	push   edi
c001ded6:	56                   	push   esi
c001ded7:	53                   	push   ebx
c001ded8:	83 ec 04             	sub    esp,0x4
c001dedb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dee6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001deea:	89 04 24             	mov    DWORD PTR [esp],eax
c001deed:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001def0:	74 5a                	je     c001df4c <SoundPort::buffer32(int*, int)+0x78>
c001def2:	85 c0                	test   eax,eax
c001def4:	7e 56                	jle    c001df4c <SoundPort::buffer32(int*, int)+0x78>
c001def6:	8d 71 01             	lea    esi,[ecx+0x1]
c001def9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001defc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001deff:	8b 37                	mov    esi,DWORD PTR [edi]
c001df01:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001df04:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001df07:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001df0a:	74 4c                	je     c001df58 <SoundPort::buffer32(int*, int)+0x84>
c001df0c:	31 f6                	xor    esi,esi
c001df0e:	eb 1c                	jmp    c001df2c <SoundPort::buffer32(int*, int)+0x58>
c001df10:	8d 69 01             	lea    ebp,[ecx+0x1]
c001df13:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001df16:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001df19:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001df1c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001df20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001df23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001df26:	74 18                	je     c001df40 <SoundPort::buffer32(int*, int)+0x6c>
c001df28:	89 de                	mov    esi,ebx
c001df2a:	66 90                	xchg   ax,ax
c001df2c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001df2f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001df32:	75 dc                	jne    c001df10 <SoundPort::buffer32(int*, int)+0x3c>
c001df34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001df37:	90                   	nop
c001df38:	83 c4 04             	add    esp,0x4
c001df3b:	5b                   	pop    ebx
c001df3c:	5e                   	pop    esi
c001df3d:	5f                   	pop    edi
c001df3e:	5d                   	pop    ebp
c001df3f:	c3                   	ret    
c001df40:	83 c4 04             	add    esp,0x4
c001df43:	8d 46 02             	lea    eax,[esi+0x2]
c001df46:	5b                   	pop    ebx
c001df47:	5e                   	pop    esi
c001df48:	5f                   	pop    edi
c001df49:	5d                   	pop    ebp
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop
c001df4c:	83 c4 04             	add    esp,0x4
c001df4f:	31 c0                	xor    eax,eax
c001df51:	5b                   	pop    ebx
c001df52:	5e                   	pop    esi
c001df53:	5f                   	pop    edi
c001df54:	5d                   	pop    ebp
c001df55:	c3                   	ret    
c001df56:	66 90                	xchg   ax,ax
c001df58:	b8 01 00 00 00       	mov    eax,0x1
c001df5d:	eb d9                	jmp    c001df38 <SoundPort::buffer32(int*, int)+0x64>
c001df5f:	90                   	nop

c001df60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001df60:	57                   	push   edi
c001df61:	56                   	push   esi
c001df62:	53                   	push   ebx
c001df63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df67:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001df6b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001df71:	39 03                	cmp    DWORD PTR [ebx],eax
c001df73:	74 13                	je     c001df88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001df75:	83 ec 0c             	sub    esp,0xc
c001df78:	68 a4 60 02 c0       	push   0xc00260a4
c001df7d:	e8 1e 1d ff ff       	call   c000fca0 <KePanic(char const*)>
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	8d 76 00             	lea    esi,[esi+0x0]
c001df88:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001df8e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001df91:	74 11                	je     c001dfa4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001df93:	83 ec 0c             	sub    esp,0xc
c001df96:	68 e3 60 02 c0       	push   0xc00260e3
c001df9b:	e8 00 1d ff ff       	call   c000fca0 <KePanic(char const*)>
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	90                   	nop
c001dfa4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001dfaa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dfad:	74 11                	je     c001dfc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001dfaf:	83 ec 0c             	sub    esp,0xc
c001dfb2:	68 e3 60 02 c0       	push   0xc00260e3
c001dfb7:	e8 e4 1c ff ff       	call   c000fca0 <KePanic(char const*)>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	90                   	nop
c001dfc0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001dfc3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001dfc7:	7e 07                	jle    c001dfd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dfc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001dfd0:	85 f6                	test   esi,esi
c001dfd2:	7e 2c                	jle    c001e000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001dfd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dfd8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001dfdb:	31 c9                	xor    ecx,ecx
c001dfdd:	01 d7                	add    edi,edx
c001dfdf:	90                   	nop
c001dfe0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dfe3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001dfe6:	85 c0                	test   eax,eax
c001dfe8:	79 06                	jns    c001dff0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001dfea:	05 ff 7f 00 00       	add    eax,0x7fff
c001dfef:	90                   	nop
c001dff0:	c1 f8 0f             	sar    eax,0xf
c001dff3:	83 c1 04             	add    ecx,0x4
c001dff6:	66 01 02             	add    WORD PTR [edx],ax
c001dff9:	83 c2 02             	add    edx,0x2
c001dffc:	39 d7                	cmp    edi,edx
c001dffe:	75 e0                	jne    c001dfe0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001e000:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e003:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e006:	83 ec 04             	sub    esp,0x4
c001e009:	29 f0                	sub    eax,esi
c001e00b:	c1 e0 02             	shl    eax,0x2
c001e00e:	50                   	push   eax
c001e00f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001e012:	50                   	push   eax
c001e013:	52                   	push   edx
c001e014:	e8 b7 23 fe ff       	call   c00003d0 <memmove>
c001e019:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001e01c:	83 c4 10             	add    esp,0x10
c001e01f:	29 f0                	sub    eax,esi
c001e021:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001e024:	89 f0                	mov    eax,esi
c001e026:	5b                   	pop    ebx
c001e027:	5e                   	pop    esi
c001e028:	5f                   	pop    edi
c001e029:	c3                   	ret    
c001e02a:	66 90                	xchg   ax,ax

c001e02c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001e02c:	57                   	push   edi
c001e02d:	56                   	push   esi
c001e02e:	53                   	push   ebx
c001e02f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e033:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e037:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e03b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001e041:	39 06                	cmp    DWORD PTR [esi],eax
c001e043:	74 13                	je     c001e058 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001e045:	83 ec 0c             	sub    esp,0xc
c001e048:	68 c4 60 02 c0       	push   0xc00260c4
c001e04d:	e8 4e 1c ff ff       	call   c000fca0 <KePanic(char const*)>
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	8d 76 00             	lea    esi,[esi+0x0]
c001e058:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001e05e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001e061:	74 11                	je     c001e074 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	68 ff 60 02 c0       	push   0xc00260ff
c001e06b:	e8 30 1c ff ff       	call   c000fca0 <KePanic(char const*)>
c001e070:	83 c4 10             	add    esp,0x10
c001e073:	90                   	nop
c001e074:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001e07a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001e07d:	74 11                	je     c001e090 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001e07f:	83 ec 0c             	sub    esp,0xc
c001e082:	68 ff 60 02 c0       	push   0xc00260ff
c001e087:	e8 14 1c ff ff       	call   c000fca0 <KePanic(char const*)>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	90                   	nop
c001e090:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001e093:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001e097:	7e 07                	jle    c001e0a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001e099:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e09d:	8d 76 00             	lea    esi,[esi+0x0]
c001e0a0:	85 ff                	test   edi,edi
c001e0a2:	7e 1c                	jle    c001e0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001e0a4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001e0ab:	31 c0                	xor    eax,eax
c001e0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e0b0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e0b3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001e0b6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001e0b9:	83 c0 04             	add    eax,0x4
c001e0bc:	39 c1                	cmp    ecx,eax
c001e0be:	75 f0                	jne    c001e0b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001e0c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e0c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e0c6:	83 ec 04             	sub    esp,0x4
c001e0c9:	29 f8                	sub    eax,edi
c001e0cb:	c1 e0 02             	shl    eax,0x2
c001e0ce:	50                   	push   eax
c001e0cf:	8d 04 ba             	lea    eax,[edx+edi*4]
c001e0d2:	50                   	push   eax
c001e0d3:	52                   	push   edx
c001e0d4:	e8 f7 22 fe ff       	call   c00003d0 <memmove>
c001e0d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001e0dc:	83 c4 10             	add    esp,0x10
c001e0df:	29 f8                	sub    eax,edi
c001e0e1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001e0e4:	89 f8                	mov    eax,edi
c001e0e6:	5b                   	pop    ebx
c001e0e7:	5e                   	pop    esi
c001e0e8:	5f                   	pop    edi
c001e0e9:	c3                   	ret    

c001e0ea <PCI::open(int, int, void*)>:
c001e0ea:	83 ec 18             	sub    esp,0x18
c001e0ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001e0fd:	50                   	push   eax
c001e0fe:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001e101:	31 c0                	xor    eax,eax
c001e103:	83 c4 1c             	add    esp,0x1c
c001e106:	c3                   	ret    
c001e107:	90                   	nop

c001e108 <PCI::close(int, int, void*)>:
c001e108:	31 c0                	xor    eax,eax
c001e10a:	c3                   	ret    
c001e10b:	90                   	nop

c001e10c <PCI::PCI()>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e113:	83 ec 08             	sub    esp,0x8
c001e116:	68 1b 61 02 c0       	push   0xc002611b
c001e11b:	50                   	push   eax
c001e11c:	e8 43 a8 fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001e121:	83 c4 10             	add    esp,0x10
c001e124:	ba 28 62 02 c0       	mov    edx,0xc0026228
c001e129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12d:	89 10                	mov    DWORD PTR [eax],edx
c001e12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e133:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e141:	a3 a0 fd 02 c0       	mov    ds:0xc002fda0,eax
c001e146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e150:	0f b6 d0             	movzx  edx,al
c001e153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e157:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001e15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e162:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e168:	0f b6 d0             	movzx  edx,al
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001e174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e178:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e17e:	8d 50 01             	lea    edx,[eax+0x1]
c001e181:	88 d1                	mov    cl,dl
c001e183:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e187:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e18d:	0f b6 d0             	movzx  edx,al
c001e190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e194:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e198:	83 c9 c0             	or     ecx,0xffffffc0
c001e19b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e19f:	90                   	nop
c001e1a0:	83 c4 0c             	add    esp,0xc
c001e1a3:	c3                   	ret    

c001e1a4 <PCI::readBAR8(unsigned int, int)>:
c001e1a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1ac:	f6 c2 01             	test   dl,0x1
c001e1af:	74 07                	je     c001e1b8 <PCI::readBAR8(unsigned int, int)+0x14>
c001e1b1:	83 e2 fc             	and    edx,0xfffffffc
c001e1b4:	01 c2                	add    edx,eax
c001e1b6:	ec                   	in     al,dx
c001e1b7:	c3                   	ret    
c001e1b8:	83 e2 f0             	and    edx,0xfffffff0
c001e1bb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001e1be:	c3                   	ret    
c001e1bf:	90                   	nop

c001e1c0 <PCI::readBAR16(unsigned int, int)>:
c001e1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1c8:	f6 c2 01             	test   dl,0x1
c001e1cb:	74 08                	je     c001e1d5 <PCI::readBAR16(unsigned int, int)+0x15>
c001e1cd:	83 e2 fc             	and    edx,0xfffffffc
c001e1d0:	01 c2                	add    edx,eax
c001e1d2:	66 ed                	in     ax,dx
c001e1d4:	c3                   	ret    
c001e1d5:	83 e2 f0             	and    edx,0xfffffff0
c001e1d8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e1dc:	c3                   	ret    
c001e1dd:	90                   	nop

c001e1de <PCI::readBAR32(unsigned int, int)>:
c001e1de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1e6:	f6 c2 01             	test   dl,0x1
c001e1e9:	74 07                	je     c001e1f2 <PCI::readBAR32(unsigned int, int)+0x14>
c001e1eb:	83 e2 fc             	and    edx,0xfffffffc
c001e1ee:	01 c2                	add    edx,eax
c001e1f0:	ed                   	in     eax,dx
c001e1f1:	c3                   	ret    
c001e1f2:	83 e2 f0             	and    edx,0xfffffff0
c001e1f5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e1f8:	c3                   	ret    
c001e1f9:	90                   	nop

c001e1fa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e1fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e202:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e206:	f6 c2 01             	test   dl,0x1
c001e209:	74 07                	je     c001e212 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e20b:	83 e2 fc             	and    edx,0xfffffffc
c001e20e:	01 ca                	add    edx,ecx
c001e210:	ee                   	out    dx,al
c001e211:	c3                   	ret    
c001e212:	83 e2 f0             	and    edx,0xfffffff0
c001e215:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e218:	c3                   	ret    
c001e219:	90                   	nop

c001e21a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e21a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e226:	f6 c2 01             	test   dl,0x1
c001e229:	74 08                	je     c001e233 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e22b:	83 e2 fc             	and    edx,0xfffffffc
c001e22e:	01 ca                	add    edx,ecx
c001e230:	66 ef                	out    dx,ax
c001e232:	c3                   	ret    
c001e233:	83 e2 f0             	and    edx,0xfffffff0
c001e236:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e23a:	c3                   	ret    
c001e23b:	90                   	nop

c001e23c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e23c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e244:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e248:	f6 c2 01             	test   dl,0x1
c001e24b:	74 07                	je     c001e254 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e24d:	83 e2 fc             	and    edx,0xfffffffc
c001e250:	01 ca                	add    edx,ecx
c001e252:	ef                   	out    dx,eax
c001e253:	c3                   	ret    
c001e254:	83 e2 f0             	and    edx,0xfffffff0
c001e257:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e25a:	c3                   	ret    
c001e25b:	90                   	nop

c001e25c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e25c:	55                   	push   ebp
c001e25d:	57                   	push   edi
c001e25e:	56                   	push   esi
c001e25f:	53                   	push   ebx
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e268:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e26c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e270:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e274:	83 fe 07             	cmp    esi,0x7
c001e277:	76 10                	jbe    c001e289 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e279:	83 ec 0c             	sub    esp,0xc
c001e27c:	68 23 61 02 c0       	push   0xc0026123
c001e281:	e8 1a 1a ff ff       	call   c000fca0 <KePanic(char const*)>
c001e286:	83 c4 10             	add    esp,0x10
c001e289:	0f b6 db             	movzx  ebx,bl
c001e28c:	83 fb 0f             	cmp    ebx,0xf
c001e28f:	76 10                	jbe    c001e2a1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e291:	83 ec 0c             	sub    esp,0xc
c001e294:	68 53 61 02 c0       	push   0xc0026153
c001e299:	e8 02 1a ff ff       	call   c000fca0 <KePanic(char const*)>
c001e29e:	83 c4 10             	add    esp,0x10
c001e2a1:	8d 04 36             	lea    eax,[esi+esi*1]
c001e2a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e2a9:	83 c8 f0             	or     eax,0xfffffff0
c001e2ac:	ee                   	out    dx,al
c001e2ad:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e2b2:	89 e8                	mov    eax,ebp
c001e2b4:	ee                   	out    dx,al
c001e2b5:	83 c4 0c             	add    esp,0xc
c001e2b8:	89 d8                	mov    eax,ebx
c001e2ba:	89 f9                	mov    ecx,edi
c001e2bc:	c1 e0 08             	shl    eax,0x8
c001e2bf:	0f b6 d9             	movzx  ebx,cl
c001e2c2:	83 e3 fc             	and    ebx,0xfffffffc
c001e2c5:	09 d8                	or     eax,ebx
c001e2c7:	5b                   	pop    ebx
c001e2c8:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e2cd:	5e                   	pop    esi
c001e2ce:	5f                   	pop    edi
c001e2cf:	5d                   	pop    ebp
c001e2d0:	c3                   	ret    
c001e2d1:	90                   	nop

c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e2d2:	57                   	push   edi
c001e2d3:	56                   	push   esi
c001e2d4:	53                   	push   ebx
c001e2d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2dd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e2e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e2e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e2eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e2ef:	83 ff 01             	cmp    edi,0x1
c001e2f2:	75 3f                	jne    c001e333 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e2f4:	89 de                	mov    esi,ebx
c001e2f6:	0f b6 c0             	movzx  eax,al
c001e2f9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e2ff:	c1 e0 10             	shl    eax,0x10
c001e302:	0f b6 c9             	movzx  ecx,cl
c001e305:	09 f0                	or     eax,esi
c001e307:	c1 e1 08             	shl    ecx,0x8
c001e30a:	0f b6 d2             	movzx  edx,dl
c001e30d:	09 c8                	or     eax,ecx
c001e30f:	c1 e2 0b             	shl    edx,0xb
c001e312:	09 d0                	or     eax,edx
c001e314:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e319:	0d 00 00 00 80       	or     eax,0x80000000
c001e31e:	ef                   	out    dx,eax
c001e31f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e324:	ed                   	in     eax,dx
c001e325:	83 e3 02             	and    ebx,0x2
c001e328:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e32f:	d3 e8                	shr    eax,cl
c001e331:	eb 44                	jmp    c001e377 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e333:	83 ff 02             	cmp    edi,0x2
c001e336:	75 2d                	jne    c001e365 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e338:	83 ec 0c             	sub    esp,0xc
c001e33b:	0f b6 c9             	movzx  ecx,cl
c001e33e:	0f b6 d2             	movzx  edx,dl
c001e341:	0f b6 fb             	movzx  edi,bl
c001e344:	0f b6 c0             	movzx  eax,al
c001e347:	57                   	push   edi
c001e348:	51                   	push   ecx
c001e349:	52                   	push   edx
c001e34a:	50                   	push   eax
c001e34b:	56                   	push   esi
c001e34c:	e8 0b ff ff ff       	call   c001e25c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e351:	89 c2                	mov    edx,eax
c001e353:	ed                   	in     eax,dx
c001e354:	83 e3 02             	and    ebx,0x2
c001e357:	83 c4 20             	add    esp,0x20
c001e35a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e361:	d3 e8                	shr    eax,cl
c001e363:	eb 12                	jmp    c001e377 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	68 83 61 02 c0       	push   0xc0026183
c001e36d:	e8 2e 19 ff ff       	call   c000fca0 <KePanic(char const*)>
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	31 c0                	xor    eax,eax
c001e377:	5b                   	pop    ebx
c001e378:	5e                   	pop    esi
c001e379:	5f                   	pop    edi
c001e37a:	c3                   	ret    
c001e37b:	90                   	nop

c001e37c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e37c:	83 ec 18             	sub    esp,0x18
c001e37f:	6a 00                	push   0x0
c001e381:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e386:	50                   	push   eax
c001e387:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e38c:	50                   	push   eax
c001e38d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e392:	50                   	push   eax
c001e393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e397:	e8 36 ff ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e39c:	83 c4 2c             	add    esp,0x2c
c001e39f:	c3                   	ret    

c001e3a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e3a0:	83 ec 18             	sub    esp,0x18
c001e3a3:	6a 0e                	push   0xe
c001e3a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e3aa:	50                   	push   eax
c001e3ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e3b0:	50                   	push   eax
c001e3b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e3b6:	50                   	push   eax
c001e3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e3bb:	e8 12 ff ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3c0:	83 c4 2c             	add    esp,0x2c
c001e3c3:	0f b6 c0             	movzx  eax,al
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop

c001e3c8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e3c8:	55                   	push   ebp
c001e3c9:	57                   	push   edi
c001e3ca:	56                   	push   esi
c001e3cb:	53                   	push   ebx
c001e3cc:	83 ec 18             	sub    esp,0x18
c001e3cf:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e3d4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e3d9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e3de:	6a 0a                	push   0xa
c001e3e0:	56                   	push   esi
c001e3e1:	55                   	push   ebp
c001e3e2:	57                   	push   edi
c001e3e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3e7:	e8 e6 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3ec:	83 c4 14             	add    esp,0x14
c001e3ef:	89 c3                	mov    ebx,eax
c001e3f1:	6a 0a                	push   0xa
c001e3f3:	0f b6 db             	movzx  ebx,bl
c001e3f6:	56                   	push   esi
c001e3f7:	55                   	push   ebp
c001e3f8:	57                   	push   edi
c001e3f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3fd:	e8 d0 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e402:	83 c4 2c             	add    esp,0x2c
c001e405:	25 00 ff 00 00       	and    eax,0xff00
c001e40a:	09 d8                	or     eax,ebx
c001e40c:	5b                   	pop    ebx
c001e40d:	5e                   	pop    esi
c001e40e:	5f                   	pop    edi
c001e40f:	5d                   	pop    ebp
c001e410:	c3                   	ret    
c001e411:	90                   	nop

c001e412 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e412:	83 ec 18             	sub    esp,0x18
c001e415:	6a 08                	push   0x8
c001e417:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e41c:	50                   	push   eax
c001e41d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e422:	50                   	push   eax
c001e423:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e428:	50                   	push   eax
c001e429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e42d:	e8 a0 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e432:	83 c4 2c             	add    esp,0x2c
c001e435:	0f b6 c4             	movzx  eax,ah
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e43a:	83 ec 18             	sub    esp,0x18
c001e43d:	6a 08                	push   0x8
c001e43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e444:	50                   	push   eax
c001e445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e44a:	50                   	push   eax
c001e44b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e450:	50                   	push   eax
c001e451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e455:	e8 78 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e45a:	83 c4 2c             	add    esp,0x2c
c001e45d:	c3                   	ret    

c001e45e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e45e:	83 ec 18             	sub    esp,0x18
c001e461:	6a 3c                	push   0x3c
c001e463:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e468:	50                   	push   eax
c001e469:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e46e:	50                   	push   eax
c001e46f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e474:	50                   	push   eax
c001e475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e479:	e8 54 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e47e:	83 c4 2c             	add    esp,0x2c
c001e481:	c3                   	ret    

c001e482 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e482:	83 ec 18             	sub    esp,0x18
c001e485:	6a 18                	push   0x18
c001e487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e48c:	50                   	push   eax
c001e48d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e492:	50                   	push   eax
c001e493:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e498:	50                   	push   eax
c001e499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e49d:	e8 30 fe ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4a2:	83 c4 2c             	add    esp,0x2c
c001e4a5:	0f b6 c4             	movzx  eax,ah
c001e4a8:	c3                   	ret    
c001e4a9:	90                   	nop

c001e4aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e4aa:	55                   	push   ebp
c001e4ab:	57                   	push   edi
c001e4ac:	56                   	push   esi
c001e4ad:	53                   	push   ebx
c001e4ae:	83 ec 28             	sub    esp,0x28
c001e4b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e4b5:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e4ba:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e4bf:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e4c4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e4cb:	8d 43 12             	lea    eax,[ebx+0x12]
c001e4ce:	83 c3 10             	add    ebx,0x10
c001e4d1:	0f b6 c0             	movzx  eax,al
c001e4d4:	0f b6 db             	movzx  ebx,bl
c001e4d7:	50                   	push   eax
c001e4d8:	51                   	push   ecx
c001e4d9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e4dd:	57                   	push   edi
c001e4de:	55                   	push   ebp
c001e4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e4e3:	e8 ea fd ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4e8:	83 c4 14             	add    esp,0x14
c001e4eb:	89 c6                	mov    esi,eax
c001e4ed:	53                   	push   ebx
c001e4ee:	c1 e6 10             	shl    esi,0x10
c001e4f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e4f5:	51                   	push   ecx
c001e4f6:	57                   	push   edi
c001e4f7:	55                   	push   ebp
c001e4f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e4fc:	e8 d1 fd ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e501:	83 c4 3c             	add    esp,0x3c
c001e504:	0f b7 c0             	movzx  eax,ax
c001e507:	5b                   	pop    ebx
c001e508:	09 f0                	or     eax,esi
c001e50a:	5e                   	pop    esi
c001e50b:	5f                   	pop    edi
c001e50c:	5d                   	pop    ebp
c001e50d:	c3                   	ret    

c001e50e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e50e:	55                   	push   ebp
c001e50f:	57                   	push   edi
c001e510:	56                   	push   esi
c001e511:	53                   	push   ebx
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e519:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e51d:	89 f5                	mov    ebp,esi
c001e51f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e525:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e529:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e52d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e531:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e535:	83 f9 01             	cmp    ecx,0x1
c001e538:	75 5d                	jne    c001e597 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e53a:	0f b6 c8             	movzx  ecx,al
c001e53d:	0f b6 d2             	movzx  edx,dl
c001e540:	c1 e1 10             	shl    ecx,0x10
c001e543:	c1 e2 0b             	shl    edx,0xb
c001e546:	89 f0                	mov    eax,esi
c001e548:	25 fc 00 00 00       	and    eax,0xfc
c001e54d:	09 c1                	or     ecx,eax
c001e54f:	89 e8                	mov    eax,ebp
c001e551:	0f b6 c0             	movzx  eax,al
c001e554:	c1 e0 08             	shl    eax,0x8
c001e557:	09 c1                	or     ecx,eax
c001e559:	09 d1                	or     ecx,edx
c001e55b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e560:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e566:	89 c8                	mov    eax,ecx
c001e568:	ef                   	out    dx,eax
c001e569:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e56e:	ed                   	in     eax,dx
c001e56f:	0f b7 db             	movzx  ebx,bx
c001e572:	83 e6 02             	and    esi,0x2
c001e575:	74 0a                	je     c001e581 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e577:	0f b7 d0             	movzx  edx,ax
c001e57a:	c1 e3 10             	shl    ebx,0x10
c001e57d:	09 d3                	or     ebx,edx
c001e57f:	eb 05                	jmp    c001e586 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e581:	66 31 c0             	xor    ax,ax
c001e584:	09 c3                	or     ebx,eax
c001e586:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e58b:	89 c8                	mov    eax,ecx
c001e58d:	ef                   	out    dx,eax
c001e58e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e593:	89 d8                	mov    eax,ebx
c001e595:	eb 41                	jmp    c001e5d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e597:	83 f9 02             	cmp    ecx,0x2
c001e59a:	75 45                	jne    c001e5e1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	0f b6 d2             	movzx  edx,dl
c001e5a2:	89 f1                	mov    ecx,esi
c001e5a4:	0f b6 c0             	movzx  eax,al
c001e5a7:	0f b6 f1             	movzx  esi,cl
c001e5aa:	89 e9                	mov    ecx,ebp
c001e5ac:	56                   	push   esi
c001e5ad:	0f b6 c9             	movzx  ecx,cl
c001e5b0:	51                   	push   ecx
c001e5b1:	52                   	push   edx
c001e5b2:	50                   	push   eax
c001e5b3:	57                   	push   edi
c001e5b4:	e8 a3 fc ff ff       	call   c001e25c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5b9:	89 c2                	mov    edx,eax
c001e5bb:	ed                   	in     eax,dx
c001e5bc:	83 c4 20             	add    esp,0x20
c001e5bf:	0f b7 db             	movzx  ebx,bx
c001e5c2:	f6 c2 02             	test   dl,0x2
c001e5c5:	74 0c                	je     c001e5d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e5c7:	0f b7 c8             	movzx  ecx,ax
c001e5ca:	89 d8                	mov    eax,ebx
c001e5cc:	c1 e0 10             	shl    eax,0x10
c001e5cf:	09 c8                	or     eax,ecx
c001e5d1:	eb 05                	jmp    c001e5d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e5d3:	66 31 c0             	xor    ax,ax
c001e5d6:	09 d8                	or     eax,ebx
c001e5d8:	ef                   	out    dx,eax
c001e5d9:	83 c4 0c             	add    esp,0xc
c001e5dc:	5b                   	pop    ebx
c001e5dd:	5e                   	pop    esi
c001e5de:	5f                   	pop    edi
c001e5df:	5d                   	pop    ebp
c001e5e0:	c3                   	ret    
c001e5e1:	c7 44 24 20 83 61 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026183
c001e5e9:	83 c4 0c             	add    esp,0xc
c001e5ec:	5b                   	pop    ebx
c001e5ed:	5e                   	pop    esi
c001e5ee:	5f                   	pop    edi
c001e5ef:	5d                   	pop    ebp
c001e5f0:	e9 ab 16 ff ff       	jmp    c000fca0 <KePanic(char const*)>
c001e5f5:	90                   	nop

c001e5f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e5f6:	55                   	push   ebp
c001e5f7:	57                   	push   edi
c001e5f8:	56                   	push   esi
c001e5f9:	53                   	push   ebx
c001e5fa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e600:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e607:	80 3d ac fd 02 c0 00 	cmp    BYTE PTR ds:0xc002fdac,0x0
c001e60e:	0f 85 bd 00 00 00    	jne    c001e6d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	68 14 01 00 00       	push   0x114
c001e61c:	e8 2a 12 ff ff       	call   c000f84b <malloc>
c001e621:	83 c4 0c             	add    esp,0xc
c001e624:	89 c3                	mov    ebx,eax
c001e626:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c001e62c:	68 89 61 02 c0       	push   0xc0026189
c001e631:	50                   	push   eax
c001e632:	e8 53 9b fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e637:	83 c4 10             	add    esp,0x10
c001e63a:	85 db                	test   ebx,ebx
c001e63c:	0f 84 67 02 00 00    	je     c001e8a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e642:	56                   	push   esi
c001e643:	56                   	push   esi
c001e644:	6a 01                	push   0x1
c001e646:	53                   	push   ebx
c001e647:	e8 5c 9b fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	85 c0                	test   eax,eax
c001e651:	0f 85 52 02 00 00    	jne    c001e8a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e657:	52                   	push   edx
c001e658:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e65c:	50                   	push   eax
c001e65d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e661:	50                   	push   eax
c001e662:	53                   	push   ebx
c001e663:	e8 42 9e fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e668:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e66c:	40                   	inc    eax
c001e66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e670:	e8 d6 11 ff ff       	call   c000f84b <malloc>
c001e675:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e679:	a3 a8 fd 02 c0       	mov    ds:0xc002fda8,eax
c001e67e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e682:	59                   	pop    ecx
c001e683:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e685:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e689:	51                   	push   ecx
c001e68a:	50                   	push   eax
c001e68b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e68f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e693:	53                   	push   ebx
c001e694:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e697:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e69b:	83 c4 20             	add    esp,0x20
c001e69e:	89 c8                	mov    eax,ecx
c001e6a0:	99                   	cdq    
c001e6a1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e6a5:	0f 85 fe 01 00 00    	jne    c001e8a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e6ab:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e6af:	0f 85 f4 01 00 00    	jne    c001e8a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e6b5:	83 ec 0c             	sub    esp,0xc
c001e6b8:	53                   	push   ebx
c001e6b9:	e8 48 9b fe ff       	call   c0008206 <File::close()>
c001e6be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e6c2:	c6 05 ac fd 02 c0 01 	mov    BYTE PTR ds:0xc002fdac,0x1
c001e6c9:	a3 a4 fd 02 c0       	mov    ds:0xc002fda4,eax
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	a1 a4 fd 02 c0       	mov    eax,ds:0xc002fda4
c001e6d6:	8b 1d a8 fd 02 c0    	mov    ebx,DWORD PTR ds:0xc002fda8
c001e6dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6e0:	31 f6                	xor    esi,esi
c001e6e2:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e6ea:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e6f1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e6f6:	31 c9                	xor    ecx,ecx
c001e6f8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e700:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e705:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e70d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e711:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e719:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e71d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e721:	0f 8e 82 01 00 00    	jle    c001e8a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e727:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e72a:	d4 40                	aam    0x40
c001e72c:	d5 39                	aad    0x39
c001e72e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e732:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e736:	d4 40                	aam    0x40
c001e738:	d5 39                	aad    0x39
c001e73a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e73e:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e742:	d4 40                	aam    0x40
c001e744:	d5 39                	aad    0x39
c001e746:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e74a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e74e:	d4 40                	aam    0x40
c001e750:	d5 39                	aad    0x39
c001e752:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e756:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e75a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e75e:	3c 56                	cmp    al,0x56
c001e760:	74 43                	je     c001e7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e762:	d4 40                	aam    0x40
c001e764:	d5 39                	aad    0x39
c001e766:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e769:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e76d:	0f b6 c9             	movzx  ecx,cl
c001e770:	c1 e1 04             	shl    ecx,0x4
c001e773:	d4 40                	aam    0x40
c001e775:	d5 39                	aad    0x39
c001e777:	83 e8 30             	sub    eax,0x30
c001e77a:	0f b6 c0             	movzx  eax,al
c001e77d:	09 c1                	or     ecx,eax
c001e77f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e783:	c1 e1 04             	shl    ecx,0x4
c001e786:	d4 40                	aam    0x40
c001e788:	d5 39                	aad    0x39
c001e78a:	83 e8 30             	sub    eax,0x30
c001e78d:	0f b6 c0             	movzx  eax,al
c001e790:	09 c1                	or     ecx,eax
c001e792:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e796:	c1 e1 04             	shl    ecx,0x4
c001e799:	d4 40                	aam    0x40
c001e79b:	d5 39                	aad    0x39
c001e79d:	83 e8 30             	sub    eax,0x30
c001e7a0:	0f b6 c0             	movzx  eax,al
c001e7a3:	09 c1                	or     ecx,eax
c001e7a5:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e7a9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e7ad:	3c 58                	cmp    al,0x58
c001e7af:	74 47                	je     c001e7f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e7b1:	d4 40                	aam    0x40
c001e7b3:	d5 39                	aad    0x39
c001e7b5:	8d 50 d0             	lea    edx,[eax-0x30]
c001e7b8:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e7bc:	0f b6 d2             	movzx  edx,dl
c001e7bf:	c1 e2 04             	shl    edx,0x4
c001e7c2:	d4 40                	aam    0x40
c001e7c4:	d5 39                	aad    0x39
c001e7c6:	83 e8 30             	sub    eax,0x30
c001e7c9:	0f b6 c0             	movzx  eax,al
c001e7cc:	09 c2                	or     edx,eax
c001e7ce:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e7d2:	c1 e2 04             	shl    edx,0x4
c001e7d5:	d4 40                	aam    0x40
c001e7d7:	d5 39                	aad    0x39
c001e7d9:	83 e8 30             	sub    eax,0x30
c001e7dc:	0f b6 c0             	movzx  eax,al
c001e7df:	09 c2                	or     edx,eax
c001e7e1:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e7e5:	c1 e2 04             	shl    edx,0x4
c001e7e8:	d4 40                	aam    0x40
c001e7ea:	d5 39                	aad    0x39
c001e7ec:	83 e8 30             	sub    eax,0x30
c001e7ef:	0f b6 c0             	movzx  eax,al
c001e7f2:	09 c2                	or     edx,eax
c001e7f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7f8:	83 c6 10             	add    esi,0x10
c001e7fb:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e7ff:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e803:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e807:	83 fa 0a             	cmp    edx,0xa
c001e80a:	74 0b                	je     c001e817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e80c:	47                   	inc    edi
c001e80d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e811:	75 19                	jne    c001e82c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e813:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e817:	31 c0                	xor    eax,eax
c001e819:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e81e:	0f 94 c0             	sete   al
c001e821:	01 c6                	add    esi,eax
c001e823:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e828:	75 0b                	jne    c001e835 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e82a:	eb 14                	jmp    c001e840 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e82c:	46                   	inc    esi
c001e82d:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e830:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e833:	eb ca                	jmp    c001e7ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e835:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e83a:	0f 85 dd fe ff ff    	jne    c001e71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e840:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e845:	74 10                	je     c001e857 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e847:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e84c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e851:	0f 85 c6 fe ff ff    	jne    c001e71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e85b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e85f:	83 e8 30             	sub    eax,0x30
c001e862:	83 ef 30             	sub    edi,0x30
c001e865:	c1 e0 04             	shl    eax,0x4
c001e868:	09 f8                	or     eax,edi
c001e86a:	0f b6 c0             	movzx  eax,al
c001e86d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e871:	0f 85 a6 fe ff ff    	jne    c001e71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e87b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e87f:	83 e8 30             	sub    eax,0x30
c001e882:	83 ef 30             	sub    edi,0x30
c001e885:	c1 e0 04             	shl    eax,0x4
c001e888:	09 f8                	or     eax,edi
c001e88a:	0f b6 c0             	movzx  eax,al
c001e88d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e891:	0f 85 86 fe ff ff    	jne    c001e71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e897:	50                   	push   eax
c001e898:	50                   	push   eax
c001e899:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e89d:	50                   	push   eax
c001e89e:	55                   	push   ebp
c001e89f:	e8 9c 1d fe ff       	call   c0000640 <strcpy>
c001e8a4:	83 c4 10             	add    esp,0x10
c001e8a7:	eb 06                	jmp    c001e8af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e8a9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e8ad:	31 ed                	xor    ebp,ebp
c001e8af:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e8b5:	89 e8                	mov    eax,ebp
c001e8b7:	5b                   	pop    ebx
c001e8b8:	5e                   	pop    esi
c001e8b9:	5f                   	pop    edi
c001e8ba:	5d                   	pop    ebp
c001e8bb:	c3                   	ret    

c001e8bc <PCI::checkBus(unsigned char)>:
c001e8bc:	56                   	push   esi
c001e8bd:	53                   	push   ebx
c001e8be:	31 db                	xor    ebx,ebx
c001e8c0:	51                   	push   ecx
c001e8c1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e8c6:	52                   	push   edx
c001e8c7:	53                   	push   ebx
c001e8c8:	43                   	inc    ebx
c001e8c9:	56                   	push   esi
c001e8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ce:	e8 6f 03 00 00       	call   c001ec42 <PCI::checkDevice(unsigned char, unsigned char)>
c001e8d3:	83 c4 10             	add    esp,0x10
c001e8d6:	83 fb 20             	cmp    ebx,0x20
c001e8d9:	75 eb                	jne    c001e8c6 <PCI::checkBus(unsigned char)+0xa>
c001e8db:	58                   	pop    eax
c001e8dc:	5b                   	pop    ebx
c001e8dd:	5e                   	pop    esi
c001e8de:	c3                   	ret    
c001e8df:	90                   	nop

c001e8e0 <PCI::foundDevice(PCIDeviceInfo)>:
c001e8e0:	55                   	push   ebp
c001e8e1:	57                   	push   edi
c001e8e2:	56                   	push   esi
c001e8e3:	53                   	push   ebx
c001e8e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e8ea:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e8f2:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e8f9:	3d ff ff 00 00       	cmp    eax,0xffff
c001e8fe:	0f 84 b7 01 00 00    	je     c001eabb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e904:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e90c:	66 81 fb 06 04       	cmp    bx,0x406
c001e911:	75 32                	jne    c001e945 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e913:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e91b:	50                   	push   eax
c001e91c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e924:	50                   	push   eax
c001e925:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e92d:	50                   	push   eax
c001e92e:	55                   	push   ebp
c001e92f:	e8 4e fb ff ff       	call   c001e482 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e934:	59                   	pop    ecx
c001e935:	0f b6 c0             	movzx  eax,al
c001e938:	5b                   	pop    ebx
c001e939:	50                   	push   eax
c001e93a:	55                   	push   ebp
c001e93b:	e8 7c ff ff ff       	call   c001e8bc <PCI::checkBus(unsigned char)>
c001e940:	e9 16 01 00 00       	jmp    c001ea5b <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e945:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e94c:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e952:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e956:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e95d:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e965:	85 c0                	test   eax,eax
c001e967:	74 36                	je     c001e99f <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e969:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e96c:	85 d2                	test   edx,edx
c001e96e:	74 2b                	je     c001e99b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e970:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e976:	31 f9                	xor    ecx,edi
c001e978:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e97e:	75 1b                	jne    c001e99b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e980:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e984:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e98a:	75 0f                	jne    c001e99b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e98c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e993:	39 f2                	cmp    edx,esi
c001e995:	0f 84 20 01 00 00    	je     c001eabb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99d:	eb c6                	jmp    c001e965 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e99f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e9a3:	be bc 61 02 c0       	mov    esi,0xc00261bc
c001e9a8:	b9 07 00 00 00       	mov    ecx,0x7
c001e9ad:	fc                   	cld    
c001e9ae:	31 d2                	xor    edx,edx
c001e9b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e9b2:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e9b9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e9bd:	b9 12 00 00 00       	mov    ecx,0x12
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9c7:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e9cf:	b9 0a 00 00 00       	mov    ecx,0xa
c001e9d4:	f7 f1                	div    ecx
c001e9d6:	83 c0 30             	add    eax,0x30
c001e9d9:	83 c2 30             	add    edx,0x30
c001e9dc:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e9e0:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e9e4:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e9ec:	31 d2                	xor    edx,edx
c001e9ee:	f7 f1                	div    ecx
c001e9f0:	83 c0 30             	add    eax,0x30
c001e9f3:	83 c2 30             	add    edx,0x30
c001e9f6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e9fa:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e9fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ea02:	50                   	push   eax
c001ea03:	e8 b1 e8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001ea11:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001ea18:	75 46                	jne    c001ea60 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001ea1a:	83 ec 0c             	sub    esp,0xc
c001ea1d:	68 64 01 00 00       	push   0x164
c001ea22:	e8 24 0e ff ff       	call   c000f84b <malloc>
c001ea27:	89 c3                	mov    ebx,eax
c001ea29:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea2c:	e8 3b 11 00 00       	call   c001fb6c <SATABus::SATABus()>
c001ea31:	58                   	pop    eax
c001ea32:	5a                   	pop    edx
c001ea33:	53                   	push   ebx
c001ea34:	55                   	push   ebp
c001ea35:	e8 1a b0 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ea3a:	83 ec 1c             	sub    esp,0x1c
c001ea3d:	b9 09 00 00 00       	mov    ecx,0x9
c001ea42:	89 e7                	mov    edi,esp
c001ea44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea46:	53                   	push   ebx
c001ea47:	e8 4e af fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001ea4c:	83 c4 30             	add    esp,0x30
c001ea4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ea51:	6a 00                	push   0x0
c001ea53:	6a 00                	push   0x0
c001ea55:	6a 00                	push   0x0
c001ea57:	53                   	push   ebx
c001ea58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ea5b:	83 c4 10             	add    esp,0x10
c001ea5e:	eb 5b                	jmp    c001eabb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ea60:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ea66:	75 19                	jne    c001ea81 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	68 70 02 00 00       	push   0x270
c001ea70:	e8 d6 0d ff ff       	call   c000f84b <malloc>
c001ea75:	89 c3                	mov    ebx,eax
c001ea77:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea7a:	e8 93 02 00 00       	call   c001ed12 <IDE::IDE()>
c001ea7f:	eb b0                	jmp    c001ea31 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	68 58 01 00 00       	push   0x158
c001ea89:	e8 bd 0d ff ff       	call   c000f84b <malloc>
c001ea8e:	89 c3                	mov    ebx,eax
c001ea90:	58                   	pop    eax
c001ea91:	5a                   	pop    edx
c001ea92:	68 a2 61 02 c0       	push   0xc00261a2
c001ea97:	53                   	push   ebx
c001ea98:	e8 6b b2 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001ea9d:	59                   	pop    ecx
c001ea9e:	5f                   	pop    edi
c001ea9f:	53                   	push   ebx
c001eaa0:	55                   	push   ebp
c001eaa1:	e8 ae af fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001eaa6:	83 ec 1c             	sub    esp,0x1c
c001eaa9:	b9 09 00 00 00       	mov    ecx,0x9
c001eaae:	89 e7                	mov    edi,esp
c001eab0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eab2:	53                   	push   ebx
c001eab3:	e8 e2 ae fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001eab8:	83 c4 30             	add    esp,0x30
c001eabb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001eac1:	5b                   	pop    ebx
c001eac2:	5e                   	pop    esi
c001eac3:	5f                   	pop    edi
c001eac4:	5d                   	pop    ebp
c001eac5:	c3                   	ret    

c001eac6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001eac6:	55                   	push   ebp
c001eac7:	57                   	push   edi
c001eac8:	56                   	push   esi
c001eac9:	53                   	push   ebx
c001eaca:	83 ec 68             	sub    esp,0x68
c001eacd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ead1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ead8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001eadc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001eae3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001eae8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001eaec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001eaf3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001eaf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001eafc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001eb01:	6a 0c                	push   0xc
c001eb03:	57                   	push   edi
c001eb04:	53                   	push   ebx
c001eb05:	56                   	push   esi
c001eb06:	55                   	push   ebp
c001eb07:	e8 c6 f7 ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eb0c:	83 c4 20             	add    esp,0x20
c001eb0f:	57                   	push   edi
c001eb10:	53                   	push   ebx
c001eb11:	56                   	push   esi
c001eb12:	55                   	push   ebp
c001eb13:	e8 b0 f8 ff ff       	call   c001e3c8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001eb18:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001eb1d:	57                   	push   edi
c001eb1e:	53                   	push   ebx
c001eb1f:	56                   	push   esi
c001eb20:	55                   	push   ebp
c001eb21:	e8 38 f9 ff ff       	call   c001e45e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001eb26:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001eb2a:	83 c4 14             	add    esp,0x14
c001eb2d:	6a 3c                	push   0x3c
c001eb2f:	57                   	push   edi
c001eb30:	53                   	push   ebx
c001eb31:	56                   	push   esi
c001eb32:	55                   	push   ebp
c001eb33:	e8 9a f7 ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eb38:	0f b6 c4             	movzx  eax,ah
c001eb3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001eb3f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001eb43:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eb47:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001eb4c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001eb52:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001eb58:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001eb5c:	83 c4 20             	add    esp,0x20
c001eb5f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001eb64:	74 30                	je     c001eb96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001eb66:	31 c0                	xor    eax,eax
c001eb68:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001eb6c:	7e 28                	jle    c001eb96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001eb6e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001eb76:	39 cb                	cmp    ebx,ecx
c001eb78:	75 19                	jne    c001eb93 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001eb7a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001eb82:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001eb86:	75 0b                	jne    c001eb93 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001eb88:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001eb8f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001eb93:	40                   	inc    eax
c001eb94:	eb d2                	jmp    c001eb68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001eb96:	31 d2                	xor    edx,edx
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	57                   	push   edi
c001eb9c:	53                   	push   ebx
c001eb9d:	56                   	push   esi
c001eb9e:	52                   	push   edx
c001eb9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001eba3:	55                   	push   ebp
c001eba4:	e8 01 f9 ff ff       	call   c001e4aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eba9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ebad:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ebb1:	42                   	inc    edx
c001ebb2:	83 c4 20             	add    esp,0x20
c001ebb5:	83 fa 06             	cmp    edx,0x6
c001ebb8:	75 de                	jne    c001eb98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ebba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebc2:	c1 e2 08             	shl    edx,0x8
c001ebc5:	83 ec 0c             	sub    esp,0xc
c001ebc8:	0f b6 c4             	movzx  eax,ah
c001ebcb:	09 d0                	or     eax,edx
c001ebcd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ebd2:	6a 02                	push   0x2
c001ebd4:	57                   	push   edi
c001ebd5:	53                   	push   ebx
c001ebd6:	56                   	push   esi
c001ebd7:	55                   	push   ebp
c001ebd8:	e8 f5 f6 ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebdd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ebe2:	83 c4 20             	add    esp,0x20
c001ebe5:	57                   	push   edi
c001ebe6:	53                   	push   ebx
c001ebe7:	56                   	push   esi
c001ebe8:	55                   	push   ebp
c001ebe9:	e8 24 f8 ff ff       	call   c001e412 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ebee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ebf2:	57                   	push   edi
c001ebf3:	53                   	push   ebx
c001ebf4:	56                   	push   esi
c001ebf5:	55                   	push   ebp
c001ebf6:	e8 81 f7 ff ff       	call   c001e37c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ebfb:	b9 09 00 00 00       	mov    ecx,0x9
c001ec00:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ec05:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ec09:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ec0d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec11:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ec15:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec19:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ec1d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ec21:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ec25:	83 ec 0c             	sub    esp,0xc
c001ec28:	fc                   	cld    
c001ec29:	89 e7                	mov    edi,esp
c001ec2b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ec2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec31:	55                   	push   ebp
c001ec32:	e8 a9 fc ff ff       	call   c001e8e0 <PCI::foundDevice(PCIDeviceInfo)>
c001ec37:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ec3d:	5b                   	pop    ebx
c001ec3e:	5e                   	pop    esi
c001ec3f:	5f                   	pop    edi
c001ec40:	5d                   	pop    ebp
c001ec41:	c3                   	ret    

c001ec42 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ec42:	55                   	push   ebp
c001ec43:	57                   	push   edi
c001ec44:	56                   	push   esi
c001ec45:	53                   	push   ebx
c001ec46:	83 ec 0c             	sub    esp,0xc
c001ec49:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ec4d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ec52:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ec57:	6a 00                	push   0x0
c001ec59:	56                   	push   esi
c001ec5a:	57                   	push   edi
c001ec5b:	55                   	push   ebp
c001ec5c:	e8 1b f7 ff ff       	call   c001e37c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec61:	6a 00                	push   0x0
c001ec63:	56                   	push   esi
c001ec64:	57                   	push   edi
c001ec65:	55                   	push   ebp
c001ec66:	e8 5b fe ff ff       	call   c001eac6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ec6b:	83 c4 20             	add    esp,0x20
c001ec6e:	6a 00                	push   0x0
c001ec70:	56                   	push   esi
c001ec71:	57                   	push   edi
c001ec72:	55                   	push   ebp
c001ec73:	e8 28 f7 ff ff       	call   c001e3a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ec78:	83 c4 10             	add    esp,0x10
c001ec7b:	a8 80                	test   al,0x80
c001ec7d:	74 2d                	je     c001ecac <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ec7f:	bb 01 00 00 00       	mov    ebx,0x1
c001ec84:	53                   	push   ebx
c001ec85:	56                   	push   esi
c001ec86:	57                   	push   edi
c001ec87:	55                   	push   ebp
c001ec88:	e8 ef f6 ff ff       	call   c001e37c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec8d:	83 c4 10             	add    esp,0x10
c001ec90:	0f b7 c0             	movzx  eax,ax
c001ec93:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec98:	74 0c                	je     c001eca6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ec9a:	53                   	push   ebx
c001ec9b:	56                   	push   esi
c001ec9c:	57                   	push   edi
c001ec9d:	55                   	push   ebp
c001ec9e:	e8 23 fe ff ff       	call   c001eac6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eca3:	83 c4 10             	add    esp,0x10
c001eca6:	43                   	inc    ebx
c001eca7:	83 fb 08             	cmp    ebx,0x8
c001ecaa:	75 d8                	jne    c001ec84 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	5b                   	pop    ebx
c001ecb0:	5e                   	pop    esi
c001ecb1:	5f                   	pop    edi
c001ecb2:	5d                   	pop    ebp
c001ecb3:	c3                   	ret    

c001ecb4 <PCI::detect()>:
c001ecb4:	56                   	push   esi
c001ecb5:	53                   	push   ebx
c001ecb6:	53                   	push   ebx
c001ecb7:	31 db                	xor    ebx,ebx
c001ecb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecbd:	6a 00                	push   0x0
c001ecbf:	6a 00                	push   0x0
c001ecc1:	6a 00                	push   0x0
c001ecc3:	56                   	push   esi
c001ecc4:	e8 d7 f6 ff ff       	call   c001e3a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	a8 80                	test   al,0x80
c001ecce:	75 21                	jne    c001ecf1 <PCI::detect()+0x3d>
c001ecd0:	51                   	push   ecx
c001ecd1:	51                   	push   ecx
c001ecd2:	6a 00                	push   0x0
c001ecd4:	56                   	push   esi
c001ecd5:	e8 e2 fb ff ff       	call   c001e8bc <PCI::checkBus(unsigned char)>
c001ecda:	83 c4 10             	add    esp,0x10
c001ecdd:	eb 2a                	jmp    c001ed09 <PCI::detect()+0x55>
c001ecdf:	52                   	push   edx
c001ece0:	52                   	push   edx
c001ece1:	53                   	push   ebx
c001ece2:	43                   	inc    ebx
c001ece3:	56                   	push   esi
c001ece4:	e8 d3 fb ff ff       	call   c001e8bc <PCI::checkBus(unsigned char)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	83 fb 08             	cmp    ebx,0x8
c001ecef:	74 18                	je     c001ed09 <PCI::detect()+0x55>
c001ecf1:	53                   	push   ebx
c001ecf2:	6a 00                	push   0x0
c001ecf4:	6a 00                	push   0x0
c001ecf6:	56                   	push   esi
c001ecf7:	e8 80 f6 ff ff       	call   c001e37c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	0f b7 c0             	movzx  eax,ax
c001ed02:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed07:	74 d6                	je     c001ecdf <PCI::detect()+0x2b>
c001ed09:	58                   	pop    eax
c001ed0a:	5b                   	pop    ebx
c001ed0b:	5e                   	pop    esi
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <IDE::close(int, int, void*)>:
c001ed0e:	83 c8 ff             	or     eax,0xffffffff
c001ed11:	c3                   	ret    

c001ed12 <IDE::IDE()>:
c001ed12:	83 ec 0c             	sub    esp,0xc
c001ed15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed19:	83 ec 08             	sub    esp,0x8
c001ed1c:	68 4c 62 02 c0       	push   0xc002624c
c001ed21:	50                   	push   eax
c001ed22:	e8 85 b0 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	ba 78 63 02 c0       	mov    edx,0xc0026378
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	89 10                	mov    DWORD PTR [eax],edx
c001ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed39:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ed40:	90                   	nop
c001ed41:	83 c4 0c             	add    esp,0xc
c001ed44:	c3                   	ret    
c001ed45:	90                   	nop

c001ed46 <IDE::prepareInterrupt(unsigned char)>:
c001ed46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed4f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ed57:	c3                   	ret    

c001ed58 <selectDrive(unsigned char, unsigned char)>:
c001ed58:	c3                   	ret    
c001ed59:	90                   	nop

c001ed5a <IDE::getBase(unsigned char)>:
c001ed5a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ed5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed63:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ed6b:	c3                   	ret    

c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ed6c:	55                   	push   ebp
c001ed6d:	57                   	push   edi
c001ed6e:	56                   	push   esi
c001ed6f:	53                   	push   ebx
c001ed70:	83 ec 1c             	sub    esp,0x1c
c001ed73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ed77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ed7b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ed7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed86:	80 f9 03             	cmp    cl,0x3
c001ed89:	77 4f                	ja     c001edda <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ed8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed8f:	0f b6 fa             	movzx  edi,dl
c001ed92:	0f b6 db             	movzx  ebx,bl
c001ed95:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ed98:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ed9d:	80 ca 80             	or     dl,0x80
c001eda0:	52                   	push   edx
c001eda1:	6a 0c                	push   0xc
c001eda3:	57                   	push   edi
c001eda4:	56                   	push   esi
c001eda5:	e8 c2 ff ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edaa:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001edaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edb3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001edb7:	ee                   	out    dx,al
c001edb8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001edbd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001edc1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001edc5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001edc9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001edd1:	83 c4 2c             	add    esp,0x2c
c001edd4:	5b                   	pop    ebx
c001edd5:	5e                   	pop    esi
c001edd6:	5f                   	pop    edi
c001edd7:	5d                   	pop    ebp
c001edd8:	eb 92                	jmp    c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edda:	0f b6 cb             	movzx  ecx,bl
c001eddd:	83 f9 07             	cmp    ecx,0x7
c001ede0:	77 12                	ja     c001edf4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ede2:	0f b6 d2             	movzx  edx,dl
c001ede5:	0f b6 db             	movzx  ebx,bl
c001ede8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001edf0:	01 da                	add    edx,ebx
c001edf2:	eb 2f                	jmp    c001ee23 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001edf4:	83 f9 0d             	cmp    ecx,0xd
c001edf7:	77 13                	ja     c001ee0c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001edf9:	0f b6 d2             	movzx  edx,dl
c001edfc:	0f b6 db             	movzx  ebx,bl
c001edff:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ee06:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee0a:	eb 17                	jmp    c001ee23 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee0c:	83 f9 15             	cmp    ecx,0x15
c001ee0f:	77 13                	ja     c001ee24 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ee11:	0f b6 d2             	movzx  edx,dl
c001ee14:	0f b6 db             	movzx  ebx,bl
c001ee17:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ee1f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ee23:	ee                   	out    dx,al
c001ee24:	83 c4 1c             	add    esp,0x1c
c001ee27:	5b                   	pop    ebx
c001ee28:	5e                   	pop    esi
c001ee29:	5f                   	pop    edi
c001ee2a:	5d                   	pop    ebp
c001ee2b:	c3                   	ret    

c001ee2c <IDE::read(unsigned char, unsigned char)>:
c001ee2c:	55                   	push   ebp
c001ee2d:	57                   	push   edi
c001ee2e:	56                   	push   esi
c001ee2f:	53                   	push   ebx
c001ee30:	83 ec 1c             	sub    esp,0x1c
c001ee33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ee3b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ee3e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ee42:	3c 03                	cmp    al,0x3
c001ee44:	77 40                	ja     c001ee86 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ee46:	0f b6 f9             	movzx  edi,cl
c001ee49:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ee4c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ee51:	0c 80                	or     al,0x80
c001ee53:	50                   	push   eax
c001ee54:	6a 0c                	push   0xc
c001ee56:	57                   	push   edi
c001ee57:	56                   	push   esi
c001ee58:	e8 0f ff ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee5d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ee62:	0f b6 d3             	movzx  edx,bl
c001ee65:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ee69:	ec                   	in     al,dx
c001ee6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee6e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ee73:	52                   	push   edx
c001ee74:	6a 0c                	push   0xc
c001ee76:	57                   	push   edi
c001ee77:	56                   	push   esi
c001ee78:	e8 ef fe ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee7d:	83 c4 20             	add    esp,0x20
c001ee80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ee84:	eb 4c                	jmp    c001eed2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ee86:	0f b6 d3             	movzx  edx,bl
c001ee89:	83 fa 07             	cmp    edx,0x7
c001ee8c:	77 12                	ja     c001eea0 <IDE::read(unsigned char, unsigned char)+0x74>
c001ee8e:	0f b6 c9             	movzx  ecx,cl
c001ee91:	0f b6 d3             	movzx  edx,bl
c001ee94:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ee9c:	01 c2                	add    edx,eax
c001ee9e:	eb 31                	jmp    c001eed1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eea0:	83 fa 0d             	cmp    edx,0xd
c001eea3:	77 13                	ja     c001eeb8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eea5:	0f b6 c9             	movzx  ecx,cl
c001eea8:	0f b6 d3             	movzx  edx,bl
c001eeab:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001eeb2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eeb6:	eb 19                	jmp    c001eed1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eeb8:	31 c0                	xor    eax,eax
c001eeba:	83 fa 15             	cmp    edx,0x15
c001eebd:	77 13                	ja     c001eed2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001eebf:	0f b6 c9             	movzx  ecx,cl
c001eec2:	0f b6 d3             	movzx  edx,bl
c001eec5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001eecd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eed1:	ec                   	in     al,dx
c001eed2:	83 c4 1c             	add    esp,0x1c
c001eed5:	5b                   	pop    ebx
c001eed6:	5e                   	pop    esi
c001eed7:	5f                   	pop    edi
c001eed8:	5d                   	pop    ebp
c001eed9:	c3                   	ret    

c001eeda <IDE::waitInterrupt(unsigned char)>:
c001eeda:	55                   	push   ebp
c001eedb:	57                   	push   edi
c001eedc:	56                   	push   esi
c001eedd:	53                   	push   ebx
c001eede:	31 db                	xor    ebx,ebx
c001eee0:	83 ec 0c             	sub    esp,0xc
c001eee3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eee7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eeec:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001eef4:	89 e8                	mov    eax,ebp
c001eef6:	84 c0                	test   al,al
c001eef8:	75 31                	jne    c001ef2b <IDE::waitInterrupt(unsigned char)+0x51>
c001eefa:	52                   	push   edx
c001eefb:	6a 0c                	push   0xc
c001eefd:	56                   	push   esi
c001eefe:	57                   	push   edi
c001eeff:	e8 28 ff ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001ef04:	83 c4 10             	add    esp,0x10
c001ef07:	a8 01                	test   al,0x1
c001ef09:	75 28                	jne    c001ef33 <IDE::waitInterrupt(unsigned char)+0x59>
c001ef0b:	f6 c3 04             	test   bl,0x4
c001ef0e:	75 13                	jne    c001ef23 <IDE::waitInterrupt(unsigned char)+0x49>
c001ef10:	83 fb 32             	cmp    ebx,0x32
c001ef13:	7e 0e                	jle    c001ef23 <IDE::waitInterrupt(unsigned char)+0x49>
c001ef15:	50                   	push   eax
c001ef16:	50                   	push   eax
c001ef17:	6a 00                	push   0x0
c001ef19:	6a 64                	push   0x64
c001ef1b:	e8 fc 7a ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c001ef20:	83 c4 10             	add    esp,0x10
c001ef23:	83 fb 3c             	cmp    ebx,0x3c
c001ef26:	74 0b                	je     c001ef33 <IDE::waitInterrupt(unsigned char)+0x59>
c001ef28:	43                   	inc    ebx
c001ef29:	eb c1                	jmp    c001eeec <IDE::waitInterrupt(unsigned char)+0x12>
c001ef2b:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ef33:	83 c4 0c             	add    esp,0xc
c001ef36:	89 e8                	mov    eax,ebp
c001ef38:	5b                   	pop    ebx
c001ef39:	5e                   	pop    esi
c001ef3a:	5f                   	pop    edi
c001ef3b:	5d                   	pop    ebp
c001ef3c:	c3                   	ret    

c001ef3d <ideChannel0IRQHandler(regs*, void*)>:
c001ef3d:	83 ec 10             	sub    esp,0x10
c001ef40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef44:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ef4b:	6a 07                	push   0x7
c001ef4d:	6a 00                	push   0x0
c001ef4f:	50                   	push   eax
c001ef50:	e8 d7 fe ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001ef55:	83 c4 1c             	add    esp,0x1c
c001ef58:	c3                   	ret    

c001ef59 <ideChannel1IRQHandler(regs*, void*)>:
c001ef59:	83 ec 10             	sub    esp,0x10
c001ef5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef60:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ef67:	6a 07                	push   0x7
c001ef69:	6a 01                	push   0x1
c001ef6b:	50                   	push   eax
c001ef6c:	e8 bb fe ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001ef71:	83 c4 1c             	add    esp,0x1c
c001ef74:	c3                   	ret    
c001ef75:	90                   	nop

c001ef76 <IDE::enableIRQs(unsigned char, bool)>:
c001ef76:	57                   	push   edi
c001ef77:	b8 02 00 00 00       	mov    eax,0x2
c001ef7c:	56                   	push   esi
c001ef7d:	53                   	push   ebx
c001ef7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef86:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ef8b:	74 02                	je     c001ef8f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ef8d:	31 c0                	xor    eax,eax
c001ef8f:	0f b6 db             	movzx  ebx,bl
c001ef92:	bf 04 00 00 00       	mov    edi,0x4
c001ef97:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ef9e:	50                   	push   eax
c001ef9f:	6a 0c                	push   0xc
c001efa1:	53                   	push   ebx
c001efa2:	56                   	push   esi
c001efa3:	e8 c4 fd ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	50                   	push   eax
c001efac:	6a 0c                	push   0xc
c001efae:	53                   	push   ebx
c001efaf:	56                   	push   esi
c001efb0:	e8 77 fe ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001efb5:	83 c4 10             	add    esp,0x10
c001efb8:	4f                   	dec    edi
c001efb9:	75 f0                	jne    c001efab <IDE::enableIRQs(unsigned char, bool)+0x35>
c001efbb:	5b                   	pop    ebx
c001efbc:	5e                   	pop    esi
c001efbd:	5f                   	pop    edi
c001efbe:	c3                   	ret    
c001efbf:	90                   	nop

c001efc0 <IDE::open(int, int, void*)>:
c001efc0:	57                   	push   edi
c001efc1:	56                   	push   esi
c001efc2:	53                   	push   ebx
c001efc3:	83 ec 10             	sub    esp,0x10
c001efc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001efca:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001efd3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001efdc:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001efe3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001efea:	0f 85 84 02 00 00    	jne    c001f274 <IDE::open(int, int, void*)+0x2b4>
c001eff0:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001eff6:	a8 70                	test   al,0x70
c001eff8:	75 44                	jne    c001f03e <IDE::open(int, int, void*)+0x7e>
c001effa:	ba 20 84 00 00       	mov    edx,0x8420
c001efff:	0f a3 c2             	bt     edx,eax
c001f002:	73 3a                	jae    c001f03e <IDE::open(int, int, void*)+0x7e>
c001f004:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	83 e0 fc             	and    eax,0xfffffffc
c001f010:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f017:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f01d:	83 e0 fc             	and    eax,0xfffffffc
c001f020:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f027:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f02d:	83 e0 fc             	and    eax,0xfffffffc
c001f030:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f037:	68 ed 38 02 c0       	push   0xc00238ed
c001f03c:	eb 60                	jmp    c001f09e <IDE::open(int, int, void*)+0xde>
c001f03e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f048:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f052:	be 64 00 00 00       	mov    esi,0x64
c001f057:	57                   	push   edi
c001f058:	57                   	push   edi
c001f059:	68 64 62 02 c0       	push   0xc0026264
c001f05e:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001f062:	57                   	push   edi
c001f063:	e8 d8 15 fe ff       	call   c0000640 <strcpy>
c001f068:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001f06f:	31 d2                	xor    edx,edx
c001f071:	89 c8                	mov    eax,ecx
c001f073:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f076:	f7 f6                	div    esi
c001f078:	be 0a 00 00 00       	mov    esi,0xa
c001f07d:	83 c0 30             	add    eax,0x30
c001f080:	31 d2                	xor    edx,edx
c001f082:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f086:	89 c8                	mov    eax,ecx
c001f088:	f7 f6                	div    esi
c001f08a:	89 d1                	mov    ecx,edx
c001f08c:	31 d2                	xor    edx,edx
c001f08e:	83 c1 30             	add    ecx,0x30
c001f091:	f7 f6                	div    esi
c001f093:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001f097:	83 c2 30             	add    edx,0x30
c001f09a:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001f09e:	e8 16 e2 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f0a3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f0a8:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f0af:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f0b6:	c1 e1 10             	shl    ecx,0x10
c001f0b9:	c1 e0 0b             	shl    eax,0xb
c001f0bc:	83 c4 10             	add    esp,0x10
c001f0bf:	09 c1                	or     ecx,eax
c001f0c1:	89 fa                	mov    edx,edi
c001f0c3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f0ca:	c1 e0 08             	shl    eax,0x8
c001f0cd:	09 c1                	or     ecx,eax
c001f0cf:	89 c8                	mov    eax,ecx
c001f0d1:	0d 08 00 00 80       	or     eax,0x80000008
c001f0d6:	ef                   	out    dx,eax
c001f0d7:	be fc 0c 00 00       	mov    esi,0xcfc
c001f0dc:	89 f2                	mov    edx,esi
c001f0de:	ed                   	in     eax,dx
c001f0df:	c1 e8 10             	shr    eax,0x10
c001f0e2:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0e7:	0f 84 e5 00 00 00    	je     c001f1d2 <IDE::open(int, int, void*)+0x212>
c001f0ed:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f0f3:	89 fa                	mov    edx,edi
c001f0f5:	89 c8                	mov    eax,ecx
c001f0f7:	ef                   	out    dx,eax
c001f0f8:	b0 fe                	mov    al,0xfe
c001f0fa:	89 f2                	mov    edx,esi
c001f0fc:	ee                   	out    dx,al
c001f0fd:	89 c8                	mov    eax,ecx
c001f0ff:	89 fa                	mov    edx,edi
c001f101:	ef                   	out    dx,eax
c001f102:	89 f2                	mov    edx,esi
c001f104:	ed                   	in     eax,dx
c001f105:	3c fe                	cmp    al,0xfe
c001f107:	0f 85 85 00 00 00    	jne    c001f192 <IDE::open(int, int, void*)+0x1d2>
c001f10d:	83 ec 0c             	sub    esp,0xc
c001f110:	68 23 39 02 c0       	push   0xc0023923
c001f115:	e8 9f e1 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f11a:	c7 04 24 6a 62 02 c0 	mov    DWORD PTR [esp],0xc002626a
c001f121:	e8 56 7e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f126:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f130:	c7 04 24 08 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c08
c001f137:	e8 7d e1 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f13c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f143:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f14a:	c1 e1 10             	shl    ecx,0x10
c001f14d:	c1 e0 08             	shl    eax,0x8
c001f150:	89 fa                	mov    edx,edi
c001f152:	09 c1                	or     ecx,eax
c001f154:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f15b:	c1 e0 0b             	shl    eax,0xb
c001f15e:	09 c1                	or     ecx,eax
c001f160:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f166:	89 c8                	mov    eax,ecx
c001f168:	ef                   	out    dx,eax
c001f169:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f16f:	89 f2                	mov    edx,esi
c001f171:	ee                   	out    dx,al
c001f172:	89 c8                	mov    eax,ecx
c001f174:	89 fa                	mov    edx,edi
c001f176:	ef                   	out    dx,eax
c001f177:	89 f2                	mov    edx,esi
c001f179:	ed                   	in     eax,dx
c001f17a:	0f b6 c0             	movzx  eax,al
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f186:	74 5a                	je     c001f1e2 <IDE::open(int, int, void*)+0x222>
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	68 7f 62 02 c0       	push   0xc002627f
c001f190:	eb 48                	jmp    c001f1da <IDE::open(int, int, void*)+0x21a>
c001f192:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f19b:	75 2b                	jne    c001f1c8 <IDE::open(int, int, void*)+0x208>
c001f19d:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001f1a4:	3d 80 00 00 00       	cmp    eax,0x80
c001f1a9:	74 07                	je     c001f1b2 <IDE::open(int, int, void*)+0x1f2>
c001f1ab:	3d 8a 00 00 00       	cmp    eax,0x8a
c001f1b0:	75 16                	jne    c001f1c8 <IDE::open(int, int, void*)+0x208>
c001f1b2:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f1b9:	83 ec 0c             	sub    esp,0xc
c001f1bc:	68 de 33 02 c0       	push   0xc00233de
c001f1c1:	e8 f3 e0 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f1c6:	eb 17                	jmp    c001f1df <IDE::open(int, int, void*)+0x21f>
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	68 87 62 02 c0       	push   0xc0026287
c001f1d0:	eb 08                	jmp    c001f1da <IDE::open(int, int, void*)+0x21a>
c001f1d2:	83 ec 0c             	sub    esp,0xc
c001f1d5:	68 b8 62 02 c0       	push   0xc00262b8
c001f1da:	e8 c1 0a ff ff       	call   c000fca0 <KePanic(char const*)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f1e9:	0f 84 bf 00 00 00    	je     c001f2ae <IDE::open(int, int, void*)+0x2ee>
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f1f8:	83 e0 fc             	and    eax,0xfffffffc
c001f1fb:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f202:	83 c0 08             	add    eax,0x8
c001f205:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f20c:	68 e2 62 02 c0       	push   0xc00262e2
c001f211:	e8 66 7d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f216:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f21d:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f224:	50                   	push   eax
c001f225:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f22c:	50                   	push   eax
c001f22d:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f234:	50                   	push   eax
c001f235:	ff 35 a0 fd 02 c0    	push   DWORD PTR ds:0xc002fda0
c001f23b:	e8 92 f0 ff ff       	call   c001e2d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f240:	83 c4 18             	add    esp,0x18
c001f243:	83 c8 07             	or     eax,0x7
c001f246:	0f b7 c0             	movzx  eax,ax
c001f249:	50                   	push   eax
c001f24a:	6a 04                	push   0x4
c001f24c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f253:	50                   	push   eax
c001f254:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f25b:	50                   	push   eax
c001f25c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f263:	50                   	push   eax
c001f264:	ff 35 a0 fd 02 c0    	push   DWORD PTR ds:0xc002fda0
c001f26a:	e8 9f f2 ff ff       	call   c001e50e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f26f:	83 c4 20             	add    esp,0x20
c001f272:	eb 3a                	jmp    c001f2ae <IDE::open(int, int, void*)+0x2ee>
c001f274:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f27a:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f281:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f288:	05 06 02 00 00       	add    eax,0x206
c001f28d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f294:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f29b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f2a2:	05 06 02 00 00       	add    eax,0x206
c001f2a7:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f2ae:	83 ec 0c             	sub    esp,0xc
c001f2b1:	68 c0 41 02 c0       	push   0xc00241c0
c001f2b6:	e8 fe df fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f2bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f2c1:	83 c4 10             	add    esp,0x10
c001f2c4:	89 c2                	mov    edx,eax
c001f2c6:	83 e2 0f             	and    edx,0xf
c001f2c9:	83 fa 08             	cmp    edx,0x8
c001f2cc:	75 0a                	jne    c001f2d8 <IDE::open(int, int, void*)+0x318>
c001f2ce:	83 e8 02             	sub    eax,0x2
c001f2d1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f2d8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f2de:	89 c2                	mov    edx,eax
c001f2e0:	83 e2 0f             	and    edx,0xf
c001f2e3:	83 fa 08             	cmp    edx,0x8
c001f2e6:	75 0a                	jne    c001f2f2 <IDE::open(int, int, void*)+0x332>
c001f2e8:	83 e8 02             	sub    eax,0x2
c001f2eb:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f2f2:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f2f9:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f300:	89 d0                	mov    eax,edx
c001f302:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f305:	8d 7a 01             	lea    edi,[edx+0x1]
c001f308:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f30c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f310:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f314:	83 e1 3f             	and    ecx,0x3f
c001f317:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f31b:	89 f9                	mov    ecx,edi
c001f31d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f324:	0f b6 c9             	movzx  ecx,cl
c001f327:	8d 78 02             	lea    edi,[eax+0x2]
c001f32a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f32d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f331:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f335:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f339:	83 e2 3f             	and    edx,0x3f
c001f33c:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f340:	89 f9                	mov    ecx,edi
c001f342:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f348:	0f b6 d1             	movzx  edx,cl
c001f34b:	8d 78 03             	lea    edi,[eax+0x3]
c001f34e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f351:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f355:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f359:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f35d:	83 e1 3f             	and    ecx,0x3f
c001f360:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f364:	89 fa                	mov    edx,edi
c001f366:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f36c:	0f b6 ca             	movzx  ecx,dl
c001f36f:	8d 78 04             	lea    edi,[eax+0x4]
c001f372:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f375:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f379:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f37d:	89 fa                	mov    edx,edi
c001f37f:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f385:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f389:	83 e2 3f             	and    edx,0x3f
c001f38c:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f390:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f397:	66 85 f6             	test   si,si
c001f39a:	74 24                	je     c001f3c0 <IDE::open(int, int, void*)+0x400>
c001f39c:	89 f9                	mov    ecx,edi
c001f39e:	83 c0 05             	add    eax,0x5
c001f3a1:	0f b6 d1             	movzx  edx,cl
c001f3a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f3a7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f3ab:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f3af:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f3b5:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f3b9:	83 e0 3f             	and    eax,0x3f
c001f3bc:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f3c0:	83 ec 0c             	sub    esp,0xc
c001f3c3:	68 fa 62 02 c0       	push   0xc00262fa
c001f3c8:	e8 ec de fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f3cd:	58                   	pop    eax
c001f3ce:	5a                   	pop    edx
c001f3cf:	6a 00                	push   0x0
c001f3d1:	53                   	push   ebx
c001f3d2:	e8 6f f9 ff ff       	call   c001ed46 <IDE::prepareInterrupt(unsigned char)>
c001f3d7:	59                   	pop    ecx
c001f3d8:	5e                   	pop    esi
c001f3d9:	6a 01                	push   0x1
c001f3db:	53                   	push   ebx
c001f3dc:	e8 65 f9 ff ff       	call   c001ed46 <IDE::prepareInterrupt(unsigned char)>
c001f3e1:	c7 04 24 7c 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b7c
c001f3e8:	e8 cc de fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f3ed:	83 c4 0c             	add    esp,0xc
c001f3f0:	6a 00                	push   0x0
c001f3f2:	6a 00                	push   0x0
c001f3f4:	53                   	push   ebx
c001f3f5:	e8 7c fb ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c001f3fa:	83 c4 0c             	add    esp,0xc
c001f3fd:	6a 00                	push   0x0
c001f3ff:	6a 01                	push   0x1
c001f401:	53                   	push   ebx
c001f402:	e8 6f fb ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c001f407:	c7 04 24 fc 62 02 c0 	mov    DWORD PTR [esp],0xc00262fc
c001f40e:	e8 a6 de fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f413:	83 c4 10             	add    esp,0x10
c001f416:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f41d:	74 3c                	je     c001f45b <IDE::open(int, int, void*)+0x49b>
c001f41f:	83 ec 0c             	sub    esp,0xc
c001f422:	53                   	push   ebx
c001f423:	6a 01                	push   0x1
c001f425:	68 3d ef 01 c0       	push   0xc001ef3d
c001f42a:	6a 0e                	push   0xe
c001f42c:	53                   	push   ebx
c001f42d:	e8 ce a5 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f432:	83 c4 14             	add    esp,0x14
c001f435:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f43b:	53                   	push   ebx
c001f43c:	6a 01                	push   0x1
c001f43e:	68 59 ef 01 c0       	push   0xc001ef59
c001f443:	6a 0f                	push   0xf
c001f445:	53                   	push   ebx
c001f446:	e8 b5 a5 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f44b:	83 c4 14             	add    esp,0x14
c001f44e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f454:	68 0e 3e 02 c0       	push   0xc0023e0e
c001f459:	eb 40                	jmp    c001f49b <IDE::open(int, int, void*)+0x4db>
c001f45b:	83 ec 0c             	sub    esp,0xc
c001f45e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f468:	53                   	push   ebx
c001f469:	6a 00                	push   0x0
c001f46b:	68 3d ef 01 c0       	push   0xc001ef3d
c001f470:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f476:	53                   	push   ebx
c001f477:	e8 84 a5 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f47c:	83 c4 14             	add    esp,0x14
c001f47f:	53                   	push   ebx
c001f480:	6a 00                	push   0x0
c001f482:	68 59 ef 01 c0       	push   0xc001ef59
c001f487:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f48d:	53                   	push   ebx
c001f48e:	e8 6d a5 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f493:	83 c4 14             	add    esp,0x14
c001f496:	68 52 4b 02 c0       	push   0xc0024b52
c001f49b:	e8 19 de fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	83 ec 0c             	sub    esp,0xc
c001f4a6:	68 fe 62 02 c0       	push   0xc00262fe
c001f4ab:	e8 09 de fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f4b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4b5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f4b8:	c7 04 24 c5 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fc5
c001f4bf:	e8 f5 dd fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f4c4:	83 c4 0c             	add    esp,0xc
c001f4c7:	6a 07                	push   0x7
c001f4c9:	6a 00                	push   0x0
c001f4cb:	53                   	push   ebx
c001f4cc:	e8 5b f9 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f4d1:	83 c4 0c             	add    esp,0xc
c001f4d4:	6a 07                	push   0x7
c001f4d6:	6a 01                	push   0x1
c001f4d8:	53                   	push   ebx
c001f4d9:	e8 4e f9 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f4de:	c7 04 24 5c 48 02 c0 	mov    DWORD PTR [esp],0xc002485c
c001f4e5:	e8 cf dd fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f4ea:	83 c4 0c             	add    esp,0xc
c001f4ed:	6a 01                	push   0x1
c001f4ef:	6a 00                	push   0x0
c001f4f1:	53                   	push   ebx
c001f4f2:	e8 7f fa ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c001f4f7:	83 c4 0c             	add    esp,0xc
c001f4fa:	6a 01                	push   0x1
c001f4fc:	6a 01                	push   0x1
c001f4fe:	53                   	push   ebx
c001f4ff:	e8 72 fa ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c001f504:	c7 04 24 01 63 02 c0 	mov    DWORD PTR [esp],0xc0026301
c001f50b:	e8 a9 dd fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f510:	83 c4 20             	add    esp,0x20
c001f513:	31 c0                	xor    eax,eax
c001f515:	5b                   	pop    ebx
c001f516:	5e                   	pop    esi
c001f517:	5f                   	pop    edi
c001f518:	c3                   	ret    
c001f519:	90                   	nop

c001f51a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f51a:	55                   	push   ebp
c001f51b:	57                   	push   edi
c001f51c:	56                   	push   esi
c001f51d:	53                   	push   ebx
c001f51e:	83 ec 1c             	sub    esp,0x1c
c001f521:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f525:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f529:	8d 42 f8             	lea    eax,[edx-0x8]
c001f52c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f530:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f534:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f538:	3c 03                	cmp    al,0x3
c001f53a:	77 5a                	ja     c001f596 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f53c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f540:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f544:	0f b6 db             	movzx  ebx,bl
c001f547:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f54a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f54f:	0c 80                	or     al,0x80
c001f551:	50                   	push   eax
c001f552:	6a 0c                	push   0xc
c001f554:	53                   	push   ebx
c001f555:	56                   	push   esi
c001f556:	e8 11 f8 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f55b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f560:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f568:	0f b6 d2             	movzx  edx,dl
c001f56b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f56f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f571:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f576:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f57a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f57e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f582:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f58a:	83 c4 2c             	add    esp,0x2c
c001f58d:	5b                   	pop    ebx
c001f58e:	5e                   	pop    esi
c001f58f:	5f                   	pop    edi
c001f590:	5d                   	pop    ebp
c001f591:	e9 d6 f7 ff ff       	jmp    c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f596:	0f b6 c2             	movzx  eax,dl
c001f599:	83 f8 07             	cmp    eax,0x7
c001f59c:	77 12                	ja     c001f5b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f59e:	0f b6 c2             	movzx  eax,dl
c001f5a1:	0f b6 db             	movzx  ebx,bl
c001f5a4:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f5ac:	01 c2                	add    edx,eax
c001f5ae:	eb 2f                	jmp    c001f5df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f5b0:	83 f8 0d             	cmp    eax,0xd
c001f5b3:	77 13                	ja     c001f5c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f5b5:	0f b6 db             	movzx  ebx,bl
c001f5b8:	0f b6 d2             	movzx  edx,dl
c001f5bb:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f5c2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f5c6:	eb 17                	jmp    c001f5df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f5c8:	83 f8 15             	cmp    eax,0x15
c001f5cb:	77 14                	ja     c001f5e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f5cd:	0f b6 db             	movzx  ebx,bl
c001f5d0:	0f b6 d2             	movzx  edx,dl
c001f5d3:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f5db:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f5df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f5e1:	83 c4 1c             	add    esp,0x1c
c001f5e4:	5b                   	pop    ebx
c001f5e5:	5e                   	pop    esi
c001f5e6:	5f                   	pop    edi
c001f5e7:	5d                   	pop    ebp
c001f5e8:	c3                   	ret    
c001f5e9:	90                   	nop

c001f5ea <IDE::detect()>:
c001f5ea:	55                   	push   ebp
c001f5eb:	57                   	push   edi
c001f5ec:	56                   	push   esi
c001f5ed:	53                   	push   ebx
c001f5ee:	81 ec 28 02 00 00    	sub    esp,0x228
c001f5f4:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f5fb:	68 03 63 02 c0       	push   0xc0026303
c001f600:	e8 b4 dc fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f605:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f60b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f60f:	83 c4 10             	add    esp,0x10
c001f612:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f617:	0f 85 2f 04 00 00    	jne    c001fa4c <IDE::detect()+0x462>
c001f61d:	83 ec 0c             	sub    esp,0xc
c001f620:	31 f6                	xor    esi,esi
c001f622:	68 06 63 02 c0       	push   0xc0026306
c001f627:	31 ff                	xor    edi,edi
c001f629:	e8 8b dc fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f62e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f635:	83 c4 10             	add    esp,0x10
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	68 09 63 02 c0       	push   0xc0026309
c001f640:	e8 74 dc fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f645:	83 c4 10             	add    esp,0x10
c001f648:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	31 ed                	xor    ebp,ebp
c001f654:	68 0c 63 02 c0       	push   0xc002630c
c001f659:	e8 5b dc fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f65e:	89 f8                	mov    eax,edi
c001f660:	c1 e0 06             	shl    eax,0x6
c001f663:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f66b:	c7 04 24 0f 63 02 c0 	mov    DWORD PTR [esp],0xc002630f
c001f672:	e8 42 dc fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f677:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f67b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f683:	c1 e0 04             	shl    eax,0x4
c001f686:	83 c8 a0             	or     eax,0xffffffa0
c001f689:	0f b6 c0             	movzx  eax,al
c001f68c:	50                   	push   eax
c001f68d:	6a 06                	push   0x6
c001f68f:	56                   	push   esi
c001f690:	53                   	push   ebx
c001f691:	e8 d6 f6 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f696:	83 c4 1c             	add    esp,0x1c
c001f699:	6a 0c                	push   0xc
c001f69b:	56                   	push   esi
c001f69c:	53                   	push   ebx
c001f69d:	e8 8a f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6a2:	83 c4 0c             	add    esp,0xc
c001f6a5:	6a 0c                	push   0xc
c001f6a7:	56                   	push   esi
c001f6a8:	53                   	push   ebx
c001f6a9:	e8 7e f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6ae:	83 c4 0c             	add    esp,0xc
c001f6b1:	6a 0c                	push   0xc
c001f6b3:	56                   	push   esi
c001f6b4:	53                   	push   ebx
c001f6b5:	e8 72 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6ba:	83 c4 0c             	add    esp,0xc
c001f6bd:	6a 0c                	push   0xc
c001f6bf:	56                   	push   esi
c001f6c0:	53                   	push   ebx
c001f6c1:	e8 66 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6c6:	c7 04 24 12 63 02 c0 	mov    DWORD PTR [esp],0xc0026312
c001f6cd:	e8 e7 db fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f6d2:	68 ec 00 00 00       	push   0xec
c001f6d7:	6a 07                	push   0x7
c001f6d9:	56                   	push   esi
c001f6da:	53                   	push   ebx
c001f6db:	e8 8c f6 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6e0:	83 c4 1c             	add    esp,0x1c
c001f6e3:	6a 0c                	push   0xc
c001f6e5:	56                   	push   esi
c001f6e6:	53                   	push   ebx
c001f6e7:	e8 40 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6ec:	83 c4 0c             	add    esp,0xc
c001f6ef:	6a 0c                	push   0xc
c001f6f1:	56                   	push   esi
c001f6f2:	53                   	push   ebx
c001f6f3:	e8 34 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f6f8:	83 c4 0c             	add    esp,0xc
c001f6fb:	6a 0c                	push   0xc
c001f6fd:	56                   	push   esi
c001f6fe:	53                   	push   ebx
c001f6ff:	e8 28 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f704:	83 c4 0c             	add    esp,0xc
c001f707:	6a 0c                	push   0xc
c001f709:	56                   	push   esi
c001f70a:	53                   	push   ebx
c001f70b:	e8 1c f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f710:	c7 04 24 15 63 02 c0 	mov    DWORD PTR [esp],0xc0026315
c001f717:	e8 9d db fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f71c:	83 c4 0c             	add    esp,0xc
c001f71f:	6a 0c                	push   0xc
c001f721:	56                   	push   esi
c001f722:	53                   	push   ebx
c001f723:	e8 04 f7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f728:	83 c4 10             	add    esp,0x10
c001f72b:	84 c0                	test   al,al
c001f72d:	75 1f                	jne    c001f74e <IDE::detect()+0x164>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	68 18 63 02 c0       	push   0xc0026318
c001f737:	e8 7d db fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f73c:	e9 e9 02 00 00       	jmp    c001fa2a <IDE::detect()+0x440>
c001f741:	a8 80                	test   al,0x80
c001f743:	74 21                	je     c001f766 <IDE::detect()+0x17c>
c001f745:	45                   	inc    ebp
c001f746:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f74c:	7f 1e                	jg     c001f76c <IDE::detect()+0x182>
c001f74e:	50                   	push   eax
c001f74f:	6a 0c                	push   0xc
c001f751:	56                   	push   esi
c001f752:	53                   	push   ebx
c001f753:	e8 d4 f6 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f758:	83 c4 10             	add    esp,0x10
c001f75b:	a8 01                	test   al,0x1
c001f75d:	74 e2                	je     c001f741 <IDE::detect()+0x157>
c001f75f:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f764:	eb 23                	jmp    c001f789 <IDE::detect()+0x19f>
c001f766:	a8 08                	test   al,0x8
c001f768:	74 db                	je     c001f745 <IDE::detect()+0x15b>
c001f76a:	eb 18                	jmp    c001f784 <IDE::detect()+0x19a>
c001f76c:	50                   	push   eax
c001f76d:	50                   	push   eax
c001f76e:	6a 00                	push   0x0
c001f770:	6a 32                	push   0x32
c001f772:	e8 a5 72 ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c001f777:	83 c4 10             	add    esp,0x10
c001f77a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f780:	75 cc                	jne    c001f74e <IDE::detect()+0x164>
c001f782:	eb db                	jmp    c001f75f <IDE::detect()+0x175>
c001f784:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f789:	83 ec 0c             	sub    esp,0xc
c001f78c:	68 1b 63 02 c0       	push   0xc002631b
c001f791:	e8 23 db fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f796:	83 c4 10             	add    esp,0x10
c001f799:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f79e:	74 5f                	je     c001f7ff <IDE::detect()+0x215>
c001f7a0:	51                   	push   ecx
c001f7a1:	6a 04                	push   0x4
c001f7a3:	56                   	push   esi
c001f7a4:	53                   	push   ebx
c001f7a5:	e8 82 f6 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f7aa:	83 c4 0c             	add    esp,0xc
c001f7ad:	89 c5                	mov    ebp,eax
c001f7af:	6a 05                	push   0x5
c001f7b1:	56                   	push   esi
c001f7b2:	53                   	push   ebx
c001f7b3:	e8 74 f6 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001f7b8:	83 c4 10             	add    esp,0x10
c001f7bb:	89 e9                	mov    ecx,ebp
c001f7bd:	0f b6 c0             	movzx  eax,al
c001f7c0:	0f b6 e9             	movzx  ebp,cl
c001f7c3:	83 fd 14             	cmp    ebp,0x14
c001f7c6:	75 07                	jne    c001f7cf <IDE::detect()+0x1e5>
c001f7c8:	3d eb 00 00 00       	cmp    eax,0xeb
c001f7cd:	eb 0e                	jmp    c001f7dd <IDE::detect()+0x1f3>
c001f7cf:	3d 96 00 00 00       	cmp    eax,0x96
c001f7d4:	0f 85 53 02 00 00    	jne    c001fa2d <IDE::detect()+0x443>
c001f7da:	83 fd 69             	cmp    ebp,0x69
c001f7dd:	0f 85 4a 02 00 00    	jne    c001fa2d <IDE::detect()+0x443>
c001f7e3:	68 a1 00 00 00       	push   0xa1
c001f7e8:	6a 07                	push   0x7
c001f7ea:	56                   	push   esi
c001f7eb:	53                   	push   ebx
c001f7ec:	e8 7b f5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7f1:	58                   	pop    eax
c001f7f2:	5a                   	pop    edx
c001f7f3:	6a 00                	push   0x0
c001f7f5:	6a 0a                	push   0xa
c001f7f7:	e8 20 72 ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c001f7fc:	83 c4 10             	add    esp,0x10
c001f7ff:	83 ec 0c             	sub    esp,0xc
c001f802:	89 fd                	mov    ebp,edi
c001f804:	68 1e 63 02 c0       	push   0xc002631e
c001f809:	c1 e5 06             	shl    ebp,0x6
c001f80c:	e8 a8 da fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f811:	01 dd                	add    ebp,ebx
c001f813:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f817:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f81e:	52                   	push   edx
c001f81f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f823:	6a 00                	push   0x0
c001f825:	56                   	push   esi
c001f826:	53                   	push   ebx
c001f827:	e8 ee fc ff ff       	call   c001f51a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f82c:	83 c4 14             	add    esp,0x14
c001f82f:	68 22 63 02 c0       	push   0xc0026322
c001f834:	e8 80 da fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f839:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f83e:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f845:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f84c:	89 f0                	mov    eax,esi
c001f84e:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f854:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f858:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f862:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f869:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f871:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f878:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f880:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f886:	c7 04 24 26 63 02 c0 	mov    DWORD PTR [esp],0xc0026326
c001f88d:	e8 27 da fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f89c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8a0:	74 09                	je     c001f8ab <IDE::detect()+0x2c1>
c001f8a2:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f8a9:	eb 07                	jmp    c001f8b2 <IDE::detect()+0x2c8>
c001f8ab:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f8b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8b6:	89 f8                	mov    eax,edi
c001f8b8:	83 ec 0c             	sub    esp,0xc
c001f8bb:	c1 e0 06             	shl    eax,0x6
c001f8be:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f8c1:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f8c7:	68 2a 63 02 c0       	push   0xc002632a
c001f8cc:	e8 e8 d9 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f8d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f8d5:	89 e8                	mov    eax,ebp
c001f8d7:	83 c4 10             	add    esp,0x10
c001f8da:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f8dd:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f8e0:	83 c0 02             	add    eax,0x2
c001f8e3:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f8e9:	83 c2 02             	add    edx,0x2
c001f8ec:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f8ef:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f8f5:	39 d5                	cmp    ebp,edx
c001f8f7:	75 e4                	jne    c001f8dd <IDE::detect()+0x2f3>
c001f8f9:	89 f8                	mov    eax,edi
c001f8fb:	c1 e0 06             	shl    eax,0x6
c001f8fe:	01 d8                	add    eax,ebx
c001f900:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f907:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f90e:	c1 ea 09             	shr    edx,0x9
c001f911:	83 e2 01             	and    edx,0x1
c001f914:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f91b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f921:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f925:	74 0c                	je     c001f933 <IDE::detect()+0x349>
c001f927:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f930:	0f 95 c2             	setne  dl
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	89 fd                	mov    ebp,edi
c001f938:	c1 e5 06             	shl    ebp,0x6
c001f93b:	01 dd                	add    ebp,ebx
c001f93d:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f943:	68 2e 63 02 c0       	push   0xc002632e
c001f948:	e8 6c d9 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f94d:	83 c4 10             	add    esp,0x10
c001f950:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f955:	75 66                	jne    c001f9bd <IDE::detect()+0x3d3>
c001f957:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f95e:	0f 84 b8 00 00 00    	je     c001fa1c <IDE::detect()+0x432>
c001f964:	83 ec 0c             	sub    esp,0xc
c001f967:	68 32 63 02 c0       	push   0xc0026332
c001f96c:	e8 48 d9 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f971:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f978:	e8 ce fe fe ff       	call   c000f84b <malloc>
c001f97d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f980:	89 c5                	mov    ebp,eax
c001f982:	e8 43 05 00 00       	call   c001feca <ATA::ATA()>
c001f987:	c7 04 24 36 63 02 c0 	mov    DWORD PTR [esp],0xc0026336
c001f98e:	e8 26 d9 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f993:	59                   	pop    ecx
c001f994:	58                   	pop    eax
c001f995:	55                   	push   ebp
c001f996:	53                   	push   ebx
c001f997:	e8 b8 a0 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f99c:	c7 04 24 3b 63 02 c0 	mov    DWORD PTR [esp],0xc002633b
c001f9a3:	e8 11 d9 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f9a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f9ab:	53                   	push   ebx
c001f9ac:	57                   	push   edi
c001f9ad:	6a 00                	push   0x0
c001f9af:	55                   	push   ebp
c001f9b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f9b3:	83 c4 14             	add    esp,0x14
c001f9b6:	68 40 63 02 c0       	push   0xc0026340
c001f9bb:	eb 57                	jmp    c001fa14 <IDE::detect()+0x42a>
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	68 45 63 02 c0       	push   0xc0026345
c001f9c5:	e8 ef d8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f9ca:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f9d1:	e8 75 fe fe ff       	call   c000f84b <malloc>
c001f9d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9d9:	89 c5                	mov    ebp,eax
c001f9db:	e8 98 0c 00 00       	call   c0020678 <ATAPI::ATAPI()>
c001f9e0:	c7 04 24 4b 63 02 c0 	mov    DWORD PTR [esp],0xc002634b
c001f9e7:	e8 cd d8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001f9ec:	58                   	pop    eax
c001f9ed:	5a                   	pop    edx
c001f9ee:	55                   	push   ebp
c001f9ef:	53                   	push   ebx
c001f9f0:	e8 5f a0 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f9f5:	c7 04 24 52 63 02 c0 	mov    DWORD PTR [esp],0xc0026352
c001f9fc:	e8 b8 d8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001fa01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fa04:	53                   	push   ebx
c001fa05:	57                   	push   edi
c001fa06:	6a 00                	push   0x0
c001fa08:	55                   	push   ebp
c001fa09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa0c:	83 c4 14             	add    esp,0x14
c001fa0f:	68 59 63 02 c0       	push   0xc0026359
c001fa14:	e8 a0 d8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001fa19:	83 c4 10             	add    esp,0x10
c001fa1c:	83 ec 0c             	sub    esp,0xc
c001fa1f:	47                   	inc    edi
c001fa20:	68 60 63 02 c0       	push   0xc0026360
c001fa25:	e8 8f d8 fe ff       	call   c000d2b9 <KeSetBootMessage(char const*)>
c001fa2a:	83 c4 10             	add    esp,0x10
c001fa2d:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001fa31:	74 0c                	je     c001fa3f <IDE::detect()+0x455>
c001fa33:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001fa3a:	e9 10 fc ff ff       	jmp    c001f64f <IDE::detect()+0x65>
c001fa3f:	4e                   	dec    esi
c001fa40:	74 0a                	je     c001fa4c <IDE::detect()+0x462>
c001fa42:	be 01 00 00 00       	mov    esi,0x1
c001fa47:	e9 ec fb ff ff       	jmp    c001f638 <IDE::detect()+0x4e>
c001fa4c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fa52:	5b                   	pop    ebx
c001fa53:	5e                   	pop    esi
c001fa54:	5f                   	pop    edi
c001fa55:	5d                   	pop    ebp
c001fa56:	c3                   	ret    
c001fa57:	90                   	nop

c001fa58 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001fa58:	55                   	push   ebp
c001fa59:	57                   	push   edi
c001fa5a:	56                   	push   esi
c001fa5b:	53                   	push   ebx
c001fa5c:	83 ec 1c             	sub    esp,0x1c
c001fa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fa63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa6b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fa73:	88 c3                	mov    bl,al
c001fa75:	25 ff 00 00 00       	and    eax,0xff
c001fa7a:	0f 84 88 00 00 00    	je     c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	89 c7                	mov    edi,eax
c001fa85:	68 64 63 02 c0       	push   0xc0026364
c001fa8a:	e8 ed 74 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	83 ff 01             	cmp    edi,0x1
c001fa95:	74 6b                	je     c001fb02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001fa97:	83 ff 02             	cmp    edi,0x2
c001fa9a:	75 58                	jne    c001faf4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001fa9c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001faa1:	01 ff                	add    edi,edi
c001faa3:	50                   	push   eax
c001faa4:	09 fe                	or     esi,edi
c001faa6:	6a 01                	push   0x1
c001faa8:	89 f0                	mov    eax,esi
c001faaa:	0f b6 f0             	movzx  esi,al
c001faad:	c1 e6 06             	shl    esi,0x6
c001fab0:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001fab8:	50                   	push   eax
c001fab9:	55                   	push   ebp
c001faba:	e8 6d f3 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	a8 01                	test   al,0x1
c001fac4:	74 02                	je     c001fac8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001fac6:	b3 07                	mov    bl,0x7
c001fac8:	a8 02                	test   al,0x2
c001faca:	74 02                	je     c001face <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001facc:	b3 03                	mov    bl,0x3
c001face:	a8 04                	test   al,0x4
c001fad0:	74 02                	je     c001fad4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001fad2:	b3 14                	mov    bl,0x14
c001fad4:	a8 08                	test   al,0x8
c001fad6:	74 02                	je     c001fada <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001fad8:	b3 03                	mov    bl,0x3
c001fada:	a8 10                	test   al,0x10
c001fadc:	74 02                	je     c001fae0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001fade:	b3 15                	mov    bl,0x15
c001fae0:	a8 20                	test   al,0x20
c001fae2:	74 02                	je     c001fae6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001fae4:	b3 03                	mov    bl,0x3
c001fae6:	a8 40                	test   al,0x40
c001fae8:	74 02                	je     c001faec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001faea:	b3 16                	mov    bl,0x16
c001faec:	a8 80                	test   al,0x80
c001faee:	74 18                	je     c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001faf0:	b3 0d                	mov    bl,0xd
c001faf2:	eb 14                	jmp    c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001faf4:	83 ff 03             	cmp    edi,0x3
c001faf7:	74 0d                	je     c001fb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001faf9:	83 ff 04             	cmp    edi,0x4
c001fafc:	75 0a                	jne    c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fafe:	b3 08                	mov    bl,0x8
c001fb00:	eb 06                	jmp    c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fb02:	b3 13                	mov    bl,0x13
c001fb04:	eb 02                	jmp    c001fb08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fb06:	b3 17                	mov    bl,0x17
c001fb08:	83 c4 1c             	add    esp,0x1c
c001fb0b:	88 d8                	mov    al,bl
c001fb0d:	5b                   	pop    ebx
c001fb0e:	5e                   	pop    esi
c001fb0f:	5f                   	pop    edi
c001fb10:	5d                   	pop    ebp
c001fb11:	c3                   	ret    

c001fb12 <IDE::polling(unsigned char, unsigned int)>:
c001fb12:	57                   	push   edi
c001fb13:	56                   	push   esi
c001fb14:	53                   	push   ebx
c001fb15:	bb 04 00 00 00       	mov    ebx,0x4
c001fb1a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001fb1e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001fb23:	52                   	push   edx
c001fb24:	6a 0c                	push   0xc
c001fb26:	56                   	push   esi
c001fb27:	57                   	push   edi
c001fb28:	e8 ff f2 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001fb2d:	83 c4 10             	add    esp,0x10
c001fb30:	4b                   	dec    ebx
c001fb31:	75 f0                	jne    c001fb23 <IDE::polling(unsigned char, unsigned int)+0x11>
c001fb33:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fb38:	50                   	push   eax
c001fb39:	6a 0c                	push   0xc
c001fb3b:	56                   	push   esi
c001fb3c:	57                   	push   edi
c001fb3d:	e8 ea f2 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001fb42:	83 c4 10             	add    esp,0x10
c001fb45:	a8 01                	test   al,0x1
c001fb47:	75 17                	jne    c001fb60 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fb49:	a8 20                	test   al,0x20
c001fb4b:	75 0f                	jne    c001fb5c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001fb4d:	4b                   	dec    ebx
c001fb4e:	74 10                	je     c001fb60 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fb50:	a8 80                	test   al,0x80
c001fb52:	75 e4                	jne    c001fb38 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fb54:	a8 08                	test   al,0x8
c001fb56:	74 e0                	je     c001fb38 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fb58:	31 c0                	xor    eax,eax
c001fb5a:	eb 06                	jmp    c001fb62 <IDE::polling(unsigned char, unsigned int)+0x50>
c001fb5c:	b0 01                	mov    al,0x1
c001fb5e:	eb 02                	jmp    c001fb62 <IDE::polling(unsigned char, unsigned int)+0x50>
c001fb60:	b0 02                	mov    al,0x2
c001fb62:	5b                   	pop    ebx
c001fb63:	5e                   	pop    esi
c001fb64:	5f                   	pop    edi
c001fb65:	c3                   	ret    

c001fb66 <SATABus::close(int, int, void*)>:
c001fb66:	31 c0                	xor    eax,eax
c001fb68:	c3                   	ret    
c001fb69:	90                   	nop

c001fb6a <SATABus::detect()>:
c001fb6a:	c3                   	ret    
c001fb6b:	90                   	nop

c001fb6c <SATABus::SATABus()>:
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb73:	83 ec 08             	sub    esp,0x8
c001fb76:	68 9c 63 02 c0       	push   0xc002639c
c001fb7b:	50                   	push   eax
c001fb7c:	e8 2b a2 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	ba c8 63 02 c0       	mov    edx,0xc00263c8
c001fb89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8d:	89 10                	mov    DWORD PTR [eax],edx
c001fb8f:	83 ec 0c             	sub    esp,0xc
c001fb92:	6a 50                	push   0x50
c001fb94:	e8 e2 03 ff ff       	call   c000ff7b <Phys::allocateContiguousPages(int)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	89 c2                	mov    edx,eax
c001fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	6a 50                	push   0x50
c001fbad:	e8 85 36 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c001fbb2:	83 c4 10             	add    esp,0x10
c001fbb5:	89 c2                	mov    edx,eax
c001fbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fbc1:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001fbc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fbca:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001fbd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fbd4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fbda:	83 ec 0c             	sub    esp,0xc
c001fbdd:	6a 03                	push   0x3
c001fbdf:	6a 50                	push   0x50
c001fbe1:	51                   	push   ecx
c001fbe2:	52                   	push   edx
c001fbe3:	50                   	push   eax
c001fbe4:	e8 1b 3f ff ff       	call   c0013b04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001fbe9:	83 c4 20             	add    esp,0x20
c001fbec:	90                   	nop
c001fbed:	83 c4 0c             	add    esp,0xc
c001fbf0:	c3                   	ret    
c001fbf1:	90                   	nop

c001fbf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001fbf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbf6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001fbf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001fbfc:	09 c2                	or     edx,eax
c001fbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fc08:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fc0a:	31 c0                	xor    eax,eax
c001fc0c:	c1 e9 08             	shr    ecx,0x8
c001fc0f:	83 e1 0f             	and    ecx,0xf
c001fc12:	39 c8                	cmp    eax,ecx
c001fc14:	74 0a                	je     c001fc20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001fc16:	f6 c2 01             	test   dl,0x1
c001fc19:	74 08                	je     c001fc23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001fc1b:	d1 ea                	shr    edx,1
c001fc1d:	40                   	inc    eax
c001fc1e:	eb f2                	jmp    c001fc12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001fc20:	83 c8 ff             	or     eax,0xffffffff
c001fc23:	c3                   	ret    

c001fc24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001fc24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc28:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001fc2b:	89 c2                	mov    edx,eax
c001fc2d:	c1 ea 08             	shr    edx,0x8
c001fc30:	83 e2 0f             	and    edx,0xf
c001fc33:	4a                   	dec    edx
c001fc34:	75 32                	jne    c001fc68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fc36:	83 e0 0f             	and    eax,0xf
c001fc39:	83 f8 03             	cmp    eax,0x3
c001fc3c:	75 2a                	jne    c001fc68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fc3e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fc41:	b8 02 00 00 00       	mov    eax,0x2
c001fc46:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fc4c:	74 1c                	je     c001fc6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fc4e:	b8 04 00 00 00       	mov    eax,0x4
c001fc53:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fc59:	74 0f                	je     c001fc6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fc5b:	31 c0                	xor    eax,eax
c001fc5d:	83 fa 03             	cmp    edx,0x3
c001fc60:	0f 94 c0             	sete   al
c001fc63:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001fc67:	c3                   	ret    
c001fc68:	31 c0                	xor    eax,eax
c001fc6a:	c3                   	ret    
c001fc6b:	90                   	nop

c001fc6c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001fc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc73:	0f ba e2 0f          	bt     edx,0xf
c001fc77:	72 f7                	jb     c001fc70 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fc79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc7c:	83 ca 10             	or     edx,0x10
c001fc7f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fc82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc85:	83 ca 01             	or     edx,0x1
c001fc88:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fc8b:	c3                   	ret    

c001fc8c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fc8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc93:	83 e2 fe             	and    edx,0xfffffffe
c001fc96:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fc99:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc9c:	83 e2 ef             	and    edx,0xffffffef
c001fc9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fca2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fca5:	0f ba e2 0e          	bt     edx,0xe
c001fca9:	72 f7                	jb     c001fca2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fcab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fcae:	0f ba e2 0f          	bt     edx,0xf
c001fcb2:	72 ee                	jb     c001fca2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fcb4:	c3                   	ret    
c001fcb5:	90                   	nop

c001fcb6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fcb6:	55                   	push   ebp
c001fcb7:	57                   	push   edi
c001fcb8:	56                   	push   esi
c001fcb9:	53                   	push   ebx
c001fcba:	83 ec 1c             	sub    esp,0x1c
c001fcbd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fcc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fcc5:	53                   	push   ebx
c001fcc6:	56                   	push   esi
c001fcc7:	e8 c0 ff ff ff       	call   c001fc8c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fccc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fcd0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	c1 e5 0a             	shl    ebp,0xa
c001fcdc:	01 e8                	add    eax,ebp
c001fcde:	89 03                	mov    DWORD PTR [ebx],eax
c001fce0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fce2:	68 00 04 00 00       	push   0x400
c001fce7:	6a 00                	push   0x0
c001fce9:	50                   	push   eax
c001fcea:	e8 01 08 fe ff       	call   c00004f0 <memset>
c001fcef:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fcf5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fcf9:	01 e8                	add    eax,ebp
c001fcfb:	83 c4 1c             	add    esp,0x1c
c001fcfe:	89 03                	mov    DWORD PTR [ebx],eax
c001fd00:	c1 e2 08             	shl    edx,0x8
c001fd03:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fd0a:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001fd10:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fd16:	01 f8                	add    eax,edi
c001fd18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fd1b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fd1e:	68 00 01 00 00       	push   0x100
c001fd23:	6a 00                	push   0x0
c001fd25:	50                   	push   eax
c001fd26:	e8 c5 07 fe ff       	call   c00004f0 <memset>
c001fd2b:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001fd31:	01 fa                	add    edx,edi
c001fd33:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fd37:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fd3a:	c1 e7 0d             	shl    edi,0xd
c001fd3d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fd44:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fd4a:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fd50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd54:	31 ff                	xor    edi,edi
c001fd56:	83 c4 10             	add    esp,0x10
c001fd59:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fd5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd63:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fd69:	83 c5 20             	add    ebp,0x20
c001fd6c:	01 f8                	add    eax,edi
c001fd6e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fd71:	52                   	push   edx
c001fd72:	68 00 01 00 00       	push   0x100
c001fd77:	6a 00                	push   0x0
c001fd79:	50                   	push   eax
c001fd7a:	e8 71 07 fe ff       	call   c00004f0 <memset>
c001fd7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fd8c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fd93:	01 f8                	add    eax,edi
c001fd95:	81 c7 00 01 00 00    	add    edi,0x100
c001fd9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fd9e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fda4:	75 b3                	jne    c001fd59 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001fda6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fdad:	50                   	push   eax
c001fdae:	50                   	push   eax
c001fdaf:	53                   	push   ebx
c001fdb0:	56                   	push   esi
c001fdb1:	e8 b6 fe ff ff       	call   c001fc6c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fdb6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fdbd:	83 c4 2c             	add    esp,0x2c
c001fdc0:	5b                   	pop    ebx
c001fdc1:	5e                   	pop    esi
c001fdc2:	5f                   	pop    edi
c001fdc3:	5d                   	pop    ebp
c001fdc4:	c3                   	ret    
c001fdc5:	90                   	nop

c001fdc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fdc6:	55                   	push   ebp
c001fdc7:	57                   	push   edi
c001fdc8:	56                   	push   esi
c001fdc9:	53                   	push   ebx
c001fdca:	31 db                	xor    ebx,ebx
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fdd3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fdd7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fdda:	f7 c7 01 00 00 00    	test   edi,0x1
c001fde0:	74 7a                	je     c001fe5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fde2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fde6:	89 d8                	mov    eax,ebx
c001fde8:	c1 e0 07             	shl    eax,0x7
c001fdeb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fdf2:	55                   	push   ebp
c001fdf3:	56                   	push   esi
c001fdf4:	e8 2b fe ff ff       	call   c001fc24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fdf9:	5a                   	pop    edx
c001fdfa:	83 f8 01             	cmp    eax,0x1
c001fdfd:	59                   	pop    ecx
c001fdfe:	75 21                	jne    c001fe21 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fe00:	50                   	push   eax
c001fe01:	53                   	push   ebx
c001fe02:	55                   	push   ebp
c001fe03:	56                   	push   esi
c001fe04:	e8 ad fe ff ff       	call   c001fcb6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fe09:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fe10:	e8 36 fa fe ff       	call   c000f84b <malloc>
c001fe15:	89 c5                	mov    ebp,eax
c001fe17:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe1a:	e8 25 0f 00 00       	call   c0020d44 <SATA::SATA()>
c001fe1f:	eb 24                	jmp    c001fe45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fe21:	83 f8 04             	cmp    eax,0x4
c001fe24:	75 36                	jne    c001fe5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fe26:	51                   	push   ecx
c001fe27:	53                   	push   ebx
c001fe28:	55                   	push   ebp
c001fe29:	56                   	push   esi
c001fe2a:	e8 87 fe ff ff       	call   c001fcb6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fe2f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fe36:	e8 10 fa fe ff       	call   c000f84b <malloc>
c001fe3b:	89 c5                	mov    ebp,eax
c001fe3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe40:	e8 97 12 00 00       	call   c00210dc <SATAPI::SATAPI()>
c001fe45:	58                   	pop    eax
c001fe46:	5a                   	pop    edx
c001fe47:	55                   	push   ebp
c001fe48:	56                   	push   esi
c001fe49:	e8 06 9c fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fe4e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fe51:	56                   	push   esi
c001fe52:	6a 00                	push   0x0
c001fe54:	53                   	push   ebx
c001fe55:	55                   	push   ebp
c001fe56:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fe59:	83 c4 20             	add    esp,0x20
c001fe5c:	d1 ef                	shr    edi,1
c001fe5e:	43                   	inc    ebx
c001fe5f:	83 fb 20             	cmp    ebx,0x20
c001fe62:	0f 85 72 ff ff ff    	jne    c001fdda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fe68:	83 c4 0c             	add    esp,0xc
c001fe6b:	5b                   	pop    ebx
c001fe6c:	5e                   	pop    esi
c001fe6d:	5f                   	pop    edi
c001fe6e:	5d                   	pop    ebp
c001fe6f:	c3                   	ret    

c001fe70 <SATABus::open(int, int, void*)>:
c001fe70:	53                   	push   ebx
c001fe71:	83 ec 08             	sub    esp,0x8
c001fe74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe78:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fe7e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fe84:	e8 8b 66 ff ff       	call   c0016514 <KeDisablePreemption()>
c001fe89:	52                   	push   edx
c001fe8a:	52                   	push   edx
c001fe8b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fe91:	53                   	push   ebx
c001fe92:	e8 2f ff ff ff       	call   c001fdc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fe97:	e8 a0 66 ff ff       	call   c001653c <KeRestorePreemption()>
c001fe9c:	31 c0                	xor    eax,eax
c001fe9e:	83 c4 18             	add    esp,0x18
c001fea1:	5b                   	pop    ebx
c001fea2:	c3                   	ret    
c001fea3:	90                   	nop

c001fea4 <ATA::close(int, int, void*)>:
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001feb1:	85 c0                	test   eax,eax
c001feb3:	74 0c                	je     c001fec1 <ATA::close(int, int, void*)+0x1d>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	8b 10                	mov    edx,DWORD PTR [eax]
c001feba:	50                   	push   eax
c001febb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	31 c0                	xor    eax,eax
c001fec3:	83 c4 0c             	add    esp,0xc
c001fec6:	c3                   	ret    
c001fec7:	90                   	nop

c001fec8 <ATA::powerSaving(PowerSavingLevel)>:
c001fec8:	c3                   	ret    
c001fec9:	90                   	nop

c001feca <ATA::ATA()>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed1:	83 ec 04             	sub    esp,0x4
c001fed4:	68 00 02 00 00       	push   0x200
c001fed9:	68 49 65 02 c0       	push   0xc0026549
c001fede:	50                   	push   eax
c001fedf:	e8 52 9f fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fee4:	83 c4 10             	add    esp,0x10
c001fee7:	ba b0 64 02 c0       	mov    edx,0xc00264b0
c001feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef0:	89 10                	mov    DWORD PTR [eax],edx
c001fef2:	90                   	nop
c001fef3:	83 c4 0c             	add    esp,0xc
c001fef6:	c3                   	ret    
c001fef7:	90                   	nop

c001fef8 <ATA::flush(bool)>:
c001fef8:	53                   	push   ebx
c001fef9:	83 ec 08             	sub    esp,0x8
c001fefc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ff05:	83 f8 01             	cmp    eax,0x1
c001ff08:	19 c0                	sbb    eax,eax
c001ff0a:	83 e0 fd             	and    eax,0xfffffffd
c001ff0d:	05 ea 00 00 00       	add    eax,0xea
c001ff12:	50                   	push   eax
c001ff13:	6a 07                	push   0x7
c001ff15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff1c:	50                   	push   eax
c001ff1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff23:	e8 44 ee ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff28:	83 c4 0c             	add    esp,0xc
c001ff2b:	6a 00                	push   0x0
c001ff2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff34:	50                   	push   eax
c001ff35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff3b:	e8 d2 fb ff ff       	call   c001fb12 <IDE::polling(unsigned char, unsigned int)>
c001ff40:	83 c4 18             	add    esp,0x18
c001ff43:	5b                   	pop    ebx
c001ff44:	c3                   	ret    
c001ff45:	90                   	nop

c001ff46 <ATA::readyForCommand()>:
c001ff46:	56                   	push   esi
c001ff47:	53                   	push   ebx
c001ff48:	31 db                	xor    ebx,ebx
c001ff4a:	50                   	push   eax
c001ff4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff4f:	50                   	push   eax
c001ff50:	6a 0c                	push   0xc
c001ff52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ff59:	50                   	push   eax
c001ff5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ff60:	e8 c7 ee ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c001ff65:	83 c4 10             	add    esp,0x10
c001ff68:	a8 88                	test   al,0x88
c001ff6a:	74 20                	je     c001ff8c <ATA::readyForCommand()+0x46>
c001ff6c:	43                   	inc    ebx
c001ff6d:	83 fb 63             	cmp    ebx,0x63
c001ff70:	7e dd                	jle    c001ff4f <ATA::readyForCommand()+0x9>
c001ff72:	51                   	push   ecx
c001ff73:	51                   	push   ecx
c001ff74:	6a 00                	push   0x0
c001ff76:	6a 0a                	push   0xa
c001ff78:	e8 9f 6a ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c001ff7d:	83 c4 10             	add    esp,0x10
c001ff80:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ff86:	75 c7                	jne    c001ff4f <ATA::readyForCommand()+0x9>
c001ff88:	31 c0                	xor    eax,eax
c001ff8a:	eb 02                	jmp    c001ff8e <ATA::readyForCommand()+0x48>
c001ff8c:	b0 01                	mov    al,0x1
c001ff8e:	5a                   	pop    edx
c001ff8f:	5b                   	pop    ebx
c001ff90:	5e                   	pop    esi
c001ff91:	c3                   	ret    

c001ff92 <ATA::access(unsigned long long, int, void*, bool)>:
c001ff92:	55                   	push   ebp
c001ff93:	57                   	push   edi
c001ff94:	56                   	push   esi
c001ff95:	53                   	push   ebx
c001ff96:	83 ec 2c             	sub    esp,0x2c
c001ff99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ff9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ffa1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ffa5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ffa9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ffad:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ffb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ffb5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ffbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffbf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ffc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ffc9:	c1 e0 06             	shl    eax,0x6
c001ffcc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ffd4:	74 5d                	je     c0020033 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ffd6:	89 fa                	mov    edx,edi
c001ffd8:	89 f0                	mov    eax,esi
c001ffda:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ffde:	c1 ea 1c             	shr    edx,0x1c
c001ffe1:	89 d1                	mov    ecx,edx
c001ffe3:	09 c1                	or     ecx,eax
c001ffe5:	74 25                	je     c002000c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ffe7:	31 ed                	xor    ebp,ebp
c001ffe9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fff0:	89 fa                	mov    edx,edi
c001fff2:	89 f0                	mov    eax,esi
c001fff4:	0f ad d0             	shrd   eax,edx,cl
c001fff7:	d3 ea                	shr    edx,cl
c001fff9:	f6 c1 20             	test   cl,0x20
c001fffc:	74 02                	je     c0020000 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fffe:	89 d0                	mov    eax,edx
c0020000:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0020004:	45                   	inc    ebp
c0020005:	83 fd 06             	cmp    ebp,0x6
c0020008:	75 df                	jne    c001ffe9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002000a:	eb 76                	jmp    c0020082 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002000c:	89 f0                	mov    eax,esi
c002000e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0020013:	89 fa                	mov    edx,edi
c0020015:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002001c:	0f ac d0 10          	shrd   eax,edx,0x10
c0020020:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020025:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020029:	c1 ee 18             	shr    esi,0x18
c002002c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0020031:	eb 56                	jmp    c0020089 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0020033:	6a 00                	push   0x0
c0020035:	6a 3f                	push   0x3f
c0020037:	57                   	push   edi
c0020038:	56                   	push   esi
c0020039:	e8 b6 20 00 00       	call   c00220f4 <__umoddi3>
c002003e:	83 c4 10             	add    esp,0x10
c0020041:	40                   	inc    eax
c0020042:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0020046:	6a 00                	push   0x0
c0020048:	68 f0 03 00 00       	push   0x3f0
c002004d:	57                   	push   edi
c002004e:	56                   	push   esi
c002004f:	e8 a0 1f 00 00       	call   c0021ff4 <__udivdi3>
c0020054:	83 c4 10             	add    esp,0x10
c0020057:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002005c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020063:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020068:	6a 00                	push   0x0
c002006a:	6a 3f                	push   0x3f
c002006c:	57                   	push   edi
c002006d:	56                   	push   esi
c002006e:	e8 81 1f 00 00       	call   c0021ff4 <__udivdi3>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	83 e0 0f             	and    eax,0xf
c0020079:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002007e:	89 c6                	mov    esi,eax
c0020080:	eb 07                	jmp    c0020089 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0020082:	31 f6                	xor    esi,esi
c0020084:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0020089:	55                   	push   ebp
c002008a:	6a 00                	push   0x0
c002008c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020093:	50                   	push   eax
c0020094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020098:	e8 d9 ee ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c002009d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200a0:	e8 a1 fe ff ff       	call   c001ff46 <ATA::readyForCommand()>
c00200a5:	83 c4 10             	add    esp,0x10
c00200a8:	84 c0                	test   al,al
c00200aa:	75 0a                	jne    c00200b6 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c00200ac:	be 01 00 00 00       	mov    esi,0x1
c00200b1:	e9 c2 02 00 00       	jmp    c0020378 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c00200b6:	fa                   	cli    
c00200b7:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c00200bd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00200c3:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c00200c8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00200ce:	75 0a                	jne    c00200da <ATA::access(unsigned long long, int, void*, bool)+0x148>
c00200d0:	c1 e0 04             	shl    eax,0x4
c00200d3:	09 c6                	or     esi,eax
c00200d5:	83 ce a0             	or     esi,0xffffffa0
c00200d8:	eb 08                	jmp    c00200e2 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c00200da:	c1 e0 04             	shl    eax,0x4
c00200dd:	09 c6                	or     esi,eax
c00200df:	83 ce e0             	or     esi,0xffffffe0
c00200e2:	89 f0                	mov    eax,esi
c00200e4:	0f b6 d2             	movzx  edx,dl
c00200e7:	0f b6 f0             	movzx  esi,al
c00200ea:	56                   	push   esi
c00200eb:	6a 06                	push   0x6
c00200ed:	52                   	push   edx
c00200ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200f4:	e8 73 ec ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f9:	83 c4 10             	add    esp,0x10
c00200fc:	6a 00                	push   0x0
c00200fe:	6a 01                	push   0x1
c0020100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020107:	50                   	push   eax
c0020108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002010e:	e8 59 ec ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002011b:	83 f8 02             	cmp    eax,0x2
c002011e:	75 6e                	jne    c002018e <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c0020120:	6a 00                	push   0x0
c0020122:	6a 08                	push   0x8
c0020124:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002012b:	50                   	push   eax
c002012c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020132:	e8 35 ec ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020137:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002013c:	50                   	push   eax
c002013d:	6a 09                	push   0x9
c002013f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020146:	50                   	push   eax
c0020147:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002014d:	e8 1a ec ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020152:	83 c4 20             	add    esp,0x20
c0020155:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002015a:	50                   	push   eax
c002015b:	6a 0a                	push   0xa
c002015d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020164:	50                   	push   eax
c0020165:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002016b:	e8 fc eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020170:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020175:	50                   	push   eax
c0020176:	6a 0b                	push   0xb
c0020178:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002017f:	50                   	push   eax
c0020180:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020186:	e8 e1 eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002018b:	83 c4 20             	add    esp,0x20
c002018e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020193:	50                   	push   eax
c0020194:	6a 02                	push   0x2
c0020196:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002019d:	50                   	push   eax
c002019e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201a4:	e8 c3 eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201a9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00201ae:	50                   	push   eax
c00201af:	6a 03                	push   0x3
c00201b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201b8:	50                   	push   eax
c00201b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201bf:	e8 a8 eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201c4:	83 c4 20             	add    esp,0x20
c00201c7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00201cc:	50                   	push   eax
c00201cd:	6a 04                	push   0x4
c00201cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201d6:	50                   	push   eax
c00201d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201dd:	e8 8a eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201e2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00201e7:	50                   	push   eax
c00201e8:	6a 05                	push   0x5
c00201ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201f1:	50                   	push   eax
c00201f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201f8:	e8 6f eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201fd:	83 c4 20             	add    esp,0x20
c0020200:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020205:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002020a:	74 13                	je     c002021f <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c002020c:	83 f8 02             	cmp    eax,0x2
c002020f:	74 20                	je     c0020231 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c0020211:	48                   	dec    eax
c0020212:	0f 85 94 fe ff ff    	jne    c00200ac <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0020218:	b8 30 00 00 00       	mov    eax,0x30
c002021d:	eb 1e                	jmp    c002023d <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c002021f:	83 f8 02             	cmp    eax,0x2
c0020222:	74 14                	je     c0020238 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c0020224:	48                   	dec    eax
c0020225:	b8 20 00 00 00       	mov    eax,0x20
c002022a:	74 11                	je     c002023d <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c002022c:	e9 7b fe ff ff       	jmp    c00200ac <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0020231:	b8 34 00 00 00       	mov    eax,0x34
c0020236:	eb 05                	jmp    c002023d <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0020238:	b8 24 00 00 00       	mov    eax,0x24
c002023d:	50                   	push   eax
c002023e:	6a 07                	push   0x7
c0020240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020247:	50                   	push   eax
c0020248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002024e:	e8 19 eb ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020253:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0020264:	75 01                	jne    c0020267 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c0020266:	fb                   	sti    
c0020267:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002026b:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c0020270:	85 f6                	test   esi,esi
c0020272:	0f 84 dd 00 00 00    	je     c0020355 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020278:	57                   	push   edi
c0020279:	6a 01                	push   0x1
c002027b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020282:	50                   	push   eax
c0020283:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020289:	e8 84 f8 ff ff       	call   c001fb12 <IDE::polling(unsigned char, unsigned int)>
c002028e:	83 c4 10             	add    esp,0x10
c0020291:	0f b6 c0             	movzx  eax,al
c0020294:	85 c0                	test   eax,eax
c0020296:	74 23                	je     c00202bb <ATA::access(unsigned long long, int, void*, bool)+0x329>
c0020298:	50                   	push   eax
c0020299:	89 c6                	mov    esi,eax
c002029b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00202a2:	50                   	push   eax
c00202a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202aa:	50                   	push   eax
c00202ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202b1:	e8 a2 f7 ff ff       	call   c001fa58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00202b6:	e9 ba 00 00 00       	jmp    c0020375 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c00202bb:	85 ed                	test   ebp,ebp
c00202bd:	74 49                	je     c0020308 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c00202bf:	fa                   	cli    
c00202c0:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c00202c6:	31 c9                	xor    ecx,ecx
c00202c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00202cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202d0:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c00202d4:	51                   	push   ecx
c00202d5:	51                   	push   ecx
c00202d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202dd:	50                   	push   eax
c00202de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202e4:	e8 71 ea ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c00202e9:	89 c2                	mov    edx,eax
c00202eb:	89 f8                	mov    eax,edi
c00202ed:	66 ef                	out    dx,ax
c00202ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	41                   	inc    ecx
c00202f7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00202fd:	75 c9                	jne    c00202c8 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c00202ff:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020306:	eb 35                	jmp    c002033d <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0020308:	fa                   	cli    
c0020309:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c002030f:	52                   	push   edx
c0020310:	52                   	push   edx
c0020311:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020318:	50                   	push   eax
c0020319:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002031f:	e8 36 ea ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c0020324:	b9 00 01 00 00       	mov    ecx,0x100
c0020329:	89 c2                	mov    edx,eax
c002032b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002032f:	fc                   	cld    
c0020330:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020333:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c002033a:	83 c4 10             	add    esp,0x10
c002033d:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0020344:	75 01                	jne    c0020347 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c0020346:	fb                   	sti    
c0020347:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002034f:	4e                   	dec    esi
c0020350:	e9 1b ff ff ff       	jmp    c0020270 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c0020355:	31 f6                	xor    esi,esi
c0020357:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002035c:	74 1a                	je     c0020378 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c002035e:	50                   	push   eax
c002035f:	50                   	push   eax
c0020360:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0020365:	83 f8 02             	cmp    eax,0x2
c0020368:	0f 94 c0             	sete   al
c002036b:	0f b6 c0             	movzx  eax,al
c002036e:	50                   	push   eax
c002036f:	53                   	push   ebx
c0020370:	e8 83 fb ff ff       	call   c001fef8 <ATA::flush(bool)>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	83 c4 2c             	add    esp,0x2c
c002037b:	89 f0                	mov    eax,esi
c002037d:	5b                   	pop    ebx
c002037e:	5e                   	pop    esi
c002037f:	5f                   	pop    edi
c0020380:	5d                   	pop    ebp
c0020381:	c3                   	ret    

c0020382 <ATA::read(unsigned long long, int, void*)>:
c0020382:	57                   	push   edi
c0020383:	b8 04 00 00 00       	mov    eax,0x4
c0020388:	56                   	push   esi
c0020389:	53                   	push   ebx
c002038a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002038e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020392:	8d 7a ff             	lea    edi,[edx-0x1]
c0020395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020399:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002039d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00203a3:	77 25                	ja     c00203ca <ATA::read(unsigned long long, int, void*)+0x48>
c00203a5:	b8 06 00 00 00       	mov    eax,0x6
c00203aa:	85 f6                	test   esi,esi
c00203ac:	74 1c                	je     c00203ca <ATA::read(unsigned long long, int, void*)+0x48>
c00203ae:	50                   	push   eax
c00203af:	50                   	push   eax
c00203b0:	6a 00                	push   0x0
c00203b2:	56                   	push   esi
c00203b3:	52                   	push   edx
c00203b4:	53                   	push   ebx
c00203b5:	51                   	push   ecx
c00203b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00203ba:	e8 d3 fb ff ff       	call   c001ff92 <ATA::access(unsigned long long, int, void*, bool)>
c00203bf:	83 c4 20             	add    esp,0x20
c00203c2:	85 c0                	test   eax,eax
c00203c4:	0f 95 c0             	setne  al
c00203c7:	0f b6 c0             	movzx  eax,al
c00203ca:	5b                   	pop    ebx
c00203cb:	5e                   	pop    esi
c00203cc:	5f                   	pop    edi
c00203cd:	c3                   	ret    

c00203ce <ATA::write(unsigned long long, int, void*)>:
c00203ce:	57                   	push   edi
c00203cf:	b8 04 00 00 00       	mov    eax,0x4
c00203d4:	56                   	push   esi
c00203d5:	53                   	push   ebx
c00203d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00203da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00203de:	8d 7a ff             	lea    edi,[edx-0x1]
c00203e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00203e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00203e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00203ef:	77 25                	ja     c0020416 <ATA::write(unsigned long long, int, void*)+0x48>
c00203f1:	b8 06 00 00 00       	mov    eax,0x6
c00203f6:	85 f6                	test   esi,esi
c00203f8:	74 1c                	je     c0020416 <ATA::write(unsigned long long, int, void*)+0x48>
c00203fa:	50                   	push   eax
c00203fb:	50                   	push   eax
c00203fc:	6a 01                	push   0x1
c00203fe:	56                   	push   esi
c00203ff:	52                   	push   edx
c0020400:	53                   	push   ebx
c0020401:	51                   	push   ecx
c0020402:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020406:	e8 87 fb ff ff       	call   c001ff92 <ATA::access(unsigned long long, int, void*, bool)>
c002040b:	83 c4 20             	add    esp,0x20
c002040e:	85 c0                	test   eax,eax
c0020410:	0f 95 c0             	setne  al
c0020413:	0f b6 c0             	movzx  eax,al
c0020416:	5b                   	pop    ebx
c0020417:	5e                   	pop    esi
c0020418:	5f                   	pop    edi
c0020419:	c3                   	ret    

c002041a <ATA::detectCHS()>:
c002041a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002041e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020424:	c1 e0 06             	shl    eax,0x6
c0020427:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002042d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020437:	c7 44 24 04 ec 63 02 c0 	mov    DWORD PTR [esp+0x4],0xc00263ec
c002043f:	e9 5c f8 fe ff       	jmp    c000fca0 <KePanic(char const*)>

c0020444 <ATA::open(int, int, void*)>:
c0020444:	53                   	push   ebx
c0020445:	83 ec 08             	sub    esp,0x8
c0020448:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002044c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020454:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002045a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020460:	c1 e0 06             	shl    eax,0x6
c0020463:	01 d0                	add    eax,edx
c0020465:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002046c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020472:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020479:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020483:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020489:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020490:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020497:	75 0c                	jne    c00204a5 <ATA::open(int, int, void*)+0x61>
c0020499:	83 ec 0c             	sub    esp,0xc
c002049c:	53                   	push   ebx
c002049d:	e8 78 ff ff ff       	call   c002041a <ATA::detectCHS()>
c00204a2:	83 c4 10             	add    esp,0x10
c00204a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00204ab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00204b1:	c1 e0 06             	shl    eax,0x6
c00204b4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00204bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00204c5:	d1 e8                	shr    eax,1
c00204c7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00204cd:	6a 04                	push   0x4
c00204cf:	6a 0c                	push   0xc
c00204d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204d8:	50                   	push   eax
c00204d9:	52                   	push   edx
c00204da:	e8 8d e8 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204df:	90                   	nop
c00204e0:	90                   	nop
c00204e1:	6a 00                	push   0x0
c00204e3:	6a 0c                	push   0xc
c00204e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204ec:	50                   	push   eax
c00204ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204f3:	e8 74 e8 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204f8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00204fe:	83 c4 20             	add    esp,0x20
c0020501:	c1 e0 06             	shl    eax,0x6
c0020504:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c002050a:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0020511:	0f 84 00 01 00 00    	je     c0020617 <ATA::open(int, int, void*)+0x1d3>
c0020517:	83 ec 0c             	sub    esp,0xc
c002051a:	6a 08                	push   0x8
c002051c:	e8 5a fa fe ff       	call   c000ff7b <Phys::allocateContiguousPages(int)>
c0020521:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020527:	c7 04 24 fe 63 02 c0 	mov    DWORD PTR [esp],0xc00263fe
c002052e:	e8 49 6a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020533:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002053a:	e8 f8 2c ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c002053f:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020545:	6a 03                	push   0x3
c0020547:	50                   	push   eax
c0020548:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002054e:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020554:	e8 c1 33 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020559:	83 c4 20             	add    esp,0x20
c002055c:	e8 33 f9 fe ff       	call   c000fe94 <Phys::allocatePage()>
c0020561:	83 ec 0c             	sub    esp,0xc
c0020564:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002056a:	6a 01                	push   0x1
c002056c:	e8 c6 2c ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0020571:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0020577:	6a 03                	push   0x3
c0020579:	50                   	push   eax
c002057a:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020580:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020586:	e8 8f 33 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c002058b:	83 c4 14             	add    esp,0x14
c002058e:	68 37 64 02 c0       	push   0xc0026437
c0020593:	e8 e4 69 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020598:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c002059f:	50                   	push   eax
c00205a0:	6a 12                	push   0x12
c00205a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00205a9:	50                   	push   eax
c00205aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00205b0:	e8 b7 e7 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205b5:	83 c4 20             	add    esp,0x20
c00205b8:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00205be:	0f b6 c4             	movzx  eax,ah
c00205c1:	50                   	push   eax
c00205c2:	6a 13                	push   0x13
c00205c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00205cb:	50                   	push   eax
c00205cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00205d2:	e8 95 e7 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205d7:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00205de:	50                   	push   eax
c00205df:	6a 14                	push   0x14
c00205e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00205e8:	50                   	push   eax
c00205e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00205ef:	e8 78 e7 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205f4:	83 c4 20             	add    esp,0x20
c00205f7:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00205fe:	50                   	push   eax
c00205ff:	6a 15                	push   0x15
c0020601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020608:	50                   	push   eax
c0020609:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002060f:	e8 58 e7 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020614:	83 c4 10             	add    esp,0x10
c0020617:	83 ec 0c             	sub    esp,0xc
c002061a:	53                   	push   ebx
c002061b:	e8 7e 98 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020620:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020623:	e8 e2 a6 fe ff       	call   c000ad0a <createPartitionsForDisk(PhysicalDisk*)>
c0020628:	31 c0                	xor    eax,eax
c002062a:	83 c4 18             	add    esp,0x18
c002062d:	5b                   	pop    ebx
c002062e:	c3                   	ret    

c002062f <combineCharAndColour(char, unsigned char)>:
c002062f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020634:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002063a:	c1 e0 08             	shl    eax,0x8
c002063d:	09 d0                	or     eax,edx
c002063f:	c3                   	ret    

c0020640 <combineColours(unsigned char, unsigned char)>:
c0020640:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020645:	c1 e0 04             	shl    eax,0x4
c0020648:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002064c:	c3                   	ret    
c002064d:	90                   	nop

c002064e <ATAPI::write(unsigned long long, int, void*)>:
c002064e:	b8 03 00 00 00       	mov    eax,0x3
c0020653:	c3                   	ret    

c0020654 <ATAPI::close(int, int, void*)>:
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020661:	85 c0                	test   eax,eax
c0020663:	74 0c                	je     c0020671 <ATAPI::close(int, int, void*)+0x1d>
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	8b 10                	mov    edx,DWORD PTR [eax]
c002066a:	50                   	push   eax
c002066b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	31 c0                	xor    eax,eax
c0020673:	83 c4 0c             	add    esp,0xc
c0020676:	c3                   	ret    
c0020677:	90                   	nop

c0020678 <ATAPI::ATAPI()>:
c0020678:	83 ec 0c             	sub    esp,0xc
c002067b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067f:	83 ec 04             	sub    esp,0x4
c0020682:	68 00 08 00 00       	push   0x800
c0020687:	68 e9 65 02 c0       	push   0xc00265e9
c002068c:	50                   	push   eax
c002068d:	e8 a4 97 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020692:	83 c4 10             	add    esp,0x10
c0020695:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	89 10                	mov    DWORD PTR [eax],edx
c00206a0:	90                   	nop
c00206a1:	83 c4 0c             	add    esp,0xc
c00206a4:	c3                   	ret    
c00206a5:	90                   	nop

c00206a6 <ATAPI::readyForCommand()>:
c00206a6:	56                   	push   esi
c00206a7:	53                   	push   ebx
c00206a8:	31 db                	xor    ebx,ebx
c00206aa:	50                   	push   eax
c00206ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00206af:	50                   	push   eax
c00206b0:	6a 0c                	push   0xc
c00206b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00206b9:	50                   	push   eax
c00206ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00206c0:	e8 67 e7 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c00206c5:	83 c4 10             	add    esp,0x10
c00206c8:	a8 88                	test   al,0x88
c00206ca:	74 26                	je     c00206f2 <ATAPI::readyForCommand()+0x4c>
c00206cc:	43                   	inc    ebx
c00206cd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00206d3:	7e da                	jle    c00206af <ATAPI::readyForCommand()+0x9>
c00206d5:	51                   	push   ecx
c00206d6:	51                   	push   ecx
c00206d7:	6a 00                	push   0x0
c00206d9:	68 5e 01 00 00       	push   0x15e
c00206de:	e8 39 63 ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00206ec:	75 c1                	jne    c00206af <ATAPI::readyForCommand()+0x9>
c00206ee:	31 c0                	xor    eax,eax
c00206f0:	eb 02                	jmp    c00206f4 <ATAPI::readyForCommand()+0x4e>
c00206f2:	b0 01                	mov    al,0x1
c00206f4:	5a                   	pop    edx
c00206f5:	5b                   	pop    ebx
c00206f6:	5e                   	pop    esi
c00206f7:	c3                   	ret    

c00206f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00206f8:	55                   	push   ebp
c00206f9:	57                   	push   edi
c00206fa:	56                   	push   esi
c00206fb:	53                   	push   ebx
c00206fc:	83 ec 20             	sub    esp,0x20
c00206ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020703:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020707:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002070b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002070f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020713:	6a 01                	push   0x1
c0020715:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002071c:	50                   	push   eax
c002071d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020723:	e8 4e e8 ff ff       	call   c001ef76 <IDE::enableIRQs(unsigned char, bool)>
c0020728:	5e                   	pop    esi
c0020729:	58                   	pop    eax
c002072a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020731:	50                   	push   eax
c0020732:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020738:	e8 09 e6 ff ff       	call   c001ed46 <IDE::prepareInterrupt(unsigned char)>
c002073d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020740:	e8 61 ff ff ff       	call   c00206a6 <ATAPI::readyForCommand()>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	84 c0                	test   al,al
c002074a:	75 0a                	jne    c0020756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002074c:	bb 01 00 00 00       	mov    ebx,0x1
c0020751:	e9 60 02 00 00       	jmp    c00209b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020756:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002075c:	c1 e0 04             	shl    eax,0x4
c002075f:	0f b6 c0             	movzx  eax,al
c0020762:	50                   	push   eax
c0020763:	6a 06                	push   0x6
c0020765:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002076c:	50                   	push   eax
c002076d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020773:	e8 f4 e5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020778:	6a 00                	push   0x0
c002077a:	6a 01                	push   0x1
c002077c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020783:	50                   	push   eax
c0020784:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002078a:	e8 dd e5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002078f:	83 c4 20             	add    esp,0x20
c0020792:	0f b6 c3             	movzx  eax,bl
c0020795:	0f b6 df             	movzx  ebx,bh
c0020798:	50                   	push   eax
c0020799:	6a 04                	push   0x4
c002079b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207a2:	50                   	push   eax
c00207a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207a9:	e8 be e5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207ae:	53                   	push   ebx
c00207af:	6a 05                	push   0x5
c00207b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207b8:	50                   	push   eax
c00207b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207bf:	e8 a8 e5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207c4:	83 c4 20             	add    esp,0x20
c00207c7:	68 a0 00 00 00       	push   0xa0
c00207cc:	6a 07                	push   0x7
c00207ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207d5:	50                   	push   eax
c00207d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207dc:	e8 8b e5 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207e1:	83 c4 0c             	add    esp,0xc
c00207e4:	6a 01                	push   0x1
c00207e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207ed:	50                   	push   eax
c00207ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207f4:	e8 19 f3 ff ff       	call   c001fb12 <IDE::polling(unsigned char, unsigned int)>
c00207f9:	83 c4 10             	add    esp,0x10
c00207fc:	0f b6 d8             	movzx  ebx,al
c00207ff:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020805:	85 db                	test   ebx,ebx
c0020807:	74 20                	je     c0020829 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020809:	53                   	push   ebx
c002080a:	0f b6 c0             	movzx  eax,al
c002080d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020814:	52                   	push   edx
c0020815:	50                   	push   eax
c0020816:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002081c:	e8 37 f2 ff ff       	call   c001fa58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	e9 8d 01 00 00       	jmp    c00209b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020829:	0f b6 c0             	movzx  eax,al
c002082c:	53                   	push   ebx
c002082d:	53                   	push   ebx
c002082e:	50                   	push   eax
c002082f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020835:	e8 20 e5 ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c002083a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002083e:	b9 06 00 00 00       	mov    ecx,0x6
c0020843:	89 c2                	mov    edx,eax
c0020845:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020848:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002084c:	83 c4 10             	add    esp,0x10
c002084f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0020854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020858:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002085e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020865:	85 db                	test   ebx,ebx
c0020867:	0f 84 ec 00 00 00    	je     c0020959 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002086d:	51                   	push   ecx
c002086e:	51                   	push   ecx
c002086f:	52                   	push   edx
c0020870:	50                   	push   eax
c0020871:	e8 64 e6 ff ff       	call   c001eeda <IDE::waitInterrupt(unsigned char)>
c0020876:	83 c4 10             	add    esp,0x10
c0020879:	84 c0                	test   al,al
c002087b:	0f 84 cb fe ff ff    	je     c002074c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020881:	56                   	push   esi
c0020882:	56                   	push   esi
c0020883:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002088a:	50                   	push   eax
c002088b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020891:	e8 b0 e4 ff ff       	call   c001ed46 <IDE::prepareInterrupt(unsigned char)>
c0020896:	83 c4 0c             	add    esp,0xc
c0020899:	6a 04                	push   0x4
c002089b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208a2:	50                   	push   eax
c00208a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208a9:	e8 7e e5 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c00208ae:	83 c4 0c             	add    esp,0xc
c00208b1:	89 c6                	mov    esi,eax
c00208b3:	6a 05                	push   0x5
c00208b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208bc:	50                   	push   eax
c00208bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208c3:	e8 64 e5 ff ff       	call   c001ee2c <IDE::read(unsigned char, unsigned char)>
c00208c8:	89 f1                	mov    ecx,esi
c00208ca:	0f b6 c0             	movzx  eax,al
c00208cd:	0f b6 f1             	movzx  esi,cl
c00208d0:	c1 e0 08             	shl    eax,0x8
c00208d3:	09 c6                	or     esi,eax
c00208d5:	d1 fe                	sar    esi,1
c00208d7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00208e3:	74 41                	je     c0020926 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c00208e5:	31 c9                	xor    ecx,ecx
c00208e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00208ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00208f4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00208f8:	75 0a                	jne    c0020904 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c00208fa:	01 c9                	add    ecx,ecx
c00208fc:	01 cd                	add    ebp,ecx
c00208fe:	4b                   	dec    ebx
c00208ff:	e9 54 ff ff ff       	jmp    c0020858 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0020904:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002090d:	51                   	push   ecx
c002090e:	51                   	push   ecx
c002090f:	52                   	push   edx
c0020910:	50                   	push   eax
c0020911:	e8 44 e4 ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c0020916:	89 c2                	mov    edx,eax
c0020918:	89 f0                	mov    eax,esi
c002091a:	66 ef                	out    dx,ax
c002091c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020920:	83 c4 10             	add    esp,0x10
c0020923:	41                   	inc    ecx
c0020924:	eb c1                	jmp    c00208e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c0020926:	31 f6                	xor    esi,esi
c0020928:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002092e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020935:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020939:	75 06                	jne    c0020941 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002093b:	01 f6                	add    esi,esi
c002093d:	01 f5                	add    ebp,esi
c002093f:	eb bd                	jmp    c00208fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020941:	51                   	push   ecx
c0020942:	51                   	push   ecx
c0020943:	52                   	push   edx
c0020944:	50                   	push   eax
c0020945:	e8 10 e4 ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c002094a:	89 c2                	mov    edx,eax
c002094c:	66 ed                	in     ax,dx
c002094e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020953:	83 c4 10             	add    esp,0x10
c0020956:	46                   	inc    esi
c0020957:	eb cf                	jmp    c0020928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020959:	51                   	push   ecx
c002095a:	51                   	push   ecx
c002095b:	52                   	push   edx
c002095c:	50                   	push   eax
c002095d:	e8 78 e5 ff ff       	call   c001eeda <IDE::waitInterrupt(unsigned char)>
c0020962:	83 c4 10             	add    esp,0x10
c0020965:	84 c0                	test   al,al
c0020967:	0f 84 df fd ff ff    	je     c002074c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002096d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020972:	52                   	push   edx
c0020973:	52                   	push   edx
c0020974:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002097b:	50                   	push   eax
c002097c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020982:	e8 bf e3 ff ff       	call   c001ed46 <IDE::prepareInterrupt(unsigned char)>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	50                   	push   eax
c002098b:	50                   	push   eax
c002098c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020993:	50                   	push   eax
c0020994:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002099a:	e8 bb e3 ff ff       	call   c001ed5a <IDE::getBase(unsigned char)>
c002099f:	8d 50 07             	lea    edx,[eax+0x7]
c00209a2:	ec                   	in     al,dx
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	a8 88                	test   al,0x88
c00209a8:	74 0a                	je     c00209b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00209aa:	4b                   	dec    ebx
c00209ab:	75 dd                	jne    c002098a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00209ad:	bb 02 00 00 00       	mov    ebx,0x2
c00209b2:	eb 02                	jmp    c00209b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00209b4:	31 db                	xor    ebx,ebx
c00209b6:	83 c4 1c             	add    esp,0x1c
c00209b9:	89 d8                	mov    eax,ebx
c00209bb:	5b                   	pop    ebx
c00209bc:	5e                   	pop    esi
c00209bd:	5f                   	pop    edi
c00209be:	5d                   	pop    ebp
c00209bf:	c3                   	ret    

c00209c0 <ATAPI::diskRemoved()>:
c00209c0:	53                   	push   ebx
c00209c1:	83 ec 14             	sub    esp,0x14
c00209c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00209c8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00209cf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00209d5:	e8 1e a0 fe ff       	call   c000a9f8 <LogicalDisk::unmount()>
c00209da:	58                   	pop    eax
c00209db:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00209e1:	e8 0a aa fe ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c00209e6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00209ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209f0:	83 c4 18             	add    esp,0x18
c00209f3:	5b                   	pop    ebx
c00209f4:	e9 e7 a9 fe ff       	jmp    c000b3e0 <VCache::invalidateReadBuffer()>
c00209f9:	90                   	nop

c00209fa <ATAPI::eject()>:
c00209fa:	57                   	push   edi
c00209fb:	b9 03 00 00 00       	mov    ecx,0x3
c0020a00:	53                   	push   ebx
c0020a01:	83 ec 14             	sub    esp,0x14
c0020a04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020a08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a0c:	fc                   	cld    
c0020a0d:	31 c0                	xor    eax,eax
c0020a0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a11:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020a16:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020a1b:	50                   	push   eax
c0020a1c:	50                   	push   eax
c0020a1d:	6a 00                	push   0x0
c0020a1f:	6a 00                	push   0x0
c0020a21:	6a 00                	push   0x0
c0020a23:	6a 02                	push   0x2
c0020a25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020a29:	50                   	push   eax
c0020a2a:	53                   	push   ebx
c0020a2b:	e8 c8 fc ff ff       	call   c00206f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020a30:	83 c4 14             	add    esp,0x14
c0020a33:	53                   	push   ebx
c0020a34:	e8 87 ff ff ff       	call   c00209c0 <ATAPI::diskRemoved()>
c0020a39:	83 c4 24             	add    esp,0x24
c0020a3c:	31 c0                	xor    eax,eax
c0020a3e:	5b                   	pop    ebx
c0020a3f:	5f                   	pop    edi
c0020a40:	c3                   	ret    
c0020a41:	90                   	nop

c0020a42 <ATAPI::diskInserted()>:
c0020a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a46:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020a4d:	c3                   	ret    

c0020a4e <ATAPI::detectMedia()>:
c0020a4e:	56                   	push   esi
c0020a4f:	53                   	push   ebx
c0020a50:	83 ec 28             	sub    esp,0x28
c0020a53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020a57:	6a 0c                	push   0xc
c0020a59:	6a 00                	push   0x0
c0020a5b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020a5f:	56                   	push   esi
c0020a60:	e8 8b fa fd ff       	call   c00004f0 <memset>
c0020a65:	58                   	pop    eax
c0020a66:	5a                   	pop    edx
c0020a67:	6a 00                	push   0x0
c0020a69:	6a 00                	push   0x0
c0020a6b:	6a 00                	push   0x0
c0020a6d:	6a 00                	push   0x0
c0020a6f:	56                   	push   esi
c0020a70:	53                   	push   ebx
c0020a71:	e8 82 fc ff ff       	call   c00206f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020a76:	83 c4 1c             	add    esp,0x1c
c0020a79:	6a 0c                	push   0xc
c0020a7b:	6a 00                	push   0x0
c0020a7d:	56                   	push   esi
c0020a7e:	e8 6d fa fd ff       	call   c00004f0 <memset>
c0020a83:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020a88:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020a8d:	59                   	pop    ecx
c0020a8e:	58                   	pop    eax
c0020a8f:	6a 01                	push   0x1
c0020a91:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020a95:	50                   	push   eax
c0020a96:	6a 00                	push   0x0
c0020a98:	6a 12                	push   0x12
c0020a9a:	56                   	push   esi
c0020a9b:	53                   	push   ebx
c0020a9c:	e8 57 fc ff ff       	call   c00206f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020aa1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020aa5:	83 c4 20             	add    esp,0x20
c0020aa8:	83 e0 7f             	and    eax,0x7f
c0020aab:	83 f8 70             	cmp    eax,0x70
c0020aae:	74 15                	je     c0020ac5 <ATAPI::detectMedia()+0x77>
c0020ab0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020ab7:	75 0c                	jne    c0020ac5 <ATAPI::detectMedia()+0x77>
c0020ab9:	83 ec 0c             	sub    esp,0xc
c0020abc:	53                   	push   ebx
c0020abd:	e8 80 ff ff ff       	call   c0020a42 <ATAPI::diskInserted()>
c0020ac2:	83 c4 10             	add    esp,0x10
c0020ac5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020ac9:	83 e0 0f             	and    eax,0xf
c0020acc:	83 f8 02             	cmp    eax,0x2
c0020acf:	75 1b                	jne    c0020aec <ATAPI::detectMedia()+0x9e>
c0020ad1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020ad6:	75 2d                	jne    c0020b05 <ATAPI::detectMedia()+0xb7>
c0020ad8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020adf:	74 24                	je     c0020b05 <ATAPI::detectMedia()+0xb7>
c0020ae1:	83 ec 0c             	sub    esp,0xc
c0020ae4:	53                   	push   ebx
c0020ae5:	e8 d6 fe ff ff       	call   c00209c0 <ATAPI::diskRemoved()>
c0020aea:	eb 16                	jmp    c0020b02 <ATAPI::detectMedia()+0xb4>
c0020aec:	85 c0                	test   eax,eax
c0020aee:	75 15                	jne    c0020b05 <ATAPI::detectMedia()+0xb7>
c0020af0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020af7:	75 0c                	jne    c0020b05 <ATAPI::detectMedia()+0xb7>
c0020af9:	83 ec 0c             	sub    esp,0xc
c0020afc:	53                   	push   ebx
c0020afd:	e8 40 ff ff ff       	call   c0020a42 <ATAPI::diskInserted()>
c0020b02:	83 c4 10             	add    esp,0x10
c0020b05:	83 c4 24             	add    esp,0x24
c0020b08:	5b                   	pop    ebx
c0020b09:	5e                   	pop    esi
c0020b0a:	c3                   	ret    
c0020b0b:	90                   	nop

c0020b0c <ATAPI::open(int, int, void*)>:
c0020b0c:	56                   	push   esi
c0020b0d:	53                   	push   ebx
c0020b0e:	50                   	push   eax
c0020b0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020b13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b1b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b21:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020b27:	c1 e0 06             	shl    eax,0x6
c0020b2a:	01 d0                	add    eax,edx
c0020b2c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020b33:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020b39:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020b40:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020b4a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020b50:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020b57:	6a 04                	push   0x4
c0020b59:	6a 0c                	push   0xc
c0020b5b:	51                   	push   ecx
c0020b5c:	52                   	push   edx
c0020b5d:	e8 0a e2 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b62:	90                   	nop
c0020b63:	90                   	nop
c0020b64:	6a 00                	push   0x0
c0020b66:	6a 0c                	push   0xc
c0020b68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020b6f:	50                   	push   eax
c0020b70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020b76:	e8 f1 e1 ff ff       	call   c001ed6c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b7b:	83 c4 14             	add    esp,0x14
c0020b7e:	68 78 01 00 00       	push   0x178
c0020b83:	e8 c3 ec fe ff       	call   c000f84b <malloc>
c0020b88:	83 c4 0c             	add    esp,0xc
c0020b8b:	89 c6                	mov    esi,eax
c0020b8d:	6a 00                	push   0x0
c0020b8f:	68 ff ff ff 7f       	push   0x7fffffff
c0020b94:	6a 00                	push   0x0
c0020b96:	6a 00                	push   0x0
c0020b98:	53                   	push   ebx
c0020b99:	68 9b 66 02 c0       	push   0xc002669b
c0020b9e:	50                   	push   eax
c0020b9f:	e8 92 9c fe ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020ba4:	83 c4 14             	add    esp,0x14
c0020ba7:	56                   	push   esi
c0020ba8:	e8 49 9d fe ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c0020bad:	5a                   	pop    edx
c0020bae:	0f be c0             	movsx  eax,al
c0020bb1:	59                   	pop    ecx
c0020bb2:	50                   	push   eax
c0020bb3:	68 e0 64 02 c0       	push   0xc00264e0
c0020bb8:	e8 bf 63 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020bbd:	58                   	pop    eax
c0020bbe:	5a                   	pop    edx
c0020bbf:	56                   	push   esi
c0020bc0:	53                   	push   ebx
c0020bc1:	e8 8e 8e fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020bc6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020bcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020bcf:	e8 ca 92 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020bd4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020bdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020bde:	e8 6b fe ff ff       	call   c0020a4e <ATAPI::detectMedia()>
c0020be3:	83 c4 14             	add    esp,0x14
c0020be6:	31 c0                	xor    eax,eax
c0020be8:	5b                   	pop    ebx
c0020be9:	5e                   	pop    esi
c0020bea:	c3                   	ret    
c0020beb:	90                   	nop

c0020bec <ATAPI::read(unsigned long long, int, void*)>:
c0020bec:	55                   	push   ebp
c0020bed:	57                   	push   edi
c0020bee:	56                   	push   esi
c0020bef:	53                   	push   ebx
c0020bf0:	83 ec 1c             	sub    esp,0x1c
c0020bf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020bf7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020bfb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020bff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020c06:	74 3c                	je     c0020c44 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020c08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c0c:	b9 03 00 00 00       	mov    ecx,0x3
c0020c11:	fc                   	cld    
c0020c12:	31 c0                	xor    eax,eax
c0020c14:	0f ce                	bswap  esi
c0020c16:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c18:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020c1d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020c21:	89 e8                	mov    eax,ebp
c0020c23:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020c27:	50                   	push   eax
c0020c28:	50                   	push   eax
c0020c29:	55                   	push   ebp
c0020c2a:	c1 e5 0b             	shl    ebp,0xb
c0020c2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020c31:	6a 00                	push   0x0
c0020c33:	55                   	push   ebp
c0020c34:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020c38:	50                   	push   eax
c0020c39:	53                   	push   ebx
c0020c3a:	e8 b9 fa ff ff       	call   c00206f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020c3f:	83 c4 20             	add    esp,0x20
c0020c42:	eb 1a                	jmp    c0020c5e <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020c44:	83 ec 0c             	sub    esp,0xc
c0020c47:	53                   	push   ebx
c0020c48:	e8 01 fe ff ff       	call   c0020a4e <ATAPI::detectMedia()>
c0020c4d:	83 c4 10             	add    esp,0x10
c0020c50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020c57:	75 af                	jne    c0020c08 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020c59:	b8 02 00 00 00       	mov    eax,0x2
c0020c5e:	83 c4 1c             	add    esp,0x1c
c0020c61:	5b                   	pop    ebx
c0020c62:	5e                   	pop    esi
c0020c63:	5f                   	pop    edi
c0020c64:	5d                   	pop    ebp
c0020c65:	c3                   	ret    

c0020c66 <SATA::close(int, int, void*)>:
c0020c66:	83 ec 0c             	sub    esp,0xc
c0020c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c73:	85 c0                	test   eax,eax
c0020c75:	74 0c                	je     c0020c83 <SATA::close(int, int, void*)+0x1d>
c0020c77:	83 ec 0c             	sub    esp,0xc
c0020c7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c7c:	50                   	push   eax
c0020c7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	31 c0                	xor    eax,eax
c0020c85:	83 c4 0c             	add    esp,0xc
c0020c88:	c3                   	ret    
c0020c89:	90                   	nop

c0020c8a <SATA::powerSaving(PowerSavingLevel)>:
c0020c8a:	c3                   	ret    
c0020c8b:	90                   	nop

c0020c8c <SATA::open(int, int, void*)>:
c0020c8c:	56                   	push   esi
c0020c8d:	53                   	push   ebx
c0020c8e:	83 ec 10             	sub    esp,0x10
c0020c91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020c95:	68 28 65 02 c0       	push   0xc0026528
c0020c9a:	e8 dd 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ca3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020cad:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020cb3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020cbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020cc1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ccb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020cd1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020cd8:	e8 b7 f1 fe ff       	call   c000fe94 <Phys::allocatePage()>
c0020cdd:	89 c6                	mov    esi,eax
c0020cdf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020ce5:	81 c6 00 10 00 00    	add    esi,0x1000
c0020ceb:	e8 a4 f1 fe ff       	call   c000fe94 <Phys::allocatePage()>
c0020cf0:	83 c4 10             	add    esp,0x10
c0020cf3:	39 c6                	cmp    esi,eax
c0020cf5:	74 10                	je     c0020d07 <SATA::open(int, int, void*)+0x7b>
c0020cf7:	83 ec 0c             	sub    esp,0xc
c0020cfa:	68 34 65 02 c0       	push   0xc0026534
c0020cff:	e8 9c ef fe ff       	call   c000fca0 <KePanic(char const*)>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	83 ec 0c             	sub    esp,0xc
c0020d0a:	6a 02                	push   0x2
c0020d0c:	e8 26 25 ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0020d11:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020d17:	6a 03                	push   0x3
c0020d19:	50                   	push   eax
c0020d1a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020d20:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020d26:	e8 ef 2b ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020d2b:	83 c4 14             	add    esp,0x14
c0020d2e:	53                   	push   ebx
c0020d2f:	e8 6a 91 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d37:	e8 ce 9f fe ff       	call   c000ad0a <createPartitionsForDisk(PhysicalDisk*)>
c0020d3c:	83 c4 14             	add    esp,0x14
c0020d3f:	31 c0                	xor    eax,eax
c0020d41:	5b                   	pop    ebx
c0020d42:	5e                   	pop    esi
c0020d43:	c3                   	ret    

c0020d44 <SATA::SATA()>:
c0020d44:	83 ec 0c             	sub    esp,0xc
c0020d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4b:	83 ec 04             	sub    esp,0x4
c0020d4e:	68 00 02 00 00       	push   0x200
c0020d53:	68 48 65 02 c0       	push   0xc0026548
c0020d58:	50                   	push   eax
c0020d59:	e8 d8 90 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020d5e:	83 c4 10             	add    esp,0x10
c0020d61:	ba b8 65 02 c0       	mov    edx,0xc00265b8
c0020d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6a:	89 10                	mov    DWORD PTR [eax],edx
c0020d6c:	90                   	nop
c0020d6d:	83 c4 0c             	add    esp,0xc
c0020d70:	c3                   	ret    
c0020d71:	90                   	nop

c0020d72 <SATA::access(unsigned long long, int, void*, bool)>:
c0020d72:	55                   	push   ebp
c0020d73:	57                   	push   edi
c0020d74:	56                   	push   esi
c0020d75:	53                   	push   ebx
c0020d76:	83 ec 2c             	sub    esp,0x2c
c0020d79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020d7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020d81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d85:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020d89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020d8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d91:	fa                   	cli    
c0020d92:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0020d98:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020d9d:	7e 10                	jle    c0020daf <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020d9f:	83 ec 0c             	sub    esp,0xc
c0020da2:	68 58 65 02 c0       	push   0xc0026558
c0020da7:	e8 f4 ee fe ff       	call   c000fca0 <KePanic(char const*)>
c0020dac:	83 c4 10             	add    esp,0x10
c0020daf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020db5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020dbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020dc5:	89 d0                	mov    eax,edx
c0020dc7:	c1 e0 07             	shl    eax,0x7
c0020dca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020dce:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020dd8:	51                   	push   ecx
c0020dd9:	8d 42 02             	lea    eax,[edx+0x2]
c0020ddc:	51                   	push   ecx
c0020ddd:	c1 e0 07             	shl    eax,0x7
c0020de0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020de4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020de8:	50                   	push   eax
c0020de9:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020def:	e8 fe ed ff ff       	call   c001fbf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020df4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020df8:	83 c4 10             	add    esp,0x10
c0020dfb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020e00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e04:	0f 84 a4 01 00 00    	je     c0020fae <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020e0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020e0e:	c1 e0 09             	shl    eax,0x9
c0020e11:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020e16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e1a:	74 0e                	je     c0020e2a <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020e1c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020e22:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020e26:	89 c1                	mov    ecx,eax
c0020e28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e2a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020e30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020e34:	8d 42 02             	lea    eax,[edx+0x2]
c0020e37:	c1 e0 07             	shl    eax,0x7
c0020e3a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e40:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020e46:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020e4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e50:	c1 e1 05             	shl    ecx,0x5
c0020e53:	01 c8                	add    eax,ecx
c0020e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e59:	83 e1 01             	and    ecx,0x1
c0020e5c:	89 ce                	mov    esi,ecx
c0020e5e:	8a 08                	mov    cl,BYTE PTR [eax]
c0020e60:	c1 e6 06             	shl    esi,0x6
c0020e63:	83 e1 bf             	and    ecx,0xffffffbf
c0020e66:	09 f1                	or     ecx,esi
c0020e68:	88 08                	mov    BYTE PTR [eax],cl
c0020e6a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020e6c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020e72:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020e78:	89 08                	mov    DWORD PTR [eax],ecx
c0020e7a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020e80:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020e86:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020e8c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020e8f:	50                   	push   eax
c0020e90:	68 90 00 00 00       	push   0x90
c0020e95:	6a 00                	push   0x0
c0020e97:	56                   	push   esi
c0020e98:	e8 53 f6 fd ff       	call   c00004f0 <memset>
c0020e9d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020ea3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ea9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020ead:	83 c4 10             	add    esp,0x10
c0020eb0:	48                   	dec    eax
c0020eb1:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020eb6:	89 c1                	mov    ecx,eax
c0020eb8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020ebe:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ec3:	09 c8                	or     eax,ecx
c0020ec5:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020ecb:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020ed1:	83 c8 80             	or     eax,0xffffff80
c0020ed4:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020eda:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020edd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ee1:	25 00 7f 00 00       	and    eax,0x7f00
c0020ee6:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020eeb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ef0:	66 89 06             	mov    WORD PTR [esi],ax
c0020ef3:	b0 35                	mov    al,0x35
c0020ef5:	75 02                	jne    c0020ef9 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0020ef7:	b0 25                	mov    al,0x25
c0020ef9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020efc:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020f00:	89 e8                	mov    eax,ebp
c0020f02:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f06:	c1 e8 10             	shr    eax,0x10
c0020f09:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020f0c:	89 e8                	mov    eax,ebp
c0020f0e:	c1 e8 18             	shr    eax,0x18
c0020f11:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020f14:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020f18:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f1f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020f22:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f26:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020f2a:	89 d6                	mov    esi,edx
c0020f2c:	31 c0                	xor    eax,eax
c0020f2e:	c1 e6 07             	shl    esi,0x7
c0020f31:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020f35:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020f3b:	80 e1 88             	and    cl,0x88
c0020f3e:	74 0a                	je     c0020f4a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020f40:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020f45:	74 0a                	je     c0020f51 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020f47:	40                   	inc    eax
c0020f48:	eb eb                	jmp    c0020f35 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020f4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020f4f:	75 0a                	jne    c0020f5b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020f51:	83 ec 0c             	sub    esp,0xc
c0020f54:	68 91 65 02 c0       	push   0xc0026591
c0020f59:	eb 36                	jmp    c0020f91 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020f5b:	b8 01 00 00 00       	mov    eax,0x1
c0020f60:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020f64:	c1 e2 07             	shl    edx,0x7
c0020f67:	d3 e0                	shl    eax,cl
c0020f69:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020f6d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020f73:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020f79:	85 c8                	test   eax,ecx
c0020f7b:	74 25                	je     c0020fa2 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020f7d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020f83:	0f ba e1 1e          	bt     ecx,0x1e
c0020f87:	73 ea                	jae    c0020f73 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020f89:	83 ec 0c             	sub    esp,0xc
c0020f8c:	68 9f 65 02 c0       	push   0xc002659f
c0020f91:	e8 e6 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020f96:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	eb 13                	jmp    c0020fb5 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020fa2:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020fa8:	0f ba e0 1e          	bt     eax,0x1e
c0020fac:	73 18                	jae    c0020fc6 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020fae:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020fb5:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0020fbc:	75 01                	jne    c0020fbf <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020fbe:	fb                   	sti    
c0020fbf:	b8 01 00 00 00       	mov    eax,0x1
c0020fc4:	eb 2c                	jmp    c0020ff2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020fc6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020fcb:	75 10                	jne    c0020fdd <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020fcd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020fd3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020fd7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fdd:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020fe4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0020fe9:	85 c0                	test   eax,eax
c0020feb:	75 03                	jne    c0020ff0 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020fed:	fb                   	sti    
c0020fee:	eb 02                	jmp    c0020ff2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020ff0:	31 c0                	xor    eax,eax
c0020ff2:	83 c4 2c             	add    esp,0x2c
c0020ff5:	5b                   	pop    ebx
c0020ff6:	5e                   	pop    esi
c0020ff7:	5f                   	pop    edi
c0020ff8:	5d                   	pop    ebp
c0020ff9:	c3                   	ret    

c0020ffa <SATA::read(unsigned long long, int, void*)>:
c0020ffa:	57                   	push   edi
c0020ffb:	b8 04 00 00 00       	mov    eax,0x4
c0021000:	56                   	push   esi
c0021001:	53                   	push   ebx
c0021002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021006:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002100a:	8d 7a ff             	lea    edi,[edx-0x1]
c002100d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021011:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021015:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002101b:	77 25                	ja     c0021042 <SATA::read(unsigned long long, int, void*)+0x48>
c002101d:	b8 06 00 00 00       	mov    eax,0x6
c0021022:	85 f6                	test   esi,esi
c0021024:	74 1c                	je     c0021042 <SATA::read(unsigned long long, int, void*)+0x48>
c0021026:	50                   	push   eax
c0021027:	50                   	push   eax
c0021028:	6a 00                	push   0x0
c002102a:	56                   	push   esi
c002102b:	52                   	push   edx
c002102c:	53                   	push   ebx
c002102d:	51                   	push   ecx
c002102e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021032:	e8 3b fd ff ff       	call   c0020d72 <SATA::access(unsigned long long, int, void*, bool)>
c0021037:	83 c4 20             	add    esp,0x20
c002103a:	85 c0                	test   eax,eax
c002103c:	0f 95 c0             	setne  al
c002103f:	0f b6 c0             	movzx  eax,al
c0021042:	5b                   	pop    ebx
c0021043:	5e                   	pop    esi
c0021044:	5f                   	pop    edi
c0021045:	c3                   	ret    

c0021046 <SATA::write(unsigned long long, int, void*)>:
c0021046:	55                   	push   ebp
c0021047:	b8 04 00 00 00       	mov    eax,0x4
c002104c:	57                   	push   edi
c002104d:	56                   	push   esi
c002104e:	53                   	push   ebx
c002104f:	83 ec 0c             	sub    esp,0xc
c0021052:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021056:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002105a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002105d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0021061:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021065:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002106b:	77 3d                	ja     c00210aa <SATA::write(unsigned long long, int, void*)+0x64>
c002106d:	b8 06 00 00 00       	mov    eax,0x6
c0021072:	85 ed                	test   ebp,ebp
c0021074:	74 34                	je     c00210aa <SATA::write(unsigned long long, int, void*)+0x64>
c0021076:	c1 e3 09             	shl    ebx,0x9
c0021079:	01 eb                	add    ebx,ebp
c002107b:	89 d6                	mov    esi,edx
c002107d:	89 cf                	mov    edi,ecx
c002107f:	83 c6 01             	add    esi,0x1
c0021082:	83 d7 00             	adc    edi,0x0
c0021085:	50                   	push   eax
c0021086:	50                   	push   eax
c0021087:	6a 01                	push   0x1
c0021089:	55                   	push   ebp
c002108a:	81 c5 00 02 00 00    	add    ebp,0x200
c0021090:	6a 01                	push   0x1
c0021092:	51                   	push   ecx
c0021093:	52                   	push   edx
c0021094:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021098:	e8 d5 fc ff ff       	call   c0020d72 <SATA::access(unsigned long long, int, void*, bool)>
c002109d:	83 c4 20             	add    esp,0x20
c00210a0:	89 f2                	mov    edx,esi
c00210a2:	89 f9                	mov    ecx,edi
c00210a4:	39 dd                	cmp    ebp,ebx
c00210a6:	75 d3                	jne    c002107b <SATA::write(unsigned long long, int, void*)+0x35>
c00210a8:	31 c0                	xor    eax,eax
c00210aa:	83 c4 0c             	add    esp,0xc
c00210ad:	5b                   	pop    ebx
c00210ae:	5e                   	pop    esi
c00210af:	5f                   	pop    edi
c00210b0:	5d                   	pop    ebp
c00210b1:	c3                   	ret    

c00210b2 <SATAPI::write(unsigned long long, int, void*)>:
c00210b2:	b8 03 00 00 00       	mov    eax,0x3
c00210b7:	c3                   	ret    

c00210b8 <SATAPI::close(int, int, void*)>:
c00210b8:	83 ec 0c             	sub    esp,0xc
c00210bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00210c5:	85 c0                	test   eax,eax
c00210c7:	74 0c                	je     c00210d5 <SATAPI::close(int, int, void*)+0x1d>
c00210c9:	83 ec 0c             	sub    esp,0xc
c00210cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00210ce:	50                   	push   eax
c00210cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00210d2:	83 c4 10             	add    esp,0x10
c00210d5:	31 c0                	xor    eax,eax
c00210d7:	83 c4 0c             	add    esp,0xc
c00210da:	c3                   	ret    
c00210db:	90                   	nop

c00210dc <SATAPI::SATAPI()>:
c00210dc:	83 ec 0c             	sub    esp,0xc
c00210df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e3:	83 ec 04             	sub    esp,0x4
c00210e6:	68 00 08 00 00       	push   0x800
c00210eb:	68 e8 65 02 c0       	push   0xc00265e8
c00210f0:	50                   	push   eax
c00210f1:	e8 40 8d fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00210f6:	83 c4 10             	add    esp,0x10
c00210f9:	ba dc 66 02 c0       	mov    edx,0xc00266dc
c00210fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021102:	89 10                	mov    DWORD PTR [eax],edx
c0021104:	90                   	nop
c0021105:	83 c4 0c             	add    esp,0xc
c0021108:	c3                   	ret    
c0021109:	90                   	nop

c002110a <SATAPI::diskRemoved()>:
c002110a:	c3                   	ret    
c002110b:	90                   	nop

c002110c <SATAPI::diskInserted()>:
c002110c:	83 ec 18             	sub    esp,0x18
c002110f:	68 f4 65 02 c0       	push   0xc00265f4
c0021114:	e8 63 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002111d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021124:	83 c4 1c             	add    esp,0x1c
c0021127:	c3                   	ret    

c0021128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021128:	55                   	push   ebp
c0021129:	57                   	push   edi
c002112a:	56                   	push   esi
c002112b:	53                   	push   ebx
c002112c:	83 ec 34             	sub    esp,0x34
c002112f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0021133:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021137:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002113b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002113f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0021143:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021149:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002114f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021153:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002115d:	83 c0 02             	add    eax,0x2
c0021160:	c1 e0 07             	shl    eax,0x7
c0021163:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021167:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002116b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002116f:	c1 e0 07             	shl    eax,0x7
c0021172:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002117a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021184:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021188:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002118e:	e8 5f ea ff ff       	call   c001fbf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021193:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021197:	83 c4 10             	add    esp,0x10
c002119a:	b8 01 00 00 00       	mov    eax,0x1
c002119f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00211a4:	0f 84 57 02 00 00    	je     c0021401 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00211aa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00211b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00211bc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00211c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211c6:	c1 e1 05             	shl    ecx,0x5
c00211c9:	01 c8                	add    eax,ecx
c00211cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00211cd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00211d3:	81 c9 25 00 01 00    	or     ecx,0x10025
c00211d9:	89 08                	mov    DWORD PTR [eax],ecx
c00211db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00211e1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00211e7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00211ed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00211f0:	8d 7b 40             	lea    edi,[ebx+0x40]
c00211f3:	50                   	push   eax
c00211f4:	68 90 00 00 00       	push   0x90
c00211f9:	6a 00                	push   0x0
c00211fb:	53                   	push   ebx
c00211fc:	e8 ef f2 fd ff       	call   c00004f0 <memset>
c0021201:	b9 0c 00 00 00       	mov    ecx,0xc
c0021206:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002120a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002120c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0021212:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021216:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002121c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021220:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021224:	48                   	dec    eax
c0021225:	25 ff ff 3f 00       	and    eax,0x3fffff
c002122a:	89 c1                	mov    ecx,eax
c002122c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0021232:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021237:	09 c8                	or     eax,ecx
c0021239:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002123f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0021245:	83 c8 80             	or     eax,0xffffff80
c0021248:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002124e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0021251:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021255:	25 00 7f 00 00       	and    eax,0x7f00
c002125a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002125e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021263:	66 89 03             	mov    WORD PTR [ebx],ax
c0021266:	89 d0                	mov    eax,edx
c0021268:	c1 ea 18             	shr    edx,0x18
c002126b:	c1 e8 10             	shr    eax,0x10
c002126e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021271:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021274:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021278:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002127b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002127f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021282:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021286:	83 c4 10             	add    esp,0x10
c0021289:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002128d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021291:	31 c0                	xor    eax,eax
c0021293:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021299:	80 e1 88             	and    cl,0x88
c002129c:	74 0a                	je     c00212a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002129e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00212a3:	74 0a                	je     c00212af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c00212a5:	40                   	inc    eax
c00212a6:	eb eb                	jmp    c0021293 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00212a8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00212ad:	75 43                	jne    c00212f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00212af:	83 ec 0c             	sub    esp,0xc
c00212b2:	68 0c 66 02 c0       	push   0xc002660c
c00212b7:	e8 c0 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00212bc:	58                   	pop    eax
c00212bd:	5a                   	pop    edx
c00212be:	68 21 66 02 c0       	push   0xc0026621
c00212c3:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c00212c9:	e8 3e 13 ff ff       	call   c001260c <VgaText::puts(char const*)>
c00212ce:	59                   	pop    ecx
c00212cf:	5b                   	pop    ebx
c00212d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00212d4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00212da:	e8 ad e9 ff ff       	call   c001fc8c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00212df:	5e                   	pop    esi
c00212e0:	5f                   	pop    edi
c00212e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00212e5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00212eb:	e8 7c e9 ff ff       	call   c001fc6c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00212f0:	eb 48                	jmp    c002133a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c00212f2:	be 01 00 00 00       	mov    esi,0x1
c00212f7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00212fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212ff:	d3 e6                	shl    esi,cl
c0021301:	c1 e7 07             	shl    edi,0x7
c0021304:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002130a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002130f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0021313:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021319:	85 c6                	test   esi,eax
c002131b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0021321:	0f 84 a7 00 00 00    	je     c00213ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0021327:	0f ba e0 1e          	bt     eax,0x1e
c002132b:	73 1a                	jae    c0021347 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002132d:	83 ec 0c             	sub    esp,0xc
c0021330:	68 33 66 02 c0       	push   0xc0026633
c0021335:	e8 42 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002133a:	83 c4 10             	add    esp,0x10
c002133d:	b8 01 00 00 00       	mov    eax,0x1
c0021342:	e9 ba 00 00 00       	jmp    c0021401 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021347:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002134d:	83 f8 0d             	cmp    eax,0xd
c0021350:	77 0b                	ja     c002135d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0021352:	50                   	push   eax
c0021353:	50                   	push   eax
c0021354:	6a 00                	push   0x0
c0021356:	68 c8 00 00 00       	push   0xc8
c002135b:	eb 2a                	jmp    c0021387 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c002135d:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0021363:	83 f8 0d             	cmp    eax,0xd
c0021366:	77 0b                	ja     c0021373 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0021368:	51                   	push   ecx
c0021369:	51                   	push   ecx
c002136a:	6a 00                	push   0x0
c002136c:	68 58 02 00 00       	push   0x258
c0021371:	eb 14                	jmp    c0021387 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0021373:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0021379:	83 f8 06             	cmp    eax,0x6
c002137c:	77 11                	ja     c002138f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002137e:	52                   	push   edx
c002137f:	52                   	push   edx
c0021380:	6a 00                	push   0x0
c0021382:	68 dc 05 00 00       	push   0x5dc
c0021387:	e8 90 56 ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c002138c:	83 c4 10             	add    esp,0x10
c002138f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0021393:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0021396:	75 06                	jne    c002139e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0021398:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002139c:	74 16                	je     c00213b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c002139e:	83 fb 06             	cmp    ebx,0x6
c00213a1:	77 11                	ja     c00213b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00213a3:	50                   	push   eax
c00213a4:	50                   	push   eax
c00213a5:	6a 00                	push   0x0
c00213a7:	68 c4 09 00 00       	push   0x9c4
c00213ac:	e8 6b 56 ff ff       	call   c0016a1c <milliTenthSleep(unsigned long long)>
c00213b1:	83 c4 10             	add    esp,0x10
c00213b4:	43                   	inc    ebx
c00213b5:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c00213bb:	0f 85 52 ff ff ff    	jne    c0021313 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c00213c1:	83 ec 0c             	sub    esp,0xc
c00213c4:	68 46 66 02 c0       	push   0xc0026646
c00213c9:	e9 67 ff ff ff       	jmp    c0021335 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c00213ce:	0f ba e0 1e          	bt     eax,0x1e
c00213d2:	73 0d                	jae    c00213e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c00213d4:	83 ec 0c             	sub    esp,0xc
c00213d7:	68 5a 66 02 c0       	push   0xc002665a
c00213dc:	e9 54 ff ff ff       	jmp    c0021335 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c00213e1:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00213e6:	74 17                	je     c00213ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c00213e8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00213ed:	74 10                	je     c00213ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c00213ef:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00213f5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00213f9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00213fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213ff:	31 c0                	xor    eax,eax
c0021401:	83 c4 2c             	add    esp,0x2c
c0021404:	5b                   	pop    ebx
c0021405:	5e                   	pop    esi
c0021406:	5f                   	pop    edi
c0021407:	5d                   	pop    ebp
c0021408:	c3                   	ret    
c0021409:	90                   	nop

c002140a <SATAPI::eject()>:
c002140a:	57                   	push   edi
c002140b:	b9 03 00 00 00       	mov    ecx,0x3
c0021410:	83 ec 18             	sub    esp,0x18
c0021413:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021417:	fc                   	cld    
c0021418:	31 c0                	xor    eax,eax
c002141a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002141c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021421:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021426:	50                   	push   eax
c0021427:	6a 00                	push   0x0
c0021429:	6a 00                	push   0x0
c002142b:	6a 00                	push   0x0
c002142d:	6a 00                	push   0x0
c002142f:	6a 02                	push   0x2
c0021431:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021435:	50                   	push   eax
c0021436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002143a:	e8 e9 fc ff ff       	call   c0021128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002143f:	31 c0                	xor    eax,eax
c0021441:	83 c4 38             	add    esp,0x38
c0021444:	5f                   	pop    edi
c0021445:	c3                   	ret    

c0021446 <SATAPI::detectMedia()>:
c0021446:	53                   	push   ebx
c0021447:	83 ec 14             	sub    esp,0x14
c002144a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002144e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021454:	e8 97 9f fe ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c0021459:	59                   	pop    ecx
c002145a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021460:	e8 7b 9f fe ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c0021465:	c7 04 24 6f 66 02 c0 	mov    DWORD PTR [esp],0xc002666f
c002146c:	e8 0b 5b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021471:	83 c4 10             	add    esp,0x10
c0021474:	31 c0                	xor    eax,eax
c0021476:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c002147d:	85 d2                	test   edx,edx
c002147f:	74 0f                	je     c0021490 <SATAPI::detectMedia()+0x4a>
c0021481:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0021487:	75 07                	jne    c0021490 <SATAPI::detectMedia()+0x4a>
c0021489:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0021490:	40                   	inc    eax
c0021491:	83 f8 1a             	cmp    eax,0x1a
c0021494:	75 e0                	jne    c0021476 <SATAPI::detectMedia()+0x30>
c0021496:	83 c4 08             	add    esp,0x8
c0021499:	5b                   	pop    ebx
c002149a:	c3                   	ret    
c002149b:	90                   	nop

c002149c <SATAPI::open(int, int, void*)>:
c002149c:	56                   	push   esi
c002149d:	53                   	push   ebx
c002149e:	51                   	push   ecx
c002149f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214a7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00214b1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00214b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00214c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214c5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00214cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00214d5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00214dc:	e8 b3 e9 fe ff       	call   c000fe94 <Phys::allocatePage()>
c00214e1:	89 c6                	mov    esi,eax
c00214e3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00214e9:	81 c6 00 10 00 00    	add    esi,0x1000
c00214ef:	e8 a0 e9 fe ff       	call   c000fe94 <Phys::allocatePage()>
c00214f4:	39 c6                	cmp    esi,eax
c00214f6:	74 10                	je     c0021508 <SATAPI::open(int, int, void*)+0x6c>
c00214f8:	83 ec 0c             	sub    esp,0xc
c00214fb:	68 84 66 02 c0       	push   0xc0026684
c0021500:	e8 9b e7 fe ff       	call   c000fca0 <KePanic(char const*)>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	83 ec 0c             	sub    esp,0xc
c002150b:	6a 02                	push   0x2
c002150d:	e8 25 1d ff ff       	call   c0013237 <Virt::allocateKernelVirtualPages(int)>
c0021512:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021518:	6a 03                	push   0x3
c002151a:	50                   	push   eax
c002151b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021521:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0021527:	e8 ee 23 ff ff       	call   c001391a <VAS::mapPage(unsigned long, unsigned long, int)>
c002152c:	83 c4 14             	add    esp,0x14
c002152f:	68 78 01 00 00       	push   0x178
c0021534:	e8 12 e3 fe ff       	call   c000f84b <malloc>
c0021539:	83 c4 0c             	add    esp,0xc
c002153c:	89 c6                	mov    esi,eax
c002153e:	6a 00                	push   0x0
c0021540:	68 ff ff ff 7f       	push   0x7fffffff
c0021545:	6a 00                	push   0x0
c0021547:	6a 00                	push   0x0
c0021549:	53                   	push   ebx
c002154a:	68 9a 66 02 c0       	push   0xc002669a
c002154f:	50                   	push   eax
c0021550:	e8 e1 92 fe ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021555:	83 c4 14             	add    esp,0x14
c0021558:	56                   	push   esi
c0021559:	e8 98 93 fe ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c002155e:	5a                   	pop    edx
c002155f:	0f be c0             	movsx  eax,al
c0021562:	59                   	pop    ecx
c0021563:	50                   	push   eax
c0021564:	68 e0 64 02 c0       	push   0xc00264e0
c0021569:	e8 0e 5a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002156e:	58                   	pop    eax
c002156f:	5a                   	pop    edx
c0021570:	56                   	push   esi
c0021571:	53                   	push   ebx
c0021572:	e8 dd 84 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0021577:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002157d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021580:	e8 19 89 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0021585:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002158c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002158f:	e8 b2 fe ff ff       	call   c0021446 <SATAPI::detectMedia()>
c0021594:	83 c4 14             	add    esp,0x14
c0021597:	31 c0                	xor    eax,eax
c0021599:	5b                   	pop    ebx
c002159a:	5e                   	pop    esi
c002159b:	c3                   	ret    

c002159c <SATAPI::read(unsigned long long, int, void*)>:
c002159c:	57                   	push   edi
c002159d:	56                   	push   esi
c002159e:	53                   	push   ebx
c002159f:	83 ec 30             	sub    esp,0x30
c00215a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00215a6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00215aa:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00215ae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00215b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215ba:	83 fe 04             	cmp    esi,0x4
c00215bd:	7e 10                	jle    c00215cf <SATAPI::read(unsigned long long, int, void*)+0x33>
c00215bf:	83 ec 0c             	sub    esp,0xc
c00215c2:	68 a8 66 02 c0       	push   0xc00266a8
c00215c7:	e8 d4 e6 fe ff       	call   c000fca0 <KePanic(char const*)>
c00215cc:	83 c4 10             	add    esp,0x10
c00215cf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00215d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00215db:	51                   	push   ecx
c00215dc:	50                   	push   eax
c00215dd:	83 c0 02             	add    eax,0x2
c00215e0:	c1 e0 07             	shl    eax,0x7
c00215e3:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00215e9:	50                   	push   eax
c00215ea:	52                   	push   edx
c00215eb:	e8 c6 e6 ff ff       	call   c001fcb6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00215f0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00215f4:	b9 03 00 00 00       	mov    ecx,0x3
c00215f9:	fc                   	cld    
c00215fa:	31 c0                	xor    eax,eax
c00215fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00215fe:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0021603:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021608:	83 c4 0c             	add    esp,0xc
c002160b:	6a 00                	push   0x0
c002160d:	6a 00                	push   0x0
c002160f:	6a 00                	push   0x0
c0021611:	6a 00                	push   0x0
c0021613:	6a 02                	push   0x2
c0021615:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021619:	50                   	push   eax
c002161a:	53                   	push   ebx
c002161b:	e8 08 fb ff ff       	call   c0021128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021620:	83 c4 20             	add    esp,0x20
c0021623:	85 c0                	test   eax,eax
c0021625:	75 44                	jne    c002166b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0021627:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002162b:	b9 03 00 00 00       	mov    ecx,0x3
c0021630:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021636:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002163b:	0f c8                	bswap  eax
c002163d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021641:	89 f0                	mov    eax,esi
c0021643:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021647:	50                   	push   eax
c0021648:	56                   	push   esi
c0021649:	c1 e6 0b             	shl    esi,0xb
c002164c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0021650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021658:	56                   	push   esi
c0021659:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002165d:	50                   	push   eax
c002165e:	53                   	push   ebx
c002165f:	e8 c4 fa ff ff       	call   c0021128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021664:	83 c4 20             	add    esp,0x20
c0021667:	85 c0                	test   eax,eax
c0021669:	74 14                	je     c002167f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002166b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002166f:	83 ec 0c             	sub    esp,0xc
c0021672:	53                   	push   ebx
c0021673:	e8 ce fd ff ff       	call   c0021446 <SATAPI::detectMedia()>
c0021678:	83 c4 10             	add    esp,0x10
c002167b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002167f:	83 c4 30             	add    esp,0x30
c0021682:	5b                   	pop    ebx
c0021683:	5e                   	pop    esi
c0021684:	5f                   	pop    edi
c0021685:	c3                   	ret    
c0021686:	66 90                	xchg   ax,ax

c0021688 <APICTimer::close(int, int, void*)>:
c0021688:	b8 00 00 00 00       	mov    eax,0x0
c002168d:	c3                   	ret    
c002168e:	66 90                	xchg   ax,ax

c0021690 <apicTimerHandler(regs*, void*)>:
c0021690:	83 ec 0c             	sub    esp,0xc
c0021693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021697:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021699:	b8 10 27 00 00       	mov    eax,0x2710
c002169e:	ba 00 00 00 00       	mov    edx,0x0
c00216a3:	f7 f1                	div    ecx
c00216a5:	83 ec 0c             	sub    esp,0xc
c00216a8:	50                   	push   eax
c00216a9:	e8 46 9a fe ff       	call   c000b0f4 <timerHandler(unsigned int)>
c00216ae:	83 c4 10             	add    esp,0x10
c00216b1:	90                   	nop
c00216b2:	83 c4 0c             	add    esp,0xc
c00216b5:	c3                   	ret    
c00216b6:	66 90                	xchg   ax,ax

c00216b8 <APICTimer::open(int, int, void*)>:
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00216c1:	83 c0 24             	add    eax,0x24
c00216c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00216c6:	83 ec 08             	sub    esp,0x8
c00216c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d1:	ff d0                	call   eax
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00216de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00216e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00216ec:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00216f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00216f6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	51                   	push   ecx
c0021700:	6a 01                	push   0x1
c0021702:	68 90 16 02 c0       	push   0xc0021690
c0021707:	52                   	push   edx
c0021708:	50                   	push   eax
c0021709:	e8 f2 82 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002170e:	83 c4 20             	add    esp,0x20
c0021711:	89 c2                	mov    edx,eax
c0021713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021717:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002171d:	b8 00 00 00 00       	mov    eax,0x0
c0021722:	83 c4 0c             	add    esp,0xc
c0021725:	c3                   	ret    
c0021726:	66 90                	xchg   ax,ax

c0021728 <APICTimer::write(int)>:
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	83 ec 0c             	sub    esp,0xc
c002172e:	68 0c 67 02 c0       	push   0xc002670c
c0021733:	e8 68 e5 fe ff       	call   c000fca0 <KePanic(char const*)>
c0021738:	83 c4 10             	add    esp,0x10
c002173b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021743:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021749:	90                   	nop
c002174a:	83 c4 0c             	add    esp,0xc
c002174d:	c3                   	ret    
c002174e:	66 90                	xchg   ax,ax

c0021750 <APICTimer::APICTimer()>:
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021757:	83 ec 08             	sub    esp,0x8
c002175a:	68 1c 67 02 c0       	push   0xc002671c
c002175f:	50                   	push   eax
c0021760:	e8 c3 98 fe ff       	call   c000b028 <Timer::Timer(char const*)>
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	ba 30 67 02 c0       	mov    edx,0xc0026730
c002176d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021771:	89 10                	mov    DWORD PTR [eax],edx
c0021773:	90                   	nop
c0021774:	83 c4 0c             	add    esp,0xc
c0021777:	c3                   	ret    

c0021778 <PIT::write(int)>:
c0021778:	83 ec 10             	sub    esp,0x10
c002177b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002177f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021783:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002178d:	a3 b8 fd 02 c0       	mov    ds:0xc002fdb8,eax
c0021792:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021797:	89 c2                	mov    edx,eax
c0021799:	c1 fa 1f             	sar    edx,0x1f
c002179c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00217a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217a4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00217ab:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00217b0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00217b4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00217b9:	ee                   	out    dx,al
c00217ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217be:	0f b6 c0             	movzx  eax,al
c00217c1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00217c8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00217cc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00217d0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00217d5:	ee                   	out    dx,al
c00217d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217da:	c1 f8 08             	sar    eax,0x8
c00217dd:	0f b6 c0             	movzx  eax,al
c00217e0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00217e7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00217eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00217ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00217f4:	ee                   	out    dx,al
c00217f5:	90                   	nop
c00217f6:	83 c4 10             	add    esp,0x10
c00217f9:	c3                   	ret    
c00217fa:	66 90                	xchg   ax,ax

c00217fc <pitHandler(regs*, void*)>:
c00217fc:	83 ec 0c             	sub    esp,0xc
c00217ff:	8b 0d b8 fd 02 c0    	mov    ecx,DWORD PTR ds:0xc002fdb8
c0021805:	b8 10 27 00 00       	mov    eax,0x2710
c002180a:	89 c2                	mov    edx,eax
c002180c:	c1 fa 1f             	sar    edx,0x1f
c002180f:	f7 f9                	idiv   ecx
c0021811:	83 ec 0c             	sub    esp,0xc
c0021814:	50                   	push   eax
c0021815:	e8 da 98 fe ff       	call   c000b0f4 <timerHandler(unsigned int)>
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	90                   	nop
c002181e:	83 c4 0c             	add    esp,0xc
c0021821:	c3                   	ret    
c0021822:	66 90                	xchg   ax,ax

c0021824 <PIT::open(int, int, void*)>:
c0021824:	83 ec 0c             	sub    esp,0xc
c0021827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002182b:	8b 00                	mov    eax,DWORD PTR [eax]
c002182d:	83 c0 24             	add    eax,0x24
c0021830:	8b 00                	mov    eax,DWORD PTR [eax]
c0021832:	83 ec 08             	sub    esp,0x8
c0021835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002183d:	ff d0                	call   eax
c002183f:	83 c4 10             	add    esp,0x10
c0021842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021846:	83 ec 0c             	sub    esp,0xc
c0021849:	6a 00                	push   0x0
c002184b:	6a 01                	push   0x1
c002184d:	68 fc 17 02 c0       	push   0xc00217fc
c0021852:	6a 00                	push   0x0
c0021854:	50                   	push   eax
c0021855:	e8 a6 81 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002185a:	83 c4 20             	add    esp,0x20
c002185d:	89 c2                	mov    edx,eax
c002185f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021863:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021869:	b8 00 00 00 00       	mov    eax,0x0
c002186e:	83 c4 0c             	add    esp,0xc
c0021871:	c3                   	ret    
c0021872:	66 90                	xchg   ax,ax

c0021874 <PIT::close(int, int, void*)>:
c0021874:	83 ec 0c             	sub    esp,0xc
c0021877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002187b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021889:	6a 01                	push   0x1
c002188b:	68 fc 17 02 c0       	push   0xc00217fc
c0021890:	6a 00                	push   0x0
c0021892:	50                   	push   eax
c0021893:	e8 9e 81 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021898:	83 c4 10             	add    esp,0x10
c002189b:	b8 00 00 00 00       	mov    eax,0x0
c00218a0:	83 c4 0c             	add    esp,0xc
c00218a3:	c3                   	ret    

c00218a4 <PIT::PIT()>:
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ab:	83 ec 08             	sub    esp,0x8
c00218ae:	68 58 67 02 c0       	push   0xc0026758
c00218b3:	50                   	push   eax
c00218b4:	e8 6f 97 fe ff       	call   c000b028 <Timer::Timer(char const*)>
c00218b9:	83 c4 10             	add    esp,0x10
c00218bc:	ba 80 67 02 c0       	mov    edx,0xc0026780
c00218c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c5:	89 10                	mov    DWORD PTR [eax],edx
c00218c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218d1:	0f b6 d0             	movzx  edx,al
c00218d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00218df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218e9:	0f b6 d0             	movzx  edx,al
c00218ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00218f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218ff:	8d 50 01             	lea    edx,[eax+0x1]
c0021902:	88 d1                	mov    cl,dl
c0021904:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021908:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002190e:	0f b6 d0             	movzx  edx,al
c0021911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021915:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021919:	83 e1 3f             	and    ecx,0x3f
c002191c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021920:	90                   	nop
c0021921:	83 c4 0c             	add    esp,0xc
c0021924:	c3                   	ret    
c0021925:	66 90                	xchg   ax,ax
c0021927:	66 90                	xchg   ax,ax
c0021929:	66 90                	xchg   ax,ax
c002192b:	66 90                	xchg   ax,ax
c002192d:	66 90                	xchg   ax,ax
c002192f:	90                   	nop

c0021930 <avxDetect>:
c0021930:	b8 01 00 00 00       	mov    eax,0x1
c0021935:	0f a2                	cpuid  
c0021937:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002193d:	74 15                	je     c0021954 <avxDetect.noAVX>
c002193f:	b8 01 00 00 00       	mov    eax,0x1
c0021944:	0f a2                	cpuid  
c0021946:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002194c:	74 06                	je     c0021954 <avxDetect.noAVX>
c002194e:	b8 01 00 00 00       	mov    eax,0x1
c0021953:	c3                   	ret    

c0021954 <avxDetect.noAVX>:
c0021954:	b8 00 00 00 00       	mov    eax,0x0
c0021959:	c3                   	ret    

c002195a <avxSave>:
c002195a:	53                   	push   ebx
c002195b:	52                   	push   edx
c002195c:	31 c0                	xor    eax,eax
c002195e:	48                   	dec    eax
c002195f:	89 c2                	mov    edx,eax
c0021961:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021965:	0f ae 23             	xsave  [ebx]
c0021968:	5a                   	pop    edx
c0021969:	5b                   	pop    ebx
c002196a:	c3                   	ret    

c002196b <avxLoad>:
c002196b:	53                   	push   ebx
c002196c:	52                   	push   edx
c002196d:	31 c0                	xor    eax,eax
c002196f:	48                   	dec    eax
c0021970:	89 c2                	mov    edx,eax
c0021972:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021976:	0f ae 2b             	xrstor [ebx]
c0021979:	5a                   	pop    edx
c002197a:	5b                   	pop    ebx
c002197b:	c3                   	ret    

c002197c <avxInit>:
c002197c:	e8 17 03 00 00       	call   c0021c98 <sseInit>
c0021981:	50                   	push   eax
c0021982:	51                   	push   ecx
c0021983:	0f 20 e0             	mov    eax,cr4
c0021986:	0d 00 00 04 00       	or     eax,0x40000
c002198b:	0f 22 e0             	mov    cr4,eax
c002198e:	31 c9                	xor    ecx,ecx
c0021990:	0f 01 d0             	xgetbv 
c0021993:	0d 07 00 00 00       	or     eax,0x7
c0021998:	0f 01 d1             	xsetbv 
c002199b:	59                   	pop    ecx
c002199c:	58                   	pop    eax
c002199d:	c3                   	ret    

c002199e <avxClose>:
c002199e:	c3                   	ret    
c002199f:	90                   	nop

c00219a0 <isr0>:
c00219a0:	fa                   	cli    
c00219a1:	68 00 00 00 00       	push   0x0
c00219a6:	68 00 00 00 00       	push   0x0
c00219ab:	e9 56 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219b0 <isr1>:
c00219b0:	fa                   	cli    
c00219b1:	6a 00                	push   0x0
c00219b3:	6a 01                	push   0x1
c00219b5:	e9 4c 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219ba <isr2>:
c00219ba:	fa                   	cli    
c00219bb:	6a 00                	push   0x0
c00219bd:	6a 02                	push   0x2
c00219bf:	e9 42 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219c4 <isr3>:
c00219c4:	fa                   	cli    
c00219c5:	6a 00                	push   0x0
c00219c7:	6a 03                	push   0x3
c00219c9:	e9 38 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219ce <isr4>:
c00219ce:	fa                   	cli    
c00219cf:	6a 00                	push   0x0
c00219d1:	6a 04                	push   0x4
c00219d3:	e9 2e 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219d8 <isr5>:
c00219d8:	fa                   	cli    
c00219d9:	6a 00                	push   0x0
c00219db:	6a 05                	push   0x5
c00219dd:	e9 24 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219e2 <isr6>:
c00219e2:	fa                   	cli    
c00219e3:	6a 00                	push   0x0
c00219e5:	6a 06                	push   0x6
c00219e7:	e9 1a 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219ec <isr7>:
c00219ec:	fa                   	cli    
c00219ed:	6a 00                	push   0x0
c00219ef:	6a 07                	push   0x7
c00219f1:	e9 10 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219f6 <isr8>:
c00219f6:	fa                   	cli    
c00219f7:	6a 08                	push   0x8
c00219f9:	e9 08 01 00 00       	jmp    c0021b06 <int_common_stub>

c00219fe <isr9>:
c00219fe:	fa                   	cli    
c00219ff:	6a 00                	push   0x0
c0021a01:	6a 09                	push   0x9
c0021a03:	e9 fe 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a08 <isr10>:
c0021a08:	fa                   	cli    
c0021a09:	6a 0a                	push   0xa
c0021a0b:	e9 f6 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a10 <isr11>:
c0021a10:	fa                   	cli    
c0021a11:	6a 0b                	push   0xb
c0021a13:	e9 ee 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a18 <isr12>:
c0021a18:	fa                   	cli    
c0021a19:	6a 0c                	push   0xc
c0021a1b:	e9 e6 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a20 <isr13>:
c0021a20:	fa                   	cli    
c0021a21:	6a 0d                	push   0xd
c0021a23:	53                   	push   ebx
c0021a24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021a28:	81 fb cb 1b 02 c0    	cmp    ebx,0xc0021bcb
c0021a2e:	5b                   	pop    ebx
c0021a2f:	0f 84 98 01 00 00    	je     c0021bcd <finishSignal2>
c0021a35:	e9 cc 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a3a <isr14>:
c0021a3a:	fa                   	cli    
c0021a3b:	6a 0e                	push   0xe
c0021a3d:	e9 c4 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a42 <isr15>:
c0021a42:	fa                   	cli    
c0021a43:	6a 00                	push   0x0
c0021a45:	6a 0f                	push   0xf
c0021a47:	e9 ba 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a4c <isr16>:
c0021a4c:	fa                   	cli    
c0021a4d:	6a 00                	push   0x0
c0021a4f:	6a 10                	push   0x10
c0021a51:	e9 b0 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a56 <isr17>:
c0021a56:	fa                   	cli    
c0021a57:	6a 00                	push   0x0
c0021a59:	6a 11                	push   0x11
c0021a5b:	e9 a6 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a60 <isr18>:
c0021a60:	fa                   	cli    
c0021a61:	6a 00                	push   0x0
c0021a63:	6a 12                	push   0x12
c0021a65:	e9 9c 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a6a <irq3>:
c0021a6a:	fa                   	cli    
c0021a6b:	6a 00                	push   0x0
c0021a6d:	6a 23                	push   0x23
c0021a6f:	e9 92 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a74 <irq4>:
c0021a74:	fa                   	cli    
c0021a75:	6a 00                	push   0x0
c0021a77:	6a 24                	push   0x24
c0021a79:	e9 88 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a7e <irq5>:
c0021a7e:	fa                   	cli    
c0021a7f:	6a 00                	push   0x0
c0021a81:	6a 25                	push   0x25
c0021a83:	e9 7e 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a88 <irq6>:
c0021a88:	fa                   	cli    
c0021a89:	6a 00                	push   0x0
c0021a8b:	6a 26                	push   0x26
c0021a8d:	e9 74 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a92 <irq7>:
c0021a92:	fa                   	cli    
c0021a93:	6a 00                	push   0x0
c0021a95:	6a 27                	push   0x27
c0021a97:	e9 6a 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021a9c <irq8>:
c0021a9c:	fa                   	cli    
c0021a9d:	6a 00                	push   0x0
c0021a9f:	6a 28                	push   0x28
c0021aa1:	e9 60 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021aa6 <irq9>:
c0021aa6:	fa                   	cli    
c0021aa7:	6a 00                	push   0x0
c0021aa9:	6a 29                	push   0x29
c0021aab:	e9 56 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021ab0 <irq10>:
c0021ab0:	fa                   	cli    
c0021ab1:	6a 00                	push   0x0
c0021ab3:	6a 2a                	push   0x2a
c0021ab5:	e9 4c 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021aba <irq11>:
c0021aba:	fa                   	cli    
c0021abb:	6a 00                	push   0x0
c0021abd:	6a 2b                	push   0x2b
c0021abf:	e9 42 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021ac4 <irq12>:
c0021ac4:	fa                   	cli    
c0021ac5:	6a 00                	push   0x0
c0021ac7:	6a 2c                	push   0x2c
c0021ac9:	e9 38 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021ace <irq13>:
c0021ace:	fa                   	cli    
c0021acf:	6a 00                	push   0x0
c0021ad1:	6a 2d                	push   0x2d
c0021ad3:	e9 2e 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021ad8 <irq14>:
c0021ad8:	fa                   	cli    
c0021ad9:	6a 00                	push   0x0
c0021adb:	6a 2e                	push   0x2e
c0021add:	e9 24 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021ae2 <irq15>:
c0021ae2:	fa                   	cli    
c0021ae3:	6a 00                	push   0x0
c0021ae5:	6a 2f                	push   0x2f
c0021ae7:	e9 1a 00 00 00       	jmp    c0021b06 <int_common_stub>

c0021aec <irq1>:
c0021aec:	fa                   	cli    
c0021aed:	6a 00                	push   0x0
c0021aef:	6a 21                	push   0x21
c0021af1:	eb 13                	jmp    c0021b06 <int_common_stub>

c0021af3 <irq2>:
c0021af3:	fa                   	cli    
c0021af4:	6a 00                	push   0x0
c0021af6:	6a 22                	push   0x22
c0021af8:	eb 0c                	jmp    c0021b06 <int_common_stub>

c0021afa <isr96>:
c0021afa:	6a 00                	push   0x0
c0021afc:	6a 60                	push   0x60
c0021afe:	fb                   	sti    
c0021aff:	eb 05                	jmp    c0021b06 <int_common_stub>

c0021b01 <irq0>:
c0021b01:	fa                   	cli    
c0021b02:	6a 00                	push   0x0
c0021b04:	6a 20                	push   0x20

c0021b06 <int_common_stub>:
c0021b06:	60                   	pusha  
c0021b07:	1e                   	push   ds
c0021b08:	06                   	push   es
c0021b09:	0f a0                	push   fs
c0021b0b:	0f a8                	push   gs
c0021b0d:	66 b8 10 00          	mov    ax,0x10
c0021b11:	66 8e d8             	mov    ds,ax
c0021b14:	66 8e c0             	mov    es,ax
c0021b17:	66 8e e0             	mov    fs,ax
c0021b1a:	66 8e e8             	mov    gs,ax
c0021b1d:	54                   	push   esp
c0021b1e:	fc                   	cld    
c0021b1f:	e8 48 95 ff ff       	call   c001b06c <int_handler>
c0021b24:	81 c4 04 00 00 00    	add    esp,0x4
c0021b2a:	e8 3c f5 fe ff       	call   c001106b <KiCheckSignalZ>
c0021b2f:	85 c0                	test   eax,eax
c0021b31:	75 0e                	jne    c0021b41 <doSignals>
c0021b33:	0f a9                	pop    gs
c0021b35:	0f a1                	pop    fs
c0021b37:	07                   	pop    es
c0021b38:	1f                   	pop    ds
c0021b39:	61                   	popa   
c0021b3a:	81 c4 08 00 00 00    	add    esp,0x8
c0021b40:	cf                   	iret   

c0021b41 <doSignals>:
c0021b41:	0f a9                	pop    gs
c0021b43:	0f a1                	pop    fs
c0021b45:	07                   	pop    es
c0021b46:	1f                   	pop    ds
c0021b47:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021b4c:	61                   	popa   
c0021b4d:	53                   	push   ebx
c0021b4e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021b54:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021b57:	5b                   	pop    ebx
c0021b58:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021b5d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0021b60:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0021b63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021b66:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021b69:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021b6c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021b6f:	81 c4 08 00 00 00    	add    esp,0x8
c0021b75:	5e                   	pop    esi
c0021b76:	5b                   	pop    ebx
c0021b77:	59                   	pop    ecx
c0021b78:	5a                   	pop    edx
c0021b79:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021b7c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021b7f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021b82:	52                   	push   edx
c0021b83:	51                   	push   ecx
c0021b84:	53                   	push   ebx
c0021b85:	56                   	push   esi
c0021b86:	81 ec 08 00 00 00    	sub    esp,0x8
c0021b8c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021b8f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021b92:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021b95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021b98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021b9b:	60                   	pusha  
c0021b9c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021ba2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021ba5:	89 e3                	mov    ebx,esp
c0021ba7:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021baa:	52                   	push   edx
c0021bab:	68 cb 1b 02 c0       	push   0xc0021bcb
c0021bb0:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021bb3:	89 dc                	mov    esp,ebx
c0021bb5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021bb8:	68 23 00 00 00       	push   0x23
c0021bbd:	51                   	push   ecx
c0021bbe:	68 02 02 00 00       	push   0x202
c0021bc3:	68 1b 00 00 00       	push   0x1b
c0021bc8:	ff 36                	push   DWORD PTR [esi]
c0021bca:	cf                   	iret   

c0021bcb <finishSignal>:
c0021bcb:	cd 0f                	int    0xf

c0021bcd <finishSignal2>:
c0021bcd:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021bd3:	e8 1f f5 fe ff       	call   c00110f7 <KiFinishSignalZ>
c0021bd8:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021bde:	68 23 00 00 00       	push   0x23
c0021be3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021be6:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021be9:	68 1b 00 00 00       	push   0x1b
c0021bee:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021bf1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bf4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021bf7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021bfa:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021bfd:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021c00:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021c03:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021c06:	cf                   	iret   
c0021c07:	90                   	nop

c0021c08 <irq16>:
c0021c08:	fa                   	cli    
c0021c09:	6a 00                	push   0x0
c0021c0b:	6a 30                	push   0x30
c0021c0d:	e9 f4 fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c12 <irq17>:
c0021c12:	fa                   	cli    
c0021c13:	6a 00                	push   0x0
c0021c15:	6a 31                	push   0x31
c0021c17:	e9 ea fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c1c <irq18>:
c0021c1c:	fa                   	cli    
c0021c1d:	6a 00                	push   0x0
c0021c1f:	6a 32                	push   0x32
c0021c21:	e9 e0 fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c26 <irq19>:
c0021c26:	fa                   	cli    
c0021c27:	6a 00                	push   0x0
c0021c29:	6a 33                	push   0x33
c0021c2b:	e9 d6 fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c30 <irq20>:
c0021c30:	fa                   	cli    
c0021c31:	6a 00                	push   0x0
c0021c33:	6a 34                	push   0x34
c0021c35:	e9 cc fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c3a <irq21>:
c0021c3a:	fa                   	cli    
c0021c3b:	6a 00                	push   0x0
c0021c3d:	6a 35                	push   0x35
c0021c3f:	e9 c2 fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c44 <irq22>:
c0021c44:	fa                   	cli    
c0021c45:	6a 00                	push   0x0
c0021c47:	6a 36                	push   0x36
c0021c49:	e9 b8 fe ff ff       	jmp    c0021b06 <int_common_stub>

c0021c4e <irq23>:
c0021c4e:	fa                   	cli    
c0021c4f:	6a 00                	push   0x0
c0021c51:	6a 37                	push   0x37
c0021c53:	e9 ae fe ff ff       	jmp    c0021b06 <int_common_stub>
c0021c58:	66 90                	xchg   ax,ax
c0021c5a:	66 90                	xchg   ax,ax
c0021c5c:	66 90                	xchg   ax,ax
c0021c5e:	66 90                	xchg   ax,ax

c0021c60 <i386GetRDRAND>:
c0021c60:	b9 64 00 00 00       	mov    ecx,0x64

c0021c65 <retry>:
c0021c65:	0f c7 f0             	rdrand eax
c0021c68:	72 05                	jb     c0021c6f <retry.done>
c0021c6a:	e2 f9                	loop   c0021c65 <retry>

c0021c6c <retry.fail>:
c0021c6c:	31 c0                	xor    eax,eax
c0021c6e:	c3                   	ret    

c0021c6f <retry.done>:
c0021c6f:	c3                   	ret    

c0021c70 <sseDetect>:
c0021c70:	b8 01 00 00 00       	mov    eax,0x1
c0021c75:	0f a2                	cpuid  
c0021c77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021c7d:	74 06                	je     c0021c85 <sseDetect.noSSE>
c0021c7f:	b8 01 00 00 00       	mov    eax,0x1
c0021c84:	c3                   	ret    

c0021c85 <sseDetect.noSSE>:
c0021c85:	31 c0                	xor    eax,eax
c0021c87:	c3                   	ret    

c0021c88 <sseSave>:
c0021c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8c:	0f ae 00             	fxsave [eax]
c0021c8f:	c3                   	ret    

c0021c90 <sseLoad>:
c0021c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c94:	0f ae 08             	fxrstor [eax]
c0021c97:	c3                   	ret    

c0021c98 <sseInit>:
c0021c98:	e8 48 00 00 00       	call   c0021ce5 <x87Init>
c0021c9d:	0f 20 e0             	mov    eax,cr4
c0021ca0:	66 0d 00 06          	or     ax,0x600
c0021ca4:	0f 22 e0             	mov    cr4,eax
c0021ca7:	c3                   	ret    

c0021ca8 <sseClose>:
c0021ca8:	c3                   	ret    
c0021ca9:	66 90                	xchg   ax,ax
c0021cab:	66 90                	xchg   ax,ax
c0021cad:	66 90                	xchg   ax,ax
c0021caf:	90                   	nop

c0021cb0 <value_37F>:
c0021cb0:	7f 03                	jg     c0021cb5 <value_37A+0x1>

c0021cb2 <value_37E>:
c0021cb2:	7e 03                	jle    c0021cb7 <x87Detect+0x1>

c0021cb4 <value_37A>:
c0021cb4:	7a 03                	jp     c0021cb9 <x87Detect+0x3>

c0021cb6 <x87Detect>:
c0021cb6:	53                   	push   ebx
c0021cb7:	51                   	push   ecx
c0021cb8:	52                   	push   edx
c0021cb9:	b8 01 00 00 00       	mov    eax,0x1
c0021cbe:	0f a2                	cpuid  
c0021cc0:	f7 c2 01 00 00 00    	test   edx,0x1
c0021cc6:	74 06                	je     c0021cce <x87Detect.nox87>
c0021cc8:	b8 01 00 00 00       	mov    eax,0x1
c0021ccd:	c3                   	ret    

c0021cce <x87Detect.nox87>:
c0021cce:	b8 00 00 00 00       	mov    eax,0x0
c0021cd3:	5a                   	pop    edx
c0021cd4:	59                   	pop    ecx
c0021cd5:	5b                   	pop    ebx
c0021cd6:	c3                   	ret    

c0021cd7 <x87Save>:
c0021cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cdb:	dd 30                	fnsave [eax]
c0021cdd:	c3                   	ret    

c0021cde <x87Load>:
c0021cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce2:	dd 20                	frstor [eax]
c0021ce4:	c3                   	ret    

c0021ce5 <x87Init>:
c0021ce5:	0f 20 c0             	mov    eax,cr0
c0021ce8:	66 25 fb ff          	and    ax,0xfffb
c0021cec:	66 0d 22 00          	or     ax,0x22
c0021cf0:	0f 22 c0             	mov    cr0,eax
c0021cf3:	db e3                	fninit 
c0021cf5:	0f 06                	clts   
c0021cf7:	d9 2d b4 1c 02 c0    	fldcw  WORD PTR ds:0xc0021cb4
c0021cfd:	c3                   	ret    

c0021cfe <x87Close>:
c0021cfe:	c3                   	ret    
c0021cff:	90                   	nop

c0021d00 <__do_global_ctors_aux>:
c0021d00:	a1 b4 2c 02 c0       	mov    eax,ds:0xc0022cb4
c0021d05:	83 f8 ff             	cmp    eax,0xffffffff
c0021d08:	74 1a                	je     c0021d24 <__do_global_ctors_aux+0x24>
c0021d0a:	55                   	push   ebp
c0021d0b:	89 e5                	mov    ebp,esp
c0021d0d:	53                   	push   ebx
c0021d0e:	52                   	push   edx
c0021d0f:	bb b4 2c 02 c0       	mov    ebx,0xc0022cb4
c0021d14:	ff d0                	call   eax
c0021d16:	83 eb 04             	sub    ebx,0x4
c0021d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d1b:	83 f8 ff             	cmp    eax,0xffffffff
c0021d1e:	75 f4                	jne    c0021d14 <__do_global_ctors_aux+0x14>
c0021d20:	58                   	pop    eax
c0021d21:	5b                   	pop    ebx
c0021d22:	5d                   	pop    ebp
c0021d23:	c3                   	ret    
c0021d24:	c3                   	ret    
c0021d25:	66 90                	xchg   ax,ax
c0021d27:	90                   	nop

c0021d28 <__divdi3>:
c0021d28:	55                   	push   ebp
c0021d29:	57                   	push   edi
c0021d2a:	56                   	push   esi
c0021d2b:	53                   	push   ebx
c0021d2c:	83 ec 1c             	sub    esp,0x1c
c0021d2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021d33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021d37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021d3a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021d42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021d46:	85 db                	test   ebx,ebx
c0021d48:	0f 88 8e 00 00 00    	js     c0021ddc <__divdi3+0xb4>
c0021d4e:	89 dd                	mov    ebp,ebx
c0021d50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021d58:	89 d3                	mov    ebx,edx
c0021d5a:	85 d2                	test   edx,edx
c0021d5c:	79 0d                	jns    c0021d6b <__divdi3+0x43>
c0021d5e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021d62:	f7 d8                	neg    eax
c0021d64:	83 d2 00             	adc    edx,0x0
c0021d67:	f7 da                	neg    edx
c0021d69:	89 d3                	mov    ebx,edx
c0021d6b:	89 c7                	mov    edi,eax
c0021d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021d70:	85 db                	test   ebx,ebx
c0021d72:	75 48                	jne    c0021dbc <__divdi3+0x94>
c0021d74:	39 ef                	cmp    edi,ebp
c0021d76:	76 24                	jbe    c0021d9c <__divdi3+0x74>
c0021d78:	89 ea                	mov    edx,ebp
c0021d7a:	f7 f7                	div    edi
c0021d7c:	89 c1                	mov    ecx,eax
c0021d7e:	31 f6                	xor    esi,esi
c0021d80:	89 c8                	mov    eax,ecx
c0021d82:	89 f2                	mov    edx,esi
c0021d84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d88:	85 c9                	test   ecx,ecx
c0021d8a:	74 07                	je     c0021d93 <__divdi3+0x6b>
c0021d8c:	f7 d8                	neg    eax
c0021d8e:	83 d2 00             	adc    edx,0x0
c0021d91:	f7 da                	neg    edx
c0021d93:	83 c4 1c             	add    esp,0x1c
c0021d96:	5b                   	pop    ebx
c0021d97:	5e                   	pop    esi
c0021d98:	5f                   	pop    edi
c0021d99:	5d                   	pop    ebp
c0021d9a:	c3                   	ret    
c0021d9b:	90                   	nop
c0021d9c:	85 ff                	test   edi,edi
c0021d9e:	75 0b                	jne    c0021dab <__divdi3+0x83>
c0021da0:	b8 01 00 00 00       	mov    eax,0x1
c0021da5:	31 d2                	xor    edx,edx
c0021da7:	f7 f3                	div    ebx
c0021da9:	89 c7                	mov    edi,eax
c0021dab:	31 d2                	xor    edx,edx
c0021dad:	89 e8                	mov    eax,ebp
c0021daf:	f7 f7                	div    edi
c0021db1:	89 c6                	mov    esi,eax
c0021db3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021db6:	f7 f7                	div    edi
c0021db8:	89 c1                	mov    ecx,eax
c0021dba:	eb c4                	jmp    c0021d80 <__divdi3+0x58>
c0021dbc:	39 eb                	cmp    ebx,ebp
c0021dbe:	77 3c                	ja     c0021dfc <__divdi3+0xd4>
c0021dc0:	0f bd f3             	bsr    esi,ebx
c0021dc3:	83 f6 1f             	xor    esi,0x1f
c0021dc6:	75 40                	jne    c0021e08 <__divdi3+0xe0>
c0021dc8:	39 eb                	cmp    ebx,ebp
c0021dca:	72 09                	jb     c0021dd5 <__divdi3+0xad>
c0021dcc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021dcf:	0f 87 97 00 00 00    	ja     c0021e6c <__divdi3+0x144>
c0021dd5:	b9 01 00 00 00       	mov    ecx,0x1
c0021dda:	eb a4                	jmp    c0021d80 <__divdi3+0x58>
c0021ddc:	f7 d9                	neg    ecx
c0021dde:	83 d3 00             	adc    ebx,0x0
c0021de1:	f7 db                	neg    ebx
c0021de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021de6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021dea:	89 dd                	mov    ebp,ebx
c0021dec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021df4:	e9 5f ff ff ff       	jmp    c0021d58 <__divdi3+0x30>
c0021df9:	8d 76 00             	lea    esi,[esi+0x0]
c0021dfc:	31 f6                	xor    esi,esi
c0021dfe:	31 c9                	xor    ecx,ecx
c0021e00:	e9 7b ff ff ff       	jmp    c0021d80 <__divdi3+0x58>
c0021e05:	8d 76 00             	lea    esi,[esi+0x0]
c0021e08:	b8 20 00 00 00       	mov    eax,0x20
c0021e0d:	29 f0                	sub    eax,esi
c0021e0f:	89 f1                	mov    ecx,esi
c0021e11:	d3 e3                	shl    ebx,cl
c0021e13:	89 fa                	mov    edx,edi
c0021e15:	88 c1                	mov    cl,al
c0021e17:	d3 ea                	shr    edx,cl
c0021e19:	09 da                	or     edx,ebx
c0021e1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e1f:	89 f1                	mov    ecx,esi
c0021e21:	d3 e7                	shl    edi,cl
c0021e23:	89 eb                	mov    ebx,ebp
c0021e25:	88 c1                	mov    cl,al
c0021e27:	d3 eb                	shr    ebx,cl
c0021e29:	89 f1                	mov    ecx,esi
c0021e2b:	d3 e5                	shl    ebp,cl
c0021e2d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021e30:	88 c1                	mov    cl,al
c0021e32:	d3 ea                	shr    edx,cl
c0021e34:	09 d5                	or     ebp,edx
c0021e36:	89 e8                	mov    eax,ebp
c0021e38:	89 da                	mov    edx,ebx
c0021e3a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021e3e:	89 d3                	mov    ebx,edx
c0021e40:	89 c5                	mov    ebp,eax
c0021e42:	f7 e7                	mul    edi
c0021e44:	39 d3                	cmp    ebx,edx
c0021e46:	72 18                	jb     c0021e60 <__divdi3+0x138>
c0021e48:	74 0a                	je     c0021e54 <__divdi3+0x12c>
c0021e4a:	89 e9                	mov    ecx,ebp
c0021e4c:	31 f6                	xor    esi,esi
c0021e4e:	e9 2d ff ff ff       	jmp    c0021d80 <__divdi3+0x58>
c0021e53:	90                   	nop
c0021e54:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021e57:	89 f1                	mov    ecx,esi
c0021e59:	d3 e7                	shl    edi,cl
c0021e5b:	39 c7                	cmp    edi,eax
c0021e5d:	73 eb                	jae    c0021e4a <__divdi3+0x122>
c0021e5f:	90                   	nop
c0021e60:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021e63:	31 f6                	xor    esi,esi
c0021e65:	e9 16 ff ff ff       	jmp    c0021d80 <__divdi3+0x58>
c0021e6a:	66 90                	xchg   ax,ax
c0021e6c:	31 c9                	xor    ecx,ecx
c0021e6e:	e9 0d ff ff ff       	jmp    c0021d80 <__divdi3+0x58>
c0021e73:	90                   	nop

c0021e74 <__moddi3>:
c0021e74:	55                   	push   ebp
c0021e75:	57                   	push   edi
c0021e76:	56                   	push   esi
c0021e77:	53                   	push   ebx
c0021e78:	83 ec 2c             	sub    esp,0x2c
c0021e7b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021e7f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021e83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021e87:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021e8b:	85 db                	test   ebx,ebx
c0021e8d:	0f 88 85 00 00 00    	js     c0021f18 <__moddi3+0xa4>
c0021e93:	89 de                	mov    esi,ebx
c0021e95:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021e9d:	89 d7                	mov    edi,edx
c0021e9f:	85 d2                	test   edx,edx
c0021ea1:	79 09                	jns    c0021eac <__moddi3+0x38>
c0021ea3:	f7 d8                	neg    eax
c0021ea5:	83 d2 00             	adc    edx,0x0
c0021ea8:	f7 da                	neg    edx
c0021eaa:	89 d7                	mov    edi,edx
c0021eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021eb0:	89 cd                	mov    ebp,ecx
c0021eb2:	85 ff                	test   edi,edi
c0021eb4:	75 52                	jne    c0021f08 <__moddi3+0x94>
c0021eb6:	89 c3                	mov    ebx,eax
c0021eb8:	39 f0                	cmp    eax,esi
c0021eba:	76 24                	jbe    c0021ee0 <__moddi3+0x6c>
c0021ebc:	89 c8                	mov    eax,ecx
c0021ebe:	89 f2                	mov    edx,esi
c0021ec0:	f7 f3                	div    ebx
c0021ec2:	89 d6                	mov    esi,edx
c0021ec4:	89 f0                	mov    eax,esi
c0021ec6:	31 d2                	xor    edx,edx
c0021ec8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ecc:	85 c9                	test   ecx,ecx
c0021ece:	74 07                	je     c0021ed7 <__moddi3+0x63>
c0021ed0:	f7 d8                	neg    eax
c0021ed2:	83 d2 00             	adc    edx,0x0
c0021ed5:	f7 da                	neg    edx
c0021ed7:	83 c4 2c             	add    esp,0x2c
c0021eda:	5b                   	pop    ebx
c0021edb:	5e                   	pop    esi
c0021edc:	5f                   	pop    edi
c0021edd:	5d                   	pop    ebp
c0021ede:	c3                   	ret    
c0021edf:	90                   	nop
c0021ee0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021ee4:	85 db                	test   ebx,ebx
c0021ee6:	75 0d                	jne    c0021ef5 <__moddi3+0x81>
c0021ee8:	b8 01 00 00 00       	mov    eax,0x1
c0021eed:	31 d2                	xor    edx,edx
c0021eef:	f7 f7                	div    edi
c0021ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ef5:	89 f0                	mov    eax,esi
c0021ef7:	31 d2                	xor    edx,edx
c0021ef9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021efd:	f7 f7                	div    edi
c0021eff:	89 e8                	mov    eax,ebp
c0021f01:	f7 f7                	div    edi
c0021f03:	89 d6                	mov    esi,edx
c0021f05:	eb bd                	jmp    c0021ec4 <__moddi3+0x50>
c0021f07:	90                   	nop
c0021f08:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021f0c:	39 f7                	cmp    edi,esi
c0021f0e:	76 20                	jbe    c0021f30 <__moddi3+0xbc>
c0021f10:	89 c8                	mov    eax,ecx
c0021f12:	89 f2                	mov    edx,esi
c0021f14:	eb b2                	jmp    c0021ec8 <__moddi3+0x54>
c0021f16:	66 90                	xchg   ax,ax
c0021f18:	f7 d9                	neg    ecx
c0021f1a:	83 d3 00             	adc    ebx,0x0
c0021f1d:	f7 db                	neg    ebx
c0021f1f:	89 de                	mov    esi,ebx
c0021f21:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021f29:	e9 6f ff ff ff       	jmp    c0021e9d <__moddi3+0x29>
c0021f2e:	66 90                	xchg   ax,ax
c0021f30:	0f bd c7             	bsr    eax,edi
c0021f33:	83 f0 1f             	xor    eax,0x1f
c0021f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021f3a:	75 24                	jne    c0021f60 <__moddi3+0xec>
c0021f3c:	39 f7                	cmp    edi,esi
c0021f3e:	72 06                	jb     c0021f46 <__moddi3+0xd2>
c0021f40:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021f44:	77 0c                	ja     c0021f52 <__moddi3+0xde>
c0021f46:	89 e9                	mov    ecx,ebp
c0021f48:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021f4c:	19 fe                	sbb    esi,edi
c0021f4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f56:	89 f2                	mov    edx,esi
c0021f58:	e9 6b ff ff ff       	jmp    c0021ec8 <__moddi3+0x54>
c0021f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0021f60:	b8 20 00 00 00       	mov    eax,0x20
c0021f65:	89 c2                	mov    edx,eax
c0021f67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021f6b:	29 da                	sub    edx,ebx
c0021f6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021f71:	88 d9                	mov    cl,bl
c0021f73:	d3 e7                	shl    edi,cl
c0021f75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f79:	88 d1                	mov    cl,dl
c0021f7b:	d3 e8                	shr    eax,cl
c0021f7d:	09 c7                	or     edi,eax
c0021f7f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021f83:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021f87:	89 d8                	mov    eax,ebx
c0021f89:	88 d9                	mov    cl,bl
c0021f8b:	d3 e7                	shl    edi,cl
c0021f8d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021f91:	89 f3                	mov    ebx,esi
c0021f93:	88 d1                	mov    cl,dl
c0021f95:	d3 eb                	shr    ebx,cl
c0021f97:	89 c7                	mov    edi,eax
c0021f99:	88 c1                	mov    cl,al
c0021f9b:	d3 e6                	shl    esi,cl
c0021f9d:	89 e8                	mov    eax,ebp
c0021f9f:	88 d1                	mov    cl,dl
c0021fa1:	d3 e8                	shr    eax,cl
c0021fa3:	09 f0                	or     eax,esi
c0021fa5:	89 f9                	mov    ecx,edi
c0021fa7:	d3 e5                	shl    ebp,cl
c0021fa9:	89 da                	mov    edx,ebx
c0021fab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021faf:	89 d3                	mov    ebx,edx
c0021fb1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021fb5:	89 c6                	mov    esi,eax
c0021fb7:	89 d1                	mov    ecx,edx
c0021fb9:	39 d3                	cmp    ebx,edx
c0021fbb:	72 27                	jb     c0021fe4 <__moddi3+0x170>
c0021fbd:	74 21                	je     c0021fe0 <__moddi3+0x16c>
c0021fbf:	29 f5                	sub    ebp,esi
c0021fc1:	19 cb                	sbb    ebx,ecx
c0021fc3:	89 de                	mov    esi,ebx
c0021fc5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021fc9:	d3 e6                	shl    esi,cl
c0021fcb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021fcf:	89 f9                	mov    ecx,edi
c0021fd1:	d3 ed                	shr    ebp,cl
c0021fd3:	09 ee                	or     esi,ebp
c0021fd5:	89 f0                	mov    eax,esi
c0021fd7:	d3 eb                	shr    ebx,cl
c0021fd9:	89 da                	mov    edx,ebx
c0021fdb:	e9 e8 fe ff ff       	jmp    c0021ec8 <__moddi3+0x54>
c0021fe0:	39 c5                	cmp    ebp,eax
c0021fe2:	73 db                	jae    c0021fbf <__moddi3+0x14b>
c0021fe4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021fe8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021fec:	89 d1                	mov    ecx,edx
c0021fee:	89 c6                	mov    esi,eax
c0021ff0:	eb cd                	jmp    c0021fbf <__moddi3+0x14b>
c0021ff2:	66 90                	xchg   ax,ax

c0021ff4 <__udivdi3>:
c0021ff4:	55                   	push   ebp
c0021ff5:	57                   	push   edi
c0021ff6:	56                   	push   esi
c0021ff7:	53                   	push   ebx
c0021ff8:	83 ec 1c             	sub    esp,0x1c
c0021ffb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021fff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022003:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022007:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002200b:	85 d2                	test   edx,edx
c002200d:	75 41                	jne    c0022050 <__udivdi3+0x5c>
c002200f:	39 f7                	cmp    edi,esi
c0022011:	76 15                	jbe    c0022028 <__udivdi3+0x34>
c0022013:	89 e8                	mov    eax,ebp
c0022015:	89 f2                	mov    edx,esi
c0022017:	f7 f7                	div    edi
c0022019:	31 db                	xor    ebx,ebx
c002201b:	89 da                	mov    edx,ebx
c002201d:	83 c4 1c             	add    esp,0x1c
c0022020:	5b                   	pop    ebx
c0022021:	5e                   	pop    esi
c0022022:	5f                   	pop    edi
c0022023:	5d                   	pop    ebp
c0022024:	c3                   	ret    
c0022025:	8d 76 00             	lea    esi,[esi+0x0]
c0022028:	89 f9                	mov    ecx,edi
c002202a:	85 ff                	test   edi,edi
c002202c:	75 0b                	jne    c0022039 <__udivdi3+0x45>
c002202e:	b8 01 00 00 00       	mov    eax,0x1
c0022033:	31 d2                	xor    edx,edx
c0022035:	f7 f7                	div    edi
c0022037:	89 c1                	mov    ecx,eax
c0022039:	31 d2                	xor    edx,edx
c002203b:	89 f0                	mov    eax,esi
c002203d:	f7 f1                	div    ecx
c002203f:	89 c3                	mov    ebx,eax
c0022041:	89 e8                	mov    eax,ebp
c0022043:	f7 f1                	div    ecx
c0022045:	89 da                	mov    edx,ebx
c0022047:	83 c4 1c             	add    esp,0x1c
c002204a:	5b                   	pop    ebx
c002204b:	5e                   	pop    esi
c002204c:	5f                   	pop    edi
c002204d:	5d                   	pop    ebp
c002204e:	c3                   	ret    
c002204f:	90                   	nop
c0022050:	39 f2                	cmp    edx,esi
c0022052:	77 1c                	ja     c0022070 <__udivdi3+0x7c>
c0022054:	0f bd da             	bsr    ebx,edx
c0022057:	83 f3 1f             	xor    ebx,0x1f
c002205a:	75 24                	jne    c0022080 <__udivdi3+0x8c>
c002205c:	39 f2                	cmp    edx,esi
c002205e:	72 08                	jb     c0022068 <__udivdi3+0x74>
c0022060:	39 ef                	cmp    edi,ebp
c0022062:	0f 87 84 00 00 00    	ja     c00220ec <__udivdi3+0xf8>
c0022068:	b8 01 00 00 00       	mov    eax,0x1
c002206d:	eb ac                	jmp    c002201b <__udivdi3+0x27>
c002206f:	90                   	nop
c0022070:	31 db                	xor    ebx,ebx
c0022072:	31 c0                	xor    eax,eax
c0022074:	89 da                	mov    edx,ebx
c0022076:	83 c4 1c             	add    esp,0x1c
c0022079:	5b                   	pop    ebx
c002207a:	5e                   	pop    esi
c002207b:	5f                   	pop    edi
c002207c:	5d                   	pop    ebp
c002207d:	c3                   	ret    
c002207e:	66 90                	xchg   ax,ax
c0022080:	b8 20 00 00 00       	mov    eax,0x20
c0022085:	29 d8                	sub    eax,ebx
c0022087:	88 d9                	mov    cl,bl
c0022089:	d3 e2                	shl    edx,cl
c002208b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002208f:	89 fa                	mov    edx,edi
c0022091:	88 c1                	mov    cl,al
c0022093:	d3 ea                	shr    edx,cl
c0022095:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022099:	09 d1                	or     ecx,edx
c002209b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002209f:	88 d9                	mov    cl,bl
c00220a1:	d3 e7                	shl    edi,cl
c00220a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00220a7:	89 f7                	mov    edi,esi
c00220a9:	88 c1                	mov    cl,al
c00220ab:	d3 ef                	shr    edi,cl
c00220ad:	88 d9                	mov    cl,bl
c00220af:	d3 e6                	shl    esi,cl
c00220b1:	89 ea                	mov    edx,ebp
c00220b3:	88 c1                	mov    cl,al
c00220b5:	d3 ea                	shr    edx,cl
c00220b7:	09 d6                	or     esi,edx
c00220b9:	89 f0                	mov    eax,esi
c00220bb:	89 fa                	mov    edx,edi
c00220bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00220c1:	89 d7                	mov    edi,edx
c00220c3:	89 c6                	mov    esi,eax
c00220c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00220c9:	39 d7                	cmp    edi,edx
c00220cb:	72 13                	jb     c00220e0 <__udivdi3+0xec>
c00220cd:	74 09                	je     c00220d8 <__udivdi3+0xe4>
c00220cf:	89 f0                	mov    eax,esi
c00220d1:	31 db                	xor    ebx,ebx
c00220d3:	e9 43 ff ff ff       	jmp    c002201b <__udivdi3+0x27>
c00220d8:	88 d9                	mov    cl,bl
c00220da:	d3 e5                	shl    ebp,cl
c00220dc:	39 c5                	cmp    ebp,eax
c00220de:	73 ef                	jae    c00220cf <__udivdi3+0xdb>
c00220e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00220e3:	31 db                	xor    ebx,ebx
c00220e5:	e9 31 ff ff ff       	jmp    c002201b <__udivdi3+0x27>
c00220ea:	66 90                	xchg   ax,ax
c00220ec:	31 c0                	xor    eax,eax
c00220ee:	e9 28 ff ff ff       	jmp    c002201b <__udivdi3+0x27>
c00220f3:	90                   	nop

c00220f4 <__umoddi3>:
c00220f4:	55                   	push   ebp
c00220f5:	57                   	push   edi
c00220f6:	56                   	push   esi
c00220f7:	53                   	push   ebx
c00220f8:	83 ec 1c             	sub    esp,0x1c
c00220fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00220ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022103:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002210b:	89 da                	mov    edx,ebx
c002210d:	85 c0                	test   eax,eax
c002210f:	75 37                	jne    c0022148 <__umoddi3+0x54>
c0022111:	39 df                	cmp    edi,ebx
c0022113:	76 13                	jbe    c0022128 <__umoddi3+0x34>
c0022115:	89 f0                	mov    eax,esi
c0022117:	f7 f7                	div    edi
c0022119:	89 d0                	mov    eax,edx
c002211b:	31 d2                	xor    edx,edx
c002211d:	83 c4 1c             	add    esp,0x1c
c0022120:	5b                   	pop    ebx
c0022121:	5e                   	pop    esi
c0022122:	5f                   	pop    edi
c0022123:	5d                   	pop    ebp
c0022124:	c3                   	ret    
c0022125:	8d 76 00             	lea    esi,[esi+0x0]
c0022128:	89 fd                	mov    ebp,edi
c002212a:	85 ff                	test   edi,edi
c002212c:	75 0b                	jne    c0022139 <__umoddi3+0x45>
c002212e:	b8 01 00 00 00       	mov    eax,0x1
c0022133:	31 d2                	xor    edx,edx
c0022135:	f7 f7                	div    edi
c0022137:	89 c5                	mov    ebp,eax
c0022139:	89 d8                	mov    eax,ebx
c002213b:	31 d2                	xor    edx,edx
c002213d:	f7 f5                	div    ebp
c002213f:	89 f0                	mov    eax,esi
c0022141:	f7 f5                	div    ebp
c0022143:	89 d0                	mov    eax,edx
c0022145:	eb d4                	jmp    c002211b <__umoddi3+0x27>
c0022147:	90                   	nop
c0022148:	89 f1                	mov    ecx,esi
c002214a:	39 d8                	cmp    eax,ebx
c002214c:	76 0a                	jbe    c0022158 <__umoddi3+0x64>
c002214e:	89 f0                	mov    eax,esi
c0022150:	83 c4 1c             	add    esp,0x1c
c0022153:	5b                   	pop    ebx
c0022154:	5e                   	pop    esi
c0022155:	5f                   	pop    edi
c0022156:	5d                   	pop    ebp
c0022157:	c3                   	ret    
c0022158:	0f bd e8             	bsr    ebp,eax
c002215b:	83 f5 1f             	xor    ebp,0x1f
c002215e:	75 1c                	jne    c002217c <__umoddi3+0x88>
c0022160:	39 d8                	cmp    eax,ebx
c0022162:	72 04                	jb     c0022168 <__umoddi3+0x74>
c0022164:	39 f7                	cmp    edi,esi
c0022166:	77 08                	ja     c0022170 <__umoddi3+0x7c>
c0022168:	89 da                	mov    edx,ebx
c002216a:	29 fe                	sub    esi,edi
c002216c:	19 c2                	sbb    edx,eax
c002216e:	89 f1                	mov    ecx,esi
c0022170:	89 c8                	mov    eax,ecx
c0022172:	83 c4 1c             	add    esp,0x1c
c0022175:	5b                   	pop    ebx
c0022176:	5e                   	pop    esi
c0022177:	5f                   	pop    edi
c0022178:	5d                   	pop    ebp
c0022179:	c3                   	ret    
c002217a:	66 90                	xchg   ax,ax
c002217c:	ba 20 00 00 00       	mov    edx,0x20
c0022181:	29 ea                	sub    edx,ebp
c0022183:	89 e9                	mov    ecx,ebp
c0022185:	d3 e0                	shl    eax,cl
c0022187:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002218b:	89 f8                	mov    eax,edi
c002218d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022191:	88 d1                	mov    cl,dl
c0022193:	d3 e8                	shr    eax,cl
c0022195:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022199:	09 c1                	or     ecx,eax
c002219b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002219f:	89 e9                	mov    ecx,ebp
c00221a1:	d3 e7                	shl    edi,cl
c00221a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00221a7:	89 d8                	mov    eax,ebx
c00221a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221ad:	88 d1                	mov    cl,dl
c00221af:	d3 e8                	shr    eax,cl
c00221b1:	89 c7                	mov    edi,eax
c00221b3:	89 e9                	mov    ecx,ebp
c00221b5:	d3 e3                	shl    ebx,cl
c00221b7:	89 f0                	mov    eax,esi
c00221b9:	88 d1                	mov    cl,dl
c00221bb:	d3 e8                	shr    eax,cl
c00221bd:	09 d8                	or     eax,ebx
c00221bf:	89 e9                	mov    ecx,ebp
c00221c1:	d3 e6                	shl    esi,cl
c00221c3:	89 f3                	mov    ebx,esi
c00221c5:	89 fa                	mov    edx,edi
c00221c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00221cb:	89 d1                	mov    ecx,edx
c00221cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00221d1:	89 c6                	mov    esi,eax
c00221d3:	89 d7                	mov    edi,edx
c00221d5:	39 d1                	cmp    ecx,edx
c00221d7:	72 27                	jb     c0022200 <__umoddi3+0x10c>
c00221d9:	74 21                	je     c00221fc <__umoddi3+0x108>
c00221db:	89 ca                	mov    edx,ecx
c00221dd:	29 f3                	sub    ebx,esi
c00221df:	19 fa                	sbb    edx,edi
c00221e1:	89 d0                	mov    eax,edx
c00221e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00221e7:	d3 e0                	shl    eax,cl
c00221e9:	89 e9                	mov    ecx,ebp
c00221eb:	d3 eb                	shr    ebx,cl
c00221ed:	09 d8                	or     eax,ebx
c00221ef:	d3 ea                	shr    edx,cl
c00221f1:	83 c4 1c             	add    esp,0x1c
c00221f4:	5b                   	pop    ebx
c00221f5:	5e                   	pop    esi
c00221f6:	5f                   	pop    edi
c00221f7:	5d                   	pop    ebp
c00221f8:	c3                   	ret    
c00221f9:	8d 76 00             	lea    esi,[esi+0x0]
c00221fc:	39 c3                	cmp    ebx,eax
c00221fe:	73 db                	jae    c00221db <__umoddi3+0xe7>
c0022200:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022204:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022208:	89 d7                	mov    edi,edx
c002220a:	89 c6                	mov    esi,eax
c002220c:	eb cd                	jmp    c00221db <__umoddi3+0xe7>

Disassembly of section .init:

c002220e <_init>:
c002220e:	55                   	push   ebp
c002220f:	89 e5                	mov    ebp,esp
c0022211:	e8 de de fd ff       	call   c00000f4 <frame_dummy>
c0022216:	e8 e5 fa ff ff       	call   c0021d00 <__do_global_ctors_aux>
c002221b:	5d                   	pop    ebp
c002221c:	c3                   	ret    

Disassembly of section .fini:

c002221d <_fini>:
c002221d:	55                   	push   ebp
c002221e:	89 e5                	mov    ebp,esp
c0022220:	e8 5f de fd ff       	call   c0000084 <__do_global_dtors_aux>
c0022225:	5d                   	pop    ebp
c0022226:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022228 <DriverlessDevice::~DriverlessDevice()>:
c0022228:	ba bc 3c 02 c0       	mov    edx,0xc0023cbc
c002222d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022231:	89 10                	mov    DWORD PTR [eax],edx
c0022233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022237:	50                   	push   eax
c0022238:	e8 19 77 fe ff       	call   c0009956 <Device::~Device()>
c002223d:	83 c4 04             	add    esp,0x4
c0022240:	90                   	nop
c0022241:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022242 <DriverlessDevice::~DriverlessDevice()>:
c0022242:	83 ec 0c             	sub    esp,0xc
c0022245:	83 ec 0c             	sub    esp,0xc
c0022248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002224c:	e8 d7 ff ff ff       	call   c0022228 <DriverlessDevice::~DriverlessDevice()>
c0022251:	83 c4 10             	add    esp,0x10
c0022254:	83 ec 08             	sub    esp,0x8
c0022257:	68 58 01 00 00       	push   0x158
c002225c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022260:	e8 ff b0 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022265:	83 c4 10             	add    esp,0x10
c0022268:	83 c4 0c             	add    esp,0xc
c002226b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002226c <LinkedList<Device>::addElement(Device*)>:
c002226c:	83 ec 0c             	sub    esp,0xc
c002226f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022274:	75 10                	jne    c0022286 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022276:	83 ec 0c             	sub    esp,0xc
c0022279:	68 50 3c 02 c0       	push   0xc0023c50
c002227e:	e8 1d da fe ff       	call   c000fca0 <KePanic(char const*)>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228a:	8b 00                	mov    eax,DWORD PTR [eax]
c002228c:	85 c0                	test   eax,eax
c002228e:	74 3a                	je     c00222ca <LinkedList<Device>::addElement(Device*)+0x5e>
c0022290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022297:	85 c0                	test   eax,eax
c0022299:	74 2f                	je     c00222ca <LinkedList<Device>::addElement(Device*)+0x5e>
c002229b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222a6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00222ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222be:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00222c8:	eb 68                	jmp    c0022332 <LinkedList<Device>::addElement(Device*)+0xc6>
c00222ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00222d0:	85 c0                	test   eax,eax
c00222d2:	75 4e                	jne    c0022322 <LinkedList<Device>::addElement(Device*)+0xb6>
c00222d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222db:	85 c0                	test   eax,eax
c00222dd:	75 43                	jne    c0022322 <LinkedList<Device>::addElement(Device*)+0xb6>
c00222df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222e7:	89 10                	mov    DWORD PTR [eax],edx
c00222e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222fb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022309:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002230c:	85 c0                	test   eax,eax
c002230e:	74 22                	je     c0022332 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022310:	83 ec 0c             	sub    esp,0xc
c0022313:	68 72 3c 02 c0       	push   0xc0023c72
c0022318:	e8 83 d9 fe ff       	call   c000fca0 <KePanic(char const*)>
c002231d:	83 c4 10             	add    esp,0x10
c0022320:	eb 10                	jmp    c0022332 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022322:	83 ec 0c             	sub    esp,0xc
c0022325:	68 7c 3c 02 c0       	push   0xc0023c7c
c002232a:	e8 71 d9 fe ff       	call   c000fca0 <KePanic(char const*)>
c002232f:	83 c4 10             	add    esp,0x10
c0022332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022336:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022339:	8d 50 01             	lea    edx,[eax+0x1]
c002233c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022340:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022343:	90                   	nop
c0022344:	83 c4 0c             	add    esp,0xc
c0022347:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022348 <LinkedList<Device>::LinkedList()>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022356:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002235d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022361:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022376:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002237d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022381:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022388:	90                   	nop
c0022389:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002238c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002238c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022390:	8b 00                	mov    eax,DWORD PTR [eax]
c0022392:	85 c0                	test   eax,eax
c0022394:	75 0e                	jne    c00223a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239d:	85 c0                	test   eax,eax
c002239f:	75 03                	jne    c00223a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00223a1:	b0 01                	mov    al,0x1
c00223a3:	c3                   	ret    
c00223a4:	b0 00                	mov    al,0x0
c00223a6:	90                   	nop
c00223a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00223a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00223b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00223b9:	85 c0                	test   eax,eax
c00223bb:	75 17                	jne    c00223d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00223bd:	83 ec 0c             	sub    esp,0xc
c00223c0:	68 ec 3e 02 c0       	push   0xc0023eec
c00223c5:	e8 d6 d8 fe ff       	call   c000fca0 <KePanic(char const*)>
c00223ca:	83 c4 10             	add    esp,0x10
c00223cd:	e9 96 00 00 00       	jmp    c0022468 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00223d2:	66 90                	xchg   ax,ax
c00223d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00223de:	85 c0                	test   eax,eax
c00223e0:	0f 95 c0             	setne  al
c00223e3:	0f b6 c0             	movzx  eax,al
c00223e6:	85 c0                	test   eax,eax
c00223e8:	74 12                	je     c00223fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	68 37 3f 02 c0       	push   0xc0023f37
c00223f2:	e8 a9 d8 fe ff       	call   c000fca0 <KePanic(char const*)>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	66 90                	xchg   ax,ax
c00223fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022400:	8b 00                	mov    eax,DWORD PTR [eax]
c0022402:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022405:	85 c0                	test   eax,eax
c0022407:	0f 94 c0             	sete   al
c002240a:	0f b6 c0             	movzx  eax,al
c002240d:	85 c0                	test   eax,eax
c002240f:	74 33                	je     c0022444 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022415:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002241b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002242d:	83 f8 01             	cmp    eax,0x1
c0022430:	74 22                	je     c0022454 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022432:	83 ec 0c             	sub    esp,0xc
c0022435:	68 10 3f 02 c0       	push   0xc0023f10
c002243a:	e8 61 d8 fe ff       	call   c000fca0 <KePanic(char const*)>
c002243f:	83 c4 10             	add    esp,0x10
c0022442:	eb 10                	jmp    c0022454 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022448:	8b 00                	mov    eax,DWORD PTR [eax]
c002244a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002244d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022451:	89 10                	mov    DWORD PTR [eax],edx
c0022453:	90                   	nop
c0022454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022458:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002245b:	8d 50 ff             	lea    edx,[eax-0x1]
c002245e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022462:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022465:	8d 76 00             	lea    esi,[esi+0x0]
c0022468:	83 c4 0c             	add    esp,0xc
c002246b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002246c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002246c:	83 ec 0c             	sub    esp,0xc
c002246f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022474:	75 12                	jne    c0022488 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022476:	83 ec 0c             	sub    esp,0xc
c0022479:	68 50 3c 02 c0       	push   0xc0023c50
c002247e:	e8 1d d8 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022483:	83 c4 10             	add    esp,0x10
c0022486:	66 90                	xchg   ax,ax
c0022488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248c:	8b 00                	mov    eax,DWORD PTR [eax]
c002248e:	85 c0                	test   eax,eax
c0022490:	74 36                	je     c00224c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022499:	85 c0                	test   eax,eax
c002249b:	74 2b                	je     c00224c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002249d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00224ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00224c4:	eb 6a                	jmp    c0022530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00224c6:	66 90                	xchg   ax,ax
c00224c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00224ce:	85 c0                	test   eax,eax
c00224d0:	75 4e                	jne    c0022520 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00224d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224d9:	85 c0                	test   eax,eax
c00224db:	75 43                	jne    c0022520 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00224dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224e5:	89 10                	mov    DWORD PTR [eax],edx
c00224e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022504:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022507:	85 c0                	test   eax,eax
c0022509:	74 25                	je     c0022530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002250b:	83 ec 0c             	sub    esp,0xc
c002250e:	68 72 3c 02 c0       	push   0xc0023c72
c0022513:	e8 88 d7 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022518:	83 c4 10             	add    esp,0x10
c002251b:	eb 13                	jmp    c0022530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002251d:	8d 76 00             	lea    esi,[esi+0x0]
c0022520:	83 ec 0c             	sub    esp,0xc
c0022523:	68 7c 3c 02 c0       	push   0xc0023c7c
c0022528:	e8 73 d7 fe ff       	call   c000fca0 <KePanic(char const*)>
c002252d:	83 c4 10             	add    esp,0x10
c0022530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022534:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022537:	8d 50 01             	lea    edx,[eax+0x1]
c002253a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022541:	90                   	nop
c0022542:	83 c4 0c             	add    esp,0xc
c0022545:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022548 <ACPI::~ACPI()>:
c0022548:	83 ec 0c             	sub    esp,0xc
c002254b:	ba 6c 43 02 c0       	mov    edx,0xc002436c
c0022550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022554:	89 10                	mov    DWORD PTR [eax],edx
c0022556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255a:	83 ec 0c             	sub    esp,0xc
c002255d:	50                   	push   eax
c002255e:	e8 f3 73 fe ff       	call   c0009956 <Device::~Device()>
c0022563:	83 c4 10             	add    esp,0x10
c0022566:	90                   	nop
c0022567:	83 c4 0c             	add    esp,0xc
c002256a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002256c <ACPI::~ACPI()>:
c002256c:	83 ec 0c             	sub    esp,0xc
c002256f:	83 ec 0c             	sub    esp,0xc
c0022572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022576:	e8 cd ff ff ff       	call   c0022548 <ACPI::~ACPI()>
c002257b:	83 c4 10             	add    esp,0x10
c002257e:	83 ec 08             	sub    esp,0x8
c0022581:	68 64 12 00 00       	push   0x1264
c0022586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002258a:	e8 d5 ad fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c002258f:	83 c4 10             	add    esp,0x10
c0022592:	83 c4 0c             	add    esp,0xc
c0022595:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022598 <LinkedList<Device>::~LinkedList()>:
c0022598:	90                   	nop
c0022599:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002259c <LinkedList<Device>::isEmpty()>:
c002259c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00225a2:	85 c0                	test   eax,eax
c00225a4:	75 0e                	jne    c00225b4 <LinkedList<Device>::isEmpty()+0x18>
c00225a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225ad:	85 c0                	test   eax,eax
c00225af:	75 03                	jne    c00225b4 <LinkedList<Device>::isEmpty()+0x18>
c00225b1:	b0 01                	mov    al,0x1
c00225b3:	c3                   	ret    
c00225b4:	b0 00                	mov    al,0x0
c00225b6:	90                   	nop
c00225b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00225b8 <LinkedList<Device>::getFirstElement()>:
c00225b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00225be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00225c0 <LinkedList<Device>::removeFirst()>:
c00225c0:	83 ec 0c             	sub    esp,0xc
c00225c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00225c9:	85 c0                	test   eax,eax
c00225cb:	75 17                	jne    c00225e4 <LinkedList<Device>::removeFirst()+0x24>
c00225cd:	83 ec 0c             	sub    esp,0xc
c00225d0:	68 ec 3e 02 c0       	push   0xc0023eec
c00225d5:	e8 c6 d6 fe ff       	call   c000fca0 <KePanic(char const*)>
c00225da:	83 c4 10             	add    esp,0x10
c00225dd:	e9 92 00 00 00       	jmp    c0022674 <LinkedList<Device>::removeFirst()+0xb4>
c00225e2:	66 90                	xchg   ax,ax
c00225e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225eb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00225f1:	85 c0                	test   eax,eax
c00225f3:	74 13                	je     c0022608 <LinkedList<Device>::removeFirst()+0x48>
c00225f5:	83 ec 0c             	sub    esp,0xc
c00225f8:	68 37 3f 02 c0       	push   0xc0023f37
c00225fd:	e8 9e d6 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022602:	83 c4 10             	add    esp,0x10
c0022605:	8d 76 00             	lea    esi,[esi+0x0]
c0022608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260c:	8b 00                	mov    eax,DWORD PTR [eax]
c002260e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022614:	85 c0                	test   eax,eax
c0022616:	75 34                	jne    c002264c <LinkedList<Device>::removeFirst()+0x8c>
c0022618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022626:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002262d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022631:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022634:	83 f8 01             	cmp    eax,0x1
c0022637:	74 27                	je     c0022660 <LinkedList<Device>::removeFirst()+0xa0>
c0022639:	83 ec 0c             	sub    esp,0xc
c002263c:	68 10 3f 02 c0       	push   0xc0023f10
c0022641:	e8 5a d6 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022646:	83 c4 10             	add    esp,0x10
c0022649:	eb 15                	jmp    c0022660 <LinkedList<Device>::removeFirst()+0xa0>
c002264b:	90                   	nop
c002264c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022650:	8b 00                	mov    eax,DWORD PTR [eax]
c0022652:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265c:	89 10                	mov    DWORD PTR [eax],edx
c002265e:	66 90                	xchg   ax,ax
c0022660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022667:	8d 50 ff             	lea    edx,[eax-0x1]
c002266a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022671:	8d 76 00             	lea    esi,[esi+0x0]
c0022674:	83 c4 0c             	add    esp,0xc
c0022677:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022678 <Computer::~Computer()>:
c0022678:	83 ec 0c             	sub    esp,0xc
c002267b:	ba e4 44 02 c0       	mov    edx,0xc00244e4
c0022680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022684:	89 10                	mov    DWORD PTR [eax],edx
c0022686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268a:	83 ec 0c             	sub    esp,0xc
c002268d:	50                   	push   eax
c002268e:	e8 c3 72 fe ff       	call   c0009956 <Device::~Device()>
c0022693:	83 c4 10             	add    esp,0x10
c0022696:	90                   	nop
c0022697:	83 c4 0c             	add    esp,0xc
c002269a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002269c <Computer::~Computer()>:
c002269c:	83 ec 0c             	sub    esp,0xc
c002269f:	83 ec 0c             	sub    esp,0xc
c00226a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226a6:	e8 cd ff ff ff       	call   c0022678 <Computer::~Computer()>
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	83 ec 08             	sub    esp,0x8
c00226b1:	68 68 01 00 00       	push   0x168
c00226b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ba:	e8 a5 ac fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c00226bf:	83 c4 10             	add    esp,0x10
c00226c2:	83 c4 0c             	add    esp,0xc
c00226c5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00226c6 <idleCommon()>:
c00226c6:	83 ec 0c             	sub    esp,0xc
c00226c9:	fa                   	cli    
c00226ca:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c00226d0:	e8 53 41 ff ff       	call   c0016828 <schedule()>
c00226d5:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00226dc:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00226e3:	75 01                	jne    c00226e6 <idleCommon()+0x20>
c00226e5:	fb                   	sti    
c00226e6:	83 c4 0c             	add    esp,0xc
c00226e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00226ea <LinkedList<UnixFile>::~LinkedList()>:
c00226ea:	90                   	nop
c00226eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00226ec <LinkedList<UnixFile>::LinkedList()>:
c00226ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002270c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022710:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002271a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022725:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002272c:	90                   	nop
c002272d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002272e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002272e:	83 ec 0c             	sub    esp,0xc
c0022731:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022736:	75 10                	jne    c0022748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022738:	83 ec 0c             	sub    esp,0xc
c002273b:	68 50 3c 02 c0       	push   0xc0023c50
c0022740:	e8 5b d5 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022745:	83 c4 10             	add    esp,0x10
c0022748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002274c:	8b 00                	mov    eax,DWORD PTR [eax]
c002274e:	85 c0                	test   eax,eax
c0022750:	74 34                	je     c0022786 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022759:	85 c0                	test   eax,eax
c002275b:	74 29                	je     c0022786 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002275d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022761:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022764:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022768:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002276b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022773:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002277a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002277d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022784:	eb 65                	jmp    c00227eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278a:	8b 00                	mov    eax,DWORD PTR [eax]
c002278c:	85 c0                	test   eax,eax
c002278e:	75 4b                	jne    c00227db <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022797:	85 c0                	test   eax,eax
c0022799:	75 40                	jne    c00227db <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00227a3:	89 10                	mov    DWORD PTR [eax],edx
c00227a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00227ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00227b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00227be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227c5:	85 c0                	test   eax,eax
c00227c7:	74 22                	je     c00227eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00227c9:	83 ec 0c             	sub    esp,0xc
c00227cc:	68 72 3c 02 c0       	push   0xc0023c72
c00227d1:	e8 ca d4 fe ff       	call   c000fca0 <KePanic(char const*)>
c00227d6:	83 c4 10             	add    esp,0x10
c00227d9:	eb 10                	jmp    c00227eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00227db:	83 ec 0c             	sub    esp,0xc
c00227de:	68 7c 3c 02 c0       	push   0xc0023c7c
c00227e3:	e8 b8 d4 fe ff       	call   c000fca0 <KePanic(char const*)>
c00227e8:	83 c4 10             	add    esp,0x10
c00227eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227f2:	8d 50 01             	lea    edx,[eax+0x1]
c00227f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00227fc:	90                   	nop
c00227fd:	83 c4 0c             	add    esp,0xc
c0022800:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022802 <LinkedList<UnixFile>::getFirstElement()>:
c0022802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022806:	8b 00                	mov    eax,DWORD PTR [eax]
c0022808:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002280a <LinkedList<UnixFile>::removeFirst()>:
c002280a:	83 ec 0c             	sub    esp,0xc
c002280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022811:	8b 00                	mov    eax,DWORD PTR [eax]
c0022813:	85 c0                	test   eax,eax
c0022815:	75 12                	jne    c0022829 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022817:	83 ec 0c             	sub    esp,0xc
c002281a:	68 ec 3e 02 c0       	push   0xc0023eec
c002281f:	e8 7c d4 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022824:	83 c4 10             	add    esp,0x10
c0022827:	eb 7e                	jmp    c00228a7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022833:	85 c0                	test   eax,eax
c0022835:	74 10                	je     c0022847 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022837:	83 ec 0c             	sub    esp,0xc
c002283a:	68 37 3f 02 c0       	push   0xc0023f37
c002283f:	e8 5c d4 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	8b 00                	mov    eax,DWORD PTR [eax]
c002284d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022850:	85 c0                	test   eax,eax
c0022852:	75 33                	jne    c0022887 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022858:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002285e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022862:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022870:	83 f8 01             	cmp    eax,0x1
c0022873:	74 21                	je     c0022896 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022875:	83 ec 0c             	sub    esp,0xc
c0022878:	68 10 3f 02 c0       	push   0xc0023f10
c002287d:	e8 1e d4 fe ff       	call   c000fca0 <KePanic(char const*)>
c0022882:	83 c4 10             	add    esp,0x10
c0022885:	eb 0f                	jmp    c0022896 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288b:	8b 00                	mov    eax,DWORD PTR [eax]
c002288d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022894:	89 10                	mov    DWORD PTR [eax],edx
c0022896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002289d:	8d 50 ff             	lea    edx,[eax-0x1]
c00228a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00228a7:	83 c4 0c             	add    esp,0xc
c00228aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00228ac <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00228ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00228b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00228b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00228b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00228bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00228bc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00228bc:	90                   	nop
c00228bd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00228c0 <ThreadControlBlock::ThreadControlBlock()>:
c00228c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00228cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228cf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00228d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228da:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00228e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228e5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00228ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228f0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00228f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228fb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00228ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022903:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022907:	90                   	nop
c0022908:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002290c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002290c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022910:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002291a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022925:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002292c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022930:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022945:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002294c:	90                   	nop
c002294d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002294e <IOAPIC::~IOAPIC()>:
c002294e:	83 ec 0c             	sub    esp,0xc
c0022951:	ba 50 59 02 c0       	mov    edx,0xc0025950
c0022956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295a:	89 10                	mov    DWORD PTR [eax],edx
c002295c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	50                   	push   eax
c0022964:	e8 ed 6f fe ff       	call   c0009956 <Device::~Device()>
c0022969:	83 c4 10             	add    esp,0x10
c002296c:	90                   	nop
c002296d:	83 c4 0c             	add    esp,0xc
c0022970:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022972 <IOAPIC::~IOAPIC()>:
c0022972:	83 ec 0c             	sub    esp,0xc
c0022975:	83 ec 0c             	sub    esp,0xc
c0022978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002297c:	e8 cd ff ff ff       	call   c002294e <IOAPIC::~IOAPIC()>
c0022981:	83 c4 10             	add    esp,0x10
c0022984:	83 ec 08             	sub    esp,0x8
c0022987:	68 68 01 00 00       	push   0x168
c002298c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022990:	e8 cf a9 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022995:	83 c4 10             	add    esp,0x10
c0022998:	83 c4 0c             	add    esp,0xc
c002299b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002299c <CPU::~CPU()>:
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	ba c4 5c 02 c0       	mov    edx,0xc0025cc4
c00229a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a8:	89 10                	mov    DWORD PTR [eax],edx
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	83 ec 0c             	sub    esp,0xc
c00229b1:	50                   	push   eax
c00229b2:	e8 9f 6f fe ff       	call   c0009956 <Device::~Device()>
c00229b7:	83 c4 10             	add    esp,0x10
c00229ba:	90                   	nop
c00229bb:	83 c4 0c             	add    esp,0xc
c00229be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00229c0 <CPU::~CPU()>:
c00229c0:	83 ec 0c             	sub    esp,0xc
c00229c3:	83 ec 0c             	sub    esp,0xc
c00229c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229ca:	e8 cd ff ff ff       	call   c002299c <CPU::~CPU()>
c00229cf:	83 c4 10             	add    esp,0x10
c00229d2:	83 ec 08             	sub    esp,0x8
c00229d5:	68 78 11 00 00       	push   0x1178
c00229da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229de:	e8 81 a9 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c00229e3:	83 c4 10             	add    esp,0x10
c00229e6:	83 c4 0c             	add    esp,0xc
c00229e9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00229ea <PCI::~PCI()>:
c00229ea:	83 ec 0c             	sub    esp,0xc
c00229ed:	ba 28 62 02 c0       	mov    edx,0xc0026228
c00229f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f6:	89 10                	mov    DWORD PTR [eax],edx
c00229f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fc:	83 ec 0c             	sub    esp,0xc
c00229ff:	50                   	push   eax
c0022a00:	e8 97 5f fe ff       	call   c000899c <Bus::~Bus()>
c0022a05:	83 c4 10             	add    esp,0x10
c0022a08:	90                   	nop
c0022a09:	83 c4 0c             	add    esp,0xc
c0022a0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022a0e <PCI::~PCI()>:
c0022a0e:	83 ec 0c             	sub    esp,0xc
c0022a11:	83 ec 0c             	sub    esp,0xc
c0022a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a18:	e8 cd ff ff ff       	call   c00229ea <PCI::~PCI()>
c0022a1d:	83 c4 10             	add    esp,0x10
c0022a20:	83 ec 08             	sub    esp,0x8
c0022a23:	68 5c 01 00 00       	push   0x15c
c0022a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a2c:	e8 33 a9 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022a31:	83 c4 10             	add    esp,0x10
c0022a34:	83 c4 0c             	add    esp,0xc
c0022a37:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022a38 <IDE::~IDE()>:
c0022a38:	83 ec 0c             	sub    esp,0xc
c0022a3b:	ba 78 63 02 c0       	mov    edx,0xc0026378
c0022a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a44:	89 10                	mov    DWORD PTR [eax],edx
c0022a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4a:	83 ec 0c             	sub    esp,0xc
c0022a4d:	50                   	push   eax
c0022a4e:	e8 91 73 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022a53:	83 c4 10             	add    esp,0x10
c0022a56:	90                   	nop
c0022a57:	83 c4 0c             	add    esp,0xc
c0022a5a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022a5c <IDE::~IDE()>:
c0022a5c:	83 ec 0c             	sub    esp,0xc
c0022a5f:	83 ec 0c             	sub    esp,0xc
c0022a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a66:	e8 cd ff ff ff       	call   c0022a38 <IDE::~IDE()>
c0022a6b:	83 c4 10             	add    esp,0x10
c0022a6e:	83 ec 08             	sub    esp,0x8
c0022a71:	68 70 02 00 00       	push   0x270
c0022a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a7a:	e8 e5 a8 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022a7f:	83 c4 10             	add    esp,0x10
c0022a82:	83 c4 0c             	add    esp,0xc
c0022a85:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022a86 <SATABus::~SATABus()>:
c0022a86:	83 ec 0c             	sub    esp,0xc
c0022a89:	ba c8 63 02 c0       	mov    edx,0xc00263c8
c0022a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a92:	89 10                	mov    DWORD PTR [eax],edx
c0022a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a98:	83 ec 0c             	sub    esp,0xc
c0022a9b:	50                   	push   eax
c0022a9c:	e8 43 73 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022aa1:	83 c4 10             	add    esp,0x10
c0022aa4:	90                   	nop
c0022aa5:	83 c4 0c             	add    esp,0xc
c0022aa8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022aaa <SATABus::~SATABus()>:
c0022aaa:	83 ec 0c             	sub    esp,0xc
c0022aad:	83 ec 0c             	sub    esp,0xc
c0022ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ab4:	e8 cd ff ff ff       	call   c0022a86 <SATABus::~SATABus()>
c0022ab9:	83 c4 10             	add    esp,0x10
c0022abc:	83 ec 08             	sub    esp,0x8
c0022abf:	68 64 01 00 00       	push   0x164
c0022ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ac8:	e8 97 a8 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022acd:	83 c4 10             	add    esp,0x10
c0022ad0:	83 c4 0c             	add    esp,0xc
c0022ad3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022ad4 <ATA::~ATA()>:
c0022ad4:	83 ec 0c             	sub    esp,0xc
c0022ad7:	ba b0 64 02 c0       	mov    edx,0xc00264b0
c0022adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae0:	89 10                	mov    DWORD PTR [eax],edx
c0022ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae6:	83 ec 0c             	sub    esp,0xc
c0022ae9:	50                   	push   eax
c0022aea:	e8 d7 73 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022aef:	83 c4 10             	add    esp,0x10
c0022af2:	90                   	nop
c0022af3:	83 c4 0c             	add    esp,0xc
c0022af6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022af8 <ATA::~ATA()>:
c0022af8:	83 ec 0c             	sub    esp,0xc
c0022afb:	83 ec 0c             	sub    esp,0xc
c0022afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b02:	e8 cd ff ff ff       	call   c0022ad4 <ATA::~ATA()>
c0022b07:	83 c4 10             	add    esp,0x10
c0022b0a:	83 ec 08             	sub    esp,0x8
c0022b0d:	68 8c 01 00 00       	push   0x18c
c0022b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b16:	e8 49 a8 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	83 c4 0c             	add    esp,0xc
c0022b21:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022b22 <ATAPI::~ATAPI()>:
c0022b22:	83 ec 0c             	sub    esp,0xc
c0022b25:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c0022b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2e:	89 10                	mov    DWORD PTR [eax],edx
c0022b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b34:	83 ec 0c             	sub    esp,0xc
c0022b37:	50                   	push   eax
c0022b38:	e8 89 73 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022b3d:	83 c4 10             	add    esp,0x10
c0022b40:	90                   	nop
c0022b41:	83 c4 0c             	add    esp,0xc
c0022b44:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022b46 <ATAPI::~ATAPI()>:
c0022b46:	83 ec 0c             	sub    esp,0xc
c0022b49:	83 ec 0c             	sub    esp,0xc
c0022b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b50:	e8 cd ff ff ff       	call   c0022b22 <ATAPI::~ATAPI()>
c0022b55:	83 c4 10             	add    esp,0x10
c0022b58:	83 ec 08             	sub    esp,0x8
c0022b5b:	68 84 01 00 00       	push   0x184
c0022b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b64:	e8 fb a7 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	83 c4 0c             	add    esp,0xc
c0022b6f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022b70 <SATA::~SATA()>:
c0022b70:	83 ec 0c             	sub    esp,0xc
c0022b73:	ba b8 65 02 c0       	mov    edx,0xc00265b8
c0022b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7c:	89 10                	mov    DWORD PTR [eax],edx
c0022b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b82:	83 ec 0c             	sub    esp,0xc
c0022b85:	50                   	push   eax
c0022b86:	e8 3b 73 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022b8b:	83 c4 10             	add    esp,0x10
c0022b8e:	90                   	nop
c0022b8f:	83 c4 0c             	add    esp,0xc
c0022b92:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022b94 <SATA::~SATA()>:
c0022b94:	83 ec 0c             	sub    esp,0xc
c0022b97:	83 ec 0c             	sub    esp,0xc
c0022b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b9e:	e8 cd ff ff ff       	call   c0022b70 <SATA::~SATA()>
c0022ba3:	83 c4 10             	add    esp,0x10
c0022ba6:	83 ec 08             	sub    esp,0x8
c0022ba9:	68 7c 01 00 00       	push   0x17c
c0022bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bb2:	e8 ad a7 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022bb7:	83 c4 10             	add    esp,0x10
c0022bba:	83 c4 0c             	add    esp,0xc
c0022bbd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022bbe <SATAPI::~SATAPI()>:
c0022bbe:	83 ec 0c             	sub    esp,0xc
c0022bc1:	ba dc 66 02 c0       	mov    edx,0xc00266dc
c0022bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bca:	89 10                	mov    DWORD PTR [eax],edx
c0022bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd0:	83 ec 0c             	sub    esp,0xc
c0022bd3:	50                   	push   eax
c0022bd4:	e8 ed 72 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022bd9:	83 c4 10             	add    esp,0x10
c0022bdc:	90                   	nop
c0022bdd:	83 c4 0c             	add    esp,0xc
c0022be0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022be2 <SATAPI::~SATAPI()>:
c0022be2:	83 ec 0c             	sub    esp,0xc
c0022be5:	83 ec 0c             	sub    esp,0xc
c0022be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bec:	e8 cd ff ff ff       	call   c0022bbe <SATAPI::~SATAPI()>
c0022bf1:	83 c4 10             	add    esp,0x10
c0022bf4:	83 ec 08             	sub    esp,0x8
c0022bf7:	68 84 01 00 00       	push   0x184
c0022bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c00:	e8 5f a7 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022c05:	83 c4 10             	add    esp,0x10
c0022c08:	83 c4 0c             	add    esp,0xc
c0022c0b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022c0c <APICTimer::~APICTimer()>:
c0022c0c:	83 ec 0c             	sub    esp,0xc
c0022c0f:	ba 30 67 02 c0       	mov    edx,0xc0026730
c0022c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c18:	89 10                	mov    DWORD PTR [eax],edx
c0022c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1e:	83 ec 0c             	sub    esp,0xc
c0022c21:	50                   	push   eax
c0022c22:	e8 39 84 fe ff       	call   c000b060 <Timer::~Timer()>
c0022c27:	83 c4 10             	add    esp,0x10
c0022c2a:	90                   	nop
c0022c2b:	83 c4 0c             	add    esp,0xc
c0022c2e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022c30 <APICTimer::~APICTimer()>:
c0022c30:	83 ec 0c             	sub    esp,0xc
c0022c33:	83 ec 0c             	sub    esp,0xc
c0022c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c3a:	e8 cd ff ff ff       	call   c0022c0c <APICTimer::~APICTimer()>
c0022c3f:	83 c4 10             	add    esp,0x10
c0022c42:	83 ec 08             	sub    esp,0x8
c0022c45:	68 60 01 00 00       	push   0x160
c0022c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c4e:	e8 11 a7 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022c53:	83 c4 10             	add    esp,0x10
c0022c56:	83 c4 0c             	add    esp,0xc
c0022c59:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022c5c <PIT::~PIT()>:
c0022c5c:	83 ec 0c             	sub    esp,0xc
c0022c5f:	ba 80 67 02 c0       	mov    edx,0xc0026780
c0022c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c68:	89 10                	mov    DWORD PTR [eax],edx
c0022c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6e:	83 ec 0c             	sub    esp,0xc
c0022c71:	50                   	push   eax
c0022c72:	e8 e9 83 fe ff       	call   c000b060 <Timer::~Timer()>
c0022c77:	83 c4 10             	add    esp,0x10
c0022c7a:	90                   	nop
c0022c7b:	83 c4 0c             	add    esp,0xc
c0022c7e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022c80 <PIT::~PIT()>:
c0022c80:	83 ec 0c             	sub    esp,0xc
c0022c83:	83 ec 0c             	sub    esp,0xc
c0022c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c8a:	e8 cd ff ff ff       	call   c0022c5c <PIT::~PIT()>
c0022c8f:	83 c4 10             	add    esp,0x10
c0022c92:	83 ec 08             	sub    esp,0x8
c0022c95:	68 5c 01 00 00       	push   0x15c
c0022c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c9e:	e8 c1 a6 fe ff       	call   c000d364 <operator delete(void*, unsigned long)>
c0022ca3:	83 c4 10             	add    esp,0x10
c0022ca6:	83 c4 0c             	add    esp,0xc
c0022ca9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be cb 49 02 c0       	mov    esi,0xc00249cb
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be e7 49 02 c0       	mov    esi,0xc00249e7
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
