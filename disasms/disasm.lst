
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a7 fe 00 00       	call   c000fec7 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 6a 02 c0       	mov    eax,0xc0026a08
c0000025:	3d 08 6a 02 c0       	cmp    eax,0xc0026a08
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 6a 02 c0       	push   0xc0026a08
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 6a 02 c0       	mov    eax,0xc0026a08
c0000051:	2d 08 6a 02 c0       	sub    eax,0xc0026a08
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 6a 02 c0       	push   0xc0026a08
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 30 25 02 c0       	mov    ebx,0xc0022530
c0000097:	81 eb 2c 25 02 c0    	sub    ebx,0xc002252c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 2c 25 02 c0       	mov    esi,0xc002252c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 6a 02 c0       	push   0xc0026a08
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 08 6a 02 c0       	push   0xc0026a08
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0f 64 01 00       	call   c00166bc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c 45 01 00       	call   c00147d1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ed 63 01 00       	call   c00166bc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 69 01 00       	call   c0016c2c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 7d 6e 01 00       	call   c0017174 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6a f0 00 00       	jmp    c000f3e9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 25 02 c0 02 	test   BYTE PTR [edx-0x3ffddac0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 25 02 c0 01 	test   BYTE PTR [edx-0x3ffddac0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 25 02 c0 08 	test   BYTE PTR [edx-0x3ffddac0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 25 02 c0 04 	test   BYTE PTR [ecx-0x3ffddac0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 25 02 c0 01 	test   BYTE PTR [edx-0x3ffddac0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 b5 ed 00 00       	call   c000fc15 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 c2 ec 00 00       	call   c000fbb7 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 a1 eb 00 00       	call   c000fb81 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 9c eb 00 00       	call   c000fbb7 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 48 ea 00 00       	call   c000fb81 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 2e ea 00 00       	call   c000fb81 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 04 ea 00 00       	call   c000fb81 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 44 26 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd9bc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 11 9e 01 00       	jmp    c001bd9c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 3b 9e 01 00       	jmp    c001bddc <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 5c 9e 01 00       	jmp    c001be1c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 a0 27 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd860]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 a0 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd860]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 84 55 02 c0       	mov    edx,0xc0025584
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 5c 26 02 c0       	mov    edx,0xc002265c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 62 26 02 c0       	mov    eax,0xc0022662
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 20 27 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd8e0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 6b 26 02 c0       	mov    eax,0xc002266b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 a0 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd860]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb e0 26 02 c0       	mov    ebx,0xc00226e0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 d0 26 02 c0       	mov    eax,0xc00226d0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 72 26 02 c0       	mov    edx,0xc0022672
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 7e 26 02 c0       	mov    edx,0xc002267e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 92 26 02 c0       	mov    edx,0xc0022692
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 80 9e 00 00       	call   c000fc97 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 78 9e 00 00       	call   c000fca7 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c c0 2a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022ac0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 c0 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022ac0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 00 28 02 c0       	mov    eax,0xc0022800
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 c0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd840]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 c0 2b 02 c0       	push   0xc0022bc0
c0006303:	e8 30 64 01 00       	call   c001c738 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ce 2b 02 c0       	push   0xc0022bce
c000633b:	e8 f8 63 01 00       	call   c001c738 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 61 63 01 00       	call   c001c6dc <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 dd 2b 02 c0       	push   0xc0022bdd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 e0 2b 02 c0       	push   0xc0022be0
c00069fa:	e8 39 5d 01 00       	call   c001c738 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 4d 5d 01 00       	call   c001c754 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 e5 2b 02 c0 	mov    DWORD PTR [esp],0xc0022be5
c0006a14:	e8 1f 5d 01 00       	call   c001c738 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 2f 5d 01 00       	call   c001c754 <iso_kprintfd>
c0006a25:	c7 04 24 eb 2b 02 c0 	mov    DWORD PTR [esp],0xc0022beb
c0006a2c:	e8 07 5d 01 00       	call   c001c738 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 17 5d 01 00       	call   c001c754 <iso_kprintfd>
c0006a3d:	c7 04 24 f1 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bf1
c0006a44:	e8 ef 5c 01 00       	call   c001c738 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 ff 5c 01 00       	call   c001c754 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 dd 2b 02 c0       	push   0xc0022bdd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 fa 2b 02 c0       	push   0xc0022bfa
c0006c19:	e8 1a 5b 01 00       	call   c001c738 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 05 2c 02 c0       	push   0xc0022c05
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 0c 2c 02 c0       	push   0xc0022c0c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 13 2c 02 c0       	push   0xc0022c13
c0006d30:	e8 03 5a 01 00       	call   c001c738 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 1e 2c 02 c0       	push   0xc0022c1e
c0006d4b:	e8 e8 59 01 00       	call   c001c738 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 1d 8f 00 00       	call   c000fc97 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 0c 8f 00 00       	call   c000fc97 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 f7 8e 00 00       	call   c000fc97 <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 de 8e 00 00       	call   c000fc97 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 bc 8e 00 00       	call   c000fca7 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 ae 8e 00 00       	call   c000fca7 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 94 8e 00 00       	call   c000fca7 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 7f 8e 00 00       	call   c000fca7 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 30 2c 02 c0       	mov    esi,0xc0022c30
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 2f 2c 02 c0       	mov    al,ds:0xc0022c2f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 40 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd3c0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 90 2d 02 c0       	push   0xc0022d90
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 a4 2d 02 c0       	push   0xc0022da4
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 ae 2d 02 c0       	push   0xc0022dae
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 b8 2d 02 c0       	push   0xc0022db8
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 fc 2e 02 c0       	push   0xc0022efc
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 c2 2d 02 c0       	push   0xc0022dc2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 1c 2f 02 c0       	push   0xc0022f1c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 d7 2d 02 c0       	push   0xc0022dd7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 f1 2d 02 c0       	push   0xc0022df1
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 a0 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda060]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 44 2f 02 c0       	push   0xc0022f44
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 fc 2e 02 c0       	push   0xc0022efc
c00071d4:	e8 05 8e 00 00       	call   c000ffde <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 8c 2f 02 c0       	push   0xc0022f8c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 8c 2f 02 c0       	push   0xc0022f8c
c0007203:	e8 d6 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 fc 2d 02 c0       	push   0xc0022dfc
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 fc 2d 02 c0       	push   0xc0022dfc
c000722f:	e8 aa 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 19 2e 02 c0       	push   0xc0022e19
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 19 2e 02 c0       	push   0xc0022e19
c000725b:	e8 7e 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 ac 2f 02 c0       	push   0xc0022fac
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 ac 2f 02 c0       	push   0xc0022fac
c0007287:	e8 52 8d 00 00       	call   c000ffde <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 d0 2f 02 c0       	push   0xc0022fd0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 d0 2f 02 c0       	push   0xc0022fd0
c00072b3:	e8 26 8d 00 00       	call   c000ffde <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 35 2e 02 c0       	push   0xc0022e35
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 35 2e 02 c0       	push   0xc0022e35
c00072df:	e8 fa 8c 00 00       	call   c000ffde <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 51 2e 02 c0       	push   0xc0022e51
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 51 2e 02 c0       	push   0xc0022e51
c000730b:	e8 ce 8c 00 00       	call   c000ffde <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 f0 2f 02 c0       	push   0xc0022ff0
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 f0 2f 02 c0       	push   0xc0022ff0
c0007337:	e8 a2 8c 00 00       	call   c000ffde <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 14 30 02 c0       	push   0xc0023014
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 14 30 02 c0       	push   0xc0023014
c0007363:	e8 76 8c 00 00       	call   c000ffde <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 cd 88 00 00       	call   c000fc97 <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073d5:	68 33 30 02 c0       	push   0xc0023033
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 51 30 02 c0       	push   0xc0023051
c00073ef:	e8 ea 8b 00 00       	call   c000ffde <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 6b 30 02 c0       	push   0xc002306b
c0007410:	e8 c9 8b 00 00       	call   c000ffde <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 85 30 02 c0       	push   0xc0023085
c0007457:	e8 82 8b 00 00       	call   c000ffde <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 9f 30 02 c0       	push   0xc002309f
c0007487:	e8 52 8b 00 00       	call   c000ffde <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 d4 6e 00 00       	call   c000e3ad <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 e0 94 00 00       	call   c00109d3 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 b9 30 02 c0       	push   0xc00230b9
c000752c:	e8 ad 8a 00 00       	call   c000ffde <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 93 02 c0       	push   0xc0029300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 88 5b 00 00       	call   c000d199 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 7a 86 00 00       	call   c000fc97 <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007628:	68 33 30 02 c0       	push   0xc0023033
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 c2 30 02 c0       	push   0xc00230c2
c0007642:	e8 97 89 00 00       	call   c000ffde <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 df 30 02 c0       	push   0xc00230df
c0007673:	e8 66 89 00 00       	call   c000ffde <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 fc 30 02 c0       	push   0xc00230fc
c00076ad:	e8 2c 89 00 00       	call   c000ffde <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007790:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 eb 84 00 00       	call   c000fc97 <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00077b7:	68 33 30 02 c0       	push   0xc0023033
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 17 31 02 c0       	push   0xc0023117
c00077d1:	e8 08 88 00 00       	call   c000ffde <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 32 31 02 c0       	push   0xc0023132
c0007804:	e8 d5 87 00 00       	call   c000ffde <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 c4 83 00 00       	call   c000fc97 <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 3a 82 00 00       	call   c000fc97 <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 4d 31 02 c0       	mov    esi,0xc002314d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 24 32 02 c0       	mov    edx,0xc0023224
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 03 b5 00 00       	call   c00131f2 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 04 56 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 40 32 02 c0       	mov    edx,0xc0023240
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 b5 b4 00 00       	call   c00131f2 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 b6 55 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba b8 31 02 c0       	mov    edx,0xc00231b8
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba b8 31 02 c0       	mov    edx,0xc00231b8
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 60 55 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 9d 7e 00 00       	call   c000fc97 <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 36 41 01 00       	call   c001bf38 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 89 7e 00 00       	call   c000fc97 <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 4e 50 01 00       	call   c001ce64 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 41 4e 02 c0       	push   0xc0024e41
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 56 31 02 c0       	push   0xc0023156
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 71 31 02 c0       	push   0xc0023171
c000801f:	e8 ba 7f 00 00       	call   c000ffde <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 be af 00 00       	call   c001300c <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 24 32 02 c0       	mov    edx,0xc0023224
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 97 31 02 c0       	push   0xc0023197
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 64 28 00 00       	call   c000a98e <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 5f 24 00 00       	call   c000a98e <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 1f 77 00 00       	call   c000fc97 <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 e8 a9 00 00       	call   c001300c <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba 40 32 02 c0       	mov    edx,0xc0023240
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 bc 22 00 00       	call   c000a98e <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 3e 12 00 00       	call   c0009b5e <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 9f 0f 00 00       	call   c00098fe <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 94 49 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00089a0:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	6b c0 0a             	imul   eax,eax,0xa
c00089ad:	52                   	push   edx
c00089ae:	52                   	push   edx
c00089af:	99                   	cdq    
c00089b0:	52                   	push   edx
c00089b1:	50                   	push   eax
c00089b2:	e8 4d e7 00 00       	call   c0017104 <milliTenthSleep(unsigned long long)>
c00089b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089be:	e8 e0 17 01 00       	call   c001a1a3 <HalMakeBeep(int)>
c00089c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089cb:	83 c4 1c             	add    esp,0x1c
c00089ce:	e9 fd e5 00 00       	jmp    c0016fd0 <blockTask(TaskState)>

c00089d3 <KeBeep(int, int, bool)>:
c00089d3:	56                   	push   esi
c00089d4:	53                   	push   ebx
c00089d5:	83 ec 10             	sub    esp,0x10
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e4:	e8 ba 17 01 00       	call   c001a1a3 <HalMakeBeep(int)>
c00089e9:	83 c4 10             	add    esp,0x10
c00089ec:	89 f0                	mov    eax,esi
c00089ee:	84 c0                	test   al,al
c00089f0:	74 1f                	je     c0008a11 <KeBeep(int, int, bool)+0x3e>
c00089f2:	50                   	push   eax
c00089f3:	50                   	push   eax
c00089f4:	6b c3 0a             	imul   eax,ebx,0xa
c00089f7:	99                   	cdq    
c00089f8:	52                   	push   edx
c00089f9:	50                   	push   eax
c00089fa:	e8 05 e7 00 00       	call   c0017104 <milliTenthSleep(unsigned long long)>
c00089ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a07:	83 c4 14             	add    esp,0x14
c0008a0a:	5b                   	pop    ebx
c0008a0b:	5e                   	pop    esi
c0008a0c:	e9 92 17 01 00       	jmp    c001a1a3 <HalMakeBeep(int)>
c0008a11:	68 e6 00 00 00       	push   0xe6
c0008a16:	53                   	push   ebx
c0008a17:	68 92 89 00 c0       	push   0xc0008992
c0008a1c:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a22:	e8 59 e2 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c0008a27:	83 c4 14             	add    esp,0x14
c0008a2a:	5b                   	pop    ebx
c0008a2b:	5e                   	pop    esi
c0008a2c:	c3                   	ret    
c0008a2d:	90                   	nop

c0008a2e <KeLoadTimezoneStrings()>:
c0008a2e:	55                   	push   ebp
c0008a2f:	89 e5                	mov    ebp,esp
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 44             	sub    esp,0x44
c0008a35:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a3c:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a43:	83 ec 0c             	sub    esp,0xc
c0008a46:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a49:	e8 49 72 00 00       	call   c000fc97 <malloc>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 c3                	mov    ebx,eax
c0008a53:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a58:	83 ec 04             	sub    esp,0x4
c0008a5b:	50                   	push   eax
c0008a5c:	68 80 32 02 c0       	push   0xc0023280
c0008a61:	53                   	push   ebx
c0008a62:	e8 cb f6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008a67:	83 c4 10             	add    esp,0x10
c0008a6a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a6d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a71:	75 10                	jne    c0008a83 <KeLoadTimezoneStrings()+0x55>
c0008a73:	83 ec 0c             	sub    esp,0xc
c0008a76:	68 9f 32 02 c0       	push   0xc002329f
c0008a7b:	e8 5e 75 00 00       	call   c000ffde <KePanic(char const*)>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	83 ec 08             	sub    esp,0x8
c0008a86:	6a 01                	push   0x1
c0008a88:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a8b:	e8 c0 f6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	83 ec 04             	sub    esp,0x4
c0008a96:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a99:	50                   	push   eax
c0008a9a:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a9d:	50                   	push   eax
c0008a9e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008aa1:	e8 ac f9 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aaf:	83 ec 08             	sub    esp,0x8
c0008ab2:	50                   	push   eax
c0008ab3:	68 b5 32 02 c0       	push   0xc00232b5
c0008ab8:	e8 a7 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ac3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac6:	83 c0 01             	add    eax,0x1
c0008ac9:	83 ec 0c             	sub    esp,0xc
c0008acc:	50                   	push   eax
c0008acd:	e8 c5 71 00 00       	call   c000fc97 <malloc>
c0008ad2:	83 c4 10             	add    esp,0x10
c0008ad5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008adb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ade:	83 ec 04             	sub    esp,0x4
c0008ae1:	50                   	push   eax
c0008ae2:	6a 00                	push   0x0
c0008ae4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae7:	e8 04 7a ff ff       	call   c00004f0 <memset>
c0008aec:	83 c4 10             	add    esp,0x10
c0008aef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af4:	83 c0 0c             	add    eax,0xc
c0008af7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008afc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aff:	83 ec 0c             	sub    esp,0xc
c0008b02:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b05:	53                   	push   ebx
c0008b06:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b09:	52                   	push   edx
c0008b0a:	50                   	push   eax
c0008b0b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0e:	ff d1                	call   ecx
c0008b10:	83 c4 20             	add    esp,0x20
c0008b13:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b16:	83 ec 08             	sub    esp,0x8
c0008b19:	50                   	push   eax
c0008b1a:	68 c5 32 02 c0       	push   0xc00232c5
c0008b1f:	e8 40 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	83 ec 0c             	sub    esp,0xc
c0008b2a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b2d:	e8 7c f6 ff ff       	call   c00081ae <File::close()>
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b39:	74 15                	je     c0008b50 <KeLoadTimezoneStrings()+0x122>
c0008b3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b40:	83 c0 08             	add    eax,0x8
c0008b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b45:	83 ec 0c             	sub    esp,0xc
c0008b48:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b4b:	ff d0                	call   eax
c0008b4d:	83 c4 10             	add    esp,0x10
c0008b50:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b57:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b65:	7f 3a                	jg     c0008ba1 <KeLoadTimezoneStrings()+0x173>
c0008b67:	83 ec 0c             	sub    esp,0xc
c0008b6a:	6a 78                	push   0x78
c0008b6c:	e8 26 71 00 00       	call   c000fc97 <malloc>
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	89 c2                	mov    edx,eax
c0008b76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b79:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b83:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	68 ce 32 02 c0       	push   0xc00232ce
c0008b92:	50                   	push   eax
c0008b93:	e8 a8 7a ff ff       	call   c0000640 <strcpy>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9f:	eb bd                	jmp    c0008b5e <KeLoadTimezoneStrings()+0x130>
c0008ba1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008bab:	8d 50 01             	lea    edx,[eax+0x1]
c0008bae:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bb1:	89 c2                	mov    edx,eax
c0008bb3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb6:	01 d0                	add    eax,edx
c0008bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008bba:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bbd:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bc1:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc4:	0f be c0             	movsx  eax,al
c0008bc7:	83 f8 0d             	cmp    eax,0xd
c0008bca:	0f 84 82 01 00 00    	je     c0008d52 <KeLoadTimezoneStrings()+0x324>
c0008bd0:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bd3:	0f be c0             	movsx  eax,al
c0008bd6:	83 f8 09             	cmp    eax,0x9
c0008bd9:	75 44                	jne    c0008c1f <KeLoadTimezoneStrings()+0x1f1>
c0008bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bde:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	50                   	push   eax
c0008be9:	e8 82 79 ff ff       	call   c0000570 <strlen>
c0008bee:	83 c4 10             	add    esp,0x10
c0008bf1:	83 f8 08             	cmp    eax,0x8
c0008bf4:	0f 96 c0             	setbe  al
c0008bf7:	0f b6 c0             	movzx  eax,al
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	0f 84 56 01 00 00    	je     c0008d58 <KeLoadTimezoneStrings()+0x32a>
c0008c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c05:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c0c:	83 ec 08             	sub    esp,0x8
c0008c0f:	68 ce 32 02 c0       	push   0xc00232ce
c0008c14:	50                   	push   eax
c0008c15:	e8 26 7c ff ff       	call   c0000840 <strcat>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	eb bc                	jmp    c0008bdb <KeLoadTimezoneStrings()+0x1ad>
c0008c1f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c22:	0f be c0             	movsx  eax,al
c0008c25:	83 f8 0a             	cmp    eax,0xa
c0008c28:	0f 85 9b 00 00 00    	jne    c0008cc9 <KeLoadTimezoneStrings()+0x29b>
c0008c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c31:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	50                   	push   eax
c0008c3c:	e8 2f 79 ff ff       	call   c0000570 <strlen>
c0008c41:	83 c4 10             	add    esp,0x10
c0008c44:	83 f8 35             	cmp    eax,0x35
c0008c47:	0f 96 c0             	setbe  al
c0008c4a:	0f b6 c0             	movzx  eax,al
c0008c4d:	85 c0                	test   eax,eax
c0008c4f:	74 1d                	je     c0008c6e <KeLoadTimezoneStrings()+0x240>
c0008c51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c54:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c5b:	83 ec 08             	sub    esp,0x8
c0008c5e:	68 ce 32 02 c0       	push   0xc00232ce
c0008c63:	50                   	push   eax
c0008c64:	e8 d7 7b ff ff       	call   c0000840 <strcat>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	eb c0                	jmp    c0008c2e <KeLoadTimezoneStrings()+0x200>
c0008c6e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c75:	89 c2                	mov    edx,eax
c0008c77:	c1 fa 1f             	sar    edx,0x1f
c0008c7a:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c7d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c80:	39 c8                	cmp    eax,ecx
c0008c82:	89 d0                	mov    eax,edx
c0008c84:	19 d8                	sbb    eax,ebx
c0008c86:	0f 82 d2 00 00 00    	jb     c0008d5e <KeLoadTimezoneStrings()+0x330>
c0008c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8f:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c94:	83 ec 08             	sub    esp,0x8
c0008c97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c9a:	68 d0 32 02 c0       	push   0xc00232d0
c0008c9f:	e8 c0 e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008ca4:	83 c4 10             	add    esp,0x10
c0008ca7:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008cac:	83 ec 08             	sub    esp,0x8
c0008caf:	50                   	push   eax
c0008cb0:	68 e5 32 02 c0       	push   0xc00232e5
c0008cb5:	e8 aa e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cba:	83 c4 10             	add    esp,0x10
c0008cbd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc4:	e9 9b 00 00 00       	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ccc:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cd3:	83 ec 0c             	sub    esp,0xc
c0008cd6:	50                   	push   eax
c0008cd7:	e8 94 78 ff ff       	call   c0000570 <strlen>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	83 f8 31             	cmp    eax,0x31
c0008ce2:	0f 96 c0             	setbe  al
c0008ce5:	0f b6 c0             	movzx  eax,al
c0008ce8:	85 c0                	test   eax,eax
c0008cea:	74 1f                	je     c0008d0b <KeLoadTimezoneStrings()+0x2dd>
c0008cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cef:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cfc:	52                   	push   edx
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d 7b ff ff       	call   c0000840 <strcat>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	e9 9d fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	50                   	push   eax
c0008d19:	e8 52 78 ff ff       	call   c0000570 <strlen>
c0008d1e:	83 c4 10             	add    esp,0x10
c0008d21:	83 f8 32             	cmp    eax,0x32
c0008d24:	0f 94 c0             	sete   al
c0008d27:	0f b6 c0             	movzx  eax,al
c0008d2a:	85 c0                	test   eax,eax
c0008d2c:	0f 84 76 fe ff ff    	je     c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d35:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d3c:	83 ec 08             	sub    esp,0x8
c0008d3f:	68 e9 32 02 c0       	push   0xc00232e9
c0008d44:	50                   	push   eax
c0008d45:	e8 f6 7a ff ff       	call   c0000840 <strcat>
c0008d4a:	83 c4 10             	add    esp,0x10
c0008d4d:	e9 56 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d52:	90                   	nop
c0008d53:	e9 50 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d58:	90                   	nop
c0008d59:	e9 4a fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d5e:	90                   	nop
c0008d5f:	e9 44 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d64:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d69:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d6c:	7d 49                	jge    c0008db7 <KeLoadTimezoneStrings()+0x389>
c0008d6e:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d73:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d76:	0f 9c c0             	setl   al
c0008d79:	0f b6 d0             	movzx  edx,al
c0008d7c:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d81:	52                   	push   edx
c0008d82:	50                   	push   eax
c0008d83:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d86:	68 ee 32 02 c0       	push   0xc00232ee
c0008d8b:	e8 d4 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008d90:	83 c4 10             	add    esp,0x10
c0008d93:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d96:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d9d:	83 ec 04             	sub    esp,0x4
c0008da0:	50                   	push   eax
c0008da1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da4:	68 fc 32 02 c0       	push   0xc00232fc
c0008da9:	e8 b6 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db5:	eb ad                	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008db7:	90                   	nop
c0008db8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008dbb:	c9                   	leave  
c0008dbc:	c3                   	ret    

c0008dbd <KeGetTimezoneStringFromID(int)>:
c0008dbd:	55                   	push   ebp
c0008dbe:	89 e5                	mov    ebp,esp
c0008dc0:	83 ec 08             	sub    esp,0x8
c0008dc3:	83 ec 08             	sub    esp,0x8
c0008dc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc9:	68 05 33 02 c0       	push   0xc0023305
c0008dce:	e8 91 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008ddb:	83 f0 01             	xor    eax,0x1
c0008dde:	0f b6 c0             	movzx  eax,al
c0008de1:	85 c0                	test   eax,eax
c0008de3:	74 15                	je     c0008dfa <KeGetTimezoneStringFromID(int)+0x3d>
c0008de5:	e8 44 fc ff ff       	call   c0008a2e <KeLoadTimezoneStrings()>
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	68 23 33 02 c0       	push   0xc0023323
c0008df2:	e8 6d e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dff:	83 ec 04             	sub    esp,0x4
c0008e02:	50                   	push   eax
c0008e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e06:	68 34 33 02 c0       	push   0xc0023334
c0008e0b:	e8 54 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e10:	83 c4 10             	add    esp,0x10
c0008e13:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e18:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e1b:	7d 06                	jge    c0008e23 <KeGetTimezoneStringFromID(int)+0x66>
c0008e1d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e21:	79 07                	jns    c0008e2a <KeGetTimezoneStringFromID(int)+0x6d>
c0008e23:	b8 00 00 00 00       	mov    eax,0x0
c0008e28:	eb 2e                	jmp    c0008e58 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e34:	83 c0 01             	add    eax,0x1
c0008e37:	83 ec 04             	sub    esp,0x4
c0008e3a:	50                   	push   eax
c0008e3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3e:	68 47 33 02 c0       	push   0xc0023347
c0008e43:	e8 1c e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e48:	83 c4 10             	add    esp,0x10
c0008e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e55:	83 c0 01             	add    eax,0x1
c0008e58:	c9                   	leave  
c0008e59:	c3                   	ret    

c0008e5a <KeUpdateTimezone(char const*)>:
c0008e5a:	55                   	push   ebp
c0008e5b:	89 e5                	mov    ebp,esp
c0008e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e60:	8a 00                	mov    al,BYTE PTR [eax]
c0008e62:	0f be c0             	movsx  eax,al
c0008e65:	83 f8 2b             	cmp    eax,0x2b
c0008e68:	74 11                	je     c0008e7b <KeUpdateTimezone(char const*)+0x21>
c0008e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e6d:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6f:	0f be c0             	movsx  eax,al
c0008e72:	83 f8 2d             	cmp    eax,0x2d
c0008e75:	0f 85 be 00 00 00    	jne    c0008f39 <KeUpdateTimezone(char const*)+0xdf>
c0008e7b:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	83 c0 02             	add    eax,0x2
c0008e88:	8a 00                	mov    al,BYTE PTR [eax]
c0008e8a:	0f be c0             	movsx  eax,al
c0008e8d:	83 f8 2e             	cmp    eax,0x2e
c0008e90:	75 10                	jne    c0008ea2 <KeUpdateTimezone(char const*)+0x48>
c0008e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e95:	83 c0 03             	add    eax,0x3
c0008e98:	8a 00                	mov    al,BYTE PTR [eax]
c0008e9a:	0f be c0             	movsx  eax,al
c0008e9d:	83 f8 35             	cmp    eax,0x35
c0008ea0:	74 20                	je     c0008ec2 <KeUpdateTimezone(char const*)+0x68>
c0008ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea5:	83 c0 03             	add    eax,0x3
c0008ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eaa:	0f be c0             	movsx  eax,al
c0008ead:	83 f8 2e             	cmp    eax,0x2e
c0008eb0:	75 14                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb5:	83 c0 04             	add    eax,0x4
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 35             	cmp    eax,0x35
c0008ec0:	75 04                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008ec2:	b0 01                	mov    al,0x1
c0008ec4:	eb 02                	jmp    c0008ec8 <KeUpdateTimezone(char const*)+0x6e>
c0008ec6:	b0 00                	mov    al,0x0
c0008ec8:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed0:	83 c0 01             	add    eax,0x1
c0008ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed5:	0f be c0             	movsx  eax,al
c0008ed8:	83 e8 30             	sub    eax,0x30
c0008edb:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee3:	83 c0 03             	add    eax,0x3
c0008ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee8:	0f be c0             	movsx  eax,al
c0008eeb:	83 f8 2e             	cmp    eax,0x2e
c0008eee:	75 2e                	jne    c0008f1e <KeUpdateTimezone(char const*)+0xc4>
c0008ef0:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef6:	89 d0                	mov    eax,edx
c0008ef8:	c1 e0 02             	shl    eax,0x2
c0008efb:	01 d0                	add    eax,edx
c0008efd:	01 c0                	add    eax,eax
c0008eff:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f07:	83 c0 02             	add    eax,0x2
c0008f0a:	8a 00                	mov    al,BYTE PTR [eax]
c0008f0c:	0f be c0             	movsx  eax,al
c0008f0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f12:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f17:	01 d0                	add    eax,edx
c0008f19:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f21:	8a 00                	mov    al,BYTE PTR [eax]
c0008f23:	0f be c0             	movsx  eax,al
c0008f26:	83 f8 2d             	cmp    eax,0x2d
c0008f29:	75 26                	jne    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f2b:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f30:	f7 d8                	neg    eax
c0008f32:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f37:	eb 18                	jmp    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f39:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f40:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f47:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f51:	90                   	nop
c0008f52:	5d                   	pop    ebp
c0008f53:	c3                   	ret    

c0008f54 <KeSetTimezone(char const*)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	83 ec 18             	sub    esp,0x18
c0008f5a:	83 ec 0c             	sub    esp,0xc
c0008f5d:	68 54 33 02 c0       	push   0xc0023354
c0008f62:	e8 0d 44 00 00       	call   c000d374 <CmOpen(char const*)>
c0008f67:	83 c4 10             	add    esp,0x10
c0008f6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f6d:	83 ec 08             	sub    esp,0x8
c0008f70:	68 79 33 02 c0       	push   0xc0023379
c0008f75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f78:	e8 f7 4f 00 00       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f7d:	83 c4 10             	add    esp,0x10
c0008f80:	83 ec 04             	sub    esp,0x4
c0008f83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f86:	50                   	push   eax
c0008f87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f8a:	e8 b7 48 00 00       	call   c000d846 <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f98:	e8 f5 44 00 00       	call   c000d492 <CmClose(Reghive_Tag*)>
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	83 ec 0c             	sub    esp,0xc
c0008fa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa6:	e8 af fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	90                   	nop
c0008faf:	c9                   	leave  
c0008fb0:	c3                   	ret    

c0008fb1 <KeSetTimezone(int)>:
c0008fb1:	55                   	push   ebp
c0008fb2:	89 e5                	mov    ebp,esp
c0008fb4:	83 ec 18             	sub    esp,0x18
c0008fb7:	83 ec 0c             	sub    esp,0xc
c0008fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fbd:	e8 fb fd ff ff       	call   c0008dbd <KeGetTimezoneStringFromID(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fcc:	74 12                	je     c0008fe0 <KeSetTimezone(int)+0x2f>
c0008fce:	83 ec 0c             	sub    esp,0xc
c0008fd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd4:	e8 7b ff ff ff       	call   c0008f54 <KeSetTimezone(char const*)>
c0008fd9:	83 c4 10             	add    esp,0x10
c0008fdc:	b0 01                	mov    al,0x1
c0008fde:	eb 02                	jmp    c0008fe2 <KeSetTimezone(int)+0x31>
c0008fe0:	b0 00                	mov    al,0x0
c0008fe2:	c9                   	leave  
c0008fe3:	c3                   	ret    

c0008fe4 <KeLoadTimezone()>:
c0008fe4:	55                   	push   ebp
c0008fe5:	89 e5                	mov    ebp,esp
c0008fe7:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fed:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff4:	83 ec 0c             	sub    esp,0xc
c0008ff7:	68 54 33 02 c0       	push   0xc0023354
c0008ffc:	e8 73 43 00 00       	call   c000d374 <CmOpen(char const*)>
c0009001:	83 c4 10             	add    esp,0x10
c0009004:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009007:	83 ec 08             	sub    esp,0x8
c000900a:	68 79 33 02 c0       	push   0xc0023379
c000900f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009012:	e8 5d 4f 00 00       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009017:	83 c4 10             	add    esp,0x10
c000901a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000901d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009021:	7e 18                	jle    c000903b <KeLoadTimezone()+0x57>
c0009023:	83 ec 04             	sub    esp,0x4
c0009026:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000902c:	50                   	push   eax
c000902d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009030:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009033:	e8 ac 44 00 00       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0009038:	83 c4 10             	add    esp,0x10
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009041:	e8 4c 44 00 00       	call   c000d492 <CmClose(Reghive_Tag*)>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	83 ec 0c             	sub    esp,0xc
c000904c:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009052:	50                   	push   eax
c0009053:	e8 02 fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	90                   	nop
c000905c:	c9                   	leave  
c000905d:	c3                   	ret    

c000905e <Clock::Clock(char const*)>:
c000905e:	83 ec 0c             	sub    esp,0xc
c0009061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009065:	83 ec 08             	sub    esp,0x8
c0009068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000906c:	50                   	push   eax
c000906d:	e8 ec 0a 00 00       	call   c0009b5e <Device::Device(char const*)>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c000907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907e:	89 10                	mov    DWORD PTR [eax],edx
c0009080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009084:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908e:	90                   	nop
c000908f:	83 c4 0c             	add    esp,0xc
c0009092:	c3                   	ret    
c0009093:	90                   	nop

c0009094 <Clock::~Clock()>:
c0009094:	83 ec 0c             	sub    esp,0xc
c0009097:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c000909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a0:	89 10                	mov    DWORD PTR [eax],edx
c00090a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a6:	83 ec 0c             	sub    esp,0xc
c00090a9:	50                   	push   eax
c00090aa:	e8 4f 08 00 00       	call   c00098fe <Device::~Device()>
c00090af:	83 c4 10             	add    esp,0x10
c00090b2:	90                   	nop
c00090b3:	83 c4 0c             	add    esp,0xc
c00090b6:	c3                   	ret    
c00090b7:	90                   	nop

c00090b8 <Clock::~Clock()>:
c00090b8:	83 ec 0c             	sub    esp,0xc
c00090bb:	83 ec 0c             	sub    esp,0xc
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	e8 cd ff ff ff       	call   c0009094 <Clock::~Clock()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	83 ec 08             	sub    esp,0x8
c00090cd:	68 58 01 00 00       	push   0x158
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 44 42 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 c4 0c             	add    esp,0xc
c00090e1:	c3                   	ret    

c00090e2 <Clock::timeInSecondsLocal()>:
c00090e2:	55                   	push   ebp
c00090e3:	89 e5                	mov    ebp,esp
c00090e5:	53                   	push   ebx
c00090e6:	83 ec 04             	sub    esp,0x4
c00090e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ee:	83 c0 24             	add    eax,0x24
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	83 ec 0c             	sub    esp,0xc
c00090f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f9:	ff d0                	call   eax
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 c1                	mov    ecx,eax
c0009100:	89 d3                	mov    ebx,edx
c0009102:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009107:	0f b6 d0             	movzx  edx,al
c000910a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910f:	01 c2                	add    edx,eax
c0009111:	89 d0                	mov    eax,edx
c0009113:	01 c0                	add    eax,eax
c0009115:	01 d0                	add    eax,edx
c0009117:	01 c0                	add    eax,eax
c0009119:	01 d0                	add    eax,edx
c000911b:	c1 e0 05             	shl    eax,0x5
c000911e:	01 d0                	add    eax,edx
c0009120:	c1 e0 04             	shl    eax,0x4
c0009123:	89 c2                	mov    edx,eax
c0009125:	c1 fa 1f             	sar    edx,0x1f
c0009128:	01 c1                	add    ecx,eax
c000912a:	11 d3                	adc    ebx,edx
c000912c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009131:	0f b6 c0             	movzx  eax,al
c0009134:	85 c0                	test   eax,eax
c0009136:	74 0c                	je     c0009144 <Clock::timeInSecondsLocal()+0x62>
c0009138:	b8 08 07 00 00       	mov    eax,0x708
c000913d:	ba 00 00 00 00       	mov    edx,0x0
c0009142:	eb 0a                	jmp    c000914e <Clock::timeInSecondsLocal()+0x6c>
c0009144:	b8 00 00 00 00       	mov    eax,0x0
c0009149:	ba 00 00 00 00       	mov    edx,0x0
c000914e:	01 c8                	add    eax,ecx
c0009150:	11 da                	adc    edx,ebx
c0009152:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009155:	c9                   	leave  
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009158:	55                   	push   ebp
c0009159:	89 e5                	mov    ebp,esp
c000915b:	56                   	push   esi
c000915c:	53                   	push   ebx
c000915d:	83 ec 10             	sub    esp,0x10
c0009160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009163:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009169:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000916c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000916f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009171:	83 c0 2c             	add    eax,0x2c
c0009174:	8b 30                	mov    esi,DWORD PTR [eax]
c0009176:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000917b:	0f b6 d0             	movzx  edx,al
c000917e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009183:	01 c2                	add    edx,eax
c0009185:	89 d0                	mov    eax,edx
c0009187:	01 c0                	add    eax,eax
c0009189:	01 d0                	add    eax,edx
c000918b:	01 c0                	add    eax,eax
c000918d:	01 d0                	add    eax,edx
c000918f:	c1 e0 05             	shl    eax,0x5
c0009192:	01 d0                	add    eax,edx
c0009194:	c1 e0 04             	shl    eax,0x4
c0009197:	89 c2                	mov    edx,eax
c0009199:	c1 fa 1f             	sar    edx,0x1f
c000919c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000919f:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091a2:	29 c1                	sub    ecx,eax
c00091a4:	19 d3                	sbb    ebx,edx
c00091a6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091ab:	0f b6 c0             	movzx  eax,al
c00091ae:	85 c0                	test   eax,eax
c00091b0:	74 0c                	je     c00091be <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00091b2:	b8 08 07 00 00       	mov    eax,0x708
c00091b7:	ba 00 00 00 00       	mov    edx,0x0
c00091bc:	eb 0a                	jmp    c00091c8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00091be:	b8 00 00 00 00       	mov    eax,0x0
c00091c3:	ba 00 00 00 00       	mov    edx,0x0
c00091c8:	29 c1                	sub    ecx,eax
c00091ca:	19 d3                	sbb    ebx,edx
c00091cc:	89 c8                	mov    eax,ecx
c00091ce:	89 da                	mov    edx,ebx
c00091d0:	83 ec 04             	sub    esp,0x4
c00091d3:	52                   	push   edx
c00091d4:	50                   	push   eax
c00091d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091d8:	ff d6                	call   esi
c00091da:	83 c4 10             	add    esp,0x10
c00091dd:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091e0:	5b                   	pop    ebx
c00091e1:	5e                   	pop    esi
c00091e2:	5d                   	pop    ebp
c00091e3:	c3                   	ret    

c00091e4 <KeDatetimeToSeconds(datetime_t)>:
c00091e4:	55                   	push   ebp
c00091e5:	89 e5                	mov    ebp,esp
c00091e7:	53                   	push   ebx
c00091e8:	83 ec 24             	sub    esp,0x24
c00091eb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091ef:	2d 6c 07 00 00       	sub    eax,0x76c
c00091f4:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091f8:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091fb:	83 e8 01             	sub    eax,0x1
c00091fe:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009201:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009208:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000920f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009216:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000921d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009220:	0f b6 c8             	movzx  ecx,al
c0009223:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009226:	0f b6 d0             	movzx  edx,al
c0009229:	89 d0                	mov    eax,edx
c000922b:	01 c0                	add    eax,eax
c000922d:	01 d0                	add    eax,edx
c000922f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009236:	01 d0                	add    eax,edx
c0009238:	c1 e0 02             	shl    eax,0x2
c000923b:	01 c1                	add    ecx,eax
c000923d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009240:	0f b6 d0             	movzx  edx,al
c0009243:	89 d0                	mov    eax,edx
c0009245:	01 c0                	add    eax,eax
c0009247:	01 d0                	add    eax,edx
c0009249:	01 c0                	add    eax,eax
c000924b:	01 d0                	add    eax,edx
c000924d:	c1 e0 05             	shl    eax,0x5
c0009250:	01 d0                	add    eax,edx
c0009252:	c1 e0 04             	shl    eax,0x4
c0009255:	01 c8                	add    eax,ecx
c0009257:	89 c2                	mov    edx,eax
c0009259:	c1 fa 1f             	sar    edx,0x1f
c000925c:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000925f:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009262:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009265:	0f b6 c0             	movzx  eax,al
c0009268:	83 e8 01             	sub    eax,0x1
c000926b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000926e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009271:	0f b6 c0             	movzx  eax,al
c0009274:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c000927b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000927e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009281:	0f b6 c0             	movzx  eax,al
c0009284:	83 f8 01             	cmp    eax,0x1
c0009287:	76 7c                	jbe    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009289:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000928d:	0f b7 c0             	movzx  eax,ax
c0009290:	83 e0 03             	and    eax,0x3
c0009293:	85 c0                	test   eax,eax
c0009295:	75 6e                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009297:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929b:	0f b7 c8             	movzx  ecx,ax
c000929e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092a3:	89 c8                	mov    eax,ecx
c00092a5:	f7 e2                	mul    edx
c00092a7:	c1 ea 05             	shr    edx,0x5
c00092aa:	89 d0                	mov    eax,edx
c00092ac:	c1 e0 02             	shl    eax,0x2
c00092af:	01 d0                	add    eax,edx
c00092b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092b8:	01 d0                	add    eax,edx
c00092ba:	c1 e0 02             	shl    eax,0x2
c00092bd:	29 c1                	sub    ecx,eax
c00092bf:	89 c8                	mov    eax,ecx
c00092c1:	0f b7 c0             	movzx  eax,ax
c00092c4:	85 c0                	test   eax,eax
c00092c6:	75 39                	jne    c0009301 <KeDatetimeToSeconds(datetime_t)+0x11d>
c00092c8:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092cc:	0f b7 c0             	movzx  eax,ax
c00092cf:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092d5:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092da:	f7 e9                	imul   ecx
c00092dc:	c1 fa 07             	sar    edx,0x7
c00092df:	89 c8                	mov    eax,ecx
c00092e1:	c1 f8 1f             	sar    eax,0x1f
c00092e4:	29 c2                	sub    edx,eax
c00092e6:	89 d0                	mov    eax,edx
c00092e8:	c1 e0 02             	shl    eax,0x2
c00092eb:	01 d0                	add    eax,edx
c00092ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092f4:	01 d0                	add    eax,edx
c00092f6:	c1 e0 04             	shl    eax,0x4
c00092f9:	29 c1                	sub    ecx,eax
c00092fb:	89 ca                	mov    edx,ecx
c00092fd:	85 d2                	test   edx,edx
c00092ff:	75 04                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009301:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009305:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009309:	0f b7 c0             	movzx  eax,ax
c000930c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000930f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009312:	83 f8 46             	cmp    eax,0x46
c0009315:	0f 9f c0             	setg   al
c0009318:	0f b6 c0             	movzx  eax,al
c000931b:	85 c0                	test   eax,eax
c000931d:	0f 84 a4 00 00 00    	je     c00093c7 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009323:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000932a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000932e:	0f b7 d0             	movzx  edx,ax
c0009331:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009334:	39 c2                	cmp    edx,eax
c0009336:	0f 8e b8 01 00 00    	jle    c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 e0 03             	and    eax,0x3
c0009342:	85 c0                	test   eax,eax
c0009344:	75 6b                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009346:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009349:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000934e:	f7 e9                	imul   ecx
c0009350:	c1 fa 05             	sar    edx,0x5
c0009353:	89 c8                	mov    eax,ecx
c0009355:	c1 f8 1f             	sar    eax,0x1f
c0009358:	29 c2                	sub    edx,eax
c000935a:	89 d0                	mov    eax,edx
c000935c:	c1 e0 02             	shl    eax,0x2
c000935f:	01 d0                	add    eax,edx
c0009361:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009368:	01 d0                	add    eax,edx
c000936a:	c1 e0 02             	shl    eax,0x2
c000936d:	29 c1                	sub    ecx,eax
c000936f:	89 ca                	mov    edx,ecx
c0009371:	85 d2                	test   edx,edx
c0009373:	75 35                	jne    c00093aa <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009375:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009378:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000937e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009383:	f7 e9                	imul   ecx
c0009385:	c1 fa 07             	sar    edx,0x7
c0009388:	89 c8                	mov    eax,ecx
c000938a:	c1 f8 1f             	sar    eax,0x1f
c000938d:	29 c2                	sub    edx,eax
c000938f:	89 d0                	mov    eax,edx
c0009391:	c1 e0 02             	shl    eax,0x2
c0009394:	01 d0                	add    eax,edx
c0009396:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000939d:	01 d0                	add    eax,edx
c000939f:	c1 e0 04             	shl    eax,0x4
c00093a2:	29 c1                	sub    ecx,eax
c00093a4:	89 ca                	mov    edx,ecx
c00093a6:	85 d2                	test   edx,edx
c00093a8:	75 07                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00093aa:	b8 6e 01 00 00       	mov    eax,0x16e
c00093af:	eb 05                	jmp    c00093b6 <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00093b1:	b8 6d 01 00 00       	mov    eax,0x16d
c00093b6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093bc:	83 c0 01             	add    eax,0x1
c00093bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093c2:	e9 63 ff ff ff       	jmp    c000932a <KeDatetimeToSeconds(datetime_t)+0x146>
c00093c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ca:	83 f8 45             	cmp    eax,0x45
c00093cd:	0f 8f 21 01 00 00    	jg     c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c00093d3:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093da:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093de:	0f b7 d0             	movzx  edx,ax
c00093e1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e4:	39 c2                	cmp    edx,eax
c00093e6:	0f 8d 8b 00 00 00    	jge    c0009477 <KeDatetimeToSeconds(datetime_t)+0x293>
c00093ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ef:	83 e0 03             	and    eax,0x3
c00093f2:	85 c0                	test   eax,eax
c00093f4:	75 6b                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00093f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093f9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093fe:	f7 e9                	imul   ecx
c0009400:	c1 fa 05             	sar    edx,0x5
c0009403:	89 c8                	mov    eax,ecx
c0009405:	c1 f8 1f             	sar    eax,0x1f
c0009408:	29 c2                	sub    edx,eax
c000940a:	89 d0                	mov    eax,edx
c000940c:	c1 e0 02             	shl    eax,0x2
c000940f:	01 d0                	add    eax,edx
c0009411:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009418:	01 d0                	add    eax,edx
c000941a:	c1 e0 02             	shl    eax,0x2
c000941d:	29 c1                	sub    ecx,eax
c000941f:	89 ca                	mov    edx,ecx
c0009421:	85 d2                	test   edx,edx
c0009423:	75 35                	jne    c000945a <KeDatetimeToSeconds(datetime_t)+0x276>
c0009425:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009428:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000942e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009433:	f7 e9                	imul   ecx
c0009435:	c1 fa 07             	sar    edx,0x7
c0009438:	89 c8                	mov    eax,ecx
c000943a:	c1 f8 1f             	sar    eax,0x1f
c000943d:	29 c2                	sub    edx,eax
c000943f:	89 d0                	mov    eax,edx
c0009441:	c1 e0 02             	shl    eax,0x2
c0009444:	01 d0                	add    eax,edx
c0009446:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000944d:	01 d0                	add    eax,edx
c000944f:	c1 e0 04             	shl    eax,0x4
c0009452:	29 c1                	sub    ecx,eax
c0009454:	89 ca                	mov    edx,ecx
c0009456:	85 d2                	test   edx,edx
c0009458:	75 07                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000945a:	b8 6e 01 00 00       	mov    eax,0x16e
c000945f:	eb 05                	jmp    c0009466 <KeDatetimeToSeconds(datetime_t)+0x282>
c0009461:	b8 6d 01 00 00       	mov    eax,0x16d
c0009466:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009469:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000946c:	83 e8 01             	sub    eax,0x1
c000946f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009472:	e9 63 ff ff ff       	jmp    c00093da <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009477:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000947a:	83 e0 03             	and    eax,0x3
c000947d:	85 c0                	test   eax,eax
c000947f:	75 6b                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c0009481:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009484:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009489:	f7 e9                	imul   ecx
c000948b:	c1 fa 05             	sar    edx,0x5
c000948e:	89 c8                	mov    eax,ecx
c0009490:	c1 f8 1f             	sar    eax,0x1f
c0009493:	29 c2                	sub    edx,eax
c0009495:	89 d0                	mov    eax,edx
c0009497:	c1 e0 02             	shl    eax,0x2
c000949a:	01 d0                	add    eax,edx
c000949c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a3:	01 d0                	add    eax,edx
c00094a5:	c1 e0 02             	shl    eax,0x2
c00094a8:	29 c1                	sub    ecx,eax
c00094aa:	89 ca                	mov    edx,ecx
c00094ac:	85 d2                	test   edx,edx
c00094ae:	75 35                	jne    c00094e5 <KeDatetimeToSeconds(datetime_t)+0x301>
c00094b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094b3:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094b9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094be:	f7 e9                	imul   ecx
c00094c0:	c1 fa 07             	sar    edx,0x7
c00094c3:	89 c8                	mov    eax,ecx
c00094c5:	c1 f8 1f             	sar    eax,0x1f
c00094c8:	29 c2                	sub    edx,eax
c00094ca:	89 d0                	mov    eax,edx
c00094cc:	c1 e0 02             	shl    eax,0x2
c00094cf:	01 d0                	add    eax,edx
c00094d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d8:	01 d0                	add    eax,edx
c00094da:	c1 e0 04             	shl    eax,0x4
c00094dd:	29 c1                	sub    ecx,eax
c00094df:	89 ca                	mov    edx,ecx
c00094e1:	85 d2                	test   edx,edx
c00094e3:	75 07                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c00094e5:	b8 6e 01 00 00       	mov    eax,0x16e
c00094ea:	eb 05                	jmp    c00094f1 <KeDatetimeToSeconds(datetime_t)+0x30d>
c00094ec:	b8 6d 01 00 00       	mov    eax,0x16d
c00094f1:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f7:	89 c2                	mov    edx,eax
c00094f9:	c1 fa 1f             	sar    edx,0x1f
c00094fc:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009502:	6b c8 00             	imul   ecx,eax,0x0
c0009505:	01 d9                	add    ecx,ebx
c0009507:	bb 80 51 01 00       	mov    ebx,0x15180
c000950c:	f7 e3                	mul    ebx
c000950e:	01 d1                	add    ecx,edx
c0009510:	89 ca                	mov    edx,ecx
c0009512:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009515:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009518:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000951b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000951e:	83 c4 24             	add    esp,0x24
c0009521:	5b                   	pop    ebx
c0009522:	5d                   	pop    ebp
c0009523:	c3                   	ret    

c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009524:	55                   	push   ebp
c0009525:	89 e5                	mov    ebp,esp
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 20             	sub    esp,0x20
c000952c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000952f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009532:	e8 ad fc ff ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	89 c3                	mov    ebx,eax
c000953c:	89 d6                	mov    esi,edx
c000953e:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009543:	0f b6 d0             	movzx  edx,al
c0009546:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000954b:	01 c2                	add    edx,eax
c000954d:	89 d0                	mov    eax,edx
c000954f:	01 c0                	add    eax,eax
c0009551:	01 d0                	add    eax,edx
c0009553:	01 c0                	add    eax,eax
c0009555:	01 d0                	add    eax,edx
c0009557:	c1 e0 05             	shl    eax,0x5
c000955a:	01 d0                	add    eax,edx
c000955c:	c1 e0 04             	shl    eax,0x4
c000955f:	89 c2                	mov    edx,eax
c0009561:	c1 fa 1f             	sar    edx,0x1f
c0009564:	29 c3                	sub    ebx,eax
c0009566:	19 d6                	sbb    esi,edx
c0009568:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000956d:	0f b6 c0             	movzx  eax,al
c0009570:	85 c0                	test   eax,eax
c0009572:	74 0c                	je     c0009580 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009574:	b8 08 07 00 00       	mov    eax,0x708
c0009579:	ba 00 00 00 00       	mov    edx,0x0
c000957e:	eb 0a                	jmp    c000958a <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c0009580:	b8 00 00 00 00       	mov    eax,0x0
c0009585:	ba 00 00 00 00       	mov    edx,0x0
c000958a:	29 c3                	sub    ebx,eax
c000958c:	19 d6                	sbb    esi,edx
c000958e:	89 d8                	mov    eax,ebx
c0009590:	89 f2                	mov    edx,esi
c0009592:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009595:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009598:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000959b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000959e:	89 d0                	mov    eax,edx
c00095a0:	31 d2                	xor    edx,edx
c00095a2:	89 c3                	mov    ebx,eax
c00095a4:	89 d6                	mov    esi,edx
c00095a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095a9:	80 e5 ff             	and    ch,0xff
c00095ac:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095af:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095b2:	83 e1 00             	and    ecx,0x0
c00095b5:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	56                   	push   esi
c00095bc:	53                   	push   ebx
c00095bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095c0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095c3:	68 8e 33 02 c0       	push   0xc002338e
c00095c8:	e8 97 d9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00095cd:	83 c4 20             	add    esp,0x20
c00095d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d5:	83 c0 2c             	add    eax,0x2c
c00095d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00095da:	83 ec 04             	sub    esp,0x4
c00095dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095e6:	ff d0                	call   eax
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095ee:	5b                   	pop    ebx
c00095ef:	5e                   	pop    esi
c00095f0:	5d                   	pop    ebp
c00095f1:	c3                   	ret    

c00095f2 <KeSecondsToDatetime(unsigned long long)>:
c00095f2:	55                   	push   ebp
c00095f3:	89 e5                	mov    ebp,esp
c00095f5:	83 ec 48             	sub    esp,0x48
c00095f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095fb:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009601:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009604:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009607:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000960a:	6a 00                	push   0x0
c000960c:	68 80 51 01 00       	push   0x15180
c0009611:	52                   	push   edx
c0009612:	50                   	push   eax
c0009613:	e8 4c 82 01 00       	call   c0021864 <__udivdi3>
c0009618:	83 c4 10             	add    esp,0x10
c000961b:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009620:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009623:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009626:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009629:	6a 00                	push   0x0
c000962b:	68 80 51 01 00       	push   0x15180
c0009630:	52                   	push   edx
c0009631:	50                   	push   eax
c0009632:	e8 2d 83 01 00       	call   c0021964 <__umoddi3>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000963d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009641:	79 0b                	jns    c000964e <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009643:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000964a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000964e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009651:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009656:	89 c8                	mov    eax,ecx
c0009658:	f7 ea                	imul   edx
c000965a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000965d:	c1 f8 0b             	sar    eax,0xb
c0009660:	89 c2                	mov    edx,eax
c0009662:	89 c8                	mov    eax,ecx
c0009664:	c1 f8 1f             	sar    eax,0x1f
c0009667:	29 c2                	sub    edx,eax
c0009669:	89 d0                	mov    eax,edx
c000966b:	88 c2                	mov    dl,al
c000966d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009670:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009673:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009676:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000967b:	89 c8                	mov    eax,ecx
c000967d:	f7 ea                	imul   edx
c000967f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009682:	c1 f8 0b             	sar    eax,0xb
c0009685:	89 c2                	mov    edx,eax
c0009687:	89 c8                	mov    eax,ecx
c0009689:	c1 f8 1f             	sar    eax,0x1f
c000968c:	29 c2                	sub    edx,eax
c000968e:	89 d0                	mov    eax,edx
c0009690:	01 c0                	add    eax,eax
c0009692:	01 d0                	add    eax,edx
c0009694:	01 c0                	add    eax,eax
c0009696:	01 d0                	add    eax,edx
c0009698:	c1 e0 05             	shl    eax,0x5
c000969b:	01 d0                	add    eax,edx
c000969d:	c1 e0 04             	shl    eax,0x4
c00096a0:	29 c1                	sub    ecx,eax
c00096a2:	89 c8                	mov    eax,ecx
c00096a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096a7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096aa:	ba 89 88 88 88       	mov    edx,0x88888889
c00096af:	89 c8                	mov    eax,ecx
c00096b1:	f7 ea                	imul   edx
c00096b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b6:	c1 f8 05             	sar    eax,0x5
c00096b9:	89 c2                	mov    edx,eax
c00096bb:	89 c8                	mov    eax,ecx
c00096bd:	c1 f8 1f             	sar    eax,0x1f
c00096c0:	29 c2                	sub    edx,eax
c00096c2:	89 d0                	mov    eax,edx
c00096c4:	88 c2                	mov    dl,al
c00096c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096cc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096cf:	ba 89 88 88 88       	mov    edx,0x88888889
c00096d4:	89 c8                	mov    eax,ecx
c00096d6:	f7 ea                	imul   edx
c00096d8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096db:	c1 f8 05             	sar    eax,0x5
c00096de:	89 c2                	mov    edx,eax
c00096e0:	89 c8                	mov    eax,ecx
c00096e2:	c1 f8 1f             	sar    eax,0x1f
c00096e5:	29 c2                	sub    edx,eax
c00096e7:	89 d0                	mov    eax,edx
c00096e9:	01 c0                	add    eax,eax
c00096eb:	01 d0                	add    eax,edx
c00096ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00096f4:	01 d0                	add    eax,edx
c00096f6:	c1 e0 02             	shl    eax,0x2
c00096f9:	29 c1                	sub    ecx,eax
c00096fb:	89 ca                	mov    edx,ecx
c00096fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009700:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009703:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009707:	79 20                	jns    c0009729 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009709:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000970c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009712:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009717:	89 c8                	mov    eax,ecx
c0009719:	f7 ea                	imul   edx
c000971b:	c1 fa 0f             	sar    edx,0xf
c000971e:	89 c8                	mov    eax,ecx
c0009720:	c1 f8 1f             	sar    eax,0x1f
c0009723:	29 c2                	sub    edx,eax
c0009725:	89 d0                	mov    eax,edx
c0009727:	eb 18                	jmp    c0009741 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009729:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000972c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009731:	89 c8                	mov    eax,ecx
c0009733:	f7 ea                	imul   edx
c0009735:	c1 fa 0f             	sar    edx,0xf
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009744:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009747:	89 d0                	mov    eax,edx
c0009749:	c1 e0 03             	shl    eax,0x3
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 04             	shl    eax,0x4
c0009751:	01 d0                	add    eax,edx
c0009753:	c1 e0 04             	shl    eax,0x4
c0009756:	29 d0                	sub    eax,edx
c0009758:	89 c2                	mov    edx,eax
c000975a:	c1 e2 06             	shl    edx,0x6
c000975d:	29 c2                	sub    edx,eax
c000975f:	89 d0                	mov    eax,edx
c0009761:	f7 d8                	neg    eax
c0009763:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009766:	01 d0                	add    eax,edx
c0009768:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000976b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000976e:	c1 e8 02             	shr    eax,0x2
c0009771:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009776:	f7 e2                	mul    edx
c0009778:	c1 ea 07             	shr    edx,0x7
c000977b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977e:	29 d0                	sub    eax,edx
c0009780:	89 c1                	mov    ecx,eax
c0009782:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009785:	c1 e8 02             	shr    eax,0x2
c0009788:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000978d:	f7 e2                	mul    edx
c000978f:	89 d0                	mov    eax,edx
c0009791:	c1 e8 0b             	shr    eax,0xb
c0009794:	01 c1                	add    ecx,eax
c0009796:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009799:	c1 e8 04             	shr    eax,0x4
c000979c:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097a1:	f7 e2                	mul    edx
c00097a3:	89 d0                	mov    eax,edx
c00097a5:	c1 e8 04             	shr    eax,0x4
c00097a8:	29 c1                	sub    ecx,eax
c00097aa:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097af:	89 c8                	mov    eax,ecx
c00097b1:	f7 e2                	mul    edx
c00097b3:	89 c8                	mov    eax,ecx
c00097b5:	29 d0                	sub    eax,edx
c00097b7:	d1 e8                	shr    eax,1
c00097b9:	01 d0                	add    eax,edx
c00097bb:	c1 e8 08             	shr    eax,0x8
c00097be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097c4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c9:	f7 e2                	mul    edx
c00097cb:	89 d1                	mov    ecx,edx
c00097cd:	c1 e9 05             	shr    ecx,0x5
c00097d0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097d3:	89 d0                	mov    eax,edx
c00097d5:	c1 e0 03             	shl    eax,0x3
c00097d8:	01 d0                	add    eax,edx
c00097da:	c1 e0 03             	shl    eax,0x3
c00097dd:	01 d0                	add    eax,edx
c00097df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e6:	01 c2                	add    edx,eax
c00097e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097eb:	c1 e8 02             	shr    eax,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	29 c1                	sub    ecx,eax
c00097f2:	89 ca                	mov    edx,ecx
c00097f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f7:	01 d0                	add    eax,edx
c00097f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097ff:	89 d0                	mov    eax,edx
c0009801:	c1 e0 02             	shl    eax,0x2
c0009804:	01 d0                	add    eax,edx
c0009806:	83 c0 02             	add    eax,0x2
c0009809:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000980e:	f7 e2                	mul    edx
c0009810:	89 d0                	mov    eax,edx
c0009812:	c1 e8 07             	shr    eax,0x7
c0009815:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009818:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000981b:	89 d0                	mov    eax,edx
c000981d:	c1 e0 03             	shl    eax,0x3
c0009820:	01 d0                	add    eax,edx
c0009822:	01 c0                	add    eax,eax
c0009824:	01 d0                	add    eax,edx
c0009826:	c1 e0 03             	shl    eax,0x3
c0009829:	01 d0                	add    eax,edx
c000982b:	83 c0 02             	add    eax,0x2
c000982e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009833:	f7 e2                	mul    edx
c0009835:	c1 ea 02             	shr    edx,0x2
c0009838:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000983b:	29 d0                	sub    eax,edx
c000983d:	83 c0 01             	add    eax,0x1
c0009840:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009843:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009847:	77 07                	ja     c0009850 <KeSecondsToDatetime(unsigned long long)+0x25e>
c0009849:	b8 02 00 00 00       	mov    eax,0x2
c000984e:	eb 05                	jmp    c0009855 <KeSecondsToDatetime(unsigned long long)+0x263>
c0009850:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009855:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009858:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000985b:	89 d0                	mov    eax,edx
c000985d:	c1 e0 02             	shl    eax,0x2
c0009860:	01 d0                	add    eax,edx
c0009862:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009869:	01 d0                	add    eax,edx
c000986b:	c1 e0 04             	shl    eax,0x4
c000986e:	89 c2                	mov    edx,eax
c0009870:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009873:	01 c2                	add    edx,eax
c0009875:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009879:	0f 96 c0             	setbe  al
c000987c:	0f b6 c0             	movzx  eax,al
c000987f:	01 d0                	add    eax,edx
c0009881:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009884:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009887:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000988a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000988e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009891:	83 c0 01             	add    eax,0x1
c0009894:	88 c2                	mov    dl,al
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000989c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000989f:	88 c2                	mov    dl,al
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	88 10                	mov    BYTE PTR [eax],dl
c00098a6:	90                   	nop
c00098a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098aa:	c9                   	leave  
c00098ab:	c2 04 00             	ret    0x4

c00098ae <Clock::timeInDatetimeLocal()>:
c00098ae:	55                   	push   ebp
c00098af:	89 e5                	mov    ebp,esp
c00098b1:	83 ec 08             	sub    esp,0x8
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098ba:	e8 23 f8 ff ff       	call   c00090e2 <Clock::timeInSecondsLocal()>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098c5:	83 ec 04             	sub    esp,0x4
c00098c8:	52                   	push   edx
c00098c9:	50                   	push   eax
c00098ca:	51                   	push   ecx
c00098cb:	e8 22 fd ff ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c00098d0:	83 c4 0c             	add    esp,0xc
c00098d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d6:	c9                   	leave  
c00098d7:	c2 04 00             	ret    0x4

c00098da <Device::hibernate()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::wake()>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <Device::detect()>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <Device::disableLegacy()>:
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <Device::powerSaving(PowerSavingLevel)>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::close(int, int, void*)>:
c00098e4:	31 c0                	xor    eax,eax
c00098e6:	c3                   	ret    
c00098e7:	90                   	nop

c00098e8 <DriverlessDevice::detect()>:
c00098e8:	c3                   	ret    
c00098e9:	90                   	nop

c00098ea <DriverlessDevice::open(int, int, void*)>:
c00098ea:	83 ec 18             	sub    esp,0x18
c00098ed:	68 0c 34 02 c0       	push   0xc002340c
c00098f2:	e8 e7 66 00 00       	call   c000ffde <KePanic(char const*)>
c00098f7:	83 c8 ff             	or     eax,0xffffffff
c00098fa:	83 c4 1c             	add    esp,0x1c
c00098fd:	c3                   	ret    

c00098fe <Device::~Device()>:
c00098fe:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c0009903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009907:	89 10                	mov    DWORD PTR [eax],edx
c0009909:	90                   	nop
c000990a:	c3                   	ret    
c000990b:	90                   	nop

c000990c <Device::~Device()>:
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009913:	e8 e6 ff ff ff       	call   c00098fe <Device::~Device()>
c0009918:	83 c4 04             	add    esp,0x4
c000991b:	83 ec 08             	sub    esp,0x8
c000991e:	68 58 01 00 00       	push   0x158
c0009923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009927:	e8 f3 39 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000992c:	83 c4 10             	add    esp,0x10
c000992f:	83 c4 0c             	add    esp,0xc
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::findAndLoadDriver()>:
c0009934:	c7 44 24 04 2a 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc002342a
c000993c:	e9 23 d6 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0009941:	90                   	nop

c0009942 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009942:	57                   	push   edi
c0009943:	b9 09 00 00 00       	mov    ecx,0x9
c0009948:	56                   	push   esi
c0009949:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000994d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009951:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000995b:	81 c7 18 01 00 00    	add    edi,0x118
c0009961:	fc                   	cld    
c0009962:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009964:	5e                   	pop    esi
c0009965:	5f                   	pop    edi
c0009966:	c3                   	ret    
c0009967:	90                   	nop

c0009968 <Device::preOpenACPI(void*, char*, char*)>:
c0009968:	57                   	push   edi
c0009969:	b9 1e 00 00 00       	mov    ecx,0x1e
c000996e:	56                   	push   esi
c000996f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009977:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009981:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009987:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000998d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009993:	b9 0e 00 00 00       	mov    ecx,0xe
c0009998:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000999e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099a4:	5e                   	pop    esi
c00099a5:	5f                   	pop    edi
c00099a6:	c3                   	ret    
c00099a7:	90                   	nop

c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a8:	53                   	push   ebx
c00099a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b9:	0f b6 c0             	movzx  eax,al
c00099bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099cc:	5b                   	pop    ebx
c00099cd:	e9 99 0b 01 00       	jmp    c001a56b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099d2 <Device::getParent()>:
c00099d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099dc:	c3                   	ret    
c00099dd:	90                   	nop

c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099f7:	e9 d1 0c 01 00       	jmp    c001a6cd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099fc <Device::addChild(Device*)>:
c00099fc:	53                   	push   ebx
c00099fd:	83 ec 08             	sub    esp,0x8
c0009a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a16:	85 d2                	test   edx,edx
c0009a18:	74 04                	je     c0009a1e <Device::addChild(Device*)+0x22>
c0009a1a:	89 d3                	mov    ebx,edx
c0009a1c:	eb f6                	jmp    c0009a14 <Device::addChild(Device*)+0x18>
c0009a1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a21:	83 ec 0c             	sub    esp,0xc
c0009a24:	6a 08                	push   0x8
c0009a26:	e8 6c 62 00 00       	call   c000fc97 <malloc>
c0009a2b:	89 03                	mov    DWORD PTR [ebx],eax
c0009a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a3a:	83 c4 18             	add    esp,0x18
c0009a3d:	5b                   	pop    ebx
c0009a3e:	c3                   	ret    
c0009a3f:	90                   	nop

c0009a40 <Device::removeAllChildren()>:
c0009a40:	56                   	push   esi
c0009a41:	53                   	push   ebx
c0009a42:	52                   	push   edx
c0009a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a50:	74 17                	je     c0009a69 <Device::removeAllChildren()+0x29>
c0009a52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a55:	85 c0                	test   eax,eax
c0009a57:	74 0c                	je     c0009a65 <Device::removeAllChildren()+0x25>
c0009a59:	83 ec 0c             	sub    esp,0xc
c0009a5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a5e:	50                   	push   eax
c0009a5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a62:	83 c4 10             	add    esp,0x10
c0009a65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a67:	eb e4                	jmp    c0009a4d <Device::removeAllChildren()+0xd>
c0009a69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a82:	58                   	pop    eax
c0009a83:	5b                   	pop    ebx
c0009a84:	5e                   	pop    esi
c0009a85:	c3                   	ret    

c0009a86 <Device::hibernateAll()>:
c0009a86:	53                   	push   ebx
c0009a87:	83 ec 14             	sub    esp,0x14
c0009a8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a90:	53                   	push   ebx
c0009a91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa0:	74 0f                	je     c0009ab1 <Device::hibernateAll()+0x2b>
c0009aa2:	83 ec 0c             	sub    esp,0xc
c0009aa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa8:	e8 d9 ff ff ff       	call   c0009a86 <Device::hibernateAll()>
c0009aad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aaf:	eb e9                	jmp    c0009a9a <Device::hibernateAll()+0x14>
c0009ab1:	83 c4 08             	add    esp,0x8
c0009ab4:	5b                   	pop    ebx
c0009ab5:	c3                   	ret    

c0009ab6 <Device::wakeAll()>:
c0009ab6:	53                   	push   ebx
c0009ab7:	83 ec 14             	sub    esp,0x14
c0009aba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac0:	53                   	push   ebx
c0009ac1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009ac4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad0:	74 0f                	je     c0009ae1 <Device::wakeAll()+0x2b>
c0009ad2:	83 ec 0c             	sub    esp,0xc
c0009ad5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad8:	e8 d9 ff ff ff       	call   c0009ab6 <Device::wakeAll()>
c0009add:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009adf:	eb e9                	jmp    c0009aca <Device::wakeAll()+0x14>
c0009ae1:	83 c4 08             	add    esp,0x8
c0009ae4:	5b                   	pop    ebx
c0009ae5:	c3                   	ret    

c0009ae6 <Device::detectAll()>:
c0009ae6:	53                   	push   ebx
c0009ae7:	83 ec 14             	sub    esp,0x14
c0009aea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009af0:	53                   	push   ebx
c0009af1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009af4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b00:	74 0f                	je     c0009b11 <Device::detectAll()+0x2b>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b08:	e8 d9 ff ff ff       	call   c0009ae6 <Device::detectAll()>
c0009b0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b0f:	eb e9                	jmp    c0009afa <Device::detectAll()+0x14>
c0009b11:	83 c4 08             	add    esp,0x8
c0009b14:	5b                   	pop    ebx
c0009b15:	c3                   	ret    

c0009b16 <Device::disableLegacyAll()>:
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <Device::loadDriversForAll()>:
c0009b18:	c3                   	ret    
c0009b19:	90                   	nop

c0009b1a <Device::powerSavingAll(PowerSavingLevel)>:
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b29:	56                   	push   esi
c0009b2a:	53                   	push   ebx
c0009b2b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b3a:	74 0f                	je     c0009b4b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b3c:	52                   	push   edx
c0009b3d:	52                   	push   edx
c0009b3e:	56                   	push   esi
c0009b3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b42:	e8 d3 ff ff ff       	call   c0009b1a <Device::powerSavingAll(PowerSavingLevel)>
c0009b47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b49:	eb e9                	jmp    c0009b34 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b4b:	58                   	pop    eax
c0009b4c:	5b                   	pop    ebx
c0009b4d:	5e                   	pop    esi
c0009b4e:	c3                   	ret    
c0009b4f:	90                   	nop

c0009b50 <Device::setName(char const*)>:
c0009b50:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b58:	e9 e3 6a ff ff       	jmp    c0000640 <strcpy>
c0009b5d:	90                   	nop

c0009b5e <Device::Device(char const*)>:
c0009b5e:	83 ec 1c             	sub    esp,0x1c
c0009b61:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	89 10                	mov    DWORD PTR [eax],edx
c0009b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b70:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b7e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b8c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b9a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009ba4:	83 ec 08             	sub    esp,0x8
c0009ba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009baf:	e8 9c ff ff ff       	call   c0009b50 <Device::setName(char const*)>
c0009bb4:	83 c4 10             	add    esp,0x10
c0009bb7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bbf:	83 ec 0c             	sub    esp,0xc
c0009bc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc6:	e8 cc 60 00 00       	call   c000fc97 <malloc>
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bdf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c15:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c20:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c2e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c54:	90                   	nop
c0009c55:	83 c4 1c             	add    esp,0x1c
c0009c58:	c3                   	ret    
c0009c59:	90                   	nop

c0009c5a <Device::getName()>:
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	05 d0 00 00 00       	add    eax,0xd0
c0009c63:	c3                   	ret    

c0009c64 <Device::closeAll()>:
c0009c64:	53                   	push   ebx
c0009c65:	83 ec 08             	sub    esp,0x8
c0009c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c6c:	53                   	push   ebx
c0009c6d:	e8 e8 ff ff ff       	call   c0009c5a <Device::getName()>
c0009c72:	52                   	push   edx
c0009c73:	50                   	push   eax
c0009c74:	68 64 34 02 c0       	push   0xc0023464
c0009c79:	e8 e6 d2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c80:	6a 00                	push   0x0
c0009c82:	6a 00                	push   0x0
c0009c84:	6a 00                	push   0x0
c0009c86:	53                   	push   ebx
c0009c87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c90:	83 c4 20             	add    esp,0x20
c0009c93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c96:	74 12                	je     c0009caa <Device::closeAll()+0x46>
c0009c98:	83 ec 0c             	sub    esp,0xc
c0009c9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c9e:	e8 c1 ff ff ff       	call   c0009c64 <Device::closeAll()>
c0009ca3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	eb e9                	jmp    c0009c93 <Device::closeAll()+0x2f>
c0009caa:	83 c4 08             	add    esp,0x8
c0009cad:	5b                   	pop    ebx
c0009cae:	c3                   	ret    
c0009caf:	90                   	nop

c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009cb0:	83 ec 0c             	sub    esp,0xc
c0009cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb7:	83 ec 08             	sub    esp,0x8
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	50                   	push   eax
c0009cbf:	e8 9a fe ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009cc4:	83 c4 10             	add    esp,0x10
c0009cc7:	ba dc 34 02 c0       	mov    edx,0xc00234dc
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	89 10                	mov    DWORD PTR [eax],edx
c0009cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009ce0:	90                   	nop
c0009ce1:	83 c4 0c             	add    esp,0xc
c0009ce4:	c3                   	ret    
c0009ce5:	90                   	nop

c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce6:	57                   	push   edi
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ced:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009cf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cf5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cfb:	75 0c                	jne    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cfd:	52                   	push   edx
c0009cfe:	52                   	push   edx
c0009cff:	53                   	push   ebx
c0009d00:	56                   	push   esi
c0009d01:	e8 d6 7d 01 00       	call   c0021adc <LinkedList<Device>::addElement(Device*)>
c0009d06:	83 c4 10             	add    esp,0x10
c0009d09:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d12:	74 12                	je     c0009d26 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d14:	50                   	push   eax
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d1a:	e8 c7 ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d21:	83 c4 10             	add    esp,0x10
c0009d24:	eb e9                	jmp    c0009d0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d26:	5b                   	pop    ebx
c0009d27:	5e                   	pop    esi
c0009d28:	5f                   	pop    edi
c0009d29:	c3                   	ret    

c0009d2a <getDevicesOfType(DeviceType)>:
c0009d2a:	53                   	push   ebx
c0009d2b:	83 ec 14             	sub    esp,0x14
c0009d2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d32:	53                   	push   ebx
c0009d33:	e8 80 7e 01 00       	call   c0021bb8 <LinkedList<Device>::LinkedList()>
c0009d38:	83 c4 0c             	add    esp,0xc
c0009d3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d3f:	53                   	push   ebx
c0009d40:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009d46:	e8 9b ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d4b:	89 d8                	mov    eax,ebx
c0009d4d:	83 c4 18             	add    esp,0x18
c0009d50:	5b                   	pop    ebx
c0009d51:	c2 04 00             	ret    0x4

c0009d54 <HardDiskController::HardDiskController(char const*)>:
c0009d54:	83 ec 0c             	sub    esp,0xc
c0009d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5b:	83 ec 08             	sub    esp,0x8
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	50                   	push   eax
c0009d63:	e8 f6 fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	ba 08 35 02 c0       	mov    edx,0xc0023508
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	89 10                	mov    DWORD PTR [eax],edx
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d84:	90                   	nop
c0009d85:	83 c4 0c             	add    esp,0xc
c0009d88:	c3                   	ret    
c0009d89:	90                   	nop
c0009d8a:	66 90                	xchg   ax,ax

c0009d8c <HardDiskController::~HardDiskController()>:
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	ba 08 35 02 c0       	mov    edx,0xc0023508
c0009d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d98:	89 10                	mov    DWORD PTR [eax],edx
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 57 fb ff ff       	call   c00098fe <Device::~Device()>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	90                   	nop
c0009dab:	83 c4 0c             	add    esp,0xc
c0009dae:	c3                   	ret    
c0009daf:	90                   	nop

c0009db0 <HardDiskController::~HardDiskController()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	e8 cd ff ff ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0009dbf:	83 c4 10             	add    esp,0x10
c0009dc2:	83 ec 08             	sub    esp,0x8
c0009dc5:	68 58 01 00 00       	push   0x158
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 4c 35 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 c4 0c             	add    esp,0xc
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::eject()>:
c0009dda:	83 c8 ff             	or     eax,0xffffffff
c0009ddd:	c3                   	ret    

c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de5:	83 ec 08             	sub    esp,0x8
c0009de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dec:	50                   	push   eax
c0009ded:	e8 6c fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009df2:	83 c4 10             	add    esp,0x10
c0009df5:	ba 34 35 02 c0       	mov    edx,0xc0023534
c0009dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfe:	89 10                	mov    DWORD PTR [eax],edx
c0009e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e40:	90                   	nop
c0009e41:	83 c4 0c             	add    esp,0xc
c0009e44:	c3                   	ret    
c0009e45:	90                   	nop

c0009e46 <PhysicalDisk::startCache()>:
c0009e46:	56                   	push   esi
c0009e47:	53                   	push   ebx
c0009e48:	83 ec 10             	sub    esp,0x10
c0009e4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4f:	6a 44                	push   0x44
c0009e51:	e8 41 5e 00 00       	call   c000fc97 <malloc>
c0009e56:	89 c6                	mov    esi,eax
c0009e58:	58                   	pop    eax
c0009e59:	5a                   	pop    edx
c0009e5a:	53                   	push   ebx
c0009e5b:	56                   	push   esi
c0009e5c:	e8 d3 13 00 00       	call   c000b234 <VCache::VCache(PhysicalDisk*)>
c0009e61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e67:	83 c4 14             	add    esp,0x14
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	c3                   	ret    
c0009e6d:	90                   	nop

c0009e6e <PhysicalDisk::~PhysicalDisk()>:
c0009e6e:	83 ec 0c             	sub    esp,0xc
c0009e71:	ba 34 35 02 c0       	mov    edx,0xc0023534
c0009e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7a:	89 10                	mov    DWORD PTR [eax],edx
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	83 ec 0c             	sub    esp,0xc
c0009e83:	50                   	push   eax
c0009e84:	e8 75 fa ff ff       	call   c00098fe <Device::~Device()>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	90                   	nop
c0009e8d:	83 c4 0c             	add    esp,0xc
c0009e90:	c3                   	ret    
c0009e91:	90                   	nop

c0009e92 <PhysicalDisk::~PhysicalDisk()>:
c0009e92:	83 ec 0c             	sub    esp,0xc
c0009e95:	83 ec 0c             	sub    esp,0xc
c0009e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9c:	e8 cd ff ff ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	83 ec 08             	sub    esp,0x8
c0009ea7:	68 6c 01 00 00       	push   0x16c
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6a 34 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	83 c4 0c             	add    esp,0xc
c0009ebb:	c3                   	ret    

c0009ebc <startGUI(void*)>:
c0009ebc:	55                   	push   ebp
c0009ebd:	89 e5                	mov    ebp,esp
c0009ebf:	53                   	push   ebx
c0009ec0:	83 ec 04             	sub    esp,0x4
c0009ec3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ecb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	75 01                	jne    c0009ed5 <startGUI(void*)+0x19>
c0009ed4:	fb                   	sti    
c0009ed5:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009edb:	83 ec 08             	sub    esp,0x8
c0009ede:	6a 01                	push   0x1
c0009ee0:	68 64 35 02 c0       	push   0xc0023564
c0009ee5:	e8 c1 c4 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	83 ec 08             	sub    esp,0x8
c0009ef0:	53                   	push   ebx
c0009ef1:	50                   	push   eax
c0009ef2:	e8 06 c7 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c0009ef7:	83 c4 10             	add    esp,0x10
c0009efa:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f00:	83 ec 08             	sub    esp,0x8
c0009f03:	6a 01                	push   0x1
c0009f05:	68 7e 35 02 c0       	push   0xc002357e
c0009f0a:	e8 9c c4 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	83 ec 08             	sub    esp,0x8
c0009f15:	53                   	push   ebx
c0009f16:	50                   	push   eax
c0009f17:	e8 e1 c6 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c0009f1c:	83 c4 10             	add    esp,0x10
c0009f1f:	eb fe                	jmp    c0009f1f <startGUI(void*)+0x63>

c0009f21 <startGUIVESA(void*)>:
c0009f21:	55                   	push   ebp
c0009f22:	89 e5                	mov    ebp,esp
c0009f24:	53                   	push   ebx
c0009f25:	83 ec 04             	sub    esp,0x4
c0009f28:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009f30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f35:	85 c0                	test   eax,eax
c0009f37:	75 01                	jne    c0009f3a <startGUIVESA(void*)+0x19>
c0009f39:	fb                   	sti    
c0009f3a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	6a 01                	push   0x1
c0009f45:	68 9c 35 02 c0       	push   0xc002359c
c0009f4a:	e8 5c c4 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	53                   	push   ebx
c0009f56:	50                   	push   eax
c0009f57:	e8 a1 c6 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f65:	83 ec 08             	sub    esp,0x8
c0009f68:	6a 01                	push   0x1
c0009f6a:	68 7e 35 02 c0       	push   0xc002357e
c0009f6f:	e8 37 c4 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	83 ec 08             	sub    esp,0x8
c0009f7a:	53                   	push   ebx
c0009f7b:	50                   	push   eax
c0009f7c:	e8 7c c6 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	eb fe                	jmp    c0009f84 <startGUIVESA(void*)+0x63>

c0009f86 <sendKeyToTerminal(unsigned char)>:
c0009f86:	55                   	push   ebp
c0009f87:	89 e5                	mov    ebp,esp
c0009f89:	83 ec 28             	sub    esp,0x28
c0009f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f92:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f9b:	83 ec 08             	sub    esp,0x8
c0009f9e:	52                   	push   edx
c0009f9f:	50                   	push   eax
c0009fa0:	e8 db 8b 00 00       	call   c0012b80 <VgaText::receiveKey(unsigned char)>
c0009fa5:	83 c4 10             	add    esp,0x10
c0009fa8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fac:	83 f8 0a             	cmp    eax,0xa
c0009faf:	74 16                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb5:	83 f8 03             	cmp    eax,0x3
c0009fb8:	74 0d                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fbe:	83 f8 1c             	cmp    eax,0x1c
c0009fc1:	0f 85 92 00 00 00    	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc7:	fa                   	cli    
c0009fc8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009fcd:	83 c0 01             	add    eax,0x1
c0009fd0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009fd5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fda:	83 c0 01             	add    eax,0x1
c0009fdd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fe2:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fea:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff8:	74 1f                	je     c000a019 <sendKeyToTerminal(unsigned char)+0x93>
c0009ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ffd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a009:	83 ec 0c             	sub    esp,0xc
c000a00c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00f:	e8 58 d2 00 00       	call   c001726c <unblockTask(ThreadControlBlock*)>
c000a014:	83 c4 10             	add    esp,0x10
c000a017:	eb db                	jmp    c0009ff4 <sendKeyToTerminal(unsigned char)+0x6e>
c000a019:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a01e:	83 e8 01             	sub    eax,0x1
c000a021:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000a026:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a02b:	85 c0                	test   eax,eax
c000a02d:	75 18                	jne    c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02f:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c000a034:	85 c0                	test   eax,eax
c000a036:	74 0f                	je     c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a038:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000a042:	e8 c9 ce 00 00       	call   c0016f10 <schedule()>
c000a047:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a04f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a054:	85 c0                	test   eax,eax
c000a056:	75 01                	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c000a058:	fb                   	sti    
c000a059:	90                   	nop
c000a05a:	c9                   	leave  
c000a05b:	c3                   	ret    

c000a05c <sendKeyboardToken(KeyboardToken)>:
c000a05c:	55                   	push   ebp
c000a05d:	89 e5                	mov    ebp,esp
c000a05f:	83 ec 18             	sub    esp,0x18
c000a062:	e8 a8 68 00 00       	call   c001090f <KeUserIOReceived()>
c000a067:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06d:	0f b7 c0             	movzx  eax,ax
c000a070:	83 f2 01             	xor    edx,0x1
c000a073:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a079:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07e:	85 c0                	test   eax,eax
c000a080:	74 24                	je     c000a0a6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a082:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a088:	83 ec 04             	sub    esp,0x4
c000a08b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a090:	83 ec 08             	sub    esp,0x8
c000a093:	89 e2                	mov    edx,esp
c000a095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a098:	89 02                	mov    DWORD PTR [edx],eax
c000a09a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a09d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0a1:	ff d1                	call   ecx
c000a0a3:	83 c4 10             	add    esp,0x10
c000a0a6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0aa:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0ad:	0f b6 c0             	movzx  eax,al
c000a0b0:	85 c0                	test   eax,eax
c000a0b2:	0f 84 da 00 00 00    	je     c000a192 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0bb:	0f b7 c0             	movzx  eax,ax
c000a0be:	3d 18 03 00 00       	cmp    eax,0x318
c000a0c3:	75 06                	jne    c000a0cb <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ce:	0f b7 c0             	movzx  eax,ax
c000a0d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d6:	75 06                	jne    c000a0de <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e1:	0f b7 c0             	movzx  eax,ax
c000a0e4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e9:	75 06                	jne    c000a0f1 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0eb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f4:	0f b7 c0             	movzx  eax,ax
c000a0f7:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0fc:	75 06                	jne    c000a104 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fe:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a107:	0f b7 c0             	movzx  eax,ax
c000a10a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10f:	75 06                	jne    c000a117 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a111:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a11a:	0f b7 c0             	movzx  eax,ax
c000a11d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a122:	75 06                	jne    c000a12a <sendKeyboardToken(KeyboardToken)+0xce>
c000a124:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12d:	0f b7 c0             	movzx  eax,ax
c000a130:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a135:	75 06                	jne    c000a13d <sendKeyboardToken(KeyboardToken)+0xe1>
c000a137:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a140:	0f b7 c0             	movzx  eax,ax
c000a143:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a148:	75 06                	jne    c000a150 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a14a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a153:	0f b7 c0             	movzx  eax,ax
c000a156:	3d 20 03 00 00       	cmp    eax,0x320
c000a15b:	75 06                	jne    c000a163 <sendKeyboardToken(KeyboardToken)+0x107>
c000a15d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a166:	0f b7 c0             	movzx  eax,ax
c000a169:	3d 21 03 00 00       	cmp    eax,0x321
c000a16e:	75 06                	jne    c000a176 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a170:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a179:	0f b7 c0             	movzx  eax,ax
c000a17c:	3d 22 03 00 00       	cmp    eax,0x322
c000a181:	0f 85 f1 00 00 00    	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a187:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a18d:	e9 e6 00 00 00       	jmp    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a195:	0f b7 c0             	movzx  eax,ax
c000a198:	3d 18 03 00 00       	cmp    eax,0x318
c000a19d:	75 0a                	jne    c000a1a9 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ac:	0f b7 c0             	movzx  eax,ax
c000a1af:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b4:	75 0a                	jne    c000a1c0 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c3:	0f b7 c0             	movzx  eax,ax
c000a1c6:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1cb:	75 0a                	jne    c000a1d7 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1cd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1da:	0f b7 c0             	movzx  eax,ax
c000a1dd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1e2:	75 0a                	jne    c000a1ee <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f1:	0f b7 c0             	movzx  eax,ax
c000a1f4:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f9:	75 0a                	jne    c000a205 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1fb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a208:	0f b7 c0             	movzx  eax,ax
c000a20b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a210:	75 0a                	jne    c000a21c <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a212:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21f:	0f b7 c0             	movzx  eax,ax
c000a222:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a227:	75 0a                	jne    c000a233 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a229:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a236:	0f b7 c0             	movzx  eax,ax
c000a239:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23e:	75 0a                	jne    c000a24a <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a240:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a24d:	0f b7 c0             	movzx  eax,ax
c000a250:	3d 20 03 00 00       	cmp    eax,0x320
c000a255:	75 0a                	jne    c000a261 <sendKeyboardToken(KeyboardToken)+0x205>
c000a257:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a264:	0f b7 c0             	movzx  eax,ax
c000a267:	3d 21 03 00 00       	cmp    eax,0x321
c000a26c:	75 0a                	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27b:	0f b7 c0             	movzx  eax,ax
c000a27e:	3d 00 02 00 00       	cmp    eax,0x200
c000a283:	75 2f                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a285:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a28a:	83 f0 01             	xor    eax,0x1
c000a28d:	0f b6 c0             	movzx  eax,al
c000a290:	85 c0                	test   eax,eax
c000a292:	74 20                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a294:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a299:	6a 01                	push   0x1
c000a29b:	6a 00                	push   0x0
c000a29d:	68 bc 9e 00 c0       	push   0xc0009ebc
c000a2a2:	50                   	push   eax
c000a2a3:	e8 d8 c9 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2b2:	eb 3a                	jmp    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bf:	75 2d                	jne    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2c1:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c6:	83 f0 01             	xor    eax,0x1
c000a2c9:	0f b6 c0             	movzx  eax,al
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	74 1e                	je     c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a2d5:	6a 01                	push   0x1
c000a2d7:	6a 00                	push   0x0
c000a2d9:	68 21 9f 00 c0       	push   0xc0009f21
c000a2de:	50                   	push   eax
c000a2df:	e8 9c c9 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f1:	0f b7 c0             	movzx  eax,ax
c000a2f4:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f9:	75 06                	jne    c000a301 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2fb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a304:	0f b7 c0             	movzx  eax,ax
c000a307:	3d 24 03 00 00       	cmp    eax,0x324
c000a30c:	75 06                	jne    c000a314 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a317:	0f b7 c0             	movzx  eax,ax
c000a31a:	3d 23 03 00 00       	cmp    eax,0x323
c000a31f:	75 06                	jne    c000a327 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a321:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a32a:	0f b7 c0             	movzx  eax,ax
c000a32d:	3d 26 03 00 00       	cmp    eax,0x326
c000a332:	75 06                	jne    c000a33a <sendKeyboardToken(KeyboardToken)+0x2de>
c000a334:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a33d:	0f b7 c0             	movzx  eax,ax
c000a340:	3d 27 03 00 00       	cmp    eax,0x327
c000a345:	75 06                	jne    c000a34d <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a347:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a350:	0f b7 c0             	movzx  eax,ax
c000a353:	3d 22 03 00 00       	cmp    eax,0x322
c000a358:	75 06                	jne    c000a360 <sendKeyboardToken(KeyboardToken)+0x304>
c000a35a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a360:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a364:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a367:	83 f0 01             	xor    eax,0x1
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	85 c0                	test   eax,eax
c000a36f:	74 7c                	je     c000a3ed <sendKeyboardToken(KeyboardToken)+0x391>
c000a371:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a376:	0f b6 c0             	movzx  eax,al
c000a379:	85 c0                	test   eax,eax
c000a37b:	74 43                	je     c000a3c0 <sendKeyboardToken(KeyboardToken)+0x364>
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a385:	85 c0                	test   eax,eax
c000a387:	74 2b                	je     c000a3b4 <sendKeyboardToken(KeyboardToken)+0x358>
c000a389:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38f:	89 d0                	mov    eax,edx
c000a391:	c1 e0 02             	shl    eax,0x2
c000a394:	01 d0                	add    eax,edx
c000a396:	01 c0                	add    eax,eax
c000a398:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a0:	0f b7 c0             	movzx  eax,ax
c000a3a3:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ab:	01 d0                	add    eax,edx
c000a3ad:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3b2:	eb 71                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b4:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3be:	eb 65                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c9:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 ac fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3eb:	eb 38                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f0:	0f b7 c0             	movzx  eax,ax
c000a3f3:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f8:	75 2b                	jne    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3fa:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ff:	85 c0                	test   eax,eax
c000a401:	74 18                	je     c000a41b <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a403:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a408:	0f b6 c0             	movzx  eax,al
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	50                   	push   eax
c000a40f:	e8 72 fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a414:	83 c4 10             	add    esp,0x10
c000a417:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a41b:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a425:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a428:	83 f0 01             	xor    eax,0x1
c000a42b:	0f b6 c0             	movzx  eax,al
c000a42e:	85 c0                	test   eax,eax
c000a430:	74 5a                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a432:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a435:	83 f0 01             	xor    eax,0x1
c000a438:	0f b6 c0             	movzx  eax,al
c000a43b:	85 c0                	test   eax,eax
c000a43d:	74 4d                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a43f:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a444:	83 f0 01             	xor    eax,0x1
c000a447:	0f b6 c0             	movzx  eax,al
c000a44a:	85 c0                	test   eax,eax
c000a44c:	74 3e                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a451:	0f b7 c0             	movzx  eax,ax
c000a454:	83 f8 1f             	cmp    eax,0x1f
c000a457:	76 0b                	jbe    c000a464 <sendKeyboardToken(KeyboardToken)+0x408>
c000a459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a45c:	0f b7 c0             	movzx  eax,ax
c000a45f:	83 f8 7e             	cmp    eax,0x7e
c000a462:	76 16                	jbe    c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a467:	0f b7 c0             	movzx  eax,ax
c000a46a:	83 f8 0a             	cmp    eax,0xa
c000a46d:	74 0b                	je     c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a472:	0f b7 c0             	movzx  eax,ax
c000a475:	83 f8 08             	cmp    eax,0x8
c000a478:	75 12                	jne    c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47d:	0f b6 c0             	movzx  eax,al
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	50                   	push   eax
c000a484:	e8 fd fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48f:	83 f0 01             	xor    eax,0x1
c000a492:	0f b6 c0             	movzx  eax,al
c000a495:	85 c0                	test   eax,eax
c000a497:	74 5d                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a499:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 50                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a6:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4ab:	0f b6 c0             	movzx  eax,al
c000a4ae:	85 c0                	test   eax,eax
c000a4b0:	74 44                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b5:	0f b7 c0             	movzx  eax,ax
c000a4b8:	83 f8 3f             	cmp    eax,0x3f
c000a4bb:	76 39                	jbe    c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c0:	0f b7 c0             	movzx  eax,ax
c000a4c3:	83 f8 7f             	cmp    eax,0x7f
c000a4c6:	77 2e                	ja     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cb:	88 c2                	mov    dl,al
c000a4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d0:	0f b7 c0             	movzx  eax,ax
c000a4d3:	83 f8 5f             	cmp    eax,0x5f
c000a4d6:	76 04                	jbe    c000a4dc <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d8:	b0 20                	mov    al,0x20
c000a4da:	eb 02                	jmp    c000a4de <sendKeyboardToken(KeyboardToken)+0x482>
c000a4dc:	b0 00                	mov    al,0x0
c000a4de:	89 d1                	mov    ecx,edx
c000a4e0:	29 c1                	sub    ecx,eax
c000a4e2:	89 c8                	mov    eax,ecx
c000a4e4:	83 e8 40             	sub    eax,0x40
c000a4e7:	0f b6 c0             	movzx  eax,al
c000a4ea:	83 ec 0c             	sub    esp,0xc
c000a4ed:	50                   	push   eax
c000a4ee:	e8 93 fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a4f3:	83 c4 10             	add    esp,0x10
c000a4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f9:	0f b7 c0             	movzx  eax,ax
c000a4fc:	3d 00 03 00 00       	cmp    eax,0x300
c000a501:	75 12                	jne    c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a503:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a506:	83 f0 01             	xor    eax,0x1
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	85 c0                	test   eax,eax
c000a50e:	74 05                	je     c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a510:	e8 60 7d 00 00       	call   c0012275 <doTerminalCycle()>
c000a515:	90                   	nop
c000a516:	c9                   	leave  
c000a517:	c3                   	ret    

c000a518 <clearInternalKeybuffer(VgaText*)>:
c000a518:	55                   	push   ebp
c000a519:	89 e5                	mov    ebp,esp
c000a51b:	83 ec 08             	sub    esp,0x8
c000a51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a521:	05 02 01 00 00       	add    eax,0x102
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	50                   	push   eax
c000a52a:	e8 41 60 ff ff       	call   c0000570 <strlen>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a535:	81 c2 02 01 00 00    	add    edx,0x102
c000a53b:	83 ec 04             	sub    esp,0x4
c000a53e:	50                   	push   eax
c000a53f:	6a 00                	push   0x0
c000a541:	52                   	push   edx
c000a542:	e8 a9 5f ff ff       	call   c00004f0 <memset>
c000a547:	83 c4 10             	add    esp,0x10
c000a54a:	90                   	nop
c000a54b:	c9                   	leave  
c000a54c:	c3                   	ret    

c000a54d <readKeyboard(VgaText*, char*, unsigned long)>:
c000a54d:	55                   	push   ebp
c000a54e:	89 e5                	mov    ebp,esp
c000a550:	83 ec 18             	sub    esp,0x18
c000a553:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a558:	85 c0                	test   eax,eax
c000a55a:	74 2a                	je     c000a586 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a55c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a562:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a568:	83 ec 04             	sub    esp,0x4
c000a56b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a570:	83 ec 08             	sub    esp,0x8
c000a573:	89 e2                	mov    edx,esp
c000a575:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a578:	89 02                	mov    DWORD PTR [edx],eax
c000a57a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a57d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a581:	ff d1                	call   ecx
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	fb                   	sti    
c000a587:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a592:	0f 84 08 01 00 00    	je     c000a6a0 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a59b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5a1:	0f be c0             	movsx  eax,al
c000a5a4:	85 c0                	test   eax,eax
c000a5a6:	75 27                	jne    c000a5cf <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a8:	fa                   	cli    
c000a5a9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5ae:	83 c0 01             	add    eax,0x1
c000a5b1:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a5b6:	e8 55 c9 00 00       	call   c0016f10 <schedule()>
c000a5bb:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a5c3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5c8:	85 c0                	test   eax,eax
c000a5ca:	75 cc                	jne    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cc:	fb                   	sti    
c000a5cd:	eb c9                	jmp    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5d2:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5db:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5e1:	88 10                	mov    BYTE PTR [eax],dl
c000a5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5ef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5f3:	83 f8 03             	cmp    eax,0x3
c000a5f6:	75 1e                	jne    c000a616 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a602:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a608:	83 ec 08             	sub    esp,0x8
c000a60b:	6a 02                	push   0x2
c000a60d:	50                   	push   eax
c000a60e:	e8 48 6b 00 00       	call   c001115b <KeRaiseSignal(SigHandlerBlock*, int)>
c000a613:	83 c4 10             	add    esp,0x10
c000a616:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a61a:	83 f8 1c             	cmp    eax,0x1c
c000a61d:	75 1e                	jne    c000a63d <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a624:	8b 00                	mov    eax,DWORD PTR [eax]
c000a626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a629:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62f:	83 ec 08             	sub    esp,0x8
c000a632:	6a 09                	push   0x9
c000a634:	50                   	push   eax
c000a635:	e8 21 6b 00 00       	call   c001115b <KeRaiseSignal(SigHandlerBlock*, int)>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a640:	05 02 01 00 00       	add    eax,0x102
c000a645:	83 ec 0c             	sub    esp,0xc
c000a648:	50                   	push   eax
c000a649:	e8 22 5f ff ff       	call   c0000570 <strlen>
c000a64e:	83 c4 10             	add    esp,0x10
c000a651:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a654:	81 c2 02 01 00 00    	add    edx,0x102
c000a65a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a65d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a660:	81 c2 02 01 00 00    	add    edx,0x102
c000a666:	83 ec 04             	sub    esp,0x4
c000a669:	50                   	push   eax
c000a66a:	51                   	push   ecx
c000a66b:	52                   	push   edx
c000a66c:	e8 5f 5d ff ff       	call   c00003d0 <memmove>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a678:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a67c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a680:	83 f8 0a             	cmp    eax,0xa
c000a683:	74 16                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a685:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a689:	83 f8 03             	cmp    eax,0x3
c000a68c:	74 0d                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a692:	83 f8 1c             	cmp    eax,0x1c
c000a695:	0f 85 f3 fe ff ff    	jne    c000a58e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a69b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69e:	eb 03                	jmp    c000a6a3 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6a3:	c9                   	leave  
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::Keyboard(char const*)>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b4:	50                   	push   eax
c000a6b5:	e8 a4 f4 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c000a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c6:	89 10                	mov    DWORD PTR [eax],edx
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d6:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6dd:	90                   	nop
c000a6de:	83 c4 0c             	add    esp,0xc
c000a6e1:	c3                   	ret    

c000a6e2 <Keyboard::~Keyboard()>:
c000a6e2:	83 ec 0c             	sub    esp,0xc
c000a6e5:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	89 10                	mov    DWORD PTR [eax],edx
c000a6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f4:	83 ec 0c             	sub    esp,0xc
c000a6f7:	50                   	push   eax
c000a6f8:	e8 01 f2 ff ff       	call   c00098fe <Device::~Device()>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	90                   	nop
c000a701:	83 c4 0c             	add    esp,0xc
c000a704:	c3                   	ret    
c000a705:	90                   	nop

c000a706 <Keyboard::~Keyboard()>:
c000a706:	83 ec 0c             	sub    esp,0xc
c000a709:	83 ec 0c             	sub    esp,0xc
c000a70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a710:	e8 cd ff ff ff       	call   c000a6e2 <Keyboard::~Keyboard()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	83 ec 08             	sub    esp,0x8
c000a71b:	68 5c 01 00 00       	push   0x15c
c000a720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a724:	e8 f6 2b 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	83 c4 0c             	add    esp,0xc
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::close(int, int, void*)>:
c000a730:	83 c8 ff             	or     eax,0xffffffff
c000a733:	c3                   	ret    

c000a734 <LogicalDisk::~LogicalDisk()>:
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	ba 38 36 02 c0       	mov    edx,0xc0023638
c000a73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a740:	89 10                	mov    DWORD PTR [eax],edx
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	50                   	push   eax
c000a74a:	e8 af f1 ff ff       	call   c00098fe <Device::~Device()>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	90                   	nop
c000a753:	83 c4 0c             	add    esp,0xc
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <LogicalDisk::~LogicalDisk()>:
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a762:	e8 cd ff ff ff       	call   c000a734 <LogicalDisk::~LogicalDisk()>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	83 ec 08             	sub    esp,0x8
c000a76d:	68 78 01 00 00       	push   0x178
c000a772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a776:	e8 a4 2b 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	83 c4 0c             	add    esp,0xc
c000a781:	c3                   	ret    

c000a782 <LogicalDisk::open(int, int, void*)>:
c000a782:	83 ec 18             	sub    esp,0x18
c000a785:	68 ec 35 02 c0       	push   0xc00235ec
c000a78a:	e8 4f 58 00 00       	call   c000ffde <KePanic(char const*)>
c000a78f:	83 c8 ff             	or     eax,0xffffffff
c000a792:	83 c4 1c             	add    esp,0x1c
c000a795:	c3                   	ret    

c000a796 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a796:	53                   	push   ebx
c000a797:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a79b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b5:	77 10                	ja     c000a7c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7bd:	89 d3                	mov    ebx,edx
c000a7bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c5:	72 05                	jb     c000a7cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c7:	83 c8 ff             	or     eax,0xffffffff
c000a7ca:	89 c2                	mov    edx,eax
c000a7cc:	5b                   	pop    ebx
c000a7cd:	c3                   	ret    

c000a7ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ce:	56                   	push   esi
c000a7cf:	83 c8 ff             	or     eax,0xffffffff
c000a7d2:	53                   	push   ebx
c000a7d3:	89 c2                	mov    edx,eax
c000a7d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e7:	77 27                	ja     c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e9:	89 d8                	mov    eax,ebx
c000a7eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7fc:	89 c2                	mov    edx,eax
c000a7fe:	73 10                	jae    c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a800:	89 c8                	mov    eax,ecx
c000a802:	89 da                	mov    edx,ebx
c000a804:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a80a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	c3                   	ret    
c000a813:	90                   	nop

c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a814:	83 ec 1c             	sub    esp,0x1c
c000a817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a827:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a82b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a832:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a841:	50                   	push   eax
c000a842:	e8 17 f3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a847:	83 c4 10             	add    esp,0x10
c000a84a:	ba 38 36 02 c0       	mov    edx,0xc0023638
c000a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a853:	89 10                	mov    DWORD PTR [eax],edx
c000a855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a859:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a864:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a884:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a88c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a890:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a896:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a89c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a7:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8ad:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8bb:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cf:	90                   	nop
c000a8d0:	83 c4 1c             	add    esp,0x1c
c000a8d3:	c3                   	ret    

c000a8d4 <LogicalDisk::assignDriveLetter()>:
c000a8d4:	55                   	push   ebp
c000a8d5:	57                   	push   edi
c000a8d6:	56                   	push   esi
c000a8d7:	53                   	push   ebx
c000a8d8:	83 ec 14             	sub    esp,0x14
c000a8db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8df:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e5:	b0 41                	mov    al,0x41
c000a8e7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8ed:	84 d2                	test   dl,dl
c000a8ef:	75 02                	jne    c000a8f3 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8f1:	b0 43                	mov    al,0x43
c000a8f3:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f9:	0f b6 ca             	movzx  ecx,dl
c000a8fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a900:	0f be e8             	movsx  ebp,al
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a90d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a911:	3c 43                	cmp    al,0x43
c000a913:	75 10                	jne    c000a925 <LogicalDisk::assignDriveLetter()+0x51>
c000a915:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a91c:	75 5a                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a923:	75 53                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a925:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a928:	ba 01 00 00 00       	mov    edx,0x1
c000a92d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a930:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a933:	d3 e2                	shl    edx,cl
c000a935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a939:	89 d7                	mov    edi,edx
c000a93b:	89 d6                	mov    esi,edx
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a944:	21 f9                	and    ecx,edi
c000a946:	09 d1                	or     ecx,edx
c000a948:	75 2e                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a952:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a958:	09 f2                	or     edx,esi
c000a95a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a95d:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a96e:	09 fa                	or     edx,edi
c000a970:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a976:	eb 0d                	jmp    c000a985 <LogicalDisk::assignDriveLetter()+0xb1>
c000a978:	8d 50 01             	lea    edx,[eax+0x1]
c000a97b:	45                   	inc    ebp
c000a97c:	88 d0                	mov    al,dl
c000a97e:	80 fa 5b             	cmp    dl,0x5b
c000a981:	75 8e                	jne    c000a911 <LogicalDisk::assignDriveLetter()+0x3d>
c000a983:	31 c0                	xor    eax,eax
c000a985:	83 c4 14             	add    esp,0x14
c000a988:	5b                   	pop    ebx
c000a989:	5e                   	pop    esi
c000a98a:	5f                   	pop    edi
c000a98b:	5d                   	pop    ebp
c000a98c:	c3                   	ret    
c000a98d:	90                   	nop

c000a98e <LogicalDisk::mount()>:
c000a98e:	56                   	push   esi
c000a98f:	53                   	push   ebx
c000a990:	53                   	push   ebx
c000a991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a995:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a99b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a5:	85 db                	test   ebx,ebx
c000a9a7:	74 27                	je     c000a9d0 <LogicalDisk::mount()+0x42>
c000a9a9:	51                   	push   ecx
c000a9aa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9b3:	83 e8 41             	sub    eax,0x41
c000a9b6:	50                   	push   eax
c000a9b7:	56                   	push   esi
c000a9b8:	53                   	push   ebx
c000a9b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	84 c0                	test   al,al
c000a9c1:	74 08                	je     c000a9cb <LogicalDisk::mount()+0x3d>
c000a9c3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c9:	eb 07                	jmp    c000a9d2 <LogicalDisk::mount()+0x44>
c000a9cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ce:	eb d5                	jmp    c000a9a5 <LogicalDisk::mount()+0x17>
c000a9d0:	31 c0                	xor    eax,eax
c000a9d2:	5a                   	pop    edx
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	c3                   	ret    

c000a9d6 <LogicalDisk::unmount()>:
c000a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9da:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::eject()>:
c000a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f9:	90                   	nop

c000a9fa <LogicalDisk::unassignDriveLetter()>:
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa00:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa07:	85 c9                	test   ecx,ecx
c000aa09:	75 0f                	jne    c000aa1a <LogicalDisk::unassignDriveLetter()+0x20>
c000aa0b:	c7 44 24 0c 10 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023610
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	e9 c4 55 00 00       	jmp    c000ffde <KePanic(char const*)>
c000aa1a:	83 e9 41             	sub    ecx,0x41
c000aa1d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa24:	b8 01 00 00 00       	mov    eax,0x1
c000aa29:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa34:	d3 e0                	shl    eax,cl
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	f7 d0                	not    eax
c000aa3a:	c1 ff 1f             	sar    edi,0x1f
c000aa3d:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa43:	89 fe                	mov    esi,edi
c000aa45:	f7 d6                	not    esi
c000aa47:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa4d:	5e                   	pop    esi
c000aa4e:	5f                   	pop    edi
c000aa4f:	c3                   	ret    

c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	53                   	push   ebx
c000aa53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa63:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa69:	77 41                	ja     c000aaac <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa6b:	99                   	cdq    
c000aa6c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa72:	01 c8                	add    eax,ecx
c000aa74:	11 da                	adc    edx,ebx
c000aa76:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa7c:	19 d7                	sbb    edi,edx
c000aa7e:	72 33                	jb     c000aab3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa80:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa86:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa90:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa94:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa4:	5b                   	pop    ebx
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	e9 a2 0b 00 00       	jmp    c000b64e <VCache::read(unsigned long long, int, void*)>
c000aaac:	b8 05 00 00 00       	mov    eax,0x5
c000aab1:	eb 05                	jmp    c000aab8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aab3:	b8 07 00 00 00       	mov    eax,0x7
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <LogicalDisk::write(unsigned long long, int, void*)>:
c000aabc:	57                   	push   edi
c000aabd:	56                   	push   esi
c000aabe:	53                   	push   ebx
c000aabf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aacb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad5:	77 41                	ja     c000ab18 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad7:	99                   	cdq    
c000aad8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aade:	01 c8                	add    eax,ecx
c000aae0:	11 da                	adc    edx,ebx
c000aae2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae8:	19 d7                	sbb    edi,edx
c000aaea:	72 33                	jb     c000ab1f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aaec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaf2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aafc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab00:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	e9 68 09 00 00       	jmp    c000b480 <VCache::write(unsigned long long, int, void*)>
c000ab18:	b8 05 00 00 00       	mov    eax,0x5
c000ab1d:	eb 05                	jmp    c000ab24 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1f:	b8 07 00 00 00       	mov    eax,0x7
c000ab24:	5b                   	pop    ebx
c000ab25:	5e                   	pop    esi
c000ab26:	5f                   	pop    edi
c000ab27:	c3                   	ret    

c000ab28 <Mouse::Mouse(char const*)>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	50                   	push   eax
c000ab37:	e8 22 f0 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	ba 64 36 02 c0       	mov    edx,0xc0023664
c000ab44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab48:	89 10                	mov    DWORD PTR [eax],edx
c000ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab58:	90                   	nop
c000ab59:	83 c4 0c             	add    esp,0xc
c000ab5c:	c3                   	ret    
c000ab5d:	90                   	nop
c000ab5e:	66 90                	xchg   ax,ax

c000ab60 <Mouse::~Mouse()>:
c000ab60:	83 ec 0c             	sub    esp,0xc
c000ab63:	ba 64 36 02 c0       	mov    edx,0xc0023664
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	83 ec 0c             	sub    esp,0xc
c000ab75:	50                   	push   eax
c000ab76:	e8 83 ed ff ff       	call   c00098fe <Device::~Device()>
c000ab7b:	83 c4 10             	add    esp,0x10
c000ab7e:	90                   	nop
c000ab7f:	83 c4 0c             	add    esp,0xc
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	83 ec 0c             	sub    esp,0xc
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	e8 cd ff ff ff       	call   c000ab60 <Mouse::~Mouse()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	83 ec 08             	sub    esp,0x8
c000ab99:	68 58 01 00 00       	push   0x158
c000ab9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba2:	e8 78 27 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	83 c4 0c             	add    esp,0xc
c000abad:	c3                   	ret    

c000abae <NIC::getMAC()>:
c000abae:	31 c0                	xor    eax,eax
c000abb0:	31 d2                	xor    edx,edx
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::write(int, unsigned char*, int*)>:
c000abb4:	b8 01 00 00 00       	mov    eax,0x1
c000abb9:	c3                   	ret    

c000abba <NIC::NIC(char const*)>:
c000abba:	83 ec 0c             	sub    esp,0xc
c000abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc1:	83 ec 08             	sub    esp,0x8
c000abc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc8:	50                   	push   eax
c000abc9:	e8 90 ef ff ff       	call   c0009b5e <Device::Device(char const*)>
c000abce:	83 c4 10             	add    esp,0x10
c000abd1:	ba 90 36 02 c0       	mov    edx,0xc0023690
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	89 10                	mov    DWORD PTR [eax],edx
c000abdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abea:	90                   	nop
c000abeb:	83 c4 0c             	add    esp,0xc
c000abee:	c3                   	ret    
c000abef:	90                   	nop

c000abf0 <NIC::~NIC()>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	ba 90 36 02 c0       	mov    edx,0xc0023690
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	89 10                	mov    DWORD PTR [eax],edx
c000abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	50                   	push   eax
c000ac06:	e8 f3 ec ff ff       	call   c00098fe <Device::~Device()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1e:	e8 cd ff ff ff       	call   c000abf0 <NIC::~NIC()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	83 ec 08             	sub    esp,0x8
c000ac29:	68 58 01 00 00       	push   0x158
c000ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac32:	e8 e8 26 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	83 c4 0c             	add    esp,0xc
c000ac3d:	c3                   	ret    

c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3e:	55                   	push   ebp
c000ac3f:	57                   	push   edi
c000ac40:	56                   	push   esi
c000ac41:	53                   	push   ebx
c000ac42:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac48:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac4f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac56:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac5d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac73:	e8 e2 ef ff ff       	call   c0009c5a <Device::getName()>
c000ac78:	5a                   	pop    edx
c000ac79:	59                   	pop    ecx
c000ac7a:	50                   	push   eax
c000ac7b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7f:	55                   	push   ebp
c000ac80:	e8 bb 59 ff ff       	call   c0000640 <strcpy>
c000ac85:	5b                   	pop    ebx
c000ac86:	58                   	pop    eax
c000ac87:	68 bc 36 02 c0       	push   0xc00236bc
c000ac8c:	55                   	push   ebp
c000ac8d:	e8 ae 5b ff ff       	call   c0000840 <strcat>
c000ac92:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac99:	e8 f9 4f 00 00       	call   c000fc97 <malloc>
c000ac9e:	83 c4 0c             	add    esp,0xc
c000aca1:	89 c3                	mov    ebx,eax
c000aca3:	57                   	push   edi
c000aca4:	56                   	push   esi
c000aca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb4:	55                   	push   ebp
c000acb5:	50                   	push   eax
c000acb6:	e8 59 fb ff ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acbb:	83 c4 14             	add    esp,0x14
c000acbe:	53                   	push   ebx
c000acbf:	e8 10 fc ff ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c000acc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc7:	e8 c2 fc ff ff       	call   c000a98e <LogicalDisk::mount()>
c000accc:	58                   	pop    eax
c000accd:	5a                   	pop    edx
c000acce:	53                   	push   ebx
c000accf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd6:	e8 21 ed ff ff       	call   c00099fc <Device::addChild(Device*)>
c000acdb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ace1:	5b                   	pop    ebx
c000ace2:	5e                   	pop    esi
c000ace3:	5f                   	pop    edi
c000ace4:	5d                   	pop    ebp
c000ace5:	c3                   	ret    

c000ace6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace6:	55                   	push   ebp
c000ace7:	57                   	push   edi
c000ace8:	56                   	push   esi
c000ace9:	53                   	push   ebx
c000acea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acf0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acfd:	3d 00 02 00 00       	cmp    eax,0x200
c000ad02:	74 27                	je     c000ad2b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad04:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	83 ec 10             	sub    esp,0x10
c000ad13:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad17:	99                   	cdq    
c000ad18:	c1 e6 0a             	shl    esi,0xa
c000ad1b:	52                   	push   edx
c000ad1c:	89 fd                	mov    ebp,edi
c000ad1e:	50                   	push   eax
c000ad1f:	55                   	push   ebp
c000ad20:	56                   	push   esi
c000ad21:	e8 3e 6b 01 00       	call   c0021864 <__udivdi3>
c000ad26:	e9 b9 00 00 00       	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad2b:	83 ec 0c             	sub    esp,0xc
c000ad2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad30:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad34:	56                   	push   esi
c000ad35:	6a 01                	push   0x1
c000ad37:	6a 00                	push   0x0
c000ad39:	6a 00                	push   0x0
c000ad3b:	53                   	push   ebx
c000ad3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3f:	83 c4 20             	add    esp,0x20
c000ad42:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad4a:	75 0a                	jne    c000ad56 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad4c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad54:	74 2c                	je     c000ad82 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 e0 0a             	shl    eax,0xa
c000ad74:	c1 ff 1f             	sar    edi,0x1f
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	52                   	push   edx
c000ad7a:	50                   	push   eax
c000ad7b:	e8 e4 6a 01 00       	call   c0021864 <__udivdi3>
c000ad80:	eb 62                	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad82:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad89:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad90:	89 cf                	mov    edi,ecx
c000ad92:	83 e2 7f             	and    edx,0x7f
c000ad95:	83 e7 7f             	and    edi,0x7f
c000ad98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad9f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ada2:	83 e0 7f             	and    eax,0x7f
c000ada5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adaf:	83 e0 7f             	and    eax,0x7f
c000adb2:	01 d0                	add    eax,edx
c000adb4:	89 c5                	mov    ebp,eax
c000adb6:	84 c0                	test   al,al
c000adb8:	74 41                	je     c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adcc:	83 ec 10             	sub    esp,0x10
c000adcf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add3:	89 f7                	mov    edi,esi
c000add5:	c1 e0 0a             	shl    eax,0xa
c000add8:	c1 ff 1f             	sar    edi,0x1f
c000addb:	57                   	push   edi
c000addc:	56                   	push   esi
c000addd:	52                   	push   edx
c000adde:	50                   	push   eax
c000addf:	e8 80 6a 01 00       	call   c0021864 <__udivdi3>
c000ade4:	83 c4 14             	add    esp,0x14
c000ade7:	52                   	push   edx
c000ade8:	50                   	push   eax
c000ade9:	6a 00                	push   0x0
c000adeb:	6a 00                	push   0x0
c000aded:	53                   	push   ebx
c000adee:	e8 4b fe ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adf3:	83 c4 20             	add    esp,0x20
c000adf6:	e9 73 01 00 00       	jmp    c000af6e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adfb:	89 f0                	mov    eax,esi
c000adfd:	31 c9                	xor    ecx,ecx
c000adff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae06:	75 02                	jne    c000ae0a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae08:	89 cd                	mov    ebp,ecx
c000ae0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae11:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae18:	c1 e2 08             	shl    edx,0x8
c000ae1b:	c1 e6 10             	shl    esi,0x10
c000ae1e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae26:	09 f2                	or     edx,esi
c000ae28:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae30:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae37:	83 c0 10             	add    eax,0x10
c000ae3a:	09 f2                	or     edx,esi
c000ae3c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae43:	c1 e6 18             	shl    esi,0x18
c000ae46:	09 f2                	or     edx,esi
c000ae48:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae53:	c1 e6 10             	shl    esi,0x10
c000ae56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae5d:	c1 e2 08             	shl    edx,0x8
c000ae60:	09 f2                	or     edx,esi
c000ae62:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae69:	09 f2                	or     edx,esi
c000ae6b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae72:	c1 e6 18             	shl    esi,0x18
c000ae75:	09 f2                	or     edx,esi
c000ae77:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae7b:	41                   	inc    ecx
c000ae7c:	83 f9 04             	cmp    ecx,0x4
c000ae7f:	0f 85 7a ff ff ff    	jne    c000adff <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	83 f0 01             	xor    eax,0x1
c000ae8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae90:	75 4f                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae96:	83 f0 01             	xor    eax,0x1
c000ae99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae9d:	75 42                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeaf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeb5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aec1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec5:	89 f7                	mov    edi,esi
c000aec7:	c1 e0 0a             	shl    eax,0xa
c000aeca:	c1 ff 1f             	sar    edi,0x1f
c000aecd:	57                   	push   edi
c000aece:	56                   	push   esi
c000aecf:	52                   	push   edx
c000aed0:	50                   	push   eax
c000aed1:	e8 8e 69 01 00       	call   c0021864 <__udivdi3>
c000aed6:	83 c4 10             	add    esp,0x10
c000aed9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aedd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aee1:	89 e8                	mov    eax,ebp
c000aee3:	0f b6 e8             	movzx  ebp,al
c000aee6:	85 ed                	test   ebp,ebp
c000aee8:	74 50                	je     c000af3a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aef2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aefa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af1e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af2a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af32:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af36:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af3a:	31 ed                	xor    ebp,ebp
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af44:	89 f8                	mov    eax,edi
c000af46:	09 f0                	or     eax,esi
c000af48:	74 1e                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af52:	89 d1                	mov    ecx,edx
c000af54:	09 c1                	or     ecx,eax
c000af56:	74 10                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	52                   	push   edx
c000af5e:	50                   	push   eax
c000af5f:	53                   	push   ebx
c000af60:	e8 d9 fc ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af65:	83 c4 20             	add    esp,0x20
c000af68:	45                   	inc    ebp
c000af69:	83 fd 04             	cmp    ebp,0x4
c000af6c:	75 ce                	jne    c000af3c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af74:	5b                   	pop    ebx
c000af75:	5e                   	pop    esi
c000af76:	5f                   	pop    edi
c000af77:	5d                   	pop    ebp
c000af78:	c3                   	ret    
c000af79:	66 90                	xchg   ax,ax
c000af7b:	90                   	nop

c000af7c <Serial::Serial(char const*)>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af83:	83 ec 08             	sub    esp,0x8
c000af86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af8a:	50                   	push   eax
c000af8b:	e8 ce eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	89 10                	mov    DWORD PTR [eax],edx
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afac:	90                   	nop
c000afad:	83 c4 0c             	add    esp,0xc
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <Serial::~Serial()>:
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	50                   	push   eax
c000afca:	e8 2f e9 ff ff       	call   c00098fe <Device::~Device()>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	90                   	nop
c000afd3:	83 c4 0c             	add    esp,0xc
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	e8 cd ff ff ff       	call   c000afb4 <Serial::~Serial()>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 ec 08             	sub    esp,0x8
c000afed:	68 58 01 00 00       	push   0x158
c000aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff6:	e8 24 23 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	83 c4 0c             	add    esp,0xc
c000b001:	c3                   	ret    
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::Timer(char const*)>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00b:	83 ec 08             	sub    esp,0x8
c000b00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b012:	50                   	push   eax
c000b013:	e8 46 eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000b018:	83 c4 10             	add    esp,0x10
c000b01b:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	89 10                	mov    DWORD PTR [eax],edx
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	90                   	nop
c000b03a:	66 90                	xchg   ax,ax

c000b03c <Timer::~Timer()>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	50                   	push   eax
c000b052:	e8 a7 e8 ff ff       	call   c00098fe <Device::~Device()>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	90                   	nop
c000b05b:	83 c4 0c             	add    esp,0xc
c000b05e:	c3                   	ret    
c000b05f:	90                   	nop

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	83 ec 0c             	sub    esp,0xc
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	e8 cd ff ff ff       	call   c000b03c <Timer::~Timer()>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	83 ec 08             	sub    esp,0x8
c000b075:	68 5c 01 00 00       	push   0x15c
c000b07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07e:	e8 9c 22 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 c4 0c             	add    esp,0xc
c000b089:	c3                   	ret    

c000b08a <Timer::read()>:
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b094:	c3                   	ret    

c000b095 <setupTimer(int)>:
c000b095:	53                   	push   ebx
c000b096:	83 ec 14             	sub    esp,0x14
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	e8 f4 4b 00 00       	call   c000fc97 <malloc>
c000b0a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a6:	89 c3                	mov    ebx,eax
c000b0a8:	e8 6f 60 01 00       	call   c002111c <PIT::PIT()>
c000b0ad:	58                   	pop    eax
c000b0ae:	5a                   	pop    edx
c000b0af:	53                   	push   ebx
c000b0b0:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b0b6:	e8 41 e9 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000b0bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0bd:	6a 00                	push   0x0
c000b0bf:	6a 00                	push   0x0
c000b0c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c5:	53                   	push   ebx
c000b0c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c9:	89 d8                	mov    eax,ebx
c000b0cb:	83 c4 28             	add    esp,0x28
c000b0ce:	5b                   	pop    ebx
c000b0cf:	c3                   	ret    

c000b0d0 <timerHandler(unsigned int)>:
c000b0d0:	57                   	push   edi
c000b0d1:	31 d2                	xor    edx,edx
c000b0d3:	56                   	push   esi
c000b0d4:	53                   	push   ebx
c000b0d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d9:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0df:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e5:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b0ec:	75 12                	jne    c000b100 <timerHandler(unsigned int)+0x30>
c000b0ee:	c7 44 24 10 5f 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc002375f
c000b0f6:	5b                   	pop    ebx
c000b0f7:	5e                   	pop    esi
c000b0f8:	5f                   	pop    edi
c000b0f9:	e9 66 be ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0fe:	66 90                	xchg   ax,ax
c000b100:	fa                   	cli    
c000b101:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	68 40 ea 02 c0       	push   0xc002ea40
c000b10f:	e8 e8 6a 01 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	84 c0                	test   al,al
c000b119:	0f 85 a9 00 00 00    	jne    c000b1c8 <timerHandler(unsigned int)+0xf8>
c000b11f:	83 ec 0c             	sub    esp,0xc
c000b122:	68 40 ea 02 c0       	push   0xc002ea40
c000b127:	e8 ec 6a 01 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 c6                	mov    esi,eax
c000b131:	8d 76 00             	lea    esi,[esi+0x0]
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	68 40 ea 02 c0       	push   0xc002ea40
c000b13c:	e8 d7 6a 01 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b141:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b148:	89 c7                	mov    edi,eax
c000b14a:	e8 d1 6a 01 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b152:	83 c4 10             	add    esp,0x10
c000b155:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b158:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b15e:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b163:	19 c8                	sbb    eax,ecx
c000b165:	72 21                	jb     c000b188 <timerHandler(unsigned int)+0xb8>
c000b167:	83 ec 0c             	sub    esp,0xc
c000b16a:	57                   	push   edi
c000b16b:	e8 fc c0 00 00       	call   c001726c <unblockTask(ThreadControlBlock*)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	39 fe                	cmp    esi,edi
c000b175:	75 25                	jne    c000b19c <timerHandler(unsigned int)+0xcc>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 40 ea 02 c0       	push   0xc002ea40
c000b17f:	e8 94 6a 01 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	89 c6                	mov    esi,eax
c000b186:	eb 10                	jmp    c000b198 <timerHandler(unsigned int)+0xc8>
c000b188:	50                   	push   eax
c000b189:	50                   	push   eax
c000b18a:	57                   	push   edi
c000b18b:	68 40 ea 02 c0       	push   0xc002ea40
c000b190:	e8 47 6b 01 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b195:	8d 76 00             	lea    esi,[esi+0x0]
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	90                   	nop
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	68 40 ea 02 c0       	push   0xc002ea40
c000b1a4:	e8 53 6a 01 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	84 c0                	test   al,al
c000b1ae:	75 18                	jne    c000b1c8 <timerHandler(unsigned int)+0xf8>
c000b1b0:	83 ec 0c             	sub    esp,0xc
c000b1b3:	68 40 ea 02 c0       	push   0xc002ea40
c000b1b8:	e8 5b 6a 01 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	39 f0                	cmp    eax,esi
c000b1c2:	0f 85 6c ff ff ff    	jne    c000b134 <timerHandler(unsigned int)+0x64>
c000b1c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1d0:	85 c0                	test   eax,eax
c000b1d2:	74 48                	je     c000b21c <timerHandler(unsigned int)+0x14c>
c000b1d4:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b1db:	74 3f                	je     c000b21c <timerHandler(unsigned int)+0x14c>
c000b1dd:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1e2:	76 1c                	jbe    c000b200 <timerHandler(unsigned int)+0x130>
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	68 75 37 02 c0       	push   0xc0023775
c000b1ec:	e8 73 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b1f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f6:	83 c4 10             	add    esp,0x10
c000b1f9:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b200:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b206:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b209:	89 c1                	mov    ecx,eax
c000b20b:	29 d9                	sub    ecx,ebx
c000b20d:	39 d8                	cmp    eax,ebx
c000b20f:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b212:	77 08                	ja     c000b21c <timerHandler(unsigned int)+0x14c>
c000b214:	e8 f7 bc 00 00       	call   c0016f10 <schedule()>
c000b219:	8d 76 00             	lea    esi,[esi+0x0]
c000b21c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b223:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b22a:	75 04                	jne    c000b230 <timerHandler(unsigned int)+0x160>
c000b22c:	fb                   	sti    
c000b22d:	8d 76 00             	lea    esi,[esi+0x0]
c000b230:	5b                   	pop    ebx
c000b231:	5e                   	pop    esi
c000b232:	5f                   	pop    edi
c000b233:	c3                   	ret    

c000b234 <VCache::VCache(PhysicalDisk*)>:
c000b234:	53                   	push   ebx
c000b235:	83 ec 18             	sub    esp,0x18
c000b238:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c000b23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b241:	89 10                	mov    DWORD PTR [eax],edx
c000b243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b247:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b252:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b25d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b264:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b276:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b27d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b281:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b294:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b29b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ae:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2be:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2cd:	83 ec 0c             	sub    esp,0xc
c000b2d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d4:	e8 be 49 00 00       	call   c000fc97 <malloc>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 c3                	mov    ebx,eax
c000b2de:	83 ec 0c             	sub    esp,0xc
c000b2e1:	53                   	push   ebx
c000b2e2:	e8 dd 4c 00 00       	call   c000ffc4 <Mutex::Mutex()>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b300:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b307:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b30b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b315:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b318:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b31c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b328:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b32c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b336:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b33a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b344:	05 00 01 00 00       	add    eax,0x100
c000b349:	c1 e0 04             	shl    eax,0x4
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	50                   	push   eax
c000b350:	e8 42 49 00 00       	call   c000fc97 <malloc>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	89 c2                	mov    edx,eax
c000b35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b365:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b370:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b374:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b378:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37e:	89 d0                	mov    eax,edx
c000b380:	c1 e0 02             	shl    eax,0x2
c000b383:	01 d0                	add    eax,edx
c000b385:	c1 e0 04             	shl    eax,0x4
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	50                   	push   eax
c000b38c:	e8 06 49 00 00       	call   c000fc97 <malloc>
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	89 c2                	mov    edx,eax
c000b396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b39a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b39d:	90                   	nop
c000b39e:	83 c4 18             	add    esp,0x18
c000b3a1:	5b                   	pop    ebx
c000b3a2:	c3                   	ret    
c000b3a3:	90                   	nop

c000b3a4 <VCache::invalidateReadBuffer()>:
c000b3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3b2:	c3                   	ret    
c000b3b3:	90                   	nop

c000b3b4 <VCache::writeWriteBuffer()>:
c000b3b4:	53                   	push   ebx
c000b3b5:	83 ec 08             	sub    esp,0x8
c000b3b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3c0:	74 1e                	je     c000b3e0 <VCache::writeWriteBuffer()+0x2c>
c000b3c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c5:	83 ec 0c             	sub    esp,0xc
c000b3c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d6:	50                   	push   eax
c000b3d7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3da:	83 c4 20             	add    esp,0x20
c000b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3e0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ee:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3f2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f9:	83 c4 08             	add    esp,0x8
c000b3fc:	5b                   	pop    ebx
c000b3fd:	c3                   	ret    
c000b3fe:	66 90                	xchg   ax,ax

c000b400 <VCache::~VCache()>:
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c000b408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40c:	89 10                	mov    DWORD PTR [eax],edx
c000b40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b412:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b415:	0f b6 c0             	movzx  eax,al
c000b418:	85 c0                	test   eax,eax
c000b41a:	74 10                	je     c000b42c <VCache::~VCache()+0x2c>
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b423:	e8 8c ff ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	90                   	nop
c000b42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b430:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	50                   	push   eax
c000b437:	e8 6b 48 00 00       	call   c000fca7 <free>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b443:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b446:	83 ec 0c             	sub    esp,0xc
c000b449:	50                   	push   eax
c000b44a:	e8 58 48 00 00       	call   c000fca7 <free>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	90                   	nop
c000b453:	83 c4 0c             	add    esp,0xc
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	83 ec 0c             	sub    esp,0xc
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	e8 99 ff ff ff       	call   c000b400 <VCache::~VCache()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	83 ec 08             	sub    esp,0x8
c000b46d:	6a 44                	push   0x44
c000b46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b473:	e8 a7 1e 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	83 c4 0c             	add    esp,0xc
c000b47e:	c3                   	ret    
c000b47f:	90                   	nop

c000b480 <VCache::write(unsigned long long, int, void*)>:
c000b480:	55                   	push   ebp
c000b481:	57                   	push   edi
c000b482:	56                   	push   esi
c000b483:	53                   	push   ebx
c000b484:	83 ec 1c             	sub    esp,0x1c
c000b487:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b48b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b493:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b497:	e8 9c b7 00 00       	call   c0016c38 <KeDisablePreemption()>
c000b49c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4a1:	50                   	push   eax
c000b4a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a5:	0f af c3             	imul   eax,ebx
c000b4a8:	05 ff 0f 00 00       	add    eax,0xfff
c000b4ad:	99                   	cdq    
c000b4ae:	f7 f9                	idiv   ecx
c000b4b0:	50                   	push   eax
c000b4b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b5:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4bb:	e8 02 8d 00 00       	call   c00141c2 <VAS::canLockPages(unsigned long, int)>
c000b4c0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4cc:	74 2a                	je     c000b4f8 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ce:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d3:	50                   	push   eax
c000b4d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d7:	0f af c3             	imul   eax,ebx
c000b4da:	05 ff 0f 00 00       	add    eax,0xfff
c000b4df:	99                   	cdq    
c000b4e0:	f7 f9                	idiv   ecx
c000b4e2:	50                   	push   eax
c000b4e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e7:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4ed:	e8 ca 90 00 00       	call   c00145bc <VAS::lockPages(unsigned long, int)>
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f8:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4fc:	74 0e                	je     c000b50c <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fe:	83 ec 0c             	sub    esp,0xc
c000b501:	55                   	push   ebp
c000b502:	e8 9d fe ff ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	66 90                	xchg   ax,ax
c000b50c:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b510:	74 72                	je     c000b584 <VCache::write(unsigned long long, int, void*)+0x104>
c000b512:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b515:	89 c8                	mov    eax,ecx
c000b517:	99                   	cdq    
c000b518:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b51b:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b52a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52e:	31 f0                	xor    eax,esi
c000b530:	31 fa                	xor    edx,edi
c000b532:	09 d0                	or     eax,edx
c000b534:	75 42                	jne    c000b578 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b536:	83 fb 01             	cmp    ebx,0x1
c000b539:	75 3d                	jne    c000b578 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53e:	89 cf                	mov    edi,ecx
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b54a:	0f af f8             	imul   edi,eax
c000b54d:	89 c1                	mov    ecx,eax
c000b54f:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b554:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b557:	40                   	inc    eax
c000b558:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b55b:	83 f8 50             	cmp    eax,0x50
c000b55e:	0f 85 a8 00 00 00    	jne    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	55                   	push   ebp
c000b568:	e8 47 fe ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b56d:	83 c4 10             	add    esp,0x10
c000b570:	e9 97 00 00 00       	jmp    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	83 ec 0c             	sub    esp,0xc
c000b57b:	55                   	push   ebp
c000b57c:	e8 33 fe ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b581:	83 c4 10             	add    esp,0x10
c000b584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b587:	83 fb 4f             	cmp    ebx,0x4f
c000b58a:	7f 20                	jg     c000b5ac <VCache::write(unsigned long long, int, void*)+0x12c>
c000b58c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b595:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b599:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a8:	eb 62                	jmp    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5aa:	66 90                	xchg   ax,ax
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b5:	53                   	push   ebx
c000b5b6:	57                   	push   edi
c000b5b7:	56                   	push   esi
c000b5b8:	50                   	push   eax
c000b5b9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5bc:	83 c4 20             	add    esp,0x20
c000b5bf:	89 c6                	mov    esi,eax
c000b5c1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c6:	74 28                	je     c000b5f0 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5cd:	52                   	push   edx
c000b5ce:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5d2:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d8:	99                   	cdq    
c000b5d9:	f7 f9                	idiv   ecx
c000b5db:	50                   	push   eax
c000b5dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5e0:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5e6:	e8 13 8c 00 00       	call   c00141fe <VAS::unlockPages(unsigned long, int)>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	66 90                	xchg   ax,ax
c000b5f0:	e8 6b b6 00 00       	call   c0016c60 <KeRestorePreemption()>
c000b5f5:	85 f6                	test   esi,esi
c000b5f7:	74 4b                	je     c000b644 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f9:	83 ec 0c             	sub    esp,0xc
c000b5fc:	68 d4 37 02 c0       	push   0xc00237d4
c000b601:	e8 5e b9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b606:	83 c4 10             	add    esp,0x10
c000b609:	eb 39                	jmp    c000b644 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b60b:	90                   	nop
c000b60c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b611:	74 29                	je     c000b63c <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b613:	b9 00 10 00 00       	mov    ecx,0x1000
c000b618:	50                   	push   eax
c000b619:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b61d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b623:	99                   	cdq    
c000b624:	f7 f9                	idiv   ecx
c000b626:	50                   	push   eax
c000b627:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b62b:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b631:	e8 c8 8b 00 00       	call   c00141fe <VAS::unlockPages(unsigned long, int)>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	8d 76 00             	lea    esi,[esi+0x0]
c000b63c:	e8 1f b6 00 00       	call   c0016c60 <KeRestorePreemption()>
c000b641:	31 f6                	xor    esi,esi
c000b643:	90                   	nop
c000b644:	83 c4 1c             	add    esp,0x1c
c000b647:	89 f0                	mov    eax,esi
c000b649:	5b                   	pop    ebx
c000b64a:	5e                   	pop    esi
c000b64b:	5f                   	pop    edi
c000b64c:	5d                   	pop    ebp
c000b64d:	c3                   	ret    

c000b64e <VCache::read(unsigned long long, int, void*)>:
c000b64e:	55                   	push   ebp
c000b64f:	57                   	push   edi
c000b650:	bf 00 10 00 00       	mov    edi,0x1000
c000b655:	56                   	push   esi
c000b656:	53                   	push   ebx
c000b657:	83 ec 2c             	sub    esp,0x2c
c000b65a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b666:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b672:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b676:	e8 bd b5 00 00       	call   c0016c38 <KeDisablePreemption()>
c000b67b:	50                   	push   eax
c000b67c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b67f:	0f af c6             	imul   eax,esi
c000b682:	05 ff 0f 00 00       	add    eax,0xfff
c000b687:	99                   	cdq    
c000b688:	f7 ff                	idiv   edi
c000b68a:	50                   	push   eax
c000b68b:	55                   	push   ebp
c000b68c:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b692:	e8 2b 8b 00 00       	call   c00141c2 <VAS::canLockPages(unsigned long, int)>
c000b697:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b69b:	83 c4 10             	add    esp,0x10
c000b69e:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6a3:	74 1f                	je     c000b6c4 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6a5:	50                   	push   eax
c000b6a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6a9:	0f af c6             	imul   eax,esi
c000b6ac:	05 ff 0f 00 00       	add    eax,0xfff
c000b6b1:	99                   	cdq    
c000b6b2:	f7 ff                	idiv   edi
c000b6b4:	50                   	push   eax
c000b6b5:	55                   	push   ebp
c000b6b6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b6bc:	e8 fb 8e 00 00       	call   c00145bc <VAS::lockPages(unsigned long, int)>
c000b6c1:	83 c4 10             	add    esp,0x10
c000b6c4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c8:	74 0e                	je     c000b6d8 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	53                   	push   ebx
c000b6ce:	e8 e1 fc ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b6d3:	83 c4 10             	add    esp,0x10
c000b6d6:	66 90                	xchg   ax,ax
c000b6d8:	83 fe 01             	cmp    esi,0x1
c000b6db:	0f 85 ef 00 00 00    	jne    c000b7d0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6e1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b6e4:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b6eb:	0f 85 df 00 00 00    	jne    c000b7d0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6f1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b6f4:	89 fe                	mov    esi,edi
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b6fe:	c1 f8 1f             	sar    eax,0x1f
c000b701:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b705:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b709:	89 f0                	mov    eax,esi
c000b70b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b70f:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b713:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b717:	89 f2                	mov    edx,esi
c000b719:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b71e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b722:	74 0c                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b724:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b727:	75 07                	jne    c000b730 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b729:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b72c:	74 4e                	je     c000b77c <VCache::read(unsigned long long, int, void*)+0x12e>
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b737:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	57                   	push   edi
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	51                   	push   ecx
c000b746:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b749:	83 c4 20             	add    esp,0x20
c000b74c:	89 c7                	mov    edi,eax
c000b74e:	85 c0                	test   eax,eax
c000b750:	74 2a                	je     c000b77c <VCache::read(unsigned long long, int, void*)+0x12e>
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	68 ec 37 02 c0       	push   0xc00237ec
c000b75a:	e8 05 b8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b767:	0f 84 b3 00 00 00    	je     c000b820 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b76d:	51                   	push   ecx
c000b76e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b771:	05 ff 0f 00 00       	add    eax,0xfff
c000b776:	e9 8d 00 00 00       	jmp    c000b808 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b77b:	90                   	nop
c000b77c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b77f:	89 ef                	mov    edi,ebp
c000b781:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b787:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b78a:	8d 70 ff             	lea    esi,[eax-0x1]
c000b78d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b791:	0f af f1             	imul   esi,ecx
c000b794:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b799:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b79e:	74 24                	je     c000b7c4 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7a0:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7a5:	52                   	push   edx
c000b7a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7a9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ae:	99                   	cdq    
c000b7af:	f7 f9                	idiv   ecx
c000b7b1:	50                   	push   eax
c000b7b2:	55                   	push   ebp
c000b7b3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7b9:	e8 40 8a 00 00       	call   c00141fe <VAS::unlockPages(unsigned long, int)>
c000b7be:	83 c4 10             	add    esp,0x10
c000b7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7c4:	e8 97 b4 00 00       	call   c0016c60 <KeRestorePreemption()>
c000b7c9:	31 ff                	xor    edi,edi
c000b7cb:	eb 5b                	jmp    c000b828 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d0:	83 ec 0c             	sub    esp,0xc
c000b7d3:	53                   	push   ebx
c000b7d4:	e8 cb fb ff ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c000b7d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b7e1:	56                   	push   esi
c000b7e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7ea:	50                   	push   eax
c000b7eb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7ee:	83 c4 20             	add    esp,0x20
c000b7f1:	89 c7                	mov    edi,eax
c000b7f3:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b7f8:	74 26                	je     c000b820 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7fa:	50                   	push   eax
c000b7fb:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7ff:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b805:	8d 76 00             	lea    esi,[esi+0x0]
c000b808:	b9 00 10 00 00       	mov    ecx,0x1000
c000b80d:	99                   	cdq    
c000b80e:	f7 f9                	idiv   ecx
c000b810:	50                   	push   eax
c000b811:	55                   	push   ebp
c000b812:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b818:	e8 e1 89 00 00       	call   c00141fe <VAS::unlockPages(unsigned long, int)>
c000b81d:	83 c4 10             	add    esp,0x10
c000b820:	e8 3b b4 00 00       	call   c0016c60 <KeRestorePreemption()>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 c4 2c             	add    esp,0x2c
c000b82b:	89 f8                	mov    eax,edi
c000b82d:	5b                   	pop    ebx
c000b82e:	5e                   	pop    esi
c000b82f:	5f                   	pop    edi
c000b830:	5d                   	pop    ebp
c000b831:	c3                   	ret    

c000b832 <Video::putrect(int, int, int, int, unsigned int)>:
c000b832:	55                   	push   ebp
c000b833:	57                   	push   edi
c000b834:	56                   	push   esi
c000b835:	53                   	push   ebx
c000b836:	83 ec 1c             	sub    esp,0x1c
c000b839:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b83d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b841:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b845:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b849:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b84d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b851:	01 df                	add    edi,ebx
c000b853:	39 fb                	cmp    ebx,edi
c000b855:	7d 1f                	jge    c000b876 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b857:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b85b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b85f:	7d 12                	jge    c000b873 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b861:	8b 16                	mov    edx,DWORD PTR [esi]
c000b863:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b867:	53                   	push   ebx
c000b868:	55                   	push   ebp
c000b869:	45                   	inc    ebp
c000b86a:	56                   	push   esi
c000b86b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	eb e8                	jmp    c000b85b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b873:	43                   	inc    ebx
c000b874:	eb dd                	jmp    c000b853 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b876:	83 c4 1c             	add    esp,0x1c
c000b879:	5b                   	pop    ebx
c000b87a:	5e                   	pop    esi
c000b87b:	5f                   	pop    edi
c000b87c:	5d                   	pop    ebp
c000b87d:	c3                   	ret    

c000b87e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b87e:	55                   	push   ebp
c000b87f:	57                   	push   edi
c000b880:	31 ff                	xor    edi,edi
c000b882:	56                   	push   esi
c000b883:	53                   	push   ebx
c000b884:	83 ec 1c             	sub    esp,0x1c
c000b887:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b88b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b88f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b896:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b89b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b89f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8a7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ae:	01 f9                	add    ecx,edi
c000b8b0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8b4:	7d 2f                	jge    c000b8e5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8b6:	31 f6                	xor    esi,esi
c000b8b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8bc:	01 f2                	add    edx,esi
c000b8be:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8c2:	7d 1a                	jge    c000b8de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8c7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8ca:	46                   	inc    esi
c000b8cb:	51                   	push   ecx
c000b8cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8d0:	52                   	push   edx
c000b8d1:	55                   	push   ebp
c000b8d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8d5:	83 c4 10             	add    esp,0x10
c000b8d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8dc:	eb da                	jmp    c000b8b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8de:	47                   	inc    edi
c000b8df:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8e3:	eb c5                	jmp    c000b8aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8e5:	83 c4 1c             	add    esp,0x1c
c000b8e8:	5b                   	pop    ebx
c000b8e9:	5e                   	pop    esi
c000b8ea:	5f                   	pop    edi
c000b8eb:	5d                   	pop    ebp
c000b8ec:	c3                   	ret    
c000b8ed:	90                   	nop

c000b8ee <Video::blit(unsigned int*, int, int, int, int)>:
c000b8ee:	55                   	push   ebp
c000b8ef:	57                   	push   edi
c000b8f0:	56                   	push   esi
c000b8f1:	53                   	push   ebx
c000b8f2:	83 ec 1c             	sub    esp,0x1c
c000b8f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8fd:	85 c0                	test   eax,eax
c000b8ff:	79 02                	jns    c000b903 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b901:	31 c0                	xor    eax,eax
c000b903:	c1 e0 02             	shl    eax,0x2
c000b906:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b90a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b90e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b912:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b916:	39 d8                	cmp    eax,ebx
c000b918:	7e 49                	jle    c000b963 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b91a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b920:	7c 41                	jl     c000b963 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b922:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b926:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b92a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b92e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b932:	39 f9                	cmp    ecx,edi
c000b934:	7e 22                	jle    c000b958 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b936:	83 c5 04             	add    ebp,0x4
c000b939:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b93f:	7c 14                	jl     c000b955 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b941:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b943:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b946:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b94a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b94e:	56                   	push   esi
c000b94f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b952:	83 c4 10             	add    esp,0x10
c000b955:	47                   	inc    edi
c000b956:	eb d2                	jmp    c000b92a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b95c:	43                   	inc    ebx
c000b95d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b961:	eb ab                	jmp    c000b90e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b963:	83 c4 1c             	add    esp,0x1c
c000b966:	5b                   	pop    ebx
c000b967:	5e                   	pop    esi
c000b968:	5f                   	pop    edi
c000b969:	5d                   	pop    ebp
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Video::clearScreen(unsigned int)>:
c000b96c:	57                   	push   edi
c000b96d:	56                   	push   esi
c000b96e:	53                   	push   ebx
c000b96f:	31 db                	xor    ebx,ebx
c000b971:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b975:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b97b:	7e 1f                	jle    c000b99c <Video::clearScreen(unsigned int)+0x30>
c000b97d:	31 ff                	xor    edi,edi
c000b97f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b985:	7e 12                	jle    c000b999 <Video::clearScreen(unsigned int)+0x2d>
c000b987:	8b 06                	mov    eax,DWORD PTR [esi]
c000b989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b98d:	53                   	push   ebx
c000b98e:	57                   	push   edi
c000b98f:	47                   	inc    edi
c000b990:	56                   	push   esi
c000b991:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	eb e6                	jmp    c000b97f <Video::clearScreen(unsigned int)+0x13>
c000b999:	43                   	inc    ebx
c000b99a:	eb d9                	jmp    c000b975 <Video::clearScreen(unsigned int)+0x9>
c000b99c:	5b                   	pop    ebx
c000b99d:	5e                   	pop    esi
c000b99e:	5f                   	pop    edi
c000b99f:	c3                   	ret    

c000b9a0 <Video::putpixel(int, int, unsigned int)>:
c000b9a0:	c7 44 24 04 24 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023824
c000b9a8:	e9 31 46 00 00       	jmp    c000ffde <KePanic(char const*)>
c000b9ad:	90                   	nop

c000b9ae <Video::readPixelApprox(int, int)>:
c000b9ae:	83 ec 18             	sub    esp,0x18
c000b9b1:	68 45 38 02 c0       	push   0xc0023845
c000b9b6:	e8 23 46 00 00       	call   c000ffde <KePanic(char const*)>
c000b9bb:	31 c0                	xor    eax,eax
c000b9bd:	83 c4 1c             	add    esp,0x1c
c000b9c0:	c3                   	ret    
c000b9c1:	90                   	nop

c000b9c2 <Video::Video(char const*)>:
c000b9c2:	83 ec 0c             	sub    esp,0xc
c000b9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c9:	83 ec 08             	sub    esp,0x8
c000b9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d0:	50                   	push   eax
c000b9d1:	e8 88 e1 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c000b9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e2:	89 10                	mov    DWORD PTR [eax],edx
c000b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9f2:	90                   	nop
c000b9f3:	83 c4 0c             	add    esp,0xc
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Video::~Video()>:
c000b9f8:	83 ec 0c             	sub    esp,0xc
c000b9fb:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	89 10                	mov    DWORD PTR [eax],edx
c000ba06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 eb de ff ff       	call   c00098fe <Device::~Device()>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	90                   	nop
c000ba17:	83 c4 0c             	add    esp,0xc
c000ba1a:	c3                   	ret    
c000ba1b:	90                   	nop

c000ba1c <Video::~Video()>:
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba26:	e8 cd ff ff ff       	call   c000b9f8 <Video::~Video()>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	83 ec 08             	sub    esp,0x8
c000ba31:	68 64 01 00 00       	push   0x164
c000ba36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba3a:	e8 e0 18 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000ba3f:	83 c4 10             	add    esp,0x10
c000ba42:	83 c4 0c             	add    esp,0xc
c000ba45:	c3                   	ret    

c000ba46 <Video::isMonochrome()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <Video::getWidth()>:
c000ba52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <Video::getHeight()>:
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba68:	c3                   	ret    
c000ba69:	90                   	nop

c000ba6a <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba6a:	55                   	push   ebp
c000ba6b:	57                   	push   edi
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 2c             	sub    esp,0x2c
c000ba71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba79:	83 f8 01             	cmp    eax,0x1
c000ba7c:	19 c9                	sbb    ecx,ecx
c000ba7e:	31 db                	xor    ebx,ebx
c000ba80:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba84:	89 cd                	mov    ebp,ecx
c000ba86:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba8e:	f7 d5                	not    ebp
c000ba90:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ba96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba9a:	01 d8                	add    eax,ebx
c000ba9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa0:	56                   	push   esi
c000baa1:	e8 b8 ff ff ff       	call   c000ba5e <Video::getHeight()>
c000baa6:	59                   	pop    ecx
c000baa7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000baab:	7e 70                	jle    c000bb1d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000baad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bab1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bab5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000babc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bac0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bacb:	89 f8                	mov    eax,edi
c000bacd:	83 c0 20             	add    eax,0x20
c000bad0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bad4:	56                   	push   esi
c000bad5:	e8 78 ff ff ff       	call   c000ba52 <Video::getWidth()>
c000bada:	5a                   	pop    edx
c000badb:	39 c7                	cmp    edi,eax
c000badd:	7d 34                	jge    c000bb13 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000badf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bae4:	74 05                	je     c000baeb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bae6:	8b 06                	mov    eax,DWORD PTR [esi]
c000bae8:	55                   	push   ebp
c000bae9:	eb 0d                	jmp    c000baf8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000baeb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000baf0:	74 12                	je     c000bb04 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000baf2:	8b 06                	mov    eax,DWORD PTR [esi]
c000baf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bafc:	57                   	push   edi
c000bafd:	56                   	push   esi
c000bafe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb08:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb0c:	47                   	inc    edi
c000bb0d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb11:	75 c1                	jne    c000bad4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb13:	43                   	inc    ebx
c000bb14:	83 fb 20             	cmp    ebx,0x20
c000bb17:	0f 85 79 ff ff ff    	jne    c000ba96 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb1d:	83 c4 2c             	add    esp,0x2c
c000bb20:	5b                   	pop    ebx
c000bb21:	5e                   	pop    esi
c000bb22:	5f                   	pop    edi
c000bb23:	5d                   	pop    ebp
c000bb24:	c3                   	ret    
c000bb25:	90                   	nop

c000bb26 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb26:	55                   	push   ebp
c000bb27:	57                   	push   edi
c000bb28:	56                   	push   esi
c000bb29:	53                   	push   ebx
c000bb2a:	83 ec 48             	sub    esp,0x48
c000bb2d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb31:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb35:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb39:	c1 e0 08             	shl    eax,0x8
c000bb3c:	01 d0                	add    eax,edx
c000bb3e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb46:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb4a:	c1 e0 08             	shl    eax,0x8
c000bb4d:	01 d0                	add    eax,edx
c000bb4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb57:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb64:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb6b:	50                   	push   eax
c000bb6c:	e8 26 41 00 00       	call   c000fc97 <malloc>
c000bb71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bb7d:	75 10                	jne    c000bb8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bb7f:	83 ec 0c             	sub    esp,0xc
c000bb82:	68 70 38 02 c0       	push   0xc0023870
c000bb87:	e8 52 44 00 00       	call   c000ffde <KePanic(char const*)>
c000bb8c:	83 c4 10             	add    esp,0x10
c000bb8f:	51                   	push   ecx
c000bb90:	51                   	push   ecx
c000bb91:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb95:	50                   	push   eax
c000bb96:	68 80 38 02 c0       	push   0xc0023880
c000bb9b:	e8 c4 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bba0:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bba3:	83 e0 20             	and    eax,0x20
c000bba6:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbaa:	85 c0                	test   eax,eax
c000bbac:	5e                   	pop    esi
c000bbad:	0f 94 c0             	sete   al
c000bbb0:	5f                   	pop    edi
c000bbb1:	0f b6 c0             	movzx  eax,al
c000bbb4:	be 12 00 00 00       	mov    esi,0x12
c000bbb9:	50                   	push   eax
c000bbba:	68 8a 38 02 c0       	push   0xc002388a
c000bbbf:	e8 a0 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbc4:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bbc8:	83 c4 10             	add    esp,0x10
c000bbcb:	89 d0                	mov    eax,edx
c000bbcd:	85 d2                	test   edx,edx
c000bbcf:	74 11                	je     c000bbe2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bbd1:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bbd5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbd9:	c1 fe 03             	sar    esi,0x3
c000bbdc:	0f af f1             	imul   esi,ecx
c000bbdf:	83 c6 12             	add    esi,0x12
c000bbe2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbe7:	74 07                	je     c000bbf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bbe9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bbee:	75 12                	jne    c000bc02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bbf0:	83 ec 0c             	sub    esp,0xc
c000bbf3:	68 98 38 02 c0       	push   0xc0023898
c000bbf8:	e8 67 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbfd:	e9 a0 02 00 00       	jmp    c000bea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc02:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc06:	83 f9 02             	cmp    ecx,0x2
c000bc09:	74 0e                	je     c000bc19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc0b:	83 f9 0a             	cmp    ecx,0xa
c000bc0e:	0f 84 c8 00 00 00    	je     c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc14:	e9 72 02 00 00       	jmp    c000be8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc19:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc1e:	75 0e                	jne    c000bc2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc20:	84 c0                	test   al,al
c000bc22:	75 0a                	jne    c000bc2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc24:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc27:	83 e8 18             	sub    eax,0x18
c000bc2a:	a8 f7                	test   al,0xf7
c000bc2c:	74 0d                	je     c000bc3b <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc2e:	83 ec 0c             	sub    esp,0xc
c000bc31:	68 ad 38 02 c0       	push   0xc00238ad
c000bc36:	e9 58 02 00 00       	jmp    c000be93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc3b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc48:	31 c0                	xor    eax,eax
c000bc4a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc4e:	89 c7                	mov    edi,eax
c000bc50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc5d:	75 15                	jne    c000bc74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc5f:	99                   	cdq    
c000bc60:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc64:	85 d2                	test   edx,edx
c000bc66:	75 0c                	jne    c000bc74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc6c:	29 c7                	sub    edi,eax
c000bc6e:	4f                   	dec    edi
c000bc6f:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bc74:	31 d2                	xor    edx,edx
c000bc76:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc7a:	75 08                	jne    c000bc84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bc7c:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bc81:	c1 e2 18             	shl    edx,0x18
c000bc84:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bc89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bc8d:	c1 e1 10             	shl    ecx,0x10
c000bc90:	8d 47 01             	lea    eax,[edi+0x1]
c000bc93:	89 cd                	mov    ebp,ecx
c000bc95:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bc9a:	c1 e1 08             	shl    ecx,0x8
c000bc9d:	09 e9                	or     ecx,ebp
c000bc9f:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bca3:	09 e9                	or     ecx,ebp
c000bca5:	09 d1                	or     ecx,edx
c000bca7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcab:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bcae:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcb2:	c1 fa 03             	sar    edx,0x3
c000bcb5:	01 d6                	add    esi,edx
c000bcb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcbb:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcbf:	7e 04                	jle    c000bcc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bcc1:	89 c7                	mov    edi,eax
c000bcc3:	eb 93                	jmp    c000bc58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bcc5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bccd:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bcd1:	0f 8f 77 ff ff ff    	jg     c000bc4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bcd7:	e9 d3 01 00 00       	jmp    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bcdc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bce1:	75 0e                	jne    c000bcf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bce3:	85 d2                	test   edx,edx
c000bce5:	75 0a                	jne    c000bcf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bce7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bcea:	83 e8 18             	sub    eax,0x18
c000bced:	a8 f7                	test   al,0xf7
c000bcef:	74 0d                	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bcf1:	83 ec 0c             	sub    esp,0xc
c000bcf4:	68 bb 38 02 c0       	push   0xc00238bb
c000bcf9:	e9 95 01 00 00       	jmp    c000be93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bcfe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd06:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd0e:	31 c9                	xor    ecx,ecx
c000bd10:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd14:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd18:	0f 8e 91 01 00 00    	jle    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd1e:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd22:	0f 8d 87 01 00 00    	jge    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd28:	8d 46 01             	lea    eax,[esi+0x1]
c000bd2b:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd33:	83 fd 7f             	cmp    ebp,0x7f
c000bd36:	89 e8                	mov    eax,ebp
c000bd38:	0f 8e 9d 00 00 00    	jle    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd3e:	83 e0 7f             	and    eax,0x7f
c000bd41:	31 d2                	xor    edx,edx
c000bd43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd47:	40                   	inc    eax
c000bd48:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd50:	75 0a                	jne    c000bd5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd52:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd57:	89 ea                	mov    edx,ebp
c000bd59:	c1 e2 18             	shl    edx,0x18
c000bd5c:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd61:	c1 e0 10             	shl    eax,0x10
c000bd64:	89 c7                	mov    edi,eax
c000bd66:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd6b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd6f:	c1 e0 08             	shl    eax,0x8
c000bd72:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd76:	09 f8                	or     eax,edi
c000bd78:	31 f6                	xor    esi,esi
c000bd7a:	09 c5                	or     ebp,eax
c000bd7c:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bd81:	09 d5                	or     ebp,edx
c000bd83:	85 ff                	test   edi,edi
c000bd85:	75 1d                	jne    c000bda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd87:	89 c8                	mov    eax,ecx
c000bd89:	99                   	cdq    
c000bd8a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bd8e:	85 d2                	test   edx,edx
c000bd90:	75 12                	jne    c000bda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd96:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bd9a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd9e:	49                   	dec    ecx
c000bd9f:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bda4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bda8:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdab:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bdae:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bdb2:	8d 46 01             	lea    eax,[esi+0x1]
c000bdb5:	7e 06                	jle    c000bdbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bdb7:	89 c6                	mov    esi,eax
c000bdb9:	89 d1                	mov    ecx,edx
c000bdbb:	eb c6                	jmp    c000bd83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bdbd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bdc1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdc5:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bdc9:	c1 f8 03             	sar    eax,0x3
c000bdcc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bdd0:	89 d1                	mov    ecx,edx
c000bdd2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdd6:	e9 35 ff ff ff       	jmp    c000bd10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000bddb:	8d 45 01             	lea    eax,[ebp+0x1]
c000bdde:	31 f6                	xor    esi,esi
c000bde0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bde4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bde9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bded:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdf2:	75 1d                	jne    c000be11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdf4:	89 c8                	mov    eax,ecx
c000bdf6:	99                   	cdq    
c000bdf7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdfb:	85 d2                	test   edx,edx
c000bdfd:	75 12                	jne    c000be11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be03:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be07:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be0b:	49                   	dec    ecx
c000be0c:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be11:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be1d:	75 10                	jne    c000be2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be23:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be28:	c1 e7 18             	shl    edi,0x18
c000be2b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be33:	8d 51 01             	lea    edx,[ecx+0x1]
c000be36:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be3b:	c1 e0 10             	shl    eax,0x10
c000be3e:	89 c7                	mov    edi,eax
c000be40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be44:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be49:	c1 e0 08             	shl    eax,0x8
c000be4c:	09 f8                	or     eax,edi
c000be4e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be52:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be56:	09 f8                	or     eax,edi
c000be58:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be5c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be60:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be63:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be67:	c1 f8 03             	sar    eax,0x3
c000be6a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be6e:	8d 46 01             	lea    eax,[esi+0x1]
c000be71:	39 f5                	cmp    ebp,esi
c000be73:	7e 09                	jle    c000be7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000be75:	89 c6                	mov    esi,eax
c000be77:	89 d1                	mov    ecx,edx
c000be79:	e9 6f ff ff ff       	jmp    c000bded <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000be7e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be82:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be86:	e9 45 ff ff ff       	jmp    c000bdd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000be8b:	52                   	push   edx
c000be8c:	52                   	push   edx
c000be8d:	51                   	push   ecx
c000be8e:	68 ca 38 02 c0       	push   0xc00238ca
c000be93:	e8 cc b0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000be98:	58                   	pop    eax
c000be99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000be9d:	e8 05 3e 00 00       	call   c000fca7 <free>
c000bea2:	83 c4 10             	add    esp,0x10
c000bea5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bead:	eb 14                	jmp    c000bec3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000beaf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000beb3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beb7:	89 18                	mov    DWORD PTR [eax],ebx
c000beb9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bebd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bec1:	89 18                	mov    DWORD PTR [eax],ebx
c000bec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bec7:	83 c4 3c             	add    esp,0x3c
c000beca:	5b                   	pop    ebx
c000becb:	5e                   	pop    esi
c000becc:	5f                   	pop    edi
c000becd:	5d                   	pop    ebp
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <Video::putTGA(int, int, unsigned char*, int)>:
c000bed0:	55                   	push   ebp
c000bed1:	57                   	push   edi
c000bed2:	56                   	push   esi
c000bed3:	53                   	push   ebx
c000bed4:	83 ec 28             	sub    esp,0x28
c000bed7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bedb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bedf:	50                   	push   eax
c000bee0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bee4:	50                   	push   eax
c000bee5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bee9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000beed:	57                   	push   edi
c000beee:	e8 33 fc ff ff       	call   c000bb26 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bef3:	83 c4 20             	add    esp,0x20
c000bef6:	85 c0                	test   eax,eax
c000bef8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000befc:	74 3a                	je     c000bf38 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000befe:	89 c6                	mov    esi,eax
c000bf00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf04:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf08:	39 d8                	cmp    eax,ebx
c000bf0a:	7e 2c                	jle    c000bf38 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf14:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf18:	39 e8                	cmp    eax,ebp
c000bf1a:	7e 19                	jle    c000bf35 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf1c:	83 c6 04             	add    esi,0x4
c000bf1f:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf22:	85 c0                	test   eax,eax
c000bf24:	79 0c                	jns    c000bf32 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf26:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf28:	50                   	push   eax
c000bf29:	53                   	push   ebx
c000bf2a:	55                   	push   ebp
c000bf2b:	57                   	push   edi
c000bf2c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf2f:	83 c4 10             	add    esp,0x10
c000bf32:	45                   	inc    ebp
c000bf33:	eb db                	jmp    c000bf10 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf35:	43                   	inc    ebx
c000bf36:	eb c8                	jmp    c000bf00 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf38:	83 c4 1c             	add    esp,0x1c
c000bf3b:	5b                   	pop    ebx
c000bf3c:	5e                   	pop    esi
c000bf3d:	5f                   	pop    edi
c000bf3e:	5d                   	pop    ebp
c000bf3f:	c3                   	ret    

c000bf40 <ACPI::close(int, int, void*)>:
c000bf40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf45:	c3                   	ret    
c000bf46:	66 90                	xchg   ax,ax

c000bf48 <loadACPITables(unsigned char*)>:
c000bf48:	57                   	push   edi
c000bf49:	56                   	push   esi
c000bf4a:	53                   	push   ebx
c000bf4b:	83 ec 60             	sub    esp,0x60
c000bf4e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf53:	0f 84 43 02 00 00    	je     c000c19c <loadACPITables(unsigned char*)+0x254>
c000bf59:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf5e:	0f b6 c0             	movzx  eax,al
c000bf61:	85 c0                	test   eax,eax
c000bf63:	74 7b                	je     c000bfe0 <loadACPITables(unsigned char*)+0x98>
c000bf65:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf74:	83 e8 24             	sub    eax,0x24
c000bf77:	c1 e8 03             	shr    eax,0x3
c000bf7a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf7e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf86:	66 90                	xchg   ax,ax
c000bf88:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf8c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf90:	0f 8d ba 00 00 00    	jge    c000c050 <loadACPITables(unsigned char*)+0x108>
c000bf96:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf9a:	83 c0 24             	add    eax,0x24
c000bf9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfa1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfa5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfa9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfad:	c1 e0 03             	shl    eax,0x3
c000bfb0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfb4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfbb:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfbd:	89 c1                	mov    ecx,eax
c000bfbf:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfc4:	8d 50 01             	lea    edx,[eax+0x1]
c000bfc7:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfcd:	89 ca                	mov    edx,ecx
c000bfcf:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bfd6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfdb:	eb ab                	jmp    c000bf88 <loadACPITables(unsigned char*)+0x40>
c000bfdd:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfe4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfef:	83 e8 24             	sub    eax,0x24
c000bff2:	c1 e8 02             	shr    eax,0x2
c000bff5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bff9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c001:	8d 76 00             	lea    esi,[esi+0x0]
c000c004:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c008:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c00c:	7d 42                	jge    c000c050 <loadACPITables(unsigned char*)+0x108>
c000c00e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c012:	83 c0 24             	add    eax,0x24
c000c015:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c019:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c01d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c021:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c025:	c1 e0 02             	shl    eax,0x2
c000c028:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c02c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c030:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c032:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c037:	8d 50 01             	lea    edx,[eax+0x1]
c000c03a:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c040:	89 ca                	mov    edx,ecx
c000c042:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c049:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c04e:	eb b4                	jmp    c000c004 <loadACPITables(unsigned char*)+0xbc>
c000c050:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c058:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c05d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c061:	0f 8d 39 01 00 00    	jge    c000c1a0 <loadACPITables(unsigned char*)+0x258>
c000c067:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c06b:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c072:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c082:	25 ff 0f 00 00       	and    eax,0xfff
c000c087:	89 c6                	mov    esi,eax
c000c089:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c08f:	83 ec 0c             	sub    esp,0xc
c000c092:	6a 01                	push   0x1
c000c094:	e8 d4 73 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0a6:	83 ec 0c             	sub    esp,0xc
c000c0a9:	6a 01                	push   0x1
c000c0ab:	6a 01                	push   0x1
c000c0ad:	50                   	push   eax
c000c0ae:	52                   	push   edx
c000c0af:	53                   	push   ebx
c000c0b0:	e8 85 7c 00 00       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0b5:	83 c4 20             	add    esp,0x20
c000c0b8:	09 f0                	or     eax,esi
c000c0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c2:	c1 e0 03             	shl    eax,0x3
c000c0c5:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0d6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0f2:	89 c6                	mov    esi,eax
c000c0f4:	89 d7                	mov    edi,edx
c000c0f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0f8:	89 c8                	mov    eax,ecx
c000c0fa:	89 fa                	mov    edx,edi
c000c0fc:	89 f3                	mov    ebx,esi
c000c0fe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c102:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c106:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c10e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c111:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c115:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c119:	05 00 10 00 00       	add    eax,0x1000
c000c11e:	c1 e8 0c             	shr    eax,0xc
c000c121:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c125:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c131:	25 ff 0f 00 00       	and    eax,0xfff
c000c136:	89 c6                	mov    esi,eax
c000c138:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c13e:	83 ec 0c             	sub    esp,0xc
c000c141:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c145:	e8 23 73 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c151:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c157:	83 ec 0c             	sub    esp,0xc
c000c15a:	6a 01                	push   0x1
c000c15c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c160:	50                   	push   eax
c000c161:	52                   	push   edx
c000c162:	53                   	push   ebx
c000c163:	e8 d2 7b 00 00       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c168:	83 c4 20             	add    esp,0x20
c000c16b:	09 f0                	or     eax,esi
c000c16d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	50                   	push   eax
c000c179:	e8 f7 75 00 00       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c185:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c189:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c190:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c195:	e9 be fe ff ff       	jmp    c000c058 <loadACPITables(unsigned char*)+0x110>
c000c19a:	66 90                	xchg   ax,ax
c000c19c:	90                   	nop
c000c19d:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a0:	83 c4 60             	add    esp,0x60
c000c1a3:	5b                   	pop    ebx
c000c1a4:	5e                   	pop    esi
c000c1a5:	5f                   	pop    edi
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <findRSDT(unsigned char*)>:
c000c1a8:	57                   	push   edi
c000c1a9:	56                   	push   esi
c000c1aa:	53                   	push   ebx
c000c1ab:	83 ec 50             	sub    esp,0x50
c000c1ae:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1b3:	85 c0                	test   eax,eax
c000c1b5:	75 0d                	jne    c000c1c4 <findRSDT(unsigned char*)+0x1c>
c000c1b7:	b8 00 00 00 00       	mov    eax,0x0
c000c1bc:	e9 2b 01 00 00       	jmp    c000c2ec <findRSDT(unsigned char*)+0x144>
c000c1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1c4:	89 e0                	mov    eax,esp
c000c1c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1d2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1ea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1ee:	89 c6                	mov    esi,eax
c000c1f0:	89 d7                	mov    edi,edx
c000c1f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1f4:	89 c8                	mov    eax,ecx
c000c1f6:	89 fa                	mov    edx,edi
c000c1f8:	89 f3                	mov    ebx,esi
c000c1fa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c202:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c206:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c20a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c20e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c216:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c21a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c21e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c226:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c22a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c22e:	25 ff 0f 00 00       	and    eax,0xfff
c000c233:	89 c6                	mov    esi,eax
c000c235:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	6a 02                	push   0x2
c000c240:	e8 28 72 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c24c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	6a 01                	push   0x1
c000c257:	6a 02                	push   0x2
c000c259:	50                   	push   eax
c000c25a:	52                   	push   edx
c000c25b:	53                   	push   ebx
c000c25c:	e8 d9 7a 00 00       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c261:	83 c4 20             	add    esp,0x20
c000c264:	09 f0                	or     eax,esi
c000c266:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c26a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26e:	25 ff 0f 00 00       	and    eax,0xfff
c000c273:	89 c6                	mov    esi,eax
c000c275:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	6a 02                	push   0x2
c000c280:	e8 e8 71 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c28c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	6a 01                	push   0x1
c000c297:	6a 02                	push   0x2
c000c299:	50                   	push   eax
c000c29a:	52                   	push   edx
c000c29b:	53                   	push   ebx
c000c29c:	e8 99 7a 00 00       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2a1:	83 c4 20             	add    esp,0x20
c000c2a4:	09 f0                	or     eax,esi
c000c2a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2aa:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2af:	85 c0                	test   eax,eax
c000c2b1:	75 11                	jne    c000c2c4 <findRSDT(unsigned char*)+0x11c>
c000c2b3:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2c2:	eb 24                	jmp    c000c2e8 <findRSDT(unsigned char*)+0x140>
c000c2c4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2c9:	83 f8 02             	cmp    eax,0x2
c000c2cc:	75 12                	jne    c000c2e0 <findRSDT(unsigned char*)+0x138>
c000c2ce:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2d5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2d9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2dd:	eb 09                	jmp    c000c2e8 <findRSDT(unsigned char*)+0x140>
c000c2df:	90                   	nop
c000c2e0:	b8 00 00 00 00       	mov    eax,0x0
c000c2e5:	eb 05                	jmp    c000c2ec <findRSDT(unsigned char*)+0x144>
c000c2e7:	90                   	nop
c000c2e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2ec:	83 c4 50             	add    esp,0x50
c000c2ef:	5b                   	pop    ebx
c000c2f0:	5e                   	pop    esi
c000c2f1:	5f                   	pop    edi
c000c2f2:	c3                   	ret    
c000c2f3:	90                   	nop

c000c2f4 <findDataTable(unsigned char*, char*)>:
c000c2f4:	83 ec 1c             	sub    esp,0x1c
c000c2f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2fc:	75 0a                	jne    c000c308 <findDataTable(unsigned char*, char*)+0x14>
c000c2fe:	b8 00 00 00 00       	mov    eax,0x0
c000c303:	eb 5f                	jmp    c000c364 <findDataTable(unsigned char*, char*)+0x70>
c000c305:	8d 76 00             	lea    esi,[esi+0x0]
c000c308:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c310:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c315:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c319:	7d 41                	jge    c000c35c <findDataTable(unsigned char*, char*)+0x68>
c000c31b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c31f:	c1 e0 03             	shl    eax,0x3
c000c322:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c327:	83 ec 04             	sub    esp,0x4
c000c32a:	6a 04                	push   0x4
c000c32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c330:	50                   	push   eax
c000c331:	e8 4a 40 ff ff       	call   c0000380 <memcmp>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 94 c0             	sete   al
c000c33e:	0f b6 c0             	movzx  eax,al
c000c341:	85 c0                	test   eax,eax
c000c343:	74 0f                	je     c000c354 <findDataTable(unsigned char*, char*)+0x60>
c000c345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c349:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c350:	eb 12                	jmp    c000c364 <findDataTable(unsigned char*, char*)+0x70>
c000c352:	66 90                	xchg   ax,ax
c000c354:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c359:	eb b5                	jmp    c000c310 <findDataTable(unsigned char*, char*)+0x1c>
c000c35b:	90                   	nop
c000c35c:	b8 00 00 00 00       	mov    eax,0x0
c000c361:	8d 76 00             	lea    esi,[esi+0x0]
c000c364:	83 c4 1c             	add    esp,0x1c
c000c367:	c3                   	ret    

c000c368 <scanMADT()>:
c000c368:	53                   	push   ebx
c000c369:	83 ec 38             	sub    esp,0x38
c000c36c:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c376:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c380:	e8 13 d4 00 00       	call   c0019798 <HalFindRSDP()>
c000c385:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c38a:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c38f:	85 c0                	test   eax,eax
c000c391:	0f 84 11 04 00 00    	je     c000c7a8 <scanMADT()+0x440>
c000c397:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	50                   	push   eax
c000c3a0:	e8 03 fe ff ff       	call   c000c1a8 <findRSDT(unsigned char*)>
c000c3a5:	83 c4 10             	add    esp,0x10
c000c3a8:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3ad:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3b2:	85 c0                	test   eax,eax
c000c3b4:	0f 84 f2 03 00 00    	je     c000c7ac <scanMADT()+0x444>
c000c3ba:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3bf:	83 ec 0c             	sub    esp,0xc
c000c3c2:	50                   	push   eax
c000c3c3:	e8 80 fb ff ff       	call   c000bf48 <loadACPITables(unsigned char*)>
c000c3c8:	83 c4 10             	add    esp,0x10
c000c3cb:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3d0:	83 ec 08             	sub    esp,0x8
c000c3d3:	68 2c 39 02 c0       	push   0xc002392c
c000c3d8:	50                   	push   eax
c000c3d9:	e8 16 ff ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000c3de:	83 c4 10             	add    esp,0x10
c000c3e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c3ea:	0f 84 c0 03 00 00    	je     c000c7b0 <scanMADT()+0x448>
c000c3f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c3f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3ff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c403:	0f 87 af 03 00 00    	ja     c000c7b8 <scanMADT()+0x450>
c000c409:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c411:	0f 87 a1 03 00 00    	ja     c000c7b8 <scanMADT()+0x450>
c000c417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c41b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c423:	8d 50 01             	lea    edx,[eax+0x1]
c000c426:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c42a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c42e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c432:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c43a:	8d 50 01             	lea    edx,[eax+0x1]
c000c43d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c445:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c449:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c44d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c452:	83 f8 02             	cmp    eax,0x2
c000c455:	0f 86 59 03 00 00    	jbe    c000c7b4 <scanMADT()+0x44c>
c000c45b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c460:	85 c0                	test   eax,eax
c000c462:	75 58                	jne    c000c4bc <scanMADT()+0x154>
c000c464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c468:	8d 50 01             	lea    edx,[eax+0x1]
c000c46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c46f:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c475:	0f b6 d2             	movzx  edx,dl
c000c478:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c47c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c480:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c48a:	8d 50 01             	lea    edx,[eax+0x1]
c000c48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c491:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c497:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c49a:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4a0:	0f b6 d2             	movzx  edx,dl
c000c4a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4ab:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c4b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4b6:	e9 d9 02 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c4bb:	90                   	nop
c000c4bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4c1:	83 f8 01             	cmp    eax,0x1
c000c4c4:	0f 85 1a 01 00 00    	jne    c000c5e4 <scanMADT()+0x27c>
c000c4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4ce:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d5:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c4db:	0f b6 d2             	movzx  edx,dl
c000c4de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4e2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4e6:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c4ec:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c4f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4f9:	01 d0                	add    eax,edx
c000c4fb:	83 c0 2c             	add    eax,0x2c
c000c4fe:	8a 00                	mov    al,BYTE PTR [eax]
c000c500:	0f b6 d0             	movzx  edx,al
c000c503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c507:	8d 48 01             	lea    ecx,[eax+0x1]
c000c50a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c50e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c512:	0f b6 c0             	movzx  eax,al
c000c515:	c1 e0 08             	shl    eax,0x8
c000c518:	89 d1                	mov    ecx,edx
c000c51a:	09 c1                	or     ecx,eax
c000c51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c520:	8d 50 02             	lea    edx,[eax+0x2]
c000c523:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c527:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c52b:	0f b6 c0             	movzx  eax,al
c000c52e:	c1 e0 10             	shl    eax,0x10
c000c531:	09 c1                	or     ecx,eax
c000c533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c537:	8d 50 03             	lea    edx,[eax+0x3]
c000c53a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c53e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c542:	0f b6 c0             	movzx  eax,al
c000c545:	c1 e0 18             	shl    eax,0x18
c000c548:	09 c1                	or     ecx,eax
c000c54a:	89 ca                	mov    edx,ecx
c000c54c:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c551:	0f b6 c0             	movzx  eax,al
c000c554:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c55b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c560:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c568:	01 d0                	add    eax,edx
c000c56a:	83 c0 2c             	add    eax,0x2c
c000c56d:	8a 00                	mov    al,BYTE PTR [eax]
c000c56f:	0f b6 d0             	movzx  edx,al
c000c572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c576:	8d 48 01             	lea    ecx,[eax+0x1]
c000c579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c57d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c581:	0f b6 c0             	movzx  eax,al
c000c584:	c1 e0 08             	shl    eax,0x8
c000c587:	89 d1                	mov    ecx,edx
c000c589:	09 c1                	or     ecx,eax
c000c58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c58f:	8d 50 02             	lea    edx,[eax+0x2]
c000c592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c596:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59a:	0f b6 c0             	movzx  eax,al
c000c59d:	c1 e0 10             	shl    eax,0x10
c000c5a0:	09 c1                	or     ecx,eax
c000c5a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a6:	8d 50 03             	lea    edx,[eax+0x3]
c000c5a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5b1:	0f b6 c0             	movzx  eax,al
c000c5b4:	c1 e0 18             	shl    eax,0x18
c000c5b7:	09 c1                	or     ecx,eax
c000c5b9:	89 ca                	mov    edx,ecx
c000c5bb:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5c0:	0f b6 c0             	movzx  eax,al
c000c5c3:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c5ca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5cf:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5d4:	83 c0 01             	add    eax,0x1
c000c5d7:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c5dc:	e9 b3 01 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c5e9:	83 f8 02             	cmp    eax,0x2
c000c5ec:	0f 85 ea 00 00 00    	jne    c000c6dc <scanMADT()+0x374>
c000c5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f6:	8d 50 01             	lea    edx,[eax+0x1]
c000c5f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c601:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c605:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60d:	8d 50 01             	lea    edx,[eax+0x1]
c000c610:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c614:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c618:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c61c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c620:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c628:	01 d0                	add    eax,edx
c000c62a:	83 c0 2c             	add    eax,0x2c
c000c62d:	8a 00                	mov    al,BYTE PTR [eax]
c000c62f:	0f b6 d0             	movzx  edx,al
c000c632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c636:	8d 48 01             	lea    ecx,[eax+0x1]
c000c639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c63d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c641:	0f b6 c0             	movzx  eax,al
c000c644:	c1 e0 08             	shl    eax,0x8
c000c647:	89 d1                	mov    ecx,edx
c000c649:	09 c1                	or     ecx,eax
c000c64b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c64f:	8d 50 02             	lea    edx,[eax+0x2]
c000c652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c656:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c65a:	0f b6 c0             	movzx  eax,al
c000c65d:	c1 e0 10             	shl    eax,0x10
c000c660:	09 c1                	or     ecx,eax
c000c662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c666:	8d 50 03             	lea    edx,[eax+0x3]
c000c669:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c66d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c671:	0f b6 c0             	movzx  eax,al
c000c674:	c1 e0 18             	shl    eax,0x18
c000c677:	09 c8                	or     eax,ecx
c000c679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c67d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c682:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c68a:	01 d0                	add    eax,edx
c000c68c:	83 c0 2c             	add    eax,0x2c
c000c68f:	8a 00                	mov    al,BYTE PTR [eax]
c000c691:	0f b6 c0             	movzx  eax,al
c000c694:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c698:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c69b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c69f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c6a3:	0f b6 d2             	movzx  edx,dl
c000c6a6:	c1 e2 08             	shl    edx,0x8
c000c6a9:	09 d0                	or     eax,edx
c000c6ab:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6b0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6b5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6be:	88 90 c8 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda038],dl
c000c6c4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c6c9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c6ce:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c6d6:	e9 b9 00 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c6db:	90                   	nop
c000c6dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c6e1:	83 f8 04             	cmp    eax,0x4
c000c6e4:	0f 85 9a 00 00 00    	jne    c000c784 <scanMADT()+0x41c>
c000c6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ee:	8d 50 01             	lea    edx,[eax+0x1]
c000c6f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6fd:	0f b6 c0             	movzx  eax,al
c000c700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	01 d0                	add    eax,edx
c000c70e:	83 c0 2c             	add    eax,0x2c
c000c711:	8a 00                	mov    al,BYTE PTR [eax]
c000c713:	0f b6 d0             	movzx  edx,al
c000c716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c71a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c71d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c721:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c725:	0f b6 c0             	movzx  eax,al
c000c728:	c1 e0 08             	shl    eax,0x8
c000c72b:	09 d0                	or     eax,edx
c000c72d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c731:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	8d 50 01             	lea    edx,[eax+0x1]
c000c73d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c741:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c745:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c749:	0f b6 c0             	movzx  eax,al
c000c74c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c754:	c1 e0 08             	shl    eax,0x8
c000c757:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c75b:	89 c1                	mov    ecx,eax
c000c75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c761:	c1 e0 18             	shl    eax,0x18
c000c764:	89 c3                	mov    ebx,eax
c000c766:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c76b:	8d 50 01             	lea    edx,[eax+0x1]
c000c76e:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c774:	09 d9                	or     ecx,ebx
c000c776:	89 ca                	mov    edx,ecx
c000c778:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c77f:	eb 13                	jmp    c000c794 <scanMADT()+0x42c>
c000c781:	8d 76 00             	lea    esi,[esi+0x0]
c000c784:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c789:	83 f8 05             	cmp    eax,0x5
c000c78c:	75 06                	jne    c000c794 <scanMADT()+0x42c>
c000c78e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c793:	90                   	nop
c000c794:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c799:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c79d:	01 d0                	add    eax,edx
c000c79f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7a3:	e9 50 fc ff ff       	jmp    c000c3f8 <scanMADT()+0x90>
c000c7a8:	90                   	nop
c000c7a9:	eb 0d                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7ab:	90                   	nop
c000c7ac:	90                   	nop
c000c7ad:	eb 09                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7af:	90                   	nop
c000c7b0:	90                   	nop
c000c7b1:	eb 05                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7b3:	90                   	nop
c000c7b4:	90                   	nop
c000c7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7b8:	83 c4 38             	add    esp,0x38
c000c7bb:	5b                   	pop    ebx
c000c7bc:	c3                   	ret    
c000c7bd:	90                   	nop
c000c7be:	66 90                	xchg   ax,ax

c000c7c0 <ACPI::ACPI()>:
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c7:	83 ec 08             	sub    esp,0x8
c000c7ca:	68 31 39 02 c0       	push   0xc0023931
c000c7cf:	50                   	push   eax
c000c7d0:	e8 89 d3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	ba 2c 3b 02 c0       	mov    edx,0xc0023b2c
c000c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e1:	89 10                	mov    DWORD PTR [eax],edx
c000c7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c800:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c80a:	e8 59 fb ff ff       	call   c000c368 <scanMADT()>
c000c80f:	90                   	nop
c000c810:	83 c4 0c             	add    esp,0xc
c000c813:	c3                   	ret    

c000c814 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c814:	83 ec 2c             	sub    esp,0x2c
c000c817:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c81b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c81f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c823:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c827:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c82c:	88 d0                	mov    al,dl
c000c82e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c832:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c837:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c83f:	90                   	nop
c000c840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c844:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c84a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c84e:	0f 8d b0 00 00 00    	jge    c000c904 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c854:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c858:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c85c:	83 c2 2a             	add    edx,0x2a
c000c85f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c863:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c868:	0f b7 c0             	movzx  eax,ax
c000c86b:	39 c2                	cmp    edx,eax
c000c86d:	0f 85 85 00 00 00    	jne    c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c87b:	83 c2 2a             	add    edx,0x2a
c000c87e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c882:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c887:	0f b6 c0             	movzx  eax,al
c000c88a:	39 c2                	cmp    edx,eax
c000c88c:	75 6a                	jne    c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c88e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c893:	85 c0                	test   eax,eax
c000c895:	74 3d                	je     c000c8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c897:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c89b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c89f:	83 c2 2a             	add    edx,0x2a
c000c8a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8ad:	39 c2                	cmp    edx,eax
c000c8af:	74 13                	je     c000c8c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8b1:	83 ec 0c             	sub    esp,0xc
c000c8b4:	68 ac 3a 02 c0       	push   0xc0023aac
c000c8b9:	e8 20 37 00 00       	call   c000ffde <KePanic(char const*)>
c000c8be:	83 c4 10             	add    esp,0x10
c000c8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c8c4:	83 ec 0c             	sub    esp,0xc
c000c8c7:	68 36 39 02 c0       	push   0xc0023936
c000c8cc:	e8 0d 37 00 00       	call   c000ffde <KePanic(char const*)>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c8d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8e0:	83 c2 2a             	add    edx,0x2a
c000c8e3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c8e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c8e9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c8ec:	89 01                	mov    DWORD PTR [ecx],eax
c000c8ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c8f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c8f6:	66 90                	xchg   ax,ax
c000c8f8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c8fd:	e9 3e ff ff ff       	jmp    c000c840 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c902:	66 90                	xchg   ax,ax
c000c904:	90                   	nop
c000c905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c909:	83 c4 2c             	add    esp,0x2c
c000c90c:	c2 04 00             	ret    0x4
c000c90f:	90                   	nop

c000c910 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c910:	83 ec 1c             	sub    esp,0x1c
c000c913:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c917:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c91b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c91f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c924:	88 c8                	mov    al,cl
c000c926:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c92a:	88 d0                	mov    al,dl
c000c92c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c934:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c941:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c945:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c957:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c95e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c967:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c96d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c971:	83 c0 01             	add    eax,0x1
c000c974:	88 c1                	mov    cl,al
c000c976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97a:	83 c2 2a             	add    edx,0x2a
c000c97d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c985:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c992:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c996:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9a4:	8d 50 01             	lea    edx,[eax+0x1]
c000c9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ab:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9bb:	3d 00 02 00 00       	cmp    eax,0x200
c000c9c0:	75 12                	jne    c000c9d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c9c2:	83 ec 0c             	sub    esp,0xc
c000c9c5:	68 45 39 02 c0       	push   0xc0023945
c000c9ca:	e8 0f 36 00 00       	call   c000ffde <KePanic(char const*)>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	66 90                	xchg   ax,ax
c000c9d4:	90                   	nop
c000c9d5:	83 c4 1c             	add    esp,0x1c
c000c9d8:	c3                   	ret    
c000c9d9:	90                   	nop
c000c9da:	66 90                	xchg   ax,ax

c000c9dc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c9dc:	b8 00 00 00 00       	mov    eax,0x0
c000c9e1:	c3                   	ret    
c000c9e2:	66 90                	xchg   ax,ax

c000c9e4 <ACPI::detectPCI()>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 28             	sub    esp,0x28
c000c9e8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c9ed:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c9f2:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c9f7:	83 ec 08             	sub    esp,0x8
c000c9fa:	68 62 39 02 c0       	push   0xc0023962
c000c9ff:	50                   	push   eax
c000ca00:	e8 ef f8 ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca11:	74 0d                	je     c000ca20 <ACPI::detectPCI()+0x3c>
c000ca13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca18:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca20:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca2c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca2e:	0f b6 c0             	movzx  eax,al
c000ca31:	83 f8 01             	cmp    eax,0x1
c000ca34:	75 0e                	jne    c000ca44 <ACPI::detectPCI()+0x60>
c000ca36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca40:	eb 2e                	jmp    c000ca70 <ACPI::detectPCI()+0x8c>
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca48:	8a 00                	mov    al,BYTE PTR [eax]
c000ca4a:	0f b6 c0             	movzx  eax,al
c000ca4d:	83 f8 02             	cmp    eax,0x2
c000ca50:	75 1e                	jne    c000ca70 <ACPI::detectPCI()+0x8c>
c000ca52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca5c:	85 c0                	test   eax,eax
c000ca5e:	74 10                	je     c000ca70 <ACPI::detectPCI()+0x8c>
c000ca60:	83 ec 0c             	sub    esp,0xc
c000ca63:	68 dc 3a 02 c0       	push   0xc0023adc
c000ca68:	e8 71 35 00 00       	call   c000ffde <KePanic(char const*)>
c000ca6d:	83 c4 10             	add    esp,0x10
c000ca70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ca74:	83 f0 01             	xor    eax,0x1
c000ca77:	0f b6 c0             	movzx  eax,al
c000ca7a:	85 c0                	test   eax,eax
c000ca7c:	74 46                	je     c000cac4 <ACPI::detectPCI()+0xe0>
c000ca7e:	e8 ad 36 ff ff       	call   c0000130 <manualPCIProbe>
c000ca83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca8c:	75 0e                	jne    c000ca9c <ACPI::detectPCI()+0xb8>
c000ca8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca93:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca98:	eb 2a                	jmp    c000cac4 <ACPI::detectPCI()+0xe0>
c000ca9a:	66 90                	xchg   ax,ax
c000ca9c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000caa1:	75 21                	jne    c000cac4 <ACPI::detectPCI()+0xe0>
c000caa3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caa8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caad:	85 c0                	test   eax,eax
c000caaf:	74 13                	je     c000cac4 <ACPI::detectPCI()+0xe0>
c000cab1:	83 ec 0c             	sub    esp,0xc
c000cab4:	68 dc 3a 02 c0       	push   0xc0023adc
c000cab9:	e8 20 35 00 00       	call   c000ffde <KePanic(char const*)>
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	8d 76 00             	lea    esi,[esi+0x0]
c000cac4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cac9:	85 c0                	test   eax,eax
c000cacb:	0f 84 87 00 00 00    	je     c000cb58 <ACPI::detectPCI()+0x174>
c000cad1:	83 ec 0c             	sub    esp,0xc
c000cad4:	68 67 39 02 c0       	push   0xc0023967
c000cad9:	e8 81 07 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cade:	83 c4 10             	add    esp,0x10
c000cae1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cae9:	83 ec 0c             	sub    esp,0xc
c000caec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000caf0:	e8 a2 31 00 00       	call   c000fc97 <malloc>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	89 c3                	mov    ebx,eax
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	53                   	push   ebx
c000cafe:	e8 3d 0a 01 00       	call   c001d540 <PCI::PCI()>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb0e:	83 ec 08             	sub    esp,0x8
c000cb11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb15:	50                   	push   eax
c000cb16:	e8 e1 ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb22:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb24:	83 c0 08             	add    eax,0x8
c000cb27:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb29:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb2e:	85 d2                	test   edx,edx
c000cb30:	74 0a                	je     c000cb3c <ACPI::detectPCI()+0x158>
c000cb32:	ba 01 00 00 00       	mov    edx,0x1
c000cb37:	eb 0b                	jmp    c000cb44 <ACPI::detectPCI()+0x160>
c000cb39:	8d 76 00             	lea    esi,[esi+0x0]
c000cb3c:	ba 02 00 00 00       	mov    edx,0x2
c000cb41:	8d 76 00             	lea    esi,[esi+0x0]
c000cb44:	6a 00                	push   0x0
c000cb46:	6a 00                	push   0x0
c000cb48:	52                   	push   edx
c000cb49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb4d:	ff d0                	call   eax
c000cb4f:	83 c4 10             	add    esp,0x10
c000cb52:	e9 91 00 00 00       	jmp    c000cbe8 <ACPI::detectPCI()+0x204>
c000cb57:	90                   	nop
c000cb58:	83 ec 0c             	sub    esp,0xc
c000cb5b:	68 7f 39 02 c0       	push   0xc002397f
c000cb60:	e8 fa 06 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cb6f:	83 ec 0c             	sub    esp,0xc
c000cb72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb76:	e8 1c 31 00 00       	call   c000fc97 <malloc>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	89 c3                	mov    ebx,eax
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	53                   	push   ebx
c000cb84:	e8 bd 15 01 00       	call   c001e146 <IDE::IDE()>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb94:	83 ec 08             	sub    esp,0x8
c000cb97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9b:	50                   	push   eax
c000cb9c:	e8 5b ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cba8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cbb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cbbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd2:	83 c0 08             	add    eax,0x8
c000cbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd7:	6a 00                	push   0x0
c000cbd9:	6a 00                	push   0x0
c000cbdb:	6a 00                	push   0x0
c000cbdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe1:	ff d0                	call   eax
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	66 90                	xchg   ax,ax
c000cbe8:	90                   	nop
c000cbe9:	83 c4 28             	add    esp,0x28
c000cbec:	5b                   	pop    ebx
c000cbed:	c3                   	ret    
c000cbee:	66 90                	xchg   ax,ax

c000cbf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	83 ec 0c             	sub    esp,0xc
c000cbf6:	68 94 39 02 c0       	push   0xc0023994
c000cbfb:	e8 de 33 00 00       	call   c000ffde <KePanic(char const*)>
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	90                   	nop
c000cc04:	83 c4 0c             	add    esp,0xc
c000cc07:	c3                   	ret    

c000cc08 <ACPI::open(int, int, void*)>:
c000cc08:	57                   	push   edi
c000cc09:	56                   	push   esi
c000cc0a:	53                   	push   ebx
c000cc0b:	81 ec 70 01 00 00    	sub    esp,0x170
c000cc11:	83 ec 0c             	sub    esp,0xc
c000cc14:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cc1b:	e8 c4 fd ff ff       	call   c000c9e4 <ACPI::detectPCI()>
c000cc20:	83 c4 10             	add    esp,0x10
c000cc23:	83 ec 0c             	sub    esp,0xc
c000cc26:	68 04 3b 02 c0       	push   0xc0023b04
c000cc2b:	e8 2f 06 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc38:	8a 00                	mov    al,BYTE PTR [eax]
c000cc3a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cc41:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc49:	83 f8 01             	cmp    eax,0x1
c000cc4c:	75 12                	jne    c000cc60 <ACPI::open(int, int, void*)+0x58>
c000cc4e:	83 ec 0c             	sub    esp,0xc
c000cc51:	68 a5 39 02 c0       	push   0xc00239a5
c000cc56:	e8 d6 8c 00 00       	call   c0015931 <Thr::loadKernelSymbolTable(char const*)>
c000cc5b:	83 c4 10             	add    esp,0x10
c000cc5e:	eb 34                	jmp    c000cc94 <ACPI::open(int, int, void*)+0x8c>
c000cc60:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc68:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc6d:	75 15                	jne    c000cc84 <ACPI::open(int, int, void*)+0x7c>
c000cc6f:	83 ec 0c             	sub    esp,0xc
c000cc72:	68 c3 39 02 c0       	push   0xc00239c3
c000cc77:	e8 b5 8c 00 00       	call   c0015931 <Thr::loadKernelSymbolTable(char const*)>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	eb 13                	jmp    c000cc94 <ACPI::open(int, int, void*)+0x8c>
c000cc81:	8d 76 00             	lea    esi,[esi+0x0]
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	68 e1 39 02 c0       	push   0xc00239e1
c000cc8c:	e8 4d 33 00 00       	call   c000ffde <KePanic(char const*)>
c000cc91:	83 c4 10             	add    esp,0x10
c000cc94:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cc9c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cca7:	83 ec 0c             	sub    esp,0xc
c000ccaa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ccb1:	e8 e1 2f 00 00       	call   c000fc97 <malloc>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 c3                	mov    ebx,eax
c000ccbb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ccc0:	83 ec 04             	sub    esp,0x4
c000ccc3:	50                   	push   eax
c000ccc4:	68 fb 39 02 c0       	push   0xc00239fb
c000ccc9:	53                   	push   ebx
c000ccca:	e8 63 b4 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ccd9:	83 ec 08             	sub    esp,0x8
c000ccdc:	6a 01                	push   0x1
c000ccde:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cce5:	e8 66 b4 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ccea:	83 c4 10             	add    esp,0x10
c000cced:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ccf4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ccfc:	75 16                	jne    c000cd14 <ACPI::open(int, int, void*)+0x10c>
c000ccfe:	83 ec 0c             	sub    esp,0xc
c000cd01:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd08:	e8 a1 b4 ff ff       	call   c00081ae <File::close()>
c000cd0d:	83 c4 10             	add    esp,0x10
c000cd10:	eb 0a                	jmp    c000cd1c <ACPI::open(int, int, void*)+0x114>
c000cd12:	66 90                	xchg   ax,ax
c000cd14:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cd1c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cd24:	74 1e                	je     c000cd44 <ACPI::open(int, int, void*)+0x13c>
c000cd26:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cd2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd2f:	83 c0 08             	add    eax,0x8
c000cd32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd3e:	ff d0                	call   eax
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	90                   	nop
c000cd44:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cd4b:	83 f0 01             	xor    eax,0x1
c000cd4e:	0f b6 c0             	movzx  eax,al
c000cd51:	85 c0                	test   eax,eax
c000cd53:	74 2f                	je     c000cd84 <ACPI::open(int, int, void*)+0x17c>
c000cd55:	83 ec 0c             	sub    esp,0xc
c000cd58:	68 19 3a 02 c0       	push   0xc0023a19
c000cd5d:	e8 fd 04 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cd7a:	e8 1d 69 00 00       	call   c001369c <Virt::setupPageSwapping(int)>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	66 90                	xchg   ax,ax
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	68 34 3a 02 c0       	push   0xc0023a34
c000cd8c:	e8 ce 04 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000cd9b:	83 ec 08             	sub    esp,0x8
c000cd9e:	6a 13                	push   0x13
c000cda0:	50                   	push   eax
c000cda1:	e8 84 cf ff ff       	call   c0009d2a <getDevicesOfType(DeviceType)>
c000cda6:	83 c4 0c             	add    esp,0xc
c000cda9:	8d 76 00             	lea    esi,[esi+0x0]
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdb6:	50                   	push   eax
c000cdb7:	e8 50 50 01 00       	call   c0021e0c <LinkedList<Device>::isEmpty()>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	83 f0 01             	xor    eax,0x1
c000cdc2:	0f b6 c0             	movzx  eax,al
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	0f 84 47 01 00 00    	je     c000cf14 <ACPI::open(int, int, void*)+0x30c>
c000cdcd:	83 ec 0c             	sub    esp,0xc
c000cdd0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdd7:	50                   	push   eax
c000cdd8:	e8 4b 50 01 00       	call   c0021e28 <LinkedList<Device>::getFirstElement()>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000cde7:	83 ec 0c             	sub    esp,0xc
c000cdea:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdf1:	50                   	push   eax
c000cdf2:	e8 39 50 01 00       	call   c0021e30 <LinkedList<Device>::removeFirst()>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce01:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ce08:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ce0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ce13:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ce19:	ba 09 00 00 00       	mov    edx,0x9
c000ce1e:	fc                   	cld    
c000ce1f:	89 c7                	mov    edi,eax
c000ce21:	89 de                	mov    esi,ebx
c000ce23:	89 d1                	mov    ecx,edx
c000ce25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce27:	83 ec 08             	sub    esp,0x8
c000ce2a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ce2e:	50                   	push   eax
c000ce2f:	83 ec 24             	sub    esp,0x24
c000ce32:	89 e0                	mov    eax,esp
c000ce34:	89 c3                	mov    ebx,eax
c000ce36:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ce3a:	ba 09 00 00 00       	mov    edx,0x9
c000ce3f:	89 df                	mov    edi,ebx
c000ce41:	89 c6                	mov    esi,eax
c000ce43:	89 d1                	mov    ecx,edx
c000ce45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce47:	e8 de 0b 01 00       	call   c001da2a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce4c:	83 c4 30             	add    esp,0x30
c000ce4f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ce56:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ce5e:	0f 84 48 ff ff ff    	je     c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000ce64:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ce6f:	83 ec 0c             	sub    esp,0xc
c000ce72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ce79:	e8 19 2e 00 00       	call   c000fc97 <malloc>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	89 c3                	mov    ebx,eax
c000ce83:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce88:	83 ec 04             	sub    esp,0x4
c000ce8b:	50                   	push   eax
c000ce8c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ce93:	53                   	push   ebx
c000ce94:	e8 99 b2 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000ce99:	83 c4 10             	add    esp,0x10
c000ce9c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cead:	e8 62 b5 ff ff       	call   c0008414 <File::exists()>
c000ceb2:	83 c4 10             	add    esp,0x10
c000ceb5:	0f b6 c0             	movzx  eax,al
c000ceb8:	85 c0                	test   eax,eax
c000ceba:	74 28                	je     c000cee4 <ACPI::open(int, int, void*)+0x2dc>
c000cebc:	83 ec 08             	sub    esp,0x8
c000cebf:	6a 01                	push   0x1
c000cec1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cec8:	e8 de 94 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ceda:	50                   	push   eax
c000cedb:	e8 1d 97 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	90                   	nop
c000cee4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ceec:	0f 84 ba fe ff ff    	je     c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000cef2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cef9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefb:	83 c0 08             	add    eax,0x8
c000cefe:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf00:	83 ec 0c             	sub    esp,0xc
c000cf03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf0a:	ff d0                	call   eax
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	e9 98 fe ff ff       	jmp    c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000cf14:	83 ec 0c             	sub    esp,0xc
c000cf17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cf1e:	50                   	push   eax
c000cf1f:	e8 e4 4e 01 00       	call   c0021e08 <LinkedList<Device>::~LinkedList()>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000cf2d:	83 ec 08             	sub    esp,0x8
c000cf30:	6a 01                	push   0x1
c000cf32:	68 4e 3a 02 c0       	push   0xc0023a4e
c000cf37:	e8 6f 94 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c000cf3c:	83 c4 10             	add    esp,0x10
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	53                   	push   ebx
c000cf43:	50                   	push   eax
c000cf44:	e8 b4 96 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf51:	85 c0                	test   eax,eax
c000cf53:	0f 84 27 01 00 00    	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000cf59:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf5e:	85 c0                	test   eax,eax
c000cf60:	0f 84 1a 01 00 00    	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	68 6b 3a 02 c0       	push   0xc0023a6b
c000cf6e:	e8 ec 02 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cf81:	83 ec 0c             	sub    esp,0xc
c000cf84:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cf8b:	e8 07 2d 00 00       	call   c000fc97 <malloc>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	89 c3                	mov    ebx,eax
c000cf95:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cf9a:	83 ec 04             	sub    esp,0x4
c000cf9d:	50                   	push   eax
c000cf9e:	68 88 3a 02 c0       	push   0xc0023a88
c000cfa3:	53                   	push   ebx
c000cfa4:	e8 89 b1 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000cfb3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cfbb:	74 1f                	je     c000cfdc <ACPI::open(int, int, void*)+0x3d4>
c000cfbd:	83 ec 0c             	sub    esp,0xc
c000cfc0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000cfc7:	e8 48 b4 ff ff       	call   c0008414 <File::exists()>
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	0f b6 c0             	movzx  eax,al
c000cfd2:	85 c0                	test   eax,eax
c000cfd4:	74 06                	je     c000cfdc <ACPI::open(int, int, void*)+0x3d4>
c000cfd6:	b0 01                	mov    al,0x1
c000cfd8:	eb 06                	jmp    c000cfe0 <ACPI::open(int, int, void*)+0x3d8>
c000cfda:	66 90                	xchg   ax,ax
c000cfdc:	b0 00                	mov    al,0x0
c000cfde:	66 90                	xchg   ax,ax
c000cfe0:	0f b6 c0             	movzx  eax,al
c000cfe3:	85 c0                	test   eax,eax
c000cfe5:	74 25                	je     c000d00c <ACPI::open(int, int, void*)+0x404>
c000cfe7:	83 ec 08             	sub    esp,0x8
c000cfea:	6a 01                	push   0x1
c000cfec:	68 88 3a 02 c0       	push   0xc0023a88
c000cff1:	e8 b5 93 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	83 ec 08             	sub    esp,0x8
c000cffc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d003:	50                   	push   eax
c000d004:	e8 f4 95 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d014:	74 2a                	je     c000d040 <ACPI::open(int, int, void*)+0x438>
c000d016:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d01e:	74 20                	je     c000d040 <ACPI::open(int, int, void*)+0x438>
c000d020:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d027:	8b 00                	mov    eax,DWORD PTR [eax]
c000d029:	83 c0 08             	add    eax,0x8
c000d02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d02e:	83 ec 0c             	sub    esp,0xc
c000d031:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d038:	ff d0                	call   eax
c000d03a:	83 c4 10             	add    esp,0x10
c000d03d:	8d 76 00             	lea    esi,[esi+0x0]
c000d040:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d045:	83 ec 08             	sub    esp,0x8
c000d048:	68 a5 3a 02 c0       	push   0xc0023aa5
c000d04d:	50                   	push   eax
c000d04e:	e8 a1 f2 ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d05d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d065:	74 19                	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000d067:	83 ec 08             	sub    esp,0x8
c000d06a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d071:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d078:	e8 73 fb ff ff       	call   c000cbf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d07d:	83 c4 10             	add    esp,0x10
c000d080:	b8 00 00 00 00       	mov    eax,0x0
c000d085:	81 c4 70 01 00 00    	add    esp,0x170
c000d08b:	5b                   	pop    ebx
c000d08c:	5e                   	pop    esi
c000d08d:	5f                   	pop    edi
c000d08e:	c3                   	ret    
c000d08f:	90                   	nop

c000d090 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d090:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d096:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d09d:	89 c2                	mov    edx,eax
c000d09f:	c1 fa 1f             	sar    edx,0x1f
c000d0a2:	83 ec 04             	sub    esp,0x4
c000d0a5:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d0a9:	51                   	push   ecx
c000d0aa:	52                   	push   edx
c000d0ab:	50                   	push   eax
c000d0ac:	e8 db 29 00 00       	call   c000fa8c <KeItoa(long long, char*)>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	83 ec 08             	sub    esp,0x8
c000d0b7:	68 50 3b 02 c0       	push   0xc0023b50
c000d0bc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0c0:	50                   	push   eax
c000d0c1:	e8 7a 35 ff ff       	call   c0000640 <strcpy>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	83 ec 08             	sub    esp,0x8
c000d0cc:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d0d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d7:	50                   	push   eax
c000d0d8:	e8 63 37 ff ff       	call   c0000840 <strcat>
c000d0dd:	83 c4 10             	add    esp,0x10
c000d0e0:	83 ec 08             	sub    esp,0x8
c000d0e3:	68 5e 3b 02 c0       	push   0xc0023b5e
c000d0e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0ec:	50                   	push   eax
c000d0ed:	e8 4e 37 ff ff       	call   c0000840 <strcat>
c000d0f2:	83 c4 10             	add    esp,0x10
c000d0f5:	83 ec 08             	sub    esp,0x8
c000d0f8:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0ff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d103:	50                   	push   eax
c000d104:	e8 37 37 ff ff       	call   c0000840 <strcat>
c000d109:	83 c4 10             	add    esp,0x10
c000d10c:	83 ec 08             	sub    esp,0x8
c000d10f:	68 61 3b 02 c0       	push   0xc0023b61
c000d114:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d118:	50                   	push   eax
c000d119:	e8 22 37 ff ff       	call   c0000840 <strcat>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	83 ec 08             	sub    esp,0x8
c000d124:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d12b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d12f:	50                   	push   eax
c000d130:	e8 0b 37 ff ff       	call   c0000840 <strcat>
c000d135:	83 c4 10             	add    esp,0x10
c000d138:	83 ec 08             	sub    esp,0x8
c000d13b:	68 61 3b 02 c0       	push   0xc0023b61
c000d140:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d144:	50                   	push   eax
c000d145:	e8 f6 36 ff ff       	call   c0000840 <strcat>
c000d14a:	83 c4 10             	add    esp,0x10
c000d14d:	83 ec 08             	sub    esp,0x8
c000d150:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d154:	50                   	push   eax
c000d155:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d159:	50                   	push   eax
c000d15a:	e8 e1 36 ff ff       	call   c0000840 <strcat>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	83 ec 0c             	sub    esp,0xc
c000d165:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d169:	50                   	push   eax
c000d16a:	e8 6f 2e 00 00       	call   c000ffde <KePanic(char const*)>
c000d16f:	83 c4 10             	add    esp,0x10
c000d172:	90                   	nop
c000d173:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d179:	c3                   	ret    

c000d17a <KeInitialiseAtexit()>:
c000d17a:	83 ec 10             	sub    esp,0x10
c000d17d:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d187:	6a 60                	push   0x60
c000d189:	6a 00                	push   0x0
c000d18b:	68 60 c0 02 c0       	push   0xc002c060
c000d190:	e8 5b 33 ff ff       	call   c00004f0 <memset>
c000d195:	83 c4 1c             	add    esp,0x1c
c000d198:	c3                   	ret    

c000d199 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d199:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d19e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1a2:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d1a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ad:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d1b4:	40                   	inc    eax
c000d1b5:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d1ba:	83 f8 17             	cmp    eax,0x17
c000d1bd:	7e 0d                	jle    c000d1cc <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d1bf:	c7 44 24 04 63 3b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023b63
c000d1c7:	e9 12 2e 00 00       	jmp    c000ffde <KePanic(char const*)>
c000d1cc:	c3                   	ret    

c000d1cd <KeExecuteAtexit()>:
c000d1cd:	53                   	push   ebx
c000d1ce:	31 db                	xor    ebx,ebx
c000d1d0:	83 ec 08             	sub    esp,0x8
c000d1d3:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d1d9:	7e 50                	jle    c000d22b <KeExecuteAtexit()+0x5e>
c000d1db:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d1e2:	85 c0                	test   eax,eax
c000d1e4:	74 42                	je     c000d228 <KeExecuteAtexit()+0x5b>
c000d1e6:	51                   	push   ecx
c000d1e7:	50                   	push   eax
c000d1e8:	53                   	push   ebx
c000d1e9:	68 7c 3b 02 c0       	push   0xc0023b7c
c000d1ee:	e8 71 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d1f3:	58                   	pop    eax
c000d1f4:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1fb:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d202:	c7 04 24 9e 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b9e
c000d209:	e8 56 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d20e:	c7 04 24 2f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f2f
c000d215:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d220:	e8 3f 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d225:	83 c4 10             	add    esp,0x10
c000d228:	43                   	inc    ebx
c000d229:	eb a8                	jmp    c000d1d3 <KeExecuteAtexit()+0x6>
c000d22b:	83 c4 08             	add    esp,0x8
c000d22e:	5b                   	pop    ebx
c000d22f:	c3                   	ret    

c000d230 <KeDisplaySplashScreen()>:
c000d230:	53                   	push   ebx
c000d231:	bb 01 00 00 00       	mov    ebx,0x1
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	43                   	inc    ebx
c000d23a:	0f be 83 a1 3b 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc45f]
c000d241:	85 c0                	test   eax,eax
c000d243:	74 15                	je     c000d25a <KeDisplaySplashScreen()+0x2a>
c000d245:	83 ec 0c             	sub    esp,0xc
c000d248:	6a 01                	push   0x1
c000d24a:	53                   	push   ebx
c000d24b:	6a 00                	push   0x0
c000d24d:	6a 0f                	push   0xf
c000d24f:	50                   	push   eax
c000d250:	e8 cb de 00 00       	call   c001b120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d255:	83 c4 20             	add    esp,0x20
c000d258:	eb df                	jmp    c000d239 <KeDisplaySplashScreen()+0x9>
c000d25a:	83 c4 08             	add    esp,0x8
c000d25d:	5b                   	pop    ebx
c000d25e:	c3                   	ret    

c000d25f <KeSetBootMessage(char const*)>:
c000d25f:	57                   	push   edi
c000d260:	56                   	push   esi
c000d261:	53                   	push   ebx
c000d262:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d268:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d26f:	68 9e 00 00 00       	push   0x9e
c000d274:	6a 00                	push   0x0
c000d276:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d27a:	56                   	push   esi
c000d27b:	e8 70 32 ff ff       	call   c00004f0 <memset>
c000d280:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d283:	e8 e8 32 ff ff       	call   c0000570 <strlen>
c000d288:	ba 50 00 00 00       	mov    edx,0x50
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	29 c2                	sub    edx,eax
c000d292:	31 c9                	xor    ecx,ecx
c000d294:	83 e2 fe             	and    edx,0xfffffffe
c000d297:	01 f2                	add    edx,esi
c000d299:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d29e:	84 c0                	test   al,al
c000d2a0:	74 0a                	je     c000d2ac <KeSetBootMessage(char const*)+0x4d>
c000d2a2:	80 cc 07             	or     ah,0x7
c000d2a5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d2a9:	41                   	inc    ecx
c000d2aa:	eb ed                	jmp    c000d299 <KeSetBootMessage(char const*)+0x3a>
c000d2ac:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d2b1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d2b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2b8:	50                   	push   eax
c000d2b9:	50                   	push   eax
c000d2ba:	53                   	push   ebx
c000d2bb:	68 b6 3b 02 c0       	push   0xc0023bb6
c000d2c0:	e8 9f 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2c5:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d2cb:	5b                   	pop    ebx
c000d2cc:	5e                   	pop    esi
c000d2cd:	5f                   	pop    edi
c000d2ce:	c3                   	ret    

c000d2cf <__cxa_atexit>:
c000d2cf:	31 c0                	xor    eax,eax
c000d2d1:	c3                   	ret    

c000d2d2 <__cxa_finalize>:
c000d2d2:	c3                   	ret    

c000d2d3 <__stack_chk_fail>:
c000d2d3:	55                   	push   ebp
c000d2d4:	89 e5                	mov    ebp,esp
c000d2d6:	83 ec 10             	sub    esp,0x10
c000d2d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2dc:	68 c4 3b 02 c0       	push   0xc0023bc4
c000d2e1:	e8 7e 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2e6:	58                   	pop    eax
c000d2e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ea:	5a                   	pop    edx
c000d2eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d2ee:	68 c4 3b 02 c0       	push   0xc0023bc4
c000d2f3:	e8 6c 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2f8:	c7 04 24 cc 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bcc
c000d2ff:	e8 da 2c 00 00       	call   c000ffde <KePanic(char const*)>
c000d304:	83 c4 10             	add    esp,0x10
c000d307:	c9                   	leave  
c000d308:	c3                   	ret    

c000d309 <__cxa_pure_virtual>:
c000d309:	83 ec 18             	sub    esp,0x18
c000d30c:	68 e4 3b 02 c0       	push   0xc0023be4
c000d311:	e8 c8 2c 00 00       	call   c000ffde <KePanic(char const*)>
c000d316:	83 c4 1c             	add    esp,0x1c
c000d319:	c3                   	ret    

c000d31a <operator new[](unsigned long)>:
c000d31a:	e9 78 29 00 00       	jmp    c000fc97 <malloc>

c000d31f <operator delete(void*, unsigned long)>:
c000d31f:	e9 93 29 00 00       	jmp    c000fcb7 <rfree>

c000d324 <operator delete[](void*)>:
c000d324:	e9 8e 29 00 00       	jmp    c000fcb7 <rfree>

c000d329 <operator delete[](void*, unsigned long)>:
c000d329:	e9 89 29 00 00       	jmp    c000fcb7 <rfree>
c000d32e:	66 90                	xchg   ax,ax

c000d330 <CUnlockScheduler>:
c000d330:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d338:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d33d:	85 c0                	test   eax,eax
c000d33f:	75 03                	jne    c000d344 <CUnlockScheduler+0x14>
c000d341:	fb                   	sti    
c000d342:	66 90                	xchg   ax,ax
c000d344:	90                   	nop
c000d345:	c3                   	ret    
c000d346:	66 90                	xchg   ax,ax

c000d348 <CLockScheduler>:
c000d348:	fa                   	cli    
c000d349:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d34e:	83 c0 01             	add    eax,0x1
c000d351:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d356:	90                   	nop
c000d357:	c3                   	ret    

c000d358 <CPrintf>:
c000d358:	83 ec 0c             	sub    esp,0xc
c000d35b:	83 ec 08             	sub    esp,0x8
c000d35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d362:	68 f7 3b 02 c0       	push   0xc0023bf7
c000d367:	e8 f8 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	90                   	nop
c000d370:	83 c4 0c             	add    esp,0xc
c000d373:	c3                   	ret    

c000d374 <CmOpen(char const*)>:
c000d374:	57                   	push   edi
c000d375:	56                   	push   esi
c000d376:	53                   	push   ebx
c000d377:	83 ec 1c             	sub    esp,0x1c
c000d37a:	6a 30                	push   0x30
c000d37c:	e8 16 29 00 00       	call   c000fc97 <malloc>
c000d381:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d388:	89 c3                	mov    ebx,eax
c000d38a:	e8 08 29 00 00       	call   c000fc97 <malloc>
c000d38f:	83 c4 0c             	add    esp,0xc
c000d392:	89 c6                	mov    esi,eax
c000d394:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d39a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d39e:	50                   	push   eax
c000d39f:	e8 8e ad ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d3a4:	83 c4 0c             	add    esp,0xc
c000d3a7:	89 33                	mov    DWORD PTR [ebx],esi
c000d3a9:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d3ad:	50                   	push   eax
c000d3ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3b2:	50                   	push   eax
c000d3b3:	56                   	push   esi
c000d3b4:	e8 99 b0 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000d3b9:	5a                   	pop    edx
c000d3ba:	59                   	pop    ecx
c000d3bb:	6a 01                	push   0x1
c000d3bd:	ff 33                	push   DWORD PTR [ebx]
c000d3bf:	e8 8c ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3c4:	5e                   	pop    esi
c000d3c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3c9:	e8 c9 28 00 00       	call   c000fc97 <malloc>
c000d3ce:	5a                   	pop    edx
c000d3cf:	89 c7                	mov    edi,eax
c000d3d1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d9:	56                   	push   esi
c000d3da:	57                   	push   edi
c000d3db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3e3:	50                   	push   eax
c000d3e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3e7:	83 c4 14             	add    esp,0x14
c000d3ea:	ff 33                	push   DWORD PTR [ebx]
c000d3ec:	e8 bd ad ff ff       	call   c00081ae <File::close()>
c000d3f1:	59                   	pop    ecx
c000d3f2:	58                   	pop    eax
c000d3f3:	6a 13                	push   0x13
c000d3f5:	ff 33                	push   DWORD PTR [ebx]
c000d3f7:	e8 54 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000d400:	89 34 24             	mov    DWORD PTR [esp],esi
c000d403:	57                   	push   edi
c000d404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d408:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d40c:	50                   	push   eax
c000d40d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d410:	83 c4 14             	add    esp,0x14
c000d413:	57                   	push   edi
c000d414:	e8 8e 28 00 00       	call   c000fca7 <free>
c000d419:	83 c4 10             	add    esp,0x10
c000d41c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d41f:	75 10                	jne    c000d431 <CmOpen(char const*)+0xbd>
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	68 fa 3b 02 c0       	push   0xc0023bfa
c000d429:	e8 b0 2b 00 00       	call   c000ffde <KePanic(char const*)>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d434:	50                   	push   eax
c000d435:	6a 00                	push   0x0
c000d437:	6a 00                	push   0x0
c000d439:	ff 33                	push   DWORD PTR [ebx]
c000d43b:	e8 ce ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d440:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d442:	8b 10                	mov    edx,DWORD PTR [eax]
c000d444:	89 34 24             	mov    DWORD PTR [esp],esi
c000d447:	57                   	push   edi
c000d448:	6a 00                	push   0x0
c000d44a:	6a 2b                	push   0x2b
c000d44c:	50                   	push   eax
c000d44d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d450:	83 c4 1c             	add    esp,0x1c
c000d453:	6a 00                	push   0x0
c000d455:	6a 00                	push   0x0
c000d457:	ff 33                	push   DWORD PTR [ebx]
c000d459:	e8 b0 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d45e:	83 c4 0c             	add    esp,0xc
c000d461:	6a 08                	push   0x8
c000d463:	68 0b 3c 02 c0       	push   0xc0023c0b
c000d468:	57                   	push   edi
c000d469:	e8 12 2f ff ff       	call   c0000380 <memcmp>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	85 c0                	test   eax,eax
c000d473:	74 10                	je     c000d485 <CmOpen(char const*)+0x111>
c000d475:	83 ec 0c             	sub    esp,0xc
c000d478:	68 14 3c 02 c0       	push   0xc0023c14
c000d47d:	e8 5c 2b 00 00       	call   c000ffde <KePanic(char const*)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d489:	89 d8                	mov    eax,ebx
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	5b                   	pop    ebx
c000d48f:	5e                   	pop    esi
c000d490:	5f                   	pop    edi
c000d491:	c3                   	ret    

c000d492 <CmClose(Reghive_Tag*)>:
c000d492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d496:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d49a:	74 0b                	je     c000d4a7 <CmClose(Reghive_Tag*)+0x15>
c000d49c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d49e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4a2:	e9 07 ad ff ff       	jmp    c00081ae <File::close()>
c000d4a7:	c3                   	ret    

c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4a8:	53                   	push   ebx
c000d4a9:	83 ec 18             	sub    esp,0x18
c000d4ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4b0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4b4:	74 29                	je     c000d4df <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4b6:	50                   	push   eax
c000d4b7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4bc:	99                   	cdq    
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 33                	push   DWORD PTR [ebx]
c000d4c1:	e8 48 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d4c6:	5a                   	pop    edx
c000d4c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4c9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4cf:	51                   	push   ecx
c000d4d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d4d4:	6a 00                	push   0x0
c000d4d6:	6a 2b                	push   0x2b
c000d4d8:	50                   	push   eax
c000d4d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4dc:	83 c4 20             	add    esp,0x20
c000d4df:	83 c4 18             	add    esp,0x18
c000d4e2:	5b                   	pop    ebx
c000d4e3:	c3                   	ret    

c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>:
c000d4e4:	55                   	push   ebp
c000d4e5:	57                   	push   edi
c000d4e6:	56                   	push   esi
c000d4e7:	53                   	push   ebx
c000d4e8:	31 db                	xor    ebx,ebx
c000d4ea:	83 ec 70             	sub    esp,0x70
c000d4ed:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d4f4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d4f8:	50                   	push   eax
c000d4f9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d500:	55                   	push   ebp
c000d501:	e8 a2 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d50e:	c1 e0 08             	shl    eax,0x8
c000d511:	89 c2                	mov    edx,eax
c000d513:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d518:	09 d0                	or     eax,edx
c000d51a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d51f:	c1 e0 08             	shl    eax,0x8
c000d522:	09 d0                	or     eax,edx
c000d524:	74 25                	je     c000d54b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d526:	6b fb 0d             	imul   edi,ebx,0xd
c000d529:	52                   	push   edx
c000d52a:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d52e:	52                   	push   edx
c000d52f:	50                   	push   eax
c000d530:	55                   	push   ebp
c000d531:	e8 72 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d536:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d53a:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d541:	b9 27 00 00 00       	mov    ecx,0x27
c000d546:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	83 c3 03             	add    ebx,0x3
c000d54e:	83 fb 15             	cmp    ebx,0x15
c000d551:	75 b6                	jne    c000d509 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d553:	83 c4 6c             	add    esp,0x6c
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	5d                   	pop    ebp
c000d55a:	c3                   	ret    

c000d55b <CmEnterDirectory(Reghive_Tag*, int)>:
c000d55b:	83 ec 40             	sub    esp,0x40
c000d55e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d562:	50                   	push   eax
c000d563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56b:	e8 38 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	83 c8 ff             	or     eax,0xffffffff
c000d576:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d57b:	75 19                	jne    c000d596 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d57d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d582:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d587:	c1 e0 08             	shl    eax,0x8
c000d58a:	09 c2                	or     edx,eax
c000d58c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d591:	c1 e0 10             	shl    eax,0x10
c000d594:	09 d0                	or     eax,edx
c000d596:	83 c4 3c             	add    esp,0x3c
c000d599:	c3                   	ret    

c000d59a <CmGetNext(Reghive_Tag*, int)>:
c000d59a:	83 ec 40             	sub    esp,0x40
c000d59d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5a1:	50                   	push   eax
c000d5a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5aa:	e8 f9 fe ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5af:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d5b4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d5b9:	c1 e0 08             	shl    eax,0x8
c000d5bc:	09 c2                	or     edx,eax
c000d5be:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d5c3:	83 c4 4c             	add    esp,0x4c
c000d5c6:	c1 e0 10             	shl    eax,0x10
c000d5c9:	09 d0                	or     eax,edx
c000d5cb:	c3                   	ret    

c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d5cc:	53                   	push   ebx
c000d5cd:	83 ec 18             	sub    esp,0x18
c000d5d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5d4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5d8:	74 29                	je     c000d603 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d5da:	50                   	push   eax
c000d5db:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d5e0:	99                   	cdq    
c000d5e1:	52                   	push   edx
c000d5e2:	50                   	push   eax
c000d5e3:	ff 33                	push   DWORD PTR [ebx]
c000d5e5:	e8 24 ac ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d5ea:	5a                   	pop    edx
c000d5eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5f1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5f3:	51                   	push   ecx
c000d5f4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d5f8:	6a 00                	push   0x0
c000d5fa:	6a 2b                	push   0x2b
c000d5fc:	50                   	push   eax
c000d5fd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d600:	83 c4 20             	add    esp,0x20
c000d603:	83 c4 18             	add    esp,0x18
c000d606:	5b                   	pop    ebx
c000d607:	c3                   	ret    

c000d608 <CmFreeExtent(Reghive_Tag*, int)>:
c000d608:	53                   	push   ebx
c000d609:	83 ec 3c             	sub    esp,0x3c
c000d60c:	6a 2b                	push   0x2b
c000d60e:	6a 00                	push   0x0
c000d610:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d614:	53                   	push   ebx
c000d615:	e8 d6 2e ff ff       	call   c00004f0 <memset>
c000d61a:	83 c4 0c             	add    esp,0xc
c000d61d:	53                   	push   ebx
c000d61e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d622:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d626:	e8 a1 ff ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d62b:	83 c4 48             	add    esp,0x48
c000d62e:	5b                   	pop    ebx
c000d62f:	c3                   	ret    

c000d630 <CmUpdateHeader(Reghive_Tag*)>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d637:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d63b:	74 10                	je     c000d64d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d63d:	52                   	push   edx
c000d63e:	8d 50 05             	lea    edx,[eax+0x5]
c000d641:	52                   	push   edx
c000d642:	6a 00                	push   0x0
c000d644:	50                   	push   eax
c000d645:	e8 82 ff ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	83 c4 0c             	add    esp,0xc
c000d650:	c3                   	ret    

c000d651 <CmExpand(Reghive_Tag*, int)>:
c000d651:	57                   	push   edi
c000d652:	56                   	push   esi
c000d653:	83 ce ff             	or     esi,0xffffffff
c000d656:	53                   	push   ebx
c000d657:	83 ec 30             	sub    esp,0x30
c000d65a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d65e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d662:	74 5f                	je     c000d6c3 <CmExpand(Reghive_Tag*, int)+0x72>
c000d664:	31 d2                	xor    edx,edx
c000d666:	31 f6                	xor    esi,esi
c000d668:	50                   	push   eax
c000d669:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d66d:	52                   	push   edx
c000d66e:	50                   	push   eax
c000d66f:	ff 33                	push   DWORD PTR [ebx]
c000d671:	e8 98 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d676:	83 c4 0c             	add    esp,0xc
c000d679:	6a 2b                	push   0x2b
c000d67b:	6a 00                	push   0x0
c000d67d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d681:	57                   	push   edi
c000d682:	e8 69 2e ff ff       	call   c00004f0 <memset>
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d68e:	7d 1b                	jge    c000d6ab <CmExpand(Reghive_Tag*, int)+0x5a>
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d695:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d699:	8b 10                	mov    edx,DWORD PTR [eax]
c000d69b:	46                   	inc    esi
c000d69c:	51                   	push   ecx
c000d69d:	57                   	push   edi
c000d69e:	6a 00                	push   0x0
c000d6a0:	6a 2b                	push   0x2b
c000d6a2:	50                   	push   eax
c000d6a3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6a6:	83 c4 20             	add    esp,0x20
c000d6a9:	eb df                	jmp    c000d68a <CmExpand(Reghive_Tag*, int)+0x39>
c000d6ab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d6af:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d6b2:	83 ec 0c             	sub    esp,0xc
c000d6b5:	01 f2                	add    edx,esi
c000d6b7:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d6ba:	53                   	push   ebx
c000d6bb:	e8 70 ff ff ff       	call   c000d630 <CmUpdateHeader(Reghive_Tag*)>
c000d6c0:	83 c4 10             	add    esp,0x10
c000d6c3:	83 c4 30             	add    esp,0x30
c000d6c6:	89 f0                	mov    eax,esi
c000d6c8:	5b                   	pop    ebx
c000d6c9:	5e                   	pop    esi
c000d6ca:	5f                   	pop    edi
c000d6cb:	c3                   	ret    

c000d6cc <CmFindUnusedExtent(Reghive_Tag*)>:
c000d6cc:	55                   	push   ebp
c000d6cd:	57                   	push   edi
c000d6ce:	56                   	push   esi
c000d6cf:	53                   	push   ebx
c000d6d0:	83 cb ff             	or     ebx,0xffffffff
c000d6d3:	83 ec 1c             	sub    esp,0x1c
c000d6d6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6da:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d6de:	74 68                	je     c000d748 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6e0:	be 2b 00 00 00       	mov    esi,0x2b
c000d6e5:	51                   	push   ecx
c000d6e6:	31 ff                	xor    edi,edi
c000d6e8:	6a 00                	push   0x0
c000d6ea:	31 db                	xor    ebx,ebx
c000d6ec:	6a 00                	push   0x0
c000d6ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6f1:	e8 18 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d6fc:	76 3b                	jbe    c000d739 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d6fe:	83 ec 0c             	sub    esp,0xc
c000d701:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d704:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d708:	8b 10                	mov    edx,DWORD PTR [eax]
c000d70a:	51                   	push   ecx
c000d70b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d70f:	51                   	push   ecx
c000d710:	6a 00                	push   0x0
c000d712:	6a 01                	push   0x1
c000d714:	50                   	push   eax
c000d715:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d718:	83 c4 20             	add    esp,0x20
c000d71b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d720:	74 26                	je     c000d748 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d722:	43                   	inc    ebx
c000d723:	52                   	push   edx
c000d724:	57                   	push   edi
c000d725:	56                   	push   esi
c000d726:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d729:	e8 e0 aa ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d72e:	83 c6 2b             	add    esi,0x2b
c000d731:	83 d7 00             	adc    edi,0x0
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	eb c0                	jmp    c000d6f9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d739:	50                   	push   eax
c000d73a:	50                   	push   eax
c000d73b:	6a 40                	push   0x40
c000d73d:	55                   	push   ebp
c000d73e:	e8 0e ff ff ff       	call   c000d651 <CmExpand(Reghive_Tag*, int)>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	89 c3                	mov    ebx,eax
c000d748:	83 c4 1c             	add    esp,0x1c
c000d74b:	89 d8                	mov    eax,ebx
c000d74d:	5b                   	pop    ebx
c000d74e:	5e                   	pop    esi
c000d74f:	5f                   	pop    edi
c000d750:	5d                   	pop    ebp
c000d751:	c3                   	ret    

c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d752:	55                   	push   ebp
c000d753:	57                   	push   edi
c000d754:	56                   	push   esi
c000d755:	53                   	push   ebx
c000d756:	81 ec 88 00 00 00    	sub    esp,0x88
c000d75c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d763:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d76a:	e8 5d ff ff ff       	call   c000d6cc <CmFindUnusedExtent(Reghive_Tag*)>
c000d76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d773:	83 c4 0c             	add    esp,0xc
c000d776:	6a 2b                	push   0x2b
c000d778:	6a 00                	push   0x0
c000d77a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d77e:	55                   	push   ebp
c000d77f:	e8 6c 2d ff ff       	call   c00004f0 <memset>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	85 db                	test   ebx,ebx
c000d789:	74 12                	je     c000d79d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d78b:	51                   	push   ecx
c000d78c:	55                   	push   ebp
c000d78d:	53                   	push   ebx
c000d78e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d795:	e8 0e fd ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7a1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7a8:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7af:	85 db                	test   ebx,ebx
c000d7b1:	74 49                	je     c000d7fc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d7b3:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d7b8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d7bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7c1:	c1 e0 08             	shl    eax,0x8
c000d7c4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d7ca:	09 c8                	or     eax,ecx
c000d7cc:	74 11                	je     c000d7df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d7ce:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d7d2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d7d6:	c1 e8 10             	shr    eax,0x10
c000d7d9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d7dd:	eb 0f                	jmp    c000d7ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d7df:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7e4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7e9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7ee:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d7f2:	c1 ea 08             	shr    edx,0x8
c000d7f5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d7fa:	eb 0f                	jmp    c000d80b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d7fc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d801:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d806:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d80b:	52                   	push   edx
c000d80c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d810:	50                   	push   eax
c000d811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d815:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d81c:	e8 ab fd ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d821:	83 c4 10             	add    esp,0x10
c000d824:	85 db                	test   ebx,ebx
c000d826:	74 12                	je     c000d83a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d828:	50                   	push   eax
c000d829:	55                   	push   ebp
c000d82a:	53                   	push   ebx
c000d82b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d832:	e8 95 fd ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d83e:	83 c4 7c             	add    esp,0x7c
c000d841:	5b                   	pop    ebx
c000d842:	5e                   	pop    esi
c000d843:	5f                   	pop    edi
c000d844:	5d                   	pop    ebp
c000d845:	c3                   	ret    

c000d846 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d846:	55                   	push   ebp
c000d847:	57                   	push   edi
c000d848:	56                   	push   esi
c000d849:	53                   	push   ebx
c000d84a:	bb 27 00 00 00       	mov    ebx,0x27
c000d84f:	81 ec 88 00 00 00    	sub    esp,0x88
c000d855:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d85c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d863:	e8 08 2d ff ff       	call   c0000570 <strlen>
c000d868:	8d 48 26             	lea    ecx,[eax+0x26]
c000d86b:	89 c8                	mov    eax,ecx
c000d86d:	99                   	cdq    
c000d86e:	f7 fb                	idiv   ebx
c000d870:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d87d:	7e 10                	jle    c000d88f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	68 25 3c 02 c0       	push   0xc0023c25
c000d887:	e8 52 27 00 00       	call   c000ffde <KePanic(char const*)>
c000d88c:	83 c4 10             	add    esp,0x10
c000d88f:	31 ff                	xor    edi,edi
c000d891:	50                   	push   eax
c000d892:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d896:	53                   	push   ebx
c000d897:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d89e:	56                   	push   esi
c000d89f:	e8 04 fc ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8a4:	83 c4 10             	add    esp,0x10
c000d8a7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d8ab:	89 d0                	mov    eax,edx
c000d8ad:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d8b1:	c1 e0 08             	shl    eax,0x8
c000d8b4:	09 c2                	or     edx,eax
c000d8b6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d8ba:	c1 e2 08             	shl    edx,0x8
c000d8bd:	09 c2                	or     edx,eax
c000d8bf:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d8c3:	7e 76                	jle    c000d93b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d8c5:	85 d2                	test   edx,edx
c000d8c7:	75 25                	jne    c000d8ee <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d8c9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d8ce:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d8d2:	50                   	push   eax
c000d8d3:	6a 00                	push   0x0
c000d8d5:	6a 00                	push   0x0
c000d8d7:	56                   	push   esi
c000d8d8:	e8 75 fe ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	89 c2                	mov    edx,eax
c000d8e2:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d8e5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d8e8:	c1 f8 10             	sar    eax,0x10
c000d8eb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d8ee:	55                   	push   ebp
c000d8ef:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d8f3:	55                   	push   ebp
c000d8f4:	52                   	push   edx
c000d8f5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d8f9:	56                   	push   esi
c000d8fa:	e8 a9 fb ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8ff:	83 c4 0c             	add    esp,0xc
c000d902:	6a 27                	push   0x27
c000d904:	6a 00                	push   0x0
c000d906:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d90a:	51                   	push   ecx
c000d90b:	e8 e0 2b ff ff       	call   c00004f0 <memset>
c000d910:	83 c4 0c             	add    esp,0xc
c000d913:	6b c7 27             	imul   eax,edi,0x27
c000d916:	6a 27                	push   0x27
c000d918:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d91f:	50                   	push   eax
c000d920:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d924:	51                   	push   ecx
c000d925:	e8 56 2d ff ff       	call   c0000680 <strncpy>
c000d92a:	83 c4 0c             	add    esp,0xc
c000d92d:	55                   	push   ebp
c000d92e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d932:	52                   	push   edx
c000d933:	56                   	push   esi
c000d934:	e8 93 fc ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d939:	eb 19                	jmp    c000d954 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d93b:	85 d2                	test   edx,edx
c000d93d:	74 18                	je     c000d957 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d93f:	51                   	push   ecx
c000d940:	51                   	push   ecx
c000d941:	52                   	push   edx
c000d942:	56                   	push   esi
c000d943:	e8 c0 fc ff ff       	call   c000d608 <CmFreeExtent(Reghive_Tag*, int)>
c000d948:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d94c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d950:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	47                   	inc    edi
c000d958:	83 c3 03             	add    ebx,0x3
c000d95b:	83 ff 07             	cmp    edi,0x7
c000d95e:	0f 85 43 ff ff ff    	jne    c000d8a7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d964:	50                   	push   eax
c000d965:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d969:	50                   	push   eax
c000d96a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d971:	56                   	push   esi
c000d972:	e8 55 fc ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d977:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d97d:	5b                   	pop    ebx
c000d97e:	5e                   	pop    esi
c000d97f:	5f                   	pop    edi
c000d980:	5d                   	pop    ebp
c000d981:	c3                   	ret    

c000d982 <CmGetMatch(char*, char*, bool, bool*)>:
c000d982:	56                   	push   esi
c000d983:	53                   	push   ebx
c000d984:	50                   	push   eax
c000d985:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d989:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d98e:	74 25                	je     c000d9b5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d990:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d993:	31 db                	xor    ebx,ebx
c000d995:	50                   	push   eax
c000d996:	50                   	push   eax
c000d997:	8d 04 9d e0 5f 02 c0 	lea    eax,[ebx*4-0x3ffda020]
c000d99e:	50                   	push   eax
c000d99f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a3:	e8 a8 2d ff ff       	call   c0000750 <strcmp>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	74 2e                	je     c000d9dd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9af:	43                   	inc    ebx
c000d9b0:	83 fb 3f             	cmp    ebx,0x3f
c000d9b3:	75 e0                	jne    c000d995 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d9b5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9b8:	31 db                	xor    ebx,ebx
c000d9ba:	8d 04 9d e0 5f 02 c0 	lea    eax,[ebx*4-0x3ffda020]
c000d9c1:	51                   	push   ecx
c000d9c2:	51                   	push   ecx
c000d9c3:	50                   	push   eax
c000d9c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9c8:	e8 83 2d ff ff       	call   c0000750 <strcmp>
c000d9cd:	83 c4 10             	add    esp,0x10
c000d9d0:	85 c0                	test   eax,eax
c000d9d2:	74 09                	je     c000d9dd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9d4:	43                   	inc    ebx
c000d9d5:	83 fb 3f             	cmp    ebx,0x3f
c000d9d8:	75 e0                	jne    c000d9ba <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d9da:	83 cb ff             	or     ebx,0xffffffff
c000d9dd:	89 d8                	mov    eax,ebx
c000d9df:	5a                   	pop    edx
c000d9e0:	5b                   	pop    ebx
c000d9e1:	5e                   	pop    esi
c000d9e2:	c3                   	ret    

c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d9e3:	55                   	push   ebp
c000d9e4:	31 c0                	xor    eax,eax
c000d9e6:	57                   	push   edi
c000d9e7:	56                   	push   esi
c000d9e8:	53                   	push   ebx
c000d9e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9f1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d9f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d9f7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d9fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d9fe:	83 fd 1f             	cmp    ebp,0x1f
c000da01:	7f 0b                	jg     c000da0e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da03:	0f b6 c2             	movzx  eax,dl
c000da06:	d3 e0                	shl    eax,cl
c000da08:	09 07                	or     DWORD PTR [edi],eax
c000da0a:	b0 01                	mov    al,0x1
c000da0c:	01 33                	add    DWORD PTR [ebx],esi
c000da0e:	5b                   	pop    ebx
c000da0f:	5e                   	pop    esi
c000da10:	5f                   	pop    edi
c000da11:	5d                   	pop    ebp
c000da12:	c3                   	ret    

c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da13:	57                   	push   edi
c000da14:	56                   	push   esi
c000da15:	53                   	push   ebx
c000da16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da1e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da22:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da26:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da28:	7c 17                	jl     c000da41 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da2a:	8b 17                	mov    edx,DWORD PTR [edi]
c000da2c:	b8 01 00 00 00       	mov    eax,0x1
c000da31:	d3 e0                	shl    eax,cl
c000da33:	48                   	dec    eax
c000da34:	21 d0                	and    eax,edx
c000da36:	d3 ea                	shr    edx,cl
c000da38:	89 17                	mov    DWORD PTR [edi],edx
c000da3a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da3c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da3f:	eb 05                	jmp    c000da46 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da44:	31 c0                	xor    eax,eax
c000da46:	5b                   	pop    ebx
c000da47:	5e                   	pop    esi
c000da48:	5f                   	pop    edi
c000da49:	c3                   	ret    

c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da4a:	83 ec 40             	sub    esp,0x40
c000da4d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da51:	50                   	push   eax
c000da52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da5a:	e8 49 fa ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da5f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da63:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da67:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da6b:	89 10                	mov    DWORD PTR [eax],edx
c000da6d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da70:	83 c4 4c             	add    esp,0x4c
c000da73:	c3                   	ret    

c000da74 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da74:	55                   	push   ebp
c000da75:	57                   	push   edi
c000da76:	56                   	push   esi
c000da77:	53                   	push   ebx
c000da78:	83 ec 40             	sub    esp,0x40
c000da7b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da7f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da83:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da87:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da8b:	53                   	push   ebx
c000da8c:	56                   	push   esi
c000da8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da91:	e8 12 fa ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da96:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da9a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da9e:	83 c4 0c             	add    esp,0xc
c000daa1:	53                   	push   ebx
c000daa2:	56                   	push   esi
c000daa3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000daa7:	e8 20 fb ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000daac:	83 c4 4c             	add    esp,0x4c
c000daaf:	5b                   	pop    ebx
c000dab0:	5e                   	pop    esi
c000dab1:	5f                   	pop    edi
c000dab2:	5d                   	pop    ebp
c000dab3:	c3                   	ret    

c000dab4 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000dab4:	55                   	push   ebp
c000dab5:	57                   	push   edi
c000dab6:	56                   	push   esi
c000dab7:	31 f6                	xor    esi,esi
c000dab9:	53                   	push   ebx
c000daba:	31 db                	xor    ebx,ebx
c000dabc:	83 ec 40             	sub    esp,0x40
c000dabf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dacf:	6a 12                	push   0x12
c000dad1:	68 ee 00 00 00       	push   0xee
c000dad6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dada:	e8 11 2a ff ff       	call   c00004f0 <memset>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dae6:	6a 08                	push   0x8
c000dae8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000daec:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000daf0:	50                   	push   eax
c000daf1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000daf5:	55                   	push   ebp
c000daf6:	57                   	push   edi
c000daf7:	e8 e7 fe ff ff       	call   c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db03:	50                   	push   eax
c000db04:	6a 06                	push   0x6
c000db06:	55                   	push   ebp
c000db07:	57                   	push   edi
c000db08:	e8 06 ff ff ff       	call   c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db15:	74 07                	je     c000db1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db17:	46                   	inc    esi
c000db18:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db1c:	eb e1                	jmp    c000daff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db1e:	43                   	inc    ebx
c000db1f:	83 fb 12             	cmp    ebx,0x12
c000db22:	75 c2                	jne    c000dae6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db28:	31 db                	xor    ebx,ebx
c000db2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db2d:	50                   	push   eax
c000db2e:	50                   	push   eax
c000db2f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db34:	43                   	inc    ebx
c000db35:	8d 04 85 e0 5f 02 c0 	lea    eax,[eax*4-0x3ffda020]
c000db3c:	50                   	push   eax
c000db3d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db41:	e8 fa 2c ff ff       	call   c0000840 <strcat>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	83 fb 18             	cmp    ebx,0x18
c000db4c:	75 df                	jne    c000db2d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db4e:	83 c4 3c             	add    esp,0x3c
c000db51:	31 c0                	xor    eax,eax
c000db53:	5b                   	pop    ebx
c000db54:	5e                   	pop    esi
c000db55:	5f                   	pop    edi
c000db56:	5d                   	pop    ebp
c000db57:	c3                   	ret    

c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db58:	83 ec 40             	sub    esp,0x40
c000db5b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db5f:	50                   	push   eax
c000db60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db68:	e8 3b f9 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db6d:	58                   	pop    eax
c000db6e:	5a                   	pop    edx
c000db6f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db73:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db77:	50                   	push   eax
c000db78:	e8 37 ff ff ff       	call   c000dab4 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db7d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db82:	83 c4 4c             	add    esp,0x4c
c000db85:	c3                   	ret    

c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db86:	55                   	push   ebp
c000db87:	57                   	push   edi
c000db88:	56                   	push   esi
c000db89:	53                   	push   ebx
c000db8a:	31 db                	xor    ebx,ebx
c000db8c:	83 ec 70             	sub    esp,0x70
c000db8f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db96:	6a 30                	push   0x30
c000db98:	6a 00                	push   0x0
c000db9a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db9e:	56                   	push   esi
c000db9f:	e8 4c 29 ff ff       	call   c00004f0 <memset>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	83 ec 0c             	sub    esp,0xc
c000dbaa:	57                   	push   edi
c000dbab:	e8 c0 29 ff ff       	call   c0000570 <strlen>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	39 d8                	cmp    eax,ebx
c000dbb5:	76 16                	jbe    c000dbcd <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dbb7:	83 ec 0c             	sub    esp,0xc
c000dbba:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dbbe:	50                   	push   eax
c000dbbf:	e8 6c 2d ff ff       	call   c0000930 <toupper>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dbca:	43                   	inc    ebx
c000dbcb:	eb da                	jmp    c000dba7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dbcd:	31 f6                	xor    esi,esi
c000dbcf:	52                   	push   edx
c000dbd0:	31 ff                	xor    edi,edi
c000dbd2:	6a 18                	push   0x18
c000dbd4:	6a 3f                	push   0x3f
c000dbd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dbda:	50                   	push   eax
c000dbdb:	e8 10 29 ff ff       	call   c00004f0 <memset>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dbe7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dbeb:	84 c0                	test   al,al
c000dbed:	0f 84 b0 00 00 00    	je     c000dca3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dbf3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dbf7:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dbfc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc00:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc05:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc0f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc13:	53                   	push   ebx
c000dc14:	e8 57 29 ff ff       	call   c0000570 <strlen>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	85 c0                	test   eax,eax
c000dc1e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc22:	74 0b                	je     c000dc2f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc24:	50                   	push   eax
c000dc25:	6a 01                	push   0x1
c000dc27:	53                   	push   ebx
c000dc28:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc2c:	50                   	push   eax
c000dc2d:	eb 0a                	jmp    c000dc39 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc2f:	50                   	push   eax
c000dc30:	6a 00                	push   0x0
c000dc32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc36:	50                   	push   eax
c000dc37:	6a 00                	push   0x0
c000dc39:	e8 44 fd ff ff       	call   c000d982 <CmGetMatch(char*, char*, bool, bool*)>
c000dc3e:	83 c4 10             	add    esp,0x10
c000dc41:	83 f8 ff             	cmp    eax,0xffffffff
c000dc44:	75 1a                	jne    c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	68 3a 3c 02 c0       	push   0xc0023c3a
c000dc4e:	e8 8b 23 00 00       	call   c000ffde <KePanic(char const*)>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	b8 02 00 00 00       	mov    eax,0x2
c000dc5b:	e9 bc 00 00 00       	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc60:	83 ff 18             	cmp    edi,0x18
c000dc63:	75 1a                	jne    c000dc7f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc65:	83 ec 0c             	sub    esp,0xc
c000dc68:	68 4f 3c 02 c0       	push   0xc0023c4f
c000dc6d:	e8 6c 23 00 00       	call   c000ffde <KePanic(char const*)>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	b8 01 00 00 00       	mov    eax,0x1
c000dc7a:	e9 9d 00 00 00       	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc7f:	47                   	inc    edi
c000dc80:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc85:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc89:	74 02                	je     c000dc8d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dc8b:	89 ee                	mov    esi,ebp
c000dc8d:	83 ec 0c             	sub    esp,0xc
c000dc90:	53                   	push   ebx
c000dc91:	e8 da 28 ff ff       	call   c0000570 <strlen>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	85 c0                	test   eax,eax
c000dc9b:	74 06                	je     c000dca3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc9d:	46                   	inc    esi
c000dc9e:	e9 40 ff ff ff       	jmp    c000dbe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dca3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dcab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dcb3:	31 f6                	xor    esi,esi
c000dcb5:	50                   	push   eax
c000dcb6:	31 ff                	xor    edi,edi
c000dcb8:	6a 12                	push   0x12
c000dcba:	68 ee 00 00 00       	push   0xee
c000dcbf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dcc6:	e8 25 28 ff ff       	call   c00004f0 <memset>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	83 fe 17             	cmp    esi,0x17
c000dcd1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dcd5:	7e 26                	jle    c000dcfd <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dcd7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcdb:	50                   	push   eax
c000dcdc:	6a 08                	push   0x8
c000dcde:	55                   	push   ebp
c000dcdf:	53                   	push   ebx
c000dce0:	e8 2e fd ff ff       	call   c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dced:	74 26                	je     c000dd15 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dcef:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dcf6:	4e                   	dec    esi
c000dcf7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dcfa:	47                   	inc    edi
c000dcfb:	eb 1c                	jmp    c000dd19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dcfd:	6a 06                	push   0x6
c000dcff:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd04:	50                   	push   eax
c000dd05:	55                   	push   ebp
c000dd06:	53                   	push   ebx
c000dd07:	e8 d7 fc ff ff       	call   c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd0c:	83 c4 10             	add    esp,0x10
c000dd0f:	84 c0                	test   al,al
c000dd11:	75 06                	jne    c000dd19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd13:	eb c2                	jmp    c000dcd7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd15:	31 c0                	xor    eax,eax
c000dd17:	eb 03                	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd19:	46                   	inc    esi
c000dd1a:	eb b2                	jmp    c000dcce <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd1c:	83 c4 6c             	add    esp,0x6c
c000dd1f:	5b                   	pop    ebx
c000dd20:	5e                   	pop    esi
c000dd21:	5f                   	pop    edi
c000dd22:	5d                   	pop    ebp
c000dd23:	c3                   	ret    

c000dd24 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd24:	53                   	push   ebx
c000dd25:	83 ec 3c             	sub    esp,0x3c
c000dd28:	6a 2b                	push   0x2b
c000dd2a:	6a 00                	push   0x0
c000dd2c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd30:	53                   	push   ebx
c000dd31:	e8 ba 27 ff ff       	call   c00004f0 <memset>
c000dd36:	58                   	pop    eax
c000dd37:	5a                   	pop    edx
c000dd38:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd3c:	50                   	push   eax
c000dd3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd41:	e8 40 fe ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd46:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd4b:	83 c4 0c             	add    esp,0xc
c000dd4e:	6a 15                	push   0x15
c000dd50:	6a 00                	push   0x0
c000dd52:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd56:	50                   	push   eax
c000dd57:	e8 94 27 ff ff       	call   c00004f0 <memset>
c000dd5c:	53                   	push   ebx
c000dd5d:	6a 00                	push   0x0
c000dd5f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd63:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd67:	e8 e6 f9 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd6c:	83 c4 58             	add    esp,0x58
c000dd6f:	5b                   	pop    ebx
c000dd70:	c3                   	ret    

c000dd71 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd71:	56                   	push   esi
c000dd72:	53                   	push   ebx
c000dd73:	83 ec 48             	sub    esp,0x48
c000dd76:	6a 12                	push   0x12
c000dd78:	68 ff 00 00 00       	push   0xff
c000dd7d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd81:	56                   	push   esi
c000dd82:	e8 69 27 ff ff       	call   c00004f0 <memset>
c000dd87:	5a                   	pop    edx
c000dd88:	59                   	pop    ecx
c000dd89:	56                   	push   esi
c000dd8a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd8e:	e8 f3 fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd9a:	85 db                	test   ebx,ebx
c000dd9c:	74 42                	je     c000dde0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd9e:	50                   	push   eax
c000dd9f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dda3:	50                   	push   eax
c000dda4:	53                   	push   ebx
c000dda5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dda9:	e8 fa f6 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddae:	83 c4 0c             	add    esp,0xc
c000ddb1:	6a 12                	push   0x12
c000ddb3:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ddb7:	50                   	push   eax
c000ddb8:	56                   	push   esi
c000ddb9:	e8 c2 25 ff ff       	call   c0000380 <memcmp>
c000ddbe:	83 c4 10             	add    esp,0x10
c000ddc1:	85 c0                	test   eax,eax
c000ddc3:	74 1e                	je     c000dde3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000ddc5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000ddca:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000ddcf:	c1 e3 08             	shl    ebx,0x8
c000ddd2:	09 d8                	or     eax,ebx
c000ddd4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000ddd9:	c1 e3 10             	shl    ebx,0x10
c000dddc:	09 c3                	or     ebx,eax
c000ddde:	eb ba                	jmp    c000dd9a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dde0:	83 cb ff             	or     ebx,0xffffffff
c000dde3:	89 d8                	mov    eax,ebx
c000dde5:	83 c4 44             	add    esp,0x44
c000dde8:	5b                   	pop    ebx
c000dde9:	5e                   	pop    esi
c000ddea:	c3                   	ret    

c000ddeb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ddeb:	57                   	push   edi
c000ddec:	56                   	push   esi
c000dded:	53                   	push   ebx
c000ddee:	83 ec 34             	sub    esp,0x34
c000ddf1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ddf5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ddf9:	6a 2b                	push   0x2b
c000ddfb:	6a 00                	push   0x0
c000ddfd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de01:	53                   	push   ebx
c000de02:	e8 e9 26 ff ff       	call   c00004f0 <memset>
c000de07:	58                   	pop    eax
c000de08:	5a                   	pop    edx
c000de09:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de0d:	50                   	push   eax
c000de0e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de12:	e8 6f fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de17:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de1b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de1f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de23:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de27:	53                   	push   ebx
c000de28:	6a 00                	push   0x0
c000de2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de32:	e8 1b f9 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de37:	83 c4 50             	add    esp,0x50
c000de3a:	5b                   	pop    ebx
c000de3b:	5e                   	pop    esi
c000de3c:	5f                   	pop    edi
c000de3d:	c3                   	ret    

c000de3e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de3e:	55                   	push   ebp
c000de3f:	57                   	push   edi
c000de40:	56                   	push   esi
c000de41:	53                   	push   ebx
c000de42:	83 ec 40             	sub    esp,0x40
c000de45:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de49:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de4d:	6a 2b                	push   0x2b
c000de4f:	6a 00                	push   0x0
c000de51:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de55:	56                   	push   esi
c000de56:	e8 95 26 ff ff       	call   c00004f0 <memset>
c000de5b:	5f                   	pop    edi
c000de5c:	89 ef                	mov    edi,ebp
c000de5e:	58                   	pop    eax
c000de5f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de63:	50                   	push   eax
c000de64:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de68:	e8 19 fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de6d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de72:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de77:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de7c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	85 ed                	test   ebp,ebp
c000de86:	74 14                	je     c000de9c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de88:	51                   	push   ecx
c000de89:	51                   	push   ecx
c000de8a:	57                   	push   edi
c000de8b:	53                   	push   ebx
c000de8c:	e8 09 f7 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c000de91:	83 c4 10             	add    esp,0x10
c000de94:	85 c0                	test   eax,eax
c000de96:	74 04                	je     c000de9c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de98:	89 c7                	mov    edi,eax
c000de9a:	eb e8                	jmp    c000de84 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de9c:	56                   	push   esi
c000de9d:	6a 00                	push   0x0
c000de9f:	57                   	push   edi
c000dea0:	53                   	push   ebx
c000dea1:	e8 ac f8 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	89 c7                	mov    edi,eax
c000deab:	56                   	push   esi
c000deac:	50                   	push   eax
c000dead:	53                   	push   ebx
c000deae:	e8 f5 f5 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000deb3:	58                   	pop    eax
c000deb4:	5a                   	pop    edx
c000deb5:	6a 6c                	push   0x6c
c000deb7:	6a 00                	push   0x0
c000deb9:	6a 00                	push   0x0
c000debb:	68 60 3c 02 c0       	push   0xc0023c60
c000dec0:	57                   	push   edi
c000dec1:	53                   	push   ebx
c000dec2:	e8 24 ff ff ff       	call   c000ddeb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000dec7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000decb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000decf:	c1 e8 10             	shr    eax,0x10
c000ded2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000ded6:	83 c4 1c             	add    esp,0x1c
c000ded9:	56                   	push   esi
c000deda:	57                   	push   edi
c000dedb:	53                   	push   ebx
c000dedc:	e8 eb f6 ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dee1:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000dee6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000deeb:	c1 e0 08             	shl    eax,0x8
c000deee:	09 c2                	or     edx,eax
c000def0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000def5:	83 c4 4c             	add    esp,0x4c
c000def8:	c1 e0 10             	shl    eax,0x10
c000defb:	5b                   	pop    ebx
c000defc:	09 d0                	or     eax,edx
c000defe:	5e                   	pop    esi
c000deff:	5f                   	pop    edi
c000df00:	5d                   	pop    ebp
c000df01:	c3                   	ret    

c000df02 <zStrtok(char*, char const*)>:
c000df02:	55                   	push   ebp
c000df03:	57                   	push   edi
c000df04:	56                   	push   esi
c000df05:	53                   	push   ebx
c000df06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df0e:	85 db                	test   ebx,ebx
c000df10:	74 2f                	je     c000df41 <zStrtok(char*, char const*)+0x3f>
c000df12:	85 c0                	test   eax,eax
c000df14:	75 09                	jne    c000df1f <zStrtok(char*, char const*)+0x1d>
c000df16:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000df1b:	85 c0                	test   eax,eax
c000df1d:	74 50                	je     c000df6f <zStrtok(char*, char const*)+0x6d>
c000df1f:	31 c9                	xor    ecx,ecx
c000df21:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df25:	74 03                	je     c000df2a <zStrtok(char*, char const*)+0x28>
c000df27:	41                   	inc    ecx
c000df28:	eb f7                	jmp    c000df21 <zStrtok(char*, char const*)+0x1f>
c000df2a:	31 d2                	xor    edx,edx
c000df2c:	39 ca                	cmp    edx,ecx
c000df2e:	74 15                	je     c000df45 <zStrtok(char*, char const*)+0x43>
c000df30:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df34:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df37:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df3a:	39 ee                	cmp    esi,ebp
c000df3c:	74 13                	je     c000df51 <zStrtok(char*, char const*)+0x4f>
c000df3e:	42                   	inc    edx
c000df3f:	eb eb                	jmp    c000df2c <zStrtok(char*, char const*)+0x2a>
c000df41:	31 c0                	xor    eax,eax
c000df43:	eb 2a                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df45:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000df4f:	eb 1e                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df51:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df54:	39 ce                	cmp    esi,ecx
c000df56:	75 0a                	jne    c000df62 <zStrtok(char*, char const*)+0x60>
c000df58:	40                   	inc    eax
c000df59:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000df5e:	89 d8                	mov    eax,ebx
c000df60:	eb 0d                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df62:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df66:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df69:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000df6f:	5b                   	pop    ebx
c000df70:	5e                   	pop    esi
c000df71:	5f                   	pop    edi
c000df72:	5d                   	pop    ebp
c000df73:	c3                   	ret    

c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df74:	57                   	push   edi
c000df75:	56                   	push   esi
c000df76:	53                   	push   ebx
c000df77:	81 ec 08 01 00 00    	sub    esp,0x108
c000df7d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df84:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df8b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df8f:	53                   	push   ebx
c000df90:	e8 ab 26 ff ff       	call   c0000640 <strcpy>
c000df95:	59                   	pop    ecx
c000df96:	5e                   	pop    esi
c000df97:	68 41 4e 02 c0       	push   0xc0024e41
c000df9c:	53                   	push   ebx
c000df9d:	bb 01 00 00 00       	mov    ebx,0x1
c000dfa2:	e8 5b ff ff ff       	call   c000df02 <zStrtok(char*, char const*)>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	85 c0                	test   eax,eax
c000dfac:	74 3b                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfae:	52                   	push   edx
c000dfaf:	50                   	push   eax
c000dfb0:	6a 01                	push   0x1
c000dfb2:	57                   	push   edi
c000dfb3:	e8 b9 fd ff ff       	call   c000dd71 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000dfb8:	59                   	pop    ecx
c000dfb9:	89 c3                	mov    ebx,eax
c000dfbb:	5e                   	pop    esi
c000dfbc:	68 41 4e 02 c0       	push   0xc0024e41
c000dfc1:	6a 00                	push   0x0
c000dfc3:	e8 3a ff ff ff       	call   c000df02 <zStrtok(char*, char const*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	89 c6                	mov    esi,eax
c000dfcd:	85 c0                	test   eax,eax
c000dfcf:	74 18                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfd1:	52                   	push   edx
c000dfd2:	52                   	push   edx
c000dfd3:	53                   	push   ebx
c000dfd4:	57                   	push   edi
c000dfd5:	e8 81 f5 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	89 c3                	mov    ebx,eax
c000dfdf:	83 f8 ff             	cmp    eax,0xffffffff
c000dfe2:	74 05                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfe4:	50                   	push   eax
c000dfe5:	56                   	push   esi
c000dfe6:	53                   	push   ebx
c000dfe7:	eb c9                	jmp    c000dfb2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000dfe9:	81 c4 00 01 00 00    	add    esp,0x100
c000dfef:	89 d8                	mov    eax,ebx
c000dff1:	5b                   	pop    ebx
c000dff2:	5e                   	pop    esi
c000dff3:	5f                   	pop    edi
c000dff4:	c3                   	ret    

c000dff5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000dff5:	55                   	push   ebp
c000dff6:	57                   	push   edi
c000dff7:	56                   	push   esi
c000dff8:	53                   	push   ebx
c000dff9:	83 ec 5c             	sub    esp,0x5c
c000dffc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e000:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e004:	85 db                	test   ebx,ebx
c000e006:	0f 8e 84 00 00 00    	jle    c000e090 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e00c:	31 ed                	xor    ebp,ebp
c000e00e:	57                   	push   edi
c000e00f:	6a 32                	push   0x32
c000e011:	6a 00                	push   0x0
c000e013:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e017:	57                   	push   edi
c000e018:	e8 d3 24 ff ff       	call   c00004f0 <memset>
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	57                   	push   edi
c000e021:	53                   	push   ebx
c000e022:	56                   	push   esi
c000e023:	e8 30 fb ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e028:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e033:	7d 13                	jge    c000e048 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e035:	83 ec 0c             	sub    esp,0xc
c000e038:	45                   	inc    ebp
c000e039:	68 34 53 02 c0       	push   0xc0025334
c000e03e:	e8 21 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	eb e7                	jmp    c000e02f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e048:	51                   	push   ecx
c000e049:	57                   	push   edi
c000e04a:	53                   	push   ebx
c000e04b:	68 66 3c 02 c0       	push   0xc0023c66
c000e050:	e8 0f 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e05d:	75 1e                	jne    c000e07d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e05f:	52                   	push   edx
c000e060:	52                   	push   edx
c000e061:	53                   	push   ebx
c000e062:	56                   	push   esi
c000e063:	e8 f3 f4 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c000e068:	83 c4 0c             	add    esp,0xc
c000e06b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e06f:	8d 51 04             	lea    edx,[ecx+0x4]
c000e072:	52                   	push   edx
c000e073:	50                   	push   eax
c000e074:	56                   	push   esi
c000e075:	e8 7b ff ff ff       	call   c000dff5 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	50                   	push   eax
c000e07e:	50                   	push   eax
c000e07f:	53                   	push   ebx
c000e080:	56                   	push   esi
c000e081:	e8 14 f5 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 c3                	mov    ebx,eax
c000e08b:	e9 74 ff ff ff       	jmp    c000e004 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e090:	83 c4 5c             	add    esp,0x5c
c000e093:	5b                   	pop    ebx
c000e094:	5e                   	pop    esi
c000e095:	5f                   	pop    edi
c000e096:	5d                   	pop    ebp
c000e097:	c3                   	ret    

c000e098 <CmSplitFinalSlashInPlace(char*)>:
c000e098:	53                   	push   ebx
c000e099:	83 ec 14             	sub    esp,0x14
c000e09c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0a0:	53                   	push   ebx
c000e0a1:	e8 ca 24 ff ff       	call   c0000570 <strlen>
c000e0a6:	83 c4 10             	add    esp,0x10
c000e0a9:	48                   	dec    eax
c000e0aa:	85 c0                	test   eax,eax
c000e0ac:	74 15                	je     c000e0c3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e0ae:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e0b1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e0b5:	75 09                	jne    c000e0c0 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e0b7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e0ba:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e0be:	eb 05                	jmp    c000e0c5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e0c0:	48                   	dec    eax
c000e0c1:	eb e7                	jmp    c000e0aa <CmSplitFinalSlashInPlace(char*)+0x12>
c000e0c3:	31 c0                	xor    eax,eax
c000e0c5:	83 c4 08             	add    esp,0x8
c000e0c8:	5b                   	pop    ebx
c000e0c9:	c3                   	ret    
c000e0ca:	66 90                	xchg   ax,ax

c000e0cc <Krnl::handlePowerButton()>:
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	e8 46 28 00 00       	call   c001091a <KeHandlePowerButton()>
c000e0d4:	90                   	nop
c000e0d5:	83 c4 0c             	add    esp,0xc
c000e0d8:	c3                   	ret    
c000e0d9:	8d 76 00             	lea    esi,[esi+0x0]

c000e0dc <Krnl::handleSleepButton()>:
c000e0dc:	83 ec 0c             	sub    esp,0xc
c000e0df:	e8 4e 28 00 00       	call   c0010932 <KeHandleSleepButton()>
c000e0e4:	90                   	nop
c000e0e5:	83 c4 0c             	add    esp,0xc
c000e0e8:	c3                   	ret    
c000e0e9:	90                   	nop

c000e0ea <Computer::close(int, int, void*)>:
c000e0ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0ef:	c3                   	ret    

c000e0f0 <Computer::open(int, int, void*)>:
c000e0f0:	56                   	push   esi
c000e0f1:	53                   	push   ebx
c000e0f2:	83 ec 04             	sub    esp,0x4
c000e0f5:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e0fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e100:	0f 94 05 e0 66 02 c0 	sete   BYTE PTR ds:0xc00266e0
c000e107:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e10d:	74 10                	je     c000e11f <Computer::open(int, int, void*)+0x2f>
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	68 70 3c 02 c0       	push   0xc0023c70
c000e117:	e8 c2 1e 00 00       	call   c000ffde <KePanic(char const*)>
c000e11c:	83 c4 10             	add    esp,0x10
c000e11f:	83 ec 0c             	sub    esp,0xc
c000e122:	68 28 3d 02 c0       	push   0xc0023d28
c000e127:	e8 33 f1 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e12c:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e133:	e8 5f 1b 00 00       	call   c000fc97 <malloc>
c000e138:	89 04 24             	mov    DWORD PTR [esp],eax
c000e13b:	89 c6                	mov    esi,eax
c000e13d:	e8 7e e6 ff ff       	call   c000c7c0 <ACPI::ACPI()>
c000e142:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e148:	58                   	pop    eax
c000e149:	5a                   	pop    edx
c000e14a:	56                   	push   esi
c000e14b:	53                   	push   ebx
c000e14c:	e8 ab b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e151:	c7 04 24 40 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d40
c000e158:	e8 02 f1 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e15d:	e8 71 b5 00 00       	call   c00196d3 <HalEnableNMI()>
c000e162:	e8 a1 a7 00 00       	call   c0018908 <HalDetectFeatures()>
c000e167:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e16e:	e8 24 1b 00 00       	call   c000fc97 <malloc>
c000e173:	89 04 24             	mov    DWORD PTR [esp],eax
c000e176:	89 c6                	mov    esi,eax
c000e178:	e8 91 c0 00 00       	call   c001a20e <CPU::CPU()>
c000e17d:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e183:	59                   	pop    ecx
c000e184:	58                   	pop    eax
c000e185:	56                   	push   esi
c000e186:	53                   	push   ebx
c000e187:	e8 70 b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e18c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e190:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e196:	8b 10                	mov    edx,DWORD PTR [eax]
c000e198:	51                   	push   ecx
c000e199:	6a 00                	push   0x0
c000e19b:	6a 00                	push   0x0
c000e19d:	50                   	push   eax
c000e19e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e1a1:	83 c4 14             	add    esp,0x14
c000e1a4:	68 9c 3c 02 c0       	push   0xc0023c9c
c000e1a9:	e8 b1 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1ae:	e8 b6 bc 00 00       	call   c0019e69 <HalInitialiseCoprocessor()>
c000e1b3:	c7 04 24 5a 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d5a
c000e1ba:	e8 a0 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1bf:	c7 04 24 d6 e1 00 c0 	mov    DWORD PTR [esp],0xc000e1d6
c000e1c6:	e8 0d 8c 00 00       	call   c0016dd8 <setupMultitasking(void (*)())>
c000e1cb:	83 c4 14             	add    esp,0x14
c000e1ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1d3:	5b                   	pop    ebx
c000e1d4:	5e                   	pop    esi
c000e1d5:	c3                   	ret    

c000e1d6 <KeFirstTask()>:
c000e1d6:	53                   	push   ebx
c000e1d7:	83 ec 14             	sub    esp,0x14
c000e1da:	fb                   	sti    
c000e1db:	68 75 3d 02 c0       	push   0xc0023d75
c000e1e0:	e8 7a f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1e5:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e1ec:	e8 a6 1a 00 00       	call   c000fc97 <malloc>
c000e1f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e1f8:	89 c3                	mov    ebx,eax
c000e1fa:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e1ff:	50                   	push   eax
c000e200:	68 8e 3d 02 c0       	push   0xc0023d8e
c000e205:	6a 01                	push   0x1
c000e207:	53                   	push   ebx
c000e208:	e8 33 88 00 00       	call   c0016a40 <Process::Process(bool, char const*, Process*, char**)>
c000e20d:	83 c4 20             	add    esp,0x20
c000e210:	68 ff 00 00 00       	push   0xff
c000e215:	6a 00                	push   0x0
c000e217:	68 d5 ee 00 c0       	push   0xc000eed5
c000e21c:	53                   	push   ebx
c000e21d:	e8 5e 8a 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c000e222:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e228:	6a 7a                	push   0x7a
c000e22a:	6a 00                	push   0x0
c000e22c:	68 f8 75 01 c0       	push   0xc00175f8
c000e231:	52                   	push   edx
c000e232:	e8 49 8a 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c000e237:	83 c4 14             	add    esp,0x14
c000e23a:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e23f:	68 c0 3c 02 c0       	push   0xc0023cc0
c000e244:	e8 16 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e249:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e250:	e8 e9 27 00 00       	call   c0010a3e <KeInitRand()>
c000e255:	e8 6c 97 00 00       	call   c00179c6 <Vm::initialise8086()>
c000e25a:	e8 91 9b ff ff       	call   c0007df0 <Fs::initVFS()>
c000e25f:	c7 04 24 34 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a34
c000e266:	e8 f4 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e26b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e270:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e276:	8b 10                	mov    edx,DWORD PTR [eax]
c000e278:	6a 00                	push   0x0
c000e27a:	6a 00                	push   0x0
c000e27c:	6a 00                	push   0x0
c000e27e:	50                   	push   eax
c000e27f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e282:	83 c4 14             	add    esp,0x14
c000e285:	68 c0 3c 02 c0       	push   0xc0023cc0
c000e28a:	e8 d0 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e28f:	e8 41 93 ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000e294:	e8 f5 05 00 00       	call   c000e88e <KeLoadSystemEnv()>
c000e299:	e8 ac 26 00 00       	call   c001094a <KeSetupPowerManager()>
c000e29e:	c7 04 24 e4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ce4
c000e2a5:	e8 b5 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e2aa:	59                   	pop    ecx
c000e2ab:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e2b0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e2b6:	53                   	push   ebx
c000e2b7:	e8 5c b8 ff ff       	call   c0009b18 <Device::loadDriversForAll()>
c000e2bc:	c7 04 24 9b 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d9b
c000e2c3:	e8 97 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e2c8:	58                   	pop    eax
c000e2c9:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e2cf:	5a                   	pop    edx
c000e2d0:	6a 01                	push   0x1
c000e2d2:	68 ac 3d 02 c0       	push   0xc0023dac
c000e2d7:	e8 cf 80 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c000e2dc:	59                   	pop    ecx
c000e2dd:	5a                   	pop    edx
c000e2de:	53                   	push   ebx
c000e2df:	50                   	push   eax
c000e2e0:	e8 18 83 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	83 ec 0c             	sub    esp,0xc
c000e2eb:	6a 02                	push   0x2
c000e2ed:	e8 de 8c 00 00       	call   c0016fd0 <blockTask(TaskState)>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	eb f1                	jmp    c000e2e8 <KeFirstTask()+0x112>
c000e2f7:	90                   	nop

c000e2f8 <Computer::Computer()>:
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	68 c8 3d 02 c0       	push   0xc0023dc8
c000e307:	50                   	push   eax
c000e308:	e8 51 b8 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	ba dc 3d 02 c0       	mov    edx,0xc0023ddc
c000e315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e319:	89 10                	mov    DWORD PTR [eax],edx
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e337:	90                   	nop
c000e338:	83 c4 0c             	add    esp,0xc
c000e33b:	c3                   	ret    

c000e33c <KePrepareShutdown()>:
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	e8 89 ee ff ff       	call   c000d1cd <KeExecuteAtexit()>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e34c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e352:	50                   	push   eax
c000e353:	e8 0c b9 ff ff       	call   c0009c64 <Device::closeAll()>
c000e358:	83 c4 1c             	add    esp,0x1c
c000e35b:	c3                   	ret    

c000e35c <KeShutdown()>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	e8 d8 ff ff ff       	call   c000e33c <KePrepareShutdown()>
c000e364:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e369:	85 c0                	test   eax,eax
c000e36b:	74 02                	je     c000e36f <KeShutdown()+0x13>
c000e36d:	ff d0                	call   eax
c000e36f:	83 ec 0c             	sub    esp,0xc
c000e372:	68 04 3d 02 c0       	push   0xc0023d04
c000e377:	e8 62 1c 00 00       	call   c000ffde <KePanic(char const*)>
c000e37c:	83 c4 1c             	add    esp,0x1c
c000e37f:	c3                   	ret    

c000e380 <KeSleep()>:
c000e380:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e385:	85 c0                	test   eax,eax
c000e387:	74 02                	je     c000e38b <KeSleep()+0xb>
c000e389:	ff e0                	jmp    eax
c000e38b:	c3                   	ret    

c000e38c <KeRestart()>:
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	e8 a8 ff ff ff       	call   c000e33c <KePrepareShutdown()>
c000e394:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e399:	85 c0                	test   eax,eax
c000e39b:	74 02                	je     c000e39f <KeRestart()+0x13>
c000e39d:	ff d0                	call   eax
c000e39f:	e4 64                	in     al,0x64
c000e3a1:	a8 02                	test   al,0x2
c000e3a3:	75 fa                	jne    c000e39f <KeRestart()+0x13>
c000e3a5:	b0 fe                	mov    al,0xfe
c000e3a7:	e6 64                	out    0x64,al
c000e3a9:	83 c4 0c             	add    esp,0xc
c000e3ac:	c3                   	ret    

c000e3ad <KeCalculateCRC32(unsigned char*, int)>:
c000e3ad:	53                   	push   ebx
c000e3ae:	83 c8 ff             	or     eax,0xffffffff
c000e3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3b9:	01 cb                	add    ebx,ecx
c000e3bb:	39 d9                	cmp    ecx,ebx
c000e3bd:	74 15                	je     c000e3d4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e3bf:	41                   	inc    ecx
c000e3c0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e3c3:	31 c2                	xor    edx,eax
c000e3c5:	c1 e8 08             	shr    eax,0x8
c000e3c8:	0f b6 d2             	movzx  edx,dl
c000e3cb:	33 04 95 e0 60 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9f20]
c000e3d2:	eb e7                	jmp    c000e3bb <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e3d4:	f7 d0                	not    eax
c000e3d6:	5b                   	pop    ebx
c000e3d7:	c3                   	ret    

c000e3d8 <EnvVarContainer::getEnv(char const*)>:
c000e3d8:	57                   	push   edi
c000e3d9:	56                   	push   esi
c000e3da:	53                   	push   ebx
c000e3db:	31 db                	xor    ebx,ebx
c000e3dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e3e1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e3e3:	7e 2b                	jle    c000e410 <EnvVarContainer::getEnv(char const*)+0x38>
c000e3e5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e3ec:	50                   	push   eax
c000e3ed:	50                   	push   eax
c000e3ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3f1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3f8:	e8 53 23 ff ff       	call   c0000750 <strcmp>
c000e3fd:	83 c4 10             	add    esp,0x10
c000e400:	85 c0                	test   eax,eax
c000e402:	75 09                	jne    c000e40d <EnvVarContainer::getEnv(char const*)+0x35>
c000e404:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e407:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e40b:	eb 05                	jmp    c000e412 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e40d:	43                   	inc    ebx
c000e40e:	eb d1                	jmp    c000e3e1 <EnvVarContainer::getEnv(char const*)+0x9>
c000e410:	31 c0                	xor    eax,eax
c000e412:	5b                   	pop    ebx
c000e413:	5e                   	pop    esi
c000e414:	5f                   	pop    edi
c000e415:	c3                   	ret    

c000e416 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e416:	55                   	push   ebp
c000e417:	57                   	push   edi
c000e418:	56                   	push   esi
c000e419:	53                   	push   ebx
c000e41a:	83 ec 28             	sub    esp,0x28
c000e41d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e421:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e425:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e429:	56                   	push   esi
c000e42a:	e8 41 21 ff ff       	call   c0000570 <strlen>
c000e42f:	40                   	inc    eax
c000e430:	89 04 24             	mov    DWORD PTR [esp],eax
c000e433:	e8 5f 18 00 00       	call   c000fc97 <malloc>
c000e438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e43b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e43f:	e8 2c 21 ff ff       	call   c0000570 <strlen>
c000e444:	40                   	inc    eax
c000e445:	89 04 24             	mov    DWORD PTR [esp],eax
c000e448:	e8 4a 18 00 00       	call   c000fc97 <malloc>
c000e44d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e454:	e8 17 21 ff ff       	call   c0000570 <strlen>
c000e459:	83 c4 0c             	add    esp,0xc
c000e45c:	40                   	inc    eax
c000e45d:	50                   	push   eax
c000e45e:	6a 00                	push   0x0
c000e460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e464:	e8 87 20 ff ff       	call   c00004f0 <memset>
c000e469:	89 34 24             	mov    DWORD PTR [esp],esi
c000e46c:	e8 ff 20 ff ff       	call   c0000570 <strlen>
c000e471:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e475:	8d 48 01             	lea    ecx,[eax+0x1]
c000e478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e47a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e47d:	89 de                	mov    esi,ebx
c000e47f:	e8 ec 20 ff ff       	call   c0000570 <strlen>
c000e484:	83 c4 0c             	add    esp,0xc
c000e487:	40                   	inc    eax
c000e488:	50                   	push   eax
c000e489:	6a 00                	push   0x0
c000e48b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e48f:	e8 5c 20 ff ff       	call   c00004f0 <memset>
c000e494:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e497:	e8 d4 20 ff ff       	call   c0000570 <strlen>
c000e49c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4a0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e4a8:	40                   	inc    eax
c000e4a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e4ac:	c1 e0 03             	shl    eax,0x3
c000e4af:	5a                   	pop    edx
c000e4b0:	59                   	pop    ecx
c000e4b1:	50                   	push   eax
c000e4b2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e4b5:	e8 c9 17 00 00       	call   c000fc83 <realloc>
c000e4ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e4be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e4c1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e4c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e4c8:	b9 08 00 00 00       	mov    ecx,0x8
c000e4cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4cf:	83 c4 2c             	add    esp,0x2c
c000e4d2:	5b                   	pop    ebx
c000e4d3:	5e                   	pop    esi
c000e4d4:	5f                   	pop    edi
c000e4d5:	5d                   	pop    ebp
c000e4d6:	c3                   	ret    
c000e4d7:	90                   	nop

c000e4d8 <EnvVarContainer::deleteEnv(char const*)>:
c000e4d8:	c3                   	ret    
c000e4d9:	90                   	nop

c000e4da <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e4da:	55                   	push   ebp
c000e4db:	57                   	push   edi
c000e4dc:	56                   	push   esi
c000e4dd:	53                   	push   ebx
c000e4de:	81 ec 38 01 00 00    	sub    esp,0x138
c000e4e4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e4eb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e4f2:	68 14 01 00 00       	push   0x114
c000e4f7:	e8 9b 17 00 00       	call   c000fc97 <malloc>
c000e4fc:	83 c4 0c             	add    esp,0xc
c000e4ff:	89 c3                	mov    ebx,eax
c000e501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e504:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e50b:	50                   	push   eax
c000e50c:	e8 21 9c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000e511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e514:	e8 fb 9e ff ff       	call   c0008414 <File::exists()>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	84 c0                	test   al,al
c000e51e:	75 31                	jne    c000e551 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e520:	50                   	push   eax
c000e521:	50                   	push   eax
c000e522:	6a 12                	push   0x12
c000e524:	53                   	push   ebx
c000e525:	e8 26 9c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e52a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e52c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e52f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e532:	e8 39 20 ff ff       	call   c0000570 <strlen>
c000e537:	5a                   	pop    edx
c000e538:	31 d2                	xor    edx,edx
c000e53a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e53e:	51                   	push   ecx
c000e53f:	56                   	push   esi
c000e540:	52                   	push   edx
c000e541:	50                   	push   eax
c000e542:	53                   	push   ebx
c000e543:	ff d7                	call   edi
c000e545:	83 c4 14             	add    esp,0x14
c000e548:	53                   	push   ebx
c000e549:	e8 60 9c ff ff       	call   c00081ae <File::close()>
c000e54e:	83 c4 10             	add    esp,0x10
c000e551:	56                   	push   esi
c000e552:	31 f6                	xor    esi,esi
c000e554:	68 00 01 00 00       	push   0x100
c000e559:	6a 00                	push   0x0
c000e55b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e55f:	50                   	push   eax
c000e560:	e8 8b 1f ff ff       	call   c00004f0 <memset>
c000e565:	5f                   	pop    edi
c000e566:	58                   	pop    eax
c000e567:	6a 01                	push   0x1
c000e569:	53                   	push   ebx
c000e56a:	e8 e1 9b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e57a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e582:	83 ec 0c             	sub    esp,0xc
c000e585:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e587:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e58b:	51                   	push   ecx
c000e58c:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e590:	52                   	push   edx
c000e591:	6a 00                	push   0x0
c000e593:	6a 01                	push   0x1
c000e595:	53                   	push   ebx
c000e596:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e599:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e59e:	83 c4 20             	add    esp,0x20
c000e5a1:	89 c2                	mov    edx,eax
c000e5a3:	85 c0                	test   eax,eax
c000e5a5:	0f 84 36 01 00 00    	je     c000e6e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e5ab:	83 f8 0d             	cmp    eax,0xd
c000e5ae:	0f 84 22 01 00 00    	je     c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e5b9:	0f 84 f0 00 00 00    	je     c000e6af <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e5bf:	83 f8 0a             	cmp    eax,0xa
c000e5c2:	74 13                	je     c000e5d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5c4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5c9:	74 0c                	je     c000e5d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5d1:	0f 8e f6 00 00 00    	jle    c000e6cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e5d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5db:	83 ec 0c             	sub    esp,0xc
c000e5de:	8d 78 01             	lea    edi,[eax+0x1]
c000e5e1:	57                   	push   edi
c000e5e2:	e8 b0 16 00 00       	call   c000fc97 <malloc>
c000e5e7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e5eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5ef:	8d 56 04             	lea    edx,[esi+0x4]
c000e5f2:	89 14 24             	mov    DWORD PTR [esp],edx
c000e5f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5f9:	e8 99 16 00 00       	call   c000fc97 <malloc>
c000e5fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	57                   	push   edi
c000e606:	6a 00                	push   0x0
c000e608:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e60c:	e8 df 1e ff ff       	call   c00004f0 <memset>
c000e611:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e615:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e619:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e61d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61f:	83 c4 0c             	add    esp,0xc
c000e622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e626:	52                   	push   edx
c000e627:	6a 00                	push   0x0
c000e629:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e62d:	e8 be 1e ff ff       	call   c00004f0 <memset>
c000e632:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e636:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e63a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e63d:	e8 2e 1f ff ff       	call   c0000570 <strlen>
c000e642:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e646:	89 c1                	mov    ecx,eax
c000e648:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e64a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e64d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e650:	40                   	inc    eax
c000e651:	83 c4 10             	add    esp,0x10
c000e654:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e657:	85 d2                	test   edx,edx
c000e659:	75 0c                	jne    c000e667 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e65b:	83 ec 0c             	sub    esp,0xc
c000e65e:	6a 08                	push   0x8
c000e660:	e8 32 16 00 00       	call   c000fc97 <malloc>
c000e665:	eb 0c                	jmp    c000e673 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e667:	c1 e0 03             	shl    eax,0x3
c000e66a:	51                   	push   ecx
c000e66b:	51                   	push   ecx
c000e66c:	50                   	push   eax
c000e66d:	52                   	push   edx
c000e66e:	e8 10 16 00 00       	call   c000fc83 <realloc>
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e679:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e67c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e67f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e683:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e687:	b9 08 00 00 00       	mov    ecx,0x8
c000e68c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e68e:	31 f6                	xor    esi,esi
c000e690:	50                   	push   eax
c000e691:	68 00 01 00 00       	push   0x100
c000e696:	6a 00                	push   0x0
c000e698:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e69c:	50                   	push   eax
c000e69d:	e8 4e 1e ff ff       	call   c00004f0 <memset>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e6ad:	eb 27                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6af:	83 f8 3d             	cmp    eax,0x3d
c000e6b2:	74 1e                	je     c000e6d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e6b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e6ba:	7f 07                	jg     c000e6c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e6bc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e6c0:	46                   	inc    esi
c000e6c1:	eb 13                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6c3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e6cb:	eb 09                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6cd:	83 f8 3d             	cmp    eax,0x3d
c000e6d0:	75 ea                	jne    c000e6bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e6d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e6d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e6db:	0f 85 99 fe ff ff    	jne    c000e57a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e6e1:	83 ec 0c             	sub    esp,0xc
c000e6e4:	53                   	push   ebx
c000e6e5:	e8 c4 9a ff ff       	call   c00081ae <File::close()>
c000e6ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e6f2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e6f8:	5b                   	pop    ebx
c000e6f9:	5e                   	pop    esi
c000e6fa:	5f                   	pop    edi
c000e6fb:	5d                   	pop    ebp
c000e6fc:	c3                   	ret    
c000e6fd:	90                   	nop

c000e6fe <EnvVarContainer::__loadSystem()>:
c000e6fe:	83 ec 10             	sub    esp,0x10
c000e701:	68 e0 64 02 c0       	push   0xc00264e0
c000e706:	68 00 3e 02 c0       	push   0xc0023e00
c000e70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70f:	e8 c6 fd ff ff       	call   c000e4da <EnvVarContainer::loadFrom(char const*, char const*)>
c000e714:	83 c4 1c             	add    esp,0x1c
c000e717:	c3                   	ret    

c000e718 <EnvVarContainer::__loadUser()>:
c000e718:	c3                   	ret    
c000e719:	90                   	nop

c000e71a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e71e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e728:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e72c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e72f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e733:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e73a:	90                   	nop
c000e73b:	c3                   	ret    

c000e73c <EnvVarContainer::~EnvVarContainer()>:
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e746:	85 c0                	test   eax,eax
c000e748:	74 1d                	je     c000e767 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e750:	85 c0                	test   eax,eax
c000e752:	74 13                	je     c000e767 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e75b:	83 ec 0c             	sub    esp,0xc
c000e75e:	50                   	push   eax
c000e75f:	e8 43 15 00 00       	call   c000fca7 <free>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	90                   	nop
c000e768:	83 c4 0c             	add    esp,0xc
c000e76b:	c3                   	ret    

c000e76c <KeGetEnv(Process*, char const*)>:
c000e76c:	53                   	push   ebx
c000e76d:	83 ec 08             	sub    esp,0x8
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e778:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e77e:	74 04                	je     c000e784 <KeGetEnv(Process*, char const*)+0x18>
c000e780:	85 c0                	test   eax,eax
c000e782:	75 0b                	jne    c000e78f <KeGetEnv(Process*, char const*)+0x23>
c000e784:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e789:	85 c0                	test   eax,eax
c000e78b:	75 19                	jne    c000e7a6 <KeGetEnv(Process*, char const*)+0x3a>
c000e78d:	eb 27                	jmp    c000e7b6 <KeGetEnv(Process*, char const*)+0x4a>
c000e78f:	52                   	push   edx
c000e790:	52                   	push   edx
c000e791:	53                   	push   ebx
c000e792:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e798:	e8 3b fc ff ff       	call   c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	85 c0                	test   eax,eax
c000e7a2:	75 28                	jne    c000e7cc <KeGetEnv(Process*, char const*)+0x60>
c000e7a4:	eb de                	jmp    c000e784 <KeGetEnv(Process*, char const*)+0x18>
c000e7a6:	52                   	push   edx
c000e7a7:	52                   	push   edx
c000e7a8:	53                   	push   ebx
c000e7a9:	50                   	push   eax
c000e7aa:	e8 29 fc ff ff       	call   c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e7af:	83 c4 10             	add    esp,0x10
c000e7b2:	85 c0                	test   eax,eax
c000e7b4:	75 16                	jne    c000e7cc <KeGetEnv(Process*, char const*)+0x60>
c000e7b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e7ba:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e7bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7c3:	83 c4 08             	add    esp,0x8
c000e7c6:	5b                   	pop    ebx
c000e7c7:	e9 0c fc ff ff       	jmp    c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e7cc:	83 c4 08             	add    esp,0x8
c000e7cf:	5b                   	pop    ebx
c000e7d0:	c3                   	ret    

c000e7d1 <KeSetEnvSystem(char const*, char const*)>:
c000e7d1:	83 ec 10             	sub    esp,0x10
c000e7d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7dc:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e7e2:	e8 2f fc ff ff       	call   c000e416 <EnvVarContainer::setEnv(char const*, char const*)>
c000e7e7:	83 c4 1c             	add    esp,0x1c
c000e7ea:	c3                   	ret    

c000e7eb <KeSetEnvUser(char const*, char const*)>:
c000e7eb:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e7f0:	85 c0                	test   eax,eax
c000e7f2:	74 15                	je     c000e809 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e7f4:	83 ec 10             	sub    esp,0x10
c000e7f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7ff:	50                   	push   eax
c000e800:	e8 11 fc ff ff       	call   c000e416 <EnvVarContainer::setEnv(char const*, char const*)>
c000e805:	83 c4 1c             	add    esp,0x1c
c000e808:	c3                   	ret    
c000e809:	c3                   	ret    

c000e80a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e80e:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e814:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e818:	e9 f9 fb ff ff       	jmp    c000e416 <EnvVarContainer::setEnv(char const*, char const*)>

c000e81d <KeDeleteEnvSystem(char const*)>:
c000e81d:	c3                   	ret    

c000e81e <KeDeleteEnvUser(char const*)>:
c000e81e:	c3                   	ret    

c000e81f <KeDeleteEnvProcess(Process*, char const*)>:
c000e81f:	c3                   	ret    

c000e820 <KeNewProcessEnv(Process*)>:
c000e820:	83 ec 28             	sub    esp,0x28
c000e823:	6a 0c                	push   0xc
c000e825:	e8 6d 14 00 00       	call   c000fc97 <malloc>
c000e82a:	5a                   	pop    edx
c000e82b:	59                   	pop    ecx
c000e82c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e830:	50                   	push   eax
c000e831:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e835:	e8 e0 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e83a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e83e:	83 c4 2c             	add    esp,0x2c
c000e841:	c3                   	ret    

c000e842 <KeCopyProcessEnv(Process*, Process*)>:
c000e842:	57                   	push   edi
c000e843:	56                   	push   esi
c000e844:	53                   	push   ebx
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	83 ec 0c             	sub    esp,0xc
c000e84c:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e852:	6a 0c                	push   0xc
c000e854:	e8 3e 14 00 00       	call   c000fc97 <malloc>
c000e859:	89 c3                	mov    ebx,eax
c000e85b:	58                   	pop    eax
c000e85c:	5a                   	pop    edx
c000e85d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e861:	53                   	push   ebx
c000e862:	e8 b3 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e867:	8b 07                	mov    eax,DWORD PTR [edi]
c000e869:	89 03                	mov    DWORD PTR [ebx],eax
c000e86b:	c1 e0 03             	shl    eax,0x3
c000e86e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e871:	e8 21 14 00 00       	call   c000fc97 <malloc>
c000e876:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e879:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e87b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e87e:	c1 e1 03             	shl    ecx,0x3
c000e881:	89 c7                	mov    edi,eax
c000e883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	89 d8                	mov    eax,ebx
c000e88a:	5b                   	pop    ebx
c000e88b:	5e                   	pop    esi
c000e88c:	5f                   	pop    edi
c000e88d:	c3                   	ret    

c000e88e <KeLoadSystemEnv()>:
c000e88e:	53                   	push   ebx
c000e88f:	83 ec 14             	sub    esp,0x14
c000e892:	6a 0c                	push   0xc
c000e894:	e8 fe 13 00 00       	call   c000fc97 <malloc>
c000e899:	89 c3                	mov    ebx,eax
c000e89b:	58                   	pop    eax
c000e89c:	5a                   	pop    edx
c000e89d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e8a3:	53                   	push   ebx
c000e8a4:	e8 71 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e8ac:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e8b2:	e8 47 fe ff ff       	call   c000e6fe <EnvVarContainer::__loadSystem()>
c000e8b7:	83 c4 18             	add    esp,0x18
c000e8ba:	5b                   	pop    ebx
c000e8bb:	c3                   	ret    

c000e8bc <KeLoadUserEnv()>:
c000e8bc:	53                   	push   ebx
c000e8bd:	83 ec 14             	sub    esp,0x14
c000e8c0:	6a 0c                	push   0xc
c000e8c2:	e8 d0 13 00 00       	call   c000fc97 <malloc>
c000e8c7:	89 c3                	mov    ebx,eax
c000e8c9:	58                   	pop    eax
c000e8ca:	5a                   	pop    edx
c000e8cb:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e8d1:	53                   	push   ebx
c000e8d2:	e8 43 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8d7:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e8dd:	83 c4 18             	add    esp,0x18
c000e8e0:	5b                   	pop    ebx
c000e8e1:	c3                   	ret    

c000e8e2 <KeFlushEnv()>:
c000e8e2:	c3                   	ret    

c000e8e3 <KeGetProcessTotalEnvCount(Process*)>:
c000e8e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8e7:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e8ed:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e8f3:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e8f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8fa:	03 01                	add    eax,DWORD PTR [ecx]
c000e8fc:	85 d2                	test   edx,edx
c000e8fe:	74 02                	je     c000e902 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e900:	03 02                	add    eax,DWORD PTR [edx]
c000e902:	c3                   	ret    

c000e903 <KeGetProcessEnvPair(Process*, int)>:
c000e903:	57                   	push   edi
c000e904:	56                   	push   esi
c000e905:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e90b:	53                   	push   ebx
c000e90c:	85 f6                	test   esi,esi
c000e90e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e916:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e91c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e920:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e922:	75 16                	jne    c000e93a <KeGetProcessEnvPair(Process*, int)+0x37>
c000e924:	39 c2                	cmp    edx,eax
c000e926:	7c 16                	jl     c000e93e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e928:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e92e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e930:	01 c6                	add    esi,eax
c000e932:	39 d6                	cmp    esi,edx
c000e934:	7e 3c                	jle    c000e972 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e936:	29 c2                	sub    edx,eax
c000e938:	eb 04                	jmp    c000e93e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e93a:	39 c2                	cmp    edx,eax
c000e93c:	7d 05                	jge    c000e943 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e93e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e941:	eb 20                	jmp    c000e963 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e943:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e945:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e948:	39 d1                	cmp    ecx,edx
c000e94a:	7e 04                	jle    c000e950 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e94c:	29 c2                	sub    edx,eax
c000e94e:	eb 10                	jmp    c000e960 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e950:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e956:	03 0e                	add    ecx,DWORD PTR [esi]
c000e958:	39 d1                	cmp    ecx,edx
c000e95a:	7e 16                	jle    c000e972 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e95c:	29 c2                	sub    edx,eax
c000e95e:	29 fa                	sub    edx,edi
c000e960:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e963:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e966:	8b 02                	mov    eax,DWORD PTR [edx]
c000e968:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e96b:	89 03                	mov    DWORD PTR [ebx],eax
c000e96d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e970:	eb 1d                	jmp    c000e98f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e972:	83 ec 0c             	sub    esp,0xc
c000e975:	68 22 3e 02 c0       	push   0xc0023e22
c000e97a:	e8 5f 16 00 00       	call   c000ffde <KePanic(char const*)>
c000e97f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e985:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	89 d8                	mov    eax,ebx
c000e991:	5b                   	pop    ebx
c000e992:	5e                   	pop    esi
c000e993:	5f                   	pop    edi
c000e994:	c2 04 00             	ret    0x4
c000e997:	90                   	nop

c000e998 <KeSetupInterrupts()>:
c000e998:	83 ec 10             	sub    esp,0x10
c000e99b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9a3:	90                   	nop
c000e9a4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e9ac:	7f 5a                	jg     c000ea08 <KeSetupInterrupts()+0x70>
c000e9ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9b6:	66 90                	xchg   ax,ax
c000e9b8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e9bd:	7f 41                	jg     c000ea00 <KeSetupInterrupts()+0x68>
c000e9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ce:	01 d0                	add    eax,edx
c000e9d0:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ea:	01 d0                	add    eax,edx
c000e9ec:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e9f7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e9fc:	eb ba                	jmp    c000e9b8 <KeSetupInterrupts()+0x20>
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea05:	eb 9d                	jmp    c000e9a4 <KeSetupInterrupts()+0xc>
c000ea07:	90                   	nop
c000ea08:	90                   	nop
c000ea09:	83 c4 10             	add    esp,0x10
c000ea0c:	c3                   	ret    
c000ea0d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea10 <int_handler>:
c000ea10:	83 ec 2c             	sub    esp,0x2c
c000ea13:	90                   	nop
c000ea14:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000ea19:	0f b6 c0             	movzx  eax,al
c000ea1c:	85 c0                	test   eax,eax
c000ea1e:	74 04                	je     c000ea24 <int_handler+0x14>
c000ea20:	fa                   	cli    
c000ea21:	f4                   	hlt    
c000ea22:	eb f0                	jmp    c000ea14 <int_handler+0x4>
c000ea24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea28:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea2f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ea34:	7e 1a                	jle    c000ea50 <int_handler+0x40>
c000ea36:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000ea3b:	7f 13                	jg     c000ea50 <int_handler+0x40>
c000ea3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea41:	83 e8 20             	sub    eax,0x20
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	50                   	push   eax
c000ea48:	e8 93 b7 00 00       	call   c001a1e0 <HalEndOfInterrupt(int)>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea54:	c1 e0 04             	shl    eax,0x4
c000ea57:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000ea5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea64:	c1 e0 04             	shl    eax,0x4
c000ea67:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000ea6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea70:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ea78:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ea7d:	0f 8f ad 00 00 00    	jg     c000eb30 <int_handler+0x120>
c000ea83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea87:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea92:	01 d0                	add    eax,edx
c000ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea96:	85 c0                	test   eax,eax
c000ea98:	0f 84 86 00 00 00    	je     c000eb24 <int_handler+0x114>
c000ea9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000eaa5:	83 f8 60             	cmp    eax,0x60
c000eaa8:	75 46                	jne    c000eaf0 <int_handler+0xe0>
c000eaaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eab9:	01 d0                	add    eax,edx
c000eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eabd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eac1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eac8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eacc:	01 ca                	add    edx,ecx
c000eace:	8b 12                	mov    edx,DWORD PTR [edx]
c000ead0:	83 ec 08             	sub    esp,0x8
c000ead3:	52                   	push   edx
c000ead4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ead8:	ff d0                	call   eax
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eae1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eae9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaed:	eb 4d                	jmp    c000eb3c <int_handler+0x12c>
c000eaef:	90                   	nop
c000eaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaf4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eafb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaff:	01 d0                	add    eax,edx
c000eb01:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb07:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb12:	01 ca                	add    edx,ecx
c000eb14:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb16:	83 ec 08             	sub    esp,0x8
c000eb19:	52                   	push   edx
c000eb1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb1e:	ff d0                	call   eax
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	90                   	nop
c000eb24:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eb29:	e9 4a ff ff ff       	jmp    c000ea78 <int_handler+0x68>
c000eb2e:	66 90                	xchg   ax,ax
c000eb30:	b8 00 00 00 00       	mov    eax,0x0
c000eb35:	ba 00 00 00 00       	mov    edx,0x0
c000eb3a:	66 90                	xchg   ax,ax
c000eb3c:	83 c4 2c             	add    esp,0x2c
c000eb3f:	c3                   	ret    

c000eb40 <KeDisplayProgramFault(char const*)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	83 ec 0c             	sub    esp,0xc
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 15 84 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb57:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb5c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb62:	85 c0                	test   eax,eax
c000eb64:	74 22                	je     c000eb88 <KeDisplayProgramFault(char const*)+0x48>
c000eb66:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb70:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb76:	6a 04                	push   0x4
c000eb78:	6a 0f                	push   0xf
c000eb7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb7e:	50                   	push   eax
c000eb7f:	e8 22 3d 00 00       	call   c00128a6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	90                   	nop
c000eb88:	90                   	nop
c000eb89:	83 c4 0c             	add    esp,0xc
c000eb8c:	c3                   	ret    
c000eb8d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb90 <KeGeneralProtectionFault(void*, void*)>:
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	83 ec 08             	sub    esp,0x8
c000eb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 df ab 00 00       	call   c0019782 <HalHandleGeneralProtectionFault(void*, void*)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	0f b6 c0             	movzx  eax,al
c000eba9:	85 c0                	test   eax,eax
c000ebab:	75 2f                	jne    c000ebdc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000ebad:	83 ec 0c             	sub    esp,0xc
c000ebb0:	68 3c 3e 02 c0       	push   0xc0023e3c
c000ebb5:	e8 86 ff ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ebba:	83 c4 10             	add    esp,0x10
c000ebbd:	83 ec 0c             	sub    esp,0xc
c000ebc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc4:	e8 53 ad 00 00       	call   c001991c <HalDisplayDebugInfo(void*)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	6a 00                	push   0x0
c000ebd1:	e8 4a 8c 00 00       	call   c0017820 <Thr::terminateFromIRQ(int)>
c000ebd6:	83 c4 10             	add    esp,0x10
c000ebd9:	eb 05                	jmp    c000ebe0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000ebdb:	90                   	nop
c000ebdc:	90                   	nop
c000ebdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe0:	83 c4 0c             	add    esp,0xc
c000ebe3:	c3                   	ret    

c000ebe4 <KePageFault(void*, void*)>:
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	83 ec 0c             	sub    esp,0xc
c000ebea:	68 55 3e 02 c0       	push   0xc0023e55
c000ebef:	e8 70 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 26 ac 00 00       	call   c001982d <HalHandlePageFault(void*, void*)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	0f b6 c0             	movzx  eax,al
c000ec0d:	85 c0                	test   eax,eax
c000ec0f:	75 2f                	jne    c000ec40 <KePageFault(void*, void*)+0x5c>
c000ec11:	83 ec 0c             	sub    esp,0xc
c000ec14:	68 62 3e 02 c0       	push   0xc0023e62
c000ec19:	e8 22 ff ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	83 ec 0c             	sub    esp,0xc
c000ec24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec28:	e8 ef ac 00 00       	call   c001991c <HalDisplayDebugInfo(void*)>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	6a 00                	push   0x0
c000ec35:	e8 e6 8b 00 00       	call   c0017820 <Thr::terminateFromIRQ(int)>
c000ec3a:	83 c4 10             	add    esp,0x10
c000ec3d:	eb 05                	jmp    c000ec44 <KePageFault(void*, void*)+0x60>
c000ec3f:	90                   	nop
c000ec40:	90                   	nop
c000ec41:	8d 76 00             	lea    esi,[esi+0x0]
c000ec44:	83 c4 0c             	add    esp,0xc
c000ec47:	c3                   	ret    

c000ec48 <KeNonMaskableInterrupt(void*, void*)>:
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	e8 5a b0 00 00       	call   c0019caa <HalReceivedNMI()>
c000ec50:	90                   	nop
c000ec51:	83 c4 0c             	add    esp,0xc
c000ec54:	c3                   	ret    
c000ec55:	8d 76 00             	lea    esi,[esi+0x0]

c000ec58 <KeOtherFault(void*, void*)>:
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	83 ec 0c             	sub    esp,0xc
c000ec5e:	68 70 3e 02 c0       	push   0xc0023e70
c000ec63:	e8 d8 fe ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ec68:	83 c4 10             	add    esp,0x10
c000ec6b:	83 ec 0c             	sub    esp,0xc
c000ec6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec72:	e8 a5 ac 00 00       	call   c001991c <HalDisplayDebugInfo(void*)>
c000ec77:	83 c4 10             	add    esp,0x10
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	6a 00                	push   0x0
c000ec7f:	e8 9c 8b 00 00       	call   c0017820 <Thr::terminateFromIRQ(int)>
c000ec84:	83 c4 10             	add    esp,0x10
c000ec87:	90                   	nop
c000ec88:	83 c4 0c             	add    esp,0xc
c000ec8b:	c3                   	ret    

c000ec8c <KeOpcodeFault(void*, void*)>:
c000ec8c:	55                   	push   ebp
c000ec8d:	89 e5                	mov    ebp,esp
c000ec8f:	83 ec 08             	sub    esp,0x8
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ec98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec9b:	e8 3a ac 00 00       	call   c00198da <HalHandleOpcodeFault(void*, void*)>
c000eca0:	83 c4 10             	add    esp,0x10
c000eca3:	0f b6 c0             	movzx  eax,al
c000eca6:	85 c0                	test   eax,eax
c000eca8:	75 2e                	jne    c000ecd8 <KeOpcodeFault(void*, void*)+0x4c>
c000ecaa:	83 ec 0c             	sub    esp,0xc
c000ecad:	68 98 3e 02 c0       	push   0xc0023e98
c000ecb2:	e8 89 fe ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	83 ec 0c             	sub    esp,0xc
c000ecbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ecc0:	e8 57 ac 00 00       	call   c001991c <HalDisplayDebugInfo(void*)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	6a 00                	push   0x0
c000eccd:	e8 4e 8b 00 00       	call   c0017820 <Thr::terminateFromIRQ(int)>
c000ecd2:	83 c4 10             	add    esp,0x10
c000ecd5:	eb 05                	jmp    c000ecdc <KeOpcodeFault(void*, void*)+0x50>
c000ecd7:	90                   	nop
c000ecd8:	90                   	nop
c000ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecdc:	c9                   	leave  
c000ecdd:	c3                   	ret    
c000ecde:	66 90                	xchg   ax,ax

c000ece0 <KeDoubleFault(void*, void*)>:
c000ece0:	55                   	push   ebp
c000ece1:	89 e5                	mov    ebp,esp
c000ece3:	83 ec 08             	sub    esp,0x8
c000ece6:	83 ec 0c             	sub    esp,0xc
c000ece9:	68 a5 3e 02 c0       	push   0xc0023ea5
c000ecee:	e8 eb 12 00 00       	call   c000ffde <KePanic(char const*)>
c000ecf3:	83 c4 10             	add    esp,0x10
c000ecf6:	90                   	nop
c000ecf7:	c9                   	leave  
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <GDTEntry::setBase(unsigned int)>:
c000ecfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed02:	89 c1                	mov    ecx,eax
c000ed04:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ed08:	c1 e9 10             	shr    ecx,0x10
c000ed0b:	c1 e8 18             	shr    eax,0x18
c000ed0e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ed11:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ed14:	c3                   	ret    
c000ed15:	90                   	nop

c000ed16 <GDTEntry::setLimit(unsigned int)>:
c000ed16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed1e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ed21:	66 89 01             	mov    WORD PTR [ecx],ax
c000ed24:	83 e2 f0             	and    edx,0xfffffff0
c000ed27:	c1 e8 10             	shr    eax,0x10
c000ed2a:	83 e0 0f             	and    eax,0xf
c000ed2d:	09 d0                	or     eax,edx
c000ed2f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ed32:	c3                   	ret    
c000ed33:	90                   	nop

c000ed34 <GDT::GDT()>:
c000ed34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed48:	90                   	nop
c000ed49:	c3                   	ret    

c000ed4a <GDT::addEntry(GDTEntry)>:
c000ed4a:	53                   	push   ebx
c000ed4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed53:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed59:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed5d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed61:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed64:	c1 e0 03             	shl    eax,0x3
c000ed67:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed69:	5b                   	pop    ebx
c000ed6a:	c3                   	ret    
c000ed6b:	90                   	nop

c000ed6c <GDT::getNumberOfEntries()>:
c000ed6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed72:	c3                   	ret    
c000ed73:	90                   	nop

c000ed74 <GDT::flush()>:
c000ed74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed78:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed7a:	83 c0 04             	add    eax,0x4
c000ed7d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed84:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ed89:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ed90:	e9 c5 15 ff ff       	jmp    c000035a <loadGDT>
c000ed95:	90                   	nop

c000ed96 <GDT::setup()>:
c000ed96:	57                   	push   edi
c000ed97:	56                   	push   esi
c000ed98:	53                   	push   ebx
c000ed99:	83 ec 30             	sub    esp,0x30
c000ed9c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eda0:	6a 00                	push   0x0
c000eda2:	8d 74 24 14          	lea    esi,[esp+0x14]
c000eda6:	56                   	push   esi
c000eda7:	e8 4e ff ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000edac:	6a 00                	push   0x0
c000edae:	56                   	push   esi
c000edaf:	e8 62 ff ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c000edb4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000edbc:	6a 00                	push   0x0
c000edbe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000edc2:	56                   	push   esi
c000edc3:	e8 32 ff ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000edc8:	68 ff ff ff 00       	push   0xffffff
c000edcd:	56                   	push   esi
c000edce:	e8 43 ff ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c000edd3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eddb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000eddf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ede3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ede8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eded:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf5:	89 f8                	mov    eax,edi
c000edf7:	89 fa                	mov    edx,edi
c000edf9:	80 e4 f7             	and    ah,0xf7
c000edfc:	80 ce 60             	or     dh,0x60
c000edff:	89 c7                	mov    edi,eax
c000ee01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ee05:	80 cc 60             	or     ah,0x60
c000ee08:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ee0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee10:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ee14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee1c:	83 c4 20             	add    esp,0x20
c000ee1f:	6a 00                	push   0x0
c000ee21:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ee25:	50                   	push   eax
c000ee26:	e8 cf fe ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000ee2b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ee2f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ee33:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ee37:	83 e0 3f             	and    eax,0x3f
c000ee3a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee3e:	6a 00                	push   0x0
c000ee40:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee44:	50                   	push   eax
c000ee45:	e8 b0 fe ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000ee4a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee4e:	83 e0 3f             	and    eax,0x3f
c000ee51:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee55:	83 c4 0c             	add    esp,0xc
c000ee58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee60:	53                   	push   ebx
c000ee61:	e8 e4 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee66:	83 c4 0c             	add    esp,0xc
c000ee69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee71:	53                   	push   ebx
c000ee72:	e8 d3 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee77:	83 c4 0c             	add    esp,0xc
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	53                   	push   ebx
c000ee7d:	e8 c8 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee82:	83 c4 0c             	add    esp,0xc
c000ee85:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee89:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee8d:	53                   	push   ebx
c000ee8e:	e8 b7 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee93:	83 c4 0c             	add    esp,0xc
c000ee96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee9e:	53                   	push   ebx
c000ee9f:	e8 a6 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eea4:	83 c4 0c             	add    esp,0xc
c000eea7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeaf:	53                   	push   ebx
c000eeb0:	e8 95 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eeb5:	83 c4 0c             	add    esp,0xc
c000eeb8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eebc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eec0:	53                   	push   ebx
c000eec1:	e8 84 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec9:	e8 a6 fe ff ff       	call   c000ed74 <GDT::flush()>
c000eece:	83 c4 40             	add    esp,0x40
c000eed1:	5b                   	pop    ebx
c000eed2:	5e                   	pop    esi
c000eed3:	5f                   	pop    edi
c000eed4:	c3                   	ret    

c000eed5 <idleFunction(void*)>:
c000eed5:	83 ec 0c             	sub    esp,0xc
c000eed8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000eedf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000eee6:	75 01                	jne    c000eee9 <idleFunction(void*)+0x14>
c000eee8:	fb                   	sti    
c000eee9:	e8 57 ae 00 00       	call   c0019d45 <HalSystemIdle()>
c000eeee:	e8 43 30 01 00       	call   c0021f36 <idleCommon()>
c000eef3:	eb f4                	jmp    c000eee9 <idleFunction(void*)+0x14>
c000eef5:	66 90                	xchg   ax,ax
c000eef7:	90                   	nop

c000eef8 <IDTEntry::IDTEntry(bool)>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 04             	sub    esp,0x4
c000eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef00:	88 04 24             	mov    BYTE PTR [esp],al
c000ef03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ef0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ef15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1c:	83 e2 f0             	and    edx,0xfffffff0
c000ef1f:	83 ca 0e             	or     edx,0xe
c000ef22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2c:	83 e2 ef             	and    edx,0xffffffef
c000ef2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef36:	85 c0                	test   eax,eax
c000ef38:	74 06                	je     c000ef40 <IDTEntry::IDTEntry(bool)+0x48>
c000ef3a:	b2 03                	mov    dl,0x3
c000ef3c:	eb 06                	jmp    c000ef44 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef3e:	66 90                	xchg   ax,ax
c000ef40:	b2 00                	mov    dl,0x0
c000ef42:	66 90                	xchg   ax,ax
c000ef44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef48:	83 e2 03             	and    edx,0x3
c000ef4b:	89 d3                	mov    ebx,edx
c000ef4d:	c1 e3 05             	shl    ebx,0x5
c000ef50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef53:	83 e2 9f             	and    edx,0xffffff9f
c000ef56:	88 d1                	mov    cl,dl
c000ef58:	88 da                	mov    dl,bl
c000ef5a:	09 ca                	or     edx,ecx
c000ef5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef66:	83 ca 80             	or     edx,0xffffff80
c000ef69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef6c:	90                   	nop
c000ef6d:	83 c4 04             	add    esp,0x4
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDTEntry::setOffset(unsigned int)>:
c000ef72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef7a:	66 89 02             	mov    WORD PTR [edx],ax
c000ef7d:	c1 e8 10             	shr    eax,0x10
c000ef80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef84:	c3                   	ret    
c000ef85:	90                   	nop
c000ef86:	66 90                	xchg   ax,ax

c000ef88 <IDT::IDT()>:
c000ef88:	90                   	nop
c000ef89:	c3                   	ret    

c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef8e:	83 c0 30             	add    eax,0x30
c000ef91:	c3                   	ret    

c000ef92 <IDT::addEntry(IDTEntry, int)>:
c000ef92:	53                   	push   ebx
c000ef93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000efa3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000efa6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000efaa:	5b                   	pop    ebx
c000efab:	c3                   	ret    

c000efac <IDT::addEntry(int, void (*)(), bool)>:
c000efac:	53                   	push   ebx
c000efad:	83 ec 10             	sub    esp,0x10
c000efb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000efb5:	50                   	push   eax
c000efb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000efba:	53                   	push   ebx
c000efbb:	e8 38 ff ff ff       	call   c000eef8 <IDTEntry::IDTEntry(bool)>
c000efc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000efc4:	53                   	push   ebx
c000efc5:	e8 a8 ff ff ff       	call   c000ef72 <IDTEntry::setOffset(unsigned int)>
c000efca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efda:	e8 b3 ff ff ff       	call   c000ef92 <IDT::addEntry(IDTEntry, int)>
c000efdf:	83 c4 30             	add    esp,0x30
c000efe2:	5b                   	pop    ebx
c000efe3:	c3                   	ret    

c000efe4 <IDT::flush()>:
c000efe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efe8:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000eff1:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000eff6:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000effd:	c3                   	ret    

c000effe <IDT::setup()>:
c000effe:	57                   	push   edi
c000efff:	56                   	push   esi
c000f000:	53                   	push   ebx
c000f001:	83 ec 10             	sub    esp,0x10
c000f004:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f008:	6a 00                	push   0x0
c000f00a:	68 10 12 02 c0       	push   0xc0021210
c000f00f:	6a 00                	push   0x0
c000f011:	53                   	push   ebx
c000f012:	e8 95 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f017:	6a 00                	push   0x0
c000f019:	68 20 12 02 c0       	push   0xc0021220
c000f01e:	6a 01                	push   0x1
c000f020:	53                   	push   ebx
c000f021:	e8 86 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f026:	83 c4 20             	add    esp,0x20
c000f029:	6a 00                	push   0x0
c000f02b:	68 2a 12 02 c0       	push   0xc002122a
c000f030:	6a 02                	push   0x2
c000f032:	53                   	push   ebx
c000f033:	e8 74 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f038:	6a 00                	push   0x0
c000f03a:	68 34 12 02 c0       	push   0xc0021234
c000f03f:	6a 03                	push   0x3
c000f041:	53                   	push   ebx
c000f042:	e8 65 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	6a 00                	push   0x0
c000f04c:	68 3e 12 02 c0       	push   0xc002123e
c000f051:	6a 04                	push   0x4
c000f053:	53                   	push   ebx
c000f054:	e8 53 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f059:	6a 00                	push   0x0
c000f05b:	68 48 12 02 c0       	push   0xc0021248
c000f060:	6a 05                	push   0x5
c000f062:	53                   	push   ebx
c000f063:	e8 44 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f068:	83 c4 20             	add    esp,0x20
c000f06b:	6a 00                	push   0x0
c000f06d:	68 52 12 02 c0       	push   0xc0021252
c000f072:	6a 06                	push   0x6
c000f074:	53                   	push   ebx
c000f075:	e8 32 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	6a 00                	push   0x0
c000f07c:	68 5c 12 02 c0       	push   0xc002125c
c000f081:	6a 07                	push   0x7
c000f083:	53                   	push   ebx
c000f084:	e8 23 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f089:	83 c4 20             	add    esp,0x20
c000f08c:	6a 00                	push   0x0
c000f08e:	68 66 12 02 c0       	push   0xc0021266
c000f093:	6a 08                	push   0x8
c000f095:	53                   	push   ebx
c000f096:	e8 11 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	6a 00                	push   0x0
c000f09d:	68 6e 12 02 c0       	push   0xc002126e
c000f0a2:	6a 09                	push   0x9
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 02 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	83 c4 20             	add    esp,0x20
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 78 12 02 c0       	push   0xc0021278
c000f0b4:	6a 0a                	push   0xa
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 f0 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 80 12 02 c0       	push   0xc0021280
c000f0c3:	6a 0b                	push   0xb
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 e1 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 88 12 02 c0       	push   0xc0021288
c000f0d5:	6a 0c                	push   0xc
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 cf fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 90 12 02 c0       	push   0xc0021290
c000f0e4:	6a 0d                	push   0xd
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 c0 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	83 c4 20             	add    esp,0x20
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 aa 12 02 c0       	push   0xc00212aa
c000f0f6:	6a 0e                	push   0xe
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 ae fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	6a 00                	push   0x0
c000f100:	68 b2 12 02 c0       	push   0xc00212b2
c000f105:	6a 0f                	push   0xf
c000f107:	53                   	push   ebx
c000f108:	e8 9f fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	6a 00                	push   0x0
c000f112:	68 bc 12 02 c0       	push   0xc00212bc
c000f117:	6a 10                	push   0x10
c000f119:	53                   	push   ebx
c000f11a:	e8 8d fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	6a 00                	push   0x0
c000f121:	68 c6 12 02 c0       	push   0xc00212c6
c000f126:	6a 11                	push   0x11
c000f128:	53                   	push   ebx
c000f129:	e8 7e fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	83 c4 20             	add    esp,0x20
c000f131:	6a 00                	push   0x0
c000f133:	68 d0 12 02 c0       	push   0xc00212d0
c000f138:	6a 12                	push   0x12
c000f13a:	53                   	push   ebx
c000f13b:	e8 6c fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f140:	6a 01                	push   0x1
c000f142:	68 6a 13 02 c0       	push   0xc002136a
c000f147:	6a 60                	push   0x60
c000f149:	53                   	push   ebx
c000f14a:	e8 5d fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	83 c4 20             	add    esp,0x20
c000f152:	6a 00                	push   0x0
c000f154:	68 71 13 02 c0       	push   0xc0021371
c000f159:	6a 20                	push   0x20
c000f15b:	53                   	push   ebx
c000f15c:	e8 4b fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f161:	6a 00                	push   0x0
c000f163:	68 5c 13 02 c0       	push   0xc002135c
c000f168:	6a 21                	push   0x21
c000f16a:	53                   	push   ebx
c000f16b:	e8 3c fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f170:	83 c4 20             	add    esp,0x20
c000f173:	6a 00                	push   0x0
c000f175:	68 63 13 02 c0       	push   0xc0021363
c000f17a:	6a 22                	push   0x22
c000f17c:	53                   	push   ebx
c000f17d:	e8 2a fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f182:	6a 00                	push   0x0
c000f184:	68 da 12 02 c0       	push   0xc00212da
c000f189:	6a 23                	push   0x23
c000f18b:	53                   	push   ebx
c000f18c:	e8 1b fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	6a 00                	push   0x0
c000f196:	68 e4 12 02 c0       	push   0xc00212e4
c000f19b:	6a 24                	push   0x24
c000f19d:	53                   	push   ebx
c000f19e:	e8 09 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 ee 12 02 c0       	push   0xc00212ee
c000f1aa:	6a 25                	push   0x25
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 fa fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	83 c4 20             	add    esp,0x20
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 f8 12 02 c0       	push   0xc00212f8
c000f1bc:	6a 26                	push   0x26
c000f1be:	53                   	push   ebx
c000f1bf:	e8 e8 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 02 13 02 c0       	push   0xc0021302
c000f1cb:	6a 27                	push   0x27
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 d9 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	83 c4 20             	add    esp,0x20
c000f1d6:	6a 00                	push   0x0
c000f1d8:	68 0c 13 02 c0       	push   0xc002130c
c000f1dd:	6a 28                	push   0x28
c000f1df:	53                   	push   ebx
c000f1e0:	e8 c7 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1e5:	6a 00                	push   0x0
c000f1e7:	68 16 13 02 c0       	push   0xc0021316
c000f1ec:	6a 29                	push   0x29
c000f1ee:	53                   	push   ebx
c000f1ef:	e8 b8 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1f4:	83 c4 20             	add    esp,0x20
c000f1f7:	6a 00                	push   0x0
c000f1f9:	68 20 13 02 c0       	push   0xc0021320
c000f1fe:	6a 2a                	push   0x2a
c000f200:	53                   	push   ebx
c000f201:	e8 a6 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f206:	6a 00                	push   0x0
c000f208:	68 2a 13 02 c0       	push   0xc002132a
c000f20d:	6a 2b                	push   0x2b
c000f20f:	53                   	push   ebx
c000f210:	e8 97 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f215:	83 c4 20             	add    esp,0x20
c000f218:	6a 00                	push   0x0
c000f21a:	68 34 13 02 c0       	push   0xc0021334
c000f21f:	6a 2c                	push   0x2c
c000f221:	53                   	push   ebx
c000f222:	e8 85 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f227:	6a 00                	push   0x0
c000f229:	68 3e 13 02 c0       	push   0xc002133e
c000f22e:	6a 2d                	push   0x2d
c000f230:	53                   	push   ebx
c000f231:	e8 76 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f236:	83 c4 20             	add    esp,0x20
c000f239:	6a 00                	push   0x0
c000f23b:	68 48 13 02 c0       	push   0xc0021348
c000f240:	6a 2e                	push   0x2e
c000f242:	53                   	push   ebx
c000f243:	e8 64 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f248:	6a 00                	push   0x0
c000f24a:	68 52 13 02 c0       	push   0xc0021352
c000f24f:	6a 2f                	push   0x2f
c000f251:	53                   	push   ebx
c000f252:	e8 55 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f257:	83 c4 20             	add    esp,0x20
c000f25a:	6a 00                	push   0x0
c000f25c:	68 74 14 02 c0       	push   0xc0021474
c000f261:	6a 30                	push   0x30
c000f263:	53                   	push   ebx
c000f264:	e8 43 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f269:	6a 00                	push   0x0
c000f26b:	68 7e 14 02 c0       	push   0xc002147e
c000f270:	6a 31                	push   0x31
c000f272:	53                   	push   ebx
c000f273:	e8 34 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f278:	83 c4 20             	add    esp,0x20
c000f27b:	6a 00                	push   0x0
c000f27d:	68 88 14 02 c0       	push   0xc0021488
c000f282:	6a 32                	push   0x32
c000f284:	53                   	push   ebx
c000f285:	e8 22 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f28a:	6a 00                	push   0x0
c000f28c:	68 92 14 02 c0       	push   0xc0021492
c000f291:	6a 33                	push   0x33
c000f293:	53                   	push   ebx
c000f294:	e8 13 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f299:	83 c4 20             	add    esp,0x20
c000f29c:	6a 00                	push   0x0
c000f29e:	68 9c 14 02 c0       	push   0xc002149c
c000f2a3:	6a 34                	push   0x34
c000f2a5:	53                   	push   ebx
c000f2a6:	e8 01 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2ab:	6a 00                	push   0x0
c000f2ad:	68 a6 14 02 c0       	push   0xc00214a6
c000f2b2:	6a 35                	push   0x35
c000f2b4:	53                   	push   ebx
c000f2b5:	e8 f2 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2ba:	83 c4 20             	add    esp,0x20
c000f2bd:	6a 00                	push   0x0
c000f2bf:	68 b0 14 02 c0       	push   0xc00214b0
c000f2c4:	6a 36                	push   0x36
c000f2c6:	53                   	push   ebx
c000f2c7:	e8 e0 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2cc:	6a 00                	push   0x0
c000f2ce:	68 ba 14 02 c0       	push   0xc00214ba
c000f2d3:	6a 37                	push   0x37
c000f2d5:	53                   	push   ebx
c000f2d6:	e8 d1 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2db:	83 c4 1c             	add    esp,0x1c
c000f2de:	6a 03                	push   0x3
c000f2e0:	6a 02                	push   0x2
c000f2e2:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f2e8:	e8 67 49 00 00       	call   c0013c54 <VAS::allocatePages(int, int)>
c000f2ed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2f4:	89 c6                	mov    esi,eax
c000f2f6:	e8 9c 09 00 00       	call   c000fc97 <malloc>
c000f2fb:	81 c6 00 20 00 00    	add    esi,0x2000
c000f301:	89 04 24             	mov    DWORD PTR [esp],eax
c000f304:	89 c7                	mov    edi,eax
c000f306:	e8 05 3a 00 00       	call   c0012d10 <TSS::TSS()>
c000f30b:	83 c4 0c             	add    esp,0xc
c000f30e:	68 66 12 02 c0       	push   0xc0021266
c000f313:	56                   	push   esi
c000f314:	57                   	push   edi
c000f315:	e8 3a 3a 00 00       	call   c0012d54 <TSS::setup(unsigned long, unsigned long)>
c000f31a:	89 c6                	mov    esi,eax
c000f31c:	58                   	pop    eax
c000f31d:	5a                   	pop    edx
c000f31e:	6a 00                	push   0x0
c000f320:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f324:	50                   	push   eax
c000f325:	e8 ce fb ff ff       	call   c000eef8 <IDTEntry::IDTEntry(bool)>
c000f32a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f32e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f333:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f33a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f344:	80 ce 05             	or     dh,0x5
c000f347:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f34a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f34e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f352:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f358:	e8 87 fc ff ff       	call   c000efe4 <IDT::flush()>
c000f35d:	83 c4 20             	add    esp,0x20
c000f360:	5b                   	pop    ebx
c000f361:	5e                   	pop    esi
c000f362:	5f                   	pop    edi
c000f363:	c3                   	ret    

c000f364 <CPU::current()>:
c000f364:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f369:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f36f:	c3                   	ret    

c000f370 <operator new(unsigned long)>:
c000f370:	e9 22 09 00 00       	jmp    c000fc97 <malloc>

c000f375 <operator delete(void*)>:
c000f375:	e9 3d 09 00 00       	jmp    c000fcb7 <rfree>

c000f37a <disableIRQs()>:
c000f37a:	fa                   	cli    
c000f37b:	c3                   	ret    

c000f37c <enableIRQs()>:
c000f37c:	fb                   	sti    
c000f37d:	c3                   	ret    

c000f37e <lockScheduler()>:
c000f37e:	fa                   	cli    
c000f37f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f385:	c3                   	ret    

c000f386 <unlockScheduler()>:
c000f386:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f38d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f394:	75 01                	jne    c000f397 <unlockScheduler()+0x11>
c000f396:	fb                   	sti    
c000f397:	c3                   	ret    

c000f398 <lockStuff()>:
c000f398:	fa                   	cli    
c000f399:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f39f:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f3a5:	c3                   	ret    

c000f3a6 <unlockStuff()>:
c000f3a6:	83 ec 0c             	sub    esp,0xc
c000f3a9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f3ae:	48                   	dec    eax
c000f3af:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f3b4:	75 18                	jne    c000f3ce <unlockStuff()+0x28>
c000f3b6:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f3bd:	74 0f                	je     c000f3ce <unlockStuff()+0x28>
c000f3bf:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f3c9:	e8 42 7b 00 00       	call   c0016f10 <schedule()>
c000f3ce:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f3d5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f3dc:	75 01                	jne    c000f3df <unlockStuff()+0x39>
c000f3de:	fb                   	sti    
c000f3df:	83 c4 0c             	add    esp,0xc
c000f3e2:	c3                   	ret    

c000f3e3 <Virt::getAKernelVAS()>:
c000f3e3:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f3e8:	c3                   	ret    

c000f3e9 <__not_memcpy>:
c000f3e9:	57                   	push   edi
c000f3ea:	56                   	push   esi
c000f3eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3f7:	89 c7                	mov    edi,eax
c000f3f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3fb:	5e                   	pop    esi
c000f3fc:	5f                   	pop    edi
c000f3fd:	c3                   	ret    

c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>:
c000f3fe:	55                   	push   ebp
c000f3ff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f404:	57                   	push   edi
c000f405:	56                   	push   esi
c000f406:	53                   	push   ebx
c000f407:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f40c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f412:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f419:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f41e:	99                   	cdq    
c000f41f:	f7 f9                	idiv   ecx
c000f421:	89 d5                	mov    ebp,edx
c000f423:	99                   	cdq    
c000f424:	f7 f9                	idiv   ecx
c000f426:	8d 42 30             	lea    eax,[edx+0x30]
c000f429:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f42d:	8d 45 30             	lea    eax,[ebp+0x30]
c000f430:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f434:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f43b:	99                   	cdq    
c000f43c:	f7 fb                	idiv   ebx
c000f43e:	bb 64 00 00 00       	mov    ebx,0x64
c000f443:	99                   	cdq    
c000f444:	f7 f9                	idiv   ecx
c000f446:	8d 42 30             	lea    eax,[edx+0x30]
c000f449:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f44d:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f454:	99                   	cdq    
c000f455:	f7 fb                	idiv   ebx
c000f457:	31 db                	xor    ebx,ebx
c000f459:	99                   	cdq    
c000f45a:	f7 f9                	idiv   ecx
c000f45c:	8d 42 30             	lea    eax,[edx+0x30]
c000f45f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f463:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f46f:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f476:	83 f9 59             	cmp    ecx,0x59
c000f479:	74 1c                	je     c000f497 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f47b:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f482:	83 f9 4d             	cmp    ecx,0x4d
c000f485:	0f 84 e3 00 00 00    	je     c000f56e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f48b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f492:	e9 d7 00 00 00       	jmp    c000f56e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f497:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f49c:	74 27                	je     c000f4c5 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f49e:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4b7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f4bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f4c3:	eb 15                	jmp    c000f4da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f4c5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4d1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4d5:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f4da:	50                   	push   eax
c000f4db:	50                   	push   eax
c000f4dc:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f4e0:	57                   	push   edi
c000f4e1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f4e5:	56                   	push   esi
c000f4e6:	e8 55 13 ff ff       	call   c0000840 <strcat>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	83 fb 02             	cmp    ebx,0x2
c000f4f1:	74 1a                	je     c000f50d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f4f3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4f8:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c000f4fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f501:	55                   	push   ebp
c000f502:	55                   	push   ebp
c000f503:	57                   	push   edi
c000f504:	56                   	push   esi
c000f505:	e8 36 13 ff ff       	call   c0000840 <strcat>
c000f50a:	83 c4 10             	add    esp,0x10
c000f50d:	43                   	inc    ebx
c000f50e:	83 fb 03             	cmp    ebx,0x3
c000f511:	0f 85 58 ff ff ff    	jne    c000f46f <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f517:	51                   	push   ecx
c000f518:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f51f:	6a 00                	push   0x0
c000f521:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f528:	e8 c3 0f ff ff       	call   c00004f0 <memset>
c000f52d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f530:	e8 3b 10 ff ff       	call   c0000570 <strlen>
c000f535:	83 c4 10             	add    esp,0x10
c000f538:	40                   	inc    eax
c000f539:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f540:	72 17                	jb     c000f559 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f542:	52                   	push   edx
c000f543:	52                   	push   edx
c000f544:	56                   	push   esi
c000f545:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f54c:	e8 ef 10 ff ff       	call   c0000640 <strcpy>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	e9 8a 00 00 00       	jmp    c000f5e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f559:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f560:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f567:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f56a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f56c:	eb 75                	jmp    c000f5e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f56e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f572:	89 ef                	mov    edi,ebp
c000f574:	50                   	push   eax
c000f575:	c1 ff 1f             	sar    edi,0x1f
c000f578:	50                   	push   eax
c000f579:	57                   	push   edi
c000f57a:	55                   	push   ebp
c000f57b:	e8 70 04 00 00       	call   c000f9f0 <KeGetDigitsInNumber(long long)>
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	48                   	dec    eax
c000f584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f588:	75 1c                	jne    c000f5a6 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f58a:	83 f9 44             	cmp    ecx,0x44
c000f58d:	75 09                	jne    c000f598 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f58f:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f596:	eb 0c                	jmp    c000f5a4 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f598:	83 f9 4d             	cmp    ecx,0x4d
c000f59b:	75 2b                	jne    c000f5c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f59d:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f5a4:	74 22                	je     c000f5c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5a6:	89 e8                	mov    eax,ebp
c000f5a8:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5ad:	99                   	cdq    
c000f5ae:	f7 f9                	idiv   ecx
c000f5b0:	89 d5                	mov    ebp,edx
c000f5b2:	99                   	cdq    
c000f5b3:	f7 f9                	idiv   ecx
c000f5b5:	83 c2 30             	add    edx,0x30
c000f5b8:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5bc:	8d 55 30             	lea    edx,[ebp+0x30]
c000f5bf:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f5c3:	e9 0d ff ff ff       	jmp    c000f4d5 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f5c8:	89 e8                	mov    eax,ebp
c000f5ca:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5cf:	99                   	cdq    
c000f5d0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f5d5:	f7 f9                	idiv   ecx
c000f5d7:	83 c2 30             	add    edx,0x30
c000f5da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5de:	e9 f7 fe ff ff       	jmp    c000f4da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f5e3:	81 c4 ac 00 00 00    	add    esp,0xac
c000f5e9:	5b                   	pop    ebx
c000f5ea:	5e                   	pop    esi
c000f5eb:	5f                   	pop    edi
c000f5ec:	5d                   	pop    ebp
c000f5ed:	c3                   	ret    

c000f5ee <KeFormatShortDate(char*, int, int, int, int)>:
c000f5ee:	83 ec 14             	sub    esp,0x14
c000f5f1:	6a 00                	push   0x0
c000f5f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f603:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f607:	e8 f2 fd ff ff       	call   c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f60c:	83 c4 2c             	add    esp,0x2c
c000f60f:	c3                   	ret    

c000f610 <KeFormatLongDate(char*, int, int, int, int)>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	6a 01                	push   0x1
c000f615:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f619:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f61d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f629:	e8 d0 fd ff ff       	call   c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f62e:	83 c4 2c             	add    esp,0x2c
c000f631:	c3                   	ret    

c000f632 <KeSetLocale(klocale_t)>:
c000f632:	57                   	push   edi
c000f633:	b9 09 00 00 00       	mov    ecx,0x9
c000f638:	56                   	push   esi
c000f639:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f63e:	fc                   	cld    
c000f63f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f643:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f645:	5e                   	pop    esi
c000f646:	5f                   	pop    edi
c000f647:	c3                   	ret    

c000f648 <KeInitialiseLocale()>:
c000f648:	57                   	push   edi
c000f649:	56                   	push   esi
c000f64a:	83 ec 3c             	sub    esp,0x3c
c000f64d:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f655:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f65d:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f665:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f66d:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f674:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f67c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f684:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f68b:	68 b2 3e 02 c0       	push   0xc0023eb2
c000f690:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f694:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f698:	50                   	push   eax
c000f699:	e8 a2 0f ff ff       	call   c0000640 <strcpy>
c000f69e:	83 ec 20             	sub    esp,0x20
c000f6a1:	b9 09 00 00 00       	mov    ecx,0x9
c000f6a6:	fc                   	cld    
c000f6a7:	89 e7                	mov    edi,esp
c000f6a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6ab:	e8 82 ff ff ff       	call   c000f632 <KeSetLocale(klocale_t)>
c000f6b0:	83 c4 64             	add    esp,0x64
c000f6b3:	5e                   	pop    esi
c000f6b4:	5f                   	pop    edi
c000f6b5:	c3                   	ret    

c000f6b6 <KeFormatCurrency(char*, int, long long, long long)>:
c000f6b6:	c3                   	ret    

c000f6b7 <KeFormatCurrency(char*, int, double)>:
c000f6b7:	c3                   	ret    

c000f6b8 <KeFormatNumber(char*, long long, long long)>:
c000f6b8:	c3                   	ret    

c000f6b9 <KeFormatNumber(char*, double)>:
c000f6b9:	c3                   	ret    
c000f6ba:	66 90                	xchg   ax,ax

c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f6bc:	55                   	push   ebp
c000f6bd:	57                   	push   edi
c000f6be:	56                   	push   esi
c000f6bf:	53                   	push   ebx
c000f6c0:	83 ec 5c             	sub    esp,0x5c
c000f6c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f6c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f6cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f6cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f6d3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f6d7:	bb 2f 2c 02 c0       	mov    ebx,0xc0022c2f
c000f6dc:	bd 11 00 00 00       	mov    ebp,0x11
c000f6e1:	89 d0                	mov    eax,edx
c000f6e3:	83 e0 01             	and    eax,0x1
c000f6e6:	74 10                	je     c000f6f8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f6e8:	8a 03                	mov    al,BYTE PTR [ebx]
c000f6ea:	88 02                	mov    BYTE PTR [edx],al
c000f6ec:	8d 52 01             	lea    edx,[edx+0x1]
c000f6ef:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f6f2:	83 ed 01             	sub    ebp,0x1
c000f6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6f8:	89 d0                	mov    eax,edx
c000f6fa:	83 e0 02             	and    eax,0x2
c000f6fd:	74 11                	je     c000f710 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f6ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f702:	66 89 02             	mov    WORD PTR [edx],ax
c000f705:	8d 52 02             	lea    edx,[edx+0x2]
c000f708:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f70b:	83 ed 02             	sub    ebp,0x2
c000f70e:	66 90                	xchg   ax,ax
c000f710:	89 e8                	mov    eax,ebp
c000f712:	c1 e8 02             	shr    eax,0x2
c000f715:	fc                   	cld    
c000f716:	89 d7                	mov    edi,edx
c000f718:	89 de                	mov    esi,ebx
c000f71a:	89 c1                	mov    ecx,eax
c000f71c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f71e:	89 f3                	mov    ebx,esi
c000f720:	89 fa                	mov    edx,edi
c000f722:	b9 00 00 00 00       	mov    ecx,0x0
c000f727:	89 e8                	mov    eax,ebp
c000f729:	83 e0 02             	and    eax,0x2
c000f72c:	74 0e                	je     c000f73c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f72e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f732:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f736:	8d 41 02             	lea    eax,[ecx+0x2]
c000f739:	89 c1                	mov    ecx,eax
c000f73b:	90                   	nop
c000f73c:	89 e8                	mov    eax,ebp
c000f73e:	83 e0 01             	and    eax,0x1
c000f741:	74 09                	je     c000f74c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f743:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f746:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f749:	8d 76 00             	lea    esi,[esi+0x0]
c000f74c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f750:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f758:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f75c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f760:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f764:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f769:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f76d:	89 c2                	mov    edx,eax
c000f76f:	c1 fa 1f             	sar    edx,0x1f
c000f772:	52                   	push   edx
c000f773:	50                   	push   eax
c000f774:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f778:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f77c:	e8 e3 20 01 00       	call   c0021864 <__udivdi3>
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f788:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f78c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f790:	80 f4 00             	xor    ah,0x0
c000f793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f797:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f79b:	80 f4 00             	xor    ah,0x0
c000f79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f7a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f7aa:	89 f8                	mov    eax,edi
c000f7ac:	09 f0                	or     eax,esi
c000f7ae:	74 04                	je     c000f7b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f7b0:	eb b2                	jmp    c000f764 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7bb:	90                   	nop
c000f7bc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7c0:	89 c1                	mov    ecx,eax
c000f7c2:	89 c3                	mov    ebx,eax
c000f7c4:	c1 fb 1f             	sar    ebx,0x1f
c000f7c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7cf:	53                   	push   ebx
c000f7d0:	51                   	push   ecx
c000f7d1:	52                   	push   edx
c000f7d2:	50                   	push   eax
c000f7d3:	e8 8c 21 01 00       	call   c0021964 <__umoddi3>
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f7e0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f7e4:	01 c8                	add    eax,ecx
c000f7e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ec:	88 10                	mov    BYTE PTR [eax],dl
c000f7ee:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7f2:	89 c2                	mov    edx,eax
c000f7f4:	c1 fa 1f             	sar    edx,0x1f
c000f7f7:	52                   	push   edx
c000f7f8:	50                   	push   eax
c000f7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f801:	e8 5e 20 01 00       	call   c0021864 <__udivdi3>
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f80d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f815:	80 f4 00             	xor    ah,0x0
c000f818:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f81c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f820:	80 f4 00             	xor    ah,0x0
c000f823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f82b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f82f:	89 f8                	mov    eax,edi
c000f831:	09 f0                	or     eax,esi
c000f833:	74 03                	je     c000f838 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f835:	eb 85                	jmp    c000f7bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f837:	90                   	nop
c000f838:	90                   	nop
c000f839:	83 c4 5c             	add    esp,0x5c
c000f83c:	5b                   	pop    ebx
c000f83d:	5e                   	pop    esi
c000f83e:	5f                   	pop    edi
c000f83f:	5d                   	pop    ebp
c000f840:	c3                   	ret    
c000f841:	8d 76 00             	lea    esi,[esi+0x0]

c000f844 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f844:	55                   	push   ebp
c000f845:	57                   	push   edi
c000f846:	56                   	push   esi
c000f847:	53                   	push   ebx
c000f848:	83 ec 5c             	sub    esp,0x5c
c000f84b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f84f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f853:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f85b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f85f:	bb 2f 2c 02 c0       	mov    ebx,0xc0022c2f
c000f864:	bd 11 00 00 00       	mov    ebp,0x11
c000f869:	89 d0                	mov    eax,edx
c000f86b:	83 e0 01             	and    eax,0x1
c000f86e:	74 10                	je     c000f880 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f870:	8a 03                	mov    al,BYTE PTR [ebx]
c000f872:	88 02                	mov    BYTE PTR [edx],al
c000f874:	8d 52 01             	lea    edx,[edx+0x1]
c000f877:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f87a:	83 ed 01             	sub    ebp,0x1
c000f87d:	8d 76 00             	lea    esi,[esi+0x0]
c000f880:	89 d0                	mov    eax,edx
c000f882:	83 e0 02             	and    eax,0x2
c000f885:	74 11                	je     c000f898 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f887:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f88a:	66 89 02             	mov    WORD PTR [edx],ax
c000f88d:	8d 52 02             	lea    edx,[edx+0x2]
c000f890:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f893:	83 ed 02             	sub    ebp,0x2
c000f896:	66 90                	xchg   ax,ax
c000f898:	89 e8                	mov    eax,ebp
c000f89a:	c1 e8 02             	shr    eax,0x2
c000f89d:	fc                   	cld    
c000f89e:	89 d7                	mov    edi,edx
c000f8a0:	89 de                	mov    esi,ebx
c000f8a2:	89 c1                	mov    ecx,eax
c000f8a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f8a6:	89 f3                	mov    ebx,esi
c000f8a8:	89 fa                	mov    edx,edi
c000f8aa:	b9 00 00 00 00       	mov    ecx,0x0
c000f8af:	89 e8                	mov    eax,ebp
c000f8b1:	83 e0 02             	and    eax,0x2
c000f8b4:	74 0e                	je     c000f8c4 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f8b6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f8ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f8be:	8d 41 02             	lea    eax,[ecx+0x2]
c000f8c1:	89 c1                	mov    ecx,eax
c000f8c3:	90                   	nop
c000f8c4:	89 e8                	mov    eax,ebp
c000f8c6:	83 e0 01             	and    eax,0x1
c000f8c9:	74 09                	je     c000f8d4 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f8cb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f8ce:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f8d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f8dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f8e1:	79 1d                	jns    c000f900 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f8e3:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f8e7:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f8ec:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f8f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f8f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f8fb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f908:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f90c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f910:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f915:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f919:	89 c2                	mov    edx,eax
c000f91b:	c1 fa 1f             	sar    edx,0x1f
c000f91e:	52                   	push   edx
c000f91f:	50                   	push   eax
c000f920:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f924:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f928:	e8 37 1f 01 00       	call   c0021864 <__udivdi3>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f934:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f938:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f93c:	80 f4 00             	xor    ah,0x0
c000f93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f943:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f947:	80 f4 00             	xor    ah,0x0
c000f94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f94e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f952:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f956:	89 f8                	mov    eax,edi
c000f958:	09 f0                	or     eax,esi
c000f95a:	74 04                	je     c000f960 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f95c:	eb b2                	jmp    c000f910 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f95e:	66 90                	xchg   ax,ax
c000f960:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f964:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f967:	90                   	nop
c000f968:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f96c:	89 c1                	mov    ecx,eax
c000f96e:	89 c3                	mov    ebx,eax
c000f970:	c1 fb 1f             	sar    ebx,0x1f
c000f973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f977:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f97b:	53                   	push   ebx
c000f97c:	51                   	push   ecx
c000f97d:	52                   	push   edx
c000f97e:	50                   	push   eax
c000f97f:	e8 60 1d 01 00       	call   c00216e4 <__moddi3>
c000f984:	83 c4 10             	add    esp,0x10
c000f987:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f98c:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f990:	01 c8                	add    eax,ecx
c000f992:	8a 10                	mov    dl,BYTE PTR [eax]
c000f994:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f998:	88 10                	mov    BYTE PTR [eax],dl
c000f99a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f99e:	89 c2                	mov    edx,eax
c000f9a0:	c1 fa 1f             	sar    edx,0x1f
c000f9a3:	52                   	push   edx
c000f9a4:	50                   	push   eax
c000f9a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9ad:	e8 e6 1b 01 00       	call   c0021598 <__divdi3>
c000f9b2:	83 c4 10             	add    esp,0x10
c000f9b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9c1:	80 f4 00             	xor    ah,0x0
c000f9c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f9c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9cc:	80 f4 00             	xor    ah,0x0
c000f9cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f9d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f9db:	89 f8                	mov    eax,edi
c000f9dd:	09 f0                	or     eax,esi
c000f9df:	74 03                	je     c000f9e4 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f9e1:	eb 85                	jmp    c000f968 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f9e3:	90                   	nop
c000f9e4:	90                   	nop
c000f9e5:	83 c4 5c             	add    esp,0x5c
c000f9e8:	5b                   	pop    ebx
c000f9e9:	5e                   	pop    esi
c000f9ea:	5f                   	pop    edi
c000f9eb:	5d                   	pop    ebp
c000f9ec:	c3                   	ret    
c000f9ed:	8d 76 00             	lea    esi,[esi+0x0]

c000f9f0 <KeGetDigitsInNumber(long long)>:
c000f9f0:	56                   	push   esi
c000f9f1:	53                   	push   ebx
c000f9f2:	83 ec 24             	sub    esp,0x24
c000f9f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa05:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fa0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa14:	80 f4 00             	xor    ah,0x0
c000fa17:	89 c3                	mov    ebx,eax
c000fa19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1d:	80 f4 00             	xor    ah,0x0
c000fa20:	89 c6                	mov    esi,eax
c000fa22:	89 f0                	mov    eax,esi
c000fa24:	09 d8                	or     eax,ebx
c000fa26:	74 28                	je     c000fa50 <KeGetDigitsInNumber(long long)+0x60>
c000fa28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa30:	6a 00                	push   0x0
c000fa32:	6a 0a                	push   0xa
c000fa34:	52                   	push   edx
c000fa35:	50                   	push   eax
c000fa36:	e8 5d 1b 01 00       	call   c0021598 <__divdi3>
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa46:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fa4b:	eb c3                	jmp    c000fa10 <KeGetDigitsInNumber(long long)+0x20>
c000fa4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa54:	83 c4 24             	add    esp,0x24
c000fa57:	5b                   	pop    ebx
c000fa58:	5e                   	pop    esi
c000fa59:	c3                   	ret    
c000fa5a:	66 90                	xchg   ax,ax

c000fa5c <KeItoa(unsigned long long, char*)>:
c000fa5c:	83 ec 1c             	sub    esp,0x1c
c000fa5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa6f:	6a 0a                	push   0xa
c000fa71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa7d:	e8 3a fc ff ff       	call   c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	90                   	nop
c000fa86:	83 c4 1c             	add    esp,0x1c
c000fa89:	c3                   	ret    
c000fa8a:	66 90                	xchg   ax,ax

c000fa8c <KeItoa(long long, char*)>:
c000fa8c:	83 ec 1c             	sub    esp,0x1c
c000fa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	6a 0a                	push   0xa
c000faa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faad:	e8 92 fd ff ff       	call   c000f844 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	90                   	nop
c000fab6:	83 c4 1c             	add    esp,0x1c
c000fab9:	c3                   	ret    
c000faba:	66 90                	xchg   ax,ax

c000fabc <KeXtoa(unsigned long long, char*)>:
c000fabc:	83 ec 1c             	sub    esp,0x1c
c000fabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000facb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000facf:	6a 10                	push   0x10
c000fad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fadd:	e8 da fb ff ff       	call   c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	90                   	nop
c000fae6:	83 c4 1c             	add    esp,0x1c
c000fae9:	c3                   	ret    

c000faea <sbrk>:
c000faea:	55                   	push   ebp
c000faeb:	57                   	push   edi
c000faec:	56                   	push   esi
c000faed:	53                   	push   ebx
c000faee:	83 ec 1c             	sub    esp,0x1c
c000faf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faf5:	85 c0                	test   eax,eax
c000faf7:	74 61                	je     c000fb5a <sbrk+0x70>
c000faf9:	78 66                	js     c000fb61 <sbrk+0x77>
c000fafb:	8b 15 30 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026530
c000fb01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb05:	05 ff 0f 00 00       	add    eax,0xfff
c000fb0a:	89 c5                	mov    ebp,eax
c000fb0c:	78 6b                	js     c000fb79 <sbrk+0x8f>
c000fb0e:	c1 fd 0c             	sar    ebp,0xc
c000fb11:	bb 00 00 00 00       	mov    ebx,0x0
c000fb16:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fb1c:	8b 3d 30 65 02 c0    	mov    edi,DWORD PTR ds:0xc0026530
c000fb22:	e8 ab 06 00 00       	call   c00101d2 <Phys::allocatePage()>
c000fb27:	68 01 04 00 00       	push   0x401
c000fb2c:	57                   	push   edi
c000fb2d:	50                   	push   eax
c000fb2e:	56                   	push   esi
c000fb2f:	e8 1c 40 00 00       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fb34:	81 05 30 65 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026530,0x1000
c000fb3e:	83 c3 01             	add    ebx,0x1
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	39 dd                	cmp    ebp,ebx
c000fb46:	75 ce                	jne    c000fb16 <sbrk+0x2c>
c000fb48:	0f 20 d8             	mov    eax,cr3
c000fb4b:	0f 22 d8             	mov    cr3,eax
c000fb4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb52:	83 c4 1c             	add    esp,0x1c
c000fb55:	5b                   	pop    ebx
c000fb56:	5e                   	pop    esi
c000fb57:	5f                   	pop    edi
c000fb58:	5d                   	pop    ebp
c000fb59:	c3                   	ret    
c000fb5a:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c000fb5f:	eb f1                	jmp    c000fb52 <sbrk+0x68>
c000fb61:	83 ec 08             	sub    esp,0x8
c000fb64:	50                   	push   eax
c000fb65:	68 b8 3e 02 c0       	push   0xc0023eb8
c000fb6a:	e8 f5 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fb77:	eb d9                	jmp    c000fb52 <sbrk+0x68>
c000fb79:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fb7f:	eb 8d                	jmp    c000fb0e <sbrk+0x24>

c000fb81 <sbrk_thunk>:
c000fb81:	83 ec 0c             	sub    esp,0xc
c000fb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb88:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fb8d:	7f 10                	jg     c000fb9f <sbrk_thunk+0x1e>
c000fb8f:	83 ec 0c             	sub    esp,0xc
c000fb92:	50                   	push   eax
c000fb93:	e8 52 ff ff ff       	call   c000faea <sbrk>
c000fb98:	83 c4 10             	add    esp,0x10
c000fb9b:	83 c4 0c             	add    esp,0xc
c000fb9e:	c3                   	ret    
c000fb9f:	83 ec 08             	sub    esp,0x8
c000fba2:	50                   	push   eax
c000fba3:	68 e8 3e 02 c0       	push   0xc0023ee8
c000fba8:	e8 b7 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fbb5:	eb e4                	jmp    c000fb9b <sbrk_thunk+0x1a>

c000fbb7 <mmap>:
c000fbb7:	55                   	push   ebp
c000fbb8:	57                   	push   edi
c000fbb9:	56                   	push   esi
c000fbba:	53                   	push   ebx
c000fbbb:	83 ec 18             	sub    esp,0x18
c000fbbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbc2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fbc8:	89 fb                	mov    ebx,edi
c000fbca:	c1 eb 0c             	shr    ebx,0xc
c000fbcd:	53                   	push   ebx
c000fbce:	e8 9a 38 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c000fbd3:	89 c5                	mov    ebp,eax
c000fbd5:	83 c4 10             	add    esp,0x10
c000fbd8:	85 db                	test   ebx,ebx
c000fbda:	7e 2f                	jle    c000fc0b <mmap+0x54>
c000fbdc:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fbe2:	01 c7                	add    edi,eax
c000fbe4:	89 c3                	mov    ebx,eax
c000fbe6:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fbec:	e8 e1 05 00 00       	call   c00101d2 <Phys::allocatePage()>
c000fbf1:	68 01 04 00 00       	push   0x401
c000fbf6:	53                   	push   ebx
c000fbf7:	50                   	push   eax
c000fbf8:	56                   	push   esi
c000fbf9:	e8 52 3f 00 00       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fbfe:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	39 fb                	cmp    ebx,edi
c000fc09:	75 db                	jne    c000fbe6 <mmap+0x2f>
c000fc0b:	89 e8                	mov    eax,ebp
c000fc0d:	83 c4 0c             	add    esp,0xc
c000fc10:	5b                   	pop    ebx
c000fc11:	5e                   	pop    esi
c000fc12:	5f                   	pop    edi
c000fc13:	5d                   	pop    ebp
c000fc14:	c3                   	ret    

c000fc15 <munmap>:
c000fc15:	83 ec 18             	sub    esp,0x18
c000fc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc1c:	e8 54 3b 00 00       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c000fc21:	b8 00 00 00 00       	mov    eax,0x0
c000fc26:	83 c4 1c             	add    esp,0x1c
c000fc29:	c3                   	ret    

c000fc2a <liballoc_lock()>:
c000fc2a:	fa                   	cli    
c000fc2b:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fc32:	b8 00 00 00 00       	mov    eax,0x0
c000fc37:	c3                   	ret    

c000fc38 <liballoc_unlock()>:
c000fc38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc40:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fc47:	75 01                	jne    c000fc4a <liballoc_unlock()+0x12>
c000fc49:	fb                   	sti    
c000fc4a:	b8 00 00 00 00       	mov    eax,0x0
c000fc4f:	c3                   	ret    

c000fc50 <liballoc_alloc(int)>:
c000fc50:	83 ec 10             	sub    esp,0x10
c000fc53:	6a 01                	push   0x1
c000fc55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc59:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc5f:	e8 f0 3f 00 00       	call   c0013c54 <VAS::allocatePages(int, int)>
c000fc64:	83 c4 1c             	add    esp,0x1c
c000fc67:	c3                   	ret    

c000fc68 <liballoc_free(void*, int)>:
c000fc68:	83 ec 14             	sub    esp,0x14
c000fc6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc6f:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc75:	e8 38 3c 00 00       	call   c00138b2 <VAS::freeAllocatedPages(unsigned long)>
c000fc7a:	b8 00 00 00 00       	mov    eax,0x0
c000fc7f:	83 c4 1c             	add    esp,0x1c
c000fc82:	c3                   	ret    

c000fc83 <realloc>:
c000fc83:	83 ec 14             	sub    esp,0x14
c000fc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc8e:	e8 c4 1a ff ff       	call   c0001757 <dlrealloc>
c000fc93:	83 c4 1c             	add    esp,0x1c
c000fc96:	c3                   	ret    

c000fc97 <malloc>:
c000fc97:	83 ec 18             	sub    esp,0x18
c000fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc9e:	e8 77 15 ff ff       	call   c000121a <dlmalloc>
c000fca3:	83 c4 1c             	add    esp,0x1c
c000fca6:	c3                   	ret    

c000fca7 <free>:
c000fca7:	83 ec 18             	sub    esp,0x18
c000fcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcae:	e8 a0 10 ff ff       	call   c0000d53 <dlfree>
c000fcb3:	83 c4 1c             	add    esp,0x1c
c000fcb6:	c3                   	ret    

c000fcb7 <rfree>:
c000fcb7:	83 ec 18             	sub    esp,0x18
c000fcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbe:	e8 90 10 ff ff       	call   c0000d53 <dlfree>
c000fcc3:	83 c4 1c             	add    esp,0x1c
c000fcc6:	c3                   	ret    

c000fcc7 <calloc>:
c000fcc7:	56                   	push   esi
c000fcc8:	53                   	push   ebx
c000fcc9:	83 ec 10             	sub    esp,0x10
c000fccc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fcd0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fcd5:	53                   	push   ebx
c000fcd6:	e8 bc ff ff ff       	call   c000fc97 <malloc>
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	83 c4 0c             	add    esp,0xc
c000fce0:	53                   	push   ebx
c000fce1:	6a 00                	push   0x0
c000fce3:	50                   	push   eax
c000fce4:	e8 07 08 ff ff       	call   c00004f0 <memset>
c000fce9:	89 f0                	mov    eax,esi
c000fceb:	83 c4 14             	add    esp,0x14
c000fcee:	5b                   	pop    ebx
c000fcef:	5e                   	pop    esi
c000fcf0:	c3                   	ret    
c000fcf1:	66 90                	xchg   ax,ax
c000fcf3:	90                   	nop

c000fcf4 <KeMailboxTryPost(Mailbox*, void*)>:
c000fcf4:	83 ec 10             	sub    esp,0x10
c000fcf7:	fa                   	cli    
c000fcf8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fcfd:	83 c0 01             	add    eax,0x1
c000fd00:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd05:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd11:	85 c0                	test   eax,eax
c000fd13:	75 23                	jne    c000fd38 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fd15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fd1d:	89 10                	mov    DWORD PTR [eax],edx
c000fd1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd26:	8d 50 01             	lea    edx,[eax+0x1]
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd30:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd35:	8d 76 00             	lea    esi,[esi+0x0]
c000fd38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fd40:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd45:	85 c0                	test   eax,eax
c000fd47:	75 03                	jne    c000fd4c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fd49:	fb                   	sti    
c000fd4a:	66 90                	xchg   ax,ax
c000fd4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	c3                   	ret    

c000fd54 <KeMailboxTryGet(Mailbox*, void**)>:
c000fd54:	83 ec 10             	sub    esp,0x10
c000fd57:	fa                   	cli    
c000fd58:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd5d:	83 c0 01             	add    eax,0x1
c000fd60:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd65:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd71:	83 f8 01             	cmp    eax,0x1
c000fd74:	75 22                	jne    c000fd98 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fd76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd80:	89 10                	mov    DWORD PTR [eax],edx
c000fd82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd89:	8d 50 ff             	lea    edx,[eax-0x1]
c000fd8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd93:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd98:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fda0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fda5:	85 c0                	test   eax,eax
c000fda7:	75 03                	jne    c000fdac <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fda9:	fb                   	sti    
c000fdaa:	66 90                	xchg   ax,ax
c000fdac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	c3                   	ret    

c000fdb4 <KeMailboxCreate()>:
c000fdb4:	83 ec 1c             	sub    esp,0x1c
c000fdb7:	83 ec 0c             	sub    esp,0xc
c000fdba:	6a 08                	push   0x8
c000fdbc:	e8 d6 fe ff ff       	call   c000fc97 <malloc>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fde1:	83 c4 1c             	add    esp,0x1c
c000fde4:	c3                   	ret    
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]

c000fde8 <KeMailboxPost(Mailbox*, void*)>:
c000fde8:	83 ec 1c             	sub    esp,0x1c
c000fdeb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdf8:	e8 f7 fe ff ff       	call   c000fcf4 <KeMailboxTryPost(Mailbox*, void*)>
c000fdfd:	83 c4 08             	add    esp,0x8
c000fe00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe08:	83 f0 01             	xor    eax,0x1
c000fe0b:	0f b6 c0             	movzx  eax,al
c000fe0e:	85 c0                	test   eax,eax
c000fe10:	74 26                	je     c000fe38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe12:	fa                   	cli    
c000fe13:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe18:	83 c0 01             	add    eax,0x1
c000fe1b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe20:	e8 eb 70 00 00       	call   c0016f10 <schedule()>
c000fe25:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe2d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe32:	85 c0                	test   eax,eax
c000fe34:	75 02                	jne    c000fe38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe36:	fb                   	sti    
c000fe37:	90                   	nop
c000fe38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe3d:	85 c0                	test   eax,eax
c000fe3f:	75 03                	jne    c000fe44 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fe41:	eb ad                	jmp    c000fdf0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fe43:	90                   	nop
c000fe44:	90                   	nop
c000fe45:	83 c4 1c             	add    esp,0x1c
c000fe48:	c3                   	ret    
c000fe49:	8d 76 00             	lea    esi,[esi+0x0]

c000fe4c <KeMailboxGet(Mailbox*, void**)>:
c000fe4c:	83 ec 1c             	sub    esp,0x1c
c000fe4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe5c:	e8 f3 fe ff ff       	call   c000fd54 <KeMailboxTryGet(Mailbox*, void**)>
c000fe61:	83 c4 08             	add    esp,0x8
c000fe64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe6c:	83 f0 01             	xor    eax,0x1
c000fe6f:	0f b6 c0             	movzx  eax,al
c000fe72:	85 c0                	test   eax,eax
c000fe74:	74 26                	je     c000fe9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe76:	fa                   	cli    
c000fe77:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe7c:	83 c0 01             	add    eax,0x1
c000fe7f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe84:	e8 87 70 00 00       	call   c0016f10 <schedule()>
c000fe89:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe91:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe96:	85 c0                	test   eax,eax
c000fe98:	75 02                	jne    c000fe9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe9a:	fb                   	sti    
c000fe9b:	90                   	nop
c000fe9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fea1:	85 c0                	test   eax,eax
c000fea3:	75 03                	jne    c000fea8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fea5:	eb ad                	jmp    c000fe54 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fea7:	90                   	nop
c000fea8:	90                   	nop
c000fea9:	83 c4 1c             	add    esp,0x1c
c000feac:	c3                   	ret    
c000fead:	8d 76 00             	lea    esi,[esi+0x0]

c000feb0 <KeMailboxDestroy(Mailbox*)>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feba:	e8 e8 fd ff ff       	call   c000fca7 <free>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	90                   	nop
c000fec3:	83 c4 0c             	add    esp,0xc
c000fec6:	c3                   	ret    

c000fec7 <KeEntryPoint>:
c000fec7:	57                   	push   edi
c000fec8:	bf f9 03 00 00       	mov    edi,0x3f9
c000fecd:	56                   	push   esi
c000fece:	89 fa                	mov    edx,edi
c000fed0:	53                   	push   ebx
c000fed1:	31 f6                	xor    esi,esi
c000fed3:	83 ec 2c             	sub    esp,0x2c
c000fed6:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fedb:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fee0:	89 f0                	mov    eax,esi
c000fee2:	ee                   	out    dx,al
c000fee3:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fee8:	b0 80                	mov    al,0x80
c000feea:	89 da                	mov    edx,ebx
c000feec:	ee                   	out    dx,al
c000feed:	b1 03                	mov    cl,0x3
c000feef:	ba f8 03 00 00       	mov    edx,0x3f8
c000fef4:	88 c8                	mov    al,cl
c000fef6:	ee                   	out    dx,al
c000fef7:	89 f0                	mov    eax,esi
c000fef9:	89 fa                	mov    edx,edi
c000fefb:	ee                   	out    dx,al
c000fefc:	88 c8                	mov    al,cl
c000fefe:	89 da                	mov    edx,ebx
c000ff00:	ee                   	out    dx,al
c000ff01:	b0 c7                	mov    al,0xc7
c000ff03:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff08:	ee                   	out    dx,al
c000ff09:	b0 0b                	mov    al,0xb
c000ff0b:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff10:	ee                   	out    dx,al
c000ff11:	68 f7 3e 02 c0       	push   0xc0023ef7
c000ff16:	e8 49 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff1b:	e8 10 d3 ff ff       	call   c000d230 <KeDisplaySplashScreen()>
c000ff20:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff25:	05 ff 0f 00 00       	add    eax,0xfff
c000ff2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff32:	e8 2c 04 00 00       	call   c0010363 <Phys::physicalMemorySetup(unsigned int)>
c000ff37:	e8 0f 37 00 00       	call   c001364b <Virt::virtualMemorySetup()>
c000ff3c:	e8 39 d2 ff ff       	call   c000d17a <KeInitialiseAtexit()>
c000ff41:	c7 04 24 0e 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f0e
c000ff48:	e8 17 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff4d:	58                   	pop    eax
c000ff4e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff52:	53                   	push   ebx
c000ff53:	e8 da 39 00 00       	call   c0013932 <VAS::VAS()>
c000ff58:	c7 04 24 1e 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f1e
c000ff5f:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000ff65:	e8 fa 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff6a:	e8 0f 1b 01 00       	call   c0021a7e <_init>
c000ff6f:	c7 04 24 32 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f32
c000ff76:	e8 e9 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff7b:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ff82:	e8 10 fd ff ff       	call   c000fc97 <malloc>
c000ff87:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff8a:	89 c6                	mov    esi,eax
c000ff8c:	e8 67 e3 ff ff       	call   c000e2f8 <Computer::Computer()>
c000ff91:	5a                   	pop    edx
c000ff92:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000ff98:	59                   	pop    ecx
c000ff99:	56                   	push   esi
c000ff9a:	68 41 3f 02 c0       	push   0xc0023f41
c000ff9f:	e8 c0 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffa4:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000ffa9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffab:	53                   	push   ebx
c000ffac:	6a 00                	push   0x0
c000ffae:	6a 00                	push   0x0
c000ffb0:	50                   	push   eax
c000ffb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ffb4:	83 c4 14             	add    esp,0x14
c000ffb7:	53                   	push   ebx
c000ffb8:	e8 2b 3a 00 00       	call   c00139e8 <VAS::~VAS()>
c000ffbd:	83 c4 30             	add    esp,0x30
c000ffc0:	5b                   	pop    ebx
c000ffc1:	5e                   	pop    esi
c000ffc2:	5f                   	pop    edi
c000ffc3:	c3                   	ret    

c000ffc4 <Mutex::Mutex()>:
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	6a 01                	push   0x1
c000ffd0:	50                   	push   eax
c000ffd1:	e8 56 0c 00 00       	call   c0010c2c <Semaphore::Semaphore(int)>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	90                   	nop
c000ffda:	83 c4 0c             	add    esp,0xc
c000ffdd:	c3                   	ret    

c000ffde <KePanic(char const*)>:
c000ffde:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000ffe5:	e9 03 9f 00 00       	jmp    c0019eed <HalPanic(char const*)>

c000ffea <Phys::allocateDMA(unsigned long)>:
c000ffea:	55                   	push   ebp
c000ffeb:	31 ed                	xor    ebp,ebp
c000ffed:	57                   	push   edi
c000ffee:	56                   	push   esi
c000ffef:	53                   	push   ebx
c000fff0:	31 db                	xor    ebx,ebx
c000fff2:	83 ec 1c             	sub    esp,0x1c
c000fff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fff9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010001:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010007:	31 c0                	xor    eax,eax
c0010009:	c1 ef 0c             	shr    edi,0xc
c001000c:	eb 1b                	jmp    c0010029 <Phys::allocateDMA(unsigned long)+0x3f>
c001000e:	85 c0                	test   eax,eax
c0010010:	75 06                	jne    c0010018 <Phys::allocateDMA(unsigned long)+0x2e>
c0010012:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010016:	89 dd                	mov    ebp,ebx
c0010018:	8d 70 01             	lea    esi,[eax+0x1]
c001001b:	39 f7                	cmp    edi,esi
c001001d:	74 37                	je     c0010056 <Phys::allocateDMA(unsigned long)+0x6c>
c001001f:	89 f0                	mov    eax,esi
c0010021:	83 c3 01             	add    ebx,0x1
c0010024:	83 fb 0f             	cmp    ebx,0xf
c0010027:	7f 13                	jg     c001003c <Phys::allocateDMA(unsigned long)+0x52>
c0010029:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c0010030:	74 dc                	je     c001000e <Phys::allocateDMA(unsigned long)+0x24>
c0010032:	31 c0                	xor    eax,eax
c0010034:	83 c3 01             	add    ebx,0x1
c0010037:	83 fb 0f             	cmp    ebx,0xf
c001003a:	7e ed                	jle    c0010029 <Phys::allocateDMA(unsigned long)+0x3f>
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	68 58 3f 02 c0       	push   0xc0023f58
c0010044:	e8 95 ff ff ff       	call   c000ffde <KePanic(char const*)>
c0010049:	83 c4 10             	add    esp,0x10
c001004c:	31 c0                	xor    eax,eax
c001004e:	83 c4 1c             	add    esp,0x1c
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	5f                   	pop    edi
c0010054:	5d                   	pop    ebp
c0010055:	c3                   	ret    
c0010056:	89 e9                	mov    ecx,ebp
c0010058:	c1 f9 04             	sar    ecx,0x4
c001005b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001005f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010063:	89 ca                	mov    edx,ecx
c0010065:	83 ea 01             	sub    edx,0x1
c0010068:	79 03                	jns    c001006d <Phys::allocateDMA(unsigned long)+0x83>
c001006a:	8d 51 0e             	lea    edx,[ecx+0xe]
c001006d:	c1 fa 04             	sar    edx,0x4
c0010070:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010074:	74 08                	je     c001007e <Phys::allocateDMA(unsigned long)+0x94>
c0010076:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001007a:	31 c0                	xor    eax,eax
c001007c:	eb b6                	jmp    c0010034 <Phys::allocateDMA(unsigned long)+0x4a>
c001007e:	85 f6                	test   esi,esi
c0010080:	74 17                	je     c0010099 <Phys::allocateDMA(unsigned long)+0xaf>
c0010082:	8d 95 44 e1 02 c0    	lea    edx,[ebp-0x3ffd1ebc]
c0010088:	8d 84 05 45 e1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd1ebb]
c001008f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010092:	83 c2 01             	add    edx,0x1
c0010095:	39 d0                	cmp    eax,edx
c0010097:	75 f6                	jne    c001008f <Phys::allocateDMA(unsigned long)+0xa5>
c0010099:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c001009e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100a2:	01 f8                	add    eax,edi
c00100a4:	85 d2                	test   edx,edx
c00100a6:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100ab:	74 17                	je     c00100c4 <Phys::allocateDMA(unsigned long)+0xda>
c00100ad:	83 ec 0c             	sub    esp,0xc
c00100b0:	68 58 3f 02 c0       	push   0xc0023f58
c00100b5:	e8 24 ff ff ff       	call   c000ffde <KePanic(char const*)>
c00100ba:	83 c4 10             	add    esp,0x10
c00100bd:	89 f0                	mov    eax,esi
c00100bf:	e9 5d ff ff ff       	jmp    c0010021 <Phys::allocateDMA(unsigned long)+0x37>
c00100c4:	c1 e5 0c             	shl    ebp,0xc
c00100c7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00100cd:	e9 7c ff ff ff       	jmp    c001004e <Phys::allocateDMA(unsigned long)+0x64>

c00100d2 <Phys::freeDMA(unsigned long, unsigned long)>:
c00100d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100d6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100dc:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00100e1:	c1 ea 0c             	shr    edx,0xc
c00100e4:	29 d0                	sub    eax,edx
c00100e6:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ef:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100f4:	c1 e8 0c             	shr    eax,0xc
c00100f7:	85 d2                	test   edx,edx
c00100f9:	74 11                	je     c001010c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00100fb:	05 44 e1 02 c0       	add    eax,0xc002e144
c0010100:	01 c2                	add    edx,eax
c0010102:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010105:	83 c0 01             	add    eax,0x1
c0010108:	39 d0                	cmp    eax,edx
c001010a:	75 f6                	jne    c0010102 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001010c:	c3                   	ret    

c001010d <Phys::setPageState(unsigned long, bool)>:
c001010d:	57                   	push   edi
c001010e:	56                   	push   esi
c001010f:	8b 35 34 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026534
c0010115:	53                   	push   ebx
c0010116:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001011b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001011f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010123:	0f b6 c0             	movzx  eax,al
c0010126:	89 ca                	mov    edx,ecx
c0010128:	83 e1 07             	and    ecx,0x7
c001012b:	c1 ea 03             	shr    edx,0x3
c001012e:	d3 c3                	rol    ebx,cl
c0010130:	01 d6                	add    esi,edx
c0010132:	d3 e0                	shl    eax,cl
c0010134:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010137:	21 fb                	and    ebx,edi
c0010139:	88 1e                	mov    BYTE PTR [esi],bl
c001013b:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c0010141:	01 da                	add    edx,ebx
c0010143:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010145:	09 c8                	or     eax,ecx
c0010147:	88 02                	mov    BYTE PTR [edx],al
c0010149:	5b                   	pop    ebx
c001014a:	5e                   	pop    esi
c001014b:	5f                   	pop    edi
c001014c:	c3                   	ret    

c001014d <Phys::getPageState(unsigned long)>:
c001014d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010151:	8b 15 34 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026534
c0010157:	89 c8                	mov    eax,ecx
c0010159:	83 e1 07             	and    ecx,0x7
c001015c:	c1 e8 03             	shr    eax,0x3
c001015f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010163:	d3 f8                	sar    eax,cl
c0010165:	83 e0 01             	and    eax,0x1
c0010168:	c3                   	ret    

c0010169 <Phys::freePage(unsigned long)>:
c0010169:	53                   	push   ebx
c001016a:	83 ec 08             	sub    esp,0x8
c001016d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010171:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010177:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001017d:	76 41                	jbe    c00101c0 <Phys::freePage(unsigned long)+0x57>
c001017f:	c1 e8 0c             	shr    eax,0xc
c0010182:	50                   	push   eax
c0010183:	89 c3                	mov    ebx,eax
c0010185:	e8 c3 ff ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c001018a:	5a                   	pop    edx
c001018b:	84 c0                	test   al,al
c001018d:	74 20                	je     c00101af <Phys::freePage(unsigned long)+0x46>
c001018f:	83 ec 08             	sub    esp,0x8
c0010192:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c0010197:	6a 00                	push   0x0
c0010199:	83 e8 01             	sub    eax,0x1
c001019c:	53                   	push   ebx
c001019d:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00101a2:	e8 66 ff ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	83 c4 08             	add    esp,0x8
c00101ad:	5b                   	pop    ebx
c00101ae:	c3                   	ret    
c00101af:	c7 44 24 10 5d 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc002405d
c00101b7:	83 c4 08             	add    esp,0x8
c00101ba:	5b                   	pop    ebx
c00101bb:	e9 1e fe ff ff       	jmp    c000ffde <KePanic(char const*)>
c00101c0:	68 00 10 00 00       	push   0x1000
c00101c5:	50                   	push   eax
c00101c6:	e8 07 ff ff ff       	call   c00100d2 <Phys::freeDMA(unsigned long, unsigned long)>
c00101cb:	59                   	pop    ecx
c00101cc:	5b                   	pop    ebx
c00101cd:	83 c4 08             	add    esp,0x8
c00101d0:	5b                   	pop    ebx
c00101d1:	c3                   	ret    

c00101d2 <Phys::allocatePage()>:
c00101d2:	56                   	push   esi
c00101d3:	53                   	push   ebx
c00101d4:	83 ec 14             	sub    esp,0x14
c00101d7:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c00101dd:	89 f3                	mov    ebx,esi
c00101df:	eb 0a                	jmp    c00101eb <Phys::allocatePage()+0x19>
c00101e1:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c00101e7:	39 de                	cmp    esi,ebx
c00101e9:	74 26                	je     c0010211 <Phys::allocatePage()+0x3f>
c00101eb:	53                   	push   ebx
c00101ec:	e8 5c ff ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c00101f1:	59                   	pop    ecx
c00101f2:	84 c0                	test   al,al
c00101f4:	74 67                	je     c001025d <Phys::allocatePage()+0x8b>
c00101f6:	83 c3 01             	add    ebx,0x1
c00101f9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101ff:	75 e0                	jne    c00101e1 <Phys::allocatePage()+0xf>
c0010201:	31 db                	xor    ebx,ebx
c0010203:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c001020d:	39 de                	cmp    esi,ebx
c001020f:	75 da                	jne    c00101eb <Phys::allocatePage()+0x19>
c0010211:	83 ec 0c             	sub    esp,0xc
c0010214:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c0010219:	83 f0 01             	xor    eax,0x1
c001021c:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c0010221:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010226:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010229:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001022f:	51                   	push   ecx
c0010230:	e8 63 44 00 00       	call   c0014698 <VAS::scanForEviction()>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	85 c0                	test   eax,eax
c001023a:	75 48                	jne    c0010284 <Phys::allocatePage()+0xb2>
c001023c:	83 ec 0c             	sub    esp,0xc
c001023f:	68 80 3f 02 c0       	push   0xc0023f80
c0010244:	e8 95 fd ff ff       	call   c000ffde <KePanic(char const*)>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c0010252:	53                   	push   ebx
c0010253:	e8 f5 fe ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c0010258:	59                   	pop    ecx
c0010259:	84 c0                	test   al,al
c001025b:	75 99                	jne    c00101f6 <Phys::allocatePage()+0x24>
c001025d:	6a 01                	push   0x1
c001025f:	53                   	push   ebx
c0010260:	e8 a8 fe ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010265:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c001026b:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0010270:	83 c3 01             	add    ebx,0x1
c0010273:	5e                   	pop    esi
c0010274:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c001027a:	c1 e0 0c             	shl    eax,0xc
c001027d:	5a                   	pop    edx
c001027e:	83 c4 14             	add    esp,0x14
c0010281:	5b                   	pop    ebx
c0010282:	5e                   	pop    esi
c0010283:	c3                   	ret    
c0010284:	83 ec 08             	sub    esp,0x8
c0010287:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c001028d:	6a 01                	push   0x1
c001028f:	83 c2 01             	add    edx,0x1
c0010292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010296:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c001029c:	89 c2                	mov    edx,eax
c001029e:	c1 ea 0c             	shr    edx,0xc
c00102a1:	52                   	push   edx
c00102a2:	e8 66 fe ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102ae:	eb ce                	jmp    c001027e <Phys::allocatePage()+0xac>

c00102b0 <Phys::allocateContiguousPages(int)>:
c00102b0:	57                   	push   edi
c00102b1:	56                   	push   esi
c00102b2:	53                   	push   ebx
c00102b3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00102b7:	fa                   	cli    
c00102b8:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00102be:	83 ec 0c             	sub    esp,0xc
c00102c1:	83 c2 01             	add    edx,0x1
c00102c4:	68 b0 3f 02 c0       	push   0xc0023fb0
c00102c9:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00102cf:	31 db                	xor    ebx,ebx
c00102d1:	e8 8e 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	85 db                	test   ebx,ebx
c00102db:	75 11                	jne    c00102ee <Phys::allocateContiguousPages(int)+0x3e>
c00102dd:	e8 f0 fe ff ff       	call   c00101d2 <Phys::allocatePage()>
c00102e2:	83 ff 01             	cmp    edi,0x1
c00102e5:	89 c6                	mov    esi,eax
c00102e7:	74 21                	je     c001030a <Phys::allocateContiguousPages(int)+0x5a>
c00102e9:	bb 01 00 00 00       	mov    ebx,0x1
c00102ee:	e8 df fe ff ff       	call   c00101d2 <Phys::allocatePage()>
c00102f3:	89 da                	mov    edx,ebx
c00102f5:	c1 e2 0c             	shl    edx,0xc
c00102f8:	01 f2                	add    edx,esi
c00102fa:	39 c2                	cmp    edx,eax
c00102fc:	74 24                	je     c0010322 <Phys::allocateContiguousPages(int)+0x72>
c00102fe:	bb 01 00 00 00       	mov    ebx,0x1
c0010303:	89 c6                	mov    esi,eax
c0010305:	83 ff 01             	cmp    edi,0x1
c0010308:	75 e4                	jne    c00102ee <Phys::allocateContiguousPages(int)+0x3e>
c001030a:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010312:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010317:	85 c0                	test   eax,eax
c0010319:	75 01                	jne    c001031c <Phys::allocateContiguousPages(int)+0x6c>
c001031b:	fb                   	sti    
c001031c:	89 f0                	mov    eax,esi
c001031e:	5b                   	pop    ebx
c001031f:	5e                   	pop    esi
c0010320:	5f                   	pop    edi
c0010321:	c3                   	ret    
c0010322:	83 c3 01             	add    ebx,0x1
c0010325:	39 fb                	cmp    ebx,edi
c0010327:	75 b0                	jne    c00102d9 <Phys::allocateContiguousPages(int)+0x29>
c0010329:	eb df                	jmp    c001030a <Phys::allocateContiguousPages(int)+0x5a>

c001032b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001032b:	56                   	push   esi
c001032c:	53                   	push   ebx
c001032d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010331:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c0010337:	73 06                	jae    c001033f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010339:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c001033f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010343:	c1 eb 0c             	shr    ebx,0xc
c0010346:	c1 e8 0c             	shr    eax,0xc
c0010349:	39 d8                	cmp    eax,ebx
c001034b:	73 13                	jae    c0010360 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001034d:	6a 00                	push   0x0
c001034f:	8d 70 01             	lea    esi,[eax+0x1]
c0010352:	50                   	push   eax
c0010353:	e8 b5 fd ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010358:	5a                   	pop    edx
c0010359:	89 f0                	mov    eax,esi
c001035b:	59                   	pop    ecx
c001035c:	39 f3                	cmp    ebx,esi
c001035e:	75 ed                	jne    c001034d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	c3                   	ret    

c0010363 <Phys::physicalMemorySetup(unsigned int)>:
c0010363:	55                   	push   ebp
c0010364:	57                   	push   edi
c0010365:	56                   	push   esi
c0010366:	53                   	push   ebx
c0010367:	83 ec 40             	sub    esp,0x40
c001036a:	6a 10                	push   0x10
c001036c:	6a 00                	push   0x0
c001036e:	68 44 e1 02 c0       	push   0xc002e144
c0010373:	e8 78 01 ff ff       	call   c00004f0 <memset>
c0010378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001037c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010381:	05 00 10 00 00       	add    eax,0x1000
c0010386:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001038a:	5b                   	pop    ebx
c001038b:	31 db                	xor    ebx,ebx
c001038d:	5e                   	pop    esi
c001038e:	50                   	push   eax
c001038f:	68 73 40 02 c0       	push   0xc0024073
c0010394:	e8 cb 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	83 ec 08             	sub    esp,0x8
c001039f:	6a 01                	push   0x1
c00103a1:	53                   	push   ebx
c00103a2:	83 c3 01             	add    ebx,0x1
c00103a5:	e8 63 fd ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103b3:	75 e7                	jne    c001039c <Phys::physicalMemorySetup(unsigned int)+0x39>
c00103b5:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00103bc:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103c3:	c1 e0 08             	shl    eax,0x8
c00103c6:	09 c2                	or     edx,eax
c00103c8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00103cc:	0f 84 98 01 00 00    	je     c001056a <Phys::physicalMemorySetup(unsigned int)+0x207>
c00103d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103de:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103e7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00103ef:	eb 1c                	jmp    c001040d <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00103f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f5:	83 c3 18             	add    ebx,0x18
c00103f8:	83 c6 01             	add    esi,0x1
c00103fb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010403:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010407:	0f 84 6d 01 00 00    	je     c001057a <Phys::physicalMemorySetup(unsigned int)+0x217>
c001040d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010410:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010413:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001041a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001041e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010420:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010423:	01 f0                	add    eax,esi
c0010425:	55                   	push   ebp
c0010426:	11 fa                	adc    edx,edi
c0010428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001042c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010430:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010434:	51                   	push   ecx
c0010435:	56                   	push   esi
c0010436:	68 10 40 02 c0       	push   0xc0024010
c001043b:	e8 24 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010444:	83 c4 10             	add    esp,0x10
c0010447:	09 f8                	or     eax,edi
c0010449:	0f 85 2b 01 00 00    	jne    c001057a <Phys::physicalMemorySetup(unsigned int)+0x217>
c001044f:	83 fd 01             	cmp    ebp,0x1
c0010452:	75 9d                	jne    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010454:	ba 00 00 08 00       	mov    edx,0x80000
c0010459:	89 c1                	mov    ecx,eax
c001045b:	39 f2                	cmp    edx,esi
c001045d:	19 f9                	sbb    ecx,edi
c001045f:	0f 82 ab 00 00 00    	jb     c0010510 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010465:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010469:	89 c1                	mov    ecx,eax
c001046b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001046f:	0f 83 9b 00 00 00    	jae    c0010510 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010475:	ba 00 00 0a 00       	mov    edx,0xa0000
c001047a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001047e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010482:	39 fa                	cmp    edx,edi
c0010484:	19 e8                	sbb    eax,ebp
c0010486:	0f 82 b0 01 00 00    	jb     c001063c <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001048c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010490:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010494:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001049a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001049f:	83 d5 ff             	adc    ebp,0xffffffff
c00104a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104a6:	31 c0                	xor    eax,eax
c00104a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104ac:	39 fa                	cmp    edx,edi
c00104ae:	89 c1                	mov    ecx,eax
c00104b0:	19 e9                	sbb    ecx,ebp
c00104b2:	0f 83 39 ff ff ff    	jae    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104b8:	be 00 00 08 00       	mov    esi,0x80000
c00104bd:	83 ec 04             	sub    esp,0x4
c00104c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00104c4:	57                   	push   edi
c00104c5:	56                   	push   esi
c00104c6:	68 34 40 02 c0       	push   0xc0024034
c00104cb:	e8 94 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00104d0:	5d                   	pop    ebp
c00104d1:	58                   	pop    eax
c00104d2:	57                   	push   edi
c00104d3:	56                   	push   esi
c00104d4:	e8 52 fe ff ff       	call   c001032b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00104d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104e1:	83 c4 0c             	add    esp,0xc
c00104e4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104e8:	8b 15 40 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e140
c00104ee:	01 d0                	add    eax,edx
c00104f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104f7:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00104fc:	52                   	push   edx
c00104fd:	50                   	push   eax
c00104fe:	68 99 40 02 c0       	push   0xc0024099
c0010503:	e8 5c 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	e9 e1 fe ff ff       	jmp    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010510:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001051c:	39 ea                	cmp    edx,ebp
c001051e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010522:	0f 82 c9 fe ff ff    	jb     c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010528:	ba ff 1f 00 00       	mov    edx,0x1fff
c001052d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010531:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010535:	0f 83 b6 fe ff ff    	jae    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001053b:	39 ee                	cmp    esi,ebp
c001053d:	89 f8                	mov    eax,edi
c001053f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010543:	0f 83 74 ff ff ff    	jae    c00104bd <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001054d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010551:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010555:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010559:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001055d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010561:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010565:	e9 53 ff ff ff       	jmp    c00104bd <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	68 8b 40 02 c0       	push   0xc002408b
c0010572:	e8 67 fa ff ff       	call   c000ffde <KePanic(char const*)>
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	83 ec 08             	sub    esp,0x8
c001057d:	bb 60 00 00 00       	mov    ebx,0x60
c0010582:	6a 00                	push   0x0
c0010584:	6a 06                	push   0x6
c0010586:	e8 82 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c001058b:	58                   	pop    eax
c001058c:	5a                   	pop    edx
c001058d:	6a 00                	push   0x0
c001058f:	6a 07                	push   0x7
c0010591:	e8 77 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010596:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c001059c:	83 c4 10             	add    esp,0x10
c001059f:	83 c1 02             	add    ecx,0x2
c00105a2:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c00105a8:	83 ec 08             	sub    esp,0x8
c00105ab:	6a 00                	push   0x0
c00105ad:	53                   	push   ebx
c00105ae:	83 c3 01             	add    ebx,0x1
c00105b1:	e8 57 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00105bf:	75 e7                	jne    c00105a8 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00105c1:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105c6:	bb 40 01 00 00       	mov    ebx,0x140
c00105cb:	83 c0 20             	add    eax,0x20
c00105ce:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105d3:	eb 26                	jmp    c00105fb <Phys::physicalMemorySetup(unsigned int)+0x298>
c00105d5:	83 ec 08             	sub    esp,0x8
c00105d8:	6a 00                	push   0x0
c00105da:	53                   	push   ebx
c00105db:	83 c3 01             	add    ebx,0x1
c00105de:	e8 2a fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00105e3:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	83 c0 01             	add    eax,0x1
c00105ee:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00105f4:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105f9:	74 07                	je     c0010602 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00105fb:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010600:	7e d3                	jle    c00105d5 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010602:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010607:	3d ff 07 00 00       	cmp    eax,0x7ff
c001060c:	7f 26                	jg     c0010634 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c001060e:	83 ec 08             	sub    esp,0x8
c0010611:	6a 00                	push   0x0
c0010613:	53                   	push   ebx
c0010614:	83 c3 01             	add    ebx,0x1
c0010617:	e8 f1 fa ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c001061c:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	83 c0 01             	add    eax,0x1
c0010627:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001062d:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010632:	75 d3                	jne    c0010607 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0010634:	83 c4 3c             	add    esp,0x3c
c0010637:	5b                   	pop    ebx
c0010638:	5e                   	pop    esi
c0010639:	5f                   	pop    edi
c001063a:	5d                   	pop    ebp
c001063b:	c3                   	ret    
c001063c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010644:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001064c:	e9 3b fe ff ff       	jmp    c001048c <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010651:	90                   	nop

c0010652 <Pipe::isAtty()>:
c0010652:	31 c0                	xor    eax,eax
c0010654:	c3                   	ret    
c0010655:	90                   	nop

c0010656 <Pipe::~Pipe()>:
c0010656:	83 ec 0c             	sub    esp,0xc
c0010659:	ba f8 40 02 c0       	mov    edx,0xc00240f8
c001065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010662:	89 10                	mov    DWORD PTR [eax],edx
c0010664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	50                   	push   eax
c001066c:	e8 81 2b 00 00       	call   c00131f2 <UnixFile::~UnixFile()>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	90                   	nop
c0010675:	83 c4 0c             	add    esp,0xc
c0010678:	c3                   	ret    
c0010679:	90                   	nop

c001067a <Pipe::~Pipe()>:
c001067a:	83 ec 0c             	sub    esp,0xc
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010684:	e8 cd ff ff ff       	call   c0010656 <Pipe::~Pipe()>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	83 ec 08             	sub    esp,0x8
c001068f:	6a 20                	push   0x20
c0010691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010695:	e8 85 cc ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001069a:	83 c4 10             	add    esp,0x10
c001069d:	83 c4 0c             	add    esp,0xc
c00106a0:	c3                   	ret    
c00106a1:	90                   	nop

c00106a2 <Pipe::write(unsigned long long, void*, int*)>:
c00106a2:	55                   	push   ebp
c00106a3:	57                   	push   edi
c00106a4:	56                   	push   esi
c00106a5:	53                   	push   ebx
c00106a6:	83 ec 1c             	sub    esp,0x1c
c00106a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00106b4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00106b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00106bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106bf:	89 d8                	mov    eax,ebx
c00106c1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00106c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00106c8:	89 d6                	mov    esi,edx
c00106ca:	89 d7                	mov    edi,edx
c00106cc:	c1 ff 1f             	sar    edi,0x1f
c00106cf:	03 34 24             	add    esi,DWORD PTR [esp]
c00106d2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00106d6:	c1 f8 1f             	sar    eax,0x1f
c00106d9:	39 f3                	cmp    ebx,esi
c00106db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e3:	19 f8                	sbb    eax,edi
c00106e5:	b8 01 00 00 00       	mov    eax,0x1
c00106ea:	72 6e                	jb     c001075a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00106ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00106ef:	01 d0                	add    eax,edx
c00106f1:	99                   	cdq    
c00106f2:	f7 fb                	idiv   ebx
c00106f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f8:	29 d3                	sub    ebx,edx
c00106fa:	89 d7                	mov    edi,edx
c00106fc:	89 de                	mov    esi,ebx
c00106fe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010701:	c1 fb 1f             	sar    ebx,0x1f
c0010704:	39 f2                	cmp    edx,esi
c0010706:	19 d8                	sbb    eax,ebx
c0010708:	b8 00 00 00 00       	mov    eax,0x0
c001070d:	72 04                	jb     c0010713 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001070f:	89 d0                	mov    eax,edx
c0010711:	29 f0                	sub    eax,esi
c0010713:	89 d3                	mov    ebx,edx
c0010715:	29 c3                	sub    ebx,eax
c0010717:	74 0b                	je     c0010724 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010719:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001071c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010720:	89 d9                	mov    ecx,ebx
c0010722:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010724:	85 c0                	test   eax,eax
c0010726:	74 0d                	je     c0010735 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010728:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001072c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001072f:	89 de                	mov    esi,ebx
c0010731:	89 c1                	mov    ecx,eax
c0010733:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010735:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010738:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001073d:	75 10                	jne    c001074f <Pipe::write(unsigned long long, void*, int*)+0xad>
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	68 b5 40 02 c0       	push   0xc00240b5
c0010747:	e8 92 f8 ff ff       	call   c000ffde <KePanic(char const*)>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010753:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010756:	89 08                	mov    DWORD PTR [eax],ecx
c0010758:	31 c0                	xor    eax,eax
c001075a:	83 c4 1c             	add    esp,0x1c
c001075d:	5b                   	pop    ebx
c001075e:	5e                   	pop    esi
c001075f:	5f                   	pop    edi
c0010760:	5d                   	pop    ebp
c0010761:	c3                   	ret    

c0010762 <Pipe::read(unsigned long long, void*, int*)>:
c0010762:	55                   	push   ebp
c0010763:	57                   	push   edi
c0010764:	56                   	push   esi
c0010765:	53                   	push   ebx
c0010766:	83 ec 1c             	sub    esp,0x1c
c0010769:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001076d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010771:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010775:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010778:	89 c8                	mov    eax,ecx
c001077a:	99                   	cdq    
c001077b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001077f:	74 27                	je     c00107a8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010781:	39 f9                	cmp    ecx,edi
c0010783:	89 d1                	mov    ecx,edx
c0010785:	19 f1                	sbb    ecx,esi
c0010787:	73 1f                	jae    c00107a8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010789:	fa                   	cli    
c001078a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0010790:	e8 7b 67 00 00       	call   c0016f10 <schedule()>
c0010795:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001079c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00107a3:	75 d0                	jne    c0010775 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107a5:	fb                   	sti    
c00107a6:	eb cd                	jmp    c0010775 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107a8:	39 f8                	cmp    eax,edi
c00107aa:	89 d1                	mov    ecx,edx
c00107ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107af:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107b3:	19 f1                	sbb    ecx,esi
c00107b5:	73 07                	jae    c00107be <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00107b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00107ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107be:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00107c1:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00107c4:	29 f7                	sub    edi,esi
c00107c6:	89 f8                	mov    eax,edi
c00107c8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00107cc:	99                   	cdq    
c00107cd:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00107d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d4:	19 d0                	sbb    eax,edx
c00107d6:	73 07                	jae    c00107df <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00107d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107df:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00107e2:	89 ea                	mov    edx,ebp
c00107e4:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00107e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107ed:	74 0d                	je     c00107fc <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00107ef:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00107f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107fc:	85 d2                	test   edx,edx
c00107fe:	74 11                	je     c0010811 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010804:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010807:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001080b:	89 d1                	mov    ecx,edx
c001080d:	89 c7                	mov    edi,eax
c001080f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010811:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010814:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010817:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001081a:	99                   	cdq    
c001081b:	89 f7                	mov    edi,esi
c001081d:	03 04 24             	add    eax,DWORD PTR [esp]
c0010820:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010824:	c1 ff 1f             	sar    edi,0x1f
c0010827:	57                   	push   edi
c0010828:	56                   	push   esi
c0010829:	52                   	push   edx
c001082a:	50                   	push   eax
c001082b:	e8 34 11 01 00       	call   c0021964 <__umoddi3>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010836:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001083b:	75 10                	jne    c001084d <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001083d:	83 ec 0c             	sub    esp,0xc
c0010840:	68 d2 40 02 c0       	push   0xc00240d2
c0010845:	e8 94 f7 ff ff       	call   c000ffde <KePanic(char const*)>
c001084a:	83 c4 10             	add    esp,0x10
c001084d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010851:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010854:	89 10                	mov    DWORD PTR [eax],edx
c0010856:	83 c4 1c             	add    esp,0x1c
c0010859:	31 c0                	xor    eax,eax
c001085b:	5b                   	pop    ebx
c001085c:	5e                   	pop    esi
c001085d:	5f                   	pop    edi
c001085e:	5d                   	pop    ebp
c001085f:	c3                   	ret    

c0010860 <Pipe::Pipe(int)>:
c0010860:	83 ec 0c             	sub    esp,0xc
c0010863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010867:	83 ec 08             	sub    esp,0x8
c001086a:	6a 00                	push   0x0
c001086c:	50                   	push   eax
c001086d:	e8 9a 27 00 00       	call   c001300c <UnixFile::UnixFile(int)>
c0010872:	83 c4 10             	add    esp,0x10
c0010875:	ba f8 40 02 c0       	mov    edx,0xc00240f8
c001087a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087e:	89 10                	mov    DWORD PTR [eax],edx
c0010880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010888:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001088b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a5:	83 ec 0c             	sub    esp,0xc
c00108a8:	50                   	push   eax
c00108a9:	e8 e9 f3 ff ff       	call   c000fc97 <malloc>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	89 c2                	mov    edx,eax
c00108b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00108c2:	90                   	nop
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    

c00108c7 <KePowerThread(void*)>:
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00108d1:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00108d8:	75 01                	jne    c00108db <KePowerThread(void*)+0x14>
c00108da:	fb                   	sti    
c00108db:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00108e2:	50                   	push   eax
c00108e3:	50                   	push   eax
c00108e4:	6a 00                	push   0x0
c00108e6:	6a 0a                	push   0xa
c00108e8:	e8 2f 68 00 00       	call   c001711c <sleep(unsigned long long)>
c00108ed:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	eb e2                	jmp    c00108db <KePowerThread(void*)+0x14>

c00108f9 <KeChangePowerSettings(PowerSettings)>:
c00108f9:	57                   	push   edi
c00108fa:	b9 09 00 00 00       	mov    ecx,0x9
c00108ff:	56                   	push   esi
c0010900:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c0010905:	fc                   	cld    
c0010906:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001090a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001090c:	5e                   	pop    esi
c001090d:	5f                   	pop    edi
c001090e:	c3                   	ret    

c001090f <KeUserIOReceived()>:
c001090f:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010919:	c3                   	ret    

c001091a <KeHandlePowerButton()>:
c001091a:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c001091f:	83 f8 02             	cmp    eax,0x2
c0010922:	75 05                	jne    c0010929 <KeHandlePowerButton()+0xf>
c0010924:	e9 33 da ff ff       	jmp    c000e35c <KeShutdown()>
c0010929:	48                   	dec    eax
c001092a:	75 05                	jne    c0010931 <KeHandlePowerButton()+0x17>
c001092c:	e9 4f da ff ff       	jmp    c000e380 <KeSleep()>
c0010931:	c3                   	ret    

c0010932 <KeHandleSleepButton()>:
c0010932:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010937:	83 f8 02             	cmp    eax,0x2
c001093a:	75 05                	jne    c0010941 <KeHandleSleepButton()+0xf>
c001093c:	e9 1b da ff ff       	jmp    c000e35c <KeShutdown()>
c0010941:	48                   	dec    eax
c0010942:	75 05                	jne    c0010949 <KeHandleSleepButton()+0x17>
c0010944:	e9 37 da ff ff       	jmp    c000e380 <KeSleep()>
c0010949:	c3                   	ret    

c001094a <KeSetupPowerManager()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010957:	68 f0 00 00 00       	push   0xf0
c001095c:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010963:	6a 00                	push   0x0
c0010965:	68 c7 08 01 c0       	push   0xc00108c7
c001096a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0010970:	e8 0b 63 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c0010975:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c001097f:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c0010989:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c0010993:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c001099d:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c00109a7:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c00109b1:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c00109bb:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c00109c5:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c00109cf:	83 c4 1c             	add    esp,0x1c
c00109d2:	c3                   	ret    

c00109d3 <KeRand()>:
c00109d3:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c00109dd:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c00109e7:	53                   	push   ebx
c00109e8:	01 c1                	add    ecx,eax
c00109ea:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109ef:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c00109f5:	01 ca                	add    edx,ecx
c00109f7:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109fc:	83 d2 00             	adc    edx,0x0
c00109ff:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a04:	0f b7 da             	movzx  ebx,dx
c0010a07:	89 da                	mov    edx,ebx
c0010a09:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c0010a0f:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a13:	5b                   	pop    ebx
c0010a14:	c3                   	ret    

c0010a15 <KeSeedRand(unsigned int)>:
c0010a15:	53                   	push   ebx
c0010a16:	83 ec 08             	sub    esp,0x8
c0010a19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a1d:	e8 bb 97 00 00       	call   c001a1dd <HalGetRand()>
c0010a22:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c0010a2c:	31 d8                	xor    eax,ebx
c0010a2e:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a33:	e8 9b ff ff ff       	call   c00109d3 <KeRand()>
c0010a38:	83 c4 08             	add    esp,0x8
c0010a3b:	5b                   	pop    ebx
c0010a3c:	eb 95                	jmp    c00109d3 <KeRand()>

c0010a3e <KeInitRand()>:
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	e8 bb 95 00 00       	call   c001a001 <HalQueryPerformanceCounter()>
c0010a46:	0f 20 da             	mov    edx,cr3
c0010a49:	0f 22 da             	mov    cr3,edx
c0010a4c:	0f 20 da             	mov    edx,cr3
c0010a4f:	0f 22 da             	mov    cr3,edx
c0010a52:	0f 20 da             	mov    edx,cr3
c0010a55:	0f 22 da             	mov    cr3,edx
c0010a58:	0f 20 da             	mov    edx,cr3
c0010a5b:	0f 22 da             	mov    cr3,edx
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a66:	50                   	push   eax
c0010a67:	e8 a9 ff ff ff       	call   c0010a15 <KeSeedRand(unsigned int)>
c0010a6c:	83 c4 1c             	add    esp,0x1c
c0010a6f:	c3                   	ret    

c0010a70 <KeResolveCompatibilitySymbol(char*)>:
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	83 ec 08             	sub    esp,0x8
c0010a76:	68 0c 41 02 c0       	push   0xc002410c
c0010a7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7f:	e8 cc fc fe ff       	call   c0000750 <strcmp>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	85 c0                	test   eax,eax
c0010a89:	0f 94 c0             	sete   al
c0010a8c:	0f b6 c0             	movzx  eax,al
c0010a8f:	85 c0                	test   eax,eax
c0010a91:	74 0d                	je     c0010aa0 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a93:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0010a98:	e9 8b 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010aa0:	83 ec 08             	sub    esp,0x8
c0010aa3:	68 15 41 02 c0       	push   0xc0024115
c0010aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aac:	e8 9f fc fe ff       	call   c0000750 <strcmp>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	85 c0                	test   eax,eax
c0010ab6:	0f 94 c0             	sete   al
c0010ab9:	0f b6 c0             	movzx  eax,al
c0010abc:	85 c0                	test   eax,eax
c0010abe:	74 0c                	je     c0010acc <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010ac0:	b8 64 18 02 c0       	mov    eax,0xc0021864
c0010ac5:	e9 5e 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aca:	66 90                	xchg   ax,ax
c0010acc:	83 ec 08             	sub    esp,0x8
c0010acf:	68 1f 41 02 c0       	push   0xc002411f
c0010ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad8:	e8 73 fc fe ff       	call   c0000750 <strcmp>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	85 c0                	test   eax,eax
c0010ae2:	0f 94 c0             	sete   al
c0010ae5:	0f b6 c0             	movzx  eax,al
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	74 0c                	je     c0010af8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010aec:	b8 98 15 02 c0       	mov    eax,0xc0021598
c0010af1:	e9 32 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010af6:	66 90                	xchg   ax,ax
c0010af8:	83 ec 08             	sub    esp,0x8
c0010afb:	68 28 41 02 c0       	push   0xc0024128
c0010b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b04:	e8 47 fc fe ff       	call   c0000750 <strcmp>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	85 c0                	test   eax,eax
c0010b0e:	0f 94 c0             	sete   al
c0010b11:	0f b6 c0             	movzx  eax,al
c0010b14:	85 c0                	test   eax,eax
c0010b16:	74 0c                	je     c0010b24 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b18:	b8 de ff 00 c0       	mov    eax,0xc000ffde
c0010b1d:	e9 06 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b22:	66 90                	xchg   ax,ax
c0010b24:	83 ec 08             	sub    esp,0x8
c0010b27:	68 3b 41 02 c0       	push   0xc002413b
c0010b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b30:	e8 1b fc fe ff       	call   c0000750 <strcmp>
c0010b35:	83 c4 10             	add    esp,0x10
c0010b38:	85 c0                	test   eax,eax
c0010b3a:	0f 94 c0             	sete   al
c0010b3d:	0f b6 c0             	movzx  eax,al
c0010b40:	85 c0                	test   eax,eax
c0010b42:	74 0c                	je     c0010b50 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b44:	b8 5f d2 00 c0       	mov    eax,0xc000d25f
c0010b49:	e9 da 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b4e:	66 90                	xchg   ax,ax
c0010b50:	83 ec 08             	sub    esp,0x8
c0010b53:	68 58 41 02 c0       	push   0xc0024158
c0010b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5c:	e8 ef fb fe ff       	call   c0000750 <strcmp>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	85 c0                	test   eax,eax
c0010b66:	0f 94 c0             	sete   al
c0010b69:	0f b6 c0             	movzx  eax,al
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	74 0c                	je     c0010b7c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b70:	b8 64 19 02 c0       	mov    eax,0xc0021964
c0010b75:	e9 ae 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b7a:	66 90                	xchg   ax,ax
c0010b7c:	83 ec 08             	sub    esp,0x8
c0010b7f:	68 62 41 02 c0       	push   0xc0024162
c0010b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b88:	e8 c3 fb fe ff       	call   c0000750 <strcmp>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	85 c0                	test   eax,eax
c0010b92:	0f 94 c0             	sete   al
c0010b95:	0f b6 c0             	movzx  eax,al
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	74 0c                	je     c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b9c:	b8 e4 16 02 c0       	mov    eax,0xc00216e4
c0010ba1:	e9 82 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ba6:	66 90                	xchg   ax,ax
c0010ba8:	83 ec 08             	sub    esp,0x8
c0010bab:	68 6b 41 02 c0       	push   0xc002416b
c0010bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb4:	e8 97 fb fe ff       	call   c0000750 <strcmp>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	0f 94 c0             	sete   al
c0010bc1:	0f b6 c0             	movzx  eax,al
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	74 08                	je     c0010bd0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bc8:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010bcd:	eb 59                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bcf:	90                   	nop
c0010bd0:	83 ec 08             	sub    esp,0x8
c0010bd3:	68 83 41 02 c0       	push   0xc0024183
c0010bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bdc:	e8 6f fb fe ff       	call   c0000750 <strcmp>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	85 c0                	test   eax,eax
c0010be6:	0f 94 c0             	sete   al
c0010be9:	0f b6 c0             	movzx  eax,al
c0010bec:	85 c0                	test   eax,eax
c0010bee:	74 08                	je     c0010bf8 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bf0:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010bf5:	eb 31                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bf7:	90                   	nop
c0010bf8:	83 ec 08             	sub    esp,0x8
c0010bfb:	68 90 41 02 c0       	push   0xc0024190
c0010c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c04:	e8 47 fb fe ff       	call   c0000750 <strcmp>
c0010c09:	83 c4 10             	add    esp,0x10
c0010c0c:	85 c0                	test   eax,eax
c0010c0e:	0f 94 c0             	sete   al
c0010c11:	0f b6 c0             	movzx  eax,al
c0010c14:	85 c0                	test   eax,eax
c0010c16:	74 08                	je     c0010c20 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c18:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010c1d:	eb 09                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c1f:	90                   	nop
c0010c20:	b8 00 00 00 00       	mov    eax,0x0
c0010c25:	8d 76 00             	lea    esi,[esi+0x0]
c0010c28:	83 c4 0c             	add    esp,0xc
c0010c2b:	c3                   	ret    

c0010c2c <Semaphore::Semaphore(int)>:
c0010c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c34:	89 10                	mov    DWORD PTR [eax],edx
c0010c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010c41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c50:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010c57:	90                   	nop
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop
c0010c5a:	66 90                	xchg   ax,ax

c0010c5c <Semaphore::tryAcquire()>:
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	fa                   	cli    
c0010c60:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c65:	83 c0 01             	add    eax,0x1
c0010c68:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010c6d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c72:	83 c0 01             	add    eax,0x1
c0010c75:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c87:	39 c2                	cmp    edx,eax
c0010c89:	7d 59                	jge    c0010ce4 <Semaphore::tryAcquire()+0x88>
c0010c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c92:	8d 50 01             	lea    edx,[eax+0x1]
c0010c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c9c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ca1:	83 e8 01             	sub    eax,0x1
c0010ca4:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ca9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cae:	85 c0                	test   eax,eax
c0010cb0:	75 1a                	jne    c0010ccc <Semaphore::tryAcquire()+0x70>
c0010cb2:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cb7:	85 c0                	test   eax,eax
c0010cb9:	74 11                	je     c0010ccc <Semaphore::tryAcquire()+0x70>
c0010cbb:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010cc5:	e8 46 62 00 00       	call   c0016f10 <schedule()>
c0010cca:	66 90                	xchg   ax,ax
c0010ccc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010cd4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010cd9:	85 c0                	test   eax,eax
c0010cdb:	75 03                	jne    c0010ce0 <Semaphore::tryAcquire()+0x84>
c0010cdd:	fb                   	sti    
c0010cde:	66 90                	xchg   ax,ax
c0010ce0:	b0 01                	mov    al,0x1
c0010ce2:	eb 48                	jmp    c0010d2c <Semaphore::tryAcquire()+0xd0>
c0010ce4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ce9:	83 e8 01             	sub    eax,0x1
c0010cec:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cf1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cf6:	85 c0                	test   eax,eax
c0010cf8:	75 1a                	jne    c0010d14 <Semaphore::tryAcquire()+0xb8>
c0010cfa:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cff:	85 c0                	test   eax,eax
c0010d01:	74 11                	je     c0010d14 <Semaphore::tryAcquire()+0xb8>
c0010d03:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d0d:	e8 fe 61 00 00       	call   c0016f10 <schedule()>
c0010d12:	66 90                	xchg   ax,ax
c0010d14:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d1c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d21:	85 c0                	test   eax,eax
c0010d23:	75 03                	jne    c0010d28 <Semaphore::tryAcquire()+0xcc>
c0010d25:	fb                   	sti    
c0010d26:	66 90                	xchg   ax,ax
c0010d28:	b0 00                	mov    al,0x0
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	83 c4 0c             	add    esp,0xc
c0010d2f:	c3                   	ret    

c0010d30 <Semaphore::assertLocked(char const*)>:
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	fa                   	cli    
c0010d34:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d39:	83 c0 01             	add    eax,0x1
c0010d3c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010d41:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d46:	83 c0 01             	add    eax,0x1
c0010d49:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d52:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d5b:	39 c2                	cmp    edx,eax
c0010d5d:	7d 11                	jge    c0010d70 <Semaphore::assertLocked(char const*)+0x40>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d66:	e8 73 f2 ff ff       	call   c000ffde <KePanic(char const*)>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	66 90                	xchg   ax,ax
c0010d70:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d75:	83 e8 01             	sub    eax,0x1
c0010d78:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d7d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d82:	85 c0                	test   eax,eax
c0010d84:	75 1a                	jne    c0010da0 <Semaphore::assertLocked(char const*)+0x70>
c0010d86:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d8b:	85 c0                	test   eax,eax
c0010d8d:	74 11                	je     c0010da0 <Semaphore::assertLocked(char const*)+0x70>
c0010d8f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d99:	e8 72 61 00 00       	call   c0016f10 <schedule()>
c0010d9e:	66 90                	xchg   ax,ax
c0010da0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010da8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010dad:	85 c0                	test   eax,eax
c0010daf:	75 03                	jne    c0010db4 <Semaphore::assertLocked(char const*)+0x84>
c0010db1:	fb                   	sti    
c0010db2:	66 90                	xchg   ax,ax
c0010db4:	90                   	nop
c0010db5:	83 c4 0c             	add    esp,0xc
c0010db8:	c3                   	ret    
c0010db9:	90                   	nop
c0010dba:	66 90                	xchg   ax,ax

c0010dbc <Semaphore::acquire(int)>:
c0010dbc:	83 ec 1c             	sub    esp,0x1c
c0010dbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010dc4:	0f 84 ae 00 00 00    	je     c0010e78 <Semaphore::acquire(int)+0xbc>
c0010dca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010dd2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010dd7:	90                   	nop
c0010dd8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010ddd:	85 c0                	test   eax,eax
c0010ddf:	0f 84 87 00 00 00    	je     c0010e6c <Semaphore::acquire(int)+0xb0>
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dec:	e8 6b fe ff ff       	call   c0010c5c <Semaphore::tryAcquire()>
c0010df1:	83 c4 10             	add    esp,0x10
c0010df4:	83 f0 01             	xor    eax,0x1
c0010df7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010dfb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010dff:	83 f0 01             	xor    eax,0x1
c0010e02:	0f b6 c0             	movzx  eax,al
c0010e05:	85 c0                	test   eax,eax
c0010e07:	75 5f                	jne    c0010e68 <Semaphore::acquire(int)+0xac>
c0010e09:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e0e:	7f 34                	jg     c0010e44 <Semaphore::acquire(int)+0x88>
c0010e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e14:	89 d0                	mov    eax,edx
c0010e16:	c1 e0 02             	shl    eax,0x2
c0010e19:	01 d0                	add    eax,edx
c0010e1b:	01 c0                	add    eax,eax
c0010e1d:	89 c2                	mov    edx,eax
c0010e1f:	c1 fa 1f             	sar    edx,0x1f
c0010e22:	83 ec 08             	sub    esp,0x8
c0010e25:	52                   	push   edx
c0010e26:	50                   	push   eax
c0010e27:	e8 d8 62 00 00       	call   c0017104 <milliTenthSleep(unsigned long long)>
c0010e2c:	83 c4 10             	add    esp,0x10
c0010e2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e33:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010e37:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010e3f:	eb 97                	jmp    c0010dd8 <Semaphore::acquire(int)+0x1c>
c0010e41:	8d 76 00             	lea    esi,[esi+0x0]
c0010e44:	83 ec 08             	sub    esp,0x8
c0010e47:	6a 00                	push   0x0
c0010e49:	68 90 01 00 00       	push   0x190
c0010e4e:	e8 b1 62 00 00       	call   c0017104 <milliTenthSleep(unsigned long long)>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010e5b:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010e60:	e9 73 ff ff ff       	jmp    c0010dd8 <Semaphore::acquire(int)+0x1c>
c0010e65:	8d 76 00             	lea    esi,[esi+0x0]
c0010e68:	90                   	nop
c0010e69:	8d 76 00             	lea    esi,[esi+0x0]
c0010e6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e70:	e9 fb 00 00 00       	jmp    c0010f70 <Semaphore::acquire(int)+0x1b4>
c0010e75:	8d 76 00             	lea    esi,[esi+0x0]
c0010e78:	fa                   	cli    
c0010e79:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010e7e:	83 c0 01             	add    eax,0x1
c0010e81:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010e86:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e8b:	83 c0 01             	add    eax,0x1
c0010e8e:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ea0:	39 c2                	cmp    edx,eax
c0010ea2:	7d 14                	jge    c0010eb8 <Semaphore::acquire(int)+0xfc>
c0010ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010eab:	8d 50 01             	lea    edx,[eax+0x1]
c0010eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010eb5:	eb 6d                	jmp    c0010f24 <Semaphore::acquire(int)+0x168>
c0010eb7:	90                   	nop
c0010eb8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ebd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ebf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecd:	85 c0                	test   eax,eax
c0010ecf:	75 13                	jne    c0010ee4 <Semaphore::acquire(int)+0x128>
c0010ed1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010edc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010edf:	eb 17                	jmp    c0010ef8 <Semaphore::acquire(int)+0x13c>
c0010ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ef0:	8b 12                	mov    edx,DWORD PTR [edx]
c0010ef2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010efd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f06:	83 ec 0c             	sub    esp,0xc
c0010f09:	68 a0 41 02 c0       	push   0xc00241a0
c0010f0e:	e8 51 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	6a 05                	push   0x5
c0010f1b:	e8 b0 60 00 00       	call   c0016fd0 <blockTask(TaskState)>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	90                   	nop
c0010f24:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f29:	83 e8 01             	sub    eax,0x1
c0010f2c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f31:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f36:	85 c0                	test   eax,eax
c0010f38:	75 1a                	jne    c0010f54 <Semaphore::acquire(int)+0x198>
c0010f3a:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010f3f:	85 c0                	test   eax,eax
c0010f41:	74 11                	je     c0010f54 <Semaphore::acquire(int)+0x198>
c0010f43:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010f4d:	e8 be 5f 00 00       	call   c0016f10 <schedule()>
c0010f52:	66 90                	xchg   ax,ax
c0010f54:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010f5c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f61:	85 c0                	test   eax,eax
c0010f63:	75 03                	jne    c0010f68 <Semaphore::acquire(int)+0x1ac>
c0010f65:	fb                   	sti    
c0010f66:	66 90                	xchg   ax,ax
c0010f68:	b8 00 00 00 00       	mov    eax,0x0
c0010f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	c3                   	ret    

c0010f74 <Semaphore::acquire()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 08             	sub    esp,0x8
c0010f7a:	6a 00                	push   0x0
c0010f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f80:	e8 37 fe ff ff       	call   c0010dbc <Semaphore::acquire(int)>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	90                   	nop
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop
c0010f8e:	66 90                	xchg   ax,ax

c0010f90 <Semaphore::release()>:
c0010f90:	83 ec 1c             	sub    esp,0x1c
c0010f93:	fa                   	cli    
c0010f94:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f99:	83 c0 01             	add    eax,0x1
c0010f9c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010fa1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010fa6:	83 c0 01             	add    eax,0x1
c0010fa9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb5:	85 c0                	test   eax,eax
c0010fb7:	74 2b                	je     c0010fe4 <Semaphore::release()+0x54>
c0010fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fd2:	83 ec 0c             	sub    esp,0xc
c0010fd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fd9:	e8 8e 62 00 00       	call   c001726c <unblockTask(ThreadControlBlock*)>
c0010fde:	83 c4 10             	add    esp,0x10
c0010fe1:	eb 15                	jmp    c0010ff8 <Semaphore::release()+0x68>
c0010fe3:	90                   	nop
c0010fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010feb:	8d 50 ff             	lea    edx,[eax-0x1]
c0010fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ff2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ff8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ffd:	83 e8 01             	sub    eax,0x1
c0011000:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0011005:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001100a:	85 c0                	test   eax,eax
c001100c:	75 1a                	jne    c0011028 <Semaphore::release()+0x98>
c001100e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0011013:	85 c0                	test   eax,eax
c0011015:	74 11                	je     c0011028 <Semaphore::release()+0x98>
c0011017:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0011021:	e8 ea 5e 00 00       	call   c0016f10 <schedule()>
c0011026:	66 90                	xchg   ax,ax
c0011028:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0011030:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0011035:	85 c0                	test   eax,eax
c0011037:	75 03                	jne    c001103c <Semaphore::release()+0xac>
c0011039:	fb                   	sti    
c001103a:	66 90                	xchg   ax,ax
c001103c:	90                   	nop
c001103d:	83 c4 1c             	add    esp,0x1c
c0011040:	c3                   	ret    

c0011041 <KiSigKill(int)>:
c0011041:	83 ec 0c             	sub    esp,0xc
c0011044:	6a 00                	push   0x0
c0011046:	6a 00                	push   0x0
c0011048:	6a ff                	push   0xffffffff
c001104a:	6a 01                	push   0x1
c001104c:	e8 01 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011051:	83 c4 1c             	add    esp,0x1c
c0011054:	c3                   	ret    

c0011055 <KiDefaultSignalHandlerIgnore(int)>:
c0011055:	c3                   	ret    

c0011056 <KiDefaultSignalHandlerPause(int)>:
c0011056:	57                   	push   edi
c0011057:	b9 07 00 00 00       	mov    ecx,0x7
c001105c:	56                   	push   esi
c001105d:	be fb 41 02 c0       	mov    esi,0xc00241fb
c0011062:	83 ec 24             	sub    esp,0x24
c0011065:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011069:	fc                   	cld    
c001106a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001106c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011070:	50                   	push   eax
c0011071:	6a 00                	push   0x0
c0011073:	6a 00                	push   0x0
c0011075:	6a 27                	push   0x27
c0011077:	e8 d6 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001107c:	83 c4 34             	add    esp,0x34
c001107f:	5e                   	pop    esi
c0011080:	5f                   	pop    edi
c0011081:	c3                   	ret    

c0011082 <KiDefaultSignalHandlerResume(int)>:
c0011082:	57                   	push   edi
c0011083:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011088:	56                   	push   esi
c0011089:	be 17 42 02 c0       	mov    esi,0xc0024217
c001108e:	83 ec 24             	sub    esp,0x24
c0011091:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011095:	fc                   	cld    
c0011096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011098:	8d 44 24 03          	lea    eax,[esp+0x3]
c001109c:	50                   	push   eax
c001109d:	6a 00                	push   0x0
c001109f:	6a 00                	push   0x0
c00110a1:	6a 27                	push   0x27
c00110a3:	e8 aa 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110a8:	83 c4 34             	add    esp,0x34
c00110ab:	5e                   	pop    esi
c00110ac:	5f                   	pop    edi
c00110ad:	c3                   	ret    

c00110ae <KeDeinitSignals(SigHandlerBlock*)>:
c00110ae:	e9 f4 eb ff ff       	jmp    c000fca7 <free>

c00110b3 <KeInitSignals()>:
c00110b3:	53                   	push   ebx
c00110b4:	83 ec 14             	sub    esp,0x14
c00110b7:	68 c8 00 00 00       	push   0xc8
c00110bc:	e8 d6 eb ff ff       	call   c000fc97 <malloc>
c00110c1:	83 c4 0c             	add    esp,0xc
c00110c4:	89 c3                	mov    ebx,eax
c00110c6:	6a 04                	push   0x4
c00110c8:	6a 00                	push   0x0
c00110ca:	50                   	push   eax
c00110cb:	e8 20 f4 fe ff       	call   c00004f0 <memset>
c00110d0:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00110da:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00110e4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110eb:	83 c4 0c             	add    esp,0xc
c00110ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00110f4:	6a 20                	push   0x20
c00110f6:	6a 00                	push   0x0
c00110f8:	50                   	push   eax
c00110f9:	e8 f2 f3 fe ff       	call   c00004f0 <memset>
c00110fe:	83 c4 0c             	add    esp,0xc
c0011101:	6a 44                	push   0x44
c0011103:	6a 00                	push   0x0
c0011105:	53                   	push   ebx
c0011106:	e8 e5 f3 fe ff       	call   c00004f0 <memset>
c001110b:	83 c4 0c             	add    esp,0xc
c001110e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011114:	6a 11                	push   0x11
c0011116:	6a 00                	push   0x0
c0011118:	50                   	push   eax
c0011119:	e8 d2 f3 fe ff       	call   c00004f0 <memset>
c001111e:	89 d8                	mov    eax,ebx
c0011120:	83 c4 18             	add    esp,0x18
c0011123:	5b                   	pop    ebx
c0011124:	c3                   	ret    

c0011125 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011125:	53                   	push   ebx
c0011126:	b8 01 00 00 00       	mov    eax,0x1
c001112b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001112f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011133:	83 f9 10             	cmp    ecx,0x10
c0011136:	7f 21                	jg     c0011159 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011138:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001113b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113f:	89 03                	mov    DWORD PTR [ebx],eax
c0011141:	b8 01 00 00 00       	mov    eax,0x1
c0011146:	d3 e0                	shl    eax,cl
c0011148:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001114c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001114f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011157:	31 c0                	xor    eax,eax
c0011159:	5b                   	pop    ebx
c001115a:	c3                   	ret    

c001115b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001115b:	55                   	push   ebp
c001115c:	57                   	push   edi
c001115d:	bf 08 00 00 00       	mov    edi,0x8
c0011162:	56                   	push   esi
c0011163:	53                   	push   ebx
c0011164:	83 ec 14             	sub    esp,0x14
c0011167:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001116b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001116f:	68 34 42 02 c0       	push   0xc0024234
c0011174:	e8 eb 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011179:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011180:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	31 c9                	xor    ecx,ecx
c001118b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001118f:	99                   	cdq    
c0011190:	f7 ff                	idiv   edi
c0011192:	8d 42 24             	lea    eax,[edx+0x24]
c0011195:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011199:	85 f6                	test   esi,esi
c001119b:	75 1a                	jne    c00111b7 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c001119d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111a1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00111a5:	50                   	push   eax
c00111a6:	50                   	push   eax
c00111a7:	52                   	push   edx
c00111a8:	68 4a 42 02 c0       	push   0xc002424a
c00111ad:	e8 b2 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111b2:	83 c4 10             	add    esp,0x10
c00111b5:	eb 1b                	jmp    c00111d2 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c00111b7:	41                   	inc    ecx
c00111b8:	83 f9 08             	cmp    ecx,0x8
c00111bb:	75 ce                	jne    c001118b <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c00111bd:	83 ec 0c             	sub    esp,0xc
c00111c0:	be 01 00 00 00       	mov    esi,0x1
c00111c5:	68 6b 42 02 c0       	push   0xc002426b
c00111ca:	e8 95 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	83 c4 0c             	add    esp,0xc
c00111d5:	89 f0                	mov    eax,esi
c00111d7:	5b                   	pop    ebx
c00111d8:	5e                   	pop    esi
c00111d9:	5f                   	pop    edi
c00111da:	5d                   	pop    ebp
c00111db:	c3                   	ret    

c00111dc <KeCheckSignal(SigHandlerBlock*, int*)>:
c00111dc:	55                   	push   ebp
c00111dd:	57                   	push   edi
c00111de:	56                   	push   esi
c00111df:	53                   	push   ebx
c00111e0:	83 ec 1c             	sub    esp,0x1c
c00111e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00111e7:	85 db                	test   ebx,ebx
c00111e9:	0f 84 e0 00 00 00    	je     c00112cf <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00111ef:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00111f6:	0f 84 d3 00 00 00    	je     c00112cf <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00111fc:	31 c9                	xor    ecx,ecx
c00111fe:	bf 08 00 00 00       	mov    edi,0x8
c0011203:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011209:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001120c:	99                   	cdq    
c001120d:	f7 ff                	idiv   edi
c001120f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011216:	85 ed                	test   ebp,ebp
c0011218:	0f 84 d2 00 00 00    	je     c00112f0 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001121e:	89 e9                	mov    ecx,ebp
c0011220:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011226:	bf 01 00 00 00       	mov    edi,0x1
c001122b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001122f:	d3 e7                	shl    edi,cl
c0011231:	31 c9                	xor    ecx,ecx
c0011233:	b8 01 00 00 00       	mov    eax,0x1
c0011238:	d3 e0                	shl    eax,cl
c001123a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001123e:	74 0a                	je     c001124a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011240:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011244:	0f 85 85 00 00 00    	jne    c00112cf <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001124a:	41                   	inc    ecx
c001124b:	83 f9 11             	cmp    ecx,0x11
c001124e:	75 e3                	jne    c0011233 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011250:	46                   	inc    esi
c0011251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011255:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001125b:	09 f8                	or     eax,edi
c001125d:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011268:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001126e:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011275:	31 c0                	xor    eax,eax
c0011277:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001127f:	74 09                	je     c001128a <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011281:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011288:	eb 06                	jmp    c0011290 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001128a:	40                   	inc    eax
c001128b:	83 f8 08             	cmp    eax,0x8
c001128e:	75 e7                	jne    c0011277 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011290:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011293:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011297:	83 fd 09             	cmp    ebp,0x9
c001129a:	89 2a                	mov    DWORD PTR [edx],ebp
c001129c:	75 14                	jne    c00112b2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001129e:	83 ec 0c             	sub    esp,0xc
c00112a1:	68 7c 42 02 c0       	push   0xc002427c
c00112a6:	e8 b9 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112ab:	b8 41 10 01 c0       	mov    eax,0xc0011041
c00112b0:	eb 39                	jmp    c00112eb <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c00112b2:	83 f8 01             	cmp    eax,0x1
c00112b5:	75 1c                	jne    c00112d3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	f7 d7                	not    edi
c00112bc:	68 86 42 02 c0       	push   0xc0024286
c00112c1:	e8 9e 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112c6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00112cc:	83 c4 10             	add    esp,0x10
c00112cf:	31 c0                	xor    eax,eax
c00112d1:	eb 30                	jmp    c0011303 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00112d3:	85 c0                	test   eax,eax
c00112d5:	75 2c                	jne    c0011303 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00112d7:	83 ec 0c             	sub    esp,0xc
c00112da:	68 93 42 02 c0       	push   0xc0024293
c00112df:	e8 80 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112e4:	8b 04 ad 40 65 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9ac0]
c00112eb:	83 c4 10             	add    esp,0x10
c00112ee:	eb 13                	jmp    c0011303 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00112f0:	46                   	inc    esi
c00112f1:	41                   	inc    ecx
c00112f2:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112f8:	83 f9 08             	cmp    ecx,0x8
c00112fb:	0f 85 02 ff ff ff    	jne    c0011203 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011301:	eb cc                	jmp    c00112cf <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011303:	83 c4 1c             	add    esp,0x1c
c0011306:	5b                   	pop    ebx
c0011307:	5e                   	pop    esi
c0011308:	5f                   	pop    edi
c0011309:	5d                   	pop    ebp
c001130a:	c3                   	ret    

c001130b <KiCheckSignalZ>:
c001130b:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c0011312:	74 43                	je     c0011357 <KiCheckSignalZ+0x4c>
c0011314:	83 ec 24             	sub    esp,0x24
c0011317:	8d 44 24 14          	lea    eax,[esp+0x14]
c001131b:	50                   	push   eax
c001131c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011321:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011324:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001132a:	e8 ad fe ff ff       	call   c00111dc <KeCheckSignal(SigHandlerBlock*, int*)>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	31 d2                	xor    edx,edx
c0011334:	85 c0                	test   eax,eax
c0011336:	74 19                	je     c0011351 <KiCheckSignalZ+0x46>
c0011338:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001133e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011341:	89 02                	mov    DWORD PTR [edx],eax
c0011343:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001134a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001134e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011351:	89 d0                	mov    eax,edx
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	c3                   	ret    
c0011357:	31 d2                	xor    edx,edx
c0011359:	89 d0                	mov    eax,edx
c001135b:	c3                   	ret    

c001135c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	bb 01 00 00 00       	mov    ebx,0x1
c0011363:	52                   	push   edx
c0011364:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011368:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001136c:	d3 e3                	shl    ebx,cl
c001136e:	83 f9 10             	cmp    ecx,0x10
c0011371:	7f 08                	jg     c001137b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011373:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011379:	75 10                	jne    c001138b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001137b:	83 ec 0c             	sub    esp,0xc
c001137e:	68 b6 42 02 c0       	push   0xc00242b6
c0011383:	e8 56 ec ff ff       	call   c000ffde <KePanic(char const*)>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	f7 d3                	not    ebx
c001138d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011393:	58                   	pop    eax
c0011394:	5b                   	pop    ebx
c0011395:	5e                   	pop    esi
c0011396:	c3                   	ret    

c0011397 <KiFinishSignalZ>:
c0011397:	53                   	push   ebx
c0011398:	83 ec 08             	sub    esp,0x8
c001139b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00113a7:	83 fa 08             	cmp    edx,0x8
c00113aa:	75 0c                	jne    c00113b8 <KiFinishSignalZ+0x21>
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	50                   	push   eax
c00113b0:	e8 b7 5e 00 00       	call   c001726c <unblockTask(ThreadControlBlock*)>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	50                   	push   eax
c00113b9:	50                   	push   eax
c00113ba:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00113bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113c5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00113cb:	e8 8c ff ff ff       	call   c001135c <KeCompleteSignal(SigHandlerBlock*, int)>
c00113d0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00113d6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00113dd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00113e4:	83 c4 18             	add    esp,0x18
c00113e7:	5b                   	pop    ebx
c00113e8:	c3                   	ret    

c00113e9 <SysSeekDir(regs*)>:
c00113e9:	31 c0                	xor    eax,eax
c00113eb:	31 d2                	xor    edx,edx
c00113ed:	c3                   	ret    

c00113ee <SysTellDir(regs*)>:
c00113ee:	31 c0                	xor    eax,eax
c00113f0:	31 d2                	xor    edx,edx
c00113f2:	c3                   	ret    

c00113f3 <SysVerify(regs*)>:
c00113f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f7:	31 d2                	xor    edx,edx
c00113f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113fc:	c3                   	ret    

c00113fd <SysGetArgc(regs*)>:
c00113fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011402:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011405:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001140b:	89 c2                	mov    edx,eax
c001140d:	c1 fa 1f             	sar    edx,0x1f
c0011410:	c3                   	ret    

c0011411 <SysTTYName(regs*)>:
c0011411:	b8 01 00 00 00       	mov    eax,0x1
c0011416:	31 d2                	xor    edx,edx
c0011418:	c3                   	ret    

c0011419 <SysFormatDisk(regs*)>:
c0011419:	56                   	push   esi
c001141a:	53                   	push   ebx
c001141b:	83 ec 04             	sub    esp,0x4
c001141e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011422:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011428:	eb 28                	jmp    c0011452 <SysFormatDisk(regs*)+0x39>
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011430:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011433:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011435:	51                   	push   ecx
c0011436:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011439:	51                   	push   ecx
c001143a:	50                   	push   eax
c001143b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0011442:	50                   	push   eax
c0011443:	53                   	push   ebx
c0011444:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011447:	83 c4 20             	add    esp,0x20
c001144a:	83 f8 08             	cmp    eax,0x8
c001144d:	75 14                	jne    c0011463 <SysFormatDisk(regs*)+0x4a>
c001144f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011452:	85 db                	test   ebx,ebx
c0011454:	75 d4                	jne    c001142a <SysFormatDisk(regs*)+0x11>
c0011456:	83 c4 04             	add    esp,0x4
c0011459:	b8 03 00 00 00       	mov    eax,0x3
c001145e:	31 d2                	xor    edx,edx
c0011460:	5b                   	pop    ebx
c0011461:	5e                   	pop    esi
c0011462:	c3                   	ret    
c0011463:	85 c0                	test   eax,eax
c0011465:	74 1f                	je     c0011486 <SysFormatDisk(regs*)+0x6d>
c0011467:	83 f8 09             	cmp    eax,0x9
c001146a:	74 0d                	je     c0011479 <SysFormatDisk(regs*)+0x60>
c001146c:	83 c4 04             	add    esp,0x4
c001146f:	b8 02 00 00 00       	mov    eax,0x2
c0011474:	31 d2                	xor    edx,edx
c0011476:	5b                   	pop    ebx
c0011477:	5e                   	pop    esi
c0011478:	c3                   	ret    
c0011479:	83 c4 04             	add    esp,0x4
c001147c:	b8 01 00 00 00       	mov    eax,0x1
c0011481:	31 d2                	xor    edx,edx
c0011483:	5b                   	pop    ebx
c0011484:	5e                   	pop    esi
c0011485:	c3                   	ret    
c0011486:	83 c4 04             	add    esp,0x4
c0011489:	31 c0                	xor    eax,eax
c001148b:	31 d2                	xor    edx,edx
c001148d:	5b                   	pop    ebx
c001148e:	5e                   	pop    esi
c001148f:	c3                   	ret    

c0011490 <SysSetDiskVolumeLabel(regs*)>:
c0011490:	56                   	push   esi
c0011491:	53                   	push   ebx
c0011492:	83 ec 04             	sub    esp,0x4
c0011495:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011499:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001149c:	83 f8 19             	cmp    eax,0x19
c001149f:	77 33                	ja     c00114d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114a1:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00114a8:	85 c9                	test   ecx,ecx
c00114aa:	74 28                	je     c00114d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114ac:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00114af:	85 db                	test   ebx,ebx
c00114b1:	74 21                	je     c00114d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114b3:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00114b9:	85 d2                	test   edx,edx
c00114bb:	74 17                	je     c00114d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114bd:	8b 32                	mov    esi,DWORD PTR [edx]
c00114bf:	53                   	push   ebx
c00114c0:	50                   	push   eax
c00114c1:	51                   	push   ecx
c00114c2:	52                   	push   edx
c00114c3:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	89 c2                	mov    edx,eax
c00114cb:	83 c4 04             	add    esp,0x4
c00114ce:	c1 fa 1f             	sar    edx,0x1f
c00114d1:	5b                   	pop    ebx
c00114d2:	5e                   	pop    esi
c00114d3:	c3                   	ret    
c00114d4:	83 c4 04             	add    esp,0x4
c00114d7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00114dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e1:	5b                   	pop    ebx
c00114e2:	5e                   	pop    esi
c00114e3:	c3                   	ret    

c00114e4 <SysGetDiskVolumeLabel(regs*)>:
c00114e4:	57                   	push   edi
c00114e5:	56                   	push   esi
c00114e6:	53                   	push   ebx
c00114e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114eb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00114ee:	83 fa 19             	cmp    edx,0x19
c00114f1:	77 3c                	ja     c001152f <SysGetDiskVolumeLabel(regs*)+0x4b>
c00114f3:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c00114fa:	85 c9                	test   ecx,ecx
c00114fc:	74 31                	je     c001152f <SysGetDiskVolumeLabel(regs*)+0x4b>
c00114fe:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011501:	85 db                	test   ebx,ebx
c0011503:	74 2a                	je     c001152f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011505:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011508:	85 f6                	test   esi,esi
c001150a:	74 23                	je     c001152f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001150c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011512:	85 c0                	test   eax,eax
c0011514:	74 19                	je     c001152f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	8b 38                	mov    edi,DWORD PTR [eax]
c001151b:	56                   	push   esi
c001151c:	53                   	push   ebx
c001151d:	52                   	push   edx
c001151e:	51                   	push   ecx
c001151f:	50                   	push   eax
c0011520:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011523:	83 c4 20             	add    esp,0x20
c0011526:	89 c2                	mov    edx,eax
c0011528:	5b                   	pop    ebx
c0011529:	c1 fa 1f             	sar    edx,0x1f
c001152c:	5e                   	pop    esi
c001152d:	5f                   	pop    edi
c001152e:	c3                   	ret    
c001152f:	5b                   	pop    ebx
c0011530:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011535:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153a:	5e                   	pop    esi
c001153b:	5f                   	pop    edi
c001153c:	c3                   	ret    

c001153d <SysRealpath(regs*)>:
c001153d:	83 ec 0c             	sub    esp,0xc
c0011540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011544:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011547:	85 d2                	test   edx,edx
c0011549:	74 07                	je     c0011552 <SysRealpath(regs*)+0x15>
c001154b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001154e:	85 c0                	test   eax,eax
c0011550:	75 0b                	jne    c001155d <SysRealpath(regs*)+0x20>
c0011552:	b8 01 00 00 00       	mov    eax,0x1
c0011557:	31 d2                	xor    edx,edx
c0011559:	83 c4 0c             	add    esp,0xc
c001155c:	c3                   	ret    
c001155d:	6a 00                	push   0x0
c001155f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011565:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011568:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001156e:	51                   	push   ecx
c001156f:	52                   	push   edx
c0011570:	50                   	push   eax
c0011571:	e8 a4 68 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011576:	83 c4 10             	add    esp,0x10
c0011579:	31 c0                	xor    eax,eax
c001157b:	31 d2                	xor    edx,edx
c001157d:	83 c4 0c             	add    esp,0xc
c0011580:	c3                   	ret    

c0011581 <SysReadDir(regs*)>:
c0011581:	53                   	push   ebx
c0011582:	83 ec 18             	sub    esp,0x18
c0011585:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011589:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001158c:	83 f8 02             	cmp    eax,0x2
c001158f:	76 61                	jbe    c00115f2 <SysReadDir(regs*)+0x71>
c0011591:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011598:	77 49                	ja     c00115e3 <SysReadDir(regs*)+0x62>
c001159a:	83 ec 0c             	sub    esp,0xc
c001159d:	50                   	push   eax
c001159e:	e8 5e 1d 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	85 c0                	test   eax,eax
c00115a8:	74 39                	je     c00115e3 <SysReadDir(regs*)+0x62>
c00115aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00115b2:	83 ec 0c             	sub    esp,0xc
c00115b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00115b7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00115bb:	51                   	push   ecx
c00115bc:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00115bf:	51                   	push   ecx
c00115c0:	6a 00                	push   0x0
c00115c2:	68 10 01 00 00       	push   0x110
c00115c7:	50                   	push   eax
c00115c8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00115cb:	83 c4 20             	add    esp,0x20
c00115ce:	85 c0                	test   eax,eax
c00115d0:	74 29                	je     c00115fb <SysReadDir(regs*)+0x7a>
c00115d2:	83 f8 07             	cmp    eax,0x7
c00115d5:	74 1b                	je     c00115f2 <SysReadDir(regs*)+0x71>
c00115d7:	b8 02 00 00 00       	mov    eax,0x2
c00115dc:	31 d2                	xor    edx,edx
c00115de:	83 c4 18             	add    esp,0x18
c00115e1:	5b                   	pop    ebx
c00115e2:	c3                   	ret    
c00115e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ed:	83 c4 18             	add    esp,0x18
c00115f0:	5b                   	pop    ebx
c00115f1:	c3                   	ret    
c00115f2:	b8 01 00 00 00       	mov    eax,0x1
c00115f7:	31 d2                	xor    edx,edx
c00115f9:	eb e3                	jmp    c00115de <SysReadDir(regs*)+0x5d>
c00115fb:	31 c0                	xor    eax,eax
c00115fd:	31 d2                	xor    edx,edx
c00115ff:	eb dd                	jmp    c00115de <SysReadDir(regs*)+0x5d>

c0011601 <SysIsATTY(regs*)>:
c0011601:	83 ec 0c             	sub    esp,0xc
c0011604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011608:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001160b:	83 f8 02             	cmp    eax,0x2
c001160e:	76 07                	jbe    c0011617 <SysIsATTY(regs*)+0x16>
c0011610:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011615:	75 26                	jne    c001163d <SysIsATTY(regs*)+0x3c>
c0011617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001161c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001161f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011625:	85 c0                	test   eax,eax
c0011627:	74 24                	je     c001164d <SysIsATTY(regs*)+0x4c>
c0011629:	83 ec 0c             	sub    esp,0xc
c001162c:	8b 10                	mov    edx,DWORD PTR [eax]
c001162e:	50                   	push   eax
c001162f:	ff 12                	call   DWORD PTR [edx]
c0011631:	31 d2                	xor    edx,edx
c0011633:	0f b6 c0             	movzx  eax,al
c0011636:	83 c4 10             	add    esp,0x10
c0011639:	83 c4 0c             	add    esp,0xc
c001163c:	c3                   	ret    
c001163d:	83 ec 0c             	sub    esp,0xc
c0011640:	50                   	push   eax
c0011641:	e8 bb 1c 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	85 c0                	test   eax,eax
c001164b:	75 dc                	jne    c0011629 <SysIsATTY(regs*)+0x28>
c001164d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011652:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011657:	83 c4 0c             	add    esp,0xc
c001165a:	c3                   	ret    

c001165b <SysSeek(regs*)>:
c001165b:	53                   	push   ebx
c001165c:	83 ec 08             	sub    esp,0x8
c001165f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011663:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011666:	8d 50 fd             	lea    edx,[eax-0x3]
c0011669:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001166f:	77 39                	ja     c00116aa <SysSeek(regs*)+0x4f>
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	50                   	push   eax
c0011675:	e8 87 1c 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c001167a:	83 c4 10             	add    esp,0x10
c001167d:	85 c0                	test   eax,eax
c001167f:	74 29                	je     c00116aa <SysSeek(regs*)+0x4f>
c0011681:	83 ec 04             	sub    esp,0x4
c0011684:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011687:	31 db                	xor    ebx,ebx
c0011689:	53                   	push   ebx
c001168a:	51                   	push   ecx
c001168b:	50                   	push   eax
c001168c:	e8 7d 6b ff ff       	call   c000820e <File::seek(unsigned long long)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	85 c0                	test   eax,eax
c0011696:	0f 95 c0             	setne  al
c0011699:	31 d2                	xor    edx,edx
c001169b:	0f b6 c0             	movzx  eax,al
c001169e:	f7 d8                	neg    eax
c00116a0:	83 d2 00             	adc    edx,0x0
c00116a3:	83 c4 08             	add    esp,0x8
c00116a6:	f7 da                	neg    edx
c00116a8:	5b                   	pop    ebx
c00116a9:	c3                   	ret    
c00116aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116b4:	83 c4 08             	add    esp,0x8
c00116b7:	5b                   	pop    ebx
c00116b8:	c3                   	ret    

c00116b9 <SysTell(regs*)>:
c00116b9:	53                   	push   ebx
c00116ba:	83 ec 08             	sub    esp,0x8
c00116bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116c4:	83 f8 02             	cmp    eax,0x2
c00116c7:	76 56                	jbe    c001171f <SysTell(regs*)+0x66>
c00116c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116ce:	76 19                	jbe    c00116e9 <SysTell(regs*)+0x30>
c00116d0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00116d3:	31 d2                	xor    edx,edx
c00116d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116e2:	31 c0                	xor    eax,eax
c00116e4:	83 c4 08             	add    esp,0x8
c00116e7:	5b                   	pop    ebx
c00116e8:	c3                   	ret    
c00116e9:	83 ec 0c             	sub    esp,0xc
c00116ec:	50                   	push   eax
c00116ed:	e8 0f 1c 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	85 c0                	test   eax,eax
c00116f7:	74 26                	je     c001171f <SysTell(regs*)+0x66>
c00116f9:	83 ec 08             	sub    esp,0x8
c00116fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116ff:	52                   	push   edx
c0011700:	50                   	push   eax
c0011701:	e8 b4 6b ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	85 c0                	test   eax,eax
c001170b:	0f 95 c0             	setne  al
c001170e:	31 d2                	xor    edx,edx
c0011710:	0f b6 c0             	movzx  eax,al
c0011713:	f7 d8                	neg    eax
c0011715:	83 d2 00             	adc    edx,0x0
c0011718:	83 c4 08             	add    esp,0x8
c001171b:	f7 da                	neg    edx
c001171d:	5b                   	pop    ebx
c001171e:	c3                   	ret    
c001171f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011724:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011729:	83 c4 08             	add    esp,0x8
c001172c:	5b                   	pop    ebx
c001172d:	c3                   	ret    

c001172e <SysSize(regs*)>:
c001172e:	53                   	push   ebx
c001172f:	83 ec 18             	sub    esp,0x18
c0011732:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011736:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011739:	83 f8 02             	cmp    eax,0x2
c001173c:	76 5b                	jbe    c0011799 <SysSize(regs*)+0x6b>
c001173e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011743:	76 19                	jbe    c001175e <SysSize(regs*)+0x30>
c0011745:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011748:	31 d2                	xor    edx,edx
c001174a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011750:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011757:	31 c0                	xor    eax,eax
c0011759:	83 c4 18             	add    esp,0x18
c001175c:	5b                   	pop    ebx
c001175d:	c3                   	ret    
c001175e:	83 ec 0c             	sub    esp,0xc
c0011761:	50                   	push   eax
c0011762:	e8 9a 1b 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	85 c0                	test   eax,eax
c001176c:	74 2b                	je     c0011799 <SysSize(regs*)+0x6b>
c001176e:	83 ec 04             	sub    esp,0x4
c0011771:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011775:	52                   	push   edx
c0011776:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011779:	52                   	push   edx
c001177a:	50                   	push   eax
c001177b:	e8 d2 6c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	85 c0                	test   eax,eax
c0011785:	0f 95 c0             	setne  al
c0011788:	31 d2                	xor    edx,edx
c001178a:	0f b6 c0             	movzx  eax,al
c001178d:	f7 d8                	neg    eax
c001178f:	83 d2 00             	adc    edx,0x0
c0011792:	83 c4 18             	add    esp,0x18
c0011795:	f7 da                	neg    edx
c0011797:	5b                   	pop    ebx
c0011798:	c3                   	ret    
c0011799:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001179e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117a3:	83 c4 18             	add    esp,0x18
c00117a6:	5b                   	pop    ebx
c00117a7:	c3                   	ret    

c00117a8 <SysSizeFromFilename(regs*)>:
c00117a8:	55                   	push   ebp
c00117a9:	57                   	push   edi
c00117aa:	56                   	push   esi
c00117ab:	53                   	push   ebx
c00117ac:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00117b2:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00117b9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117bc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117bf:	85 f6                	test   esi,esi
c00117c1:	74 34                	je     c00117f7 <SysSizeFromFilename(regs*)+0x4f>
c00117c3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00117c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117cc:	83 f8 02             	cmp    eax,0x2
c00117cf:	76 2d                	jbe    c00117fe <SysSizeFromFilename(regs*)+0x56>
c00117d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117d6:	76 3b                	jbe    c0011813 <SysSizeFromFilename(regs*)+0x6b>
c00117d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117e8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00117ee:	31 c0                	xor    eax,eax
c00117f0:	5b                   	pop    ebx
c00117f1:	31 d2                	xor    edx,edx
c00117f3:	5e                   	pop    esi
c00117f4:	5f                   	pop    edi
c00117f5:	5d                   	pop    ebp
c00117f6:	c3                   	ret    
c00117f7:	89 f8                	mov    eax,edi
c00117f9:	83 f8 02             	cmp    eax,0x2
c00117fc:	77 d3                	ja     c00117d1 <SysSizeFromFilename(regs*)+0x29>
c00117fe:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011804:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011809:	5b                   	pop    ebx
c001180a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001180f:	5e                   	pop    esi
c0011810:	5f                   	pop    edi
c0011811:	5d                   	pop    ebp
c0011812:	c3                   	ret    
c0011813:	83 ec 0c             	sub    esp,0xc
c0011816:	68 14 01 00 00       	push   0x114
c001181b:	e8 77 e4 ff ff       	call   c000fc97 <malloc>
c0011820:	6a 01                	push   0x1
c0011822:	89 c5                	mov    ebp,eax
c0011824:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011829:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001182c:	50                   	push   eax
c001182d:	57                   	push   edi
c001182e:	55                   	push   ebp
c001182f:	e8 00 68 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011834:	83 c4 20             	add    esp,0x20
c0011837:	85 ed                	test   ebp,ebp
c0011839:	74 c3                	je     c00117fe <SysSizeFromFilename(regs*)+0x56>
c001183b:	83 ec 04             	sub    esp,0x4
c001183e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011842:	50                   	push   eax
c0011843:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011846:	51                   	push   ecx
c0011847:	55                   	push   ebp
c0011848:	e8 05 6c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001184d:	89 c3                	mov    ebx,eax
c001184f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011852:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011855:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	85 db                	test   ebx,ebx
c001185d:	75 9f                	jne    c00117fe <SysSizeFromFilename(regs*)+0x56>
c001185f:	6a 00                	push   0x0
c0011861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011866:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011869:	05 0c 01 00 00       	add    eax,0x10c
c001186e:	50                   	push   eax
c001186f:	57                   	push   edi
c0011870:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011877:	53                   	push   ebx
c0011878:	e8 9d 65 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001187d:	58                   	pop    eax
c001187e:	5a                   	pop    edx
c001187f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 17 60 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	83 f8 01             	cmp    eax,0x1
c0011890:	74 1a                	je     c00118ac <SysSizeFromFilename(regs*)+0x104>
c0011892:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011897:	74 26                	je     c00118bf <SysSizeFromFilename(regs*)+0x117>
c0011899:	85 f6                	test   esi,esi
c001189b:	0f 84 47 ff ff ff    	je     c00117e8 <SysSizeFromFilename(regs*)+0x40>
c00118a1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00118a7:	e9 3c ff ff ff       	jmp    c00117e8 <SysSizeFromFilename(regs*)+0x40>
c00118ac:	85 f6                	test   esi,esi
c00118ae:	0f 84 34 ff ff ff    	je     c00117e8 <SysSizeFromFilename(regs*)+0x40>
c00118b4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00118ba:	e9 29 ff ff ff       	jmp    c00117e8 <SysSizeFromFilename(regs*)+0x40>
c00118bf:	85 f6                	test   esi,esi
c00118c1:	0f 84 21 ff ff ff    	je     c00117e8 <SysSizeFromFilename(regs*)+0x40>
c00118c7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00118cd:	e9 16 ff ff ff       	jmp    c00117e8 <SysSizeFromFilename(regs*)+0x40>

c00118d2 <SysSizeFromFilenameNoSymlink(regs*)>:
c00118d2:	55                   	push   ebp
c00118d3:	57                   	push   edi
c00118d4:	56                   	push   esi
c00118d5:	53                   	push   ebx
c00118d6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00118dc:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00118e3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00118e6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00118e9:	85 f6                	test   esi,esi
c00118eb:	74 34                	je     c0011921 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00118ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00118f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118f6:	83 f8 02             	cmp    eax,0x2
c00118f9:	76 2d                	jbe    c0011928 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00118fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011900:	76 3b                	jbe    c001193d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011902:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011905:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001190b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011912:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011918:	31 c0                	xor    eax,eax
c001191a:	5b                   	pop    ebx
c001191b:	31 d2                	xor    edx,edx
c001191d:	5e                   	pop    esi
c001191e:	5f                   	pop    edi
c001191f:	5d                   	pop    ebp
c0011920:	c3                   	ret    
c0011921:	89 f8                	mov    eax,edi
c0011923:	83 f8 02             	cmp    eax,0x2
c0011926:	77 d3                	ja     c00118fb <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011928:	81 c4 4c 02 00 00    	add    esp,0x24c
c001192e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011933:	5b                   	pop    ebx
c0011934:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011939:	5e                   	pop    esi
c001193a:	5f                   	pop    edi
c001193b:	5d                   	pop    ebp
c001193c:	c3                   	ret    
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	68 14 01 00 00       	push   0x114
c0011945:	e8 4d e3 ff ff       	call   c000fc97 <malloc>
c001194a:	6a 00                	push   0x0
c001194c:	89 c5                	mov    ebp,eax
c001194e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011953:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011956:	50                   	push   eax
c0011957:	57                   	push   edi
c0011958:	55                   	push   ebp
c0011959:	e8 d6 66 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001195e:	83 c4 20             	add    esp,0x20
c0011961:	85 ed                	test   ebp,ebp
c0011963:	74 c3                	je     c0011928 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011965:	83 ec 04             	sub    esp,0x4
c0011968:	8d 44 24 13          	lea    eax,[esp+0x13]
c001196c:	50                   	push   eax
c001196d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011970:	51                   	push   ecx
c0011971:	55                   	push   ebp
c0011972:	e8 db 6a ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011977:	89 c3                	mov    ebx,eax
c0011979:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001197c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001197f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011982:	83 c4 10             	add    esp,0x10
c0011985:	85 db                	test   ebx,ebx
c0011987:	75 9f                	jne    c0011928 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011989:	6a 00                	push   0x0
c001198b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011990:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011993:	05 0c 01 00 00       	add    eax,0x10c
c0011998:	50                   	push   eax
c0011999:	57                   	push   edi
c001199a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00119a1:	53                   	push   ebx
c00119a2:	e8 73 64 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00119a7:	58                   	pop    eax
c00119a8:	5a                   	pop    edx
c00119a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119ad:	50                   	push   eax
c00119ae:	53                   	push   ebx
c00119af:	e8 ed 5e ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	83 f8 01             	cmp    eax,0x1
c00119ba:	74 1a                	je     c00119d6 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00119bc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119c1:	74 26                	je     c00119e9 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00119c3:	85 f6                	test   esi,esi
c00119c5:	0f 84 47 ff ff ff    	je     c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00119cb:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00119d1:	e9 3c ff ff ff       	jmp    c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00119d6:	85 f6                	test   esi,esi
c00119d8:	0f 84 34 ff ff ff    	je     c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00119de:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00119e4:	e9 29 ff ff ff       	jmp    c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00119e9:	85 f6                	test   esi,esi
c00119eb:	0f 84 21 ff ff ff    	je     c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00119f1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00119f7:	e9 16 ff ff ff       	jmp    c0011912 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00119fc <SysClose(regs*)>:
c00119fc:	53                   	push   ebx
c00119fd:	83 ec 08             	sub    esp,0x8
c0011a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a07:	83 f8 02             	cmp    eax,0x2
c0011a0a:	76 41                	jbe    c0011a4d <SysClose(regs*)+0x51>
c0011a0c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011a12:	83 fa 01             	cmp    edx,0x1
c0011a15:	76 2d                	jbe    c0011a44 <SysClose(regs*)+0x48>
c0011a17:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a1c:	77 2f                	ja     c0011a4d <SysClose(regs*)+0x51>
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	50                   	push   eax
c0011a22:	e8 da 18 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0011a27:	83 c4 10             	add    esp,0x10
c0011a2a:	89 c3                	mov    ebx,eax
c0011a2c:	85 c0                	test   eax,eax
c0011a2e:	74 1d                	je     c0011a4d <SysClose(regs*)+0x51>
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	50                   	push   eax
c0011a34:	e8 75 67 ff ff       	call   c00081ae <File::close()>
c0011a39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a41:	83 c4 10             	add    esp,0x10
c0011a44:	31 c0                	xor    eax,eax
c0011a46:	31 d2                	xor    edx,edx
c0011a48:	83 c4 08             	add    esp,0x8
c0011a4b:	5b                   	pop    ebx
c0011a4c:	c3                   	ret    
c0011a4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a57:	83 c4 08             	add    esp,0x8
c0011a5a:	5b                   	pop    ebx
c0011a5b:	c3                   	ret    

c0011a5c <SysOpenDir(regs*)>:
c0011a5c:	56                   	push   esi
c0011a5d:	53                   	push   ebx
c0011a5e:	83 ec 04             	sub    esp,0x4
c0011a61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a65:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a68:	85 c9                	test   ecx,ecx
c0011a6a:	74 5d                	je     c0011ac9 <SysOpenDir(regs*)+0x6d>
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	68 14 01 00 00       	push   0x114
c0011a74:	e8 1e e2 ff ff       	call   c000fc97 <malloc>
c0011a79:	83 c4 0c             	add    esp,0xc
c0011a7c:	89 c6                	mov    esi,eax
c0011a7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a86:	50                   	push   eax
c0011a87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a8a:	52                   	push   edx
c0011a8b:	56                   	push   esi
c0011a8c:	e8 81 6b ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	85 f6                	test   esi,esi
c0011a96:	74 31                	je     c0011ac9 <SysOpenDir(regs*)+0x6d>
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	56                   	push   esi
c0011a9c:	e8 39 6c ff ff       	call   c00086da <Directory::open()>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	85 c0                	test   eax,eax
c0011aa6:	75 21                	jne    c0011ac9 <SysOpenDir(regs*)+0x6d>
c0011aa8:	83 ec 0c             	sub    esp,0xc
c0011aab:	56                   	push   esi
c0011aac:	e8 53 15 00 00       	call   c0013004 <UnixFile::getFileDescriptor()>
c0011ab1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	89 02                	mov    DWORD PTR [edx],eax
c0011ab9:	c1 f8 1f             	sar    eax,0x1f
c0011abc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011abf:	83 c4 04             	add    esp,0x4
c0011ac2:	31 c0                	xor    eax,eax
c0011ac4:	31 d2                	xor    edx,edx
c0011ac6:	5b                   	pop    ebx
c0011ac7:	5e                   	pop    esi
c0011ac8:	c3                   	ret    
c0011ac9:	83 c4 04             	add    esp,0x4
c0011acc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ad1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ad6:	5b                   	pop    ebx
c0011ad7:	5e                   	pop    esi
c0011ad8:	c3                   	ret    

c0011ad9 <SysMakeDir(regs*)>:
c0011ad9:	56                   	push   esi
c0011ada:	53                   	push   ebx
c0011adb:	83 ec 10             	sub    esp,0x10
c0011ade:	68 14 01 00 00       	push   0x114
c0011ae3:	e8 af e1 ff ff       	call   c000fc97 <malloc>
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	89 c3                	mov    ebx,eax
c0011aed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011af5:	50                   	push   eax
c0011af6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011afa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011afd:	52                   	push   edx
c0011afe:	53                   	push   ebx
c0011aff:	e8 0e 6b ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	85 db                	test   ebx,ebx
c0011b09:	74 2c                	je     c0011b37 <SysMakeDir(regs*)+0x5e>
c0011b0b:	83 ec 0c             	sub    esp,0xc
c0011b0e:	53                   	push   ebx
c0011b0f:	e8 a6 6d ff ff       	call   c00088ba <Directory::create()>
c0011b14:	89 c6                	mov    esi,eax
c0011b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	31 c0                	xor    eax,eax
c0011b23:	85 f6                	test   esi,esi
c0011b25:	0f 95 c0             	setne  al
c0011b28:	31 d2                	xor    edx,edx
c0011b2a:	f7 d8                	neg    eax
c0011b2c:	83 d2 00             	adc    edx,0x0
c0011b2f:	83 c4 04             	add    esp,0x4
c0011b32:	f7 da                	neg    edx
c0011b34:	5b                   	pop    ebx
c0011b35:	5e                   	pop    esi
c0011b36:	c3                   	ret    
c0011b37:	83 c4 04             	add    esp,0x4
c0011b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b44:	5b                   	pop    ebx
c0011b45:	5e                   	pop    esi
c0011b46:	c3                   	ret    

c0011b47 <SysCloseDir(regs*)>:
c0011b47:	53                   	push   ebx
c0011b48:	83 ec 08             	sub    esp,0x8
c0011b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b52:	8d 50 fd             	lea    edx,[eax-0x3]
c0011b55:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011b5b:	77 2f                	ja     c0011b8c <SysCloseDir(regs*)+0x45>
c0011b5d:	83 ec 0c             	sub    esp,0xc
c0011b60:	50                   	push   eax
c0011b61:	e8 9b 17 00 00       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	89 c3                	mov    ebx,eax
c0011b6b:	85 c0                	test   eax,eax
c0011b6d:	74 1d                	je     c0011b8c <SysCloseDir(regs*)+0x45>
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	50                   	push   eax
c0011b73:	e8 be 6b ff ff       	call   c0008736 <Directory::close()>
c0011b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	31 c0                	xor    eax,eax
c0011b85:	31 d2                	xor    edx,edx
c0011b87:	83 c4 08             	add    esp,0x8
c0011b8a:	5b                   	pop    ebx
c0011b8b:	c3                   	ret    
c0011b8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b91:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b96:	83 c4 08             	add    esp,0x8
c0011b99:	5b                   	pop    ebx
c0011b9a:	c3                   	ret    

c0011b9b <SysWait(regs*)>:
c0011b9b:	83 ec 10             	sub    esp,0x10
c0011b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ba2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ba5:	52                   	push   edx
c0011ba6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011ba9:	51                   	push   ecx
c0011baa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bad:	50                   	push   eax
c0011bae:	e8 59 54 00 00       	call   c001700c <waitTask(int, int*, int)>
c0011bb3:	83 c4 1c             	add    esp,0x1c
c0011bb6:	89 c2                	mov    edx,eax
c0011bb8:	c1 fa 1f             	sar    edx,0x1f
c0011bbb:	c3                   	ret    

c0011bbc <SysNotImpl(regs*)>:
c0011bbc:	83 ec 18             	sub    esp,0x18
c0011bbf:	68 c7 42 02 c0       	push   0xc00242c7
c0011bc4:	e8 15 e4 ff ff       	call   c000ffde <KePanic(char const*)>
c0011bc9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bce:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd3:	83 c4 1c             	add    esp,0x1c
c0011bd6:	c3                   	ret    

c0011bd7 <SysPanic(regs*)>:
c0011bd7:	83 ec 18             	sub    esp,0x18
c0011bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bde:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011be1:	50                   	push   eax
c0011be2:	e8 f7 e3 ff ff       	call   c000ffde <KePanic(char const*)>
c0011be7:	b8 01 00 00 00       	mov    eax,0x1
c0011bec:	31 d2                	xor    edx,edx
c0011bee:	83 c4 1c             	add    esp,0x1c
c0011bf1:	c3                   	ret    

c0011bf2 <SysRmdir(regs*)>:
c0011bf2:	56                   	push   esi
c0011bf3:	53                   	push   ebx
c0011bf4:	83 ec 20             	sub    esp,0x20
c0011bf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bfb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011bfe:	68 14 01 00 00       	push   0x114
c0011c03:	e8 8f e0 ff ff       	call   c000fc97 <malloc>
c0011c08:	6a 00                	push   0x0
c0011c0a:	89 c3                	mov    ebx,eax
c0011c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c14:	50                   	push   eax
c0011c15:	56                   	push   esi
c0011c16:	53                   	push   ebx
c0011c17:	e8 18 64 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011c1c:	83 c4 14             	add    esp,0x14
c0011c1f:	53                   	push   ebx
c0011c20:	e8 f9 66 ff ff       	call   c000831e <File::unlink()>
c0011c25:	83 c4 10             	add    esp,0x10
c0011c28:	85 db                	test   ebx,ebx
c0011c2a:	74 14                	je     c0011c40 <SysRmdir(regs*)+0x4e>
c0011c2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c32:	83 ec 0c             	sub    esp,0xc
c0011c35:	53                   	push   ebx
c0011c36:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c39:	83 c4 10             	add    esp,0x10
c0011c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c40:	85 c0                	test   eax,eax
c0011c42:	0f 95 c0             	setne  al
c0011c45:	31 d2                	xor    edx,edx
c0011c47:	0f b6 c0             	movzx  eax,al
c0011c4a:	f7 d8                	neg    eax
c0011c4c:	83 d2 00             	adc    edx,0x0
c0011c4f:	83 c4 14             	add    esp,0x14
c0011c52:	f7 da                	neg    edx
c0011c54:	5b                   	pop    ebx
c0011c55:	5e                   	pop    esi
c0011c56:	c3                   	ret    

c0011c57 <SysUnlink(regs*)>:
c0011c57:	56                   	push   esi
c0011c58:	53                   	push   ebx
c0011c59:	83 ec 20             	sub    esp,0x20
c0011c5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c60:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c63:	68 14 01 00 00       	push   0x114
c0011c68:	e8 2a e0 ff ff       	call   c000fc97 <malloc>
c0011c6d:	6a 00                	push   0x0
c0011c6f:	89 c3                	mov    ebx,eax
c0011c71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c79:	50                   	push   eax
c0011c7a:	56                   	push   esi
c0011c7b:	53                   	push   ebx
c0011c7c:	e8 b3 63 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011c81:	83 c4 14             	add    esp,0x14
c0011c84:	53                   	push   ebx
c0011c85:	e8 94 66 ff ff       	call   c000831e <File::unlink()>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	85 db                	test   ebx,ebx
c0011c8f:	74 14                	je     c0011ca5 <SysUnlink(regs*)+0x4e>
c0011c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c95:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c97:	83 ec 0c             	sub    esp,0xc
c0011c9a:	53                   	push   ebx
c0011c9b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ca5:	85 c0                	test   eax,eax
c0011ca7:	0f 95 c0             	setne  al
c0011caa:	31 d2                	xor    edx,edx
c0011cac:	0f b6 c0             	movzx  eax,al
c0011caf:	f7 d8                	neg    eax
c0011cb1:	83 d2 00             	adc    edx,0x0
c0011cb4:	83 c4 14             	add    esp,0x14
c0011cb7:	f7 da                	neg    edx
c0011cb9:	5b                   	pop    ebx
c0011cba:	5e                   	pop    esi
c0011cbb:	c3                   	ret    

c0011cbc <SysGetArgv(regs*)>:
c0011cbc:	83 ec 0c             	sub    esp,0xc
c0011cbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cc3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011cc6:	85 c0                	test   eax,eax
c0011cc8:	78 2c                	js     c0011cf6 <SysGetArgv(regs*)+0x3a>
c0011cca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011cd0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011cd3:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011cd9:	7d 1b                	jge    c0011cf6 <SysGetArgv(regs*)+0x3a>
c0011cdb:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011ce2:	85 c0                	test   eax,eax
c0011ce4:	74 18                	je     c0011cfe <SysGetArgv(regs*)+0x42>
c0011ce6:	83 ec 08             	sub    esp,0x8
c0011ce9:	50                   	push   eax
c0011cea:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011ced:	50                   	push   eax
c0011cee:	e8 4d e9 fe ff       	call   c0000640 <strcpy>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	31 c0                	xor    eax,eax
c0011cf8:	31 d2                	xor    edx,edx
c0011cfa:	83 c4 0c             	add    esp,0xc
c0011cfd:	c3                   	ret    
c0011cfe:	b8 01 00 00 00       	mov    eax,0x1
c0011d03:	31 d2                	xor    edx,edx
c0011d05:	83 c4 0c             	add    esp,0xc
c0011d08:	c3                   	ret    

c0011d09 <SysUSleep(regs*)>:
c0011d09:	83 ec 1c             	sub    esp,0x1c
c0011d0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d10:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011d13:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011d16:	6a 00                	push   0x0
c0011d18:	6a 64                	push   0x64
c0011d1a:	52                   	push   edx
c0011d1b:	50                   	push   eax
c0011d1c:	e8 43 fb 00 00       	call   c0021864 <__udivdi3>
c0011d21:	83 c4 18             	add    esp,0x18
c0011d24:	52                   	push   edx
c0011d25:	50                   	push   eax
c0011d26:	e8 d9 53 00 00       	call   c0017104 <milliTenthSleep(unsigned long long)>
c0011d2b:	31 c0                	xor    eax,eax
c0011d2d:	31 d2                	xor    edx,edx
c0011d2f:	83 c4 1c             	add    esp,0x1c
c0011d32:	c3                   	ret    

c0011d33 <SysSpawn(regs*)>:
c0011d33:	56                   	push   esi
c0011d34:	53                   	push   ebx
c0011d35:	83 ec 04             	sub    esp,0x4
c0011d38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d3c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011d3f:	85 f6                	test   esi,esi
c0011d41:	75 0a                	jne    c0011d4d <SysSpawn(regs*)+0x1a>
c0011d43:	83 c4 04             	add    esp,0x4
c0011d46:	31 c0                	xor    eax,eax
c0011d48:	31 d2                	xor    edx,edx
c0011d4a:	5b                   	pop    ebx
c0011d4b:	5e                   	pop    esi
c0011d4c:	c3                   	ret    
c0011d4d:	83 ec 0c             	sub    esp,0xc
c0011d50:	68 c4 07 00 00       	push   0x7c4
c0011d55:	e8 3d df ff ff       	call   c000fc97 <malloc>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d60:	89 c6                	mov    esi,eax
c0011d62:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d65:	85 c9                	test   ecx,ecx
c0011d67:	74 39                	je     c0011da2 <SysSpawn(regs*)+0x6f>
c0011d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d71:	52                   	push   edx
c0011d72:	50                   	push   eax
c0011d73:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d76:	50                   	push   eax
c0011d77:	56                   	push   esi
c0011d78:	e8 9b 4a 00 00       	call   c0016818 <Process::Process(char const*, Process*, char**)>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011d87:	75 ba                	jne    c0011d43 <SysSpawn(regs*)+0x10>
c0011d89:	83 ec 0c             	sub    esp,0xc
c0011d8c:	56                   	push   esi
c0011d8d:	e8 26 50 00 00       	call   c0016db8 <Process::createUserThread()>
c0011d92:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d94:	83 c4 10             	add    esp,0x10
c0011d97:	89 c2                	mov    edx,eax
c0011d99:	83 c4 04             	add    esp,0x4
c0011d9c:	c1 fa 1f             	sar    edx,0x1f
c0011d9f:	5b                   	pop    ebx
c0011da0:	5e                   	pop    esi
c0011da1:	c3                   	ret    
c0011da2:	31 c0                	xor    eax,eax
c0011da4:	eb cb                	jmp    c0011d71 <SysSpawn(regs*)+0x3e>

c0011da6 <SysGetEnv(regs*)>:
c0011da6:	57                   	push   edi
c0011da7:	56                   	push   esi
c0011da8:	53                   	push   ebx
c0011da9:	83 ec 1c             	sub    esp,0x1c
c0011dac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011db0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011db5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011db8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dbb:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011dbe:	51                   	push   ecx
c0011dbf:	e8 1f cb ff ff       	call   c000e8e3 <KeGetProcessTotalEnvCount(Process*)>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	39 c7                	cmp    edi,eax
c0011dc9:	7c 14                	jl     c0011ddf <SysGetEnv(regs*)+0x39>
c0011dcb:	85 f6                	test   esi,esi
c0011dcd:	75 0b                	jne    c0011dda <SysGetEnv(regs*)+0x34>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	31 c0                	xor    eax,eax
c0011dd4:	5b                   	pop    ebx
c0011dd5:	31 d2                	xor    edx,edx
c0011dd7:	5e                   	pop    esi
c0011dd8:	5f                   	pop    edi
c0011dd9:	c3                   	ret    
c0011dda:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ddd:	eb f0                	jmp    c0011dcf <SysGetEnv(regs*)+0x29>
c0011ddf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011de3:	83 ec 04             	sub    esp,0x4
c0011de6:	57                   	push   edi
c0011de7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011ded:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011df0:	57                   	push   edi
c0011df1:	50                   	push   eax
c0011df2:	e8 0c cb ff ff       	call   c000e903 <KeGetProcessEnvPair(Process*, int)>
c0011df7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011dfe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e02:	83 c4 0c             	add    esp,0xc
c0011e05:	85 d2                	test   edx,edx
c0011e07:	75 23                	jne    c0011e2c <SysGetEnv(regs*)+0x86>
c0011e09:	83 ec 0c             	sub    esp,0xc
c0011e0c:	50                   	push   eax
c0011e0d:	e8 5e e7 fe ff       	call   c0000570 <strlen>
c0011e12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e15:	89 c3                	mov    ebx,eax
c0011e17:	e8 54 e7 fe ff       	call   c0000570 <strlen>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	31 d2                	xor    edx,edx
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	c3                   	ret    
c0011e2c:	83 ec 08             	sub    esp,0x8
c0011e2f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e32:	50                   	push   eax
c0011e33:	56                   	push   esi
c0011e34:	e8 07 e8 fe ff       	call   c0000640 <strcpy>
c0011e39:	58                   	pop    eax
c0011e3a:	5a                   	pop    edx
c0011e3b:	68 e1 42 02 c0       	push   0xc00242e1
c0011e40:	56                   	push   esi
c0011e41:	e8 fa e9 fe ff       	call   c0000840 <strcat>
c0011e46:	59                   	pop    ecx
c0011e47:	5b                   	pop    ebx
c0011e48:	57                   	push   edi
c0011e49:	56                   	push   esi
c0011e4a:	e8 f1 e9 fe ff       	call   c0000840 <strcat>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	e9 78 ff ff ff       	jmp    c0011dcf <SysGetEnv(regs*)+0x29>

c0011e57 <SysSetFatAttrib(regs*)>:
c0011e57:	57                   	push   edi
c0011e58:	56                   	push   esi
c0011e59:	53                   	push   ebx
c0011e5a:	83 ec 1c             	sub    esp,0x1c
c0011e5d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011e61:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011e64:	68 14 01 00 00       	push   0x114
c0011e69:	e8 29 de ff ff       	call   c000fc97 <malloc>
c0011e6e:	83 c4 0c             	add    esp,0xc
c0011e71:	89 c3                	mov    ebx,eax
c0011e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e7b:	50                   	push   eax
c0011e7c:	57                   	push   edi
c0011e7d:	53                   	push   ebx
c0011e7e:	e8 af 62 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011e83:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e86:	83 c4 0c             	add    esp,0xc
c0011e89:	0f b6 d4             	movzx  edx,ah
c0011e8c:	0f b6 c0             	movzx  eax,al
c0011e8f:	52                   	push   edx
c0011e90:	50                   	push   eax
c0011e91:	53                   	push   ebx
c0011e92:	e8 21 65 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011e97:	83 c4 10             	add    esp,0x10
c0011e9a:	85 db                	test   ebx,ebx
c0011e9c:	74 14                	je     c0011eb2 <SysSetFatAttrib(regs*)+0x5b>
c0011e9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ea2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	53                   	push   ebx
c0011ea8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb2:	85 c0                	test   eax,eax
c0011eb4:	0f 95 c0             	setne  al
c0011eb7:	31 d2                	xor    edx,edx
c0011eb9:	0f b6 c0             	movzx  eax,al
c0011ebc:	f7 d8                	neg    eax
c0011ebe:	83 d2 00             	adc    edx,0x0
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	f7 da                	neg    edx
c0011ec6:	5b                   	pop    ebx
c0011ec7:	5e                   	pop    esi
c0011ec8:	5f                   	pop    edi
c0011ec9:	c3                   	ret    

c0011eca <SysShutdown(regs*)>:
c0011eca:	83 ec 1c             	sub    esp,0x1c
c0011ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ed1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011ed4:	85 c9                	test   ecx,ecx
c0011ed6:	74 18                	je     c0011ef0 <SysShutdown(regs*)+0x26>
c0011ed8:	83 f9 01             	cmp    ecx,0x1
c0011edb:	74 26                	je     c0011f03 <SysShutdown(regs*)+0x39>
c0011edd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee7:	83 f9 02             	cmp    ecx,0x2
c0011eea:	74 24                	je     c0011f10 <SysShutdown(regs*)+0x46>
c0011eec:	83 c4 1c             	add    esp,0x1c
c0011eef:	c3                   	ret    
c0011ef0:	e8 67 c4 ff ff       	call   c000e35c <KeShutdown()>
c0011ef5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011efa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eff:	83 c4 1c             	add    esp,0x1c
c0011f02:	c3                   	ret    
c0011f03:	e8 78 c4 ff ff       	call   c000e380 <KeSleep()>
c0011f08:	31 c0                	xor    eax,eax
c0011f0a:	31 d2                	xor    edx,edx
c0011f0c:	83 c4 1c             	add    esp,0x1c
c0011f0f:	c3                   	ret    
c0011f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f18:	e8 6f c4 ff ff       	call   c000e38c <KeRestart()>
c0011f1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f25:	eb c5                	jmp    c0011eec <SysShutdown(regs*)+0x22>

c0011f27 <SysPipe(regs*)>:
c0011f27:	57                   	push   edi
c0011f28:	56                   	push   esi
c0011f29:	53                   	push   ebx
c0011f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f2e:	83 ec 0c             	sub    esp,0xc
c0011f31:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011f34:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011f37:	6a 20                	push   0x20
c0011f39:	e8 59 dd ff ff       	call   c000fc97 <malloc>
c0011f3e:	89 c3                	mov    ebx,eax
c0011f40:	58                   	pop    eax
c0011f41:	5a                   	pop    edx
c0011f42:	68 00 50 00 00       	push   0x5000
c0011f47:	53                   	push   ebx
c0011f48:	e8 13 e9 ff ff       	call   c0010860 <Pipe::Pipe(int)>
c0011f4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f50:	e8 af 10 00 00       	call   c0013004 <UnixFile::getFileDescriptor()>
c0011f55:	89 07                	mov    DWORD PTR [edi],eax
c0011f57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f5a:	e8 a5 10 00 00       	call   c0013004 <UnixFile::getFileDescriptor()>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	89 06                	mov    DWORD PTR [esi],eax
c0011f64:	31 d2                	xor    edx,edx
c0011f66:	5b                   	pop    ebx
c0011f67:	31 c0                	xor    eax,eax
c0011f69:	5e                   	pop    esi
c0011f6a:	5f                   	pop    edi
c0011f6b:	c3                   	ret    

c0011f6c <SysGetUnixTime(regs*)>:
c0011f6c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011f71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011f77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f7b:	e9 62 71 ff ff       	jmp    c00090e2 <Clock::timeInSecondsLocal()>

c0011f80 <string_ends_with(char const*, char const*)>:
c0011f80:	57                   	push   edi
c0011f81:	56                   	push   esi
c0011f82:	53                   	push   ebx
c0011f83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011f8b:	83 ec 0c             	sub    esp,0xc
c0011f8e:	53                   	push   ebx
c0011f8f:	e8 dc e5 fe ff       	call   c0000570 <strlen>
c0011f94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f97:	89 c6                	mov    esi,eax
c0011f99:	e8 d2 e5 fe ff       	call   c0000570 <strlen>
c0011f9e:	83 c4 10             	add    esp,0x10
c0011fa1:	39 c6                	cmp    esi,eax
c0011fa3:	7d 06                	jge    c0011fab <string_ends_with(char const*, char const*)+0x2b>
c0011fa5:	5b                   	pop    ebx
c0011fa6:	31 c0                	xor    eax,eax
c0011fa8:	5e                   	pop    esi
c0011fa9:	5f                   	pop    edi
c0011faa:	c3                   	ret    
c0011fab:	83 ec 08             	sub    esp,0x8
c0011fae:	29 c6                	sub    esi,eax
c0011fb0:	57                   	push   edi
c0011fb1:	01 f3                	add    ebx,esi
c0011fb3:	53                   	push   ebx
c0011fb4:	e8 97 e7 fe ff       	call   c0000750 <strcmp>
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	85 c0                	test   eax,eax
c0011fbe:	5b                   	pop    ebx
c0011fbf:	0f 94 c0             	sete   al
c0011fc2:	5e                   	pop    esi
c0011fc3:	0f b6 c0             	movzx  eax,al
c0011fc6:	5f                   	pop    edi
c0011fc7:	c3                   	ret    

c0011fc8 <SysOpen(regs*)>:
c0011fc8:	56                   	push   esi
c0011fc9:	53                   	push   ebx
c0011fca:	81 ec 04 01 00 00    	sub    esp,0x104
c0011fd0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011fd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fda:	85 c0                	test   eax,eax
c0011fdc:	0f 84 bc 01 00 00    	je     c001219e <SysOpen(regs*)+0x1d6>
c0011fe2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fe5:	85 c0                	test   eax,eax
c0011fe7:	0f 84 b1 01 00 00    	je     c001219e <SysOpen(regs*)+0x1d6>
c0011fed:	6a 00                	push   0x0
c0011fef:	68 e3 42 02 c0       	push   0xc00242e3
c0011ff4:	50                   	push   eax
c0011ff5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011ff9:	56                   	push   esi
c0011ffa:	e8 1b 5e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011fff:	89 34 24             	mov    DWORD PTR [esp],esi
c0012002:	e8 69 e5 fe ff       	call   c0000570 <strlen>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	83 e8 01             	sub    eax,0x1
c001200d:	74 21                	je     c0012030 <SysOpen(regs*)+0x68>
c001200f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012013:	eb 12                	jmp    c0012027 <SysOpen(regs*)+0x5f>
c0012015:	83 fa 3a             	cmp    edx,0x3a
c0012018:	74 12                	je     c001202c <SysOpen(regs*)+0x64>
c001201a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001201e:	83 e8 01             	sub    eax,0x1
c0012021:	74 0d                	je     c0012030 <SysOpen(regs*)+0x68>
c0012023:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012027:	83 fa 2e             	cmp    edx,0x2e
c001202a:	75 e9                	jne    c0012015 <SysOpen(regs*)+0x4d>
c001202c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012030:	83 ec 08             	sub    esp,0x8
c0012033:	68 e7 42 02 c0       	push   0xc00242e7
c0012038:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001203b:	50                   	push   eax
c001203c:	e8 3f ff ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	85 c0                	test   eax,eax
c0012046:	74 1d                	je     c0012065 <SysOpen(regs*)+0x9d>
c0012048:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001204b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012051:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012058:	81 c4 04 01 00 00    	add    esp,0x104
c001205e:	31 c0                	xor    eax,eax
c0012060:	31 d2                	xor    edx,edx
c0012062:	5b                   	pop    ebx
c0012063:	5e                   	pop    esi
c0012064:	c3                   	ret    
c0012065:	83 ec 08             	sub    esp,0x8
c0012068:	68 ec 42 02 c0       	push   0xc00242ec
c001206d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012070:	50                   	push   eax
c0012071:	e8 0a ff ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	85 c0                	test   eax,eax
c001207b:	75 cb                	jne    c0012048 <SysOpen(regs*)+0x80>
c001207d:	83 ec 08             	sub    esp,0x8
c0012080:	68 e8 42 02 c0       	push   0xc00242e8
c0012085:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012088:	50                   	push   eax
c0012089:	e8 c2 e6 fe ff       	call   c0000750 <strcmp>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	85 c0                	test   eax,eax
c0012093:	74 b3                	je     c0012048 <SysOpen(regs*)+0x80>
c0012095:	83 ec 08             	sub    esp,0x8
c0012098:	68 e7 42 02 c0       	push   0xc00242e7
c001209d:	56                   	push   esi
c001209e:	e8 dd fe ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	85 c0                	test   eax,eax
c00120a8:	75 9e                	jne    c0012048 <SysOpen(regs*)+0x80>
c00120aa:	83 ec 08             	sub    esp,0x8
c00120ad:	68 f1 42 02 c0       	push   0xc00242f1
c00120b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120b5:	50                   	push   eax
c00120b6:	e8 c5 fe ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c00120bb:	83 c4 10             	add    esp,0x10
c00120be:	85 c0                	test   eax,eax
c00120c0:	0f 85 eb 00 00 00    	jne    c00121b1 <SysOpen(regs*)+0x1e9>
c00120c6:	83 ec 08             	sub    esp,0x8
c00120c9:	68 f6 42 02 c0       	push   0xc00242f6
c00120ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120d1:	50                   	push   eax
c00120d2:	e8 a9 fe ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	85 c0                	test   eax,eax
c00120dc:	0f 85 cf 00 00 00    	jne    c00121b1 <SysOpen(regs*)+0x1e9>
c00120e2:	83 ec 08             	sub    esp,0x8
c00120e5:	68 f2 42 02 c0       	push   0xc00242f2
c00120ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00120ed:	51                   	push   ecx
c00120ee:	e8 5d e6 fe ff       	call   c0000750 <strcmp>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	85 c0                	test   eax,eax
c00120f8:	0f 84 b3 00 00 00    	je     c00121b1 <SysOpen(regs*)+0x1e9>
c00120fe:	83 ec 08             	sub    esp,0x8
c0012101:	68 f1 42 02 c0       	push   0xc00242f1
c0012106:	56                   	push   esi
c0012107:	e8 74 fe ff ff       	call   c0011f80 <string_ends_with(char const*, char const*)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	85 c0                	test   eax,eax
c0012111:	0f 85 9a 00 00 00    	jne    c00121b1 <SysOpen(regs*)+0x1e9>
c0012117:	83 ec 0c             	sub    esp,0xc
c001211a:	68 14 01 00 00       	push   0x114
c001211f:	e8 73 db ff ff       	call   c000fc97 <malloc>
c0012124:	83 c4 0c             	add    esp,0xc
c0012127:	89 c6                	mov    esi,eax
c0012129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001212e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012131:	50                   	push   eax
c0012132:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012135:	52                   	push   edx
c0012136:	56                   	push   esi
c0012137:	e8 f6 5f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	85 f6                	test   esi,esi
c0012141:	74 5b                	je     c001219e <SysOpen(regs*)+0x1d6>
c0012143:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012146:	0f b6 c2             	movzx  eax,dl
c0012149:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001214c:	89 d0                	mov    eax,edx
c001214e:	83 e0 01             	and    eax,0x1
c0012151:	f6 c2 02             	test   dl,0x2
c0012154:	74 03                	je     c0012159 <SysOpen(regs*)+0x191>
c0012156:	83 c8 02             	or     eax,0x2
c0012159:	f6 c2 04             	test   dl,0x4
c001215c:	74 03                	je     c0012161 <SysOpen(regs*)+0x199>
c001215e:	83 c8 04             	or     eax,0x4
c0012161:	f6 c2 08             	test   dl,0x8
c0012164:	74 03                	je     c0012169 <SysOpen(regs*)+0x1a1>
c0012166:	83 c8 0a             	or     eax,0xa
c0012169:	80 e2 10             	and    dl,0x10
c001216c:	74 03                	je     c0012171 <SysOpen(regs*)+0x1a9>
c001216e:	83 c8 12             	or     eax,0x12
c0012171:	83 ec 08             	sub    esp,0x8
c0012174:	50                   	push   eax
c0012175:	56                   	push   esi
c0012176:	e8 d5 5f ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	85 c0                	test   eax,eax
c0012180:	75 1c                	jne    c001219e <SysOpen(regs*)+0x1d6>
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	56                   	push   esi
c0012186:	e8 79 0e 00 00       	call   c0013004 <UnixFile::getFileDescriptor()>
c001218b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	89 02                	mov    DWORD PTR [edx],eax
c0012193:	c1 f8 1f             	sar    eax,0x1f
c0012196:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012199:	e9 ba fe ff ff       	jmp    c0012058 <SysOpen(regs*)+0x90>
c001219e:	81 c4 04 01 00 00    	add    esp,0x104
c00121a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	c3                   	ret    
c00121b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121b4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00121ba:	e9 92 fe ff ff       	jmp    c0012051 <SysOpen(regs*)+0x89>

c00121bf <KeSystemCall(regs*, void*)>:
c00121bf:	53                   	push   ebx
c00121c0:	83 ec 08             	sub    esp,0x8
c00121c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00121ca:	83 f8 48             	cmp    eax,0x48
c00121cd:	77 16                	ja     c00121e5 <KeSystemCall(regs*, void*)+0x26>
c00121cf:	8b 14 85 a0 65 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9a60]
c00121d6:	85 d2                	test   edx,edx
c00121d8:	74 0b                	je     c00121e5 <KeSystemCall(regs*, void*)+0x26>
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	53                   	push   ebx
c00121de:	ff d2                	call   edx
c00121e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00121e3:	eb 0d                	jmp    c00121f2 <KeSystemCall(regs*, void*)+0x33>
c00121e5:	52                   	push   edx
c00121e6:	52                   	push   edx
c00121e7:	50                   	push   eax
c00121e8:	68 fb 42 02 c0       	push   0xc00242fb
c00121ed:	e8 72 4d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00121fa:	31 d2                	xor    edx,edx
c00121fc:	83 c4 08             	add    esp,0x8
c00121ff:	5b                   	pop    ebx
c0012200:	c3                   	ret    
c0012201:	90                   	nop

c0012202 <VgaText::isAtty()>:
c0012202:	b0 01                	mov    al,0x1
c0012204:	c3                   	ret    
c0012205:	90                   	nop

c0012206 <VgaText::~VgaText()>:
c0012206:	83 ec 0c             	sub    esp,0xc
c0012209:	ba 64 43 02 c0       	mov    edx,0xc0024364
c001220e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012212:	89 10                	mov    DWORD PTR [eax],edx
c0012214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012218:	83 ec 0c             	sub    esp,0xc
c001221b:	50                   	push   eax
c001221c:	e8 d1 0f 00 00       	call   c00131f2 <UnixFile::~UnixFile()>
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	90                   	nop
c0012225:	83 c4 0c             	add    esp,0xc
c0012228:	c3                   	ret    
c0012229:	90                   	nop

c001222a <VgaText::~VgaText()>:
c001222a:	83 ec 0c             	sub    esp,0xc
c001222d:	83 ec 0c             	sub    esp,0xc
c0012230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012234:	e8 cd ff ff ff       	call   c0012206 <VgaText::~VgaText()>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	83 ec 08             	sub    esp,0x8
c001223f:	68 84 01 00 00       	push   0x184
c0012244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012248:	e8 d2 b0 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	83 c4 0c             	add    esp,0xc
c0012253:	c3                   	ret    

c0012254 <VgaText::read(unsigned long long, void*, int*)>:
c0012254:	83 ec 10             	sub    esp,0x10
c0012257:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001225b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001225f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012263:	e8 e5 82 ff ff       	call   c000a54d <readKeyboard(VgaText*, char*, unsigned long)>
c0012268:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001226c:	89 02                	mov    DWORD PTR [edx],eax
c001226e:	31 c0                	xor    eax,eax
c0012270:	83 c4 1c             	add    esp,0x1c
c0012273:	c3                   	ret    

c0012274 <setTerminalScrollLock(bool)>:
c0012274:	c3                   	ret    

c0012275 <doTerminalCycle()>:
c0012275:	c3                   	ret    

c0012276 <addToTerminalCycle(VgaText*)>:
c0012276:	c3                   	ret    

c0012277 <scrollTerminalScrollLock(int)>:
c0012277:	c3                   	ret    

c0012278 <VgaText::updateTitle()>:
c0012278:	c3                   	ret    
c0012279:	90                   	nop

c001227a <VgaText::load()>:
c001227a:	c3                   	ret    
c001227b:	90                   	nop

c001227c <VgaText::updateCursor()>:
c001227c:	83 ec 14             	sub    esp,0x14
c001227f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012283:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012286:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012289:	e8 f6 8e 00 00       	call   c001b184 <HalConsoleCursorUpdate(int, int)>
c001228e:	83 c4 1c             	add    esp,0x1c
c0012291:	c3                   	ret    

c0012292 <VgaText::doANSI_SGR(int)>:
c0012292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229a:	85 d2                	test   edx,edx
c001229c:	75 0b                	jne    c00122a9 <VgaText::doANSI_SGR(int)+0x17>
c001229e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00122a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00122a4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00122a7:	eb 59                	jmp    c0012302 <VgaText::doANSI_SGR(int)+0x70>
c00122a9:	83 fa 07             	cmp    edx,0x7
c00122ac:	75 0b                	jne    c00122b9 <VgaText::doANSI_SGR(int)+0x27>
c00122ae:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00122b1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00122b4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00122b7:	eb 49                	jmp    c0012302 <VgaText::doANSI_SGR(int)+0x70>
c00122b9:	83 fa 1b             	cmp    edx,0x1b
c00122bc:	74 e0                	je     c001229e <VgaText::doANSI_SGR(int)+0xc>
c00122be:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00122c1:	83 f9 07             	cmp    ecx,0x7
c00122c4:	77 09                	ja     c00122cf <VgaText::doANSI_SGR(int)+0x3d>
c00122c6:	8b 14 8d 00 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9900]
c00122cd:	eb 20                	jmp    c00122ef <VgaText::doANSI_SGR(int)+0x5d>
c00122cf:	8d 4a d8             	lea    ecx,[edx-0x28]
c00122d2:	83 f9 07             	cmp    ecx,0x7
c00122d5:	77 09                	ja     c00122e0 <VgaText::doANSI_SGR(int)+0x4e>
c00122d7:	8b 14 8d 00 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9900]
c00122de:	eb 22                	jmp    c0012302 <VgaText::doANSI_SGR(int)+0x70>
c00122e0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00122e3:	83 f9 07             	cmp    ecx,0x7
c00122e6:	77 0b                	ja     c00122f3 <VgaText::doANSI_SGR(int)+0x61>
c00122e8:	8b 14 95 b8 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9a48]
c00122ef:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00122f2:	c3                   	ret    
c00122f3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00122f6:	83 f9 07             	cmp    ecx,0x7
c00122f9:	77 0a                	ja     c0012305 <VgaText::doANSI_SGR(int)+0x73>
c00122fb:	8b 14 95 90 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9a70]
c0012302:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012305:	c3                   	ret    

c0012306 <VgaText::setDefaultBgColour(VgaColour)>:
c0012306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001230a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001230e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012311:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012314:	c3                   	ret    
c0012315:	90                   	nop

c0012316 <VgaText::setDefaultFgColour(VgaColour)>:
c0012316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001231a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001231e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012321:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012324:	c3                   	ret    
c0012325:	90                   	nop

c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012326:	53                   	push   ebx
c0012327:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001232b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001232f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012333:	51                   	push   ecx
c0012334:	e8 cd ff ff ff       	call   c0012306 <VgaText::setDefaultBgColour(VgaColour)>
c0012339:	58                   	pop    eax
c001233a:	5a                   	pop    edx
c001233b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001233f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012343:	5b                   	pop    ebx
c0012344:	eb d0                	jmp    c0012316 <VgaText::setDefaultFgColour(VgaColour)>

c0012346 <VgaText::setTitleTextColour(VgaColour)>:
c0012346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001234a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001234e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012351:	c3                   	ret    

c0012352 <VgaText::setTitleColour(VgaColour)>:
c0012352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012356:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001235a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001235d:	c3                   	ret    

c001235e <VgaText::setTitle(char*)>:
c001235e:	c3                   	ret    
c001235f:	90                   	nop

c0012360 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012364:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012369:	83 e0 0f             	and    eax,0xf
c001236c:	c1 e2 04             	shl    edx,0x4
c001236f:	09 d0                	or     eax,edx
c0012371:	c3                   	ret    

c0012372 <VgaText::scrollScreen()>:
c0012372:	55                   	push   ebp
c0012373:	57                   	push   edi
c0012374:	56                   	push   esi
c0012375:	be 01 00 00 00       	mov    esi,0x1
c001237a:	53                   	push   ebx
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012382:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012385:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001238b:	31 ff                	xor    edi,edi
c001238d:	01 e9                	add    ecx,ebp
c001238f:	8a 01                	mov    al,BYTE PTR [ecx]
c0012391:	83 fe 18             	cmp    esi,0x18
c0012394:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001239a:	75 20                	jne    c00123bc <VgaText::scrollScreen()+0x4a>
c001239c:	f7 c7 01 00 00 00    	test   edi,0x1
c00123a2:	74 15                	je     c00123b9 <VgaText::scrollScreen()+0x47>
c00123a4:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00123a8:	50                   	push   eax
c00123a9:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00123ad:	50                   	push   eax
c00123ae:	e8 ad ff ff ff       	call   c0012360 <VgaText::combineColours(unsigned char, unsigned char)>
c00123b3:	5a                   	pop    edx
c00123b4:	5a                   	pop    edx
c00123b5:	88 01                	mov    BYTE PTR [ecx],al
c00123b7:	eb 03                	jmp    c00123bc <VgaText::scrollScreen()+0x4a>
c00123b9:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00123bc:	47                   	inc    edi
c00123bd:	41                   	inc    ecx
c00123be:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00123c4:	75 c9                	jne    c001238f <VgaText::scrollScreen()+0x1d>
c00123c6:	46                   	inc    esi
c00123c7:	83 fe 19             	cmp    esi,0x19
c00123ca:	75 b9                	jne    c0012385 <VgaText::scrollScreen()+0x13>
c00123cc:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c00123d2:	75 1f                	jne    c00123f3 <VgaText::scrollScreen()+0x81>
c00123d4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00123d8:	74 05                	je     c00123df <VgaText::scrollScreen()+0x6d>
c00123da:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00123dd:	eb 14                	jmp    c00123f3 <VgaText::scrollScreen()+0x81>
c00123df:	50                   	push   eax
c00123e0:	50                   	push   eax
c00123e1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00123e5:	50                   	push   eax
c00123e6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00123ea:	50                   	push   eax
c00123eb:	e8 28 8c 00 00       	call   c001b018 <HalConsoleScroll(int, int)>
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00123f7:	83 c4 0c             	add    esp,0xc
c00123fa:	5b                   	pop    ebx
c00123fb:	5e                   	pop    esi
c00123fc:	5f                   	pop    edi
c00123fd:	5d                   	pop    ebp
c00123fe:	e9 79 fe ff ff       	jmp    c001227c <VgaText::updateCursor()>
c0012403:	90                   	nop

c0012404 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012409:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001240e:	c1 e0 08             	shl    eax,0x8
c0012411:	09 d0                	or     eax,edx
c0012413:	c3                   	ret    

c0012414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012414:	55                   	push   ebp
c0012415:	57                   	push   edi
c0012416:	56                   	push   esi
c0012417:	53                   	push   ebx
c0012418:	83 ec 1c             	sub    esp,0x1c
c001241b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001241f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012427:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001242a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001242e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012432:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012436:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001243a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001243e:	85 ed                	test   ebp,ebp
c0012440:	75 14                	jne    c0012456 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012442:	c7 44 24 30 0f 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc002430f
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	5b                   	pop    ebx
c001244e:	5e                   	pop    esi
c001244f:	5f                   	pop    edi
c0012450:	5d                   	pop    ebp
c0012451:	e9 88 db ff ff       	jmp    c000ffde <KePanic(char const*)>
c0012456:	50                   	push   eax
c0012457:	50                   	push   eax
c0012458:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001245d:	50                   	push   eax
c001245e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012463:	50                   	push   eax
c0012464:	e8 f7 fe ff ff       	call   c0012360 <VgaText::combineColours(unsigned char, unsigned char)>
c0012469:	5a                   	pop    edx
c001246a:	0f be c9             	movsx  ecx,cl
c001246d:	5a                   	pop    edx
c001246e:	0f b6 c0             	movzx  eax,al
c0012471:	50                   	push   eax
c0012472:	51                   	push   ecx
c0012473:	e8 8c ff ff ff       	call   c0012404 <VgaText::combineCharAndColour(char, unsigned char)>
c0012478:	6b d6 50             	imul   edx,esi,0x50
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	01 da                	add    edx,ebx
c0012480:	0f b7 d2             	movzx  edx,dx
c0012483:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012488:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c001248e:	75 28                	jne    c00124b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012494:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012498:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001249c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00124a0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00124a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00124ac:	83 c4 1c             	add    esp,0x1c
c00124af:	5b                   	pop    ebx
c00124b0:	5e                   	pop    esi
c00124b1:	5f                   	pop    edi
c00124b2:	5d                   	pop    ebp
c00124b3:	e9 68 8c 00 00       	jmp    c001b120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00124b8:	83 c4 1c             	add    esp,0x1c
c00124bb:	5b                   	pop    ebx
c00124bc:	5e                   	pop    esi
c00124bd:	5f                   	pop    edi
c00124be:	5d                   	pop    ebp
c00124bf:	c3                   	ret    

c00124c0 <VgaText::getCursorX()>:
c00124c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00124c7:	c3                   	ret    

c00124c8 <VgaText::getCursorY()>:
c00124c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124cc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00124cf:	c3                   	ret    

c00124d0 <VgaText::setCursor(int, int)>:
c00124d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124d8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00124db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00124e2:	e9 95 fd ff ff       	jmp    c001227c <VgaText::updateCursor()>

c00124e7 <setActiveTerminal(VgaText*)>:
c00124e7:	53                   	push   ebx
c00124e8:	83 ec 08             	sub    esp,0x8
c00124eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124ef:	85 db                	test   ebx,ebx
c00124f1:	75 11                	jne    c0012504 <setActiveTerminal(VgaText*)+0x1d>
c00124f3:	c7 44 24 10 1f 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc002431f
c00124fb:	83 c4 08             	add    esp,0x8
c00124fe:	5b                   	pop    ebx
c00124ff:	e9 da da ff ff       	jmp    c000ffde <KePanic(char const*)>
c0012504:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0012509:	85 c0                	test   eax,eax
c001250b:	74 0c                	je     c0012519 <setActiveTerminal(VgaText*)+0x32>
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	50                   	push   eax
c0012511:	e8 66 fd ff ff       	call   c001227c <VgaText::updateCursor()>
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c001251f:	50                   	push   eax
c0012520:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012523:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012526:	53                   	push   ebx
c0012527:	e8 a4 ff ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c001252c:	83 c4 18             	add    esp,0x18
c001252f:	5b                   	pop    ebx
c0012530:	c3                   	ret    
c0012531:	90                   	nop

c0012532 <VgaText::clearScreen()>:
c0012532:	57                   	push   edi
c0012533:	56                   	push   esi
c0012534:	31 f6                	xor    esi,esi
c0012536:	53                   	push   ebx
c0012537:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001253b:	52                   	push   edx
c001253c:	6a 00                	push   0x0
c001253e:	6a 00                	push   0x0
c0012540:	53                   	push   ebx
c0012541:	e8 8a ff ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c0012546:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001254d:	83 c4 10             	add    esp,0x10
c0012550:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012553:	7e 20                	jle    c0012575 <VgaText::clearScreen()+0x43>
c0012555:	31 ff                	xor    edi,edi
c0012557:	50                   	push   eax
c0012558:	50                   	push   eax
c0012559:	56                   	push   esi
c001255a:	57                   	push   edi
c001255b:	47                   	inc    edi
c001255c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001255f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012562:	6a 20                	push   0x20
c0012564:	53                   	push   ebx
c0012565:	e8 aa fe ff ff       	call   c0012414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001256a:	83 c4 20             	add    esp,0x20
c001256d:	83 ff 50             	cmp    edi,0x50
c0012570:	75 e5                	jne    c0012557 <VgaText::clearScreen()+0x25>
c0012572:	46                   	inc    esi
c0012573:	eb db                	jmp    c0012550 <VgaText::clearScreen()+0x1e>
c0012575:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001257c:	5b                   	pop    ebx
c001257d:	5e                   	pop    esi
c001257e:	5f                   	pop    edi
c001257f:	c3                   	ret    

c0012580 <VgaText::setCursorX(int)>:
c0012580:	83 ec 10             	sub    esp,0x10
c0012583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012587:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001258a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258e:	50                   	push   eax
c001258f:	e8 3c ff ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c0012594:	83 c4 1c             	add    esp,0x1c
c0012597:	c3                   	ret    

c0012598 <VgaText::setCursorY(int)>:
c0012598:	83 ec 10             	sub    esp,0x10
c001259b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125a3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00125a6:	50                   	push   eax
c00125a7:	e8 24 ff ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c00125ac:	83 c4 1c             	add    esp,0x1c
c00125af:	c3                   	ret    

c00125b0 <VgaText::incrementCursor(bool)>:
c00125b0:	56                   	push   esi
c00125b1:	53                   	push   ebx
c00125b2:	51                   	push   ecx
c00125b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00125bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00125be:	40                   	inc    eax
c00125bf:	83 f8 50             	cmp    eax,0x50
c00125c2:	74 05                	je     c00125c9 <VgaText::incrementCursor(bool)+0x19>
c00125c4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00125c7:	eb 24                	jmp    c00125ed <VgaText::incrementCursor(bool)+0x3d>
c00125c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00125cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00125d3:	8d 50 01             	lea    edx,[eax+0x1]
c00125d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00125d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00125dc:	75 0f                	jne    c00125ed <VgaText::incrementCursor(bool)+0x3d>
c00125de:	83 ec 0c             	sub    esp,0xc
c00125e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00125e4:	53                   	push   ebx
c00125e5:	e8 88 fd ff ff       	call   c0012372 <VgaText::scrollScreen()>
c00125ea:	83 c4 10             	add    esp,0x10
c00125ed:	89 f0                	mov    eax,esi
c00125ef:	84 c0                	test   al,al
c00125f1:	74 0c                	je     c00125ff <VgaText::incrementCursor(bool)+0x4f>
c00125f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00125f7:	5a                   	pop    edx
c00125f8:	5b                   	pop    ebx
c00125f9:	5e                   	pop    esi
c00125fa:	e9 7d fc ff ff       	jmp    c001227c <VgaText::updateCursor()>
c00125ff:	58                   	pop    eax
c0012600:	5b                   	pop    ebx
c0012601:	5e                   	pop    esi
c0012602:	c3                   	ret    
c0012603:	90                   	nop

c0012604 <VgaText::decrementCursor(bool)>:
c0012604:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012608:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001260c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001260f:	85 c0                	test   eax,eax
c0012611:	74 04                	je     c0012617 <VgaText::decrementCursor(bool)+0x13>
c0012613:	48                   	dec    eax
c0012614:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012617:	84 c9                	test   cl,cl
c0012619:	74 09                	je     c0012624 <VgaText::decrementCursor(bool)+0x20>
c001261b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001261f:	e9 58 fc ff ff       	jmp    c001227c <VgaText::updateCursor()>
c0012624:	c3                   	ret    
c0012625:	90                   	nop

c0012626 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012626:	53                   	push   ebx
c0012627:	83 ec 08             	sub    esp,0x8
c001262a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001262f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012637:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001263b:	83 f8 07             	cmp    eax,0x7
c001263e:	75 21                	jne    c0012661 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012640:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012648:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012650:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012658:	83 c4 08             	add    esp,0x8
c001265b:	5b                   	pop    ebx
c001265c:	e9 72 63 ff ff       	jmp    c00089d3 <KeBeep(int, int, bool)>
c0012661:	83 f8 0d             	cmp    eax,0xd
c0012664:	75 09                	jne    c001266f <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012666:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001266d:	eb 2d                	jmp    c001269c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001266f:	83 f8 0a             	cmp    eax,0xa
c0012672:	75 31                	jne    c00126a5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012674:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012677:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001267e:	8d 50 01             	lea    edx,[eax+0x1]
c0012681:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012684:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012687:	75 0f                	jne    c0012698 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001268f:	53                   	push   ebx
c0012690:	e8 dd fc ff ff       	call   c0012372 <VgaText::scrollScreen()>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001269c:	83 c4 08             	add    esp,0x8
c001269f:	5b                   	pop    ebx
c00126a0:	e9 d7 fb ff ff       	jmp    c001227c <VgaText::updateCursor()>
c00126a5:	83 f8 08             	cmp    eax,0x8
c00126a8:	75 25                	jne    c00126cf <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00126aa:	50                   	push   eax
c00126ab:	50                   	push   eax
c00126ac:	6a 01                	push   0x1
c00126ae:	53                   	push   ebx
c00126af:	e8 50 ff ff ff       	call   c0012604 <VgaText::decrementCursor(bool)>
c00126b4:	5a                   	pop    edx
c00126b5:	59                   	pop    ecx
c00126b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00126b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00126bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00126bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00126c2:	6a 20                	push   0x20
c00126c4:	53                   	push   ebx
c00126c5:	e8 4a fd ff ff       	call   c0012414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00126ca:	83 c4 28             	add    esp,0x28
c00126cd:	5b                   	pop    ebx
c00126ce:	c3                   	ret    
c00126cf:	83 ec 08             	sub    esp,0x8
c00126d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00126d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00126d8:	51                   	push   ecx
c00126d9:	52                   	push   edx
c00126da:	50                   	push   eax
c00126db:	53                   	push   ebx
c00126dc:	e8 33 fd ff ff       	call   c0012414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00126e1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00126e5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00126ed:	83 c4 28             	add    esp,0x28
c00126f0:	5b                   	pop    ebx
c00126f1:	e9 ba fe ff ff       	jmp    c00125b0 <VgaText::incrementCursor(bool)>

c00126f6 <VgaText::putchar(char)>:
c00126f6:	57                   	push   edi
c00126f7:	56                   	push   esi
c00126f8:	53                   	push   ebx
c00126f9:	83 ec 10             	sub    esp,0x10
c00126fc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012700:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012704:	89 f8                	mov    eax,edi
c0012706:	0f be c0             	movsx  eax,al
c0012709:	83 f8 5b             	cmp    eax,0x5b
c001270c:	75 18                	jne    c0012726 <VgaText::putchar(char)+0x30>
c001270e:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012712:	74 20                	je     c0012734 <VgaText::putchar(char)+0x3e>
c0012714:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001271a:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012721:	e9 c1 00 00 00       	jmp    c00127e7 <VgaText::putchar(char)+0xf1>
c0012726:	83 f8 1b             	cmp    eax,0x1b
c0012729:	75 09                	jne    c0012734 <VgaText::putchar(char)+0x3e>
c001272b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001272f:	e9 b3 00 00 00       	jmp    c00127e7 <VgaText::putchar(char)+0xf1>
c0012734:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012737:	84 c9                	test   cl,cl
c0012739:	0f 84 98 00 00 00    	je     c00127d7 <VgaText::putchar(char)+0xe1>
c001273f:	8d 77 c0             	lea    esi,[edi-0x40]
c0012742:	89 f2                	mov    edx,esi
c0012744:	80 fa 3e             	cmp    dl,0x3e
c0012747:	77 78                	ja     c00127c1 <VgaText::putchar(char)+0xcb>
c0012749:	83 f8 6d             	cmp    eax,0x6d
c001274c:	75 47                	jne    c0012795 <VgaText::putchar(char)+0x9f>
c001274e:	31 f6                	xor    esi,esi
c0012750:	31 d2                	xor    edx,edx
c0012752:	31 c0                	xor    eax,eax
c0012754:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012757:	7e 2d                	jle    c0012786 <VgaText::putchar(char)+0x90>
c0012759:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001275e:	83 fa 3b             	cmp    edx,0x3b
c0012761:	75 17                	jne    c001277a <VgaText::putchar(char)+0x84>
c0012763:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012767:	50                   	push   eax
c0012768:	53                   	push   ebx
c0012769:	e8 24 fb ff ff       	call   c0012292 <VgaText::doANSI_SGR(int)>
c001276e:	59                   	pop    ecx
c001276f:	31 d2                	xor    edx,edx
c0012771:	5f                   	pop    edi
c0012772:	31 c0                	xor    eax,eax
c0012774:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012778:	eb 09                	jmp    c0012783 <VgaText::putchar(char)+0x8d>
c001277a:	6b c0 0a             	imul   eax,eax,0xa
c001277d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012781:	88 ca                	mov    dl,cl
c0012783:	46                   	inc    esi
c0012784:	eb ce                	jmp    c0012754 <VgaText::putchar(char)+0x5e>
c0012786:	84 d2                	test   dl,dl
c0012788:	74 2f                	je     c00127b9 <VgaText::putchar(char)+0xc3>
c001278a:	50                   	push   eax
c001278b:	53                   	push   ebx
c001278c:	e8 01 fb ff ff       	call   c0012292 <VgaText::doANSI_SGR(int)>
c0012791:	58                   	pop    eax
c0012792:	5a                   	pop    edx
c0012793:	eb 24                	jmp    c00127b9 <VgaText::putchar(char)+0xc3>
c0012795:	83 f8 4a             	cmp    eax,0x4a
c0012798:	75 1f                	jne    c00127b9 <VgaText::putchar(char)+0xc3>
c001279a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001279e:	75 19                	jne    c00127b9 <VgaText::putchar(char)+0xc3>
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	53                   	push   ebx
c00127a4:	e8 89 fd ff ff       	call   c0012532 <VgaText::clearScreen()>
c00127a9:	83 c4 0c             	add    esp,0xc
c00127ac:	6a 00                	push   0x0
c00127ae:	6a 00                	push   0x0
c00127b0:	53                   	push   ebx
c00127b1:	e8 1a fd ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c00127b6:	83 c4 10             	add    esp,0x10
c00127b9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00127bf:	eb 26                	jmp    c00127e7 <VgaText::putchar(char)+0xf1>
c00127c1:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00127c4:	83 f8 0e             	cmp    eax,0xe
c00127c7:	7f 1e                	jg     c00127e7 <VgaText::putchar(char)+0xf1>
c00127c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00127cc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00127cf:	89 f9                	mov    ecx,edi
c00127d1:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00127d5:	eb 10                	jmp    c00127e7 <VgaText::putchar(char)+0xf1>
c00127d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00127da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00127dd:	50                   	push   eax
c00127de:	53                   	push   ebx
c00127df:	e8 42 fe ff ff       	call   c0012626 <VgaText::putchar(char, VgaColour, VgaColour)>
c00127e4:	83 c4 10             	add    esp,0x10
c00127e7:	83 c4 10             	add    esp,0x10
c00127ea:	5b                   	pop    ebx
c00127eb:	5e                   	pop    esi
c00127ec:	5f                   	pop    edi
c00127ed:	c3                   	ret    

c00127ee <VgaText::putx(unsigned int)>:
c00127ee:	57                   	push   edi
c00127ef:	b9 11 00 00 00       	mov    ecx,0x11
c00127f4:	56                   	push   esi
c00127f5:	be 2f 2c 02 c0       	mov    esi,0xc0022c2f
c00127fa:	53                   	push   ebx
c00127fb:	83 ec 20             	sub    esp,0x20
c00127fe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012802:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012806:	fc                   	cld    
c0012807:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012809:	be 08 00 00 00       	mov    esi,0x8
c001280e:	50                   	push   eax
c001280f:	50                   	push   eax
c0012810:	89 d8                	mov    eax,ebx
c0012812:	c1 e3 04             	shl    ebx,0x4
c0012815:	c1 e8 1c             	shr    eax,0x1c
c0012818:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001281d:	50                   	push   eax
c001281e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012822:	e8 cf fe ff ff       	call   c00126f6 <VgaText::putchar(char)>
c0012827:	83 c4 10             	add    esp,0x10
c001282a:	4e                   	dec    esi
c001282b:	75 e1                	jne    c001280e <VgaText::putx(unsigned int)+0x20>
c001282d:	83 c4 20             	add    esp,0x20
c0012830:	5b                   	pop    ebx
c0012831:	5e                   	pop    esi
c0012832:	5f                   	pop    edi
c0012833:	c3                   	ret    

c0012834 <VgaText::puts(char const*)>:
c0012834:	53                   	push   ebx
c0012835:	83 ec 08             	sub    esp,0x8
c0012838:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001283c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001283f:	85 c0                	test   eax,eax
c0012841:	74 12                	je     c0012855 <VgaText::puts(char const*)+0x21>
c0012843:	43                   	inc    ebx
c0012844:	51                   	push   ecx
c0012845:	51                   	push   ecx
c0012846:	50                   	push   eax
c0012847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001284b:	e8 a6 fe ff ff       	call   c00126f6 <VgaText::putchar(char)>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	eb e7                	jmp    c001283c <VgaText::puts(char const*)+0x8>
c0012855:	83 c4 08             	add    esp,0x8
c0012858:	5b                   	pop    ebx
c0012859:	c3                   	ret    

c001285a <VgaText::write(unsigned long long, void*, int*)>:
c001285a:	55                   	push   ebp
c001285b:	57                   	push   edi
c001285c:	56                   	push   esi
c001285d:	53                   	push   ebx
c001285e:	83 ec 0c             	sub    esp,0xc
c0012861:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012865:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012869:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001286d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012874:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012877:	39 eb                	cmp    ebx,ebp
c0012879:	74 13                	je     c001288e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001287b:	43                   	inc    ebx
c001287c:	50                   	push   eax
c001287d:	50                   	push   eax
c001287e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012882:	50                   	push   eax
c0012883:	56                   	push   esi
c0012884:	e8 6d fe ff ff       	call   c00126f6 <VgaText::putchar(char)>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	eb e9                	jmp    c0012877 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001288e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012895:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012899:	89 38                	mov    DWORD PTR [eax],edi
c001289b:	83 c4 0c             	add    esp,0xc
c001289e:	31 c0                	xor    eax,eax
c00128a0:	5b                   	pop    ebx
c00128a1:	5e                   	pop    esi
c00128a2:	5f                   	pop    edi
c00128a3:	5d                   	pop    ebp
c00128a4:	c3                   	ret    
c00128a5:	90                   	nop

c00128a6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00128a6:	55                   	push   ebp
c00128a7:	57                   	push   edi
c00128a8:	56                   	push   esi
c00128a9:	53                   	push   ebx
c00128aa:	83 ec 1c             	sub    esp,0x1c
c00128ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00128b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128b9:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00128bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128c0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00128c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128c8:	85 db                	test   ebx,ebx
c00128ca:	75 14                	jne    c00128e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00128cc:	c7 44 24 30 2d 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc002432d
c00128d4:	83 c4 1c             	add    esp,0x1c
c00128d7:	5b                   	pop    ebx
c00128d8:	5e                   	pop    esi
c00128d9:	5f                   	pop    edi
c00128da:	5d                   	pop    ebp
c00128db:	e9 fe d6 ff ff       	jmp    c000ffde <KePanic(char const*)>
c00128e0:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00128e7:	50                   	push   eax
c00128e8:	50                   	push   eax
c00128e9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00128ee:	50                   	push   eax
c00128ef:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00128f4:	50                   	push   eax
c00128f5:	e8 66 fa ff ff       	call   c0012360 <VgaText::combineColours(unsigned char, unsigned char)>
c00128fa:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00128fe:	83 c4 10             	add    esp,0x10
c0012901:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012904:	0f b6 e8             	movzx  ebp,al
c0012907:	0f b7 c9             	movzx  ecx,cx
c001290a:	01 c9                	add    ecx,ecx
c001290c:	01 cb                	add    ebx,ecx
c001290e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012911:	85 c0                	test   eax,eax
c0012913:	0f 84 ef 00 00 00    	je     c0012a08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012919:	83 f8 0d             	cmp    eax,0xd
c001291c:	75 0c                	jne    c001292a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c001291e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012925:	e9 d8 00 00 00       	jmp    c0012a02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001292a:	83 f8 0a             	cmp    eax,0xa
c001292d:	75 44                	jne    c0012973 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001292f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012932:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012939:	8d 48 01             	lea    ecx,[eax+0x1]
c001293c:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001293f:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012942:	75 0f                	jne    c0012953 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001294a:	57                   	push   edi
c001294b:	e8 22 fa ff ff       	call   c0012372 <VgaText::scrollScreen()>
c0012950:	83 c4 10             	add    esp,0x10
c0012953:	83 ec 0c             	sub    esp,0xc
c0012956:	57                   	push   edi
c0012957:	e8 20 f9 ff ff       	call   c001227c <VgaText::updateCursor()>
c001295c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012960:	83 c4 10             	add    esp,0x10
c0012963:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012966:	0f b7 db             	movzx  ebx,bx
c0012969:	01 db                	add    ebx,ebx
c001296b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001296e:	e9 8f 00 00 00       	jmp    c0012a02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012973:	83 f8 08             	cmp    eax,0x8
c0012976:	75 34                	jne    c00129ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012978:	51                   	push   ecx
c0012979:	51                   	push   ecx
c001297a:	6a 01                	push   0x1
c001297c:	57                   	push   edi
c001297d:	e8 82 fc ff ff       	call   c0012604 <VgaText::decrementCursor(bool)>
c0012982:	5b                   	pop    ebx
c0012983:	58                   	pop    eax
c0012984:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012987:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001298a:	ff 77 30             	push   DWORD PTR [edi+0x30]
c001298d:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012990:	6a 20                	push   0x20
c0012992:	57                   	push   edi
c0012993:	e8 7c fa ff ff       	call   c0012414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012998:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001299c:	83 c4 20             	add    esp,0x20
c001299f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00129a2:	0f b7 db             	movzx  ebx,bx
c00129a5:	01 db                	add    ebx,ebx
c00129a7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00129aa:	eb 56                	jmp    c0012a02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129ac:	52                   	push   edx
c00129ad:	52                   	push   edx
c00129ae:	55                   	push   ebp
c00129af:	50                   	push   eax
c00129b0:	e8 4f fa ff ff       	call   c0012404 <VgaText::combineCharAndColour(char, unsigned char)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	66 89 03             	mov    WORD PTR [ebx],ax
c00129bb:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00129c1:	75 1d                	jne    c00129e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00129c3:	83 ec 0c             	sub    esp,0xc
c00129c6:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00129c9:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00129cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129d4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129d7:	50                   	push   eax
c00129d8:	e8 43 87 00 00       	call   c001b120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00129dd:	83 c4 20             	add    esp,0x20
c00129e0:	83 c3 02             	add    ebx,0x2
c00129e3:	50                   	push   eax
c00129e4:	50                   	push   eax
c00129e5:	6a 00                	push   0x0
c00129e7:	57                   	push   edi
c00129e8:	e8 c3 fb ff ff       	call   c00125b0 <VgaText::incrementCursor(bool)>
c00129ed:	83 c4 10             	add    esp,0x10
c00129f0:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00129f4:	75 0c                	jne    c0012a02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129f6:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129fa:	0f b7 db             	movzx  ebx,bx
c00129fd:	01 db                	add    ebx,ebx
c00129ff:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a02:	46                   	inc    esi
c0012a03:	e9 06 ff ff ff       	jmp    c001290e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	57                   	push   edi
c0012a0c:	e8 6b f8 ff ff       	call   c001227c <VgaText::updateCursor()>
c0012a11:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012a18:	83 c4 2c             	add    esp,0x2c
c0012a1b:	5b                   	pop    ebx
c0012a1c:	5e                   	pop    esi
c0012a1d:	5f                   	pop    edi
c0012a1e:	5d                   	pop    ebp
c0012a1f:	c3                   	ret    

c0012a20 <VgaText::VgaText(char const*)>:
c0012a20:	56                   	push   esi
c0012a21:	53                   	push   ebx
c0012a22:	83 ec 04             	sub    esp,0x4
c0012a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a29:	83 ec 08             	sub    esp,0x8
c0012a2c:	6a 00                	push   0x0
c0012a2e:	50                   	push   eax
c0012a2f:	e8 d8 05 00 00       	call   c001300c <UnixFile::UnixFile(int)>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	ba 64 43 02 c0       	mov    edx,0xc0024364
c0012a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a40:	89 10                	mov    DWORD PTR [eax],edx
c0012a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a46:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a51:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a5c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a64:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a6c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a77:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a82:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	68 3d 43 02 c0       	push   0xc002433d
c0012a9c:	e8 c3 44 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012aaf:	83 ec 0c             	sub    esp,0xc
c0012ab2:	6a 01                	push   0x1
c0012ab4:	e8 b4 09 00 00       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	89 c2                	mov    edx,eax
c0012abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012ac5:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0012acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012acf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ad2:	89 c6                	mov    esi,eax
c0012ad4:	e8 f9 d6 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0012ad9:	68 05 0c 00 00       	push   0xc05
c0012ade:	56                   	push   esi
c0012adf:	50                   	push   eax
c0012ae0:	53                   	push   ebx
c0012ae1:	e8 6a 10 00 00       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012af0:	83 ec 04             	sub    esp,0x4
c0012af3:	68 a0 0f 00 00       	push   0xfa0
c0012af8:	6a 00                	push   0x0
c0012afa:	50                   	push   eax
c0012afb:	e8 f0 d9 fe ff       	call   c00004f0 <memset>
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	83 ec 04             	sub    esp,0x4
c0012b06:	6a 00                	push   0x0
c0012b08:	6a 07                	push   0x7
c0012b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b0e:	e8 13 f8 ff ff       	call   c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	83 ec 04             	sub    esp,0x4
c0012b19:	6a 00                	push   0x0
c0012b1b:	6a 00                	push   0x0
c0012b1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b21:	e8 aa f9 ff ff       	call   c00124d0 <VgaText::setCursor(int, int)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	83 ec 0c             	sub    esp,0xc
c0012b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b30:	e8 fd f9 ff ff       	call   c0012532 <VgaText::clearScreen()>
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b44:	05 82 00 00 00       	add    eax,0x82
c0012b49:	83 ec 04             	sub    esp,0x4
c0012b4c:	68 80 00 00 00       	push   0x80
c0012b51:	6a 00                	push   0x0
c0012b53:	50                   	push   eax
c0012b54:	e8 97 d9 fe ff       	call   c00004f0 <memset>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b60:	05 02 01 00 00       	add    eax,0x102
c0012b65:	83 ec 04             	sub    esp,0x4
c0012b68:	68 80 00 00 00       	push   0x80
c0012b6d:	6a 00                	push   0x0
c0012b6f:	50                   	push   eax
c0012b70:	e8 7b d9 fe ff       	call   c00004f0 <memset>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	90                   	nop
c0012b79:	83 c4 04             	add    esp,0x4
c0012b7c:	5b                   	pop    ebx
c0012b7d:	5e                   	pop    esi
c0012b7e:	c3                   	ret    
c0012b7f:	90                   	nop

c0012b80 <VgaText::receiveKey(unsigned char)>:
c0012b80:	55                   	push   ebp
c0012b81:	57                   	push   edi
c0012b82:	56                   	push   esi
c0012b83:	53                   	push   ebx
c0012b84:	83 ec 2c             	sub    esp,0x2c
c0012b87:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012b8b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b8f:	89 ef                	mov    edi,ebp
c0012b91:	81 e7 ff 00 00 00    	and    edi,0xff
c0012b97:	0f 84 66 01 00 00    	je     c0012d03 <VgaText::receiveKey(unsigned char)+0x183>
c0012b9d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012ba3:	83 ff 08             	cmp    edi,0x8
c0012ba6:	75 73                	jne    c0012c1b <VgaText::receiveKey(unsigned char)+0x9b>
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	56                   	push   esi
c0012bac:	e8 bf d9 fe ff       	call   c0000570 <strlen>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	85 c0                	test   eax,eax
c0012bb6:	0f 84 02 01 00 00    	je     c0012cbe <VgaText::receiveKey(unsigned char)+0x13e>
c0012bbc:	50                   	push   eax
c0012bbd:	50                   	push   eax
c0012bbe:	6a 08                	push   0x8
c0012bc0:	53                   	push   ebx
c0012bc1:	e8 30 fb ff ff       	call   c00126f6 <VgaText::putchar(char)>
c0012bc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bc9:	e8 a2 d9 fe ff       	call   c0000570 <strlen>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012bd9:	83 fa 0d             	cmp    edx,0xd
c0012bdc:	89 d0                	mov    eax,edx
c0012bde:	0f 95 c1             	setne  cl
c0012be1:	83 fa 1f             	cmp    edx,0x1f
c0012be4:	0f 9e c2             	setle  dl
c0012be7:	0f b6 d2             	movzx  edx,dl
c0012bea:	85 ca                	test   edx,ecx
c0012bec:	74 17                	je     c0012c05 <VgaText::receiveKey(unsigned char)+0x85>
c0012bee:	83 e8 08             	sub    eax,0x8
c0012bf1:	3c 02                	cmp    al,0x2
c0012bf3:	76 10                	jbe    c0012c05 <VgaText::receiveKey(unsigned char)+0x85>
c0012bf5:	55                   	push   ebp
c0012bf6:	55                   	push   ebp
c0012bf7:	68 50 43 02 c0       	push   0xc0024350
c0012bfc:	53                   	push   ebx
c0012bfd:	e8 32 fc ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	83 ec 0c             	sub    esp,0xc
c0012c08:	56                   	push   esi
c0012c09:	e8 62 d9 fe ff       	call   c0000570 <strlen>
c0012c0e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012c16:	e9 a0 00 00 00       	jmp    c0012cbb <VgaText::receiveKey(unsigned char)+0x13b>
c0012c1b:	83 ec 0c             	sub    esp,0xc
c0012c1e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012c24:	50                   	push   eax
c0012c25:	e8 46 d9 fe ff       	call   c0000570 <strlen>
c0012c2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c31:	e8 3a d9 fe ff       	call   c0000570 <strlen>
c0012c36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012c41:	3d 80 00 00 00       	cmp    eax,0x80
c0012c46:	0f 87 b7 00 00 00    	ja     c0012d03 <VgaText::receiveKey(unsigned char)+0x183>
c0012c4c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012c4f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012c52:	3c 1e                	cmp    al,0x1e
c0012c54:	0f 96 c0             	setbe  al
c0012c57:	80 fa 01             	cmp    dl,0x1
c0012c5a:	0f 97 c2             	seta   dl
c0012c5d:	0f b6 d2             	movzx  edx,dl
c0012c60:	85 c2                	test   edx,eax
c0012c62:	74 2e                	je     c0012c92 <VgaText::receiveKey(unsigned char)+0x112>
c0012c64:	83 ff 0d             	cmp    edi,0xd
c0012c67:	74 29                	je     c0012c92 <VgaText::receiveKey(unsigned char)+0x112>
c0012c69:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012c6c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012c6f:	68 56 43 02 c0       	push   0xc0024356
c0012c74:	53                   	push   ebx
c0012c75:	e8 2c fc ff ff       	call   c00128a6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012c7a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012c7d:	8d 45 40             	lea    eax,[ebp+0x40]
c0012c80:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012c83:	0f b6 c0             	movzx  eax,al
c0012c86:	50                   	push   eax
c0012c87:	53                   	push   ebx
c0012c88:	e8 99 f9 ff ff       	call   c0012626 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012c8d:	83 c4 20             	add    esp,0x20
c0012c90:	eb 11                	jmp    c0012ca3 <VgaText::receiveKey(unsigned char)+0x123>
c0012c92:	89 e8                	mov    eax,ebp
c0012c94:	51                   	push   ecx
c0012c95:	0f be c0             	movsx  eax,al
c0012c98:	51                   	push   ecx
c0012c99:	50                   	push   eax
c0012c9a:	53                   	push   ebx
c0012c9b:	e8 56 fa ff ff       	call   c00126f6 <VgaText::putchar(char)>
c0012ca0:	83 c4 10             	add    esp,0x10
c0012ca3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012ca8:	89 e8                	mov    eax,ebp
c0012caa:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012cae:	52                   	push   edx
c0012caf:	52                   	push   edx
c0012cb0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012cb4:	50                   	push   eax
c0012cb5:	56                   	push   esi
c0012cb6:	e8 85 db fe ff       	call   c0000840 <strcat>
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012cc4:	b0 01                	mov    al,0x1
c0012cc6:	83 ff 1c             	cmp    edi,0x1c
c0012cc9:	77 0e                	ja     c0012cd9 <VgaText::receiveKey(unsigned char)+0x159>
c0012ccb:	b8 08 04 00 10       	mov    eax,0x10000408
c0012cd0:	89 f9                	mov    ecx,edi
c0012cd2:	d3 e8                	shr    eax,cl
c0012cd4:	f7 d0                	not    eax
c0012cd6:	83 e0 01             	and    eax,0x1
c0012cd9:	84 c0                	test   al,al
c0012cdb:	74 04                	je     c0012ce1 <VgaText::receiveKey(unsigned char)+0x161>
c0012cdd:	84 d2                	test   dl,dl
c0012cdf:	74 22                	je     c0012d03 <VgaText::receiveKey(unsigned char)+0x183>
c0012ce1:	81 c3 02 01 00 00    	add    ebx,0x102
c0012ce7:	50                   	push   eax
c0012ce8:	50                   	push   eax
c0012ce9:	56                   	push   esi
c0012cea:	53                   	push   ebx
c0012ceb:	e8 50 db fe ff       	call   c0000840 <strcat>
c0012cf0:	83 c4 0c             	add    esp,0xc
c0012cf3:	68 80 00 00 00       	push   0x80
c0012cf8:	6a 00                	push   0x0
c0012cfa:	56                   	push   esi
c0012cfb:	e8 f0 d7 fe ff       	call   c00004f0 <memset>
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	83 c4 2c             	add    esp,0x2c
c0012d06:	5b                   	pop    ebx
c0012d07:	5e                   	pop    esi
c0012d08:	5f                   	pop    edi
c0012d09:	5d                   	pop    ebp
c0012d0a:	c3                   	ret    
c0012d0b:	90                   	nop

c0012d0c <VgaText::doUpdate()>:
c0012d0c:	c3                   	ret    
c0012d0d:	66 90                	xchg   ax,ax
c0012d0f:	90                   	nop

c0012d10 <TSS::TSS()>:
c0012d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d1b:	90                   	nop
c0012d1c:	c3                   	ret    
c0012d1d:	90                   	nop
c0012d1e:	66 90                	xchg   ax,ax

c0012d20 <TSS::setESP(unsigned long)>:
c0012d20:	55                   	push   ebp
c0012d21:	89 e5                	mov    ebp,esp
c0012d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d29:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012d2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d2f:	90                   	nop
c0012d30:	5d                   	pop    ebp
c0012d31:	c3                   	ret    
c0012d32:	66 90                	xchg   ax,ax

c0012d34 <TSS::flush()>:
c0012d34:	55                   	push   ebp
c0012d35:	89 e5                	mov    ebp,esp
c0012d37:	83 ec 10             	sub    esp,0x10
c0012d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3f:	83 c8 03             	or     eax,0x3
c0012d42:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012d46:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012d4a:	66 89 d0             	mov    ax,dx
c0012d4d:	0f 00 d8             	ltr    ax
c0012d50:	90                   	nop
c0012d51:	c9                   	leave  
c0012d52:	c3                   	ret    
c0012d53:	90                   	nop

c0012d54 <TSS::setup(unsigned long, unsigned long)>:
c0012d54:	55                   	push   ebp
c0012d55:	89 e5                	mov    ebp,esp
c0012d57:	83 ec 18             	sub    esp,0x18
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	6a 68                	push   0x68
c0012d5f:	e8 33 cf ff ff       	call   c000fc97 <malloc>
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	89 c2                	mov    edx,eax
c0012d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d75:	83 ec 08             	sub    esp,0x8
c0012d78:	50                   	push   eax
c0012d79:	68 78 43 02 c0       	push   0xc0024378
c0012d7e:	e8 e1 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d83:	83 c4 10             	add    esp,0x10
c0012d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d8c:	83 ec 04             	sub    esp,0x4
c0012d8f:	6a 68                	push   0x68
c0012d91:	6a 00                	push   0x0
c0012d93:	50                   	push   eax
c0012d94:	e8 57 d7 fe ff       	call   c00004f0 <memset>
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012da2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dae:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012dbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dc6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dd2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ddb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dde:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012de7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dea:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012df3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012df6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e02:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012e11:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e26:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012e2d:	83 ec 0c             	sub    esp,0xc
c0012e30:	68 8f 43 02 c0       	push   0xc002438f
c0012e35:	e8 2a 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e3a:	83 c4 10             	add    esp,0x10
c0012e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e43:	0f 20 da             	mov    edx,cr3
c0012e46:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012e49:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012e4c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012e4f:	83 ec 0c             	sub    esp,0xc
c0012e52:	68 92 43 02 c0       	push   0xc0024392
c0012e57:	e8 08 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e65:	83 ec 08             	sub    esp,0x8
c0012e68:	50                   	push   eax
c0012e69:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012e6c:	50                   	push   eax
c0012e6d:	e8 88 be ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	83 ec 08             	sub    esp,0x8
c0012e78:	6a 68                	push   0x68
c0012e7a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012e7d:	50                   	push   eax
c0012e7e:	e8 93 be ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012e8a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012e8d:	83 e0 0f             	and    eax,0xf
c0012e90:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012e93:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012e96:	83 c8 40             	or     eax,0x40
c0012e99:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	68 95 43 02 c0       	push   0xc0024395
c0012ea4:	e8 bb 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012eb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012eb7:	83 ec 08             	sub    esp,0x8
c0012eba:	50                   	push   eax
c0012ebb:	68 98 43 02 c0       	push   0xc0024398
c0012ec0:	e8 9f 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012ecd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ed3:	05 64 01 00 00       	add    eax,0x164
c0012ed8:	83 ec 04             	sub    esp,0x4
c0012edb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012ede:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012ee1:	50                   	push   eax
c0012ee2:	e8 63 be ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c0012ee7:	83 c4 10             	add    esp,0x10
c0012eea:	89 c2                	mov    edx,eax
c0012eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eef:	89 10                	mov    DWORD PTR [eax],edx
c0012ef1:	83 ec 0c             	sub    esp,0xc
c0012ef4:	68 ad 43 02 c0       	push   0xc00243ad
c0012ef9:	e8 66 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f0c:	05 64 01 00 00       	add    eax,0x164
c0012f11:	83 ec 0c             	sub    esp,0xc
c0012f14:	50                   	push   eax
c0012f15:	e8 5a be ff ff       	call   c000ed74 <GDT::flush()>
c0012f1a:	83 c4 10             	add    esp,0x10
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	68 b0 43 02 c0       	push   0xc00243b0
c0012f25:	e8 3a 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f2a:	83 c4 10             	add    esp,0x10
c0012f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f32:	c9                   	leave  
c0012f33:	c3                   	ret    

c0012f34 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f3f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012f44:	75 08                	jne    c0012f4e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012f46:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012f4c:	eb 38                	jmp    c0012f86 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012f4e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012f53:	75 17                	jne    c0012f6c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012f55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012f5d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012f63:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f69:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012f6c:	89 c1                	mov    ecx,eax
c0012f6e:	83 e1 fd             	and    ecx,0xfffffffd
c0012f71:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012f77:	74 cd                	je     c0012f46 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012f79:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012f7e:	83 e0 ef             	and    eax,0xffffffef
c0012f81:	83 f8 08             	cmp    eax,0x8
c0012f84:	76 c0                	jbe    c0012f46 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012f86:	31 c0                	xor    eax,eax
c0012f88:	c3                   	ret    
c0012f89:	90                   	nop

c0012f8a <ReservedFilename::isAtty()>:
c0012f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f8e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012f91:	31 c0                	xor    eax,eax
c0012f93:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012f99:	74 09                	je     c0012fa4 <ReservedFilename::isAtty()+0x1a>
c0012f9b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012fa1:	0f 94 c0             	sete   al
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012faa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012fae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fb5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012fba:	75 08                	jne    c0012fc4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012fbc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012fc2:	eb 3d                	jmp    c0013001 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012fc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012fc9:	75 17                	jne    c0012fe2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012fcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012fd3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012fd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fdf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012fe2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012fe7:	75 04                	jne    c0012fed <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012fe9:	89 0a                	mov    DWORD PTR [edx],ecx
c0012feb:	eb 14                	jmp    c0013001 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012fed:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012ff2:	74 c8                	je     c0012fbc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ff4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012ff9:	83 e0 ef             	and    eax,0xffffffef
c0012ffc:	83 f8 08             	cmp    eax,0x8
c0012fff:	76 bb                	jbe    c0012fbc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013001:	31 c0                	xor    eax,eax
c0013003:	c3                   	ret    

c0013004 <UnixFile::getFileDescriptor()>:
c0013004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001300b:	c3                   	ret    

c001300c <UnixFile::UnixFile(int)>:
c001300c:	53                   	push   ebx
c001300d:	83 ec 28             	sub    esp,0x28
c0013010:	ba 00 44 02 c0       	mov    edx,0xc0024400
c0013015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013019:	89 10                	mov    DWORD PTR [eax],edx
c001301b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0013023:	0f 8f 90 01 00 00    	jg     c00131b9 <UnixFile::UnixFile(int)+0x1ad>
c0013029:	a1 40 67 02 c0       	mov    eax,ds:0xc0026740
c001302e:	8d 50 01             	lea    edx,[eax+0x1]
c0013031:	89 15 40 67 02 c0    	mov    DWORD PTR ds:0xc0026740,edx
c0013037:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001303b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001303e:	83 ec 08             	sub    esp,0x8
c0013041:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013045:	68 38 e2 02 c0       	push   0xc002e238
c001304a:	e8 4f ef 00 00       	call   c0021f9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001304f:	83 c4 10             	add    esp,0x10
c0013052:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0013057:	83 f0 01             	xor    eax,0x1
c001305a:	0f b6 c0             	movzx  eax,al
c001305d:	85 c0                	test   eax,eax
c001305f:	0f 84 55 01 00 00    	je     c00131ba <UnixFile::UnixFile(int)+0x1ae>
c0013065:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c001306c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001307b:	e8 17 cc ff ff       	call   c000fc97 <malloc>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	89 c3                	mov    ebx,eax
c0013085:	83 ec 08             	sub    esp,0x8
c0013088:	68 03 ff ff 0f       	push   0xfffff03
c001308d:	53                   	push   ebx
c001308e:	e8 2d 01 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c001309c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ab:	e8 e7 cb ff ff       	call   c000fc97 <malloc>
c00130b0:	83 c4 10             	add    esp,0x10
c00130b3:	89 c3                	mov    ebx,eax
c00130b5:	83 ec 08             	sub    esp,0x8
c00130b8:	68 01 ff ff 0f       	push   0xfffff01
c00130bd:	53                   	push   ebx
c00130be:	e8 fd 00 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c00130c3:	83 c4 10             	add    esp,0x10
c00130c6:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c00130cc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00130db:	e8 b7 cb ff ff       	call   c000fc97 <malloc>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	89 c3                	mov    ebx,eax
c00130e5:	83 ec 08             	sub    esp,0x8
c00130e8:	68 00 ff ff 0f       	push   0xfffff00
c00130ed:	53                   	push   ebx
c00130ee:	e8 cd 00 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c00130fc:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001310b:	e8 87 cb ff ff       	call   c000fc97 <malloc>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	89 c3                	mov    ebx,eax
c0013115:	83 ec 08             	sub    esp,0x8
c0013118:	68 02 ff ff 0f       	push   0xfffff02
c001311d:	53                   	push   ebx
c001311e:	e8 9d 00 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c001312c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013134:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013139:	7f 7f                	jg     c00131ba <UnixFile::UnixFile(int)+0x1ae>
c001313b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013143:	83 ec 0c             	sub    esp,0xc
c0013146:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001314a:	e8 48 cb ff ff       	call   c000fc97 <malloc>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	89 c3                	mov    ebx,eax
c0013154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013158:	05 10 ff ff 0f       	add    eax,0xfffff10
c001315d:	83 ec 08             	sub    esp,0x8
c0013160:	50                   	push   eax
c0013161:	53                   	push   ebx
c0013162:	e8 59 00 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001316e:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0013175:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001317d:	83 ec 0c             	sub    esp,0xc
c0013180:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013184:	e8 0e cb ff ff       	call   c000fc97 <malloc>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	89 c3                	mov    ebx,eax
c001318e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013192:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013197:	83 ec 08             	sub    esp,0x8
c001319a:	50                   	push   eax
c001319b:	53                   	push   ebx
c001319c:	e8 1f 00 00 00       	call   c00131c0 <ReservedFilename::ReservedFilename(int)>
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a8:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c00131af:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00131b4:	e9 7b ff ff ff       	jmp    c0013134 <UnixFile::UnixFile(int)+0x128>
c00131b9:	90                   	nop
c00131ba:	83 c4 28             	add    esp,0x28
c00131bd:	5b                   	pop    ebx
c00131be:	c3                   	ret    
c00131bf:	90                   	nop

c00131c0 <ReservedFilename::ReservedFilename(int)>:
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c7:	83 ec 08             	sub    esp,0x8
c00131ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ce:	50                   	push   eax
c00131cf:	e8 38 fe ff ff       	call   c001300c <UnixFile::UnixFile(int)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	ba 1c 44 02 c0       	mov    edx,0xc002441c
c00131dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e0:	89 10                	mov    DWORD PTR [eax],edx
c00131e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00131ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131ed:	90                   	nop
c00131ee:	83 c4 0c             	add    esp,0xc
c00131f1:	c3                   	ret    

c00131f2 <UnixFile::~UnixFile()>:
c00131f2:	83 ec 1c             	sub    esp,0x1c
c00131f5:	ba 00 44 02 c0       	mov    edx,0xc0024400
c00131fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131fe:	89 10                	mov    DWORD PTR [eax],edx
c0013200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013204:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013207:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001320c:	7f 76                	jg     c0013284 <UnixFile::~UnixFile()+0x92>
c001320e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	68 38 e2 02 c0       	push   0xc002e238
c001321e:	e8 4f ee 00 00       	call   c0022072 <LinkedList<UnixFile>::getFirstElement()>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	68 38 e2 02 c0       	push   0xc002e238
c0013232:	e8 43 ee 00 00       	call   c002207a <LinkedList<UnixFile>::removeFirst()>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001323e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013242:	74 43                	je     c0013287 <UnixFile::~UnixFile()+0x95>
c0013244:	83 ec 08             	sub    esp,0x8
c0013247:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001324b:	68 38 e2 02 c0       	push   0xc002e238
c0013250:	e8 49 ed 00 00       	call   c0021f9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013255:	83 c4 10             	add    esp,0x10
c0013258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001325c:	8d 50 01             	lea    edx,[eax+0x1]
c001325f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013263:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013268:	0f 94 c0             	sete   al
c001326b:	0f b6 c0             	movzx  eax,al
c001326e:	85 c0                	test   eax,eax
c0013270:	74 a4                	je     c0013216 <UnixFile::~UnixFile()+0x24>
c0013272:	83 ec 0c             	sub    esp,0xc
c0013275:	68 b4 43 02 c0       	push   0xc00243b4
c001327a:	e8 5f cd ff ff       	call   c000ffde <KePanic(char const*)>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	eb 92                	jmp    c0013216 <UnixFile::~UnixFile()+0x24>
c0013284:	90                   	nop
c0013285:	eb 01                	jmp    c0013288 <UnixFile::~UnixFile()+0x96>
c0013287:	90                   	nop
c0013288:	90                   	nop
c0013289:	83 c4 1c             	add    esp,0x1c
c001328c:	c3                   	ret    
c001328d:	90                   	nop

c001328e <UnixFile::~UnixFile()>:
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	83 ec 0c             	sub    esp,0xc
c0013294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013298:	e8 55 ff ff ff       	call   c00131f2 <UnixFile::~UnixFile()>
c001329d:	83 c4 10             	add    esp,0x10
c00132a0:	83 ec 08             	sub    esp,0x8
c00132a3:	6a 0c                	push   0xc
c00132a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a9:	e8 71 a0 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	83 c4 0c             	add    esp,0xc
c00132b4:	c3                   	ret    
c00132b5:	90                   	nop

c00132b6 <ReservedFilename::~ReservedFilename()>:
c00132b6:	83 ec 0c             	sub    esp,0xc
c00132b9:	ba 1c 44 02 c0       	mov    edx,0xc002441c
c00132be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c2:	89 10                	mov    DWORD PTR [eax],edx
c00132c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	50                   	push   eax
c00132cc:	e8 21 ff ff ff       	call   c00131f2 <UnixFile::~UnixFile()>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	90                   	nop
c00132d5:	83 c4 0c             	add    esp,0xc
c00132d8:	c3                   	ret    
c00132d9:	90                   	nop

c00132da <ReservedFilename::~ReservedFilename()>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e4:	e8 cd ff ff ff       	call   c00132b6 <ReservedFilename::~ReservedFilename()>
c00132e9:	83 c4 10             	add    esp,0x10
c00132ec:	83 ec 08             	sub    esp,0x8
c00132ef:	6a 0c                	push   0xc
c00132f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f5:	e8 25 a0 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00132fa:	83 c4 10             	add    esp,0x10
c00132fd:	83 c4 0c             	add    esp,0xc
c0013300:	c3                   	ret    

c0013301 <KeGetFileFromDescriptor(int)>:
c0013301:	53                   	push   ebx
c0013302:	83 ec 10             	sub    esp,0x10
c0013305:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013309:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001330f:	53                   	push   ebx
c0013310:	68 d4 43 02 c0       	push   0xc00243d4
c0013315:	e8 4a 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013323:	7f 30                	jg     c0013355 <KeGetFileFromDescriptor(int)+0x54>
c0013325:	83 ec 0c             	sub    esp,0xc
c0013328:	68 38 e2 02 c0       	push   0xc002e238
c001332d:	e8 40 ed 00 00       	call   c0022072 <LinkedList<UnixFile>::getFirstElement()>
c0013332:	83 c4 10             	add    esp,0x10
c0013335:	8d 50 ff             	lea    edx,[eax-0x1]
c0013338:	83 fa fd             	cmp    edx,0xfffffffd
c001333b:	76 04                	jbe    c0013341 <KeGetFileFromDescriptor(int)+0x40>
c001333d:	31 c0                	xor    eax,eax
c001333f:	eb 6e                	jmp    c00133af <KeGetFileFromDescriptor(int)+0xae>
c0013341:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013344:	74 69                	je     c00133af <KeGetFileFromDescriptor(int)+0xae>
c0013346:	52                   	push   edx
c0013347:	52                   	push   edx
c0013348:	50                   	push   eax
c0013349:	68 38 e2 02 c0       	push   0xc002e238
c001334e:	e8 c9 ed 00 00       	call   c002211c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013353:	eb dd                	jmp    c0013332 <KeGetFileFromDescriptor(int)+0x31>
c0013355:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c001335a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013360:	74 4d                	je     c00133af <KeGetFileFromDescriptor(int)+0xae>
c0013362:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0013367:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001336d:	74 40                	je     c00133af <KeGetFileFromDescriptor(int)+0xae>
c001336f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013374:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001337a:	74 33                	je     c00133af <KeGetFileFromDescriptor(int)+0xae>
c001337c:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0013381:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013387:	74 26                	je     c00133af <KeGetFileFromDescriptor(int)+0xae>
c0013389:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001338f:	83 f8 08             	cmp    eax,0x8
c0013392:	77 09                	ja     c001339d <KeGetFileFromDescriptor(int)+0x9c>
c0013394:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c001339b:	eb 12                	jmp    c00133af <KeGetFileFromDescriptor(int)+0xae>
c001339d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00133a3:	83 fb 08             	cmp    ebx,0x8
c00133a6:	77 95                	ja     c001333d <KeGetFileFromDescriptor(int)+0x3c>
c00133a8:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c00133af:	83 c4 08             	add    esp,0x8
c00133b2:	5b                   	pop    ebx
c00133b3:	c3                   	ret    

c00133b4 <__static_initialization_and_destruction_0(int, int)>:
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00133bc:	75 34                	jne    c00133f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00133be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00133c6:	75 2a                	jne    c00133f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	68 38 e2 02 c0       	push   0xc002e238
c00133d0:	e8 87 eb 00 00       	call   c0021f5c <LinkedList<UnixFile>::LinkedList()>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	83 ec 04             	sub    esp,0x4
c00133db:	68 84 5f 02 c0       	push   0xc0025f84
c00133e0:	68 38 e2 02 c0       	push   0xc002e238
c00133e5:	68 5a 1f 02 c0       	push   0xc0021f5a
c00133ea:	e8 e0 9e ff ff       	call   c000d2cf <__cxa_atexit>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	90                   	nop
c00133f3:	83 c4 0c             	add    esp,0xc
c00133f6:	c3                   	ret    

c00133f7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00133f7:	83 ec 0c             	sub    esp,0xc
c00133fa:	83 ec 08             	sub    esp,0x8
c00133fd:	68 ff ff 00 00       	push   0xffff
c0013402:	6a 01                	push   0x1
c0013404:	e8 ab ff ff ff       	call   c00133b4 <__static_initialization_and_destruction_0(int, int)>
c0013409:	83 c4 10             	add    esp,0x10
c001340c:	83 c4 0c             	add    esp,0xc
c001340f:	c3                   	ret    

c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013410:	53                   	push   ebx
c0013411:	8b 15 48 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026748
c0013417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001341b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001341f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013425:	89 d8                	mov    eax,ebx
c0013427:	d1 e8                	shr    eax,1
c0013429:	01 d0                	add    eax,edx
c001342b:	80 e3 01             	and    bl,0x1
c001342e:	8a 10                	mov    dl,BYTE PTR [eax]
c0013430:	75 09                	jne    c001343b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013432:	83 e2 f0             	and    edx,0xfffffff0
c0013435:	09 ca                	or     edx,ecx
c0013437:	88 10                	mov    BYTE PTR [eax],dl
c0013439:	5b                   	pop    ebx
c001343a:	c3                   	ret    
c001343b:	83 e2 0f             	and    edx,0xf
c001343e:	0f b6 c9             	movzx  ecx,cl
c0013441:	c1 e1 04             	shl    ecx,0x4
c0013444:	09 ca                	or     edx,ecx
c0013446:	88 10                	mov    BYTE PTR [eax],dl
c0013448:	5b                   	pop    ebx
c0013449:	c3                   	ret    

c001344a <Virt::getPageState(unsigned long)>:
c001344a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344e:	8b 0d 48 67 02 c0    	mov    ecx,DWORD PTR ds:0xc0026748
c0013454:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001345a:	89 d0                	mov    eax,edx
c001345c:	d1 e8                	shr    eax,1
c001345e:	80 e2 01             	and    dl,0x1
c0013461:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013464:	74 03                	je     c0013469 <Virt::getPageState(unsigned long)+0x1f>
c0013466:	c1 e8 04             	shr    eax,0x4
c0013469:	83 e0 0f             	and    eax,0xf
c001346c:	c3                   	ret    

c001346d <Virt::allocateKernelVirtualPages(int)>:
c001346d:	55                   	push   ebp
c001346e:	31 ed                	xor    ebp,ebp
c0013470:	57                   	push   edi
c0013471:	31 ff                	xor    edi,edi
c0013473:	56                   	push   esi
c0013474:	53                   	push   ebx
c0013475:	31 db                	xor    ebx,ebx
c0013477:	83 ec 0c             	sub    esp,0xc
c001347a:	8b 35 44 67 02 c0    	mov    esi,DWORD PTR ds:0xc0026744
c0013480:	56                   	push   esi
c0013481:	e8 c4 ff ff ff       	call   c001344a <Virt::getPageState(unsigned long)>
c0013486:	5a                   	pop    edx
c0013487:	84 c0                	test   al,al
c0013489:	75 41                	jne    c00134cc <Virt::allocateKernelVirtualPages(int)+0x5f>
c001348b:	85 db                	test   ebx,ebx
c001348d:	75 02                	jne    c0013491 <Virt::allocateKernelVirtualPages(int)+0x24>
c001348f:	89 f5                	mov    ebp,esi
c0013491:	83 c3 01             	add    ebx,0x1
c0013494:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013498:	74 5f                	je     c00134f9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001349a:	83 c6 01             	add    esi,0x1
c001349d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00134a3:	76 34                	jbe    c00134d9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00134a5:	c7 05 44 67 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026744,0xc8000
c00134af:	f7 c7 01 00 00 00    	test   edi,0x1
c00134b5:	75 2a                	jne    c00134e1 <Virt::allocateKernelVirtualPages(int)+0x74>
c00134b7:	be 00 80 0c 00       	mov    esi,0xc8000
c00134bc:	bf 01 00 00 00       	mov    edi,0x1
c00134c1:	56                   	push   esi
c00134c2:	e8 83 ff ff ff       	call   c001344a <Virt::getPageState(unsigned long)>
c00134c7:	5a                   	pop    edx
c00134c8:	84 c0                	test   al,al
c00134ca:	74 bf                	je     c001348b <Virt::allocateKernelVirtualPages(int)+0x1e>
c00134cc:	31 db                	xor    ebx,ebx
c00134ce:	83 c6 01             	add    esi,0x1
c00134d1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00134d7:	77 cc                	ja     c00134a5 <Virt::allocateKernelVirtualPages(int)+0x38>
c00134d9:	89 35 44 67 02 c0    	mov    DWORD PTR ds:0xc0026744,esi
c00134df:	eb 9f                	jmp    c0013480 <Virt::allocateKernelVirtualPages(int)+0x13>
c00134e1:	83 ec 0c             	sub    esp,0xc
c00134e4:	68 30 44 02 c0       	push   0xc0024430
c00134e9:	e8 f0 ca ff ff       	call   c000ffde <KePanic(char const*)>
c00134ee:	8b 35 44 67 02 c0    	mov    esi,DWORD PTR ds:0xc0026744
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	eb 87                	jmp    c0013480 <Virt::allocateKernelVirtualPages(int)+0x13>
c00134f9:	89 2d 44 67 02 c0    	mov    DWORD PTR ds:0xc0026744,ebp
c00134ff:	83 fb 01             	cmp    ebx,0x1
c0013502:	74 6f                	je     c0013573 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013504:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013508:	85 c9                	test   ecx,ecx
c001350a:	74 49                	je     c0013555 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001350c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013510:	89 e8                	mov    eax,ebp
c0013512:	31 db                	xor    ebx,ebx
c0013514:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013517:	eb 18                	jmp    c0013531 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013519:	6a 01                	push   0x1
c001351b:	83 c3 01             	add    ebx,0x1
c001351e:	50                   	push   eax
c001351f:	e8 ec fe ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013524:	58                   	pop    eax
c0013525:	5a                   	pop    edx
c0013526:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001352a:	74 29                	je     c0013555 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001352c:	a1 44 67 02 c0       	mov    eax,ds:0xc0026744
c0013531:	8d 50 01             	lea    edx,[eax+0x1]
c0013534:	85 db                	test   ebx,ebx
c0013536:	89 15 44 67 02 c0    	mov    DWORD PTR ds:0xc0026744,edx
c001353c:	74 24                	je     c0013562 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001353e:	39 df                	cmp    edi,ebx
c0013540:	75 d7                	jne    c0013519 <Virt::allocateKernelVirtualPages(int)+0xac>
c0013542:	6a 03                	push   0x3
c0013544:	83 c3 01             	add    ebx,0x1
c0013547:	50                   	push   eax
c0013548:	e8 c3 fe ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001354d:	59                   	pop    ecx
c001354e:	5e                   	pop    esi
c001354f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013553:	75 d7                	jne    c001352c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013555:	83 c4 0c             	add    esp,0xc
c0013558:	89 e8                	mov    eax,ebp
c001355a:	5b                   	pop    ebx
c001355b:	c1 e0 0c             	shl    eax,0xc
c001355e:	5e                   	pop    esi
c001355f:	5f                   	pop    edi
c0013560:	5d                   	pop    ebp
c0013561:	c3                   	ret    
c0013562:	6a 02                	push   0x2
c0013564:	bb 01 00 00 00       	mov    ebx,0x1
c0013569:	50                   	push   eax
c001356a:	e8 a1 fe ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001356f:	58                   	pop    eax
c0013570:	5a                   	pop    edx
c0013571:	eb b9                	jmp    c001352c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013573:	6a 04                	push   0x4
c0013575:	8d 45 01             	lea    eax,[ebp+0x1]
c0013578:	55                   	push   ebp
c0013579:	a3 44 67 02 c0       	mov    ds:0xc0026744,eax
c001357e:	e8 8d fe ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013583:	5b                   	pop    ebx
c0013584:	89 e8                	mov    eax,ebp
c0013586:	5e                   	pop    esi
c0013587:	c1 e0 0c             	shl    eax,0xc
c001358a:	83 c4 0c             	add    esp,0xc
c001358d:	5b                   	pop    ebx
c001358e:	5e                   	pop    esi
c001358f:	5f                   	pop    edi
c0013590:	5d                   	pop    ebp
c0013591:	c3                   	ret    

c0013592 <Virt::freeSwapfilePage(unsigned long)>:
c0013592:	53                   	push   ebx
c0013593:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c0013599:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001359d:	b8 01 00 00 00       	mov    eax,0x1
c00135a2:	89 cb                	mov    ebx,ecx
c00135a4:	d3 e0                	shl    eax,cl
c00135a6:	c1 eb 05             	shr    ebx,0x5
c00135a9:	f7 d0                	not    eax
c00135ab:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00135ae:	21 c1                	and    ecx,eax
c00135b0:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00135b3:	5b                   	pop    ebx
c00135b4:	c3                   	ret    

c00135b5 <Virt::swapIDToSector(unsigned long)>:
c00135b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b9:	8b 15 4c 67 02 c0    	mov    edx,DWORD PTR ds:0xc002674c
c00135bf:	8b 0d 54 67 02 c0    	mov    ecx,DWORD PTR ds:0xc0026754
c00135c5:	0f af c2             	imul   eax,edx
c00135c8:	01 c8                	add    eax,ecx
c00135ca:	c3                   	ret    

c00135cb <Virt::allocateSwapfilePage()>:
c00135cb:	55                   	push   ebp
c00135cc:	31 d2                	xor    edx,edx
c00135ce:	57                   	push   edi
c00135cf:	56                   	push   esi
c00135d0:	53                   	push   ebx
c00135d1:	83 ec 0c             	sub    esp,0xc
c00135d4:	8b 0d 4c 67 02 c0    	mov    ecx,DWORD PTR ds:0xc002674c
c00135da:	a1 50 67 02 c0       	mov    eax,ds:0xc0026750
c00135df:	f7 f1                	div    ecx
c00135e1:	39 0d 50 67 02 c0    	cmp    DWORD PTR ds:0xc0026750,ecx
c00135e7:	72 2f                	jb     c0013618 <Virt::allocateSwapfilePage()+0x4d>
c00135e9:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c00135ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00135f1:	f6 c2 01             	test   dl,0x1
c00135f4:	74 3e                	je     c0013634 <Virt::allocateSwapfilePage()+0x69>
c00135f6:	31 c9                	xor    ecx,ecx
c00135f8:	bf 01 00 00 00       	mov    edi,0x1
c00135fd:	eb 12                	jmp    c0013611 <Virt::allocateSwapfilePage()+0x46>
c00135ff:	89 fd                	mov    ebp,edi
c0013601:	89 ca                	mov    edx,ecx
c0013603:	d3 e5                	shl    ebp,cl
c0013605:	c1 ea 05             	shr    edx,0x5
c0013608:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001360b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001360d:	85 ea                	test   edx,ebp
c001360f:	74 2c                	je     c001363d <Virt::allocateSwapfilePage()+0x72>
c0013611:	83 c1 01             	add    ecx,0x1
c0013614:	39 c8                	cmp    eax,ecx
c0013616:	77 e7                	ja     c00135ff <Virt::allocateSwapfilePage()+0x34>
c0013618:	83 ec 0c             	sub    esp,0xc
c001361b:	68 b3 49 02 c0       	push   0xc00249b3
c0013620:	e8 b9 c9 ff ff       	call   c000ffde <KePanic(char const*)>
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	31 c9                	xor    ecx,ecx
c001362a:	83 c4 0c             	add    esp,0xc
c001362d:	89 c8                	mov    eax,ecx
c001362f:	5b                   	pop    ebx
c0013630:	5e                   	pop    esi
c0013631:	5f                   	pop    edi
c0013632:	5d                   	pop    ebp
c0013633:	c3                   	ret    
c0013634:	89 f3                	mov    ebx,esi
c0013636:	bd 01 00 00 00       	mov    ebp,0x1
c001363b:	31 c9                	xor    ecx,ecx
c001363d:	09 ea                	or     edx,ebp
c001363f:	89 c8                	mov    eax,ecx
c0013641:	89 13                	mov    DWORD PTR [ebx],edx
c0013643:	83 c4 0c             	add    esp,0xc
c0013646:	5b                   	pop    ebx
c0013647:	5e                   	pop    esi
c0013648:	5f                   	pop    edi
c0013649:	5d                   	pop    ebp
c001364a:	c3                   	ret    

c001364b <Virt::virtualMemorySetup()>:
c001364b:	53                   	push   ebx
c001364c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013651:	6a 0f                	push   0xf
c0013653:	53                   	push   ebx
c0013654:	83 c3 01             	add    ebx,0x1
c0013657:	e8 b4 fd ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001365c:	58                   	pop    eax
c001365d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013663:	5a                   	pop    edx
c0013664:	75 eb                	jne    c0013651 <Virt::virtualMemorySetup()+0x6>
c0013666:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001366b:	6a 00                	push   0x0
c001366d:	53                   	push   ebx
c001366e:	83 c3 01             	add    ebx,0x1
c0013671:	e8 9a fd ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013676:	59                   	pop    ecx
c0013677:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001367d:	58                   	pop    eax
c001367e:	75 eb                	jne    c001366b <Virt::virtualMemorySetup()+0x20>
c0013680:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013685:	6a 0f                	push   0xf
c0013687:	53                   	push   ebx
c0013688:	83 c3 01             	add    ebx,0x1
c001368b:	e8 80 fd ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013690:	58                   	pop    eax
c0013691:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013697:	5a                   	pop    edx
c0013698:	75 eb                	jne    c0013685 <Virt::virtualMemorySetup()+0x3a>
c001369a:	5b                   	pop    ebx
c001369b:	c3                   	ret    

c001369c <Virt::setupPageSwapping(int)>:
c001369c:	53                   	push   ebx
c001369d:	83 ec 0c             	sub    esp,0xc
c00136a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136a4:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c00136a9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00136af:	8b 10                	mov    edx,DWORD PTR [eax]
c00136b1:	53                   	push   ebx
c00136b2:	c1 e3 0b             	shl    ebx,0xb
c00136b5:	68 ca 49 02 c0       	push   0xc00249ca
c00136ba:	50                   	push   eax
c00136bb:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00136be:	89 1d 50 67 02 c0    	mov    DWORD PTR ds:0xc0026750,ebx
c00136c4:	c6 05 58 67 02 c0 43 	mov    BYTE PTR ds:0xc0026758,0x43
c00136cb:	c1 eb 08             	shr    ebx,0x8
c00136ce:	a3 54 67 02 c0       	mov    ds:0xc0026754,eax
c00136d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136d6:	c7 05 4c 67 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002674c,0x8
c00136e0:	e8 b2 c5 ff ff       	call   c000fc97 <malloc>
c00136e5:	83 c4 0c             	add    esp,0xc
c00136e8:	89 c1                	mov    ecx,eax
c00136ea:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c00136ef:	31 d2                	xor    edx,edx
c00136f1:	a1 50 67 02 c0       	mov    eax,ds:0xc0026750
c00136f6:	f7 35 4c 67 02 c0    	div    DWORD PTR ds:0xc002674c
c00136fc:	c1 e8 05             	shr    eax,0x5
c00136ff:	50                   	push   eax
c0013700:	6a 00                	push   0x0
c0013702:	51                   	push   ecx
c0013703:	e8 e8 cd fe ff       	call   c00004f0 <memset>
c0013708:	83 c4 18             	add    esp,0x18
c001370b:	5b                   	pop    ebx
c001370c:	c3                   	ret    
c001370d:	90                   	nop

c001370e <VAS::setCPUSpecific(unsigned long)>:
c001370e:	c3                   	ret    
c001370f:	90                   	nop

c0013710 <VAS::VAS(VAS*)>:
c0013710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001371b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001371f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013726:	90                   	nop
c0013727:	c3                   	ret    

c0013728 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001372c:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013731:	89 c2                	mov    edx,eax
c0013733:	c1 e8 0a             	shr    eax,0xa
c0013736:	c1 ea 16             	shr    edx,0x16
c0013739:	83 f9 01             	cmp    ecx,0x1
c001373c:	19 c9                	sbb    ecx,ecx
c001373e:	c1 e2 0c             	shl    edx,0xc
c0013741:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013747:	25 fc 0f 00 00       	and    eax,0xffc
c001374c:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013753:	01 d0                	add    eax,edx
c0013755:	c3                   	ret    

c0013756 <VAS::getPageTableEntry(unsigned long)>:
c0013756:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001375a:	89 ca                	mov    edx,ecx
c001375c:	c1 e9 0a             	shr    ecx,0xa
c001375f:	c1 ea 16             	shr    edx,0x16
c0013762:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013768:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001376e:	c1 e0 0c             	shl    eax,0xc
c0013771:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013774:	c3                   	ret    

c0013775 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013775:	55                   	push   ebp
c0013776:	57                   	push   edi
c0013777:	bf 01 00 00 00       	mov    edi,0x1
c001377c:	56                   	push   esi
c001377d:	53                   	push   ebx
c001377e:	83 ec 1c             	sub    esp,0x1c
c0013781:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013785:	c1 ee 0c             	shr    esi,0xc
c0013788:	eb 48                	jmp    c00137d2 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001378a:	83 ec 08             	sub    esp,0x8
c001378d:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c0013792:	55                   	push   ebp
c0013793:	50                   	push   eax
c0013794:	e8 bd ff ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	8b 10                	mov    edx,DWORD PTR [eax]
c001379e:	f6 c6 04             	test   dh,0x4
c00137a1:	75 70                	jne    c0013813 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00137a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137a9:	83 fb 04             	cmp    ebx,0x4
c00137ac:	0f 84 8a 00 00 00    	je     c001383c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00137b2:	83 fb 02             	cmp    ebx,0x2
c00137b5:	0f 84 9a 00 00 00    	je     c0013855 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00137bb:	83 fb 03             	cmp    ebx,0x3
c00137be:	0f 84 be 00 00 00    	je     c0013882 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00137c4:	83 fb 01             	cmp    ebx,0x1
c00137c7:	0f 84 a2 00 00 00    	je     c001386f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00137cd:	83 c6 01             	add    esi,0x1
c00137d0:	31 ff                	xor    edi,edi
c00137d2:	56                   	push   esi
c00137d3:	89 f5                	mov    ebp,esi
c00137d5:	e8 70 fc ff ff       	call   c001344a <Virt::getPageState(unsigned long)>
c00137da:	c1 e5 0c             	shl    ebp,0xc
c00137dd:	0f b6 d8             	movzx  ebx,al
c00137e0:	5a                   	pop    edx
c00137e1:	85 db                	test   ebx,ebx
c00137e3:	75 a5                	jne    c001378a <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00137e5:	83 ec 0c             	sub    esp,0xc
c00137e8:	68 e1 49 02 c0       	push   0xc00249e1
c00137ed:	e8 ec c7 ff ff       	call   c000ffde <KePanic(char const*)>
c00137f2:	5a                   	pop    edx
c00137f3:	59                   	pop    ecx
c00137f4:	55                   	push   ebp
c00137f5:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c00137fb:	55                   	push   ebp
c00137fc:	e8 55 ff ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	8b 10                	mov    edx,DWORD PTR [eax]
c0013806:	f6 c6 04             	test   dh,0x4
c0013809:	75 08                	jne    c0013813 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001380b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013811:	eb ba                	jmp    c00137cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013817:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001381d:	83 ec 0c             	sub    esp,0xc
c0013820:	52                   	push   edx
c0013821:	e8 43 c9 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	83 fb 04             	cmp    ebx,0x4
c001382c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013836:	0f 85 76 ff ff ff    	jne    c00137b2 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001383c:	83 e7 01             	and    edi,0x1
c001383f:	75 46                	jne    c0013887 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013841:	c7 44 24 30 50 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024450
c0013849:	83 c4 1c             	add    esp,0x1c
c001384c:	5b                   	pop    ebx
c001384d:	5e                   	pop    esi
c001384e:	5f                   	pop    edi
c001384f:	5d                   	pop    ebp
c0013850:	e9 89 c7 ff ff       	jmp    c000ffde <KePanic(char const*)>
c0013855:	83 e7 01             	and    edi,0x1
c0013858:	75 15                	jne    c001386f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001385a:	83 ec 0c             	sub    esp,0xc
c001385d:	68 fd 49 02 c0       	push   0xc00249fd
c0013862:	e8 77 c7 ff ff       	call   c000ffde <KePanic(char const*)>
c0013867:	83 c4 10             	add    esp,0x10
c001386a:	e9 5e ff ff ff       	jmp    c00137cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001386f:	83 ec 08             	sub    esp,0x8
c0013872:	6a 00                	push   0x0
c0013874:	56                   	push   esi
c0013875:	e8 96 fb ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	e9 4b ff ff ff       	jmp    c00137cd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013882:	83 e7 01             	and    edi,0x1
c0013885:	75 16                	jne    c001389d <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013887:	83 ec 08             	sub    esp,0x8
c001388a:	6a 00                	push   0x0
c001388c:	56                   	push   esi
c001388d:	e8 7e fb ff ff       	call   c0013410 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	83 c4 1c             	add    esp,0x1c
c0013898:	5b                   	pop    ebx
c0013899:	5e                   	pop    esi
c001389a:	5f                   	pop    edi
c001389b:	5d                   	pop    ebp
c001389c:	c3                   	ret    
c001389d:	c7 44 24 30 19 4a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024a19
c00138a5:	83 c4 1c             	add    esp,0x1c
c00138a8:	5b                   	pop    ebx
c00138a9:	5e                   	pop    esi
c00138aa:	5f                   	pop    edi
c00138ab:	5d                   	pop    ebp
c00138ac:	e9 2d c7 ff ff       	jmp    c000ffde <KePanic(char const*)>
c00138b1:	90                   	nop

c00138b2 <VAS::freeAllocatedPages(unsigned long)>:
c00138b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00138ba:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00138be:	74 09                	je     c00138c9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00138c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00138c4:	e9 ac fe ff ff       	jmp    c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c00138c9:	c7 44 24 04 74 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024474
c00138d1:	e9 8e 36 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00138d6 <VAS::virtualToPhysical(unsigned long)>:
c00138d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138da:	50                   	push   eax
c00138db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00138df:	52                   	push   edx
c00138e0:	e8 71 fe ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c00138e5:	59                   	pop    ecx
c00138e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00138e8:	5a                   	pop    edx
c00138e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138ee:	c3                   	ret    
c00138ef:	90                   	nop

c00138f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00138f0:	55                   	push   ebp
c00138f1:	57                   	push   edi
c00138f2:	56                   	push   esi
c00138f3:	53                   	push   ebx
c00138f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00138fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013900:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013904:	85 db                	test   ebx,ebx
c0013906:	7e 24                	jle    c001392c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013908:	c1 e3 0c             	shl    ebx,0xc
c001390b:	01 f3                	add    ebx,esi
c001390d:	56                   	push   esi
c001390e:	81 c6 00 10 00 00    	add    esi,0x1000
c0013914:	55                   	push   ebp
c0013915:	e8 3c fe ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c001391a:	5a                   	pop    edx
c001391b:	59                   	pop    ecx
c001391c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001391e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013922:	21 f9                	and    ecx,edi
c0013924:	09 d1                	or     ecx,edx
c0013926:	39 f3                	cmp    ebx,esi
c0013928:	89 08                	mov    DWORD PTR [eax],ecx
c001392a:	75 e1                	jne    c001390d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001392c:	5b                   	pop    ebx
c001392d:	5e                   	pop    esi
c001392e:	5f                   	pop    edi
c001392f:	5d                   	pop    ebp
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <VAS::VAS()>:
c0013932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013936:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001393d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013941:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001394c:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c0013951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013955:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001395d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013964:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001396b:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c0013970:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013975:	29 c2                	sub    edx,eax
c0013977:	89 d0                	mov    eax,edx
c0013979:	05 ff 0f 00 00       	add    eax,0xfff
c001397e:	c1 e8 0c             	shr    eax,0xc
c0013981:	89 c2                	mov    edx,eax
c0013983:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013988:	6a 04                	push   0x4
c001398a:	6a ff                	push   0xffffffff
c001398c:	52                   	push   edx
c001398d:	50                   	push   eax
c001398e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013992:	e8 59 ff ff ff       	call   c00138f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013997:	83 c4 14             	add    esp,0x14
c001399a:	90                   	nop
c001399b:	c3                   	ret    

c001399c <VAS::setToWriteCombining(unsigned long, int)>:
c001399c:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c00139a1:	50                   	push   eax
c00139a2:	6a ff                	push   0xffffffff
c00139a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00139a8:	52                   	push   edx
c00139a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00139ad:	51                   	push   ecx
c00139ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139b2:	50                   	push   eax
c00139b3:	e8 38 ff ff ff       	call   c00138f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00139b8:	83 c4 14             	add    esp,0x14
c00139bb:	c3                   	ret    

c00139bc <VAS::mapOtherVASIn(bool, VAS*)>:
c00139bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00139c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00139ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00139cf:	83 f8 01             	cmp    eax,0x1
c00139d2:	19 c0                	sbb    eax,eax
c00139d4:	83 ca 03             	or     edx,0x3
c00139d7:	83 e0 fc             	and    eax,0xfffffffc
c00139da:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00139e1:	0f 20 d8             	mov    eax,cr3
c00139e4:	0f 22 d8             	mov    cr3,eax
c00139e7:	c3                   	ret    

c00139e8 <VAS::~VAS()>:
c00139e8:	83 ec 2c             	sub    esp,0x2c
c00139eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00139f3:	fa                   	cli    
c00139f4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00139f9:	83 c0 01             	add    eax,0x1
c00139fc:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0013a01:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a0b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013a11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a15:	6a 01                	push   0x1
c0013a17:	50                   	push   eax
c0013a18:	e8 9f ff ff ff       	call   c00139bc <VAS::mapOtherVASIn(bool, VAS*)>
c0013a1d:	83 c4 0c             	add    esp,0xc
c0013a20:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013a28:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013a30:	0f 8f d8 00 00 00    	jg     c0013b0e <VAS::~VAS()+0x126>
c0013a36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a41:	c1 e2 02             	shl    edx,0x2
c0013a44:	01 d0                	add    eax,edx
c0013a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a50:	83 e0 01             	and    eax,0x1
c0013a53:	0f 84 ab 00 00 00    	je     c0013b04 <VAS::~VAS()+0x11c>
c0013a59:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013a61:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013a69:	7f 74                	jg     c0013adf <VAS::~VAS()+0xf7>
c0013a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a6f:	c1 e0 0a             	shl    eax,0xa
c0013a72:	89 c2                	mov    edx,eax
c0013a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a78:	01 d0                	add    eax,edx
c0013a7a:	c1 e0 0c             	shl    eax,0xc
c0013a7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a81:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a8b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013a91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013a95:	6a 01                	push   0x1
c0013a97:	50                   	push   eax
c0013a98:	e8 8b fc ff ff       	call   c0013728 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013a9d:	83 c4 0c             	add    esp,0xc
c0013aa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ab2:	25 01 04 00 00       	and    eax,0x401
c0013ab7:	3d 01 04 00 00       	cmp    eax,0x401
c0013abc:	75 1a                	jne    c0013ad8 <VAS::~VAS()+0xf0>
c0013abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ac7:	83 ec 0c             	sub    esp,0xc
c0013aca:	50                   	push   eax
c0013acb:	e8 99 c6 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013ad8:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013add:	eb 82                	jmp    c0013a61 <VAS::~VAS()+0x79>
c0013adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae3:	25 00 04 00 00       	and    eax,0x400
c0013ae8:	74 1a                	je     c0013b04 <VAS::~VAS()+0x11c>
c0013aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013af3:	83 ec 0c             	sub    esp,0xc
c0013af6:	50                   	push   eax
c0013af7:	e8 6d c6 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b04:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b09:	e9 1a ff ff ff       	jmp    c0013a28 <VAS::~VAS()+0x40>
c0013b0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b15:	83 ec 0c             	sub    esp,0xc
c0013b18:	50                   	push   eax
c0013b19:	e8 57 fc ff ff       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	50                   	push   eax
c0013b2c:	e8 38 c6 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013b31:	83 c4 10             	add    esp,0x10
c0013b34:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b39:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0013b41:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013b46:	85 c0                	test   eax,eax
c0013b48:	75 01                	jne    c0013b4b <VAS::~VAS()+0x163>
c0013b4a:	fb                   	sti    
c0013b4b:	90                   	nop
c0013b4c:	83 c4 2c             	add    esp,0x2c
c0013b4f:	c3                   	ret    

c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013b50:	55                   	push   ebp
c0013b51:	57                   	push   edi
c0013b52:	56                   	push   esi
c0013b53:	53                   	push   ebx
c0013b54:	83 ec 1c             	sub    esp,0x1c
c0013b57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013b5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013b5f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013b65:	77 08                	ja     c0013b6f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013b67:	0f 20 d8             	mov    eax,cr3
c0013b6a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013b6d:	75 49                	jne    c0013bb8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013b6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b73:	09 d8                	or     eax,ebx
c0013b75:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b7a:	75 59                	jne    c0013bd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013b7c:	89 de                	mov    esi,ebx
c0013b7e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b81:	c1 ee 16             	shr    esi,0x16
c0013b84:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013b8b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013b8f:	74 56                	je     c0013be7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013b91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013b95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b99:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013b9f:	c1 eb 0a             	shr    ebx,0xa
c0013ba2:	c1 e6 0c             	shl    esi,0xc
c0013ba5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013bab:	09 d0                	or     eax,edx
c0013bad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013bb0:	83 c4 1c             	add    esp,0x1c
c0013bb3:	5b                   	pop    ebx
c0013bb4:	5e                   	pop    esi
c0013bb5:	5f                   	pop    edi
c0013bb6:	5d                   	pop    ebp
c0013bb7:	c3                   	ret    
c0013bb8:	83 ec 0c             	sub    esp,0xc
c0013bbb:	68 98 44 02 c0       	push   0xc0024498
c0013bc0:	e8 9f 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bcc:	09 d8                	or     eax,ebx
c0013bce:	a9 ff 0f 00 00       	test   eax,0xfff
c0013bd3:	74 a7                	je     c0013b7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	68 00 45 02 c0       	push   0xc0024500
c0013bdd:	e8 fc c3 ff ff       	call   c000ffde <KePanic(char const*)>
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	eb 95                	jmp    c0013b7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013be7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013beb:	e8 e2 c5 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	89 c5                	mov    ebp,eax
c0013bf5:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013bfb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013bff:	6a 01                	push   0x1
c0013c01:	e8 67 f8 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0013c06:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c0d:	6a 01                	push   0x1
c0013c0f:	50                   	push   eax
c0013c10:	55                   	push   ebp
c0013c11:	81 cd 07 04 00 00    	or     ebp,0x407
c0013c17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c1b:	51                   	push   ecx
c0013c1c:	e8 19 01 00 00       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c21:	83 c4 1c             	add    esp,0x1c
c0013c24:	68 00 10 00 00       	push   0x1000
c0013c29:	6a 00                	push   0x0
c0013c2b:	50                   	push   eax
c0013c2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c30:	e8 bb c8 fe ff       	call   c00004f0 <memset>
c0013c35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c39:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c3c:	e8 34 fb ff ff       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c48:	83 c4 10             	add    esp,0x10
c0013c4b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013c4e:	e9 3e ff ff ff       	jmp    c0013b91 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013c53:	90                   	nop

c0013c54 <VAS::allocatePages(int, int)>:
c0013c54:	55                   	push   ebp
c0013c55:	57                   	push   edi
c0013c56:	56                   	push   esi
c0013c57:	53                   	push   ebx
c0013c58:	83 ec 1c             	sub    esp,0x1c
c0013c5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013c63:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013c67:	75 71                	jne    c0013cda <VAS::allocatePages(int, int)+0x86>
c0013c69:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c70:	85 c0                	test   eax,eax
c0013c72:	74 4d                	je     c0013cc1 <VAS::allocatePages(int, int)+0x6d>
c0013c74:	89 dd                	mov    ebp,ebx
c0013c76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c7a:	c1 e5 0c             	shl    ebp,0xc
c0013c7d:	01 c5                	add    ebp,eax
c0013c7f:	85 db                	test   ebx,ebx
c0013c81:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013c84:	7e 29                	jle    c0013caf <VAS::allocatePages(int, int)+0x5b>
c0013c86:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c8e:	81 cf 00 04 00 00    	or     edi,0x400
c0013c94:	e8 39 c5 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013c99:	57                   	push   edi
c0013c9a:	53                   	push   ebx
c0013c9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ca1:	50                   	push   eax
c0013ca2:	56                   	push   esi
c0013ca3:	e8 a8 fe ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	39 dd                	cmp    ebp,ebx
c0013cad:	75 e5                	jne    c0013c94 <VAS::allocatePages(int, int)+0x40>
c0013caf:	0f 20 d8             	mov    eax,cr3
c0013cb2:	0f 22 d8             	mov    cr3,eax
c0013cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cb9:	83 c4 1c             	add    esp,0x1c
c0013cbc:	5b                   	pop    ebx
c0013cbd:	5e                   	pop    esi
c0013cbe:	5f                   	pop    edi
c0013cbf:	5d                   	pop    ebp
c0013cc0:	c3                   	ret    
c0013cc1:	83 ec 0c             	sub    esp,0xc
c0013cc4:	68 24 45 02 c0       	push   0xc0024524
c0013cc9:	e8 10 c3 ff ff       	call   c000ffde <KePanic(char const*)>
c0013cce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	eb 9a                	jmp    c0013c74 <VAS::allocatePages(int, int)+0x20>
c0013cda:	83 ec 0c             	sub    esp,0xc
c0013cdd:	53                   	push   ebx
c0013cde:	e8 8a f7 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0013ce3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013cef:	77 37                	ja     c0013d28 <VAS::allocatePages(int, int)+0xd4>
c0013cf1:	85 db                	test   ebx,ebx
c0013cf3:	7e ba                	jle    c0013caf <VAS::allocatePages(int, int)+0x5b>
c0013cf5:	c1 e3 0c             	shl    ebx,0xc
c0013cf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cfc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d00:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013d03:	81 cf 00 04 00 00    	or     edi,0x400
c0013d09:	89 c3                	mov    ebx,eax
c0013d0b:	e8 c2 c4 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013d10:	57                   	push   edi
c0013d11:	53                   	push   ebx
c0013d12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d18:	50                   	push   eax
c0013d19:	56                   	push   esi
c0013d1a:	e8 31 fe ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	39 dd                	cmp    ebp,ebx
c0013d24:	75 e5                	jne    c0013d0b <VAS::allocatePages(int, int)+0xb7>
c0013d26:	eb 87                	jmp    c0013caf <VAS::allocatePages(int, int)+0x5b>
c0013d28:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d2c:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013d31:	09 c2                	or     edx,eax
c0013d33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013d37:	eb b8                	jmp    c0013cf1 <VAS::allocatePages(int, int)+0x9d>
c0013d39:	90                   	nop

c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013d3a:	55                   	push   ebp
c0013d3b:	57                   	push   edi
c0013d3c:	56                   	push   esi
c0013d3d:	53                   	push   ebx
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013d45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013d49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013d4d:	85 db                	test   ebx,ebx
c0013d4f:	7e 2f                	jle    c0013d80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013d51:	c1 e3 0c             	shl    ebx,0xc
c0013d54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013d58:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013d5c:	01 d3                	add    ebx,edx
c0013d5e:	55                   	push   ebp
c0013d5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d67:	29 c2                	sub    edx,eax
c0013d69:	01 f2                	add    edx,esi
c0013d6b:	52                   	push   edx
c0013d6c:	56                   	push   esi
c0013d6d:	81 c6 00 10 00 00    	add    esi,0x1000
c0013d73:	57                   	push   edi
c0013d74:	e8 d7 fd ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	39 de                	cmp    esi,ebx
c0013d7e:	75 de                	jne    c0013d5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013d80:	0f 20 d8             	mov    eax,cr3
c0013d83:	0f 22 d8             	mov    cr3,eax
c0013d86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d8a:	83 c4 0c             	add    esp,0xc
c0013d8d:	5b                   	pop    ebx
c0013d8e:	5e                   	pop    esi
c0013d8f:	5f                   	pop    edi
c0013d90:	5d                   	pop    ebp
c0013d91:	c3                   	ret    

c0013d92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013d92:	55                   	push   ebp
c0013d93:	57                   	push   edi
c0013d94:	56                   	push   esi
c0013d95:	53                   	push   ebx
c0013d96:	83 ec 1c             	sub    esp,0x1c
c0013d99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013d9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013da1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013da5:	09 f8                	or     eax,edi
c0013da7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013dab:	a9 ff 0f 00 00       	test   eax,0xfff
c0013db0:	75 4f                	jne    c0013e01 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013db2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013db6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013db9:	c1 eb 16             	shr    ebx,0x16
c0013dbc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013dc3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013dc7:	74 52                	je     c0013e1b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013dc9:	0f b6 f2             	movzx  esi,dl
c0013dcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013dd0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013dd4:	c1 e8 0a             	shr    eax,0xa
c0013dd7:	83 fe 01             	cmp    esi,0x1
c0013dda:	19 d2                	sbb    edx,edx
c0013ddc:	c1 e3 0c             	shl    ebx,0xc
c0013ddf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013de5:	25 fc 0f 00 00       	and    eax,0xffc
c0013dea:	01 d8                	add    eax,ebx
c0013dec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013df0:	09 d9                	or     ecx,ebx
c0013df2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013df9:	83 c4 1c             	add    esp,0x1c
c0013dfc:	5b                   	pop    ebx
c0013dfd:	5e                   	pop    esi
c0013dfe:	5f                   	pop    edi
c0013dff:	5d                   	pop    ebp
c0013e00:	c3                   	ret    
c0013e01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013e05:	83 ec 0c             	sub    esp,0xc
c0013e08:	68 50 45 02 c0       	push   0xc0024550
c0013e0d:	e8 cc c1 ff ff       	call   c000ffde <KePanic(char const*)>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e19:	eb 97                	jmp    c0013db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013e1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013e1f:	e8 ae c3 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	89 c5                	mov    ebp,eax
c0013e29:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013e2f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013e33:	6a 01                	push   0x1
c0013e35:	e8 33 f6 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0013e3a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013e41:	6a 01                	push   0x1
c0013e43:	50                   	push   eax
c0013e44:	55                   	push   ebp
c0013e45:	81 cd 07 04 00 00    	or     ebp,0x407
c0013e4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013e4f:	51                   	push   ecx
c0013e50:	e8 e5 fe ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e55:	83 c4 1c             	add    esp,0x1c
c0013e58:	68 00 10 00 00       	push   0x1000
c0013e5d:	6a 00                	push   0x0
c0013e5f:	50                   	push   eax
c0013e60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e64:	e8 87 c6 fe ff       	call   c00004f0 <memset>
c0013e69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013e6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013e70:	e8 00 f9 ff ff       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c0013e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013e78:	83 c4 10             	add    esp,0x10
c0013e7b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013e7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e82:	e9 42 ff ff ff       	jmp    c0013dc9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013e87:	90                   	nop

c0013e88 <VAS::VAS(bool)>:
c0013e88:	53                   	push   ebx
c0013e89:	83 ec 28             	sub    esp,0x28
c0013e8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013e94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ea3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013eaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eae:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013eb2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013eb5:	e8 18 c3 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013eba:	89 c2                	mov    edx,eax
c0013ebc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ec0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013ec3:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013ec9:	83 ec 0c             	sub    esp,0xc
c0013ecc:	6a 01                	push   0x1
c0013ece:	e8 9a f5 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	89 c2                	mov    edx,eax
c0013ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013edc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	6a 03                	push   0x3
c0013ee4:	6a 01                	push   0x1
c0013ee6:	52                   	push   edx
c0013ee7:	50                   	push   eax
c0013ee8:	53                   	push   ebx
c0013ee9:	e8 4c fe ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013eee:	83 c4 20             	add    esp,0x20
c0013ef1:	89 c2                	mov    edx,eax
c0013ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013efa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f02:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013f0a:	7f 1d                	jg     c0013f29 <VAS::VAS(bool)+0xa1>
c0013f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f17:	c1 e2 02             	shl    edx,0x2
c0013f1a:	01 d0                	add    eax,edx
c0013f1c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013f22:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013f27:	eb d9                	jmp    c0013f02 <VAS::VAS(bool)+0x7a>
c0013f29:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013f31:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013f39:	7f 59                	jg     c0013f94 <VAS::VAS(bool)+0x10c>
c0013f3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f3f:	2d 00 02 00 00       	sub    eax,0x200
c0013f44:	c1 e0 0c             	shl    eax,0xc
c0013f47:	89 c2                	mov    edx,eax
c0013f49:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013f4e:	89 d1                	mov    ecx,edx
c0013f50:	09 c1                	or     ecx,eax
c0013f52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f5d:	c1 e2 02             	shl    edx,0x2
c0013f60:	01 d0                	add    eax,edx
c0013f62:	83 c9 05             	or     ecx,0x5
c0013f65:	89 ca                	mov    edx,ecx
c0013f67:	89 10                	mov    DWORD PTR [eax],edx
c0013f69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f6d:	2d 40 03 00 00       	sub    eax,0x340
c0013f72:	83 f8 7f             	cmp    eax,0x7f
c0013f75:	77 16                	ja     c0013f8d <VAS::VAS(bool)+0x105>
c0013f77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f82:	c1 e2 02             	shl    edx,0x2
c0013f85:	01 d0                	add    eax,edx
c0013f87:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013f8d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013f92:	eb 9d                	jmp    c0013f31 <VAS::VAS(bool)+0xa9>
c0013f94:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013f9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fa1:	05 20 0c 00 00       	add    eax,0xc20
c0013fa6:	81 ca 03 40 00 00    	or     edx,0x4003
c0013fac:	89 10                	mov    DWORD PTR [eax],edx
c0013fae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fb2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013fb5:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013fba:	09 c2                	or     edx,eax
c0013fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fc3:	05 fc 0f 00 00       	add    eax,0xffc
c0013fc8:	83 ca 03             	or     edx,0x3
c0013fcb:	89 10                	mov    DWORD PTR [eax],edx
c0013fcd:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013fd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	50                   	push   eax
c0013fdc:	e8 79 5c ff ff       	call   c0009c5a <Device::getName()>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	83 ec 08             	sub    esp,0x8
c0013fe7:	68 33 4a 02 c0       	push   0xc0024a33
c0013fec:	50                   	push   eax
c0013fed:	e8 5e c7 fe ff       	call   c0000750 <strcmp>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	85 c0                	test   eax,eax
c0013ff7:	0f 94 c0             	sete   al
c0013ffa:	0f b6 c0             	movzx  eax,al
c0013ffd:	85 c0                	test   eax,eax
c0013fff:	74 68                	je     c0014069 <VAS::VAS(bool)+0x1e1>
c0014001:	fa                   	cli    
c0014002:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014007:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001400d:	05 68 09 00 00       	add    eax,0x968
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	50                   	push   eax
c0014016:	e8 6f af ff ff       	call   c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014023:	89 c3                	mov    ebx,eax
c0014025:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001402a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014030:	05 68 09 00 00       	add    eax,0x968
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	50                   	push   eax
c0014039:	e8 4c af ff ff       	call   c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001403e:	83 c4 10             	add    esp,0x10
c0014041:	83 ec 08             	sub    esp,0x8
c0014044:	50                   	push   eax
c0014045:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014049:	e8 08 f7 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	8b 00                	mov    eax,DWORD PTR [eax]
c0014053:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014058:	6a 11                	push   0x11
c001405a:	53                   	push   ebx
c001405b:	50                   	push   eax
c001405c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014060:	e8 eb fa ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	fb                   	sti    
c0014069:	90                   	nop
c001406a:	83 c4 28             	add    esp,0x28
c001406d:	5b                   	pop    ebx
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <VAS::evict(unsigned long)>:
c0014070:	55                   	push   ebp
c0014071:	57                   	push   edi
c0014072:	56                   	push   esi
c0014073:	53                   	push   ebx
c0014074:	83 ec 24             	sub    esp,0x24
c0014077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001407b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001407f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014083:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014088:	50                   	push   eax
c0014089:	68 41 4a 02 c0       	push   0xc0024a41
c001408e:	e8 d1 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014093:	e8 33 f5 ff ff       	call   c00135cb <Virt::allocateSwapfilePage()>
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	89 c7                	mov    edi,eax
c001409d:	a1 4c 67 02 c0       	mov    eax,ds:0xc002674c
c00140a2:	85 c0                	test   eax,eax
c00140a4:	7e 40                	jle    c00140e6 <VAS::evict(unsigned long)+0x76>
c00140a6:	89 ee                	mov    esi,ebp
c00140a8:	31 db                	xor    ebx,ebx
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	57                   	push   edi
c00140ae:	e8 02 f5 ff ff       	call   c00135b5 <Virt::swapIDToSector(unsigned long)>
c00140b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00140b6:	01 d8                	add    eax,ebx
c00140b8:	6a 01                	push   0x1
c00140ba:	31 d2                	xor    edx,edx
c00140bc:	83 c3 01             	add    ebx,0x1
c00140bf:	52                   	push   edx
c00140c0:	81 c6 00 02 00 00    	add    esi,0x200
c00140c6:	50                   	push   eax
c00140c7:	0f be 05 58 67 02 c0 	movsx  eax,BYTE PTR ds:0xc0026758
c00140ce:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00140d5:	50                   	push   eax
c00140d6:	e8 e1 69 ff ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c00140db:	83 c4 20             	add    esp,0x20
c00140de:	39 1d 4c 67 02 c0    	cmp    DWORD PTR ds:0xc002674c,ebx
c00140e4:	7f c4                	jg     c00140aa <VAS::evict(unsigned long)+0x3a>
c00140e6:	83 ec 08             	sub    esp,0x8
c00140e9:	c1 e7 0c             	shl    edi,0xc
c00140ec:	55                   	push   ebp
c00140ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f1:	50                   	push   eax
c00140f2:	e8 5f f6 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c00140f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00140f9:	89 d3                	mov    ebx,edx
c00140fb:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014101:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014107:	09 d7                	or     edi,edx
c0014109:	89 38                	mov    DWORD PTR [eax],edi
c001410b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001410e:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0014114:	83 c2 01             	add    edx,0x1
c0014117:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c001411d:	e8 47 c0 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0014122:	0f 20 d8             	mov    eax,cr3
c0014125:	0f 22 d8             	mov    cr3,eax
c0014128:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c001412e:	51                   	push   ecx
c001412f:	55                   	push   ebp
c0014130:	53                   	push   ebx
c0014131:	68 74 45 02 c0       	push   0xc0024574
c0014136:	e8 29 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001413b:	83 c4 18             	add    esp,0x18
c001413e:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c0014143:	50                   	push   eax
c0014144:	8d 50 01             	lea    edx,[eax+0x1]
c0014147:	68 56 4a 02 c0       	push   0xc0024a56
c001414c:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c0014152:	e8 0d 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014157:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001415c:	c7 44 24 40 68 4a 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024a68
c0014164:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014168:	83 c4 2c             	add    esp,0x2c
c001416b:	5b                   	pop    ebx
c001416c:	5e                   	pop    esi
c001416d:	5f                   	pop    edi
c001416e:	5d                   	pop    ebp
c001416f:	e9 f0 2d ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0014174 <VAS::canLockPage(unsigned long)>:
c0014174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014178:	50                   	push   eax
c0014179:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001417d:	52                   	push   edx
c001417e:	e8 d3 f5 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c0014183:	59                   	pop    ecx
c0014184:	8b 00                	mov    eax,DWORD PTR [eax]
c0014186:	5a                   	pop    edx
c0014187:	c1 e8 0b             	shr    eax,0xb
c001418a:	83 e0 01             	and    eax,0x1
c001418d:	c3                   	ret    

c001418e <VAS::unlockPage(unsigned long)>:
c001418e:	83 ec 0c             	sub    esp,0xc
c0014191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014195:	50                   	push   eax
c0014196:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001419a:	52                   	push   edx
c001419b:	e8 b6 f5 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c00141a0:	59                   	pop    ecx
c00141a1:	5a                   	pop    edx
c00141a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00141a4:	f6 c6 08             	test   dh,0x8
c00141a7:	75 09                	jne    c00141b2 <VAS::unlockPage(unsigned long)+0x24>
c00141a9:	80 ce 08             	or     dh,0x8
c00141ac:	89 10                	mov    DWORD PTR [eax],edx
c00141ae:	83 c4 0c             	add    esp,0xc
c00141b1:	c3                   	ret    
c00141b2:	c7 44 24 10 a8 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc00245a8
c00141ba:	83 c4 0c             	add    esp,0xc
c00141bd:	e9 1c be ff ff       	jmp    c000ffde <KePanic(char const*)>

c00141c2 <VAS::canLockPages(unsigned long, int)>:
c00141c2:	55                   	push   ebp
c00141c3:	57                   	push   edi
c00141c4:	56                   	push   esi
c00141c5:	53                   	push   ebx
c00141c6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141ca:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00141ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141d2:	85 ff                	test   edi,edi
c00141d4:	7e 23                	jle    c00141f9 <VAS::canLockPages(unsigned long, int)+0x37>
c00141d6:	31 f6                	xor    esi,esi
c00141d8:	eb 0d                	jmp    c00141e7 <VAS::canLockPages(unsigned long, int)+0x25>
c00141da:	81 c3 00 10 00 00    	add    ebx,0x1000
c00141e0:	83 c6 01             	add    esi,0x1
c00141e3:	39 f7                	cmp    edi,esi
c00141e5:	74 0d                	je     c00141f4 <VAS::canLockPages(unsigned long, int)+0x32>
c00141e7:	53                   	push   ebx
c00141e8:	55                   	push   ebp
c00141e9:	e8 86 ff ff ff       	call   c0014174 <VAS::canLockPage(unsigned long)>
c00141ee:	5a                   	pop    edx
c00141ef:	84 c0                	test   al,al
c00141f1:	59                   	pop    ecx
c00141f2:	75 e6                	jne    c00141da <VAS::canLockPages(unsigned long, int)+0x18>
c00141f4:	5b                   	pop    ebx
c00141f5:	5e                   	pop    esi
c00141f6:	5f                   	pop    edi
c00141f7:	5d                   	pop    ebp
c00141f8:	c3                   	ret    
c00141f9:	b0 01                	mov    al,0x1
c00141fb:	eb f7                	jmp    c00141f4 <VAS::canLockPages(unsigned long, int)+0x32>
c00141fd:	90                   	nop

c00141fe <VAS::unlockPages(unsigned long, int)>:
c00141fe:	55                   	push   ebp
c00141ff:	57                   	push   edi
c0014200:	56                   	push   esi
c0014201:	53                   	push   ebx
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014209:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001420d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014211:	85 ff                	test   edi,edi
c0014213:	7e 1c                	jle    c0014231 <VAS::unlockPages(unsigned long, int)+0x33>
c0014215:	31 f6                	xor    esi,esi
c0014217:	83 ec 08             	sub    esp,0x8
c001421a:	83 c6 01             	add    esi,0x1
c001421d:	53                   	push   ebx
c001421e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014224:	55                   	push   ebp
c0014225:	e8 64 ff ff ff       	call   c001418e <VAS::unlockPage(unsigned long)>
c001422a:	83 c4 10             	add    esp,0x10
c001422d:	39 f7                	cmp    edi,esi
c001422f:	75 e6                	jne    c0014217 <VAS::unlockPages(unsigned long, int)+0x19>
c0014231:	83 c4 0c             	add    esp,0xc
c0014234:	5b                   	pop    ebx
c0014235:	5e                   	pop    esi
c0014236:	5f                   	pop    edi
c0014237:	5d                   	pop    ebp
c0014238:	c3                   	ret    
c0014239:	90                   	nop

c001423a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001423a:	55                   	push   ebp
c001423b:	57                   	push   edi
c001423c:	56                   	push   esi
c001423d:	53                   	push   ebx
c001423e:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014244:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c001424b:	89 f3                	mov    ebx,esi
c001424d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014253:	53                   	push   ebx
c0014254:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c001425b:	50                   	push   eax
c001425c:	e8 f5 f4 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c0014261:	5a                   	pop    edx
c0014262:	89 c5                	mov    ebp,eax
c0014264:	59                   	pop    ecx
c0014265:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c001426b:	0f 87 cb 00 00 00    	ja     c001433c <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0014271:	83 ec 08             	sub    esp,0x8
c0014274:	56                   	push   esi
c0014275:	68 d8 45 02 c0       	push   0xc00245d8
c001427a:	e8 e5 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001427f:	5e                   	pop    esi
c0014280:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014285:	5f                   	pop    edi
c0014286:	50                   	push   eax
c0014287:	68 08 46 02 c0       	push   0xc0024608
c001428c:	e8 d3 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014291:	58                   	pop    eax
c0014292:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014298:	5a                   	pop    edx
c0014299:	51                   	push   ecx
c001429a:	68 2c 46 02 c0       	push   0xc002462c
c001429f:	e8 c0 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	85 db                	test   ebx,ebx
c00142a9:	74 5b                	je     c0014306 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00142ab:	85 ed                	test   ebp,ebp
c00142ad:	74 21                	je     c00142d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00142af:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00142b2:	f7 c6 00 02 00 00    	test   esi,0x200
c00142b8:	0f 85 c5 00 00 00    	jne    c0014383 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00142be:	89 f0                	mov    eax,esi
c00142c0:	25 01 04 00 00       	and    eax,0x401
c00142c5:	3d 00 04 00 00       	cmp    eax,0x400
c00142ca:	0f 84 39 01 00 00    	je     c0014409 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00142d0:	83 ec 08             	sub    esp,0x8
c00142d3:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00142d8:	50                   	push   eax
c00142d9:	68 20 48 02 c0       	push   0xc0024820
c00142de:	e8 81 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142e3:	5a                   	pop    edx
c00142e4:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c00142ea:	59                   	pop    ecx
c00142eb:	53                   	push   ebx
c00142ec:	68 44 48 02 c0       	push   0xc0024844
c00142f1:	e8 6e 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142f6:	83 c4 10             	add    esp,0x10
c00142f9:	31 c0                	xor    eax,eax
c00142fb:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014301:	5b                   	pop    ebx
c0014302:	5e                   	pop    esi
c0014303:	5f                   	pop    edi
c0014304:	5d                   	pop    ebp
c0014305:	c3                   	ret    
c0014306:	83 ec 08             	sub    esp,0x8
c0014309:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001430e:	50                   	push   eax
c001430f:	68 50 46 02 c0       	push   0xc0024650
c0014314:	e8 4b 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014319:	58                   	pop    eax
c001431a:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014320:	5a                   	pop    edx
c0014321:	51                   	push   ecx
c0014322:	68 74 46 02 c0       	push   0xc0024674
c0014327:	e8 38 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001432c:	83 c4 10             	add    esp,0x10
c001432f:	31 c0                	xor    eax,eax
c0014331:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014337:	5b                   	pop    ebx
c0014338:	5e                   	pop    esi
c0014339:	5f                   	pop    edi
c001433a:	5d                   	pop    ebp
c001433b:	c3                   	ret    
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	68 7d 4a 02 c0       	push   0xc0024a7d
c0014344:	e8 95 bc ff ff       	call   c000ffde <KePanic(char const*)>
c0014349:	5f                   	pop    edi
c001434a:	58                   	pop    eax
c001434b:	56                   	push   esi
c001434c:	68 d8 45 02 c0       	push   0xc00245d8
c0014351:	e8 0e 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014356:	58                   	pop    eax
c0014357:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c001435d:	5a                   	pop    edx
c001435e:	51                   	push   ecx
c001435f:	68 08 46 02 c0       	push   0xc0024608
c0014364:	e8 fb 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014369:	5e                   	pop    esi
c001436a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001436f:	5f                   	pop    edi
c0014370:	50                   	push   eax
c0014371:	68 2c 46 02 c0       	push   0xc002462c
c0014376:	e8 e9 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001437b:	83 c4 10             	add    esp,0x10
c001437e:	e9 28 ff ff ff       	jmp    c00142ab <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0014383:	83 ec 0c             	sub    esp,0xc
c0014386:	68 98 46 02 c0       	push   0xc0024698
c001438b:	e8 d4 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014390:	e8 3d be ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014395:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014398:	83 ca 01             	or     edx,0x1
c001439b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001439e:	0f 20 da             	mov    edx,cr3
c00143a1:	0f 22 da             	mov    cr3,edx
c00143a4:	ba 00 10 00 00       	mov    edx,0x1000
c00143a9:	89 de                	mov    esi,ebx
c00143ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00143af:	89 d1                	mov    ecx,edx
c00143b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00143b6:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00143bc:	09 c8                	or     eax,ecx
c00143be:	83 c8 02             	or     eax,0x2
c00143c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00143c4:	0f 20 d8             	mov    eax,cr3
c00143c7:	0f 22 d8             	mov    cr3,eax
c00143ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c00143ce:	89 df                	mov    edi,ebx
c00143d0:	89 d1                	mov    ecx,edx
c00143d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143d4:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c00143da:	59                   	pop    ecx
c00143db:	5b                   	pop    ebx
c00143dc:	56                   	push   esi
c00143dd:	68 b8 46 02 c0       	push   0xc00246b8
c00143e2:	e8 7d 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143e7:	5f                   	pop    edi
c00143e8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143ed:	5d                   	pop    ebp
c00143ee:	50                   	push   eax
c00143ef:	68 dc 46 02 c0       	push   0xc00246dc
c00143f4:	e8 6b 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	b0 01                	mov    al,0x1
c00143fe:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014404:	5b                   	pop    ebx
c0014405:	5e                   	pop    esi
c0014406:	5f                   	pop    edi
c0014407:	5d                   	pop    ebp
c0014408:	c3                   	ret    
c0014409:	83 ec 08             	sub    esp,0x8
c001440c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014411:	c1 ee 0c             	shr    esi,0xc
c0014414:	50                   	push   eax
c0014415:	68 00 47 02 c0       	push   0xc0024700
c001441a:	e8 45 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001441f:	e8 ae bd ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014424:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001442a:	89 c7                	mov    edi,eax
c001442c:	58                   	pop    eax
c001442d:	5a                   	pop    edx
c001442e:	51                   	push   ecx
c001442f:	68 24 47 02 c0       	push   0xc0024724
c0014434:	e8 2b 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014439:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001443c:	83 c4 10             	add    esp,0x10
c001443f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014445:	09 fa                	or     edx,edi
c0014447:	81 ca 01 08 00 00    	or     edx,0x801
c001444d:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014450:	8b 3d 4c 67 02 c0    	mov    edi,DWORD PTR ds:0xc002674c
c0014456:	85 ff                	test   edi,edi
c0014458:	7e 65                	jle    c00144bf <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c001445a:	89 dd                	mov    ebp,ebx
c001445c:	31 ff                	xor    edi,edi
c001445e:	83 ec 08             	sub    esp,0x8
c0014461:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014466:	50                   	push   eax
c0014467:	68 d8 47 02 c0       	push   0xc00247d8
c001446c:	e8 f3 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014471:	89 34 24             	mov    DWORD PTR [esp],esi
c0014474:	e8 3c f1 ff ff       	call   c00135b5 <Virt::swapIDToSector(unsigned long)>
c0014479:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001447c:	01 f8                	add    eax,edi
c001447e:	6a 01                	push   0x1
c0014480:	31 d2                	xor    edx,edx
c0014482:	83 c7 01             	add    edi,0x1
c0014485:	52                   	push   edx
c0014486:	81 c5 00 02 00 00    	add    ebp,0x200
c001448c:	50                   	push   eax
c001448d:	0f be 05 58 67 02 c0 	movsx  eax,BYTE PTR ds:0xc0026758
c0014494:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001449b:	50                   	push   eax
c001449c:	e8 af 65 ff ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c00144a1:	83 c4 18             	add    esp,0x18
c00144a4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144a9:	50                   	push   eax
c00144aa:	68 fc 47 02 c0       	push   0xc00247fc
c00144af:	e8 b0 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144b4:	83 c4 10             	add    esp,0x10
c00144b7:	39 3d 4c 67 02 c0    	cmp    DWORD PTR ds:0xc002674c,edi
c00144bd:	7f 9f                	jg     c001445e <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144c7:	50                   	push   eax
c00144c8:	68 48 47 02 c0       	push   0xc0024748
c00144cd:	e8 92 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144d2:	83 c4 0c             	add    esp,0xc
c00144d5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00144da:	83 e8 01             	sub    eax,0x1
c00144dd:	50                   	push   eax
c00144de:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c00144e3:	53                   	push   ebx
c00144e4:	68 8f 4a 02 c0       	push   0xc0024a8f
c00144e9:	e8 76 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00144f1:	e8 9c f0 ff ff       	call   c0013592 <Virt::freeSwapfilePage(unsigned long)>
c00144f6:	58                   	pop    eax
c00144f7:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00144fd:	5a                   	pop    edx
c00144fe:	51                   	push   ecx
c00144ff:	68 6c 47 02 c0       	push   0xc002476c
c0014504:	e8 5b 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014509:	0f 20 d8             	mov    eax,cr3
c001450c:	0f 22 d8             	mov    cr3,eax
c001450f:	c7 04 24 a4 4a 02 c0 	mov    DWORD PTR [esp],0xc0024aa4
c0014516:	e8 49 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001451b:	5b                   	pop    ebx
c001451c:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c0014522:	5e                   	pop    esi
c0014523:	57                   	push   edi
c0014524:	68 90 47 02 c0       	push   0xc0024790
c0014529:	e8 36 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001452e:	5d                   	pop    ebp
c001452f:	58                   	pop    eax
c0014530:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014535:	50                   	push   eax
c0014536:	68 b4 47 02 c0       	push   0xc00247b4
c001453b:	e8 24 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	b0 01                	mov    al,0x1
c0014545:	e9 b1 fd ff ff       	jmp    c00142fb <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c001454a <VAS::lockPage(unsigned long)>:
c001454a:	56                   	push   esi
c001454b:	53                   	push   ebx
c001454c:	83 ec 04             	sub    esp,0x4
c001454f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014553:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014557:	50                   	push   eax
c0014558:	56                   	push   esi
c0014559:	e8 f8 f1 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c001455e:	5a                   	pop    edx
c001455f:	89 c3                	mov    ebx,eax
c0014561:	59                   	pop    ecx
c0014562:	8b 00                	mov    eax,DWORD PTR [eax]
c0014564:	a8 01                	test   al,0x1
c0014566:	74 10                	je     c0014578 <VAS::lockPage(unsigned long)+0x2e>
c0014568:	f6 c4 08             	test   ah,0x8
c001456b:	74 28                	je     c0014595 <VAS::lockPage(unsigned long)+0x4b>
c001456d:	80 e4 f7             	and    ah,0xf7
c0014570:	89 03                	mov    DWORD PTR [ebx],eax
c0014572:	83 c4 04             	add    esp,0x4
c0014575:	5b                   	pop    ebx
c0014576:	5e                   	pop    esi
c0014577:	c3                   	ret    
c0014578:	83 ec 08             	sub    esp,0x8
c001457b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014580:	50                   	push   eax
c0014581:	56                   	push   esi
c0014582:	e8 b3 fc ff ff       	call   c001423a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014587:	83 c4 10             	add    esp,0x10
c001458a:	84 c0                	test   al,al
c001458c:	74 19                	je     c00145a7 <VAS::lockPage(unsigned long)+0x5d>
c001458e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014590:	f6 c4 08             	test   ah,0x8
c0014593:	75 d8                	jne    c001456d <VAS::lockPage(unsigned long)+0x23>
c0014595:	c7 44 24 10 a8 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc00245a8
c001459d:	83 c4 04             	add    esp,0x4
c00145a0:	5b                   	pop    ebx
c00145a1:	5e                   	pop    esi
c00145a2:	e9 37 ba ff ff       	jmp    c000ffde <KePanic(char const*)>
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	68 68 48 02 c0       	push   0xc0024868
c00145af:	e8 2a ba ff ff       	call   c000ffde <KePanic(char const*)>
c00145b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	eb ad                	jmp    c0014568 <VAS::lockPage(unsigned long)+0x1e>
c00145bb:	90                   	nop

c00145bc <VAS::lockPages(unsigned long, int)>:
c00145bc:	55                   	push   ebp
c00145bd:	57                   	push   edi
c00145be:	56                   	push   esi
c00145bf:	53                   	push   ebx
c00145c0:	83 ec 0c             	sub    esp,0xc
c00145c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145c7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00145cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00145cf:	85 ff                	test   edi,edi
c00145d1:	7e 1c                	jle    c00145ef <VAS::lockPages(unsigned long, int)+0x33>
c00145d3:	31 f6                	xor    esi,esi
c00145d5:	83 ec 08             	sub    esp,0x8
c00145d8:	83 c6 01             	add    esi,0x1
c00145db:	53                   	push   ebx
c00145dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00145e2:	55                   	push   ebp
c00145e3:	e8 62 ff ff ff       	call   c001454a <VAS::lockPage(unsigned long)>
c00145e8:	83 c4 10             	add    esp,0x10
c00145eb:	39 f7                	cmp    edi,esi
c00145ed:	75 e6                	jne    c00145d5 <VAS::lockPages(unsigned long, int)+0x19>
c00145ef:	83 c4 0c             	add    esp,0xc
c00145f2:	5b                   	pop    ebx
c00145f3:	5e                   	pop    esi
c00145f4:	5f                   	pop    edi
c00145f5:	5d                   	pop    ebp
c00145f6:	c3                   	ret    
c00145f7:	90                   	nop

c00145f8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00145f8:	55                   	push   ebp
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	53                   	push   ebx
c00145fc:	83 ec 28             	sub    esp,0x28
c00145ff:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014603:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014607:	50                   	push   eax
c0014608:	e8 60 ee ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c001460d:	83 c4 0c             	add    esp,0xc
c0014610:	89 c5                	mov    ebp,eax
c0014612:	6a 07                	push   0x7
c0014614:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014618:	52                   	push   edx
c0014619:	56                   	push   esi
c001461a:	e8 35 f6 ff ff       	call   c0013c54 <VAS::allocatePages(int, int)>
c001461f:	83 c4 10             	add    esp,0x10
c0014622:	89 c7                	mov    edi,eax
c0014624:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014628:	85 c9                	test   ecx,ecx
c001462a:	74 2f                	je     c001465b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001462c:	31 db                	xor    ebx,ebx
c001462e:	e8 9f bb ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014633:	83 c3 01             	add    ebx,0x1
c0014636:	6a 03                	push   0x3
c0014638:	55                   	push   ebp
c0014639:	50                   	push   eax
c001463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001463e:	56                   	push   esi
c001463f:	e8 0c f5 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014644:	6a 07                	push   0x7
c0014646:	57                   	push   edi
c0014647:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001464b:	50                   	push   eax
c001464c:	56                   	push   esi
c001464d:	e8 fe f4 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014652:	83 c4 20             	add    esp,0x20
c0014655:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014659:	75 d3                	jne    c001462e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001465b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001465f:	89 28                	mov    DWORD PTR [eax],ebp
c0014661:	83 c4 1c             	add    esp,0x1c
c0014664:	89 f8                	mov    eax,edi
c0014666:	5b                   	pop    ebx
c0014667:	5e                   	pop    esi
c0014668:	5f                   	pop    edi
c0014669:	5d                   	pop    ebp
c001466a:	c3                   	ret    
c001466b:	90                   	nop

c001466c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001466c:	53                   	push   ebx
c001466d:	83 ec 14             	sub    esp,0x14
c0014670:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014674:	68 98 48 02 c0       	push   0xc0024898
c0014679:	e8 e6 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001467e:	c7 04 24 f8 48 02 c0 	mov    DWORD PTR [esp],0xc00248f8
c0014685:	e8 da 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001468a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001468e:	83 c4 18             	add    esp,0x18
c0014691:	5b                   	pop    ebx
c0014692:	e9 de f0 ff ff       	jmp    c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c0014697:	90                   	nop

c0014698 <VAS::scanForEviction()>:
c0014698:	57                   	push   edi
c0014699:	56                   	push   esi
c001469a:	31 f6                	xor    esi,esi
c001469c:	53                   	push   ebx
c001469d:	83 ec 18             	sub    esp,0x18
c00146a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146a4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00146a9:	50                   	push   eax
c00146aa:	68 74 49 02 c0       	push   0xc0024974
c00146af:	e8 b0 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146b4:	c7 04 24 ab 4a 02 c0 	mov    DWORD PTR [esp],0xc0024aab
c00146bb:	e8 a4 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146c0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00146cc:	75 0e                	jne    c00146dc <VAS::scanForEviction()+0x44>
c00146ce:	89 da                	mov    edx,ebx
c00146d0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00146d3:	c1 ea 16             	shr    edx,0x16
c00146d6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00146da:	74 5b                	je     c0014737 <VAS::scanForEviction()+0x9f>
c00146dc:	83 ec 08             	sub    esp,0x8
c00146df:	53                   	push   ebx
c00146e0:	57                   	push   edi
c00146e1:	e8 70 f0 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00146eb:	89 d1                	mov    ecx,edx
c00146ed:	c1 e9 0c             	shr    ecx,0xc
c00146f0:	74 10                	je     c0014702 <VAS::scanForEviction()+0x6a>
c00146f2:	89 d1                	mov    ecx,edx
c00146f4:	81 e1 01 08 00 00    	and    ecx,0x801
c00146fa:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014700:	74 40                	je     c0014742 <VAS::scanForEviction()+0xaa>
c0014702:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014708:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001470e:	76 2d                	jbe    c001473d <VAS::scanForEviction()+0xa5>
c0014710:	83 c6 01             	add    esi,0x1
c0014713:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001471a:	83 fe 03             	cmp    esi,0x3
c001471d:	74 32                	je     c0014751 <VAS::scanForEviction()+0xb9>
c001471f:	31 db                	xor    ebx,ebx
c0014721:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014727:	75 b3                	jne    c00146dc <VAS::scanForEviction()+0x44>
c0014729:	89 da                	mov    edx,ebx
c001472b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001472e:	c1 ea 16             	shr    edx,0x16
c0014731:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014735:	75 a5                	jne    c00146dc <VAS::scanForEviction()+0x44>
c0014737:	81 c3 00 00 40 00    	add    ebx,0x400000
c001473d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014740:	eb 84                	jmp    c00146c6 <VAS::scanForEviction()+0x2e>
c0014742:	f6 c2 20             	test   dl,0x20
c0014745:	74 13                	je     c001475a <VAS::scanForEviction()+0xc2>
c0014747:	83 e2 df             	and    edx,0xffffffdf
c001474a:	89 10                	mov    DWORD PTR [eax],edx
c001474c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001474f:	eb b1                	jmp    c0014702 <VAS::scanForEviction()+0x6a>
c0014751:	83 c4 10             	add    esp,0x10
c0014754:	31 c0                	xor    eax,eax
c0014756:	5b                   	pop    ebx
c0014757:	5e                   	pop    esi
c0014758:	5f                   	pop    edi
c0014759:	c3                   	ret    
c001475a:	83 ec 08             	sub    esp,0x8
c001475d:	89 d0                	mov    eax,edx
c001475f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014768:	53                   	push   ebx
c0014769:	68 c7 4a 02 c0       	push   0xc0024ac7
c001476e:	e8 f1 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014773:	58                   	pop    eax
c0014774:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014777:	5a                   	pop    edx
c0014778:	51                   	push   ecx
c0014779:	57                   	push   edi
c001477a:	e8 f1 f8 ff ff       	call   c0014070 <VAS::evict(unsigned long)>
c001477f:	5b                   	pop    ebx
c0014780:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014783:	5e                   	pop    esi
c0014784:	50                   	push   eax
c0014785:	68 db 4a 02 c0       	push   0xc0024adb
c001478a:	e8 d5 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001478f:	58                   	pop    eax
c0014790:	5a                   	pop    edx
c0014791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014795:	50                   	push   eax
c0014796:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001479a:	68 ee 4a 02 c0       	push   0xc0024aee
c001479f:	e8 c0 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147a4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00147a7:	81 c1 00 10 00 00    	add    ecx,0x1000
c00147ad:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00147b0:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c00147b6:	5b                   	pop    ebx
c00147b7:	5e                   	pop    esi
c00147b8:	57                   	push   edi
c00147b9:	68 94 49 02 c0       	push   0xc0024994
c00147be:	e8 a1 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147ca:	83 c4 10             	add    esp,0x10
c00147cd:	5b                   	pop    ebx
c00147ce:	5e                   	pop    esi
c00147cf:	5f                   	pop    edi
c00147d0:	c3                   	ret    

c00147d1 <mapVASFirstTime>:
c00147d1:	55                   	push   ebp
c00147d2:	57                   	push   edi
c00147d3:	56                   	push   esi
c00147d4:	53                   	push   ebx
c00147d5:	83 ec 0c             	sub    esp,0xc
c00147d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00147e0:	83 fa 01             	cmp    edx,0x1
c00147e3:	0f 84 cb 00 00 00    	je     c00148b4 <mapVASFirstTime+0xe3>
c00147e9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00147ec:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00147ef:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00147f4:	c1 e5 15             	shl    ebp,0x15
c00147f7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00147fc:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014802:	29 eb                	sub    ebx,ebp
c0014804:	29 ef                	sub    edi,ebp
c0014806:	e8 c7 b9 ff ff       	call   c00101d2 <Phys::allocatePage()>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 03 04 00 00       	push   0x403
c0014813:	6a 01                	push   0x1
c0014815:	53                   	push   ebx
c0014816:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001481c:	50                   	push   eax
c001481d:	56                   	push   esi
c001481e:	e8 17 f5 ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014823:	83 c4 20             	add    esp,0x20
c0014826:	39 fb                	cmp    ebx,edi
c0014828:	75 dc                	jne    c0014806 <mapVASFirstTime+0x35>
c001482a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001482f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014834:	29 eb                	sub    ebx,ebp
c0014836:	29 ef                	sub    edi,ebp
c0014838:	e8 95 b9 ff ff       	call   c00101d2 <Phys::allocatePage()>
c001483d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014841:	83 fa 01             	cmp    edx,0x1
c0014844:	19 d2                	sbb    edx,edx
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	83 e2 04             	and    edx,0x4
c001484c:	81 c2 03 04 00 00    	add    edx,0x403
c0014852:	52                   	push   edx
c0014853:	6a 01                	push   0x1
c0014855:	53                   	push   ebx
c0014856:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001485c:	50                   	push   eax
c001485d:	56                   	push   esi
c001485e:	e8 d7 f4 ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014863:	83 c4 20             	add    esp,0x20
c0014866:	39 df                	cmp    edi,ebx
c0014868:	75 ce                	jne    c0014838 <mapVASFirstTime+0x67>
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c0014872:	6a 04                	push   0x4
c0014874:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c001487a:	6a ff                	push   0xffffffff
c001487c:	c1 eb 0c             	shr    ebx,0xc
c001487f:	53                   	push   ebx
c0014880:	68 00 70 02 c0       	push   0xc0027000
c0014885:	56                   	push   esi
c0014886:	e8 65 f0 ff ff       	call   c00138f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001488b:	83 c4 14             	add    esp,0x14
c001488e:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c0014893:	6a 04                	push   0x4
c0014895:	6a ff                	push   0xffffffff
c0014897:	53                   	push   ebx
c0014898:	68 00 70 02 c0       	push   0xc0027000
c001489d:	50                   	push   eax
c001489e:	e8 4d f0 ff ff       	call   c00138f0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148a3:	0f 20 d8             	mov    eax,cr3
c00148a6:	0f 22 d8             	mov    cr3,eax
c00148a9:	83 c4 20             	add    esp,0x20
c00148ac:	83 c4 0c             	add    esp,0xc
c00148af:	5b                   	pop    ebx
c00148b0:	5e                   	pop    esi
c00148b1:	5f                   	pop    edi
c00148b2:	5d                   	pop    ebp
c00148b3:	c3                   	ret    
c00148b4:	83 ec 0c             	sub    esp,0xc
c00148b7:	68 fb 4a 02 c0       	push   0xc0024afb
c00148bc:	e8 a3 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00148c1:	83 c4 10             	add    esp,0x10
c00148c4:	83 c4 0c             	add    esp,0xc
c00148c7:	5b                   	pop    ebx
c00148c8:	5e                   	pop    esi
c00148c9:	5f                   	pop    edi
c00148ca:	5d                   	pop    ebp
c00148cb:	c3                   	ret    

c00148cc <SysAlarm(regs*)>:
c00148cc:	53                   	push   ebx
c00148cd:	83 ec 10             	sub    esp,0x10
c00148d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148d7:	68 14 4b 02 c0       	push   0xc0024b14
c00148dc:	e8 83 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00148e1:	83 c4 0c             	add    esp,0xc
c00148e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148e7:	31 d2                	xor    edx,edx
c00148e9:	52                   	push   edx
c00148ea:	50                   	push   eax
c00148eb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00148f1:	e8 8e 09 00 00       	call   c0015284 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00148f6:	83 c4 18             	add    esp,0x18
c00148f9:	5b                   	pop    ebx
c00148fa:	c3                   	ret    

c00148fb <SysEject(regs*)>:
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	83 ca ff             	or     edx,0xffffffff
c0014901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014905:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014908:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001490d:	83 e9 41             	sub    ecx,0x41
c0014910:	83 f9 19             	cmp    ecx,0x19
c0014913:	77 18                	ja     c001492d <SysEject(regs*)+0x32>
c0014915:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001491c:	85 c9                	test   ecx,ecx
c001491e:	74 0d                	je     c001492d <SysEject(regs*)+0x32>
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	51                   	push   ecx
c0014924:	e8 bd 60 ff ff       	call   c000a9e6 <LogicalDisk::eject()>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	99                   	cdq    
c001492d:	83 c4 0c             	add    esp,0xc
c0014930:	c3                   	ret    

c0014931 <SysExit(regs*)>:
c0014931:	83 ec 18             	sub    esp,0x18
c0014934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014938:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001493b:	e8 d0 2d 00 00       	call   c0017710 <terminateTask(int)>
c0014940:	83 c8 ff             	or     eax,0xffffffff
c0014943:	83 c4 1c             	add    esp,0x1c
c0014946:	89 c2                	mov    edx,eax
c0014948:	c3                   	ret    

c0014949 <SysGetCwd(regs*)>:
c0014949:	83 ec 10             	sub    esp,0x10
c001494c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014950:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014953:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014956:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001495b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001495e:	e8 63 34 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c0014963:	83 c4 1c             	add    esp,0x1c
c0014966:	99                   	cdq    
c0014967:	c3                   	ret    

c0014968 <SysGetPID(regs*)>:
c0014968:	83 ec 14             	sub    esp,0x14
c001496b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014970:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014973:	ff 30                	push   DWORD PTR [eax]
c0014975:	68 29 4b 02 c0       	push   0xc0024b29
c001497a:	e8 e5 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001497f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014984:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014987:	8b 00                	mov    eax,DWORD PTR [eax]
c0014989:	83 c4 1c             	add    esp,0x1c
c001498c:	99                   	cdq    
c001498d:	c3                   	ret    

c001498e <SysGetRAMData(regs*)>:
c001498e:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0014994:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014999:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c001499f:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00149a5:	99                   	cdq    
c00149a6:	f7 f9                	idiv   ecx
c00149a8:	c1 e0 18             	shl    eax,0x18
c00149ab:	09 c8                	or     eax,ecx
c00149ad:	99                   	cdq    
c00149ae:	c3                   	ret    

c00149af <SysGetVGAPtr(regs*)>:
c00149af:	55                   	push   ebp
c00149b0:	57                   	push   edi
c00149b1:	56                   	push   esi
c00149b2:	53                   	push   ebx
c00149b3:	83 ec 0c             	sub    esp,0xc
c00149b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00149ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00149bd:	83 f8 ff             	cmp    eax,0xffffffff
c00149c0:	74 1b                	je     c00149dd <SysGetVGAPtr(regs*)+0x2e>
c00149c2:	83 ec 0c             	sub    esp,0xc
c00149c5:	50                   	push   eax
c00149c6:	e8 f1 27 00 00       	call   c00171bc <Thr::processFromPID(int)>
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	89 c1                	mov    ecx,eax
c00149d0:	31 d2                	xor    edx,edx
c00149d2:	b8 01 00 00 00       	mov    eax,0x1
c00149d7:	85 c9                	test   ecx,ecx
c00149d9:	75 0a                	jne    c00149e5 <SysGetVGAPtr(regs*)+0x36>
c00149db:	eb 61                	jmp    c0014a3e <SysGetVGAPtr(regs*)+0x8f>
c00149dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e2:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00149e5:	8b a9 a6 05 00 00    	mov    ebp,DWORD PTR [ecx+0x5a6]
c00149eb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00149ef:	74 0c                	je     c00149fd <SysGetVGAPtr(regs*)+0x4e>
c00149f1:	83 ec 0c             	sub    esp,0xc
c00149f4:	55                   	push   ebp
c00149f5:	e8 ed da ff ff       	call   c00124e7 <setActiveTerminal(VgaText*)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014a00:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014a03:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014a08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a0a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014a0d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a10:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014a16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a19:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014a1c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014a22:	50                   	push   eax
c0014a23:	50                   	push   eax
c0014a24:	68 38 4b 02 c0       	push   0xc0024b38
c0014a29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a2c:	05 a8 0f 00 00       	add    eax,0xfa8
c0014a31:	50                   	push   eax
c0014a32:	e8 09 bc fe ff       	call   c0000640 <strcpy>
c0014a37:	83 c4 10             	add    esp,0x10
c0014a3a:	31 c0                	xor    eax,eax
c0014a3c:	31 d2                	xor    edx,edx
c0014a3e:	83 c4 0c             	add    esp,0xc
c0014a41:	5b                   	pop    ebx
c0014a42:	5e                   	pop    esi
c0014a43:	5f                   	pop    edi
c0014a44:	5d                   	pop    ebp
c0014a45:	c3                   	ret    
c0014a46:	66 90                	xchg   ax,ax

c0014a48 <SysKill(regs*)>:
c0014a48:	53                   	push   ebx
c0014a49:	83 ec 08             	sub    esp,0x8
c0014a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a50:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014a54:	75 16                	jne    c0014a6c <SysKill(regs*)+0x24>
c0014a56:	83 ec 0c             	sub    esp,0xc
c0014a59:	68 42 4b 02 c0       	push   0xc0024b42
c0014a5e:	e8 7b b5 ff ff       	call   c000ffde <KePanic(char const*)>
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	e9 89 00 00 00       	jmp    c0014af4 <SysKill(regs*)+0xac>
c0014a6b:	90                   	nop
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	68 4c ea 02 c0       	push   0xc002ea4c
c0014a74:	e8 9f d1 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a79:	8d 76 00             	lea    esi,[esi+0x0]
c0014a7c:	83 c4 10             	add    esp,0x10
c0014a7f:	85 c0                	test   eax,eax
c0014a81:	74 19                	je     c0014a9c <SysKill(regs*)+0x54>
c0014a83:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014a86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014a89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014a8b:	74 33                	je     c0014ac0 <SysKill(regs*)+0x78>
c0014a8d:	52                   	push   edx
c0014a8e:	52                   	push   edx
c0014a8f:	50                   	push   eax
c0014a90:	68 4c ea 02 c0       	push   0xc002ea4c
c0014a95:	e8 8a d6 00 00       	call   c0022124 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014a9a:	eb e0                	jmp    c0014a7c <SysKill(regs*)+0x34>
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	68 40 ea 02 c0       	push   0xc002ea40
c0014aa4:	e8 6f d1 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014aac:	83 c4 10             	add    esp,0x10
c0014aaf:	85 c0                	test   eax,eax
c0014ab1:	74 41                	je     c0014af4 <SysKill(regs*)+0xac>
c0014ab3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014ab6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014ab9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014abb:	75 27                	jne    c0014ae4 <SysKill(regs*)+0x9c>
c0014abd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac0:	51                   	push   ecx
c0014ac1:	51                   	push   ecx
c0014ac2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ac5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014acd:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014ad3:	e8 83 c6 ff ff       	call   c001115b <KeRaiseSignal(SigHandlerBlock*, int)>
c0014ad8:	83 c4 10             	add    esp,0x10
c0014adb:	31 c0                	xor    eax,eax
c0014add:	31 d2                	xor    edx,edx
c0014adf:	eb 1b                	jmp    c0014afc <SysKill(regs*)+0xb4>
c0014ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ae4:	52                   	push   edx
c0014ae5:	52                   	push   edx
c0014ae6:	50                   	push   eax
c0014ae7:	68 40 ea 02 c0       	push   0xc002ea40
c0014aec:	e8 33 d6 00 00       	call   c0022124 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014af1:	eb b9                	jmp    c0014aac <SysKill(regs*)+0x64>
c0014af3:	90                   	nop
c0014af4:	83 c8 ff             	or     eax,0xffffffff
c0014af7:	89 c2                	mov    edx,eax
c0014af9:	8d 76 00             	lea    esi,[esi+0x0]
c0014afc:	83 c4 08             	add    esp,0x8
c0014aff:	5b                   	pop    ebx
c0014b00:	c3                   	ret    

c0014b01 <SysLoadDLL(regs*)>:
c0014b01:	56                   	push   esi
c0014b02:	53                   	push   ebx
c0014b03:	31 d2                	xor    edx,edx
c0014b05:	51                   	push   ecx
c0014b06:	b8 01 00 00 00       	mov    eax,0x1
c0014b0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b0f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014b13:	0f 84 8c 00 00 00    	je     c0014ba5 <SysLoadDLL(regs*)+0xa4>
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	68 14 01 00 00       	push   0x114
c0014b21:	e8 71 b1 ff ff       	call   c000fc97 <malloc>
c0014b26:	83 c4 0c             	add    esp,0xc
c0014b29:	89 c3                	mov    ebx,eax
c0014b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b30:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b33:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b36:	53                   	push   ebx
c0014b37:	e8 f6 35 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	31 d2                	xor    edx,edx
c0014b41:	b8 02 00 00 00       	mov    eax,0x2
c0014b46:	85 db                	test   ebx,ebx
c0014b48:	74 5b                	je     c0014ba5 <SysLoadDLL(regs*)+0xa4>
c0014b4a:	83 ec 0c             	sub    esp,0xc
c0014b4d:	53                   	push   ebx
c0014b4e:	e8 c1 38 ff ff       	call   c0008414 <File::exists()>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	84 c0                	test   al,al
c0014b58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b5a:	75 11                	jne    c0014b6d <SysLoadDLL(regs*)+0x6c>
c0014b5c:	83 ec 0c             	sub    esp,0xc
c0014b5f:	53                   	push   ebx
c0014b60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	b8 03 00 00 00       	mov    eax,0x3
c0014b6b:	eb 36                	jmp    c0014ba3 <SysLoadDLL(regs*)+0xa2>
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	53                   	push   ebx
c0014b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b74:	58                   	pop    eax
c0014b75:	5a                   	pop    edx
c0014b76:	6a 00                	push   0x0
c0014b78:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b7b:	e8 2b 18 00 00       	call   c00163ab <Thr::loadDLL(char const*, bool)>
c0014b80:	83 c4 10             	add    esp,0x10
c0014b83:	89 c1                	mov    ecx,eax
c0014b85:	31 d2                	xor    edx,edx
c0014b87:	b8 04 00 00 00       	mov    eax,0x4
c0014b8c:	85 c9                	test   ecx,ecx
c0014b8e:	74 15                	je     c0014ba5 <SysLoadDLL(regs*)+0xa4>
c0014b90:	53                   	push   ebx
c0014b91:	53                   	push   ebx
c0014b92:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014b98:	51                   	push   ecx
c0014b99:	e8 5f 1a 00 00       	call   c00165fd <Thr::executeDLL(unsigned long, void*)>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	31 c0                	xor    eax,eax
c0014ba3:	31 d2                	xor    edx,edx
c0014ba5:	59                   	pop    ecx
c0014ba6:	5b                   	pop    ebx
c0014ba7:	5e                   	pop    esi
c0014ba8:	c3                   	ret    

c0014ba9 <SysPause(regs*)>:
c0014ba9:	83 ec 18             	sub    esp,0x18
c0014bac:	6a 08                	push   0x8
c0014bae:	e8 1d 24 00 00       	call   c0016fd0 <blockTask(TaskState)>
c0014bb3:	31 c0                	xor    eax,eax
c0014bb5:	31 d2                	xor    edx,edx
c0014bb7:	83 c4 1c             	add    esp,0x1c
c0014bba:	c3                   	ret    

c0014bbb <SysPthreadCreate(regs*)>:
c0014bbb:	83 ec 18             	sub    esp,0x18
c0014bbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bc3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014bc6:	e8 ed 21 00 00       	call   c0016db8 <Process::createUserThread()>
c0014bcb:	31 c0                	xor    eax,eax
c0014bcd:	31 d2                	xor    edx,edx
c0014bcf:	83 c4 1c             	add    esp,0x1c
c0014bd2:	c3                   	ret    

c0014bd3 <SysPthreadGetTID(regs*)>:
c0014bd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bdb:	99                   	cdq    
c0014bdc:	c3                   	ret    

c0014bdd <SysInternalPthreadGetContext(regs*)>:
c0014bdd:	31 c0                	xor    eax,eax
c0014bdf:	31 d2                	xor    edx,edx
c0014be1:	c3                   	ret    

c0014be2 <SysInternalPthreadGetStartLocation(regs*)>:
c0014be2:	31 c0                	xor    eax,eax
c0014be4:	31 d2                	xor    edx,edx
c0014be6:	c3                   	ret    

c0014be7 <SysPthreadJoin(regs*)>:
c0014be7:	31 c0                	xor    eax,eax
c0014be9:	31 d2                	xor    edx,edx
c0014beb:	c3                   	ret    

c0014bec <SysPthreadExit(regs*)>:
c0014bec:	83 ec 18             	sub    esp,0x18
c0014bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bf3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bf6:	e8 15 2b 00 00       	call   c0017710 <terminateTask(int)>
c0014bfb:	83 c8 ff             	or     eax,0xffffffff
c0014bfe:	83 c4 1c             	add    esp,0x1c
c0014c01:	89 c2                	mov    edx,eax
c0014c03:	c3                   	ret    

c0014c04 <SysRead(regs*)>:
c0014c04:	57                   	push   edi
c0014c05:	56                   	push   esi
c0014c06:	53                   	push   ebx
c0014c07:	83 ec 10             	sub    esp,0x10
c0014c0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014c11:	83 f8 02             	cmp    eax,0x2
c0014c14:	77 10                	ja     c0014c26 <SysRead(regs*)+0x22>
c0014c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c1e:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014c24:	eb 0e                	jmp    c0014c34 <SysRead(regs*)+0x30>
c0014c26:	83 ec 0c             	sub    esp,0xc
c0014c29:	50                   	push   eax
c0014c2a:	e8 d2 e6 ff ff       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	89 c1                	mov    ecx,eax
c0014c34:	83 c8 ff             	or     eax,0xffffffff
c0014c37:	85 c9                	test   ecx,ecx
c0014c39:	89 c2                	mov    edx,eax
c0014c3b:	74 28                	je     c0014c65 <SysRead(regs*)+0x61>
c0014c3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c45:	31 ff                	xor    edi,edi
c0014c47:	83 ec 0c             	sub    esp,0xc
c0014c4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c4c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c50:	52                   	push   edx
c0014c51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c54:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c57:	57                   	push   edi
c0014c58:	56                   	push   esi
c0014c59:	51                   	push   ecx
c0014c5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c61:	83 c4 20             	add    esp,0x20
c0014c64:	99                   	cdq    
c0014c65:	83 c4 10             	add    esp,0x10
c0014c68:	5b                   	pop    ebx
c0014c69:	5e                   	pop    esi
c0014c6a:	5f                   	pop    edi
c0014c6b:	c3                   	ret    

c0014c6c <SysRegisterSignal(regs*)>:
c0014c6c:	83 ec 18             	sub    esp,0x18
c0014c6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c73:	6a 00                	push   0x0
c0014c75:	6a 00                	push   0x0
c0014c77:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c7a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c85:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014c8b:	e8 95 c4 ff ff       	call   c0011125 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014c90:	83 c4 2c             	add    esp,0x2c
c0014c93:	99                   	cdq    
c0014c94:	c3                   	ret    

c0014c95 <SysRegistryGetTypeFromPath(regs*)>:
c0014c95:	53                   	push   ebx
c0014c96:	81 ec 40 01 00 00    	sub    esp,0x140
c0014c9c:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014ca3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ca6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ca9:	e8 c6 92 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	89 c1                	mov    ecx,eax
c0014cb3:	85 c0                	test   eax,eax
c0014cb5:	74 15                	je     c0014ccc <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014cb7:	50                   	push   eax
c0014cb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014cbc:	50                   	push   eax
c0014cbd:	51                   	push   ecx
c0014cbe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cc1:	e8 92 8e ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014cc6:	83 c4 10             	add    esp,0x10
c0014cc9:	99                   	cdq    
c0014cca:	eb 05                	jmp    c0014cd1 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014ccc:	83 c8 ff             	or     eax,0xffffffff
c0014ccf:	89 c2                	mov    edx,eax
c0014cd1:	81 c4 38 01 00 00    	add    esp,0x138
c0014cd7:	5b                   	pop    ebx
c0014cd8:	c3                   	ret    

c0014cd9 <SysRegistryReadExtent(regs*)>:
c0014cd9:	83 ec 1c             	sub    esp,0x1c
c0014cdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ce0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014ce3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014ce6:	85 c0                	test   eax,eax
c0014ce8:	79 1f                	jns    c0014d09 <SysRegistryReadExtent(regs*)+0x30>
c0014cea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014cef:	52                   	push   edx
c0014cf0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014cf4:	52                   	push   edx
c0014cf5:	50                   	push   eax
c0014cf6:	51                   	push   ecx
c0014cf7:	e8 4e 8d ff ff       	call   c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014cfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	eb 14                	jmp    c0014d1d <SysRegistryReadExtent(regs*)+0x44>
c0014d09:	83 ec 04             	sub    esp,0x4
c0014d0c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014d0f:	50                   	push   eax
c0014d10:	51                   	push   ecx
c0014d11:	e8 ce 87 ff ff       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	31 c0                	xor    eax,eax
c0014d1b:	31 d2                	xor    edx,edx
c0014d1d:	83 c4 1c             	add    esp,0x1c
c0014d20:	c3                   	ret    

c0014d21 <SysRegistryPathToExtentLookup(regs*)>:
c0014d21:	83 ec 14             	sub    esp,0x14
c0014d24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014d2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d2e:	e8 41 92 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d33:	83 c4 1c             	add    esp,0x1c
c0014d36:	99                   	cdq    
c0014d37:	c3                   	ret    

c0014d38 <SysRegistryEnterDirectory(regs*)>:
c0014d38:	83 ec 14             	sub    esp,0x14
c0014d3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d3f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d42:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d45:	e8 11 88 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c0014d4a:	83 c4 1c             	add    esp,0x1c
c0014d4d:	99                   	cdq    
c0014d4e:	c3                   	ret    

c0014d4f <SysRegistryGetNext(regs*)>:
c0014d4f:	83 ec 14             	sub    esp,0x14
c0014d52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d56:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d59:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d5c:	e8 39 88 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c0014d61:	83 c4 1c             	add    esp,0x1c
c0014d64:	99                   	cdq    
c0014d65:	c3                   	ret    

c0014d66 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014d66:	57                   	push   edi
c0014d67:	56                   	push   esi
c0014d68:	53                   	push   ebx
c0014d69:	81 ec 34 01 00 00    	sub    esp,0x134
c0014d6f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014d76:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014d7a:	57                   	push   edi
c0014d7b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014d7e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014d81:	e8 d2 8d ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014d86:	89 c3                	mov    ebx,eax
c0014d88:	58                   	pop    eax
c0014d89:	5a                   	pop    edx
c0014d8a:	57                   	push   edi
c0014d8b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014d8e:	e8 ad b8 fe ff       	call   c0000640 <strcpy>
c0014d93:	89 d8                	mov    eax,ebx
c0014d95:	81 c4 40 01 00 00    	add    esp,0x140
c0014d9b:	99                   	cdq    
c0014d9c:	5b                   	pop    ebx
c0014d9d:	5e                   	pop    esi
c0014d9e:	5f                   	pop    edi
c0014d9f:	c3                   	ret    

c0014da0 <SysRegistryOpen(regs*)>:
c0014da0:	83 ec 18             	sub    esp,0x18
c0014da3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014da7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014daa:	e8 c5 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014daf:	83 c4 1c             	add    esp,0x1c
c0014db2:	99                   	cdq    
c0014db3:	c3                   	ret    

c0014db4 <SysRegistryClose(regs*)>:
c0014db4:	83 ec 18             	sub    esp,0x18
c0014db7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dbb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dbe:	e8 cf 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014dc3:	31 c0                	xor    eax,eax
c0014dc5:	31 d2                	xor    edx,edx
c0014dc7:	83 c4 1c             	add    esp,0x1c
c0014dca:	c3                   	ret    

c0014dcb <SysRegistryEasyReadString(regs*)>:
c0014dcb:	57                   	push   edi
c0014dcc:	56                   	push   esi
c0014dcd:	53                   	push   ebx
c0014dce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014dd2:	83 ec 0c             	sub    esp,0xc
c0014dd5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014dd8:	e8 97 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014ddd:	5a                   	pop    edx
c0014dde:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014de1:	59                   	pop    ecx
c0014de2:	89 c3                	mov    ebx,eax
c0014de4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014de7:	50                   	push   eax
c0014de8:	e8 87 91 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	89 c1                	mov    ecx,eax
c0014df2:	b8 01 00 00 00       	mov    eax,0x1
c0014df7:	85 c9                	test   ecx,ecx
c0014df9:	7e 16                	jle    c0014e11 <SysRegistryEasyReadString(regs*)+0x46>
c0014dfb:	50                   	push   eax
c0014dfc:	57                   	push   edi
c0014dfd:	51                   	push   ecx
c0014dfe:	53                   	push   ebx
c0014dff:	e8 e0 86 ff ff       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0014e04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e07:	e8 86 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	31 c0                	xor    eax,eax
c0014e11:	5b                   	pop    ebx
c0014e12:	31 d2                	xor    edx,edx
c0014e14:	5e                   	pop    esi
c0014e15:	5f                   	pop    edi
c0014e16:	c3                   	ret    

c0014e17 <SysRegistryEasyReadInteger(regs*)>:
c0014e17:	56                   	push   esi
c0014e18:	53                   	push   ebx
c0014e19:	83 ec 10             	sub    esp,0x10
c0014e1c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014e20:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e23:	e8 4c 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014e28:	5a                   	pop    edx
c0014e29:	89 c3                	mov    ebx,eax
c0014e2b:	59                   	pop    ecx
c0014e2c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e2f:	50                   	push   eax
c0014e30:	e8 3f 91 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e35:	83 c4 10             	add    esp,0x10
c0014e38:	89 c1                	mov    ecx,eax
c0014e3a:	b8 01 00 00 00       	mov    eax,0x1
c0014e3f:	85 c9                	test   ecx,ecx
c0014e41:	7e 18                	jle    c0014e5b <SysRegistryEasyReadInteger(regs*)+0x44>
c0014e43:	50                   	push   eax
c0014e44:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014e47:	51                   	push   ecx
c0014e48:	53                   	push   ebx
c0014e49:	e8 fc 8b ff ff       	call   c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e51:	e8 3c 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014e56:	83 c4 10             	add    esp,0x10
c0014e59:	31 c0                	xor    eax,eax
c0014e5b:	59                   	pop    ecx
c0014e5c:	31 d2                	xor    edx,edx
c0014e5e:	5b                   	pop    ebx
c0014e5f:	5e                   	pop    esi
c0014e60:	c3                   	ret    

c0014e61 <SysSbrk(regs*)>:
c0014e61:	56                   	push   esi
c0014e62:	53                   	push   ebx
c0014e63:	50                   	push   eax
c0014e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e70:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014e73:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014e79:	85 db                	test   ebx,ebx
c0014e7b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014e7e:	74 02                	je     c0014e82 <SysSbrk(regs*)+0x21>
c0014e80:	79 06                	jns    c0014e88 <SysSbrk(regs*)+0x27>
c0014e82:	89 f0                	mov    eax,esi
c0014e84:	31 d2                	xor    edx,edx
c0014e86:	eb 2a                	jmp    c0014eb2 <SysSbrk(regs*)+0x51>
c0014e88:	83 c8 ff             	or     eax,0xffffffff
c0014e8b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014e91:	89 c2                	mov    edx,eax
c0014e93:	77 1d                	ja     c0014eb2 <SysSbrk(regs*)+0x51>
c0014e95:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014e9b:	50                   	push   eax
c0014e9c:	c1 ea 0c             	shr    edx,0xc
c0014e9f:	68 07 0c 00 00       	push   0xc07
c0014ea4:	52                   	push   edx
c0014ea5:	51                   	push   ecx
c0014ea6:	e8 a9 ed ff ff       	call   c0013c54 <VAS::allocatePages(int, int)>
c0014eab:	89 f0                	mov    eax,esi
c0014ead:	31 d2                	xor    edx,edx
c0014eaf:	83 c4 10             	add    esp,0x10
c0014eb2:	59                   	pop    ecx
c0014eb3:	5b                   	pop    ebx
c0014eb4:	5e                   	pop    esi
c0014eb5:	c3                   	ret    

c0014eb6 <SysSetCwd(regs*)>:
c0014eb6:	83 ec 14             	sub    esp,0x14
c0014eb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ebd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014ec8:	e8 e6 35 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0014ecd:	83 c4 1c             	add    esp,0x1c
c0014ed0:	99                   	cdq    
c0014ed1:	c3                   	ret    

c0014ed2 <SysSetTime(regs*)>:
c0014ed2:	55                   	push   ebp
c0014ed3:	31 d2                	xor    edx,edx
c0014ed5:	57                   	push   edi
c0014ed6:	56                   	push   esi
c0014ed7:	be 18 00 00 00       	mov    esi,0x18
c0014edc:	53                   	push   ebx
c0014edd:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014ee2:	83 ec 20             	sub    esp,0x20
c0014ee5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014ee9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014eec:	f7 f3                	div    ebx
c0014eee:	89 d7                	mov    edi,edx
c0014ef0:	31 d2                	xor    edx,edx
c0014ef2:	f7 f3                	div    ebx
c0014ef4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014ef7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014efb:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014f00:	31 d2                	xor    edx,edx
c0014f02:	f7 f3                	div    ebx
c0014f04:	31 d2                	xor    edx,edx
c0014f06:	f7 f6                	div    esi
c0014f08:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014f0b:	89 d5                	mov    ebp,edx
c0014f0d:	89 c3                	mov    ebx,eax
c0014f0f:	be 0c 00 00 00       	mov    esi,0xc
c0014f14:	83 e3 1f             	and    ebx,0x1f
c0014f17:	c1 e8 05             	shr    eax,0x5
c0014f1a:	43                   	inc    ebx
c0014f1b:	31 d2                	xor    edx,edx
c0014f1d:	f7 f6                	div    esi
c0014f1f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f23:	57                   	push   edi
c0014f24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f28:	55                   	push   ebp
c0014f29:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014f2d:	56                   	push   esi
c0014f2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f32:	53                   	push   ebx
c0014f33:	68 63 4b 02 c0       	push   0xc0024b63
c0014f38:	e8 27 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f3d:	83 c4 1c             	add    esp,0x1c
c0014f40:	57                   	push   edi
c0014f41:	c1 e7 10             	shl    edi,0x10
c0014f44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f48:	55                   	push   ebp
c0014f49:	56                   	push   esi
c0014f4a:	c1 e6 10             	shl    esi,0x10
c0014f4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f51:	53                   	push   ebx
c0014f52:	68 85 4b 02 c0       	push   0xc0024b85
c0014f57:	e8 08 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f5c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014f61:	31 d2                	xor    edx,edx
c0014f63:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0014f69:	31 c0                	xor    eax,eax
c0014f6b:	88 d8                	mov    al,bl
c0014f6d:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014f71:	0f b7 d8             	movzx  ebx,ax
c0014f74:	09 f3                	or     ebx,esi
c0014f76:	89 d8                	mov    eax,ebx
c0014f78:	89 eb                	mov    ebx,ebp
c0014f7a:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014f7e:	88 da                	mov    dl,bl
c0014f80:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014f84:	83 c4 1c             	add    esp,0x1c
c0014f87:	89 d6                	mov    esi,edx
c0014f89:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014f8f:	09 fe                	or     esi,edi
c0014f91:	56                   	push   esi
c0014f92:	50                   	push   eax
c0014f93:	51                   	push   ecx
c0014f94:	e8 8b 45 ff ff       	call   c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014f99:	83 c4 2c             	add    esp,0x2c
c0014f9c:	83 f0 01             	xor    eax,0x1
c0014f9f:	5b                   	pop    ebx
c0014fa0:	0f b6 c0             	movzx  eax,al
c0014fa3:	5e                   	pop    esi
c0014fa4:	31 d2                	xor    edx,edx
c0014fa6:	5f                   	pop    edi
c0014fa7:	5d                   	pop    ebp
c0014fa8:	c3                   	ret    

c0014fa9 <SysSymlink(regs*)>:
c0014fa9:	56                   	push   esi
c0014faa:	83 c8 ff             	or     eax,0xffffffff
c0014fad:	53                   	push   ebx
c0014fae:	89 c2                	mov    edx,eax
c0014fb0:	81 ec 34 02 00 00    	sub    esp,0x234
c0014fb6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014fbd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014fc1:	74 50                	je     c0015013 <SysSymlink(regs*)+0x6a>
c0014fc3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014fc6:	85 c9                	test   ecx,ecx
c0014fc8:	74 49                	je     c0015013 <SysSymlink(regs*)+0x6a>
c0014fca:	6a 01                	push   0x1
c0014fcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fd1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fd4:	05 0c 01 00 00       	add    eax,0x10c
c0014fd9:	50                   	push   eax
c0014fda:	51                   	push   ecx
c0014fdb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014fdf:	56                   	push   esi
c0014fe0:	e8 35 2e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014fe5:	6a 01                	push   0x1
c0014fe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fef:	05 0c 01 00 00       	add    eax,0x10c
c0014ff4:	50                   	push   eax
c0014ff5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ff8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014fff:	53                   	push   ebx
c0015000:	e8 15 2e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015005:	83 c4 18             	add    esp,0x18
c0015008:	56                   	push   esi
c0015009:	53                   	push   ebx
c001500a:	e8 39 2a ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c001500f:	83 c4 10             	add    esp,0x10
c0015012:	99                   	cdq    
c0015013:	81 c4 34 02 00 00    	add    esp,0x234
c0015019:	5b                   	pop    ebx
c001501a:	5e                   	pop    esi
c001501b:	c3                   	ret    

c001501c <SysTimezone(regs*)>:
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015023:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015027:	75 17                	jne    c0015040 <SysTimezone(regs*)+0x24>
c0015029:	83 ec 0c             	sub    esp,0xc
c001502c:	68 a7 4b 02 c0       	push   0xc0024ba7
c0015031:	e8 2e 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015036:	83 c8 ff             	or     eax,0xffffffff
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	89 c2                	mov    edx,eax
c001503e:	eb 16                	jmp    c0015056 <SysTimezone(regs*)+0x3a>
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015046:	e8 66 3f ff ff       	call   c0008fb1 <KeSetTimezone(int)>
c001504b:	31 d2                	xor    edx,edx
c001504d:	83 f0 01             	xor    eax,0x1
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	0f b6 c0             	movzx  eax,al
c0015056:	83 c4 0c             	add    esp,0xc
c0015059:	c3                   	ret    

c001505a <SysTruncate(regs*)>:
c001505a:	55                   	push   ebp
c001505b:	57                   	push   edi
c001505c:	31 ff                	xor    edi,edi
c001505e:	56                   	push   esi
c001505f:	53                   	push   ebx
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015067:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001506a:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001506d:	89 ce                	mov    esi,ecx
c001506f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015073:	0f 84 9a 00 00 00    	je     c0015113 <SysTruncate(regs*)+0xb9>
c0015079:	83 ec 0c             	sub    esp,0xc
c001507c:	68 14 01 00 00       	push   0x114
c0015081:	e8 11 ac ff ff       	call   c000fc97 <malloc>
c0015086:	83 c4 0c             	add    esp,0xc
c0015089:	89 c3                	mov    ebx,eax
c001508b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015090:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015093:	55                   	push   ebp
c0015094:	53                   	push   ebx
c0015095:	e8 98 30 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	31 d2                	xor    edx,edx
c001509f:	b8 03 00 00 00       	mov    eax,0x3
c00150a4:	85 db                	test   ebx,ebx
c00150a6:	0f 84 a2 00 00 00    	je     c001514e <SysTruncate(regs*)+0xf4>
c00150ac:	51                   	push   ecx
c00150ad:	51                   	push   ecx
c00150ae:	6a 02                	push   0x2
c00150b0:	53                   	push   ebx
c00150b1:	e8 9a 30 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	85 c0                	test   eax,eax
c00150bb:	74 13                	je     c00150d0 <SysTruncate(regs*)+0x76>
c00150bd:	83 ec 0c             	sub    esp,0xc
c00150c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150c2:	53                   	push   ebx
c00150c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	b8 04 00 00 00       	mov    eax,0x4
c00150ce:	eb 7c                	jmp    c001514c <SysTruncate(regs*)+0xf2>
c00150d0:	52                   	push   edx
c00150d1:	57                   	push   edi
c00150d2:	56                   	push   esi
c00150d3:	53                   	push   ebx
c00150d4:	e8 8b 31 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	85 c0                	test   eax,eax
c00150de:	74 1b                	je     c00150fb <SysTruncate(regs*)+0xa1>
c00150e0:	83 ec 0c             	sub    esp,0xc
c00150e3:	53                   	push   ebx
c00150e4:	e8 c5 30 ff ff       	call   c00081ae <File::close()>
c00150e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	b8 05 00 00 00       	mov    eax,0x5
c00150f9:	eb 51                	jmp    c001514c <SysTruncate(regs*)+0xf2>
c00150fb:	83 ec 0c             	sub    esp,0xc
c00150fe:	53                   	push   ebx
c00150ff:	e8 aa 30 ff ff       	call   c00081ae <File::close()>
c0015104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015109:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001510c:	83 c4 10             	add    esp,0x10
c001510f:	31 c0                	xor    eax,eax
c0015111:	eb 39                	jmp    c001514c <SysTruncate(regs*)+0xf2>
c0015113:	31 d2                	xor    edx,edx
c0015115:	b8 01 00 00 00       	mov    eax,0x1
c001511a:	83 fd 02             	cmp    ebp,0x2
c001511d:	7e 2f                	jle    c001514e <SysTruncate(regs*)+0xf4>
c001511f:	83 ec 0c             	sub    esp,0xc
c0015122:	51                   	push   ecx
c0015123:	e8 d9 e1 ff ff       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0015128:	83 c4 10             	add    esp,0x10
c001512b:	89 c1                	mov    ecx,eax
c001512d:	31 d2                	xor    edx,edx
c001512f:	b8 02 00 00 00       	mov    eax,0x2
c0015134:	85 c9                	test   ecx,ecx
c0015136:	74 16                	je     c001514e <SysTruncate(regs*)+0xf4>
c0015138:	50                   	push   eax
c0015139:	57                   	push   edi
c001513a:	56                   	push   esi
c001513b:	51                   	push   ecx
c001513c:	e8 23 31 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	85 c0                	test   eax,eax
c0015146:	0f 95 c0             	setne  al
c0015149:	0f b6 c0             	movzx  eax,al
c001514c:	31 d2                	xor    edx,edx
c001514e:	83 c4 0c             	add    esp,0xc
c0015151:	5b                   	pop    ebx
c0015152:	5e                   	pop    esi
c0015153:	5f                   	pop    edi
c0015154:	5d                   	pop    ebp
c0015155:	c3                   	ret    

c0015156 <SysWrite(regs*)>:
c0015156:	57                   	push   edi
c0015157:	56                   	push   esi
c0015158:	53                   	push   ebx
c0015159:	83 ec 10             	sub    esp,0x10
c001515c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015160:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015163:	83 f8 02             	cmp    eax,0x2
c0015166:	77 10                	ja     c0015178 <SysWrite(regs*)+0x22>
c0015168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001516d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015170:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015176:	eb 0e                	jmp    c0015186 <SysWrite(regs*)+0x30>
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	50                   	push   eax
c001517c:	e8 80 e1 ff ff       	call   c0013301 <KeGetFileFromDescriptor(int)>
c0015181:	83 c4 10             	add    esp,0x10
c0015184:	89 c1                	mov    ecx,eax
c0015186:	83 c8 ff             	or     eax,0xffffffff
c0015189:	85 c9                	test   ecx,ecx
c001518b:	89 c2                	mov    edx,eax
c001518d:	74 28                	je     c00151b7 <SysWrite(regs*)+0x61>
c001518f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015197:	31 ff                	xor    edi,edi
c0015199:	83 ec 0c             	sub    esp,0xc
c001519c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001519e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00151a2:	52                   	push   edx
c00151a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151a6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00151a9:	57                   	push   edi
c00151aa:	56                   	push   esi
c00151ab:	51                   	push   ecx
c00151ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00151af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151b3:	83 c4 20             	add    esp,0x20
c00151b6:	99                   	cdq    
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	5b                   	pop    ebx
c00151bb:	5e                   	pop    esi
c00151bc:	5f                   	pop    edi
c00151bd:	c3                   	ret    

c00151be <SysWsbe(regs*)>:
c00151be:	55                   	push   ebp
c00151bf:	57                   	push   edi
c00151c0:	56                   	push   esi
c00151c1:	53                   	push   ebx
c00151c2:	83 ec 3c             	sub    esp,0x3c
c00151c5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00151c9:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00151d0:	75 2d                	jne    c00151ff <SysWsbe(regs*)+0x41>
c00151d2:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00151d9:	75 24                	jne    c00151ff <SysWsbe(regs*)+0x41>
c00151db:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00151e2:	75 1b                	jne    c00151ff <SysWsbe(regs*)+0x41>
c00151e4:	6a 01                	push   0x1
c00151e6:	6a 00                	push   0x0
c00151e8:	68 21 9f 00 c0       	push   0xc0009f21
c00151ed:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00151f3:	e8 88 1a 00 00       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	31 c0                	xor    eax,eax
c00151fd:	eb 52                	jmp    c0015251 <SysWsbe(regs*)+0x93>
c00151ff:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015203:	be bc 4b 02 c0       	mov    esi,0xc0024bbc
c0015208:	b9 0b 00 00 00       	mov    ecx,0xb
c001520d:	fc                   	cld    
c001520e:	83 ec 0c             	sub    esp,0xc
c0015211:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015213:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001521f:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015225:	8b 06                	mov    eax,DWORD PTR [esi]
c0015227:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001522a:	57                   	push   edi
c001522b:	e8 40 b3 fe ff       	call   c0000570 <strlen>
c0015230:	5a                   	pop    edx
c0015231:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015235:	52                   	push   edx
c0015236:	31 d2                	xor    edx,edx
c0015238:	57                   	push   edi
c0015239:	52                   	push   edx
c001523a:	50                   	push   eax
c001523b:	56                   	push   esi
c001523c:	ff d5                	call   ebp
c001523e:	83 c4 14             	add    esp,0x14
c0015241:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015244:	e8 c7 24 00 00       	call   c0017710 <terminateTask(int)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015251:	83 c4 3c             	add    esp,0x3c
c0015254:	31 d2                	xor    edx,edx
c0015256:	5b                   	pop    ebx
c0015257:	5e                   	pop    esi
c0015258:	5f                   	pop    edi
c0015259:	5d                   	pop    ebp
c001525a:	c3                   	ret    

c001525b <SysYield(regs*)>:
c001525b:	83 ec 0c             	sub    esp,0xc
c001525e:	fa                   	cli    
c001525f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015265:	e8 a6 1c 00 00       	call   c0016f10 <schedule()>
c001526a:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0015271:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015278:	75 01                	jne    c001527b <SysYield(regs*)+0x20>
c001527a:	fb                   	sti    
c001527b:	31 c0                	xor    eax,eax
c001527d:	31 d2                	xor    edx,edx
c001527f:	83 c4 0c             	add    esp,0xc
c0015282:	c3                   	ret    
c0015283:	90                   	nop

c0015284 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015284:	55                   	push   ebp
c0015285:	57                   	push   edi
c0015286:	56                   	push   esi
c0015287:	53                   	push   ebx
c0015288:	83 ec 2c             	sub    esp,0x2c
c001528b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001528f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015293:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001529b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001529f:	83 ec 08             	sub    esp,0x8
c00152a2:	50                   	push   eax
c00152a3:	68 e8 4b 02 c0       	push   0xc0024be8
c00152a8:	e8 b7 1c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152b4:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00152b7:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00152ba:	89 c1                	mov    ecx,eax
c00152bc:	80 f5 00             	xor    ch,0x0
c00152bf:	89 cf                	mov    edi,ecx
c00152c1:	89 d0                	mov    eax,edx
c00152c3:	80 f4 00             	xor    ah,0x0
c00152c6:	89 c5                	mov    ebp,eax
c00152c8:	89 e8                	mov    eax,ebp
c00152ca:	09 f8                	or     eax,edi
c00152cc:	74 22                	je     c00152f0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x6c>
c00152ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152d2:	8b 78 63             	mov    edi,DWORD PTR [eax+0x63]
c00152d5:	8b 68 67             	mov    ebp,DWORD PTR [eax+0x67]
c00152d8:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00152dd:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00152e3:	29 c7                	sub    edi,eax
c00152e5:	19 d5                	sbb    ebp,edx
c00152e7:	89 f8                	mov    eax,edi
c00152e9:	89 ea                	mov    edx,ebp
c00152eb:	eb 0f                	jmp    c00152fc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x78>
c00152ed:	8d 76 00             	lea    esi,[esi+0x0]
c00152f0:	b8 00 00 00 00       	mov    eax,0x0
c00152f5:	ba 00 00 00 00       	mov    edx,0x0
c00152fa:	66 90                	xchg   ax,ax
c00152fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015300:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0015304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015308:	80 f4 00             	xor    ah,0x0
c001530b:	89 c3                	mov    ebx,eax
c001530d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015311:	80 f4 00             	xor    ah,0x0
c0015314:	89 c6                	mov    esi,eax
c0015316:	89 f0                	mov    eax,esi
c0015318:	09 d8                	or     eax,ebx
c001531a:	74 1c                	je     c0015338 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xb4>
c001531c:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c0015322:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c0015328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001532c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015330:	01 c8                	add    eax,ecx
c0015332:	11 da                	adc    edx,ebx
c0015334:	eb 0e                	jmp    c0015344 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xc0>
c0015336:	66 90                	xchg   ax,ax
c0015338:	b8 00 00 00 00       	mov    eax,0x0
c001533d:	ba 00 00 00 00       	mov    edx,0x0
c0015342:	66 90                	xchg   ax,ax
c0015344:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0015348:	89 41 63             	mov    DWORD PTR [ecx+0x63],eax
c001534b:	89 51 67             	mov    DWORD PTR [ecx+0x67],edx
c001534e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015352:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c0015355:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c0015358:	83 ec 08             	sub    esp,0x8
c001535b:	50                   	push   eax
c001535c:	68 fc 4b 02 c0       	push   0xc0024bfc
c0015361:	e8 fe 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015366:	83 c4 10             	add    esp,0x10
c0015369:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001536d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015371:	83 c4 2c             	add    esp,0x2c
c0015374:	5b                   	pop    ebx
c0015375:	5e                   	pop    esi
c0015376:	5f                   	pop    edi
c0015377:	5d                   	pop    ebp
c0015378:	c3                   	ret    
c0015379:	8d 76 00             	lea    esi,[esi+0x0]

c001537c <KeCheckAlarm(ThreadControlBlock*)>:
c001537c:	56                   	push   esi
c001537d:	53                   	push   ebx
c001537e:	83 ec 04             	sub    esp,0x4
c0015381:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0015386:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001538c:	89 c1                	mov    ecx,eax
c001538e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015392:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c0015395:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c0015398:	83 ec 04             	sub    esp,0x4
c001539b:	51                   	push   ecx
c001539c:	50                   	push   eax
c001539d:	68 08 4c 02 c0       	push   0xc0024c08
c00153a2:	e8 bd 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153ae:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00153b1:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153b4:	89 c1                	mov    ecx,eax
c00153b6:	80 f5 00             	xor    ch,0x0
c00153b9:	89 cb                	mov    ebx,ecx
c00153bb:	89 d0                	mov    eax,edx
c00153bd:	80 f4 00             	xor    ah,0x0
c00153c0:	89 c6                	mov    esi,eax
c00153c2:	89 f0                	mov    eax,esi
c00153c4:	09 d8                	or     eax,ebx
c00153c6:	74 5c                	je     c0015424 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00153c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153cc:	8b 48 63             	mov    ecx,DWORD PTR [eax+0x63]
c00153cf:	8b 58 67             	mov    ebx,DWORD PTR [eax+0x67]
c00153d2:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00153d7:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00153dd:	39 c8                	cmp    eax,ecx
c00153df:	89 d0                	mov    eax,edx
c00153e1:	19 d8                	sbb    eax,ebx
c00153e3:	72 3f                	jb     c0015424 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00153e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153e9:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00153f0:	c7 40 67 00 00 00 00 	mov    DWORD PTR [eax+0x67],0x0
c00153f7:	83 ec 0c             	sub    esp,0xc
c00153fa:	68 24 4c 02 c0       	push   0xc0024c24
c00153ff:	e8 60 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001540b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001540e:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015414:	83 ec 08             	sub    esp,0x8
c0015417:	6a 0e                	push   0xe
c0015419:	50                   	push   eax
c001541a:	e8 3c bd ff ff       	call   c001115b <KeRaiseSignal(SigHandlerBlock*, int)>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	66 90                	xchg   ax,ax
c0015424:	90                   	nop
c0015425:	83 c4 04             	add    esp,0x4
c0015428:	5b                   	pop    ebx
c0015429:	5e                   	pop    esi
c001542a:	c3                   	ret    

c001542b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001542b:	55                   	push   ebp
c001542c:	57                   	push   edi
c001542d:	56                   	push   esi
c001542e:	53                   	push   ebx
c001542f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015435:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001543d:	0f 95 c0             	setne  al
c0015440:	31 d2                	xor    edx,edx
c0015442:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001544a:	0f 94 c2             	sete   dl
c001544d:	85 c2                	test   edx,eax
c001544f:	74 34                	je     c0015485 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015451:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001545c:	74 27                	je     c0015485 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001545e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015465:	05 00 10 00 00       	add    eax,0x1000
c001546a:	89 c1                	mov    ecx,eax
c001546c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015471:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0015477:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001547e:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0015485:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015495:	6a 01                	push   0x1
c0015497:	e8 d1 df ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c001549c:	83 c4 10             	add    esp,0x10
c001549f:	89 c3                	mov    ebx,eax
c00154a1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00154a7:	0f 86 26 01 00 00    	jbe    c00155d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00154ad:	c1 ee 0c             	shr    esi,0xc
c00154b0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00154b7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00154bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154c3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00154ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154ce:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00154d5:	29 ef                	sub    edi,ebp
c00154d7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00154db:	0f 83 f9 00 00 00    	jae    c00155da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c00154e1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00154e7:	76 05                	jbe    c00154ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00154e9:	bf 00 10 00 00       	mov    edi,0x1000
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	31 d2                	xor    edx,edx
c00154f3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00154fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00154fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015500:	50                   	push   eax
c0015501:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015505:	56                   	push   esi
c0015506:	52                   	push   edx
c0015507:	57                   	push   edi
c0015508:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001550f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015512:	83 c4 20             	add    esp,0x20
c0015515:	85 c0                	test   eax,eax
c0015517:	75 06                	jne    c001551f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015519:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001551d:	74 13                	je     c0015532 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001551f:	83 ec 0c             	sub    esp,0xc
c0015522:	53                   	push   ebx
c0015523:	e8 4d e2 ff ff       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	31 c0                	xor    eax,eax
c001552d:	e9 80 01 00 00       	jmp    c00156b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015532:	fa                   	cli    
c0015533:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015539:	e8 94 ac ff ff       	call   c00101d2 <Phys::allocatePage()>
c001553e:	6a 07                	push   0x7
c0015540:	89 c7                	mov    edi,eax
c0015542:	53                   	push   ebx
c0015543:	50                   	push   eax
c0015544:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015549:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001554c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015552:	e8 f9 e5 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015557:	83 c4 0c             	add    esp,0xc
c001555a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015561:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015567:	6a 00                	push   0x0
c0015569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015571:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015577:	e8 40 e4 ff ff       	call   c00139bc <VAS::mapOtherVASIn(bool, VAS*)>
c001557c:	58                   	pop    eax
c001557d:	5a                   	pop    edx
c001557e:	68 07 0c 00 00       	push   0xc07
c0015583:	55                   	push   ebp
c0015584:	57                   	push   edi
c0015585:	89 df                	mov    edi,ebx
c0015587:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001558e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015594:	6a 00                	push   0x0
c0015596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001559e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155a4:	e8 e9 e7 ff ff       	call   c0013d92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155a9:	b9 00 10 00 00       	mov    ecx,0x1000
c00155ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155b0:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00155b7:	83 c4 20             	add    esp,0x20
c00155ba:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00155c1:	75 01                	jne    c00155c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00155c3:	fb                   	sti    
c00155c4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00155ca:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00155ce:	e9 f0 fe ff ff       	jmp    c00154c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00155d3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00155da:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00155e1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00155e7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00155ed:	0f 86 b1 00 00 00    	jbe    c00156a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00155f3:	fa                   	cli    
c00155f4:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00155fa:	c1 ee 0c             	shr    esi,0xc
c00155fd:	51                   	push   ecx
c00155fe:	31 ff                	xor    edi,edi
c0015600:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015607:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001560d:	6a 00                	push   0x0
c001560f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015614:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015617:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001561d:	e8 9a e3 ff ff       	call   c00139bc <VAS::mapOtherVASIn(bool, VAS*)>
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	e8 a8 ab ff ff       	call   c00101d2 <Phys::allocatePage()>
c001562a:	47                   	inc    edi
c001562b:	6a 07                	push   0x7
c001562d:	53                   	push   ebx
c001562e:	50                   	push   eax
c001562f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015633:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015639:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001563c:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015642:	e8 09 e5 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015647:	58                   	pop    eax
c0015648:	5a                   	pop    edx
c0015649:	68 07 0c 00 00       	push   0xc07
c001564e:	55                   	push   ebp
c001564f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015655:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015659:	50                   	push   eax
c001565a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015661:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015667:	6a 00                	push   0x0
c0015669:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001566e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015671:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015677:	e8 16 e7 ff ff       	call   c0013d92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001567c:	83 c4 1c             	add    esp,0x1c
c001567f:	68 00 10 00 00       	push   0x1000
c0015684:	6a 00                	push   0x0
c0015686:	53                   	push   ebx
c0015687:	e8 64 ae fe ff       	call   c00004f0 <memset>
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	39 fe                	cmp    esi,edi
c0015691:	77 92                	ja     c0015625 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015693:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001569a:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00156a1:	75 01                	jne    c00156a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00156a3:	fb                   	sti    
c00156a4:	83 ec 0c             	sub    esp,0xc
c00156a7:	53                   	push   ebx
c00156a8:	e8 c8 e0 ff ff       	call   c0013775 <Virt::freeKernelVirtualPages(unsigned long)>
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	b0 01                	mov    al,0x1
c00156b2:	81 c4 2c 10 00 00    	add    esp,0x102c
c00156b8:	5b                   	pop    ebx
c00156b9:	5e                   	pop    esi
c00156ba:	5f                   	pop    edi
c00156bb:	5d                   	pop    ebp
c00156bc:	c3                   	ret    

c00156bd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00156bd:	55                   	push   ebp
c00156be:	57                   	push   edi
c00156bf:	56                   	push   esi
c00156c0:	53                   	push   ebx
c00156c1:	83 ec 48             	sub    esp,0x48
c00156c4:	68 14 01 00 00       	push   0x114
c00156c9:	e8 c9 a5 ff ff       	call   c000fc97 <malloc>
c00156ce:	83 c4 0c             	add    esp,0xc
c00156d1:	89 c6                	mov    esi,eax
c00156d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00156d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00156db:	50                   	push   eax
c00156dc:	e8 51 2a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00156e1:	58                   	pop    eax
c00156e2:	5a                   	pop    edx
c00156e3:	6a 01                	push   0x1
c00156e5:	56                   	push   esi
c00156e6:	e8 65 2a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00156eb:	83 c4 10             	add    esp,0x10
c00156ee:	85 c0                	test   eax,eax
c00156f0:	0f 85 43 01 00 00    	jne    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00156f6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00156fe:	83 ec 0c             	sub    esp,0xc
c0015701:	6a 34                	push   0x34
c0015703:	e8 8f a5 ff ff       	call   c000fc97 <malloc>
c0015708:	89 c3                	mov    ebx,eax
c001570a:	58                   	pop    eax
c001570b:	8b 06                	mov    eax,DWORD PTR [esi]
c001570d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015711:	57                   	push   edi
c0015712:	53                   	push   ebx
c0015713:	6a 00                	push   0x0
c0015715:	6a 34                	push   0x34
c0015717:	56                   	push   esi
c0015718:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001571b:	83 c4 20             	add    esp,0x20
c001571e:	85 c0                	test   eax,eax
c0015720:	0f 85 13 01 00 00    	jne    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015726:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001572c:	0f 85 07 01 00 00    	jne    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015732:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015735:	85 c0                	test   eax,eax
c0015737:	0f 84 fc 00 00 00    	je     c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001573d:	31 d2                	xor    edx,edx
c001573f:	55                   	push   ebp
c0015740:	52                   	push   edx
c0015741:	50                   	push   eax
c0015742:	56                   	push   esi
c0015743:	e8 c6 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	85 c0                	test   eax,eax
c001574d:	0f 85 e6 00 00 00    	jne    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015753:	83 ec 0c             	sub    esp,0xc
c0015756:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015759:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001575d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015761:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015765:	0f af c2             	imul   eax,edx
c0015768:	50                   	push   eax
c0015769:	e8 29 a5 ff ff       	call   c000fc97 <malloc>
c001576e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015770:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015774:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015777:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001577b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001577f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015783:	0f af c2             	imul   eax,edx
c0015786:	99                   	cdq    
c0015787:	52                   	push   edx
c0015788:	50                   	push   eax
c0015789:	56                   	push   esi
c001578a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001578d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015790:	83 c4 20             	add    esp,0x20
c0015793:	85 c0                	test   eax,eax
c0015795:	0f 84 9e 00 00 00    	je     c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001579b:	31 d2                	xor    edx,edx
c001579d:	51                   	push   ecx
c001579e:	52                   	push   edx
c001579f:	50                   	push   eax
c00157a0:	56                   	push   esi
c00157a1:	e8 68 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	85 c0                	test   eax,eax
c00157ab:	0f 85 88 00 00 00    	jne    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00157b1:	83 ec 0c             	sub    esp,0xc
c00157b4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00157b8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00157bc:	31 ed                	xor    ebp,ebp
c00157be:	0f af c2             	imul   eax,edx
c00157c1:	50                   	push   eax
c00157c2:	e8 d0 a4 ff ff       	call   c000fc97 <malloc>
c00157c7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00157c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00157cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157d4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00157d8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00157dc:	0f af c2             	imul   eax,edx
c00157df:	99                   	cdq    
c00157e0:	52                   	push   edx
c00157e1:	50                   	push   eax
c00157e2:	56                   	push   esi
c00157e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157e6:	83 c4 20             	add    esp,0x20
c00157e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00157f1:	0f b7 fd             	movzx  edi,bp
c00157f4:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00157f8:	73 7d                	jae    c0015877 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00157fa:	c1 e7 05             	shl    edi,0x5
c00157fd:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015801:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015804:	75 6b                	jne    c0015871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0015806:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001580d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015810:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015814:	52                   	push   edx
c0015815:	31 d2                	xor    edx,edx
c0015817:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001581a:	52                   	push   edx
c001581b:	50                   	push   eax
c001581c:	56                   	push   esi
c001581d:	e8 ec 29 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	85 c0                	test   eax,eax
c0015827:	74 17                	je     c0015840 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0015829:	83 ec 0c             	sub    esp,0xc
c001582c:	68 35 4c 02 c0       	push   0xc0024c35
c0015831:	e8 2e 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	31 c0                	xor    eax,eax
c001583b:	e9 87 00 00 00       	jmp    c00158c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0015840:	83 ec 0c             	sub    esp,0xc
c0015843:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015846:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015849:	50                   	push   eax
c001584a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001584e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015852:	56                   	push   esi
c0015853:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0015857:	e8 cf fb ff ff       	call   c001542b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001585c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015860:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015864:	83 c4 20             	add    esp,0x20
c0015867:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001586b:	73 04                	jae    c0015871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001586d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015871:	45                   	inc    ebp
c0015872:	e9 7a ff ff ff       	jmp    c00157f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0015877:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001587b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001587f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015883:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015889:	83 ec 0c             	sub    esp,0xc
c001588c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015892:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015897:	05 00 10 00 00       	add    eax,0x1000
c001589c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001589f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158a3:	e8 ff a3 ff ff       	call   c000fca7 <free>
c00158a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158ab:	e8 f7 a3 ff ff       	call   c000fca7 <free>
c00158b0:	58                   	pop    eax
c00158b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158b5:	e8 ed a3 ff ff       	call   c000fca7 <free>
c00158ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00158bd:	e8 ec 28 ff ff       	call   c00081ae <File::close()>
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	b0 01                	mov    al,0x1
c00158c7:	83 c4 3c             	add    esp,0x3c
c00158ca:	5b                   	pop    ebx
c00158cb:	5e                   	pop    esi
c00158cc:	5f                   	pop    edi
c00158cd:	5d                   	pop    ebp
c00158ce:	c3                   	ret    

c00158cf <Thr::runtimeReferenceHelper()>:
c00158cf:	83 ec 18             	sub    esp,0x18
c00158d2:	68 3d 4c 02 c0       	push   0xc0024c3d
c00158d7:	e8 88 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158dc:	fa                   	cli    
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	eb fe                	jmp    c00158e0 <Thr::runtimeReferenceHelper()+0x11>

c00158e2 <Thr::getAddressOfKernelSymbol(char const*)>:
c00158e2:	57                   	push   edi
c00158e3:	56                   	push   esi
c00158e4:	53                   	push   ebx
c00158e5:	31 db                	xor    ebx,ebx
c00158e7:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c00158ed:	7e 3c                	jle    c001592b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00158ef:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c00158f6:	31 ff                	xor    edi,edi
c00158f8:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c00158ff:	7e 27                	jle    c0015928 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015901:	50                   	push   eax
c0015902:	50                   	push   eax
c0015903:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015907:	8b 06                	mov    eax,DWORD PTR [esi]
c0015909:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c0015910:	50                   	push   eax
c0015911:	e8 3a ae fe ff       	call   c0000750 <strcmp>
c0015916:	83 c4 10             	add    esp,0x10
c0015919:	85 c0                	test   eax,eax
c001591b:	75 05                	jne    c0015922 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001591d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015920:	eb 0b                	jmp    c001592d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015922:	83 c6 10             	add    esi,0x10
c0015925:	47                   	inc    edi
c0015926:	eb d0                	jmp    c00158f8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015928:	43                   	inc    ebx
c0015929:	eb bc                	jmp    c00158e7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001592b:	31 c0                	xor    eax,eax
c001592d:	5b                   	pop    ebx
c001592e:	5e                   	pop    esi
c001592f:	5f                   	pop    edi
c0015930:	c3                   	ret    

c0015931 <Thr::loadKernelSymbolTable(char const*)>:
c0015931:	55                   	push   ebp
c0015932:	57                   	push   edi
c0015933:	56                   	push   esi
c0015934:	53                   	push   ebx
c0015935:	83 ec 68             	sub    esp,0x68
c0015938:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c001593e:	68 14 01 00 00       	push   0x114
c0015943:	e8 4f a3 ff ff       	call   c000fc97 <malloc>
c0015948:	83 c4 0c             	add    esp,0xc
c001594b:	89 c3                	mov    ebx,eax
c001594d:	56                   	push   esi
c001594e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015952:	50                   	push   eax
c0015953:	e8 da 27 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0015958:	5e                   	pop    esi
c0015959:	5f                   	pop    edi
c001595a:	6a 01                	push   0x1
c001595c:	53                   	push   ebx
c001595d:	e8 ee 27 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	85 c0                	test   eax,eax
c0015967:	74 0a                	je     c0015973 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	68 5f 4c 02 c0       	push   0xc0024c5f
c0015971:	eb 34                	jmp    c00159a7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015973:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001597b:	83 ec 0c             	sub    esp,0xc
c001597e:	6a 34                	push   0x34
c0015980:	e8 12 a3 ff ff       	call   c000fc97 <malloc>
c0015985:	59                   	pop    ecx
c0015986:	89 c7                	mov    edi,eax
c0015988:	8d 74 24 34          	lea    esi,[esp+0x34]
c001598c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001598e:	56                   	push   esi
c001598f:	57                   	push   edi
c0015990:	6a 00                	push   0x0
c0015992:	6a 34                	push   0x34
c0015994:	53                   	push   ebx
c0015995:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015998:	83 c4 20             	add    esp,0x20
c001599b:	85 c0                	test   eax,eax
c001599d:	74 17                	je     c00159b6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001599f:	83 ec 0c             	sub    esp,0xc
c00159a2:	68 76 4c 02 c0       	push   0xc0024c76
c00159a7:	e8 32 a6 ff ff       	call   c000ffde <KePanic(char const*)>
c00159ac:	83 c4 10             	add    esp,0x10
c00159af:	31 c0                	xor    eax,eax
c00159b1:	e9 31 02 00 00       	jmp    c0015be7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00159b6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00159bc:	75 e1                	jne    c001599f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159be:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00159c1:	85 c0                	test   eax,eax
c00159c3:	74 da                	je     c001599f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159c5:	52                   	push   edx
c00159c6:	31 d2                	xor    edx,edx
c00159c8:	52                   	push   edx
c00159c9:	50                   	push   eax
c00159ca:	53                   	push   ebx
c00159cb:	e8 3e 28 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	85 c0                	test   eax,eax
c00159d5:	75 c8                	jne    c001599f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159d7:	83 ec 0c             	sub    esp,0xc
c00159da:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159e2:	31 ed                	xor    ebp,ebp
c00159e4:	0f af c2             	imul   eax,edx
c00159e7:	50                   	push   eax
c00159e8:	e8 aa a2 ff ff       	call   c000fc97 <malloc>
c00159ed:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00159ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00159f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00159f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159fa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159fe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a02:	0f af c2             	imul   eax,edx
c0015a05:	99                   	cdq    
c0015a06:	52                   	push   edx
c0015a07:	50                   	push   eax
c0015a08:	53                   	push   ebx
c0015a09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a0c:	83 c4 20             	add    esp,0x20
c0015a0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015a17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015a1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a2f:	0f b7 f5             	movzx  esi,bp
c0015a32:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015a36:	0f 83 a7 00 00 00    	jae    c0015ae3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015a3c:	6b f6 28             	imul   esi,esi,0x28
c0015a3f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a43:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a4a:	50                   	push   eax
c0015a4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a4f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015a53:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a55:	6b c0 28             	imul   eax,eax,0x28
c0015a58:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015a5c:	89 d0                	mov    eax,edx
c0015a5e:	31 d2                	xor    edx,edx
c0015a60:	52                   	push   edx
c0015a61:	50                   	push   eax
c0015a62:	53                   	push   ebx
c0015a63:	e8 a6 27 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015a68:	83 c4 0c             	add    esp,0xc
c0015a6b:	6a 20                	push   0x20
c0015a6d:	6a 00                	push   0x0
c0015a6f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015a73:	52                   	push   edx
c0015a74:	e8 77 aa fe ff       	call   c00004f0 <memset>
c0015a79:	58                   	pop    eax
c0015a7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a7c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015a80:	51                   	push   ecx
c0015a81:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015a85:	52                   	push   edx
c0015a86:	6a 00                	push   0x0
c0015a88:	6a 1f                	push   0x1f
c0015a8a:	53                   	push   ebx
c0015a8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a8e:	83 c4 18             	add    esp,0x18
c0015a91:	68 8d 4c 02 c0       	push   0xc0024c8d
c0015a96:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015a9a:	52                   	push   edx
c0015a9b:	e8 b0 ac fe ff       	call   c0000750 <strcmp>
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	85 c0                	test   eax,eax
c0015aa5:	75 0f                	jne    c0015ab6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015aa7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015aaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015aae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ab6:	50                   	push   eax
c0015ab7:	50                   	push   eax
c0015ab8:	68 95 4c 02 c0       	push   0xc0024c95
c0015abd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015ac1:	50                   	push   eax
c0015ac2:	e8 89 ac fe ff       	call   c0000750 <strcmp>
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	85 c0                	test   eax,eax
c0015acc:	75 0f                	jne    c0015add <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015ace:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ad1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ad5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ad9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015add:	45                   	inc    ebp
c0015ade:	e9 4c ff ff ff       	jmp    c0015a2f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015ae3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015ae8:	75 10                	jne    c0015afa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015aea:	83 ec 0c             	sub    esp,0xc
c0015aed:	68 9d 4c 02 c0       	push   0xc0024c9d
c0015af2:	e8 e7 a4 ff ff       	call   c000ffde <KePanic(char const*)>
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015aff:	75 10                	jne    c0015b11 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015b01:	83 ec 0c             	sub    esp,0xc
c0015b04:	68 9d 4c 02 c0       	push   0xc0024c9d
c0015b09:	e8 d0 a4 ff ff       	call   c000ffde <KePanic(char const*)>
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	31 d2                	xor    edx,edx
c0015b13:	50                   	push   eax
c0015b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b18:	52                   	push   edx
c0015b19:	50                   	push   eax
c0015b1a:	53                   	push   ebx
c0015b1b:	e8 ee 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015b20:	5a                   	pop    edx
c0015b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b25:	e8 6d a1 ff ff       	call   c000fc97 <malloc>
c0015b2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b32:	31 c9                	xor    ecx,ecx
c0015b34:	5e                   	pop    esi
c0015b35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b37:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015b3b:	55                   	push   ebp
c0015b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b40:	51                   	push   ecx
c0015b41:	52                   	push   edx
c0015b42:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015b46:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015b4a:	53                   	push   ebx
c0015b4b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b4e:	83 c4 14             	add    esp,0x14
c0015b51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015b55:	e8 3d a1 ff ff       	call   c000fc97 <malloc>
c0015b5a:	89 c6                	mov    esi,eax
c0015b5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b61:	56                   	push   esi
c0015b62:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015b66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b6a:	51                   	push   ecx
c0015b6b:	52                   	push   edx
c0015b6c:	53                   	push   ebx
c0015b6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015b74:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015b7a:	83 c4 1c             	add    esp,0x1c
c0015b7d:	c1 e8 04             	shr    eax,0x4
c0015b80:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b8b:	31 d2                	xor    edx,edx
c0015b8d:	52                   	push   edx
c0015b8e:	50                   	push   eax
c0015b8f:	53                   	push   ebx
c0015b90:	e8 79 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015b95:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b97:	31 d2                	xor    edx,edx
c0015b99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b9c:	56                   	push   esi
c0015b9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ba1:	52                   	push   edx
c0015ba2:	50                   	push   eax
c0015ba3:	53                   	push   ebx
c0015ba4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ba7:	83 c4 14             	add    esp,0x14
c0015baa:	53                   	push   ebx
c0015bab:	e8 fe 25 ff ff       	call   c00081ae <File::close()>
c0015bb0:	5d                   	pop    ebp
c0015bb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bb5:	e8 ed a0 ff ff       	call   c000fca7 <free>
c0015bba:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015bbd:	e8 e5 a0 ff ff       	call   c000fca7 <free>
c0015bc2:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0015bc7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015bcb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bce:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c0015bd5:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c0015bdc:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0015be2:	83 c4 10             	add    esp,0x10
c0015be5:	b0 01                	mov    al,0x1
c0015be7:	83 c4 5c             	add    esp,0x5c
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	5f                   	pop    edi
c0015bed:	5d                   	pop    ebp
c0015bee:	c3                   	ret    

c0015bef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015bef:	55                   	push   ebp
c0015bf0:	57                   	push   edi
c0015bf1:	56                   	push   esi
c0015bf2:	53                   	push   ebx
c0015bf3:	81 ec 68 03 00 00    	sub    esp,0x368
c0015bf9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015c00:	8b 1d 58 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea58
c0015c06:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015c0a:	68 14 01 00 00       	push   0x114
c0015c0f:	e8 83 a0 ff ff       	call   c000fc97 <malloc>
c0015c14:	83 c4 0c             	add    esp,0xc
c0015c17:	89 c5                	mov    ebp,eax
c0015c19:	53                   	push   ebx
c0015c1a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015c21:	50                   	push   eax
c0015c22:	e8 0b 25 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0015c27:	5e                   	pop    esi
c0015c28:	5f                   	pop    edi
c0015c29:	6a 01                	push   0x1
c0015c2b:	55                   	push   ebp
c0015c2c:	e8 1f 25 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	85 c0                	test   eax,eax
c0015c36:	0f 85 aa 06 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c3c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	6a 34                	push   0x34
c0015c49:	e8 49 a0 ff ff       	call   c000fc97 <malloc>
c0015c4e:	5b                   	pop    ebx
c0015c4f:	89 c7                	mov    edi,eax
c0015c51:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015c55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015c58:	53                   	push   ebx
c0015c59:	57                   	push   edi
c0015c5a:	6a 00                	push   0x0
c0015c5c:	6a 34                	push   0x34
c0015c5e:	55                   	push   ebp
c0015c5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c62:	83 c4 20             	add    esp,0x20
c0015c65:	85 c0                	test   eax,eax
c0015c67:	0f 85 79 06 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c6d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015c73:	0f 85 6d 06 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c79:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015c7c:	85 c0                	test   eax,eax
c0015c7e:	0f 84 62 06 00 00    	je     c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c84:	31 d2                	xor    edx,edx
c0015c86:	51                   	push   ecx
c0015c87:	52                   	push   edx
c0015c88:	50                   	push   eax
c0015c89:	55                   	push   ebp
c0015c8a:	e8 7f 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015c8f:	83 c4 10             	add    esp,0x10
c0015c92:	85 c0                	test   eax,eax
c0015c94:	0f 85 4c 06 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015ca0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ca4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ca8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cac:	0f af c2             	imul   eax,edx
c0015caf:	50                   	push   eax
c0015cb0:	e8 e2 9f ff ff       	call   c000fc97 <malloc>
c0015cb5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015cb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cc3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cc7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ccb:	0f af c2             	imul   eax,edx
c0015cce:	99                   	cdq    
c0015ccf:	52                   	push   edx
c0015cd0:	50                   	push   eax
c0015cd1:	55                   	push   ebp
c0015cd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cd5:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015cd8:	83 c4 20             	add    esp,0x20
c0015cdb:	85 c0                	test   eax,eax
c0015cdd:	0f 84 03 06 00 00    	je     c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015ce3:	52                   	push   edx
c0015ce4:	31 d2                	xor    edx,edx
c0015ce6:	52                   	push   edx
c0015ce7:	50                   	push   eax
c0015ce8:	55                   	push   ebp
c0015ce9:	e8 20 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	85 c0                	test   eax,eax
c0015cf3:	0f 85 ed 05 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015cf9:	83 ec 0c             	sub    esp,0xc
c0015cfc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d00:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d04:	31 f6                	xor    esi,esi
c0015d06:	0f af c2             	imul   eax,edx
c0015d09:	50                   	push   eax
c0015d0a:	e8 88 9f ff ff       	call   c000fc97 <malloc>
c0015d0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d1d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d21:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d25:	0f af c2             	imul   eax,edx
c0015d28:	99                   	cdq    
c0015d29:	52                   	push   edx
c0015d2a:	50                   	push   eax
c0015d2b:	55                   	push   ebp
c0015d2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d2f:	83 c4 20             	add    esp,0x20
c0015d32:	0f b7 de             	movzx  ebx,si
c0015d35:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015d39:	0f 83 87 00 00 00    	jae    c0015dc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015d3f:	c1 e3 05             	shl    ebx,0x5
c0015d42:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015d46:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015d49:	75 75                	jne    c0015dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015d4b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015d4e:	31 d2                	xor    edx,edx
c0015d50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5b:	50                   	push   eax
c0015d5c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015d5f:	52                   	push   edx
c0015d60:	50                   	push   eax
c0015d61:	55                   	push   ebp
c0015d62:	e8 a7 24 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	85 c0                	test   eax,eax
c0015d6c:	0f 85 74 05 00 00    	jne    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015d72:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015d79:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d7c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015d80:	31 d2                	xor    edx,edx
c0015d82:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d94:	50                   	push   eax
c0015d95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9d:	52                   	push   edx
c0015d9e:	50                   	push   eax
c0015d9f:	55                   	push   ebp
c0015da0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015da3:	83 c4 1c             	add    esp,0x1c
c0015da6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015da9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015dac:	50                   	push   eax
c0015dad:	6a 00                	push   0x0
c0015daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015db7:	50                   	push   eax
c0015db8:	e8 33 a7 fe ff       	call   c00004f0 <memset>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	46                   	inc    esi
c0015dc1:	e9 6c ff ff ff       	jmp    c0015d32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015dc6:	53                   	push   ebx
c0015dc7:	31 db                	xor    ebx,ebx
c0015dc9:	68 00 01 00 00       	push   0x100
c0015dce:	6a 00                	push   0x0
c0015dd0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015dd4:	50                   	push   eax
c0015dd5:	e8 16 a7 fe ff       	call   c00004f0 <memset>
c0015dda:	83 c4 0c             	add    esp,0xc
c0015ddd:	68 00 01 00 00       	push   0x100
c0015de2:	6a 00                	push   0x0
c0015de4:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015deb:	50                   	push   eax
c0015dec:	e8 ff a6 fe ff       	call   c00004f0 <memset>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015dfc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e04:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015e0c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015e14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015e1c:	0f b7 f3             	movzx  esi,bx
c0015e1f:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015e23:	0f 83 2d 01 00 00    	jae    c0015f56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015e29:	6b f6 28             	imul   esi,esi,0x28
c0015e2c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015e30:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015e33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e37:	52                   	push   edx
c0015e38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e3c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015e40:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e42:	6b d2 28             	imul   edx,edx,0x28
c0015e45:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015e49:	31 d2                	xor    edx,edx
c0015e4b:	52                   	push   edx
c0015e4c:	50                   	push   eax
c0015e4d:	55                   	push   ebp
c0015e4e:	e8 bb 23 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015e53:	83 c4 0c             	add    esp,0xc
c0015e56:	6a 20                	push   0x20
c0015e58:	6a 00                	push   0x0
c0015e5a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015e61:	51                   	push   ecx
c0015e62:	e8 89 a6 fe ff       	call   c00004f0 <memset>
c0015e67:	59                   	pop    ecx
c0015e68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015e6b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015e6f:	52                   	push   edx
c0015e70:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015e77:	51                   	push   ecx
c0015e78:	6a 00                	push   0x0
c0015e7a:	6a 1f                	push   0x1f
c0015e7c:	55                   	push   ebp
c0015e7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e80:	83 c4 1c             	add    esp,0x1c
c0015e83:	6a 09                	push   0x9
c0015e85:	68 b7 4c 02 c0       	push   0xc0024cb7
c0015e8a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015e91:	51                   	push   ecx
c0015e92:	e8 e9 a4 fe ff       	call   c0000380 <memcmp>
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	85 c0                	test   eax,eax
c0015e9c:	75 21                	jne    c0015ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015eaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015eb1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015eb8:	89 d0                	mov    eax,edx
c0015eba:	40                   	inc    eax
c0015ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ebf:	50                   	push   eax
c0015ec0:	6a 09                	push   0x9
c0015ec2:	68 c1 4c 02 c0       	push   0xc0024cc1
c0015ec7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ece:	50                   	push   eax
c0015ecf:	e8 ac a4 fe ff       	call   c0000380 <memcmp>
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	85 c0                	test   eax,eax
c0015ed9:	75 21                	jne    c0015efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015edb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015edf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ee3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ee7:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015eeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015eee:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015ef5:	89 d0                	mov    eax,edx
c0015ef7:	40                   	inc    eax
c0015ef8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015efc:	50                   	push   eax
c0015efd:	50                   	push   eax
c0015efe:	68 8d 4c 02 c0       	push   0xc0024c8d
c0015f03:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f0a:	50                   	push   eax
c0015f0b:	e8 40 a8 fe ff       	call   c0000750 <strcmp>
c0015f10:	83 c4 10             	add    esp,0x10
c0015f13:	85 c0                	test   eax,eax
c0015f15:	75 0f                	jne    c0015f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015f17:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f26:	50                   	push   eax
c0015f27:	50                   	push   eax
c0015f28:	68 95 4c 02 c0       	push   0xc0024c95
c0015f2d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f34:	50                   	push   eax
c0015f35:	e8 16 a8 fe ff       	call   c0000750 <strcmp>
c0015f3a:	83 c4 10             	add    esp,0x10
c0015f3d:	85 c0                	test   eax,eax
c0015f3f:	75 0f                	jne    c0015f50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015f41:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015f48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f50:	43                   	inc    ebx
c0015f51:	e9 c6 fe ff ff       	jmp    c0015e1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015f56:	31 d2                	xor    edx,edx
c0015f58:	50                   	push   eax
c0015f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f5d:	52                   	push   edx
c0015f5e:	50                   	push   eax
c0015f5f:	55                   	push   ebp
c0015f60:	e8 a9 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015f65:	58                   	pop    eax
c0015f66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f6a:	e8 28 9d ff ff       	call   c000fc97 <malloc>
c0015f6f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f72:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015f76:	31 d2                	xor    edx,edx
c0015f78:	58                   	pop    eax
c0015f79:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015f7d:	53                   	push   ebx
c0015f7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015f82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f86:	52                   	push   edx
c0015f87:	50                   	push   eax
c0015f88:	55                   	push   ebp
c0015f89:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f8c:	83 c4 14             	add    esp,0x14
c0015f8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015f93:	e8 ff 9c ff ff       	call   c000fc97 <malloc>
c0015f98:	31 d2                	xor    edx,edx
c0015f9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015f9e:	83 c4 0c             	add    esp,0xc
c0015fa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fa5:	52                   	push   edx
c0015fa6:	50                   	push   eax
c0015fa7:	55                   	push   ebp
c0015fa8:	e8 61 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015fad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fb0:	31 d2                	xor    edx,edx
c0015fb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fbd:	52                   	push   edx
c0015fbe:	50                   	push   eax
c0015fbf:	55                   	push   ebp
c0015fc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fc3:	83 c4 20             	add    esp,0x20
c0015fc6:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015fcb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015fd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015fd7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fdb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015fdf:	0f 84 05 03 00 00    	je     c00162ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015fe5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015fec:	31 d2                	xor    edx,edx
c0015fee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ff2:	c1 e8 03             	shr    eax,0x3
c0015ff5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015ff9:	51                   	push   ecx
c0015ffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ffe:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016002:	52                   	push   edx
c0016003:	50                   	push   eax
c0016004:	55                   	push   ebp
c0016005:	e8 04 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001600a:	5b                   	pop    ebx
c001600b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001600f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016016:	e8 7c 9c ff ff       	call   c000fc97 <malloc>
c001601b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001601e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016022:	31 d2                	xor    edx,edx
c0016024:	5e                   	pop    esi
c0016025:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016029:	50                   	push   eax
c001602a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001602e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016032:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016039:	52                   	push   edx
c001603a:	50                   	push   eax
c001603b:	55                   	push   ebp
c001603c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001603f:	83 c4 20             	add    esp,0x20
c0016042:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001604a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001604e:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0016052:	0f 8d 76 02 00 00    	jge    c00162ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0016058:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001605c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016060:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0016065:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0016068:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001606c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016070:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0016074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016078:	c1 e8 08             	shr    eax,0x8
c001607b:	89 c6                	mov    esi,eax
c001607d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016081:	c1 e6 04             	shl    esi,0x4
c0016084:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0016088:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001608b:	85 db                	test   ebx,ebx
c001608d:	0f 85 b3 00 00 00    	jne    c0016146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0016093:	83 ec 0c             	sub    esp,0xc
c0016096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001609a:	03 06                	add    eax,DWORD PTR [esi]
c001609c:	50                   	push   eax
c001609d:	e8 40 f8 ff ff       	call   c00158e2 <Thr::getAddressOfKernelSymbol(char const*)>
c00160a2:	83 c4 10             	add    esp,0x10
c00160a5:	89 c3                	mov    ebx,eax
c00160a7:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00160ac:	85 c0                	test   eax,eax
c00160ae:	0f 85 92 00 00 00    	jne    c0016146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160bb:	03 06                	add    eax,DWORD PTR [esi]
c00160bd:	50                   	push   eax
c00160be:	e8 ad a9 ff ff       	call   c0010a70 <KeResolveCompatibilitySymbol(char*)>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	89 c3                	mov    ebx,eax
c00160c8:	85 c0                	test   eax,eax
c00160ca:	75 7a                	jne    c0016146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160cc:	51                   	push   ecx
c00160cd:	51                   	push   ecx
c00160ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160d2:	03 06                	add    eax,DWORD PTR [esi]
c00160d4:	50                   	push   eax
c00160d5:	68 cb 4c 02 c0       	push   0xc0024ccb
c00160da:	e8 85 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00160df:	58                   	pop    eax
c00160e0:	5a                   	pop    edx
c00160e1:	68 e5 4c 02 c0       	push   0xc0024ce5
c00160e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00160ed:	50                   	push   eax
c00160ee:	e8 4d a5 fe ff       	call   c0000640 <strcpy>
c00160f3:	59                   	pop    ecx
c00160f4:	58                   	pop    eax
c00160f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160f9:	03 06                	add    eax,DWORD PTR [esi]
c00160fb:	50                   	push   eax
c00160fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016103:	50                   	push   eax
c0016104:	e8 37 a7 fe ff       	call   c0000840 <strcat>
c0016109:	58                   	pop    eax
c001610a:	5a                   	pop    edx
c001610b:	68 7f 4d 02 c0       	push   0xc0024d7f
c0016110:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016117:	50                   	push   eax
c0016118:	e8 23 a7 fe ff       	call   c0000840 <strcat>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016125:	0f 84 5d 01 00 00    	je     c0016288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016135:	50                   	push   eax
c0016136:	e8 a3 9e ff ff       	call   c000ffde <KePanic(char const*)>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016142:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0016146:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001614b:	83 f8 01             	cmp    eax,0x1
c001614e:	0f 85 8f 00 00 00    	jne    c00161e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0016154:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001615b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001615f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0016163:	01 ce                	add    esi,ecx
c0016165:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001616d:	0f 94 c0             	sete   al
c0016170:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016178:	0f 94 c2             	sete   dl
c001617b:	09 c2                	or     edx,eax
c001617d:	8b 06                	mov    eax,DWORD PTR [esi]
c001617f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0016184:	0f b6 d2             	movzx  edx,dl
c0016187:	74 41                	je     c00161ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0016189:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001618c:	85 d2                	test   edx,edx
c001618e:	75 15                	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0016190:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016194:	66 83 f8 0c          	cmp    ax,0xc
c0016198:	76 05                	jbe    c001619f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001619a:	b8 0c 00 00 00       	mov    eax,0xc
c001619f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00161a3:	76 37                	jbe    c00161dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161a5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00161a9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00161ae:	0f 84 d4 00 00 00    	je     c0016288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00161b4:	83 ec 0c             	sub    esp,0xc
c00161b7:	68 fc 4c 02 c0       	push   0xc0024cfc
c00161bc:	e8 1d 9e ff ff       	call   c000ffde <KePanic(char const*)>
c00161c1:	83 c4 10             	add    esp,0x10
c00161c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161c8:	eb 12                	jmp    c00161dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161ca:	01 c1                	add    ecx,eax
c00161cc:	85 d2                	test   edx,edx
c00161ce:	75 0c                	jne    c00161dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00161d4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00161d8:	77 02                	ja     c00161dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161da:	01 d9                	add    ecx,ebx
c00161dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00161de:	e9 e2 00 00 00       	jmp    c00162c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00161e3:	83 f8 02             	cmp    eax,0x2
c00161e6:	75 77                	jne    c001625f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00161e8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00161ef:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00161f3:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00161f7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00161ff:	74 21                	je     c0016222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0016201:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016209:	74 17                	je     c0016222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001620b:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001620f:	b8 0a 00 00 00       	mov    eax,0xa
c0016214:	83 fa 0e             	cmp    edx,0xe
c0016217:	77 03                	ja     c001621c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0016219:	8d 42 fc             	lea    eax,[edx-0x4]
c001621c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016220:	76 17                	jbe    c0016239 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0016222:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016227:	74 5f                	je     c0016288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0016229:	83 ec 0c             	sub    esp,0xc
c001622c:	68 18 4d 02 c0       	push   0xc0024d18
c0016231:	e8 a8 9d ff ff       	call   c000ffde <KePanic(char const*)>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	8b 06                	mov    eax,DWORD PTR [esi]
c001623b:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0016240:	74 13                	je     c0016255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0016242:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016246:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001624d:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0016251:	01 d0                	add    eax,edx
c0016253:	eb 04                	jmp    c0016259 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0016255:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016259:	01 c3                	add    ebx,eax
c001625b:	89 1e                	mov    DWORD PTR [esi],ebx
c001625d:	eb 66                	jmp    c00162c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001625f:	52                   	push   edx
c0016260:	52                   	push   edx
c0016261:	50                   	push   eax
c0016262:	68 34 4d 02 c0       	push   0xc0024d34
c0016267:	e8 f8 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001626c:	83 c4 10             	add    esp,0x10
c001626f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016274:	74 12                	je     c0016288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	68 3f 4d 02 c0       	push   0xc0024d3f
c001627e:	e8 5b 9d ff ff       	call   c000ffde <KePanic(char const*)>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	eb 3d                	jmp    c00162c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	55                   	push   ebp
c001628c:	e8 1d 1f ff ff       	call   c00081ae <File::close()>
c0016291:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016294:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016297:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001629a:	59                   	pop    ecx
c001629b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001629f:	e8 03 9a ff ff       	call   c000fca7 <free>
c00162a4:	5b                   	pop    ebx
c00162a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00162a9:	e8 f9 99 ff ff       	call   c000fca7 <free>
c00162ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162b1:	e8 f1 99 ff ff       	call   c000fca7 <free>
c00162b6:	5e                   	pop    esi
c00162b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162bb:	e8 e7 99 ff ff       	call   c000fca7 <free>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	eb 21                	jmp    c00162e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00162c5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00162c9:	e9 7c fd ff ff       	jmp    c001604a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162d5:	e8 cd 99 ff ff       	call   c000fca7 <free>
c00162da:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	e9 f1 fc ff ff       	jmp    c0015fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00162e6:	31 c0                	xor    eax,eax
c00162e8:	eb 33                	jmp    c001631d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	55                   	push   ebp
c00162ee:	e8 bb 1e ff ff       	call   c00081ae <File::close()>
c00162f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00162f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162fc:	58                   	pop    eax
c00162fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016301:	e8 a1 99 ff ff       	call   c000fca7 <free>
c0016306:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016309:	e8 99 99 ff ff       	call   c000fca7 <free>
c001630e:	5a                   	pop    edx
c001630f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016313:	e8 8f 99 ff ff       	call   c000fca7 <free>
c0016318:	83 c4 10             	add    esp,0x10
c001631b:	b0 01                	mov    al,0x1
c001631d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016323:	5b                   	pop    ebx
c0016324:	5e                   	pop    esi
c0016325:	5f                   	pop    edi
c0016326:	5d                   	pop    ebp
c0016327:	c3                   	ret    

c0016328 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016328:	56                   	push   esi
c0016329:	31 d2                	xor    edx,edx
c001632b:	53                   	push   ebx
c001632c:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016332:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016336:	39 d3                	cmp    ebx,edx
c0016338:	7e 1b                	jle    c0016355 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001633a:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016341:	39 c8                	cmp    eax,ecx
c0016343:	77 0d                	ja     c0016352 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016345:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c001634c:	01 c6                	add    esi,eax
c001634e:	39 ce                	cmp    esi,ecx
c0016350:	77 05                	ja     c0016357 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016352:	42                   	inc    edx
c0016353:	eb e1                	jmp    c0016336 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016355:	31 c0                	xor    eax,eax
c0016357:	5b                   	pop    ebx
c0016358:	5e                   	pop    esi
c0016359:	c3                   	ret    

c001635a <Thr::getDriverNameFromAddress(unsigned long)>:
c001635a:	53                   	push   ebx
c001635b:	31 c0                	xor    eax,eax
c001635d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016361:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016367:	39 c3                	cmp    ebx,eax
c0016369:	7e 22                	jle    c001638d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001636b:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c0016372:	39 ca                	cmp    edx,ecx
c0016374:	77 14                	ja     c001638a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016376:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c001637d:	39 ca                	cmp    edx,ecx
c001637f:	76 09                	jbe    c001638a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016381:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c0016388:	eb 05                	jmp    c001638f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001638a:	40                   	inc    eax
c001638b:	eb da                	jmp    c0016367 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001638d:	31 c0                	xor    eax,eax
c001638f:	5b                   	pop    ebx
c0016390:	c3                   	ret    

c0016391 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016391:	53                   	push   ebx
c0016392:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016396:	53                   	push   ebx
c0016397:	e8 8c ff ff ff       	call   c0016328 <Thr::getDriverBaseFromAddress(unsigned long)>
c001639c:	5a                   	pop    edx
c001639d:	31 d2                	xor    edx,edx
c001639f:	85 c0                	test   eax,eax
c00163a1:	74 04                	je     c00163a7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00163a3:	89 da                	mov    edx,ebx
c00163a5:	29 c2                	sub    edx,eax
c00163a7:	89 d0                	mov    eax,edx
c00163a9:	5b                   	pop    ebx
c00163aa:	c3                   	ret    

c00163ab <Thr::loadDLL(char const*, bool)>:
c00163ab:	55                   	push   ebp
c00163ac:	57                   	push   edi
c00163ad:	56                   	push   esi
c00163ae:	53                   	push   ebx
c00163af:	81 ec 34 01 00 00    	sub    esp,0x134
c00163b5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00163bc:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00163c3:	56                   	push   esi
c00163c4:	68 57 4d 02 c0       	push   0xc0024d57
c00163c9:	e8 96 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00163ce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00163d5:	e8 bd 98 ff ff       	call   c000fc97 <malloc>
c00163da:	83 c4 0c             	add    esp,0xc
c00163dd:	89 c3                	mov    ebx,eax
c00163df:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00163e5:	56                   	push   esi
c00163e6:	50                   	push   eax
c00163e7:	e8 46 1d ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	85 db                	test   ebx,ebx
c00163f1:	75 3c                	jne    c001642f <Thr::loadDLL(char const*, bool)+0x84>
c00163f3:	89 f8                	mov    eax,edi
c00163f5:	84 c0                	test   al,al
c00163f7:	0f 84 f3 01 00 00    	je     c00165f0 <Thr::loadDLL(char const*, bool)+0x245>
c00163fd:	55                   	push   ebp
c00163fe:	55                   	push   ebp
c00163ff:	68 68 4d 02 c0       	push   0xc0024d68
c0016404:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016408:	55                   	push   ebp
c0016409:	e8 32 a2 fe ff       	call   c0000640 <strcpy>
c001640e:	58                   	pop    eax
c001640f:	5a                   	pop    edx
c0016410:	56                   	push   esi
c0016411:	55                   	push   ebp
c0016412:	e8 29 a4 fe ff       	call   c0000840 <strcat>
c0016417:	59                   	pop    ecx
c0016418:	58                   	pop    eax
c0016419:	68 7f 4d 02 c0       	push   0xc0024d7f
c001641e:	55                   	push   ebp
c001641f:	e8 1c a4 fe ff       	call   c0000840 <strcat>
c0016424:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016427:	e8 b2 9b ff ff       	call   c000ffde <KePanic(char const*)>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	51                   	push   ecx
c0016430:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016434:	50                   	push   eax
c0016435:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016439:	50                   	push   eax
c001643a:	53                   	push   ebx
c001643b:	e8 12 20 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0016440:	83 c4 10             	add    esp,0x10
c0016443:	89 c5                	mov    ebp,eax
c0016445:	85 db                	test   ebx,ebx
c0016447:	74 0c                	je     c0016455 <Thr::loadDLL(char const*, bool)+0xaa>
c0016449:	83 ec 0c             	sub    esp,0xc
c001644c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001644e:	53                   	push   ebx
c001644f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	83 ec 0c             	sub    esp,0xc
c0016458:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001645d:	50                   	push   eax
c001645e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016462:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016466:	55                   	push   ebp
c0016467:	68 81 4d 02 c0       	push   0xc0024d81
c001646c:	e8 f3 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016471:	83 c4 20             	add    esp,0x20
c0016474:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016479:	75 0a                	jne    c0016485 <Thr::loadDLL(char const*, bool)+0xda>
c001647b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001647f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016483:	75 3c                	jne    c00164c1 <Thr::loadDLL(char const*, bool)+0x116>
c0016485:	89 f8                	mov    eax,edi
c0016487:	84 c0                	test   al,al
c0016489:	0f 84 49 01 00 00    	je     c00165d8 <Thr::loadDLL(char const*, bool)+0x22d>
c001648f:	51                   	push   ecx
c0016490:	51                   	push   ecx
c0016491:	68 a2 4d 02 c0       	push   0xc0024da2
c0016496:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001649a:	53                   	push   ebx
c001649b:	e8 a0 a1 fe ff       	call   c0000640 <strcpy>
c00164a0:	5d                   	pop    ebp
c00164a1:	58                   	pop    eax
c00164a2:	56                   	push   esi
c00164a3:	53                   	push   ebx
c00164a4:	e8 97 a3 fe ff       	call   c0000840 <strcat>
c00164a9:	58                   	pop    eax
c00164aa:	5a                   	pop    edx
c00164ab:	68 7f 4d 02 c0       	push   0xc0024d7f
c00164b0:	53                   	push   ebx
c00164b1:	e8 8a a3 fe ff       	call   c0000840 <strcat>
c00164b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b9:	e8 20 9b ff ff       	call   c000ffde <KePanic(char const*)>
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	52                   	push   edx
c00164c2:	6a 03                	push   0x3
c00164c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00164cc:	05 ff 0f 00 00       	add    eax,0xfff
c00164d1:	83 d2 00             	adc    edx,0x0
c00164d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00164d8:	50                   	push   eax
c00164d9:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00164df:	e8 70 d7 ff ff       	call   c0013c54 <VAS::allocatePages(int, int)>
c00164e4:	59                   	pop    ecx
c00164e5:	89 c3                	mov    ebx,eax
c00164e7:	5d                   	pop    ebp
c00164e8:	50                   	push   eax
c00164e9:	68 7e 40 02 c0       	push   0xc002407e
c00164ee:	e8 71 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00164f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00164f6:	e8 75 a0 fe ff       	call   c0000570 <strlen>
c00164fb:	8b 2d 60 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e260
c0016501:	40                   	inc    eax
c0016502:	89 04 24             	mov    DWORD PTR [esp],eax
c0016505:	e8 8d 97 ff ff       	call   c000fc97 <malloc>
c001650a:	89 04 ad 80 e6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd1980],eax
c0016511:	58                   	pop    eax
c0016512:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0016517:	5a                   	pop    edx
c0016518:	56                   	push   esi
c0016519:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016520:	e8 1b a1 fe ff       	call   c0000640 <strcpy>
c0016525:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001652a:	8d 50 01             	lea    edx,[eax+0x1]
c001652d:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016534:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c001653a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001653e:	83 c4 0c             	add    esp,0xc
c0016541:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c0016548:	6a 01                	push   0x1
c001654a:	53                   	push   ebx
c001654b:	56                   	push   esi
c001654c:	e8 9e f6 ff ff       	call   c0015bef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	0f b6 c0             	movzx  eax,al
c0016557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001655b:	85 c0                	test   eax,eax
c001655d:	0f 85 89 00 00 00    	jne    c00165ec <Thr::loadDLL(char const*, bool)+0x241>
c0016563:	89 f8                	mov    eax,edi
c0016565:	84 c0                	test   al,al
c0016567:	74 73                	je     c00165dc <Thr::loadDLL(char const*, bool)+0x231>
c0016569:	83 ec 0c             	sub    esp,0xc
c001656c:	68 bb 4d 02 c0       	push   0xc0024dbb
c0016571:	e8 68 9a ff ff       	call   c000ffde <KePanic(char const*)>
c0016576:	83 c4 10             	add    esp,0x10
c0016579:	eb 61                	jmp    c00165dc <Thr::loadDLL(char const*, bool)+0x231>
c001657b:	50                   	push   eax
c001657c:	50                   	push   eax
c001657d:	89 e8                	mov    eax,ebp
c001657f:	c1 e0 0c             	shl    eax,0xc
c0016582:	01 d8                	add    eax,ebx
c0016584:	50                   	push   eax
c0016585:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001658b:	e8 c6 d1 ff ff       	call   c0013756 <VAS::getPageTableEntry(unsigned long)>
c0016590:	83 c4 10             	add    esp,0x10
c0016593:	8b 00                	mov    eax,DWORD PTR [eax]
c0016595:	a8 60                	test   al,0x60
c0016597:	75 11                	jne    c00165aa <Thr::loadDLL(char const*, bool)+0x1ff>
c0016599:	83 ec 0c             	sub    esp,0xc
c001659c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00165a1:	50                   	push   eax
c00165a2:	e8 c2 9b ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	45                   	inc    ebp
c00165ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165b3:	05 ff 0f 00 00       	add    eax,0xfff
c00165b8:	bf 00 00 00 00       	mov    edi,0x0
c00165bd:	83 d2 00             	adc    edx,0x0
c00165c0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00165c4:	c1 ea 0c             	shr    edx,0xc
c00165c7:	39 c5                	cmp    ebp,eax
c00165c9:	89 d1                	mov    ecx,edx
c00165cb:	89 f8                	mov    eax,edi
c00165cd:	19 c8                	sbb    eax,ecx
c00165cf:	72 aa                	jb     c001657b <Thr::loadDLL(char const*, bool)+0x1d0>
c00165d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165d6:	75 18                	jne    c00165f0 <Thr::loadDLL(char const*, bool)+0x245>
c00165d8:	31 db                	xor    ebx,ebx
c00165da:	eb 14                	jmp    c00165f0 <Thr::loadDLL(char const*, bool)+0x245>
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	68 da 4d 02 c0       	push   0xc0024dda
c00165e4:	e8 f5 99 ff ff       	call   c000ffde <KePanic(char const*)>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	31 ed                	xor    ebp,ebp
c00165ee:	eb bb                	jmp    c00165ab <Thr::loadDLL(char const*, bool)+0x200>
c00165f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00165f6:	89 d8                	mov    eax,ebx
c00165f8:	5b                   	pop    ebx
c00165f9:	5e                   	pop    esi
c00165fa:	5f                   	pop    edi
c00165fb:	5d                   	pop    ebp
c00165fc:	c3                   	ret    

c00165fd <Thr::executeDLL(unsigned long, void*)>:
c00165fd:	56                   	push   esi
c00165fe:	53                   	push   ebx
c00165ff:	52                   	push   edx
c0016600:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016604:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016608:	85 db                	test   ebx,ebx
c001660a:	75 10                	jne    c001661c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	68 f6 4d 02 c0       	push   0xc0024df6
c0016614:	e8 c5 99 ff ff       	call   c000ffde <KePanic(char const*)>
c0016619:	83 c4 10             	add    esp,0x10
c001661c:	50                   	push   eax
c001661d:	50                   	push   eax
c001661e:	53                   	push   ebx
c001661f:	68 20 4e 02 c0       	push   0xc0024e20
c0016624:	e8 3b 09 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016629:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001662d:	89 d8                	mov    eax,ebx
c001662f:	83 c4 14             	add    esp,0x14
c0016632:	5b                   	pop    ebx
c0016633:	5e                   	pop    esi
c0016634:	ff e0                	jmp    eax

c0016636 <KeProcessExec(Process*, char const*)>:
c0016636:	56                   	push   esi
c0016637:	53                   	push   ebx
c0016638:	83 ec 04             	sub    esp,0x4
c001663b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001663f:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016645:	85 f6                	test   esi,esi
c0016647:	74 16                	je     c001665f <KeProcessExec(Process*, char const*)+0x29>
c0016649:	83 ec 0c             	sub    esp,0xc
c001664c:	56                   	push   esi
c001664d:	e8 96 d3 ff ff       	call   c00139e8 <VAS::~VAS()>
c0016652:	58                   	pop    eax
c0016653:	5a                   	pop    edx
c0016654:	6a 14                	push   0x14
c0016656:	56                   	push   esi
c0016657:	e8 c3 6c ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	6a 14                	push   0x14
c0016664:	e8 2e 96 ff ff       	call   c000fc97 <malloc>
c0016669:	89 c6                	mov    esi,eax
c001666b:	58                   	pop    eax
c001666c:	5a                   	pop    edx
c001666d:	6a 00                	push   0x0
c001666f:	56                   	push   esi
c0016670:	e8 13 d8 ff ff       	call   c0013e88 <VAS::VAS(bool)>
c0016675:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001667b:	59                   	pop    ecx
c001667c:	5e                   	pop    esi
c001667d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016681:	50                   	push   eax
c0016682:	53                   	push   ebx
c0016683:	e8 35 f0 ff ff       	call   c00156bd <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016688:	83 c4 14             	add    esp,0x14
c001668b:	31 c0                	xor    eax,eax
c001668d:	5b                   	pop    ebx
c001668e:	5e                   	pop    esi
c001668f:	c3                   	ret    

c0016690 <userModeEntryPoint(void*)>:
c0016690:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016698:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001669d:	85 c0                	test   eax,eax
c001669f:	75 03                	jne    c00166a4 <userModeEntryPoint(void*)+0x14>
c00166a1:	fb                   	sti    
c00166a2:	66 90                	xchg   ax,ax
c00166a4:	fb                   	sti    
c00166a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166ad:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00166b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166b7:	e9 83 9b fe ff       	jmp    c000023f <goToUsermode>

c00166bc <changeTSS>:
c00166bc:	83 ec 14             	sub    esp,0x14
c00166bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00166c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00166cc:	c1 e2 15             	shl    edx,0x15
c00166cf:	29 d0                	sub    eax,edx
c00166d1:	50                   	push   eax
c00166d2:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00166d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166dd:	05 68 11 00 00       	add    eax,0x1168
c00166e2:	50                   	push   eax
c00166e3:	e8 38 c6 ff ff       	call   c0012d20 <TSS::setESP(unsigned long)>
c00166e8:	83 c4 1c             	add    esp,0x1c
c00166eb:	c3                   	ret    

c00166ec <switchToThread(ThreadControlBlock*)>:
c00166ec:	57                   	push   edi
c00166ed:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c00166f3:	56                   	push   esi
c00166f4:	85 c9                	test   ecx,ecx
c00166f6:	53                   	push   ebx
c00166f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166fb:	0f 85 9b 00 00 00    	jne    c001679c <switchToThread(ThreadControlBlock*)+0xb0>
c0016701:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016705:	81 fa ff 00 00 00    	cmp    edx,0xff
c001670b:	0f 84 87 00 00 00    	je     c0016798 <switchToThread(ThreadControlBlock*)+0xac>
c0016711:	b8 00 04 00 00       	mov    eax,0x400
c0016716:	29 d0                	sub    eax,edx
c0016718:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001671b:	d1 f8                	sar    eax,1
c001671d:	01 d0                	add    eax,edx
c001671f:	90                   	nop
c0016720:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016723:	e8 d9 38 00 00       	call   c001a001 <HalQueryPerformanceCounter()>
c0016728:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c001672d:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016733:	89 c6                	mov    esi,eax
c0016735:	89 d7                	mov    edi,edx
c0016737:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c001673d:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016742:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c0016748:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c001674e:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016754:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001675a:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016760:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016763:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016766:	01 c6                	add    esi,eax
c0016768:	11 d7                	adc    edi,edx
c001676a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001676d:	83 ec 0c             	sub    esp,0xc
c0016770:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016773:	53                   	push   ebx
c0016774:	e8 fe 9a fe ff       	call   c0000277 <switchToThreadASM>
c0016779:	0f 20 c0             	mov    eax,cr0
c001677c:	83 c8 08             	or     eax,0x8
c001677f:	0f 22 c0             	mov    cr0,eax
c0016782:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001678e:	5b                   	pop    ebx
c001678f:	5e                   	pop    esi
c0016790:	5f                   	pop    edi
c0016791:	e9 e6 eb ff ff       	jmp    c001537c <KeCheckAlarm(ThreadControlBlock*)>
c0016796:	66 90                	xchg   ax,ax
c0016798:	31 c0                	xor    eax,eax
c001679a:	eb 84                	jmp    c0016720 <switchToThread(ThreadControlBlock*)+0x34>
c001679c:	5b                   	pop    ebx
c001679d:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00167a7:	5e                   	pop    esi
c00167a8:	5f                   	pop    edi
c00167a9:	c3                   	ret    
c00167aa:	66 90                	xchg   ax,ax

c00167ac <Process::addArgs(char**)>:
c00167ac:	57                   	push   edi
c00167ad:	56                   	push   esi
c00167ae:	53                   	push   ebx
c00167af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167b7:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c00167c1:	85 ff                	test   edi,edi
c00167c3:	74 4f                	je     c0016814 <Process::addArgs(char**)+0x68>
c00167c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00167c7:	85 c0                	test   eax,eax
c00167c9:	74 49                	je     c0016814 <Process::addArgs(char**)+0x68>
c00167cb:	31 db                	xor    ebx,ebx
c00167cd:	8d 76 00             	lea    esi,[esi+0x0]
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	50                   	push   eax
c00167d4:	e8 97 9d fe ff       	call   c0000570 <strlen>
c00167d9:	83 c0 01             	add    eax,0x1
c00167dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00167df:	e8 b3 94 ff ff       	call   c000fc97 <malloc>
c00167e4:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00167eb:	5a                   	pop    edx
c00167ec:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00167ef:	59                   	pop    ecx
c00167f0:	83 c3 01             	add    ebx,0x1
c00167f3:	52                   	push   edx
c00167f4:	50                   	push   eax
c00167f5:	e8 46 9e fe ff       	call   c0000640 <strcpy>
c00167fa:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016800:	83 c4 10             	add    esp,0x10
c0016803:	83 c1 01             	add    ecx,0x1
c0016806:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c001680c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001680f:	85 c0                	test   eax,eax
c0016811:	75 bd                	jne    c00167d0 <Process::addArgs(char**)+0x24>
c0016813:	90                   	nop
c0016814:	5b                   	pop    ebx
c0016815:	5e                   	pop    esi
c0016816:	5f                   	pop    edi
c0016817:	c3                   	ret    

c0016818 <Process::Process(char const*, Process*, char**)>:
c0016818:	56                   	push   esi
c0016819:	53                   	push   ebx
c001681a:	83 ec 14             	sub    esp,0x14
c001681d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016821:	05 0c 02 00 00       	add    eax,0x20c
c0016826:	bb 07 00 00 00       	mov    ebx,0x7
c001682b:	89 c6                	mov    esi,eax
c001682d:	8d 76 00             	lea    esi,[esi+0x0]
c0016830:	85 db                	test   ebx,ebx
c0016832:	78 14                	js     c0016848 <Process::Process(char const*, Process*, char**)+0x30>
c0016834:	83 ec 0c             	sub    esp,0xc
c0016837:	56                   	push   esi
c0016838:	e8 f3 b8 00 00       	call   c0022130 <ThreadControlBlock::ThreadControlBlock()>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	83 c6 73             	add    esi,0x73
c0016843:	83 eb 01             	sub    ebx,0x1
c0016846:	eb e8                	jmp    c0016830 <Process::Process(char const*, Process*, char**)+0x18>
c0016848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016857:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016865:	e8 b6 7f ff ff       	call   c000e820 <KeNewProcessEnv(Process*)>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	89 c2                	mov    edx,eax
c001686f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016873:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016886:	a1 5c 67 02 c0       	mov    eax,ds:0xc002675c
c001688b:	8d 50 01             	lea    edx,[eax+0x1]
c001688e:	89 15 5c 67 02 c0    	mov    DWORD PTR ds:0xc002675c,edx
c0016894:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016898:	89 02                	mov    DWORD PTR [edx],eax
c001689a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168a9:	e8 e9 93 ff ff       	call   c000fc97 <malloc>
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	89 c3                	mov    ebx,eax
c00168b3:	83 ec 08             	sub    esp,0x8
c00168b6:	6a 00                	push   0x0
c00168b8:	53                   	push   ebx
c00168b9:	e8 ca d5 ff ff       	call   c0013e88 <VAS::VAS(bool)>
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00168cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cf:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00168d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168e1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00168e7:	e8 c7 a7 ff ff       	call   c00110b3 <KeInitSignals()>
c00168ec:	89 c2                	mov    edx,eax
c00168ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00168f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fc:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016902:	85 c0                	test   eax,eax
c0016904:	74 42                	je     c0016948 <Process::Process(char const*, Process*, char**)+0x130>
c0016906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016910:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016924:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001692a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016934:	05 0c 01 00 00       	add    eax,0x10c
c0016939:	83 ec 08             	sub    esp,0x8
c001693c:	52                   	push   edx
c001693d:	50                   	push   eax
c001693e:	e8 fd 9c fe ff       	call   c0000640 <strcpy>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	eb 7c                	jmp    c00169c4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016948:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016957:	e8 3b 93 ff ff       	call   c000fc97 <malloc>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 c3                	mov    ebx,eax
c0016961:	83 ec 08             	sub    esp,0x8
c0016964:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016968:	53                   	push   ebx
c0016969:	e8 b2 c0 ff ff       	call   c0012a20 <VgaText::VgaText(char const*)>
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016975:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001697b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016985:	83 ec 0c             	sub    esp,0xc
c0016988:	50                   	push   eax
c0016989:	e8 e8 b8 ff ff       	call   c0012276 <addToTerminalCycle(VgaText*)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016995:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001699b:	83 ec 0c             	sub    esp,0xc
c001699e:	50                   	push   eax
c001699f:	e8 43 bb ff ff       	call   c00124e7 <setActiveTerminal(VgaText*)>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ab:	05 0c 01 00 00       	add    eax,0x10c
c00169b0:	83 ec 08             	sub    esp,0x8
c00169b3:	68 3f 4e 02 c0       	push   0xc0024e3f
c00169b8:	50                   	push   eax
c00169b9:	e8 82 9c fe ff       	call   c0000640 <strcpy>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	8d 76 00             	lea    esi,[esi+0x0]
c00169c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c8:	83 c0 0c             	add    eax,0xc
c00169cb:	83 ec 08             	sub    esp,0x8
c00169ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d2:	50                   	push   eax
c00169d3:	e8 68 9c fe ff       	call   c0000640 <strcpy>
c00169d8:	83 c4 10             	add    esp,0x10
c00169db:	83 ec 08             	sub    esp,0x8
c00169de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e6:	e8 c1 fd ff ff       	call   c00167ac <Process::addArgs(char**)>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	83 ec 08             	sub    esp,0x8
c00169f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169f9:	e8 bf ec ff ff       	call   c00156bd <Thr::loadProgramIntoMemory(Process*, char const*)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016a09:	83 f0 01             	xor    eax,0x1
c0016a0c:	88 c2                	mov    dl,al
c0016a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a12:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a1e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016a23:	52                   	push   edx
c0016a24:	50                   	push   eax
c0016a25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a29:	68 98 4e 02 c0       	push   0xc0024e98
c0016a2e:	e8 31 05 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016a33:	83 c4 10             	add    esp,0x10
c0016a36:	90                   	nop
c0016a37:	83 c4 14             	add    esp,0x14
c0016a3a:	5b                   	pop    ebx
c0016a3b:	5e                   	pop    esi
c0016a3c:	c3                   	ret    
c0016a3d:	90                   	nop
c0016a3e:	66 90                	xchg   ax,ax

c0016a40 <Process::Process(bool, char const*, Process*, char**)>:
c0016a40:	56                   	push   esi
c0016a41:	53                   	push   ebx
c0016a42:	83 ec 24             	sub    esp,0x24
c0016a45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a49:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a51:	05 0c 02 00 00       	add    eax,0x20c
c0016a56:	bb 07 00 00 00       	mov    ebx,0x7
c0016a5b:	89 c6                	mov    esi,eax
c0016a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a60:	85 db                	test   ebx,ebx
c0016a62:	78 14                	js     c0016a78 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	56                   	push   esi
c0016a68:	e8 c3 b6 00 00       	call   c0022130 <ThreadControlBlock::ThreadControlBlock()>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	83 c6 73             	add    esi,0x73
c0016a73:	83 eb 01             	sub    ebx,0x1
c0016a76:	eb e8                	jmp    c0016a60 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016a78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a7c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a87:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016a8e:	83 ec 0c             	sub    esp,0xc
c0016a91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a95:	e8 86 7d ff ff       	call   c000e820 <KeNewProcessEnv(Process*)>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	89 c2                	mov    edx,eax
c0016a9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa3:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016aa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aad:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016ab6:	a1 5c 67 02 c0       	mov    eax,ds:0xc002675c
c0016abb:	8d 50 01             	lea    edx,[eax+0x1]
c0016abe:	89 15 5c 67 02 c0    	mov    DWORD PTR ds:0xc002675c,edx
c0016ac4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ac8:	89 02                	mov    DWORD PTR [edx],eax
c0016aca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016ad9:	e8 b9 91 ff ff       	call   c000fc97 <malloc>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	89 c3                	mov    ebx,eax
c0016ae3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016ae8:	83 ec 08             	sub    esp,0x8
c0016aeb:	50                   	push   eax
c0016aec:	53                   	push   ebx
c0016aed:	e8 96 d3 ff ff       	call   c0013e88 <VAS::VAS(bool)>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016af9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b03:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b15:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016b1b:	e8 93 a5 ff ff       	call   c00110b3 <KeInitSignals()>
c0016b20:	89 c2                	mov    edx,eax
c0016b22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b26:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b30:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b36:	85 c0                	test   eax,eax
c0016b38:	74 42                	je     c0016b7c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016b3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b3e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b44:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016b4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b4e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016b54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b58:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b68:	05 0c 01 00 00       	add    eax,0x10c
c0016b6d:	83 ec 08             	sub    esp,0x8
c0016b70:	52                   	push   edx
c0016b71:	50                   	push   eax
c0016b72:	e8 c9 9a fe ff       	call   c0000640 <strcpy>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	eb 7c                	jmp    c0016bf8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016b7c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b8b:	e8 07 91 ff ff       	call   c000fc97 <malloc>
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	89 c3                	mov    ebx,eax
c0016b95:	83 ec 08             	sub    esp,0x8
c0016b98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b9c:	53                   	push   ebx
c0016b9d:	e8 7e be ff ff       	call   c0012a20 <VgaText::VgaText(char const*)>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba9:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016baf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bb3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016bb9:	83 ec 0c             	sub    esp,0xc
c0016bbc:	50                   	push   eax
c0016bbd:	e8 b4 b6 ff ff       	call   c0012276 <addToTerminalCycle(VgaText*)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016bcf:	83 ec 0c             	sub    esp,0xc
c0016bd2:	50                   	push   eax
c0016bd3:	e8 0f b9 ff ff       	call   c00124e7 <setActiveTerminal(VgaText*)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bdf:	05 0c 01 00 00       	add    eax,0x10c
c0016be4:	83 ec 08             	sub    esp,0x8
c0016be7:	68 3f 4e 02 c0       	push   0xc0024e3f
c0016bec:	50                   	push   eax
c0016bed:	e8 4e 9a fe ff       	call   c0000640 <strcpy>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bfc:	83 c0 0c             	add    eax,0xc
c0016bff:	83 ec 08             	sub    esp,0x8
c0016c02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c06:	50                   	push   eax
c0016c07:	e8 34 9a fe ff       	call   c0000640 <strcpy>
c0016c0c:	83 c4 10             	add    esp,0x10
c0016c0f:	83 ec 08             	sub    esp,0x8
c0016c12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c1a:	e8 8d fb ff ff       	call   c00167ac <Process::addArgs(char**)>
c0016c1f:	83 c4 10             	add    esp,0x10
c0016c22:	90                   	nop
c0016c23:	83 c4 24             	add    esp,0x24
c0016c26:	5b                   	pop    ebx
c0016c27:	5e                   	pop    esi
c0016c28:	c3                   	ret    
c0016c29:	8d 76 00             	lea    esi,[esi+0x0]

c0016c2c <taskStartupFunction>:
c0016c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c31:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016c34:	c3                   	ret    
c0016c35:	8d 76 00             	lea    esi,[esi+0x0]

c0016c38 <KeDisablePreemption()>:
c0016c38:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c3d:	85 c0                	test   eax,eax
c0016c3f:	75 13                	jne    c0016c54 <KeDisablePreemption()+0x1c>
c0016c41:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016c47:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016c4e:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016c54:	83 c0 01             	add    eax,0x1
c0016c57:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c5c:	c3                   	ret    
c0016c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c60 <KeRestorePreemption()>:
c0016c60:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c65:	83 e8 01             	sub    eax,0x1
c0016c68:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c6d:	75 0d                	jne    c0016c7c <KeRestorePreemption()+0x1c>
c0016c6f:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016c74:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016c79:	8d 76 00             	lea    esi,[esi+0x0]
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop
c0016c7e:	66 90                	xchg   ax,ax

c0016c80 <Process::createThread(void (*)(void*), void*, int)>:
c0016c80:	55                   	push   ebp
c0016c81:	31 c9                	xor    ecx,ecx
c0016c83:	57                   	push   edi
c0016c84:	56                   	push   esi
c0016c85:	53                   	push   ebx
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016c8d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016c94:	89 f2                	mov    edx,esi
c0016c96:	66 90                	xchg   ax,ax
c0016c98:	0f b7 c2             	movzx  eax,dx
c0016c9b:	80 e2 01             	and    dl,0x1
c0016c9e:	74 18                	je     c0016cb8 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016ca0:	d1 f8                	sar    eax,1
c0016ca2:	83 c1 01             	add    ecx,0x1
c0016ca5:	89 c2                	mov    edx,eax
c0016ca7:	83 f9 10             	cmp    ecx,0x10
c0016caa:	75 ec                	jne    c0016c98 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016cac:	83 c4 0c             	add    esp,0xc
c0016caf:	31 db                	xor    ebx,ebx
c0016cb1:	89 d8                	mov    eax,ebx
c0016cb3:	5b                   	pop    ebx
c0016cb4:	5e                   	pop    esi
c0016cb5:	5f                   	pop    edi
c0016cb6:	5d                   	pop    ebp
c0016cb7:	c3                   	ret    
c0016cb8:	b8 01 00 00 00       	mov    eax,0x1
c0016cbd:	d3 e0                	shl    eax,cl
c0016cbf:	09 c6                	or     esi,eax
c0016cc1:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016cc4:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016ccb:	01 c0                	add    eax,eax
c0016ccd:	01 c8                	add    eax,ecx
c0016ccf:	01 c0                	add    eax,eax
c0016cd1:	01 c8                	add    eax,ecx
c0016cd3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016cd6:	01 d8                	add    eax,ebx
c0016cd8:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016cdf:	75 0b                	jne    c0016cec <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016ce1:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016ceb:	90                   	nop
c0016cec:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016cf8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016cfb:	01 c0                	add    eax,eax
c0016cfd:	01 c8                	add    eax,ecx
c0016cff:	01 c0                	add    eax,eax
c0016d01:	01 c8                	add    eax,ecx
c0016d03:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016d06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d0a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0016d0d:	89 95 0c 02 00 00    	mov    DWORD PTR [ebp+0x20c],edx
c0016d13:	89 85 51 02 00 00    	mov    DWORD PTR [ebp+0x251],eax
c0016d19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d1d:	89 8d 48 02 00 00    	mov    DWORD PTR [ebp+0x248],ecx
c0016d23:	89 9d 4c 02 00 00    	mov    DWORD PTR [ebp+0x24c],ebx
c0016d29:	89 c8                	mov    eax,ecx
c0016d2b:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016d32:	c7 85 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x244],0x0
c0016d3c:	c7 85 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x26f],0x0
c0016d46:	c7 85 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x273],0x0
c0016d50:	f7 d8                	neg    eax
c0016d52:	c1 e0 15             	shl    eax,0x15
c0016d55:	05 e0 ff ff 01       	add    eax,0x1ffffe0
c0016d5a:	89 85 10 02 00 00    	mov    DWORD PTR [ebp+0x210],eax
c0016d60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d64:	c7 85 24 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x224],0x0
c0016d6e:	88 85 50 02 00 00    	mov    BYTE PTR [ebp+0x250],al
c0016d74:	89 95 18 02 00 00    	mov    DWORD PTR [ebp+0x218],edx
c0016d7a:	c7 85 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x21c],0x0
c0016d84:	c7 85 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x220],0x0
c0016d8e:	68 00 01 00 00       	push   0x100
c0016d93:	e8 ff 8e ff ff       	call   c000fc97 <malloc>
c0016d98:	89 85 14 02 00 00    	mov    DWORD PTR [ebp+0x214],eax
c0016d9e:	58                   	pop    eax
c0016d9f:	5a                   	pop    edx
c0016da0:	53                   	push   ebx
c0016da1:	68 4c ea 02 c0       	push   0xc002ea4c
c0016da6:	e8 31 af 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dab:	89 d8                	mov    eax,ebx
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	83 c4 0c             	add    esp,0xc
c0016db3:	5b                   	pop    ebx
c0016db4:	5e                   	pop    esi
c0016db5:	5f                   	pop    edi
c0016db6:	5d                   	pop    ebp
c0016db7:	c3                   	ret    

c0016db8 <Process::createUserThread()>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	68 80 00 00 00       	push   0x80
c0016dc0:	6a 00                	push   0x0
c0016dc2:	68 90 66 01 c0       	push   0xc0016690
c0016dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dcb:	50                   	push   eax
c0016dcc:	e8 af fe ff ff       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c0016dd1:	83 c4 1c             	add    esp,0x1c
c0016dd4:	c3                   	ret    
c0016dd5:	8d 76 00             	lea    esi,[esi+0x0]

c0016dd8 <setupMultitasking(void (*)())>:
c0016dd8:	56                   	push   esi
c0016dd9:	53                   	push   ebx
c0016dda:	83 ec 04             	sub    esp,0x4
c0016ddd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de1:	eb 11                	jmp    c0016df4 <setupMultitasking(void (*)())+0x1c>
c0016de3:	90                   	nop
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dec:	e8 2f ae 00 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dfc:	e8 fb ad 00 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	84 c0                	test   al,al
c0016e06:	74 dc                	je     c0016de4 <setupMultitasking(void (*)())+0xc>
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	68 c4 07 00 00       	push   0x7c4
c0016e10:	e8 82 8e ff ff       	call   c000fc97 <malloc>
c0016e15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016e1c:	89 c3                	mov    ebx,eax
c0016e1e:	6a 00                	push   0x0
c0016e20:	68 43 4e 02 c0       	push   0xc0024e43
c0016e25:	6a 01                	push   0x1
c0016e27:	50                   	push   eax
c0016e28:	e8 13 fc ff ff       	call   c0016a40 <Process::Process(bool, char const*, Process*, char**)>
c0016e2d:	83 c4 14             	add    esp,0x14
c0016e30:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016e36:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016e3c:	50                   	push   eax
c0016e3d:	e8 a5 b6 ff ff       	call   c00124e7 <setActiveTerminal(VgaText*)>
c0016e42:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016e49:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016e53:	83 c8 01             	or     eax,0x1
c0016e56:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016e5d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016e66:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016e70:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016e76:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016e7c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016e86:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016e90:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016e9a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ea0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016eaa:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016eb0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016eba:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016ec1:	e8 d1 8d ff ff       	call   c000fc97 <malloc>
c0016ec6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016ed0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016ed6:	c7 83 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x273],0x0
c0016ee0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016ee6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016eec:	5a                   	pop    edx
c0016eed:	59                   	pop    ecx
c0016eee:	68 3f 4e 02 c0       	push   0xc0024e3f
c0016ef3:	50                   	push   eax
c0016ef4:	e8 47 97 fe ff       	call   c0000640 <strcpy>
c0016ef9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016f00:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016f04:	83 c4 14             	add    esp,0x14
c0016f07:	5b                   	pop    ebx
c0016f08:	5e                   	pop    esi
c0016f09:	e9 5b 93 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016f0e:	66 90                	xchg   ax,ax

c0016f10 <schedule()>:
c0016f10:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016f16:	85 d2                	test   edx,edx
c0016f18:	74 0e                	je     c0016f28 <schedule()+0x18>
c0016f1a:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016f24:	c3                   	ret    
c0016f25:	8d 76 00             	lea    esi,[esi+0x0]
c0016f28:	53                   	push   ebx
c0016f29:	83 ec 14             	sub    esp,0x14
c0016f2c:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f31:	e8 c6 ac 00 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f36:	83 c4 10             	add    esp,0x10
c0016f39:	84 c0                	test   al,al
c0016f3b:	75 3f                	jne    c0016f7c <schedule()+0x6c>
c0016f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016f45:	83 fa 01             	cmp    edx,0x1
c0016f48:	74 3a                	je     c0016f84 <schedule()+0x74>
c0016f4a:	66 90                	xchg   ax,ax
c0016f4c:	83 ec 0c             	sub    esp,0xc
c0016f4f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f54:	e8 bf ac 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f59:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016f60:	89 c3                	mov    ebx,eax
c0016f62:	e8 b9 ac 00 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f67:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016f6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f71:	e8 76 f7 ff ff       	call   c00166ec <switchToThread(ThreadControlBlock*)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	8d 76 00             	lea    esi,[esi+0x0]
c0016f7c:	83 c4 08             	add    esp,0x8
c0016f7f:	5b                   	pop    ebx
c0016f80:	c3                   	ret    
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]
c0016f84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f8b:	83 ec 08             	sub    esp,0x8
c0016f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f93:	50                   	push   eax
c0016f94:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f99:	e8 3e ad 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	eb a9                	jmp    c0016f4c <schedule()+0x3c>
c0016fa3:	90                   	nop

c0016fa4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016fa4:	83 ec 0c             	sub    esp,0xc
c0016fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fb3:	e8 58 ff ff ff       	call   c0016f10 <schedule()>
c0016fb8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016fc0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	75 03                	jne    c0016fcc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016fc9:	fb                   	sti    
c0016fca:	66 90                	xchg   ax,ax
c0016fcc:	83 c4 0c             	add    esp,0xc
c0016fcf:	c3                   	ret    

c0016fd0 <blockTask(TaskState)>:
c0016fd0:	83 ec 0c             	sub    esp,0xc
c0016fd3:	fa                   	cli    
c0016fd4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fdd:	83 c0 01             	add    eax,0x1
c0016fe0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fed:	e8 1e ff ff ff       	call   c0016f10 <schedule()>
c0016ff2:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016ffa:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017000:	85 d2                	test   edx,edx
c0017002:	75 04                	jne    c0017008 <blockTask(TaskState)+0x38>
c0017004:	fb                   	sti    
c0017005:	8d 76 00             	lea    esi,[esi+0x0]
c0017008:	83 c4 0c             	add    esp,0xc
c001700b:	c3                   	ret    

c001700c <waitTask(int, int*, int)>:
c001700c:	83 ec 18             	sub    esp,0x18
c001700f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017014:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017018:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001701b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001701f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017024:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017027:	6a 07                	push   0x7
c0017029:	e8 a2 ff ff ff       	call   c0016fd0 <blockTask(TaskState)>
c001702e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017039:	85 d2                	test   edx,edx
c001703b:	74 0b                	je     c0017048 <waitTask(int, int*, int)+0x3c>
c001703d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017040:	89 02                	mov    DWORD PTR [edx],eax
c0017042:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017047:	90                   	nop
c0017048:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001704b:	83 c4 0c             	add    esp,0xc
c001704e:	c3                   	ret    
c001704f:	90                   	nop

c0017050 <milliTenthSleepUntil(unsigned long long)>:
c0017050:	83 ec 0c             	sub    esp,0xc
c0017053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017057:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001705b:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0017061:	89 d1                	mov    ecx,edx
c0017063:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0017069:	73 05                	jae    c0017070 <milliTenthSleepUntil(unsigned long long)+0x20>
c001706b:	90                   	nop
c001706c:	83 c4 0c             	add    esp,0xc
c001706f:	c3                   	ret    
c0017070:	fa                   	cli    
c0017071:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017077:	83 ec 08             	sub    esp,0x8
c001707a:	83 c1 01             	add    ecx,0x1
c001707d:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0017083:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0017089:	83 c1 01             	add    ecx,0x1
c001708c:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c0017092:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017098:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001709b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001709e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170a3:	50                   	push   eax
c00170a4:	68 40 ea 02 c0       	push   0xc002ea40
c00170a9:	e8 2e ac 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170ae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00170b5:	e8 16 ff ff ff       	call   c0016fd0 <blockTask(TaskState)>
c00170ba:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	83 e8 01             	sub    eax,0x1
c00170c5:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00170ca:	85 c0                	test   eax,eax
c00170cc:	75 0a                	jne    c00170d8 <milliTenthSleepUntil(unsigned long long)+0x88>
c00170ce:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c00170d4:	85 d2                	test   edx,edx
c00170d6:	75 18                	jne    c00170f0 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00170d8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00170e0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00170e5:	85 c0                	test   eax,eax
c00170e7:	75 83                	jne    c001706c <milliTenthSleepUntil(unsigned long long)+0x1c>
c00170e9:	fb                   	sti    
c00170ea:	83 c4 0c             	add    esp,0xc
c00170ed:	c3                   	ret    
c00170ee:	66 90                	xchg   ax,ax
c00170f0:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c00170fa:	e8 11 fe ff ff       	call   c0016f10 <schedule()>
c00170ff:	eb d7                	jmp    c00170d8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017101:	8d 76 00             	lea    esi,[esi+0x0]

c0017104 <milliTenthSleep(unsigned long long)>:
c0017104:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017109:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001710f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017113:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017117:	e9 34 ff ff ff       	jmp    c0017050 <milliTenthSleepUntil(unsigned long long)>

c001711c <sleep(unsigned long long)>:
c001711c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017124:	b8 10 27 00 00       	mov    eax,0x2710
c0017129:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001712d:	01 ca                	add    edx,ecx
c001712f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017133:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017137:	eb cb                	jmp    c0017104 <milliTenthSleep(unsigned long long)>
c0017139:	8d 76 00             	lea    esi,[esi+0x0]

c001713c <sleep(unsigned int)>:
c001713c:	83 ec 14             	sub    esp,0x14
c001713f:	b8 10 27 00 00       	mov    eax,0x2710
c0017144:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017148:	52                   	push   edx
c0017149:	50                   	push   eax
c001714a:	e8 b5 ff ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001714f:	83 c4 1c             	add    esp,0x1c
c0017152:	c3                   	ret    
c0017153:	90                   	nop

c0017154 <milliTenthSleep(unsigned int)>:
c0017154:	83 ec 14             	sub    esp,0x14
c0017157:	31 d2                	xor    edx,edx
c0017159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001715d:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0017163:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0017169:	52                   	push   edx
c001716a:	50                   	push   eax
c001716b:	e8 e0 fe ff ff       	call   c0017050 <milliTenthSleepUntil(unsigned long long)>
c0017170:	83 c4 1c             	add    esp,0x1c
c0017173:	c3                   	ret    

c0017174 <taskReturned>:
c0017174:	83 ec 18             	sub    esp,0x18
c0017177:	68 cc 4e 02 c0       	push   0xc0024ecc
c001717c:	e8 5d 8e ff ff       	call   c000ffde <KePanic(char const*)>
c0017181:	83 c4 10             	add    esp,0x10
c0017184:	83 ec 0c             	sub    esp,0xc
c0017187:	6a 02                	push   0x2
c0017189:	e8 42 fe ff ff       	call   c0016fd0 <blockTask(TaskState)>
c001718e:	fa                   	cli    
c001718f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017194:	83 c0 01             	add    eax,0x1
c0017197:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001719c:	e8 6f fd ff ff       	call   c0016f10 <schedule()>
c00171a1:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00171a9:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00171af:	83 c4 10             	add    esp,0x10
c00171b2:	85 d2                	test   edx,edx
c00171b4:	75 ce                	jne    c0017184 <taskReturned+0x10>
c00171b6:	fb                   	sti    
c00171b7:	eb cb                	jmp    c0017184 <taskReturned+0x10>
c00171b9:	8d 76 00             	lea    esi,[esi+0x0]

c00171bc <Thr::processFromPID(int)>:
c00171bc:	57                   	push   edi
c00171bd:	56                   	push   esi
c00171be:	53                   	push   ebx
c00171bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171c3:	fa                   	cli    
c00171c4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00171c9:	83 ec 0c             	sub    esp,0xc
c00171cc:	83 c0 01             	add    eax,0x1
c00171cf:	68 4c ea 02 c0       	push   0xc002ea4c
c00171d4:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00171d9:	e8 3a aa 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171de:	83 c4 10             	add    esp,0x10
c00171e1:	89 c7                	mov    edi,eax
c00171e3:	eb 17                	jmp    c00171fc <Thr::processFromPID(int)+0x40>
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	83 ec 0c             	sub    esp,0xc
c00171eb:	68 4c ea 02 c0       	push   0xc002ea4c
c00171f0:	e8 23 aa 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171f5:	83 c4 10             	add    esp,0x10
c00171f8:	39 f8                	cmp    eax,edi
c00171fa:	74 50                	je     c001724c <Thr::processFromPID(int)+0x90>
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	68 4c ea 02 c0       	push   0xc002ea4c
c0017204:	e8 0f aa 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017209:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017210:	89 c3                	mov    ebx,eax
c0017212:	e8 09 aa 00 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017217:	59                   	pop    ecx
c0017218:	58                   	pop    eax
c0017219:	53                   	push   ebx
c001721a:	68 4c ea 02 c0       	push   0xc002ea4c
c001721f:	e8 b8 aa 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017224:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	39 30                	cmp    DWORD PTR [eax],esi
c001722c:	75 ba                	jne    c00171e8 <Thr::processFromPID(int)+0x2c>
c001722e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017236:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001723c:	85 d2                	test   edx,edx
c001723e:	74 08                	je     c0017248 <Thr::processFromPID(int)+0x8c>
c0017240:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017243:	5b                   	pop    ebx
c0017244:	5e                   	pop    esi
c0017245:	5f                   	pop    edi
c0017246:	c3                   	ret    
c0017247:	90                   	nop
c0017248:	fb                   	sti    
c0017249:	eb f5                	jmp    c0017240 <Thr::processFromPID(int)+0x84>
c001724b:	90                   	nop
c001724c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017254:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017259:	85 c0                	test   eax,eax
c001725b:	75 07                	jne    c0017264 <Thr::processFromPID(int)+0xa8>
c001725d:	fb                   	sti    
c001725e:	31 c0                	xor    eax,eax
c0017260:	5b                   	pop    ebx
c0017261:	5e                   	pop    esi
c0017262:	5f                   	pop    edi
c0017263:	c3                   	ret    
c0017264:	5b                   	pop    ebx
c0017265:	31 c0                	xor    eax,eax
c0017267:	5e                   	pop    esi
c0017268:	5f                   	pop    edi
c0017269:	c3                   	ret    
c001726a:	66 90                	xchg   ax,ax

c001726c <unblockTask(ThreadControlBlock*)>:
c001726c:	53                   	push   ebx
c001726d:	83 ec 08             	sub    esp,0x8
c0017270:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017274:	fa                   	cli    
c0017275:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001727b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001727e:	83 c2 01             	add    edx,0x1
c0017281:	85 c0                	test   eax,eax
c0017283:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0017289:	74 6d                	je     c00172f8 <unblockTask(ThreadControlBlock*)+0x8c>
c001728b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001728e:	83 f8 01             	cmp    eax,0x1
c0017291:	74 39                	je     c00172cc <unblockTask(ThreadControlBlock*)+0x60>
c0017293:	83 ec 0c             	sub    esp,0xc
c0017296:	68 4c ea 02 c0       	push   0xc002ea4c
c001729b:	e8 78 a9 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172a0:	83 c4 10             	add    esp,0x10
c00172a3:	85 c0                	test   eax,eax
c00172a5:	75 1d                	jne    c00172c4 <unblockTask(ThreadControlBlock*)+0x58>
c00172a7:	eb 63                	jmp    c001730c <unblockTask(ThreadControlBlock*)+0xa0>
c00172a9:	8d 76 00             	lea    esi,[esi+0x0]
c00172ac:	83 ec 08             	sub    esp,0x8
c00172af:	50                   	push   eax
c00172b0:	68 4c ea 02 c0       	push   0xc002ea4c
c00172b5:	e8 6a ae 00 00       	call   c0022124 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00172ba:	83 c4 10             	add    esp,0x10
c00172bd:	85 c0                	test   eax,eax
c00172bf:	74 4b                	je     c001730c <unblockTask(ThreadControlBlock*)+0xa0>
c00172c1:	8d 76 00             	lea    esi,[esi+0x0]
c00172c4:	39 c3                	cmp    ebx,eax
c00172c6:	75 e4                	jne    c00172ac <unblockTask(ThreadControlBlock*)+0x40>
c00172c8:	eb 12                	jmp    c00172dc <unblockTask(ThreadControlBlock*)+0x70>
c00172ca:	66 90                	xchg   ax,ax
c00172cc:	83 ec 0c             	sub    esp,0xc
c00172cf:	68 61 4e 02 c0       	push   0xc0024e61
c00172d4:	e8 8b fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00172d9:	83 c4 10             	add    esp,0x10
c00172dc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00172e4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00172e9:	85 c0                	test   eax,eax
c00172eb:	75 03                	jne    c00172f0 <unblockTask(ThreadControlBlock*)+0x84>
c00172ed:	fb                   	sti    
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	83 c4 08             	add    esp,0x8
c00172f3:	5b                   	pop    ebx
c00172f4:	c3                   	ret    
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	68 4a 4e 02 c0       	push   0xc0024e4a
c0017300:	e8 5f fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	eb d2                	jmp    c00172dc <unblockTask(ThreadControlBlock*)+0x70>
c001730a:	66 90                	xchg   ax,ax
c001730c:	83 ec 08             	sub    esp,0x8
c001730f:	53                   	push   ebx
c0017310:	68 4c ea 02 c0       	push   0xc002ea4c
c0017315:	e8 c2 a9 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	eb bd                	jmp    c00172dc <unblockTask(ThreadControlBlock*)+0x70>
c001731f:	90                   	nop

c0017320 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017320:	55                   	push   ebp
c0017321:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017326:	57                   	push   edi
c0017327:	56                   	push   esi
c0017328:	53                   	push   ebx
c0017329:	83 ec 1c             	sub    esp,0x1c
c001732c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017330:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017333:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017336:	d3 c0                	rol    eax,cl
c0017338:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001733f:	21 c8                	and    eax,ecx
c0017341:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017348:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001734b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017353:	0f 85 b7 01 00 00    	jne    c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017359:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001735f:	85 ed                	test   ebp,ebp
c0017361:	7e 29                	jle    c001738c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017363:	31 f6                	xor    esi,esi
c0017365:	8d 76 00             	lea    esi,[esi+0x0]
c0017368:	83 ec 0c             	sub    esp,0xc
c001736b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017372:	83 c6 01             	add    esi,0x1
c0017375:	57                   	push   edi
c0017376:	e8 2c 89 ff ff       	call   c000fca7 <free>
c001737b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001737e:	83 c4 10             	add    esp,0x10
c0017381:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017387:	7f df                	jg     c0017368 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017389:	8d 76 00             	lea    esi,[esi+0x0]
c001738c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017396:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017399:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c001739f:	89 f7                	mov    edi,esi
c00173a1:	85 ed                	test   ebp,ebp
c00173a3:	74 1b                	je     c00173c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00173a5:	83 ec 0c             	sub    esp,0xc
c00173a8:	55                   	push   ebp
c00173a9:	e8 8e 73 ff ff       	call   c000e73c <EnvVarContainer::~EnvVarContainer()>
c00173ae:	59                   	pop    ecx
c00173af:	5e                   	pop    esi
c00173b0:	6a 0c                	push   0xc
c00173b2:	55                   	push   ebp
c00173b3:	e8 67 5f ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00173b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	89 f7                	mov    edi,esi
c00173c0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00173c6:	85 c0                	test   eax,eax
c00173c8:	0f 84 b6 00 00 00    	je     c0017484 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00173ce:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00173d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173d5:	31 c9                	xor    ecx,ecx
c00173d7:	eb 17                	jmp    c00173f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00173d9:	8d 76 00             	lea    esi,[esi+0x0]
c00173dc:	83 c1 01             	add    ecx,0x1
c00173df:	83 f9 10             	cmp    ecx,0x10
c00173e2:	0f 84 9c 00 00 00    	je     c0017484 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00173e8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00173ee:	66 90                	xchg   ax,ax
c00173f0:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00173f7:	d3 fa                	sar    edx,cl
c00173f9:	80 e2 01             	and    dl,0x1
c00173fc:	74 de                	je     c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00173fe:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017401:	01 d2                	add    edx,edx
c0017403:	01 ca                	add    edx,ecx
c0017405:	01 d2                	add    edx,edx
c0017407:	01 ca                	add    edx,ecx
c0017409:	8d 14 92             	lea    edx,[edx+edx*4]
c001740c:	01 d0                	add    eax,edx
c001740e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017414:	83 fd 07             	cmp    ebp,0x7
c0017417:	75 c3                	jne    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017419:	05 40 02 00 00       	add    eax,0x240
c001741e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017421:	83 fd ff             	cmp    ebp,0xffffffff
c0017424:	0f 8c ee 00 00 00    	jl     c0017518 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001742a:	0f 84 ac 01 00 00    	je     c00175dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017430:	85 ed                	test   ebp,ebp
c0017432:	0f 84 90 01 00 00    	je     c00175c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017438:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001743a:	75 a0                	jne    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001743c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017442:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017446:	01 d0                	add    eax,edx
c0017448:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001744c:	83 ec 0c             	sub    esp,0xc
c001744f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017455:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017458:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001745e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017465:	50                   	push   eax
c0017466:	e8 01 fe ff ff       	call   c001726c <unblockTask(ThreadControlBlock*)>
c001746b:	83 c4 10             	add    esp,0x10
c001746e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017475:	89 f7                	mov    edi,esi
c0017477:	83 c1 01             	add    ecx,0x1
c001747a:	83 f9 10             	cmp    ecx,0x10
c001747d:	0f 85 65 ff ff ff    	jne    c00173e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017483:	90                   	nop
c0017484:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001748a:	85 c0                	test   eax,eax
c001748c:	74 62                	je     c00174f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001748e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017494:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001749a:	74 54                	je     c00174f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001749c:	83 ec 0c             	sub    esp,0xc
c001749f:	68 4c ea 02 c0       	push   0xc002ea4c
c00174a4:	e8 6f a7 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174a9:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00174b0:	89 c7                	mov    edi,eax
c00174b2:	e8 45 a7 00 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	84 c0                	test   al,al
c00174bc:	0f 84 ce 00 00 00    	je     c0017590 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00174c2:	66 90                	xchg   ax,ax
c00174c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174c7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00174cd:	85 d2                	test   edx,edx
c00174cf:	74 0f                	je     c00174e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00174d1:	83 ec 0c             	sub    esp,0xc
c00174d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00174d6:	52                   	push   edx
c00174d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00174ea:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00174f6:	85 db                	test   ebx,ebx
c00174f8:	74 16                	je     c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	53                   	push   ebx
c00174fe:	e8 e5 c4 ff ff       	call   c00139e8 <VAS::~VAS()>
c0017503:	58                   	pop    eax
c0017504:	5a                   	pop    edx
c0017505:	6a 14                	push   0x14
c0017507:	53                   	push   ebx
c0017508:	e8 12 5e ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001750d:	83 c4 10             	add    esp,0x10
c0017510:	83 c4 1c             	add    esp,0x1c
c0017513:	5b                   	pop    ebx
c0017514:	5e                   	pop    esi
c0017515:	5f                   	pop    edi
c0017516:	5d                   	pop    ebp
c0017517:	c3                   	ret    
c0017518:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001751c:	83 ec 0c             	sub    esp,0xc
c001751f:	68 00 4f 02 c0       	push   0xc0024f00
c0017524:	e8 b5 8a ff ff       	call   c000ffde <KePanic(char const*)>
c0017529:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	89 f7                	mov    edi,esi
c0017531:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017535:	e9 a2 fe ff ff       	jmp    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001753a:	66 90                	xchg   ax,ax
c001753c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017542:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017548:	75 1e                	jne    c0017568 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001754a:	83 ec 0c             	sub    esp,0xc
c001754d:	68 68 4f 02 c0       	push   0xc0024f68
c0017552:	e8 0d fa fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017557:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001755e:	e8 6d fa ff ff       	call   c0016fd0 <blockTask(TaskState)>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	66 90                	xchg   ax,ax
c0017568:	83 ec 08             	sub    esp,0x8
c001756b:	56                   	push   esi
c001756c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017571:	e8 66 a7 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017576:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c001757d:	e8 96 a6 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	39 f8                	cmp    eax,edi
c0017587:	0f 84 37 ff ff ff    	je     c00174c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c001758d:	8d 76 00             	lea    esi,[esi+0x0]
c0017590:	83 ec 0c             	sub    esp,0xc
c0017593:	68 4c ea 02 c0       	push   0xc002ea4c
c0017598:	e8 7b a6 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001759d:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00175a4:	89 c6                	mov    esi,eax
c00175a6:	e8 75 a6 00 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	39 f3                	cmp    ebx,esi
c00175b0:	74 b6                	je     c0017568 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00175b2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00175b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175b8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00175be:	75 a8                	jne    c0017568 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00175c0:	e9 77 ff ff ff       	jmp    c001753c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00175c5:	8d 76 00             	lea    esi,[esi+0x0]
c00175c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175cc:	83 ec 0c             	sub    esp,0xc
c00175cf:	68 34 4f 02 c0       	push   0xc0024f34
c00175d4:	e9 4b ff ff ff       	jmp    c0017524 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00175d9:	8d 76 00             	lea    esi,[esi+0x0]
c00175dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00175de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175e2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00175e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175e8:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00175ee:	01 d7                	add    edi,edx
c00175f0:	89 f8                	mov    eax,edi
c00175f2:	e9 51 fe ff ff       	jmp    c0017448 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00175f7:	90                   	nop

c00175f8 <cleanerTaskFunction(void*)>:
c00175f8:	53                   	push   ebx
c00175f9:	83 ec 08             	sub    esp,0x8
c00175fc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017604:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017609:	85 c0                	test   eax,eax
c001760b:	75 03                	jne    c0017610 <cleanerTaskFunction(void*)+0x18>
c001760d:	fb                   	sti    
c001760e:	66 90                	xchg   ax,ax
c0017610:	fa                   	cli    
c0017611:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017616:	83 c0 01             	add    eax,0x1
c0017619:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017620:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017625:	0f 85 c9 00 00 00    	jne    c00176f4 <cleanerTaskFunction(void*)+0xfc>
c001762b:	83 ec 0c             	sub    esp,0xc
c001762e:	6a 02                	push   0x2
c0017630:	e8 6f f9 ff ff       	call   c0016fa4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c001763f:	fa                   	cli    
c0017640:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017646:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c001764c:	83 c1 01             	add    ecx,0x1
c001764f:	83 c3 01             	add    ebx,0x1
c0017652:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0017658:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c001765e:	fa                   	cli    
c001765f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017664:	83 c0 01             	add    eax,0x1
c0017667:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001766c:	eb 2a                	jmp    c0017698 <cleanerTaskFunction(void*)+0xa0>
c001766e:	66 90                	xchg   ax,ax
c0017670:	83 ec 0c             	sub    esp,0xc
c0017673:	68 34 ea 02 c0       	push   0xc002ea34
c0017678:	e8 9b a5 00 00       	call   c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001767d:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c0017684:	89 c3                	mov    ebx,eax
c0017686:	e8 95 a5 00 00       	call   c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001768b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001768e:	e8 8d fc ff ff       	call   c0017320 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	66 90                	xchg   ax,ax
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	68 34 ea 02 c0       	push   0xc002ea34
c00176a0:	e8 57 a5 00 00       	call   c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	84 c0                	test   al,al
c00176aa:	74 c4                	je     c0017670 <cleanerTaskFunction(void*)+0x78>
c00176ac:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00176b4:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00176ba:	85 d2                	test   edx,edx
c00176bc:	75 02                	jne    c00176c0 <cleanerTaskFunction(void*)+0xc8>
c00176be:	fb                   	sti    
c00176bf:	90                   	nop
c00176c0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00176c5:	83 e8 01             	sub    eax,0x1
c00176c8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00176cd:	0f 85 29 ff ff ff    	jne    c00175fc <cleanerTaskFunction(void*)+0x4>
c00176d3:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c00176d8:	85 c0                	test   eax,eax
c00176da:	0f 84 1c ff ff ff    	je     c00175fc <cleanerTaskFunction(void*)+0x4>
c00176e0:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c00176ea:	e8 21 f8 ff ff       	call   c0016f10 <schedule()>
c00176ef:	e9 08 ff ff ff       	jmp    c00175fc <cleanerTaskFunction(void*)+0x4>
c00176f4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00176fc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017701:	85 c0                	test   eax,eax
c0017703:	0f 85 2f ff ff ff    	jne    c0017638 <cleanerTaskFunction(void*)+0x40>
c0017709:	fb                   	sti    
c001770a:	e9 29 ff ff ff       	jmp    c0017638 <cleanerTaskFunction(void*)+0x40>
c001770f:	90                   	nop

c0017710 <terminateTask(int)>:
c0017710:	83 ec 14             	sub    esp,0x14
c0017713:	fa                   	cli    
c0017714:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017719:	83 c0 01             	add    eax,0x1
c001771c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017721:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017726:	83 c0 01             	add    eax,0x1
c0017729:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c001772e:	fa                   	cli    
c001772f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017734:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017738:	83 c0 01             	add    eax,0x1
c001773b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017745:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001774d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017750:	50                   	push   eax
c0017751:	68 34 ea 02 c0       	push   0xc002ea34
c0017756:	e8 81 a5 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001775b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017760:	83 c4 10             	add    esp,0x10
c0017763:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001776a:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c001776f:	85 c0                	test   eax,eax
c0017771:	0f 84 81 00 00 00    	je     c00177f8 <terminateTask(int)+0xe8>
c0017777:	83 ec 0c             	sub    esp,0xc
c001777a:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c0017781:	50                   	push   eax
c0017782:	e8 e5 fa ff ff       	call   c001726c <unblockTask(ThreadControlBlock*)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	66 90                	xchg   ax,ax
c001778c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017794:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017799:	85 c0                	test   eax,eax
c001779b:	75 03                	jne    c00177a0 <terminateTask(int)+0x90>
c001779d:	fb                   	sti    
c001779e:	66 90                	xchg   ax,ax
c00177a0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00177a5:	83 e8 01             	sub    eax,0x1
c00177a8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00177ad:	75 09                	jne    c00177b8 <terminateTask(int)+0xa8>
c00177af:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c00177b6:	75 54                	jne    c001780c <terminateTask(int)+0xfc>
c00177b8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177c0:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00177c6:	85 c9                	test   ecx,ecx
c00177c8:	75 06                	jne    c00177d0 <terminateTask(int)+0xc0>
c00177ca:	66 90                	xchg   ax,ax
c00177cc:	fb                   	sti    
c00177cd:	8d 76 00             	lea    esi,[esi+0x0]
c00177d0:	fa                   	cli    
c00177d1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177d6:	83 c0 01             	add    eax,0x1
c00177d9:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00177de:	e8 2d f7 ff ff       	call   c0016f10 <schedule()>
c00177e3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177eb:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00177f1:	85 d2                	test   edx,edx
c00177f3:	75 db                	jne    c00177d0 <terminateTask(int)+0xc0>
c00177f5:	eb d5                	jmp    c00177cc <terminateTask(int)+0xbc>
c00177f7:	90                   	nop
c00177f8:	83 ec 0c             	sub    esp,0xc
c00177fb:	68 78 4e 02 c0       	push   0xc0024e78
c0017800:	e8 5f f7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	eb 82                	jmp    c001778c <terminateTask(int)+0x7c>
c001780a:	66 90                	xchg   ax,ax
c001780c:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017816:	e8 f5 f6 ff ff       	call   c0016f10 <schedule()>
c001781b:	eb 9b                	jmp    c00177b8 <terminateTask(int)+0xa8>
c001781d:	8d 76 00             	lea    esi,[esi+0x0]

c0017820 <Thr::terminateFromIRQ(int)>:
c0017820:	83 ec 18             	sub    esp,0x18
c0017823:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017827:	50                   	push   eax
c0017828:	e8 e3 fe ff ff       	call   c0017710 <terminateTask(int)>
c001782d:	8d 76 00             	lea    esi,[esi+0x0]

c0017830 <__static_initialization_and_destruction_0(int, int)>:
c0017830:	83 ec 0c             	sub    esp,0xc
c0017833:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017838:	0f 85 8e 00 00 00    	jne    c00178cc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001783e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017846:	0f 85 80 00 00 00    	jne    c00178cc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	68 4c ea 02 c0       	push   0xc002ea4c
c0017854:	e8 23 a9 00 00       	call   c002217c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	83 ec 04             	sub    esp,0x4
c001785f:	68 84 5f 02 c0       	push   0xc0025f84
c0017864:	68 4c ea 02 c0       	push   0xc002ea4c
c0017869:	68 2c 21 02 c0       	push   0xc002212c
c001786e:	e8 5c 5a ff ff       	call   c000d2cf <__cxa_atexit>
c0017873:	83 c4 10             	add    esp,0x10
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	68 40 ea 02 c0       	push   0xc002ea40
c001787e:	e8 f9 a8 00 00       	call   c002217c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	83 ec 04             	sub    esp,0x4
c0017889:	68 84 5f 02 c0       	push   0xc0025f84
c001788e:	68 40 ea 02 c0       	push   0xc002ea40
c0017893:	68 2c 21 02 c0       	push   0xc002212c
c0017898:	e8 32 5a ff ff       	call   c000d2cf <__cxa_atexit>
c001789d:	83 c4 10             	add    esp,0x10
c00178a0:	83 ec 0c             	sub    esp,0xc
c00178a3:	68 34 ea 02 c0       	push   0xc002ea34
c00178a8:	e8 cf a8 00 00       	call   c002217c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	83 ec 04             	sub    esp,0x4
c00178b3:	68 84 5f 02 c0       	push   0xc0025f84
c00178b8:	68 34 ea 02 c0       	push   0xc002ea34
c00178bd:	68 2c 21 02 c0       	push   0xc002212c
c00178c2:	e8 08 5a ff ff       	call   c000d2cf <__cxa_atexit>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	66 90                	xchg   ax,ax
c00178cc:	90                   	nop
c00178cd:	83 c4 0c             	add    esp,0xc
c00178d0:	c3                   	ret    
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]

c00178d4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00178d4:	83 ec 0c             	sub    esp,0xc
c00178d7:	83 ec 08             	sub    esp,0x8
c00178da:	68 ff ff 00 00       	push   0xffff
c00178df:	6a 01                	push   0x1
c00178e1:	e8 4a ff ff ff       	call   c0017830 <__static_initialization_and_destruction_0(int, int)>
c00178e6:	83 c4 10             	add    esp,0x10
c00178e9:	83 c4 0c             	add    esp,0xc
c00178ec:	c3                   	ret    

c00178ed <Vm::inbv(unsigned short)>:
c00178ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00178f1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00178f6:	75 06                	jne    c00178fe <Vm::inbv(unsigned short)+0x11>
c00178f8:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c00178fd:	c3                   	ret    
c00178fe:	ec                   	in     al,dx
c00178ff:	c3                   	ret    

c0017900 <Vm::outbv(unsigned short, unsigned char)>:
c0017900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017908:	66 81 fa fe fe       	cmp    dx,0xfefe
c001790d:	75 25                	jne    c0017934 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001790f:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017915:	8d 51 01             	lea    edx,[ecx+0x1]
c0017918:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c001791e:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c0017924:	83 fa 20             	cmp    edx,0x20
c0017927:	75 0c                	jne    c0017935 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017929:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c0017933:	c3                   	ret    
c0017934:	ee                   	out    dx,al
c0017935:	c3                   	ret    

c0017936 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017936:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001793b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017940:	c1 e0 04             	shl    eax,0x4
c0017943:	01 d0                	add    eax,edx
c0017945:	c3                   	ret    

c0017946 <Vm::getSegment(unsigned int)>:
c0017946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001794a:	c1 e8 10             	shr    eax,0x10
c001794d:	c3                   	ret    

c001794e <Vm::getOffset(unsigned int)>:
c001794e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017952:	c3                   	ret    

c0017953 <Vm::mainloop2()>:
c0017953:	83 ec 18             	sub    esp,0x18
c0017956:	fa                   	cli    
c0017957:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001795d:	6a 02                	push   0x2
c001795f:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c0017966:	e8 39 f6 ff ff       	call   c0016fa4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001796b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017970:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017974:	52                   	push   edx
c0017975:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017979:	52                   	push   edx
c001797a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001797e:	52                   	push   edx
c001797f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017983:	50                   	push   eax
c0017984:	e8 86 88 fe ff       	call   c000020f <goToVM86>
c0017989:	83 c4 2c             	add    esp,0x2c
c001798c:	c3                   	ret    

c001798d <Vm::mainVm8086Loop(void*)>:
c001798d:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017994:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001799b:	75 01                	jne    c001799e <Vm::mainVm8086Loop(void*)+0x11>
c001799d:	fb                   	sti    
c001799e:	eb b3                	jmp    c0017953 <Vm::mainloop2()>

c00179a0 <Vm::mainloop3(unsigned long)>:
c00179a0:	83 ec 18             	sub    esp,0x18
c00179a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179a7:	fa                   	cli    
c00179a8:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00179ae:	6a 02                	push   0x2
c00179b0:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c00179b7:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c00179bc:	e8 e3 f5 ff ff       	call   c0016fa4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00179c1:	83 c4 1c             	add    esp,0x1c
c00179c4:	eb 8d                	jmp    c0017953 <Vm::mainloop2()>

c00179c6 <Vm::initialise8086()>:
c00179c6:	83 ec 0c             	sub    esp,0xc
c00179c9:	68 80 00 00 00       	push   0x80
c00179ce:	6a 00                	push   0x0
c00179d0:	68 8d 79 01 c0       	push   0xc001798d
c00179d5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00179db:	e8 a0 f2 ff ff       	call   c0016c80 <Process::createThread(void (*)(void*), void*, int)>
c00179e0:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00179e7:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c00179ec:	68 10 01 00 00       	push   0x110
c00179f1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00179f6:	6a 00                	push   0x0
c00179f8:	6a 00                	push   0x0
c00179fa:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0017a00:	e8 35 c3 ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a05:	83 c4 2c             	add    esp,0x2c
c0017a08:	c3                   	ret    

c0017a09 <Vm::resetConventionalMemory8086()>:
c0017a09:	c3                   	ret    

c0017a0a <Vm::finish8086()>:
c0017a0a:	53                   	push   ebx
c0017a0b:	83 ec 08             	sub    esp,0x8
c0017a0e:	fa                   	cli    
c0017a0f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017a15:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017a1c:	75 18                	jne    c0017a36 <Vm::finish8086()+0x2c>
c0017a1e:	e8 ed f4 ff ff       	call   c0016f10 <schedule()>
c0017a23:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a2a:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a31:	75 db                	jne    c0017a0e <Vm::finish8086()+0x4>
c0017a33:	fb                   	sti    
c0017a34:	eb d8                	jmp    c0017a0e <Vm::finish8086()+0x4>
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c0017a3f:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017a45:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c0017a4c:	e8 1b f8 ff ff       	call   c001726c <unblockTask(ThreadControlBlock*)>
c0017a51:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a62:	75 01                	jne    c0017a65 <Vm::finish8086()+0x5b>
c0017a64:	fb                   	sti    
c0017a65:	89 d8                	mov    eax,ebx
c0017a67:	83 c4 08             	add    esp,0x8
c0017a6a:	5b                   	pop    ebx
c0017a6b:	c3                   	ret    

c0017a6c <Vm::getOutput8086(unsigned char*)>:
c0017a6c:	57                   	push   edi
c0017a6d:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017a73:	56                   	push   esi
c0017a74:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c0017a79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a7f:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c0017a84:	5e                   	pop    esi
c0017a85:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017a8f:	5f                   	pop    edi
c0017a90:	c3                   	ret    

c0017a91 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017a91:	55                   	push   ebp
c0017a92:	57                   	push   edi
c0017a93:	56                   	push   esi
c0017a94:	53                   	push   ebx
c0017a95:	83 ec 2c             	sub    esp,0x2c
c0017a98:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017a9c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017aa0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017aa4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aac:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017ab3:	75 5d                	jne    c0017b12 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017ab5:	83 ec 0c             	sub    esp,0xc
c0017ab8:	68 14 01 00 00       	push   0x114
c0017abd:	e8 d5 81 ff ff       	call   c000fc97 <malloc>
c0017ac2:	83 c4 0c             	add    esp,0xc
c0017ac5:	89 c7                	mov    edi,eax
c0017ac7:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017acd:	68 90 4f 02 c0       	push   0xc0024f90
c0017ad2:	50                   	push   eax
c0017ad3:	e8 5a 06 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017ad8:	58                   	pop    eax
c0017ad9:	5a                   	pop    edx
c0017ada:	6a 12                	push   0x12
c0017adc:	57                   	push   edi
c0017add:	e8 6e 06 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017ae2:	59                   	pop    ecx
c0017ae3:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ae5:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017ae9:	51                   	push   ecx
c0017aea:	6a 00                	push   0x0
c0017aec:	6a 00                	push   0x0
c0017aee:	68 00 00 11 00       	push   0x110000
c0017af3:	57                   	push   edi
c0017af4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017af7:	83 c4 14             	add    esp,0x14
c0017afa:	57                   	push   edi
c0017afb:	e8 ae 06 ff ff       	call   c00081ae <File::close()>
c0017b00:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b08:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	fa                   	cli    
c0017b13:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017b19:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017b20:	75 18                	jne    c0017b3a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017b22:	e8 e9 f3 ff ff       	call   c0016f10 <schedule()>
c0017b27:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b2e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017b35:	75 db                	jne    c0017b12 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017b37:	fb                   	sti    
c0017b38:	eb d8                	jmp    c0017b12 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017b3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b3e:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017b43:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017b4d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017b51:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017b55:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017b59:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017b5d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017b61:	0f b7 f6             	movzx  esi,si
c0017b64:	0f b7 db             	movzx  ebx,bx
c0017b67:	50                   	push   eax
c0017b68:	6a 20                	push   0x20
c0017b6a:	6a 00                	push   0x0
c0017b6c:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017b71:	e8 7a 89 fe ff       	call   c00004f0 <memset>
c0017b76:	5a                   	pop    edx
c0017b77:	59                   	pop    ecx
c0017b78:	56                   	push   esi
c0017b79:	53                   	push   ebx
c0017b7a:	e8 b7 fd ff ff       	call   c0017936 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	89 c7                	mov    edi,eax
c0017b84:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017b88:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017b8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b8e:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017b95:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b9c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017ba3:	75 01                	jne    c0017ba6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0017ba5:	fb                   	sti    
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017baf:	e8 b8 f6 ff ff       	call   c001726c <unblockTask(ThreadControlBlock*)>
c0017bb4:	83 c4 3c             	add    esp,0x3c
c0017bb7:	b0 01                	mov    al,0x1
c0017bb9:	5b                   	pop    ebx
c0017bba:	5e                   	pop    esi
c0017bbb:	5f                   	pop    edi
c0017bbc:	5d                   	pop    ebp
c0017bbd:	c3                   	ret    

c0017bbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017bbe:	55                   	push   ebp
c0017bbf:	57                   	push   edi
c0017bc0:	56                   	push   esi
c0017bc1:	53                   	push   ebx
c0017bc2:	83 ec 2c             	sub    esp,0x2c
c0017bc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017bc9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017bcd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017bd1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bd9:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017be0:	75 5d                	jne    c0017c3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	68 14 01 00 00       	push   0x114
c0017bea:	e8 a8 80 ff ff       	call   c000fc97 <malloc>
c0017bef:	83 c4 0c             	add    esp,0xc
c0017bf2:	89 c6                	mov    esi,eax
c0017bf4:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017bfa:	68 90 4f 02 c0       	push   0xc0024f90
c0017bff:	50                   	push   eax
c0017c00:	e8 2d 05 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017c05:	58                   	pop    eax
c0017c06:	5a                   	pop    edx
c0017c07:	6a 12                	push   0x12
c0017c09:	56                   	push   esi
c0017c0a:	e8 41 05 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017c0f:	59                   	pop    ecx
c0017c10:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c12:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c16:	52                   	push   edx
c0017c17:	6a 00                	push   0x0
c0017c19:	6a 00                	push   0x0
c0017c1b:	68 00 00 11 00       	push   0x110000
c0017c20:	56                   	push   esi
c0017c21:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017c24:	83 c4 14             	add    esp,0x14
c0017c27:	56                   	push   esi
c0017c28:	e8 81 05 ff ff       	call   c00081ae <File::close()>
c0017c2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017c32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c35:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017c3c:	83 c4 10             	add    esp,0x10
c0017c3f:	50                   	push   eax
c0017c40:	50                   	push   eax
c0017c41:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c45:	68 ab 4f 02 c0       	push   0xc0024fab
c0017c4a:	e8 15 f3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	fa                   	cli    
c0017c53:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017c59:	0f b6 35 89 ea 02 c0 	movzx  esi,BYTE PTR ds:0xc002ea89
c0017c60:	89 f0                	mov    eax,esi
c0017c62:	84 c0                	test   al,al
c0017c64:	75 18                	jne    c0017c7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0017c66:	e8 a5 f2 ff ff       	call   c0016f10 <schedule()>
c0017c6b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017c72:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017c79:	75 d7                	jne    c0017c52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017c7b:	fb                   	sti    
c0017c7c:	eb d4                	jmp    c0017c52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c82:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017c87:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017c91:	66 89 48 5f          	mov    WORD PTR [eax+0x5f],cx
c0017c95:	66 89 58 5d          	mov    WORD PTR [eax+0x5d],bx
c0017c99:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0017c9d:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017ca1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017ca5:	50                   	push   eax
c0017ca6:	6a 20                	push   0x20
c0017ca8:	6a 00                	push   0x0
c0017caa:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017caf:	e8 3c 88 fe ff       	call   c00004f0 <memset>
c0017cb4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017cbb:	e8 d7 7f ff ff       	call   c000fc97 <malloc>
c0017cc0:	83 c4 0c             	add    esp,0xc
c0017cc3:	89 c3                	mov    ebx,eax
c0017cc5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017ccb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ccf:	50                   	push   eax
c0017cd0:	e8 5d 04 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	85 db                	test   ebx,ebx
c0017cda:	75 0a                	jne    c0017ce6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	68 cd 4f 02 c0       	push   0xc0024fcd
c0017ce4:	eb 2b                	jmp    c0017d11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0017ce6:	50                   	push   eax
c0017ce7:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017ceb:	50                   	push   eax
c0017cec:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017cf0:	50                   	push   eax
c0017cf1:	53                   	push   ebx
c0017cf2:	e8 5b 07 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0017cf7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017cfb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017cff:	83 c4 10             	add    esp,0x10
c0017d02:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017d07:	74 28                	je     c0017d31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	68 e1 4f 02 c0       	push   0xc0024fe1
c0017d11:	e8 c8 82 ff ff       	call   c000ffde <KePanic(char const*)>
c0017d16:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017d27:	75 01                	jne    c0017d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017d29:	fb                   	sti    
c0017d2a:	31 f6                	xor    esi,esi
c0017d2c:	e9 91 00 00 00       	jmp    c0017dc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017d31:	51                   	push   ecx
c0017d32:	51                   	push   ecx
c0017d33:	6a 01                	push   0x1
c0017d35:	53                   	push   ebx
c0017d36:	e8 15 04 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017d3b:	83 c4 10             	add    esp,0x10
c0017d3e:	85 c0                	test   eax,eax
c0017d40:	74 27                	je     c0017d69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0017d42:	83 ec 0c             	sub    esp,0xc
c0017d45:	68 fa 4f 02 c0       	push   0xc0024ffa
c0017d4a:	e8 8f 82 ff ff       	call   c000ffde <KePanic(char const*)>
c0017d4f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017d60:	75 c8                	jne    c0017d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017d62:	fb                   	sti    
c0017d63:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0017d67:	eb 59                	jmp    c0017dc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017d69:	0f b7 ff             	movzx  edi,di
c0017d6c:	50                   	push   eax
c0017d6d:	50                   	push   eax
c0017d6e:	0f b7 c5             	movzx  eax,bp
c0017d71:	57                   	push   edi
c0017d72:	50                   	push   eax
c0017d73:	e8 be fb ff ff       	call   c0017936 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d78:	5a                   	pop    edx
c0017d79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017d7b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017d7f:	51                   	push   ecx
c0017d80:	50                   	push   eax
c0017d81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d89:	53                   	push   ebx
c0017d8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017d8d:	83 c4 14             	add    esp,0x14
c0017d90:	53                   	push   ebx
c0017d91:	e8 18 04 ff ff       	call   c00081ae <File::close()>
c0017d96:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017d9d:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017dae:	75 01                	jne    c0017db1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0017db0:	fb                   	sti    
c0017db1:	83 ec 0c             	sub    esp,0xc
c0017db4:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017dba:	e8 ad f4 ff ff       	call   c001726c <unblockTask(ThreadControlBlock*)>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	83 c4 2c             	add    esp,0x2c
c0017dc5:	89 f0                	mov    eax,esi
c0017dc7:	5b                   	pop    ebx
c0017dc8:	5e                   	pop    esi
c0017dc9:	5f                   	pop    edi
c0017dca:	5d                   	pop    ebp
c0017dcb:	c3                   	ret    

c0017dcc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017dcc:	57                   	push   edi
c0017dcd:	56                   	push   esi
c0017dce:	53                   	push   ebx
c0017dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017ddb:	83 e8 06             	sub    eax,0x6
c0017dde:	0f b7 c0             	movzx  eax,ax
c0017de1:	50                   	push   eax
c0017de2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017de7:	50                   	push   eax
c0017de8:	e8 49 fb ff ff       	call   c0017936 <Vm::realToLinear(unsigned short, unsigned short)>
c0017ded:	5a                   	pop    edx
c0017dee:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017df1:	59                   	pop    ecx
c0017df2:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017df5:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017df8:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017dfe:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017e01:	8d 56 02             	lea    edx,[esi+0x2]
c0017e04:	66 89 10             	mov    WORD PTR [eax],dx
c0017e07:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017e0b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017e0f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017e12:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017e16:	0f b6 f1             	movzx  esi,cl
c0017e19:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017e1d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e23:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017e27:	0f b6 d5             	movzx  edx,ch
c0017e2a:	74 0a                	je     c0017e36 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017e2c:	c1 e2 08             	shl    edx,0x8
c0017e2f:	09 f2                	or     edx,esi
c0017e31:	80 ce 02             	or     dh,0x2
c0017e34:	eb 08                	jmp    c0017e3e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017e36:	c1 e2 08             	shl    edx,0x8
c0017e39:	09 f2                	or     edx,esi
c0017e3b:	80 e6 fd             	and    dh,0xfd
c0017e3e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e47:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017e4b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017e53:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017e56:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017e5e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017e61:	5b                   	pop    ebx
c0017e62:	5e                   	pop    esi
c0017e63:	5f                   	pop    edi
c0017e64:	c3                   	ret    

c0017e65 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017e65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e6f:	c1 e0 04             	shl    eax,0x4
c0017e72:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017e75:	c3                   	ret    

c0017e76 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017e76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e80:	c1 e0 04             	shl    eax,0x4
c0017e83:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017e87:	c3                   	ret    

c0017e88 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017e88:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e8d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e92:	c1 e0 04             	shl    eax,0x4
c0017e95:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017e98:	c3                   	ret    

c0017e99 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017e99:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e9e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ea3:	c1 e0 04             	shl    eax,0x4
c0017ea6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017eaa:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017ead:	c3                   	ret    

c0017eae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017eae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017eb3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017eb8:	c1 e0 04             	shl    eax,0x4
c0017ebb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ebf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017ec3:	c3                   	ret    

c0017ec4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017ec4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ec9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ece:	c1 e0 04             	shl    eax,0x4
c0017ed1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ed5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017ed8:	c3                   	ret    

c0017ed9 <Vm::faultHandler(regs*)>:
c0017ed9:	55                   	push   ebp
c0017eda:	57                   	push   edi
c0017edb:	56                   	push   esi
c0017edc:	53                   	push   ebx
c0017edd:	83 ec 2c             	sub    esp,0x2c
c0017ee0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017ee4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017ee7:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017eeb:	0f b7 f8             	movzx  edi,ax
c0017eee:	52                   	push   edx
c0017eef:	0f b7 c0             	movzx  eax,ax
c0017ef2:	50                   	push   eax
c0017ef3:	e8 3e fa ff ff       	call   c0017936 <Vm::realToLinear(unsigned short, unsigned short)>
c0017ef8:	5a                   	pop    edx
c0017ef9:	59                   	pop    ecx
c0017efa:	89 c1                	mov    ecx,eax
c0017efc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f03:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017f08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f0c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017f0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f13:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017f18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f24:	e8 0d fa ff ff       	call   c0017936 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f29:	5e                   	pop    esi
c0017f2a:	be 06 00 00 00       	mov    esi,0x6
c0017f2f:	5d                   	pop    ebp
c0017f30:	31 ed                	xor    ebp,ebp
c0017f32:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f37:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017f3a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017f40:	0f 84 74 02 00 00    	je     c00181ba <Vm::faultHandler(regs*)+0x2e1>
c0017f46:	0f 87 94 00 00 00    	ja     c0017fe0 <Vm::faultHandler(regs*)+0x107>
c0017f4c:	83 fa 66             	cmp    edx,0x66
c0017f4f:	0f 84 e2 01 00 00    	je     c0018137 <Vm::faultHandler(regs*)+0x25e>
c0017f55:	77 47                	ja     c0017f9e <Vm::faultHandler(regs*)+0xc5>
c0017f57:	83 fa 36             	cmp    edx,0x36
c0017f5a:	0f 84 ca 01 00 00    	je     c001812a <Vm::faultHandler(regs*)+0x251>
c0017f60:	77 1a                	ja     c0017f7c <Vm::faultHandler(regs*)+0xa3>
c0017f62:	83 fa 26             	cmp    edx,0x26
c0017f65:	0f 84 98 01 00 00    	je     c0018103 <Vm::faultHandler(regs*)+0x22a>
c0017f6b:	83 fa 2e             	cmp    edx,0x2e
c0017f6e:	0f 85 21 06 00 00    	jne    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c0017f74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f77:	31 f6                	xor    esi,esi
c0017f79:	41                   	inc    ecx
c0017f7a:	eb bb                	jmp    c0017f37 <Vm::faultHandler(regs*)+0x5e>
c0017f7c:	83 fa 64             	cmp    edx,0x64
c0017f7f:	0f 84 8b 01 00 00    	je     c0018110 <Vm::faultHandler(regs*)+0x237>
c0017f85:	0f 87 92 01 00 00    	ja     c001811d <Vm::faultHandler(regs*)+0x244>
c0017f8b:	83 fa 3e             	cmp    edx,0x3e
c0017f8e:	0f 85 01 06 00 00    	jne    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c0017f94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f97:	be 01 00 00 00       	mov    esi,0x1
c0017f9c:	eb db                	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0017f9e:	83 fa 6d             	cmp    edx,0x6d
c0017fa1:	0f 84 34 03 00 00    	je     c00182db <Vm::faultHandler(regs*)+0x402>
c0017fa7:	77 17                	ja     c0017fc0 <Vm::faultHandler(regs*)+0xe7>
c0017fa9:	83 fa 67             	cmp    edx,0x67
c0017fac:	0f 84 92 01 00 00    	je     c0018144 <Vm::faultHandler(regs*)+0x26b>
c0017fb2:	83 fa 6c             	cmp    edx,0x6c
c0017fb5:	0f 84 b1 02 00 00    	je     c001826c <Vm::faultHandler(regs*)+0x393>
c0017fbb:	e9 d5 05 00 00       	jmp    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c0017fc0:	83 fa 6f             	cmp    edx,0x6f
c0017fc3:	0f 84 3d 04 00 00    	je     c0018406 <Vm::faultHandler(regs*)+0x52d>
c0017fc9:	0f 82 9f 03 00 00    	jb     c001836e <Vm::faultHandler(regs*)+0x495>
c0017fcf:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017fd5:	0f 84 76 01 00 00    	je     c0018151 <Vm::faultHandler(regs*)+0x278>
c0017fdb:	e9 b5 05 00 00       	jmp    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c0017fe0:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017fe6:	0f 84 51 05 00 00    	je     c001853d <Vm::faultHandler(regs*)+0x664>
c0017fec:	0f 87 a9 00 00 00    	ja     c001809b <Vm::faultHandler(regs*)+0x1c2>
c0017ff2:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017ff8:	0f 84 d0 04 00 00    	je     c00184ce <Vm::faultHandler(regs*)+0x5f5>
c0017ffe:	77 78                	ja     c0018078 <Vm::faultHandler(regs*)+0x19f>
c0018000:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0018006:	0f 84 0e 02 00 00    	je     c001821a <Vm::faultHandler(regs*)+0x341>
c001800c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0018012:	0f 85 7d 05 00 00    	jne    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c0018018:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001801c:	89 d1                	mov    ecx,edx
c001801e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0018021:	c1 e1 08             	shl    ecx,0x8
c0018024:	09 ca                	or     edx,ecx
c0018026:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018029:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001802d:	89 d1                	mov    ecx,edx
c001802f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0018033:	c1 e1 08             	shl    ecx,0x8
c0018036:	09 ca                	or     edx,ecx
c0018038:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001803b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001803f:	89 d1                	mov    ecx,edx
c0018041:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0018045:	c1 e1 08             	shl    ecx,0x8
c0018048:	09 ca                	or     edx,ecx
c001804a:	81 ca 00 02 02 00    	or     edx,0x20200
c0018050:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018053:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0018057:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001805d:	d1 e8                	shr    eax,1
c001805f:	83 e0 01             	and    eax,0x1
c0018062:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018065:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018068:	83 c0 06             	add    eax,0x6
c001806b:	25 ff ff 00 00       	and    eax,0xffff
c0018070:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018073:	e9 19 05 00 00       	jmp    c0018591 <Vm::faultHandler(regs*)+0x6b8>
c0018078:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001807e:	0f 84 8f 04 00 00    	je     c0018513 <Vm::faultHandler(regs*)+0x63a>
c0018084:	0f 82 60 04 00 00    	jb     c00184ea <Vm::faultHandler(regs*)+0x611>
c001808a:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0018090:	0f 84 94 04 00 00    	je     c001852a <Vm::faultHandler(regs*)+0x651>
c0018096:	e9 fa 04 00 00       	jmp    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c001809b:	81 fa ef 00 00 00    	cmp    edx,0xef
c00180a1:	0f 84 d7 04 00 00    	je     c001857e <Vm::faultHandler(regs*)+0x6a5>
c00180a7:	77 2e                	ja     c00180d7 <Vm::faultHandler(regs*)+0x1fe>
c00180a9:	81 fa ed 00 00 00    	cmp    edx,0xed
c00180af:	0f 84 a4 04 00 00    	je     c0018559 <Vm::faultHandler(regs*)+0x680>
c00180b5:	81 fa ee 00 00 00    	cmp    edx,0xee
c00180bb:	0f 85 d4 04 00 00    	jne    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c00180c1:	50                   	push   eax
c00180c2:	50                   	push   eax
c00180c3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00180c7:	50                   	push   eax
c00180c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00180cc:	50                   	push   eax
c00180cd:	e8 2e f8 ff ff       	call   c0017900 <Vm::outbv(unsigned short, unsigned char)>
c00180d2:	e9 9f 04 00 00       	jmp    c0018576 <Vm::faultHandler(regs*)+0x69d>
c00180d7:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00180dd:	0f 84 6d 01 00 00    	je     c0018250 <Vm::faultHandler(regs*)+0x377>
c00180e3:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00180e9:	0f 84 6f 01 00 00    	je     c001825e <Vm::faultHandler(regs*)+0x385>
c00180ef:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00180f5:	0f 85 9a 04 00 00    	jne    c0018595 <Vm::faultHandler(regs*)+0x6bc>
c00180fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00180fe:	e9 76 fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0018103:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018106:	be 02 00 00 00       	mov    esi,0x2
c001810b:	e9 69 fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0018110:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018113:	be 03 00 00 00       	mov    esi,0x3
c0018118:	e9 5c fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c001811d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018120:	be 04 00 00 00       	mov    esi,0x4
c0018125:	e9 4f fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c001812a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001812d:	be 05 00 00 00       	mov    esi,0x5
c0018132:	e9 42 fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0018137:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001813a:	bd 01 00 00 00       	mov    ebp,0x1
c001813f:	e9 35 fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0018144:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018147:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001814c:	e9 28 fe ff ff       	jmp    c0017f79 <Vm::faultHandler(regs*)+0xa0>
c0018151:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018154:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018158:	83 e5 01             	and    ebp,0x1
c001815b:	74 30                	je     c001818d <Vm::faultHandler(regs*)+0x2b4>
c001815d:	83 e9 04             	sub    ecx,0x4
c0018160:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018166:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001816c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001816f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018172:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018178:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001817c:	0f 84 0c 04 00 00    	je     c001858e <Vm::faultHandler(regs*)+0x6b5>
c0018182:	80 ce 02             	or     dh,0x2
c0018185:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018188:	e9 01 04 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001818d:	83 e9 02             	sub    ecx,0x2
c0018190:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018196:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018199:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001819d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00181a3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00181a7:	74 05                	je     c00181ae <Vm::faultHandler(regs*)+0x2d5>
c00181a9:	80 ce 02             	or     dh,0x2
c00181ac:	eb 03                	jmp    c00181b1 <Vm::faultHandler(regs*)+0x2d8>
c00181ae:	80 e6 fd             	and    dh,0xfd
c00181b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00181b5:	e9 d4 03 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c00181ba:	83 e5 01             	and    ebp,0x1
c00181bd:	74 2a                	je     c00181e9 <Vm::faultHandler(regs*)+0x310>
c00181bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00181c1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00181c7:	81 ca 00 02 02 00    	or     edx,0x20200
c00181cd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181d8:	c1 e8 09             	shr    eax,0x9
c00181db:	83 e0 01             	and    eax,0x1
c00181de:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00181e1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00181e4:	83 c0 04             	add    eax,0x4
c00181e7:	eb 24                	jmp    c001820d <Vm::faultHandler(regs*)+0x334>
c00181e9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00181ec:	81 ca 00 02 02 00    	or     edx,0x20200
c00181f2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181f5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00181f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181fe:	c1 e8 09             	shr    eax,0x9
c0018201:	83 e0 01             	and    eax,0x1
c0018204:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018207:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001820a:	83 c0 02             	add    eax,0x2
c001820d:	25 ff ff 00 00       	and    eax,0xffff
c0018212:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018215:	e9 74 03 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001821a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001821e:	3d ee 00 00 00       	cmp    eax,0xee
c0018223:	75 10                	jne    c0018235 <Vm::faultHandler(regs*)+0x35c>
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001822b:	e8 70 f7 ff ff       	call   c00179a0 <Vm::mainloop3(unsigned long)>
c0018230:	e9 44 03 00 00       	jmp    c0018579 <Vm::faultHandler(regs*)+0x6a0>
c0018235:	83 ec 0c             	sub    esp,0xc
c0018238:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001823c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018240:	51                   	push   ecx
c0018241:	50                   	push   eax
c0018242:	53                   	push   ebx
c0018243:	e8 84 fb ff ff       	call   c0017dcc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018248:	83 c4 20             	add    esp,0x20
c001824b:	e9 41 03 00 00       	jmp    c0018591 <Vm::faultHandler(regs*)+0x6b8>
c0018250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018255:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018259:	e9 30 03 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001825e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018263:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018267:	e9 22 03 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001826c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001826f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018274:	74 2b                	je     c00182a1 <Vm::faultHandler(regs*)+0x3c8>
c0018276:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001827d:	76 22                	jbe    c00182a1 <Vm::faultHandler(regs*)+0x3c8>
c001827f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018283:	50                   	push   eax
c0018284:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018288:	50                   	push   eax
c0018289:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001828d:	50                   	push   eax
c001828e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018292:	50                   	push   eax
c0018293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018297:	50                   	push   eax
c0018298:	6a 6c                	push   0x6c
c001829a:	6a 6c                	push   0x6c
c001829c:	e9 bd 01 00 00       	jmp    c001845e <Vm::faultHandler(regs*)+0x585>
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00182a8:	0f b7 f6             	movzx  esi,si
c00182ab:	50                   	push   eax
c00182ac:	e8 3c f6 ff ff       	call   c00178ed <Vm::inbv(unsigned short)>
c00182b1:	83 c4 0c             	add    esp,0xc
c00182b4:	0f b6 c0             	movzx  eax,al
c00182b7:	50                   	push   eax
c00182b8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00182bc:	50                   	push   eax
c00182bd:	56                   	push   esi
c00182be:	e8 d6 fb ff ff       	call   c0017e99 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182c9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00182cd:	74 03                	je     c00182d2 <Vm::faultHandler(regs*)+0x3f9>
c00182cf:	48                   	dec    eax
c00182d0:	eb 01                	jmp    c00182d3 <Vm::faultHandler(regs*)+0x3fa>
c00182d2:	40                   	inc    eax
c00182d3:	0f b7 c0             	movzx  eax,ax
c00182d6:	e9 8b 00 00 00       	jmp    c0018366 <Vm::faultHandler(regs*)+0x48d>
c00182db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00182de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182e1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00182e6:	74 29                	je     c0018311 <Vm::faultHandler(regs*)+0x438>
c00182e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00182ed:	76 22                	jbe    c0018311 <Vm::faultHandler(regs*)+0x438>
c00182ef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182f3:	50                   	push   eax
c00182f4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182f8:	50                   	push   eax
c00182f9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182fd:	50                   	push   eax
c00182fe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018302:	50                   	push   eax
c0018303:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018307:	50                   	push   eax
c0018308:	6a 6d                	push   0x6d
c001830a:	6a 6d                	push   0x6d
c001830c:	e9 4d 01 00 00       	jmp    c001845e <Vm::faultHandler(regs*)+0x585>
c0018311:	0f b7 c8             	movzx  ecx,ax
c0018314:	0f b7 f6             	movzx  esi,si
c0018317:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001831a:	83 e5 01             	and    ebp,0x1
c001831d:	74 20                	je     c001833f <Vm::faultHandler(regs*)+0x466>
c001831f:	ed                   	in     eax,dx
c0018320:	55                   	push   ebp
c0018321:	50                   	push   eax
c0018322:	51                   	push   ecx
c0018323:	56                   	push   esi
c0018324:	e8 9b fb ff ff       	call   c0017ec4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001832f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018333:	74 05                	je     c001833a <Vm::faultHandler(regs*)+0x461>
c0018335:	83 e8 04             	sub    eax,0x4
c0018338:	eb 27                	jmp    c0018361 <Vm::faultHandler(regs*)+0x488>
c001833a:	83 c0 04             	add    eax,0x4
c001833d:	eb 22                	jmp    c0018361 <Vm::faultHandler(regs*)+0x488>
c001833f:	66 ed                	in     ax,dx
c0018341:	0f b7 c0             	movzx  eax,ax
c0018344:	57                   	push   edi
c0018345:	50                   	push   eax
c0018346:	51                   	push   ecx
c0018347:	56                   	push   esi
c0018348:	e8 61 fb ff ff       	call   c0017eae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001834d:	83 c4 10             	add    esp,0x10
c0018350:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018353:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018357:	74 05                	je     c001835e <Vm::faultHandler(regs*)+0x485>
c0018359:	83 e8 02             	sub    eax,0x2
c001835c:	eb 03                	jmp    c0018361 <Vm::faultHandler(regs*)+0x488>
c001835e:	83 c0 02             	add    eax,0x2
c0018361:	25 ff ff 00 00       	and    eax,0xffff
c0018366:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018369:	e9 20 02 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001836e:	8d 46 ff             	lea    eax,[esi-0x1]
c0018371:	0f b6 f0             	movzx  esi,al
c0018374:	83 fe 05             	cmp    esi,0x5
c0018377:	77 23                	ja     c001839c <Vm::faultHandler(regs*)+0x4c3>
c0018379:	ff 24 b5 70 50 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdaf90]
c0018380:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0018385:	eb 15                	jmp    c001839c <Vm::faultHandler(regs*)+0x4c3>
c0018387:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001838b:	eb 0f                	jmp    c001839c <Vm::faultHandler(regs*)+0x4c3>
c001838d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0018391:	eb 09                	jmp    c001839c <Vm::faultHandler(regs*)+0x4c3>
c0018393:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0018397:	eb 03                	jmp    c001839c <Vm::faultHandler(regs*)+0x4c3>
c0018399:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001839c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001839f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00183a4:	74 29                	je     c00183cf <Vm::faultHandler(regs*)+0x4f6>
c00183a6:	3d ff ff 00 00       	cmp    eax,0xffff
c00183ab:	76 22                	jbe    c00183cf <Vm::faultHandler(regs*)+0x4f6>
c00183ad:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183b1:	50                   	push   eax
c00183b2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00183b6:	50                   	push   eax
c00183b7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00183bb:	50                   	push   eax
c00183bc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00183c0:	50                   	push   eax
c00183c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00183c5:	50                   	push   eax
c00183c6:	6a 6e                	push   0x6e
c00183c8:	6a 6e                	push   0x6e
c00183ca:	e9 8f 00 00 00       	jmp    c001845e <Vm::faultHandler(regs*)+0x585>
c00183cf:	0f b7 c0             	movzx  eax,ax
c00183d2:	52                   	push   edx
c00183d3:	52                   	push   edx
c00183d4:	50                   	push   eax
c00183d5:	57                   	push   edi
c00183d6:	e8 8a fa ff ff       	call   c0017e65 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00183db:	59                   	pop    ecx
c00183dc:	0f b6 c0             	movzx  eax,al
c00183df:	5e                   	pop    esi
c00183e0:	50                   	push   eax
c00183e1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00183e5:	50                   	push   eax
c00183e6:	e8 15 f5 ff ff       	call   c0017900 <Vm::outbv(unsigned short, unsigned char)>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00183f1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183f5:	74 03                	je     c00183fa <Vm::faultHandler(regs*)+0x521>
c00183f7:	48                   	dec    eax
c00183f8:	eb 01                	jmp    c00183fb <Vm::faultHandler(regs*)+0x522>
c00183fa:	40                   	inc    eax
c00183fb:	0f b7 c0             	movzx  eax,ax
c00183fe:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018401:	e9 88 01 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c0018406:	8d 46 ff             	lea    eax,[esi-0x1]
c0018409:	0f b6 f0             	movzx  esi,al
c001840c:	83 fe 05             	cmp    esi,0x5
c001840f:	77 1e                	ja     c001842f <Vm::faultHandler(regs*)+0x556>
c0018411:	ff 24 b5 88 50 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdaf78]
c0018418:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001841c:	eb 11                	jmp    c001842f <Vm::faultHandler(regs*)+0x556>
c001841e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0018421:	eb 0c                	jmp    c001842f <Vm::faultHandler(regs*)+0x556>
c0018423:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018426:	eb 07                	jmp    c001842f <Vm::faultHandler(regs*)+0x556>
c0018428:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001842b:	eb 02                	jmp    c001842f <Vm::faultHandler(regs*)+0x556>
c001842d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001842f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018432:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018437:	74 37                	je     c0018470 <Vm::faultHandler(regs*)+0x597>
c0018439:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001843f:	76 2f                	jbe    c0018470 <Vm::faultHandler(regs*)+0x597>
c0018441:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018445:	50                   	push   eax
c0018446:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001844a:	50                   	push   eax
c001844b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001844f:	50                   	push   eax
c0018450:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018454:	50                   	push   eax
c0018455:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018459:	50                   	push   eax
c001845a:	6a 6f                	push   0x6f
c001845c:	6a 6f                	push   0x6f
c001845e:	68 13 50 02 c0       	push   0xc0025013
c0018463:	e8 fc ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018468:	83 c4 20             	add    esp,0x20
c001846b:	e9 83 01 00 00       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x71a>
c0018470:	0f b7 d7             	movzx  edx,di
c0018473:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018476:	0f b7 c6             	movzx  eax,si
c0018479:	81 e1 00 04 00 00    	and    ecx,0x400
c001847f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018482:	83 e5 01             	and    ebp,0x1
c0018485:	74 1d                	je     c00184a4 <Vm::faultHandler(regs*)+0x5cb>
c0018487:	55                   	push   ebp
c0018488:	55                   	push   ebp
c0018489:	50                   	push   eax
c001848a:	52                   	push   edx
c001848b:	e8 f8 f9 ff ff       	call   c0017e88 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018490:	83 c4 10             	add    esp,0x10
c0018493:	89 fa                	mov    edx,edi
c0018495:	ef                   	out    dx,eax
c0018496:	85 c9                	test   ecx,ecx
c0018498:	74 05                	je     c001849f <Vm::faultHandler(regs*)+0x5c6>
c001849a:	83 ee 04             	sub    esi,0x4
c001849d:	eb 21                	jmp    c00184c0 <Vm::faultHandler(regs*)+0x5e7>
c001849f:	83 c6 04             	add    esi,0x4
c00184a2:	eb 1c                	jmp    c00184c0 <Vm::faultHandler(regs*)+0x5e7>
c00184a4:	55                   	push   ebp
c00184a5:	55                   	push   ebp
c00184a6:	50                   	push   eax
c00184a7:	52                   	push   edx
c00184a8:	e8 c9 f9 ff ff       	call   c0017e76 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00184ad:	83 c4 10             	add    esp,0x10
c00184b0:	89 fa                	mov    edx,edi
c00184b2:	66 ef                	out    dx,ax
c00184b4:	85 c9                	test   ecx,ecx
c00184b6:	74 05                	je     c00184bd <Vm::faultHandler(regs*)+0x5e4>
c00184b8:	83 ee 02             	sub    esi,0x2
c00184bb:	eb 03                	jmp    c00184c0 <Vm::faultHandler(regs*)+0x5e7>
c00184bd:	83 c6 02             	add    esi,0x2
c00184c0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00184c6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00184c9:	e9 c0 00 00 00       	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c00184ce:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00184d5:	83 ec 0c             	sub    esp,0xc
c00184d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00184dc:	50                   	push   eax
c00184dd:	e8 0b f4 ff ff       	call   c00178ed <Vm::inbv(unsigned short)>
c00184e2:	0f b6 c0             	movzx  eax,al
c00184e5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00184e8:	eb 3a                	jmp    c0018524 <Vm::faultHandler(regs*)+0x64b>
c00184ea:	83 e5 01             	and    ebp,0x1
c00184ed:	74 07                	je     c00184f6 <Vm::faultHandler(regs*)+0x61d>
c00184ef:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00184f3:	ed                   	in     eax,dx
c00184f4:	eb 14                	jmp    c001850a <Vm::faultHandler(regs*)+0x631>
c00184f6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00184f9:	66 31 f6             	xor    si,si
c00184fc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00184ff:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018503:	66 ed                	in     ax,dx
c0018505:	0f b7 c0             	movzx  eax,ax
c0018508:	09 f0                	or     eax,esi
c001850a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001850d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018511:	eb 7e                	jmp    c0018591 <Vm::faultHandler(regs*)+0x6b8>
c0018513:	52                   	push   edx
c0018514:	52                   	push   edx
c0018515:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018519:	50                   	push   eax
c001851a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001851e:	50                   	push   eax
c001851f:	e8 dc f3 ff ff       	call   c0017900 <Vm::outbv(unsigned short, unsigned char)>
c0018524:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018528:	eb 4f                	jmp    c0018579 <Vm::faultHandler(regs*)+0x6a0>
c001852a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001852d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018531:	83 e5 01             	and    ebp,0x1
c0018534:	74 03                	je     c0018539 <Vm::faultHandler(regs*)+0x660>
c0018536:	ef                   	out    dx,eax
c0018537:	eb d4                	jmp    c001850d <Vm::faultHandler(regs*)+0x634>
c0018539:	66 ef                	out    dx,ax
c001853b:	eb d0                	jmp    c001850d <Vm::faultHandler(regs*)+0x634>
c001853d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018544:	83 ec 0c             	sub    esp,0xc
c0018547:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001854b:	50                   	push   eax
c001854c:	e8 9c f3 ff ff       	call   c00178ed <Vm::inbv(unsigned short)>
c0018551:	0f b6 c0             	movzx  eax,al
c0018554:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018557:	eb 1d                	jmp    c0018576 <Vm::faultHandler(regs*)+0x69d>
c0018559:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001855c:	83 e5 01             	and    ebp,0x1
c001855f:	74 03                	je     c0018564 <Vm::faultHandler(regs*)+0x68b>
c0018561:	ed                   	in     eax,dx
c0018562:	eb 0d                	jmp    c0018571 <Vm::faultHandler(regs*)+0x698>
c0018564:	66 ed                	in     ax,dx
c0018566:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018569:	0f b7 c0             	movzx  eax,ax
c001856c:	66 31 d2             	xor    dx,dx
c001856f:	09 d0                	or     eax,edx
c0018571:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018574:	eb 18                	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c0018576:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018579:	83 c4 10             	add    esp,0x10
c001857c:	eb 13                	jmp    c0018591 <Vm::faultHandler(regs*)+0x6b8>
c001857e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018581:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018584:	83 e5 01             	and    ebp,0x1
c0018587:	74 03                	je     c001858c <Vm::faultHandler(regs*)+0x6b3>
c0018589:	ef                   	out    dx,eax
c001858a:	eb 02                	jmp    c001858e <Vm::faultHandler(regs*)+0x6b5>
c001858c:	66 ef                	out    dx,ax
c001858e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018591:	b0 01                	mov    al,0x1
c0018593:	eb 60                	jmp    c00185f5 <Vm::faultHandler(regs*)+0x71c>
c0018595:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018599:	50                   	push   eax
c001859a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001859e:	50                   	push   eax
c001859f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185a3:	50                   	push   eax
c00185a4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185a8:	50                   	push   eax
c00185a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185ad:	50                   	push   eax
c00185ae:	52                   	push   edx
c00185af:	52                   	push   edx
c00185b0:	68 40 50 02 c0       	push   0xc0025040
c00185b5:	e8 aa e9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00185ba:	83 c4 20             	add    esp,0x20
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	6a 60                	push   0x60
c00185c2:	e8 26 f3 ff ff       	call   c00178ed <Vm::inbv(unsigned short)>
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	0f b6 d0             	movzx  edx,al
c00185cd:	83 fa 1c             	cmp    edx,0x1c
c00185d0:	74 05                	je     c00185d7 <Vm::faultHandler(regs*)+0x6fe>
c00185d2:	83 fa 5a             	cmp    edx,0x5a
c00185d5:	75 e6                	jne    c00185bd <Vm::faultHandler(regs*)+0x6e4>
c00185d7:	0f b6 c0             	movzx  eax,al
c00185da:	83 f8 1c             	cmp    eax,0x1c
c00185dd:	74 05                	je     c00185e4 <Vm::faultHandler(regs*)+0x70b>
c00185df:	83 f8 5a             	cmp    eax,0x5a
c00185e2:	75 0f                	jne    c00185f3 <Vm::faultHandler(regs*)+0x71a>
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	6a 60                	push   0x60
c00185e9:	e8 ff f2 ff ff       	call   c00178ed <Vm::inbv(unsigned short)>
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	eb e4                	jmp    c00185d7 <Vm::faultHandler(regs*)+0x6fe>
c00185f3:	31 c0                	xor    eax,eax
c00185f5:	83 c4 2c             	add    esp,0x2c
c00185f8:	5b                   	pop    ebx
c00185f9:	5e                   	pop    esi
c00185fa:	5f                   	pop    edi
c00185fb:	5d                   	pop    ebp
c00185fc:	c3                   	ret    
c00185fd:	90                   	nop

c00185fe <noCopro(unsigned long)>:
c00185fe:	c3                   	ret    
c00185ff:	90                   	nop

c0018600 <CPU::close(int, int, void*)>:
c0018600:	31 c0                	xor    eax,eax
c0018602:	c3                   	ret    

c0018603 <x86ReadCMOS(unsigned char)>:
c0018603:	83 ec 14             	sub    esp,0x14
c0018606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001860a:	88 04 24             	mov    BYTE PTR [esp],al
c001860d:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018612:	0f b6 c0             	movzx  eax,al
c0018615:	85 c0                	test   eax,eax
c0018617:	74 04                	je     c001861d <x86ReadCMOS(unsigned char)+0x1a>
c0018619:	b2 00                	mov    dl,0x0
c001861b:	eb 02                	jmp    c001861f <x86ReadCMOS(unsigned char)+0x1c>
c001861d:	b2 80                	mov    dl,0x80
c001861f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018622:	09 d0                	or     eax,edx
c0018624:	0f b6 c0             	movzx  eax,al
c0018627:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001862e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018632:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018636:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001863b:	ee                   	out    dx,al
c001863c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018643:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018648:	89 c2                	mov    edx,eax
c001864a:	ec                   	in     al,dx
c001864b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001864f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018653:	83 c4 14             	add    esp,0x14
c0018656:	c3                   	ret    

c0018657 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018657:	83 ec 18             	sub    esp,0x18
c001865a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001865e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018662:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018666:	88 04 24             	mov    BYTE PTR [esp],al
c0018669:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001866e:	0f b6 c0             	movzx  eax,al
c0018671:	85 c0                	test   eax,eax
c0018673:	74 04                	je     c0018679 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018675:	b2 00                	mov    dl,0x0
c0018677:	eb 02                	jmp    c001867b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018679:	b2 80                	mov    dl,0x80
c001867b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001867f:	09 d0                	or     eax,edx
c0018681:	0f b6 c0             	movzx  eax,al
c0018684:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c001868b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001868f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018693:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018698:	ee                   	out    dx,al
c0018699:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001869d:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00186a4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00186a8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00186ac:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00186b1:	ee                   	out    dx,al
c00186b2:	90                   	nop
c00186b3:	83 c4 18             	add    esp,0x18
c00186b6:	c3                   	ret    

c00186b7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00186b7:	60                   	pusha  
c00186b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186c4:	9c                   	pushf  
c00186c5:	fa                   	cli    
c00186c6:	0f 09                	wbinvd 
c00186c8:	0f 30                	wrmsr  
c00186ca:	9d                   	popf   
c00186cb:	89 c2                	mov    edx,eax
c00186cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186d1:	89 10                	mov    DWORD PTR [eax],edx
c00186d3:	61                   	popa   
c00186d4:	90                   	nop
c00186d5:	c3                   	ret    

c00186d6 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00186d6:	60                   	pusha  
c00186d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186db:	89 c1                	mov    ecx,eax
c00186dd:	9c                   	pushf  
c00186de:	fa                   	cli    
c00186df:	0f 09                	wbinvd 
c00186e1:	31 c0                	xor    eax,eax
c00186e3:	31 d2                	xor    edx,edx
c00186e5:	0f 32                	rdmsr  
c00186e7:	9d                   	popf   
c00186e8:	89 c2                	mov    edx,eax
c00186ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186ee:	89 10                	mov    DWORD PTR [eax],edx
c00186f0:	61                   	popa   
c00186f1:	90                   	nop
c00186f2:	c3                   	ret    

c00186f3 <AMD_K6_writeback(int, int, int)>:
c00186f3:	83 ec 20             	sub    esp,0x20
c00186f6:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00186fb:	c1 e8 14             	shr    eax,0x14
c00186fe:	c1 e8 02             	shr    eax,0x2
c0018701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018705:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001870a:	0f 85 9e 00 00 00    	jne    c00187ae <AMD_K6_writeback(int, int, int)+0xbb>
c0018710:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018714:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018718:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001871d:	75 19                	jne    c0018738 <AMD_K6_writeback(int, int, int)+0x45>
c001871f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018724:	7f 0a                	jg     c0018730 <AMD_K6_writeback(int, int, int)+0x3d>
c0018726:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c001872e:	eb 08                	jmp    c0018738 <AMD_K6_writeback(int, int, int)+0x45>
c0018730:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018738:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c001873d:	7c 6e                	jl     c00187ad <AMD_K6_writeback(int, int, int)+0xba>
c001873f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018744:	7e 09                	jle    c001874f <AMD_K6_writeback(int, int, int)+0x5c>
c0018746:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c001874b:	74 36                	je     c0018783 <AMD_K6_writeback(int, int, int)+0x90>
c001874d:	eb 5e                	jmp    c00187ad <AMD_K6_writeback(int, int, int)+0xba>
c001874f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018753:	50                   	push   eax
c0018754:	68 82 00 00 c0       	push   0xc0000082
c0018759:	e8 78 ff ff ff       	call   c00186d6 <AMD_K6_read_msr(unsigned int, REGS*)>
c001875e:	83 c4 08             	add    esp,0x8
c0018761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018765:	01 c0                	add    eax,eax
c0018767:	83 e0 7f             	and    eax,0x7f
c001876a:	89 c2                	mov    edx,eax
c001876c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018770:	50                   	push   eax
c0018771:	6a 00                	push   0x0
c0018773:	52                   	push   edx
c0018774:	68 82 00 00 c0       	push   0xc0000082
c0018779:	e8 39 ff ff ff       	call   c00186b7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	eb 2b                	jmp    c00187ae <AMD_K6_writeback(int, int, int)+0xbb>
c0018783:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018787:	50                   	push   eax
c0018788:	68 82 00 00 c0       	push   0xc0000082
c001878d:	e8 44 ff ff ff       	call   c00186d6 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018792:	83 c4 08             	add    esp,0x8
c0018795:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018799:	50                   	push   eax
c001879a:	6a 00                	push   0x0
c001879c:	6a 00                	push   0x0
c001879e:	68 82 00 00 c0       	push   0xc0000082
c00187a3:	e8 0f ff ff ff       	call   c00186b7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	eb 01                	jmp    c00187ae <AMD_K6_writeback(int, int, int)+0xbb>
c00187ad:	90                   	nop
c00187ae:	90                   	nop
c00187af:	83 c4 20             	add    esp,0x20
c00187b2:	c3                   	ret    

c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187b3:	56                   	push   esi
c00187b4:	53                   	push   ebx
c00187b5:	a1 00 6a 02 c0       	mov    eax,ds:0xc0026a00
c00187ba:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00187be:	75 32                	jne    c00187f2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187c0:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c00187c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ca:	89 10                	mov    DWORD PTR [eax],edx
c00187cc:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c00187d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187d6:	89 10                	mov    DWORD PTR [eax],edx
c00187d8:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c00187de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187e2:	89 10                	mov    DWORD PTR [eax],edx
c00187e4:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c00187ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00187ee:	89 10                	mov    DWORD PTR [eax],edx
c00187f0:	eb 5c                	jmp    c001884e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00187f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187f6:	ba 00 00 00 00       	mov    edx,0x0
c00187fb:	89 d1                	mov    ecx,edx
c00187fd:	0f a2                	cpuid  
c00187ff:	89 c6                	mov    esi,eax
c0018801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018805:	89 30                	mov    DWORD PTR [eax],esi
c0018807:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001880b:	89 18                	mov    DWORD PTR [eax],ebx
c001880d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018811:	89 08                	mov    DWORD PTR [eax],ecx
c0018813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018817:	89 10                	mov    DWORD PTR [eax],edx
c0018819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001881d:	a3 00 6a 02 c0       	mov    ds:0xc0026a00,eax
c0018822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018826:	8b 00                	mov    eax,DWORD PTR [eax]
c0018828:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c001882d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018831:	8b 00                	mov    eax,DWORD PTR [eax]
c0018833:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c0018838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001883c:	8b 00                	mov    eax,DWORD PTR [eax]
c001883e:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c0018843:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018847:	8b 00                	mov    eax,DWORD PTR [eax]
c0018849:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c001884e:	5b                   	pop    ebx
c001884f:	5e                   	pop    esi
c0018850:	c3                   	ret    

c0018851 <cpuidCheckEDX(unsigned int)>:
c0018851:	83 ec 10             	sub    esp,0x10
c0018854:	89 e0                	mov    eax,esp
c0018856:	50                   	push   eax
c0018857:	8d 44 24 08          	lea    eax,[esp+0x8]
c001885b:	50                   	push   eax
c001885c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018860:	50                   	push   eax
c0018861:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018865:	50                   	push   eax
c0018866:	6a 01                	push   0x1
c0018868:	e8 46 ff ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001886d:	83 c4 14             	add    esp,0x14
c0018870:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018873:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018877:	0f 95 c0             	setne  al
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	c3                   	ret    

c001887e <cpuidCheckECX(unsigned int)>:
c001887e:	83 ec 10             	sub    esp,0x10
c0018881:	89 e0                	mov    eax,esp
c0018883:	50                   	push   eax
c0018884:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018888:	50                   	push   eax
c0018889:	8d 44 24 10          	lea    eax,[esp+0x10]
c001888d:	50                   	push   eax
c001888e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018892:	50                   	push   eax
c0018893:	6a 01                	push   0x1
c0018895:	e8 19 ff ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001889a:	83 c4 14             	add    esp,0x14
c001889d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188a1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00188a5:	0f 95 c0             	setne  al
c00188a8:	83 c4 10             	add    esp,0x10
c00188ab:	c3                   	ret    

c00188ac <cpuidCheckExtendedEBX(unsigned int)>:
c00188ac:	83 ec 10             	sub    esp,0x10
c00188af:	89 e0                	mov    eax,esp
c00188b1:	50                   	push   eax
c00188b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188b6:	50                   	push   eax
c00188b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00188bb:	50                   	push   eax
c00188bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188c0:	50                   	push   eax
c00188c1:	6a 07                	push   0x7
c00188c3:	e8 eb fe ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188c8:	83 c4 14             	add    esp,0x14
c00188cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188cf:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00188d3:	0f 95 c0             	setne  al
c00188d6:	83 c4 10             	add    esp,0x10
c00188d9:	c3                   	ret    

c00188da <cpuidCheckExtendedECX(unsigned int)>:
c00188da:	83 ec 10             	sub    esp,0x10
c00188dd:	89 e0                	mov    eax,esp
c00188df:	50                   	push   eax
c00188e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188e4:	50                   	push   eax
c00188e5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00188e9:	50                   	push   eax
c00188ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188ee:	50                   	push   eax
c00188ef:	6a 07                	push   0x7
c00188f1:	e8 bd fe ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188f6:	83 c4 14             	add    esp,0x14
c00188f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188fd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018901:	0f 95 c0             	setne  al
c0018904:	83 c4 10             	add    esp,0x10
c0018907:	c3                   	ret    

c0018908 <HalDetectFeatures()>:
c0018908:	57                   	push   edi
c0018909:	56                   	push   esi
c001890a:	53                   	push   ebx
c001890b:	81 ec 90 00 00 00    	sub    esp,0x90
c0018911:	83 ec 04             	sub    esp,0x4
c0018914:	6a 08                	push   0x8
c0018916:	6a 00                	push   0x0
c0018918:	68 0c eb 02 c0       	push   0xc002eb0c
c001891d:	e8 ce 7b fe ff       	call   c00004f0 <memset>
c0018922:	83 c4 10             	add    esp,0x10
c0018925:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001892a:	83 c8 04             	or     eax,0x4
c001892d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018932:	e8 c2 78 fe ff       	call   c00001f9 <detectCPUID>
c0018937:	85 c0                	test   eax,eax
c0018939:	0f 95 c0             	setne  al
c001893c:	83 e0 01             	and    eax,0x1
c001893f:	83 e0 01             	and    eax,0x1
c0018942:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018945:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001894a:	83 e0 fd             	and    eax,0xfffffffd
c001894d:	88 c2                	mov    dl,al
c001894f:	88 c8                	mov    al,cl
c0018951:	09 d0                	or     eax,edx
c0018953:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018958:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001895d:	83 e0 02             	and    eax,0x2
c0018960:	0f b6 c0             	movzx  eax,al
c0018963:	85 c0                	test   eax,eax
c0018965:	0f 84 7f 02 00 00    	je     c0018bea <HalDetectFeatures()+0x2e2>
c001896b:	83 ec 0c             	sub    esp,0xc
c001896e:	6a 20                	push   0x20
c0018970:	e8 dc fe ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018975:	83 c4 10             	add    esp,0x10
c0018978:	83 e0 01             	and    eax,0x1
c001897b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018982:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018987:	83 e0 f7             	and    eax,0xfffffff7
c001898a:	88 c2                	mov    dl,al
c001898c:	88 c8                	mov    al,cl
c001898e:	09 d0                	or     eax,edx
c0018990:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018995:	83 ec 0c             	sub    esp,0xc
c0018998:	68 00 00 00 04       	push   0x4000000
c001899d:	e8 af fe ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c00189a2:	83 c4 10             	add    esp,0x10
c00189a5:	89 c1                	mov    ecx,eax
c00189a7:	83 e1 01             	and    ecx,0x1
c00189aa:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189af:	83 e0 fe             	and    eax,0xfffffffe
c00189b2:	88 c2                	mov    dl,al
c00189b4:	88 c8                	mov    al,cl
c00189b6:	09 d0                	or     eax,edx
c00189b8:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00189bd:	83 ec 0c             	sub    esp,0xc
c00189c0:	68 80 00 00 00       	push   0x80
c00189c5:	e8 87 fe ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c00189ca:	83 c4 10             	add    esp,0x10
c00189cd:	89 c1                	mov    ecx,eax
c00189cf:	c1 e1 07             	shl    ecx,0x7
c00189d2:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189d7:	83 e0 7f             	and    eax,0x7f
c00189da:	88 c2                	mov    dl,al
c00189dc:	88 c8                	mov    al,cl
c00189de:	09 d0                	or     eax,edx
c00189e0:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00189e5:	83 ec 0c             	sub    esp,0xc
c00189e8:	68 00 00 80 00       	push   0x800000
c00189ed:	e8 5f fe ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	83 e0 01             	and    eax,0x1
c00189f8:	89 c1                	mov    ecx,eax
c00189fa:	c1 e1 05             	shl    ecx,0x5
c00189fd:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a02:	83 e0 df             	and    eax,0xffffffdf
c0018a05:	88 c2                	mov    dl,al
c0018a07:	88 c8                	mov    al,cl
c0018a09:	09 d0                	or     eax,edx
c0018a0b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a10:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a15:	83 e0 01             	and    eax,0x1
c0018a18:	75 0c                	jne    c0018a26 <HalDetectFeatures()+0x11e>
c0018a1a:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a1f:	25 00 04 00 00       	and    eax,0x400
c0018a24:	74 0f                	je     c0018a35 <HalDetectFeatures()+0x12d>
c0018a26:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a2b:	83 e0 fe             	and    eax,0xfffffffe
c0018a2e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a33:	eb 28                	jmp    c0018a5d <HalDetectFeatures()+0x155>
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	68 00 02 00 00       	push   0x200
c0018a3d:	e8 0f fe ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	89 c1                	mov    ecx,eax
c0018a47:	83 e1 01             	and    ecx,0x1
c0018a4a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a4f:	83 e0 fe             	and    eax,0xfffffffe
c0018a52:	88 c2                	mov    dl,al
c0018a54:	88 c8                	mov    al,cl
c0018a56:	09 d0                	or     eax,edx
c0018a58:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a5d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a62:	83 e0 01             	and    eax,0x1
c0018a65:	0f b6 c0             	movzx  eax,al
c0018a68:	85 c0                	test   eax,eax
c0018a6a:	74 1c                	je     c0018a88 <HalDetectFeatures()+0x180>
c0018a6c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a71:	83 e0 08             	and    eax,0x8
c0018a74:	0f b6 c0             	movzx  eax,al
c0018a77:	85 c0                	test   eax,eax
c0018a79:	75 0d                	jne    c0018a88 <HalDetectFeatures()+0x180>
c0018a7b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a80:	83 e0 fe             	and    eax,0xfffffffe
c0018a83:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a88:	83 ec 0c             	sub    esp,0xc
c0018a8b:	68 a0 50 02 c0       	push   0xc00250a0
c0018a90:	e8 cf e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a95:	83 c4 10             	add    esp,0x10
c0018a98:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a9d:	83 e0 fe             	and    eax,0xfffffffe
c0018aa0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018aa5:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018aad:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018ab5:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018abd:	85 c0                	test   eax,eax
c0018abf:	0f 84 ab 00 00 00    	je     c0018b70 <HalDetectFeatures()+0x268>
c0018ac5:	83 ec 0c             	sub    esp,0xc
c0018ac8:	6a 01                	push   0x1
c0018aca:	e8 af fd ff ff       	call   c001887e <cpuidCheckECX(unsigned int)>
c0018acf:	83 c4 10             	add    esp,0x10
c0018ad2:	83 e0 01             	and    eax,0x1
c0018ad5:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018ad8:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018add:	83 e0 fd             	and    eax,0xfffffffd
c0018ae0:	88 c2                	mov    dl,al
c0018ae2:	88 c8                	mov    al,cl
c0018ae4:	09 d0                	or     eax,edx
c0018ae6:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018aeb:	83 ec 0c             	sub    esp,0xc
c0018aee:	68 00 02 00 00       	push   0x200
c0018af3:	e8 86 fd ff ff       	call   c001887e <cpuidCheckECX(unsigned int)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	83 e0 01             	and    eax,0x1
c0018afe:	89 c1                	mov    ecx,eax
c0018b00:	c1 e1 04             	shl    ecx,0x4
c0018b03:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b08:	83 e0 ef             	and    eax,0xffffffef
c0018b0b:	88 c2                	mov    dl,al
c0018b0d:	88 c8                	mov    al,cl
c0018b0f:	09 d0                	or     eax,edx
c0018b11:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b16:	83 ec 0c             	sub    esp,0xc
c0018b19:	68 00 00 08 00       	push   0x80000
c0018b1e:	e8 5b fd ff ff       	call   c001887e <cpuidCheckECX(unsigned int)>
c0018b23:	83 c4 10             	add    esp,0x10
c0018b26:	83 e0 01             	and    eax,0x1
c0018b29:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018b30:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b35:	83 e0 fb             	and    eax,0xfffffffb
c0018b38:	88 c2                	mov    dl,al
c0018b3a:	88 c8                	mov    al,cl
c0018b3c:	09 d0                	or     eax,edx
c0018b3e:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b43:	83 ec 0c             	sub    esp,0xc
c0018b46:	68 00 00 10 00       	push   0x100000
c0018b4b:	e8 2e fd ff ff       	call   c001887e <cpuidCheckECX(unsigned int)>
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	83 e0 01             	and    eax,0x1
c0018b56:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018b5d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b62:	83 e0 f7             	and    eax,0xfffffff7
c0018b65:	88 c2                	mov    dl,al
c0018b67:	88 c8                	mov    al,cl
c0018b69:	09 d0                	or     eax,edx
c0018b6b:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b70:	83 ec 0c             	sub    esp,0xc
c0018b73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018b77:	50                   	push   eax
c0018b78:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018b7c:	50                   	push   eax
c0018b7d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018b81:	50                   	push   eax
c0018b82:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018b86:	50                   	push   eax
c0018b87:	68 00 00 00 80       	push   0x80000000
c0018b8c:	e8 22 fc ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b91:	83 c4 20             	add    esp,0x20
c0018b94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b98:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018b9d:	76 4b                	jbe    c0018bea <HalDetectFeatures()+0x2e2>
c0018b9f:	83 ec 0c             	sub    esp,0xc
c0018ba2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ba6:	50                   	push   eax
c0018ba7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018bab:	50                   	push   eax
c0018bac:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018bb0:	50                   	push   eax
c0018bb1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018bb5:	50                   	push   eax
c0018bb6:	68 01 00 00 80       	push   0x80000001
c0018bbb:	e8 f3 fb ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bc0:	83 c4 20             	add    esp,0x20
c0018bc3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018bc8:	83 e0 bf             	and    eax,0xffffffbf
c0018bcb:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018bd0:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018bd5:	83 e0 fd             	and    eax,0xfffffffd
c0018bd8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018bdd:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018be2:	83 e0 fe             	and    eax,0xfffffffe
c0018be5:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018bea:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018bef:	25 00 04 00 00       	and    eax,0x400
c0018bf4:	74 0d                	je     c0018c03 <HalDetectFeatures()+0x2fb>
c0018bf6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018bfb:	83 e0 fb             	and    eax,0xfffffffb
c0018bfe:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018c03:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c0018c0a:	83 ec 04             	sub    esp,0x4
c0018c0d:	6a 0d                	push   0xd
c0018c0f:	6a 00                	push   0x0
c0018c11:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c16:	e8 d5 78 fe ff       	call   c00004f0 <memset>
c0018c1b:	83 c4 10             	add    esp,0x10
c0018c1e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c23:	83 e0 02             	and    eax,0x2
c0018c26:	0f b6 c0             	movzx  eax,al
c0018c29:	85 c0                	test   eax,eax
c0018c2b:	0f 84 16 08 00 00    	je     c0019447 <HalDetectFeatures()+0xb3f>
c0018c31:	83 ec 0c             	sub    esp,0xc
c0018c34:	6a 10                	push   0x10
c0018c36:	e8 16 fc ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	83 e0 01             	and    eax,0x1
c0018c41:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018c48:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c4d:	83 e0 f7             	and    eax,0xfffffff7
c0018c50:	88 c2                	mov    dl,al
c0018c52:	88 c8                	mov    al,cl
c0018c54:	09 d0                	or     eax,edx
c0018c56:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c5b:	83 ec 0c             	sub    esp,0xc
c0018c5e:	6a 40                	push   0x40
c0018c60:	e8 ec fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	83 e0 01             	and    eax,0x1
c0018c6b:	89 c1                	mov    ecx,eax
c0018c6d:	c1 e1 04             	shl    ecx,0x4
c0018c70:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c75:	83 e0 ef             	and    eax,0xffffffef
c0018c78:	88 c2                	mov    dl,al
c0018c7a:	88 c8                	mov    al,cl
c0018c7c:	09 d0                	or     eax,edx
c0018c7e:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c83:	83 ec 0c             	sub    esp,0xc
c0018c86:	6a 08                	push   0x8
c0018c88:	e8 c4 fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018c8d:	83 c4 10             	add    esp,0x10
c0018c90:	83 e0 01             	and    eax,0x1
c0018c93:	89 c1                	mov    ecx,eax
c0018c95:	c1 e1 05             	shl    ecx,0x5
c0018c98:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c9d:	83 e0 df             	and    eax,0xffffffdf
c0018ca0:	88 c2                	mov    dl,al
c0018ca2:	88 c8                	mov    al,cl
c0018ca4:	09 d0                	or     eax,edx
c0018ca6:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cab:	83 ec 0c             	sub    esp,0xc
c0018cae:	68 00 20 00 00       	push   0x2000
c0018cb3:	e8 99 fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018cb8:	83 c4 10             	add    esp,0x10
c0018cbb:	83 e0 01             	and    eax,0x1
c0018cbe:	89 c1                	mov    ecx,eax
c0018cc0:	c1 e1 06             	shl    ecx,0x6
c0018cc3:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018cc8:	83 e0 bf             	and    eax,0xffffffbf
c0018ccb:	88 c2                	mov    dl,al
c0018ccd:	88 c8                	mov    al,cl
c0018ccf:	09 d0                	or     eax,edx
c0018cd1:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cd6:	83 ec 0c             	sub    esp,0xc
c0018cd9:	68 00 00 01 00       	push   0x10000
c0018cde:	e8 6e fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018ce3:	83 c4 10             	add    esp,0x10
c0018ce6:	89 c1                	mov    ecx,eax
c0018ce8:	c1 e1 07             	shl    ecx,0x7
c0018ceb:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018cf0:	83 e0 7f             	and    eax,0x7f
c0018cf3:	88 c2                	mov    dl,al
c0018cf5:	88 c8                	mov    al,cl
c0018cf7:	09 d0                	or     eax,edx
c0018cf9:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cfe:	83 ec 0c             	sub    esp,0xc
c0018d01:	6a 01                	push   0x1
c0018d03:	e8 49 fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018d08:	83 c4 10             	add    esp,0x10
c0018d0b:	83 e0 01             	and    eax,0x1
c0018d0e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018d15:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d1a:	83 e0 f7             	and    eax,0xfffffff7
c0018d1d:	88 c2                	mov    dl,al
c0018d1f:	88 c8                	mov    al,cl
c0018d21:	09 d0                	or     eax,edx
c0018d23:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018d28:	83 ec 0c             	sub    esp,0xc
c0018d2b:	68 00 08 00 00       	push   0x800
c0018d30:	e8 1c fb ff ff       	call   c0018851 <cpuidCheckEDX(unsigned int)>
c0018d35:	83 c4 10             	add    esp,0x10
c0018d38:	89 c1                	mov    ecx,eax
c0018d3a:	83 e1 01             	and    ecx,0x1
c0018d3d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d42:	83 e0 fe             	and    eax,0xfffffffe
c0018d45:	88 c2                	mov    dl,al
c0018d47:	88 c8                	mov    al,cl
c0018d49:	09 d0                	or     eax,edx
c0018d4b:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018d50:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d55:	83 e0 40             	and    eax,0x40
c0018d58:	0f b6 c0             	movzx  eax,al
c0018d5b:	85 c0                	test   eax,eax
c0018d5d:	74 0a                	je     c0018d69 <HalDetectFeatures()+0x461>
c0018d5f:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c0018d69:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d6e:	83 e0 80             	and    eax,0xffffff80
c0018d71:	0f b6 c0             	movzx  eax,al
c0018d74:	85 c0                	test   eax,eax
c0018d76:	74 0a                	je     c0018d82 <HalDetectFeatures()+0x47a>
c0018d78:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c0018d82:	83 ec 0c             	sub    esp,0xc
c0018d85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d89:	50                   	push   eax
c0018d8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d8e:	50                   	push   eax
c0018d8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d93:	50                   	push   eax
c0018d94:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018d98:	50                   	push   eax
c0018d99:	6a 00                	push   0x0
c0018d9b:	e8 13 fa ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da0:	83 c4 20             	add    esp,0x20
c0018da3:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018dab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018daf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018db3:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018dbb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018dbf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018dc3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018dc7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018dcb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018dcf:	89 c6                	mov    esi,eax
c0018dd1:	89 d7                	mov    edi,edx
c0018dd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018dd5:	89 c8                	mov    eax,ecx
c0018dd7:	89 fa                	mov    edx,edi
c0018dd9:	89 f3                	mov    ebx,esi
c0018ddb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018ddf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018de3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018de7:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018dec:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018df0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018df4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018df8:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018e00:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018e04:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018e0c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018e10:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018e14:	89 c6                	mov    esi,eax
c0018e16:	89 d7                	mov    edi,edx
c0018e18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e1a:	89 c8                	mov    eax,ecx
c0018e1c:	89 fa                	mov    edx,edi
c0018e1e:	89 f3                	mov    ebx,esi
c0018e20:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018e24:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018e28:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e2c:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018e31:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018e38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018e40:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018e48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e4f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018e53:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018e57:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018e5e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018e62:	89 c6                	mov    esi,eax
c0018e64:	89 d7                	mov    edi,edx
c0018e66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e68:	89 c8                	mov    eax,ecx
c0018e6a:	89 fa                	mov    edx,edi
c0018e6c:	89 f3                	mov    ebx,esi
c0018e6e:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018e72:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018e76:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018e7a:	83 ec 08             	sub    esp,0x8
c0018e7d:	68 b2 50 02 c0       	push   0xc00250b2
c0018e82:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e87:	e8 c4 78 fe ff       	call   c0000750 <strcmp>
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	85 c0                	test   eax,eax
c0018e91:	74 19                	je     c0018eac <HalDetectFeatures()+0x5a4>
c0018e93:	83 ec 08             	sub    esp,0x8
c0018e96:	68 bf 50 02 c0       	push   0xc00250bf
c0018e9b:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ea0:	e8 ab 78 fe ff       	call   c0000750 <strcmp>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	85 c0                	test   eax,eax
c0018eaa:	75 04                	jne    c0018eb0 <HalDetectFeatures()+0x5a8>
c0018eac:	b0 01                	mov    al,0x1
c0018eae:	eb 02                	jmp    c0018eb2 <HalDetectFeatures()+0x5aa>
c0018eb0:	b0 00                	mov    al,0x0
c0018eb2:	0f b6 c0             	movzx  eax,al
c0018eb5:	85 c0                	test   eax,eax
c0018eb7:	74 0f                	je     c0018ec8 <HalDetectFeatures()+0x5c0>
c0018eb9:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018ec3:	e9 0d 03 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018ec8:	83 ec 08             	sub    esp,0x8
c0018ecb:	68 cc 50 02 c0       	push   0xc00250cc
c0018ed0:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ed5:	e8 76 78 fe ff       	call   c0000750 <strcmp>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	85 c0                	test   eax,eax
c0018edf:	74 19                	je     c0018efa <HalDetectFeatures()+0x5f2>
c0018ee1:	83 ec 08             	sub    esp,0x8
c0018ee4:	68 d9 50 02 c0       	push   0xc00250d9
c0018ee9:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018eee:	e8 5d 78 fe ff       	call   c0000750 <strcmp>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	85 c0                	test   eax,eax
c0018ef8:	75 04                	jne    c0018efe <HalDetectFeatures()+0x5f6>
c0018efa:	b0 01                	mov    al,0x1
c0018efc:	eb 02                	jmp    c0018f00 <HalDetectFeatures()+0x5f8>
c0018efe:	b0 00                	mov    al,0x0
c0018f00:	0f b6 c0             	movzx  eax,al
c0018f03:	85 c0                	test   eax,eax
c0018f05:	74 0f                	je     c0018f16 <HalDetectFeatures()+0x60e>
c0018f07:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018f11:	e9 bf 02 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018f16:	83 ec 08             	sub    esp,0x8
c0018f19:	68 e6 50 02 c0       	push   0xc00250e6
c0018f1e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f23:	e8 28 78 fe ff       	call   c0000750 <strcmp>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	85 c0                	test   eax,eax
c0018f2d:	74 19                	je     c0018f48 <HalDetectFeatures()+0x640>
c0018f2f:	83 ec 08             	sub    esp,0x8
c0018f32:	68 f3 50 02 c0       	push   0xc00250f3
c0018f37:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f3c:	e8 0f 78 fe ff       	call   c0000750 <strcmp>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	85 c0                	test   eax,eax
c0018f46:	75 04                	jne    c0018f4c <HalDetectFeatures()+0x644>
c0018f48:	b0 01                	mov    al,0x1
c0018f4a:	eb 02                	jmp    c0018f4e <HalDetectFeatures()+0x646>
c0018f4c:	b0 00                	mov    al,0x0
c0018f4e:	0f b6 c0             	movzx  eax,al
c0018f51:	85 c0                	test   eax,eax
c0018f53:	74 0f                	je     c0018f64 <HalDetectFeatures()+0x65c>
c0018f55:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018f5f:	e9 71 02 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018f64:	83 ec 08             	sub    esp,0x8
c0018f67:	68 00 51 02 c0       	push   0xc0025100
c0018f6c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f71:	e8 da 77 fe ff       	call   c0000750 <strcmp>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	85 c0                	test   eax,eax
c0018f7b:	0f 94 c0             	sete   al
c0018f7e:	0f b6 c0             	movzx  eax,al
c0018f81:	85 c0                	test   eax,eax
c0018f83:	74 0f                	je     c0018f94 <HalDetectFeatures()+0x68c>
c0018f85:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018f8f:	e9 41 02 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018f94:	83 ec 08             	sub    esp,0x8
c0018f97:	68 0d 51 02 c0       	push   0xc002510d
c0018f9c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fa1:	e8 aa 77 fe ff       	call   c0000750 <strcmp>
c0018fa6:	83 c4 10             	add    esp,0x10
c0018fa9:	85 c0                	test   eax,eax
c0018fab:	0f 94 c0             	sete   al
c0018fae:	0f b6 c0             	movzx  eax,al
c0018fb1:	85 c0                	test   eax,eax
c0018fb3:	74 0f                	je     c0018fc4 <HalDetectFeatures()+0x6bc>
c0018fb5:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018fbf:	e9 11 02 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018fc4:	83 ec 08             	sub    esp,0x8
c0018fc7:	68 cc 50 02 c0       	push   0xc00250cc
c0018fcc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fd1:	e8 7a 77 fe ff       	call   c0000750 <strcmp>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	85 c0                	test   eax,eax
c0018fdb:	0f 94 c0             	sete   al
c0018fde:	0f b6 c0             	movzx  eax,al
c0018fe1:	85 c0                	test   eax,eax
c0018fe3:	74 0f                	je     c0018ff4 <HalDetectFeatures()+0x6ec>
c0018fe5:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c0018fef:	e9 e1 01 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0018ff4:	83 ec 08             	sub    esp,0x8
c0018ff7:	68 1a 51 02 c0       	push   0xc002511a
c0018ffc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019001:	e8 4a 77 fe ff       	call   c0000750 <strcmp>
c0019006:	83 c4 10             	add    esp,0x10
c0019009:	85 c0                	test   eax,eax
c001900b:	0f 94 c0             	sete   al
c001900e:	0f b6 c0             	movzx  eax,al
c0019011:	85 c0                	test   eax,eax
c0019013:	74 0f                	je     c0019024 <HalDetectFeatures()+0x71c>
c0019015:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c001901f:	e9 b1 01 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019024:	83 ec 08             	sub    esp,0x8
c0019027:	68 27 51 02 c0       	push   0xc0025127
c001902c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019031:	e8 1a 77 fe ff       	call   c0000750 <strcmp>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	85 c0                	test   eax,eax
c001903b:	0f 94 c0             	sete   al
c001903e:	0f b6 c0             	movzx  eax,al
c0019041:	85 c0                	test   eax,eax
c0019043:	74 0f                	je     c0019054 <HalDetectFeatures()+0x74c>
c0019045:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c001904f:	e9 81 01 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019054:	83 ec 08             	sub    esp,0x8
c0019057:	68 34 51 02 c0       	push   0xc0025134
c001905c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019061:	e8 ea 76 fe ff       	call   c0000750 <strcmp>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	85 c0                	test   eax,eax
c001906b:	0f 94 c0             	sete   al
c001906e:	0f b6 c0             	movzx  eax,al
c0019071:	85 c0                	test   eax,eax
c0019073:	74 0f                	je     c0019084 <HalDetectFeatures()+0x77c>
c0019075:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c001907f:	e9 51 01 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019084:	83 ec 08             	sub    esp,0x8
c0019087:	68 41 51 02 c0       	push   0xc0025141
c001908c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019091:	e8 ba 76 fe ff       	call   c0000750 <strcmp>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	85 c0                	test   eax,eax
c001909b:	0f 94 c0             	sete   al
c001909e:	0f b6 c0             	movzx  eax,al
c00190a1:	85 c0                	test   eax,eax
c00190a3:	74 0f                	je     c00190b4 <HalDetectFeatures()+0x7ac>
c00190a5:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c00190af:	e9 21 01 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c00190b4:	83 ec 08             	sub    esp,0x8
c00190b7:	68 4e 51 02 c0       	push   0xc002514e
c00190bc:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190c1:	e8 8a 76 fe ff       	call   c0000750 <strcmp>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	85 c0                	test   eax,eax
c00190cb:	0f 94 c0             	sete   al
c00190ce:	0f b6 c0             	movzx  eax,al
c00190d1:	85 c0                	test   eax,eax
c00190d3:	74 0f                	je     c00190e4 <HalDetectFeatures()+0x7dc>
c00190d5:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c00190df:	e9 f1 00 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c00190e4:	83 ec 08             	sub    esp,0x8
c00190e7:	68 5b 51 02 c0       	push   0xc002515b
c00190ec:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190f1:	e8 5a 76 fe ff       	call   c0000750 <strcmp>
c00190f6:	83 c4 10             	add    esp,0x10
c00190f9:	85 c0                	test   eax,eax
c00190fb:	0f 94 c0             	sete   al
c00190fe:	0f b6 c0             	movzx  eax,al
c0019101:	85 c0                	test   eax,eax
c0019103:	74 0f                	je     c0019114 <HalDetectFeatures()+0x80c>
c0019105:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c001910f:	e9 c1 00 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019114:	83 ec 08             	sub    esp,0x8
c0019117:	68 68 51 02 c0       	push   0xc0025168
c001911c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019121:	e8 2a 76 fe ff       	call   c0000750 <strcmp>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	85 c0                	test   eax,eax
c001912b:	0f 94 c0             	sete   al
c001912e:	0f b6 c0             	movzx  eax,al
c0019131:	85 c0                	test   eax,eax
c0019133:	74 0f                	je     c0019144 <HalDetectFeatures()+0x83c>
c0019135:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001913f:	e9 91 00 00 00       	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019144:	83 ec 08             	sub    esp,0x8
c0019147:	68 75 51 02 c0       	push   0xc0025175
c001914c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019151:	e8 fa 75 fe ff       	call   c0000750 <strcmp>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	85 c0                	test   eax,eax
c001915b:	0f 94 c0             	sete   al
c001915e:	0f b6 c0             	movzx  eax,al
c0019161:	85 c0                	test   eax,eax
c0019163:	74 0c                	je     c0019171 <HalDetectFeatures()+0x869>
c0019165:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001916f:	eb 64                	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c0019171:	83 ec 08             	sub    esp,0x8
c0019174:	68 82 51 02 c0       	push   0xc0025182
c0019179:	68 f0 ea 02 c0       	push   0xc002eaf0
c001917e:	e8 cd 75 fe ff       	call   c0000750 <strcmp>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	85 c0                	test   eax,eax
c0019188:	0f 94 c0             	sete   al
c001918b:	0f b6 c0             	movzx  eax,al
c001918e:	85 c0                	test   eax,eax
c0019190:	74 0c                	je     c001919e <HalDetectFeatures()+0x896>
c0019192:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001919c:	eb 37                	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c001919e:	83 ec 08             	sub    esp,0x8
c00191a1:	68 8f 51 02 c0       	push   0xc002518f
c00191a6:	68 f0 ea 02 c0       	push   0xc002eaf0
c00191ab:	e8 a0 75 fe ff       	call   c0000750 <strcmp>
c00191b0:	83 c4 10             	add    esp,0x10
c00191b3:	85 c0                	test   eax,eax
c00191b5:	0f 94 c0             	sete   al
c00191b8:	0f b6 c0             	movzx  eax,al
c00191bb:	85 c0                	test   eax,eax
c00191bd:	74 0c                	je     c00191cb <HalDetectFeatures()+0x8c3>
c00191bf:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c00191c9:	eb 0a                	jmp    c00191d5 <HalDetectFeatures()+0x8cd>
c00191cb:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c00191d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191d9:	83 f8 06             	cmp    eax,0x6
c00191dc:	0f 86 cc 00 00 00    	jbe    c00192ae <HalDetectFeatures()+0x9a6>
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	68 80 00 00 00       	push   0x80
c00191ea:	e8 bd f6 ff ff       	call   c00188ac <cpuidCheckExtendedEBX(unsigned int)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	89 c1                	mov    ecx,eax
c00191f4:	83 e1 01             	and    ecx,0x1
c00191f7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00191fc:	83 e0 fe             	and    eax,0xfffffffe
c00191ff:	88 c2                	mov    dl,al
c0019201:	88 c8                	mov    al,cl
c0019203:	09 d0                	or     eax,edx
c0019205:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001920a:	83 ec 0c             	sub    esp,0xc
c001920d:	68 00 00 10 00       	push   0x100000
c0019212:	e8 95 f6 ff ff       	call   c00188ac <cpuidCheckExtendedEBX(unsigned int)>
c0019217:	83 c4 10             	add    esp,0x10
c001921a:	83 e0 01             	and    eax,0x1
c001921d:	89 c1                	mov    ecx,eax
c001921f:	c1 e1 06             	shl    ecx,0x6
c0019222:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019227:	83 e0 bf             	and    eax,0xffffffbf
c001922a:	88 c2                	mov    dl,al
c001922c:	88 c8                	mov    al,cl
c001922e:	09 d0                	or     eax,edx
c0019230:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019235:	83 ec 0c             	sub    esp,0xc
c0019238:	68 00 00 04 00       	push   0x40000
c001923d:	e8 6a f6 ff ff       	call   c00188ac <cpuidCheckExtendedEBX(unsigned int)>
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	83 e0 01             	and    eax,0x1
c0019248:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001924b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019250:	83 e0 fd             	and    eax,0xfffffffd
c0019253:	88 c2                	mov    dl,al
c0019255:	88 c8                	mov    al,cl
c0019257:	09 d0                	or     eax,edx
c0019259:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001925e:	83 ec 0c             	sub    esp,0xc
c0019261:	6a 04                	push   0x4
c0019263:	e8 72 f6 ff ff       	call   c00188da <cpuidCheckExtendedECX(unsigned int)>
c0019268:	83 c4 10             	add    esp,0x10
c001926b:	83 e0 01             	and    eax,0x1
c001926e:	89 c1                	mov    ecx,eax
c0019270:	c1 e1 05             	shl    ecx,0x5
c0019273:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019278:	83 e0 df             	and    eax,0xffffffdf
c001927b:	88 c2                	mov    dl,al
c001927d:	88 c8                	mov    al,cl
c001927f:	09 d0                	or     eax,edx
c0019281:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019286:	83 ec 0c             	sub    esp,0xc
c0019289:	6a 20                	push   0x20
c001928b:	e8 4a f6 ff ff       	call   c00188da <cpuidCheckExtendedECX(unsigned int)>
c0019290:	83 c4 10             	add    esp,0x10
c0019293:	83 e0 01             	and    eax,0x1
c0019296:	89 c1                	mov    ecx,eax
c0019298:	c1 e1 04             	shl    ecx,0x4
c001929b:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00192a0:	83 e0 ef             	and    eax,0xffffffef
c00192a3:	88 c2                	mov    dl,al
c00192a5:	88 c8                	mov    al,cl
c00192a7:	09 d0                	or     eax,edx
c00192a9:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00192ae:	83 ec 0c             	sub    esp,0xc
c00192b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192b5:	50                   	push   eax
c00192b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192ba:	50                   	push   eax
c00192bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192bf:	50                   	push   eax
c00192c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00192c4:	50                   	push   eax
c00192c5:	6a 01                	push   0x1
c00192c7:	e8 e7 f4 ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192cc:	83 c4 20             	add    esp,0x20
c00192cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192d3:	83 e0 0f             	and    eax,0xf
c00192d6:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c00192db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192df:	c1 e8 04             	shr    eax,0x4
c00192e2:	83 e0 0f             	and    eax,0xf
c00192e5:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c00192ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192ee:	c1 e8 08             	shr    eax,0x8
c00192f1:	83 e0 0f             	and    eax,0xf
c00192f4:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c00192f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192fd:	c1 e8 0c             	shr    eax,0xc
c0019300:	83 e0 03             	and    eax,0x3
c0019303:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0019308:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001930d:	0f b6 c0             	movzx  eax,al
c0019310:	83 f8 06             	cmp    eax,0x6
c0019313:	74 0d                	je     c0019322 <HalDetectFeatures()+0xa1a>
c0019315:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001931a:	0f b6 c0             	movzx  eax,al
c001931d:	83 f8 0f             	cmp    eax,0xf
c0019320:	75 18                	jne    c001933a <HalDetectFeatures()+0xa32>
c0019322:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019326:	c1 e8 10             	shr    eax,0x10
c0019329:	c1 e0 04             	shl    eax,0x4
c001932c:	88 c2                	mov    dl,al
c001932e:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c0019333:	09 d0                	or     eax,edx
c0019335:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c001933a:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001933f:	0f b6 c0             	movzx  eax,al
c0019342:	83 f8 0f             	cmp    eax,0xf
c0019345:	75 15                	jne    c001935c <HalDetectFeatures()+0xa54>
c0019347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001934b:	c1 e8 14             	shr    eax,0x14
c001934e:	88 c2                	mov    dl,al
c0019350:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019355:	01 d0                	add    eax,edx
c0019357:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c001935c:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019364:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001936c:	85 c0                	test   eax,eax
c001936e:	74 2d                	je     c001939d <HalDetectFeatures()+0xa95>
c0019370:	83 ec 0c             	sub    esp,0xc
c0019373:	68 00 00 00 40       	push   0x40000000
c0019378:	e8 01 f5 ff ff       	call   c001887e <cpuidCheckECX(unsigned int)>
c001937d:	83 c4 10             	add    esp,0x10
c0019380:	83 e0 01             	and    eax,0x1
c0019383:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001938a:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c001938f:	83 e0 fb             	and    eax,0xfffffffb
c0019392:	88 c2                	mov    dl,al
c0019394:	88 c8                	mov    al,cl
c0019396:	09 d0                	or     eax,edx
c0019398:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001939d:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193a2:	83 c8 04             	or     eax,0x4
c00193a5:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193aa:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193af:	83 c8 08             	or     eax,0x8
c00193b2:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193b7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193bc:	83 c8 10             	or     eax,0x10
c00193bf:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193cb:	50                   	push   eax
c00193cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00193d0:	50                   	push   eax
c00193d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00193d5:	50                   	push   eax
c00193d6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00193da:	50                   	push   eax
c00193db:	68 00 00 00 80       	push   0x80000000
c00193e0:	e8 ce f3 ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193e5:	83 c4 20             	add    esp,0x20
c00193e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193ec:	3d 00 00 00 80       	cmp    eax,0x80000000
c00193f1:	0f 86 96 01 00 00    	jbe    c001958d <HalDetectFeatures()+0xc85>
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193fe:	50                   	push   eax
c00193ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019403:	50                   	push   eax
c0019404:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019408:	50                   	push   eax
c0019409:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001940d:	50                   	push   eax
c001940e:	68 01 00 00 80       	push   0x80000001
c0019413:	e8 9b f3 ff ff       	call   c00187b3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019418:	83 c4 20             	add    esp,0x20
c001941b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019420:	83 e0 7f             	and    eax,0x7f
c0019423:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019428:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001942d:	83 e0 fb             	and    eax,0xfffffffb
c0019430:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019435:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001943a:	83 e0 fd             	and    eax,0xfffffffd
c001943d:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019442:	e9 46 01 00 00       	jmp    c001958d <HalDetectFeatures()+0xc85>
c0019447:	83 ec 08             	sub    esp,0x8
c001944a:	68 00 51 02 c0       	push   0xc0025100
c001944f:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019454:	e8 e7 71 fe ff       	call   c0000640 <strcpy>
c0019459:	83 c4 10             	add    esp,0x10
c001945c:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0019466:	e8 58 6d fe ff       	call   c00001c3 <is486>
c001946b:	85 c0                	test   eax,eax
c001946d:	0f 95 c0             	setne  al
c0019470:	0f b6 c0             	movzx  eax,al
c0019473:	85 c0                	test   eax,eax
c0019475:	0f 84 8d 00 00 00    	je     c0019508 <HalDetectFeatures()+0xc00>
c001947b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019480:	83 c8 04             	or     eax,0x4
c0019483:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019488:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001948d:	83 c8 08             	or     eax,0x8
c0019490:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019495:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001949a:	83 c8 10             	or     eax,0x10
c001949d:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00194a2:	0f 20 c0             	mov    eax,cr0
c00194a5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194ad:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00194b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00194bb:	83 e0 04             	and    eax,0x4
c00194be:	74 1e                	je     c00194de <HalDetectFeatures()+0xbd6>
c00194c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00194c7:	83 e0 10             	and    eax,0x10
c00194ca:	75 12                	jne    c00194de <HalDetectFeatures()+0xbd6>
c00194cc:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00194d1:	83 e0 f7             	and    eax,0xfffffff7
c00194d4:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00194d9:	e9 af 00 00 00       	jmp    c001958d <HalDetectFeatures()+0xc85>
c00194de:	e8 bb 6c fe ff       	call   c000019e <hasLegacyFPU>
c00194e3:	83 e0 01             	and    eax,0x1
c00194e6:	83 e0 01             	and    eax,0x1
c00194e9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00194f0:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00194f5:	83 e0 f7             	and    eax,0xfffffff7
c00194f8:	88 c2                	mov    dl,al
c00194fa:	88 c8                	mov    al,cl
c00194fc:	09 d0                	or     eax,edx
c00194fe:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019503:	e9 85 00 00 00       	jmp    c001958d <HalDetectFeatures()+0xc85>
c0019508:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001950d:	83 e0 fb             	and    eax,0xfffffffb
c0019510:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019515:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001951a:	83 e0 f7             	and    eax,0xfffffff7
c001951d:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019522:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019527:	83 e0 ef             	and    eax,0xffffffef
c001952a:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001952f:	0f 20 c0             	mov    eax,cr0
c0019532:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001953a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019541:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019548:	83 e0 04             	and    eax,0x4
c001954b:	74 1b                	je     c0019568 <HalDetectFeatures()+0xc60>
c001954d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019554:	83 e0 10             	and    eax,0x10
c0019557:	75 0f                	jne    c0019568 <HalDetectFeatures()+0xc60>
c0019559:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001955e:	83 e0 f7             	and    eax,0xfffffff7
c0019561:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019566:	eb 25                	jmp    c001958d <HalDetectFeatures()+0xc85>
c0019568:	e8 31 6c fe ff       	call   c000019e <hasLegacyFPU>
c001956d:	83 e0 01             	and    eax,0x1
c0019570:	83 e0 01             	and    eax,0x1
c0019573:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001957a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001957f:	83 e0 f7             	and    eax,0xfffffff7
c0019582:	88 c2                	mov    dl,al
c0019584:	88 c8                	mov    al,cl
c0019586:	09 d0                	or     eax,edx
c0019588:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001958d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019592:	83 e0 08             	and    eax,0x8
c0019595:	0f b6 c0             	movzx  eax,al
c0019598:	85 c0                	test   eax,eax
c001959a:	75 25                	jne    c00195c1 <HalDetectFeatures()+0xcb9>
c001959c:	e8 fd 6b fe ff       	call   c000019e <hasLegacyFPU>
c00195a1:	83 e0 01             	and    eax,0x1
c00195a4:	83 e0 01             	and    eax,0x1
c00195a7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195ae:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195b3:	83 e0 f7             	and    eax,0xfffffff7
c00195b6:	88 c2                	mov    dl,al
c00195b8:	88 c8                	mov    al,cl
c00195ba:	09 d0                	or     eax,edx
c00195bc:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00195c1:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195c6:	83 e0 08             	and    eax,0x8
c00195c9:	0f b6 c0             	movzx  eax,al
c00195cc:	85 c0                	test   eax,eax
c00195ce:	74 0d                	je     c00195dd <HalDetectFeatures()+0xcd5>
c00195d0:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195d5:	83 c8 10             	or     eax,0x10
c00195d8:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00195dd:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195e2:	83 e0 10             	and    eax,0x10
c00195e5:	0f b6 c0             	movzx  eax,al
c00195e8:	85 c0                	test   eax,eax
c00195ea:	75 23                	jne    c001960f <HalDetectFeatures()+0xd07>
c00195ec:	e8 35 7f 00 00       	call   c0021526 <x87Detect>
c00195f1:	83 e0 01             	and    eax,0x1
c00195f4:	83 e0 01             	and    eax,0x1
c00195f7:	89 c1                	mov    ecx,eax
c00195f9:	c1 e1 04             	shl    ecx,0x4
c00195fc:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019601:	83 e0 ef             	and    eax,0xffffffef
c0019604:	88 c2                	mov    dl,al
c0019606:	88 c8                	mov    al,cl
c0019608:	09 d0                	or     eax,edx
c001960a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001960f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019614:	83 e0 01             	and    eax,0x1
c0019617:	0f b6 c0             	movzx  eax,al
c001961a:	85 c0                	test   eax,eax
c001961c:	75 2d                	jne    c001964b <HalDetectFeatures()+0xd43>
c001961e:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019623:	83 e0 02             	and    eax,0x2
c0019626:	0f b6 c0             	movzx  eax,al
c0019629:	85 c0                	test   eax,eax
c001962b:	75 1e                	jne    c001964b <HalDetectFeatures()+0xd43>
c001962d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019632:	83 e0 04             	and    eax,0x4
c0019635:	0f b6 c0             	movzx  eax,al
c0019638:	85 c0                	test   eax,eax
c001963a:	75 0f                	jne    c001964b <HalDetectFeatures()+0xd43>
c001963c:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019641:	83 e0 08             	and    eax,0x8
c0019644:	0f b6 c0             	movzx  eax,al
c0019647:	85 c0                	test   eax,eax
c0019649:	74 0d                	je     c0019658 <HalDetectFeatures()+0xd50>
c001964b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019650:	83 c8 80             	or     eax,0xffffff80
c0019653:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019658:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001965d:	83 e0 10             	and    eax,0x10
c0019660:	0f b6 c0             	movzx  eax,al
c0019663:	85 c0                	test   eax,eax
c0019665:	74 2f                	je     c0019696 <HalDetectFeatures()+0xd8e>
c0019667:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001966c:	83 e0 80             	and    eax,0xffffff80
c001966f:	0f b6 c0             	movzx  eax,al
c0019672:	85 c0                	test   eax,eax
c0019674:	75 20                	jne    c0019696 <HalDetectFeatures()+0xd8e>
c0019676:	e8 65 7e 00 00       	call   c00214e0 <sseDetect>
c001967b:	83 e0 01             	and    eax,0x1
c001967e:	89 c1                	mov    ecx,eax
c0019680:	c1 e1 07             	shl    ecx,0x7
c0019683:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019688:	83 e0 7f             	and    eax,0x7f
c001968b:	88 c2                	mov    dl,al
c001968d:	88 c8                	mov    al,cl
c001968f:	09 d0                	or     eax,edx
c0019691:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019696:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001969b:	83 e0 80             	and    eax,0xffffff80
c001969e:	0f b6 c0             	movzx  eax,al
c00196a1:	85 c0                	test   eax,eax
c00196a3:	74 1c                	je     c00196c1 <HalDetectFeatures()+0xdb9>
c00196a5:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196aa:	83 e0 20             	and    eax,0x20
c00196ad:	0f b6 c0             	movzx  eax,al
c00196b0:	85 c0                	test   eax,eax
c00196b2:	75 0d                	jne    c00196c1 <HalDetectFeatures()+0xdb9>
c00196b4:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196b9:	83 e0 df             	and    eax,0xffffffdf
c00196bc:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00196c1:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c00196c8:	90                   	nop
c00196c9:	81 c4 90 00 00 00    	add    esp,0x90
c00196cf:	5b                   	pop    ebx
c00196d0:	5e                   	pop    esi
c00196d1:	5f                   	pop    edi
c00196d2:	c3                   	ret    

c00196d3 <HalEnableNMI()>:
c00196d3:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c00196da:	6a 10                	push   0x10
c00196dc:	e8 22 ef ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c00196e1:	83 c4 04             	add    esp,0x4
c00196e4:	90                   	nop
c00196e5:	c3                   	ret    

c00196e6 <HalDisableNMI()>:
c00196e6:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c00196ed:	6a 10                	push   0x10
c00196ef:	e8 0f ef ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c00196f4:	83 c4 04             	add    esp,0x4
c00196f7:	90                   	nop
c00196f8:	c3                   	ret    

c00196f9 <HalGetNMIState()>:
c00196f9:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c00196fe:	c3                   	ret    

c00196ff <x86rdmsr(unsigned int)>:
c00196ff:	83 ec 1c             	sub    esp,0x1c
c0019702:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019707:	83 e0 08             	and    eax,0x8
c001970a:	0f b6 c0             	movzx  eax,al
c001970d:	85 c0                	test   eax,eax
c001970f:	75 10                	jne    c0019721 <x86rdmsr(unsigned int)+0x22>
c0019711:	83 ec 0c             	sub    esp,0xc
c0019714:	68 9b 51 02 c0       	push   0xc002519b
c0019719:	e8 c0 68 ff ff       	call   c000ffde <KePanic(char const*)>
c001971e:	83 c4 10             	add    esp,0x10
c0019721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019725:	89 c1                	mov    ecx,eax
c0019727:	0f 32                	rdmsr  
c0019729:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001972d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019735:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019739:	83 c4 1c             	add    esp,0x1c
c001973c:	c3                   	ret    

c001973d <x86wrmsr(unsigned int, unsigned long long)>:
c001973d:	83 ec 1c             	sub    esp,0x1c
c0019740:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019744:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001974c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019750:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019755:	83 e0 08             	and    eax,0x8
c0019758:	0f b6 c0             	movzx  eax,al
c001975b:	85 c0                	test   eax,eax
c001975d:	75 10                	jne    c001976f <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001975f:	83 ec 0c             	sub    esp,0xc
c0019762:	68 a1 51 02 c0       	push   0xc00251a1
c0019767:	e8 72 68 ff ff       	call   c000ffde <KePanic(char const*)>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019773:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001977b:	0f 30                	wrmsr  
c001977d:	90                   	nop
c001977e:	83 c4 1c             	add    esp,0x1c
c0019781:	c3                   	ret    

c0019782 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019782:	83 ec 0c             	sub    esp,0xc
c0019785:	83 ec 0c             	sub    esp,0xc
c0019788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001978c:	e8 48 e7 ff ff       	call   c0017ed9 <Vm::faultHandler(regs*)>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	83 c4 0c             	add    esp,0xc
c0019797:	c3                   	ret    

c0019798 <HalFindRSDP()>:
c0019798:	83 ec 1c             	sub    esp,0x1c
c001979b:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00197a0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00197a5:	7e 0c                	jle    c00197b3 <HalFindRSDP()+0x1b>
c00197a7:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c00197ac:	25 00 04 00 00       	and    eax,0x400
c00197b1:	74 0d                	je     c00197c0 <HalFindRSDP()+0x28>
c00197b3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00197b8:	83 e0 fb             	and    eax,0xfffffffb
c00197bb:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00197c0:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00197c5:	83 e0 04             	and    eax,0x4
c00197c8:	0f b6 c0             	movzx  eax,al
c00197cb:	85 c0                	test   eax,eax
c00197cd:	75 07                	jne    c00197d6 <HalFindRSDP()+0x3e>
c00197cf:	b8 00 00 00 00       	mov    eax,0x0
c00197d4:	eb 53                	jmp    c0019829 <HalFindRSDP()+0x91>
c00197d6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00197de:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00197e6:	77 2f                	ja     c0019817 <HalFindRSDP()+0x7f>
c00197e8:	83 ec 04             	sub    esp,0x4
c00197eb:	6a 08                	push   0x8
c00197ed:	68 a7 51 02 c0       	push   0xc00251a7
c00197f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197f6:	e8 85 6b fe ff       	call   c0000380 <memcmp>
c00197fb:	83 c4 10             	add    esp,0x10
c00197fe:	85 c0                	test   eax,eax
c0019800:	0f 94 c0             	sete   al
c0019803:	0f b6 c0             	movzx  eax,al
c0019806:	85 c0                	test   eax,eax
c0019808:	74 06                	je     c0019810 <HalFindRSDP()+0x78>
c001980a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001980e:	eb 19                	jmp    c0019829 <HalFindRSDP()+0x91>
c0019810:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019815:	eb c7                	jmp    c00197de <HalFindRSDP()+0x46>
c0019817:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001981c:	83 e0 fb             	and    eax,0xfffffffb
c001981f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019824:	b8 00 00 00 00       	mov    eax,0x0
c0019829:	83 c4 1c             	add    esp,0x1c
c001982c:	c3                   	ret    

c001982d <HalHandlePageFault(void*, void*)>:
c001982d:	83 ec 1c             	sub    esp,0x1c
c0019830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019834:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019837:	83 ec 08             	sub    esp,0x8
c001983a:	50                   	push   eax
c001983b:	68 ec 53 02 c0       	push   0xc00253ec
c0019840:	e8 1f d7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001984c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001984f:	83 ec 08             	sub    esp,0x8
c0019852:	50                   	push   eax
c0019853:	68 b0 51 02 c0       	push   0xc00251b0
c0019858:	e8 07 d7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001985d:	83 c4 10             	add    esp,0x10
c0019860:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019865:	8b 00                	mov    eax,DWORD PTR [eax]
c0019867:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001986a:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019870:	0f 20 d2             	mov    edx,cr2
c0019873:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019877:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001987b:	83 ec 08             	sub    esp,0x8
c001987e:	52                   	push   edx
c001987f:	50                   	push   eax
c0019880:	e8 b5 a9 ff ff       	call   c001423a <VAS::tryLoadBackOffDisk(unsigned long)>
c0019885:	83 c4 10             	add    esp,0x10
c0019888:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001988c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019890:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019893:	83 ec 08             	sub    esp,0x8
c0019896:	50                   	push   eax
c0019897:	68 c5 51 02 c0       	push   0xc00251c5
c001989c:	e8 c3 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198a1:	83 c4 10             	add    esp,0x10
c00198a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198ab:	83 ec 08             	sub    esp,0x8
c00198ae:	50                   	push   eax
c00198af:	68 df 51 02 c0       	push   0xc00251df
c00198b4:	e8 ab d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198b9:	83 c4 10             	add    esp,0x10
c00198bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00198c1:	83 ec 08             	sub    esp,0x8
c00198c4:	50                   	push   eax
c00198c5:	68 f4 51 02 c0       	push   0xc00251f4
c00198ca:	e8 95 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198cf:	83 c4 10             	add    esp,0x10
c00198d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00198d6:	83 c4 1c             	add    esp,0x1c
c00198d9:	c3                   	ret    

c00198da <HalHandleOpcodeFault(void*, void*)>:
c00198da:	83 ec 1c             	sub    esp,0x1c
c00198dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198e5:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c00198ea:	0f b6 c0             	movzx  eax,al
c00198ed:	85 c0                	test   eax,eax
c00198ef:	74 25                	je     c0019916 <HalHandleOpcodeFault(void*, void*)+0x3c>
c00198f1:	83 ec 0c             	sub    esp,0xc
c00198f4:	68 20 54 02 c0       	push   0xc0025420
c00198f9:	e8 66 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198fe:	83 c4 10             	add    esp,0x10
c0019901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019905:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019908:	8d 50 19             	lea    edx,[eax+0x19]
c001990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001990f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019912:	b0 01                	mov    al,0x1
c0019914:	eb 02                	jmp    c0019918 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019916:	b0 00                	mov    al,0x0
c0019918:	83 c4 1c             	add    esp,0x1c
c001991b:	c3                   	ret    

c001991c <HalDisplayDebugInfo(void*)>:
c001991c:	83 ec 2c             	sub    esp,0x2c
c001991f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019927:	0f 20 c0             	mov    eax,cr0
c001992a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001992e:	0f 20 d0             	mov    eax,cr2
c0019931:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019935:	0f 20 d8             	mov    eax,cr3
c0019938:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001993c:	0f 20 e0             	mov    eax,cr4
c001993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019947:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001994a:	83 ec 08             	sub    esp,0x8
c001994d:	50                   	push   eax
c001994e:	68 0f 52 02 c0       	push   0xc002520f
c0019953:	e8 0c d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001995f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019962:	83 ec 08             	sub    esp,0x8
c0019965:	50                   	push   eax
c0019966:	68 00 52 02 c0       	push   0xc0025200
c001996b:	e8 f4 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019970:	83 c4 10             	add    esp,0x10
c0019973:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019977:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001997a:	83 ec 08             	sub    esp,0x8
c001997d:	50                   	push   eax
c001997e:	68 0b 52 02 c0       	push   0xc002520b
c0019983:	e8 dc d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001998f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019992:	83 ec 08             	sub    esp,0x8
c0019995:	50                   	push   eax
c0019996:	68 1a 52 02 c0       	push   0xc002521a
c001999b:	e8 c4 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199a0:	83 c4 10             	add    esp,0x10
c00199a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199a7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00199aa:	83 ec 08             	sub    esp,0x8
c00199ad:	50                   	push   eax
c00199ae:	68 25 52 02 c0       	push   0xc0025225
c00199b3:	e8 ac d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199b8:	83 c4 10             	add    esp,0x10
c00199bb:	83 ec 08             	sub    esp,0x8
c00199be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199c2:	68 30 52 02 c0       	push   0xc0025230
c00199c7:	e8 98 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199cc:	83 c4 10             	add    esp,0x10
c00199cf:	83 ec 08             	sub    esp,0x8
c00199d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199d6:	68 3b 52 02 c0       	push   0xc002523b
c00199db:	e8 84 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199e0:	83 c4 10             	add    esp,0x10
c00199e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199e7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00199ea:	c1 e0 05             	shl    eax,0x5
c00199ed:	8d 90 60 67 02 c0    	lea    edx,[eax-0x3ffd98a0]
c00199f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199f7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00199fa:	83 ec 04             	sub    esp,0x4
c00199fd:	52                   	push   edx
c00199fe:	50                   	push   eax
c00199ff:	68 46 52 02 c0       	push   0xc0025246
c0019a04:	e8 5b d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a09:	83 c4 10             	add    esp,0x10
c0019a0c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a11:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a17:	83 ec 0c             	sub    esp,0xc
c0019a1a:	50                   	push   eax
c0019a1b:	e8 c7 8a ff ff       	call   c00124e7 <setActiveTerminal(VgaText*)>
c0019a20:	83 c4 10             	add    esp,0x10
c0019a23:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a28:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a2e:	83 ec 08             	sub    esp,0x8
c0019a31:	68 55 52 02 c0       	push   0xc0025255
c0019a36:	50                   	push   eax
c0019a37:	e8 f8 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019a3c:	83 c4 10             	add    esp,0x10
c0019a3f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a44:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a4e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019a51:	83 ec 08             	sub    esp,0x8
c0019a54:	52                   	push   edx
c0019a55:	50                   	push   eax
c0019a56:	e8 93 8d ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a63:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a69:	83 ec 08             	sub    esp,0x8
c0019a6c:	68 63 52 02 c0       	push   0xc0025263
c0019a71:	50                   	push   eax
c0019a72:	e8 bd 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a7f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a85:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019a8a:	8b 12                	mov    edx,DWORD PTR [edx]
c0019a8c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019a8f:	83 c2 0c             	add    edx,0xc
c0019a92:	83 ec 08             	sub    esp,0x8
c0019a95:	52                   	push   edx
c0019a96:	50                   	push   eax
c0019a97:	e8 98 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019a9c:	83 c4 10             	add    esp,0x10
c0019a9f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019aa4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019aaa:	83 ec 08             	sub    esp,0x8
c0019aad:	68 6c 52 02 c0       	push   0xc002526c
c0019ab2:	50                   	push   eax
c0019ab3:	e8 7c 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ac0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ac6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019aca:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	52                   	push   edx
c0019ad1:	50                   	push   eax
c0019ad2:	e8 17 8d ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019adf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ae5:	83 ec 08             	sub    esp,0x8
c0019ae8:	68 74 52 02 c0       	push   0xc0025274
c0019aed:	50                   	push   eax
c0019aee:	e8 41 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019afb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b05:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019b08:	83 ec 08             	sub    esp,0x8
c0019b0b:	52                   	push   edx
c0019b0c:	50                   	push   eax
c0019b0d:	e8 dc 8c ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b1a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b20:	83 ec 08             	sub    esp,0x8
c0019b23:	68 7c 52 02 c0       	push   0xc002527c
c0019b28:	50                   	push   eax
c0019b29:	e8 06 8d ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019b2e:	83 c4 10             	add    esp,0x10
c0019b31:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b36:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b40:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019b43:	83 ec 08             	sub    esp,0x8
c0019b46:	52                   	push   edx
c0019b47:	50                   	push   eax
c0019b48:	e8 a1 8c ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b55:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b5b:	83 ec 08             	sub    esp,0x8
c0019b5e:	68 84 52 02 c0       	push   0xc0025284
c0019b63:	50                   	push   eax
c0019b64:	e8 cb 8c ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b71:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b7b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019b7e:	83 ec 08             	sub    esp,0x8
c0019b81:	52                   	push   edx
c0019b82:	50                   	push   eax
c0019b83:	e8 66 8c ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b90:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019b96:	83 ec 08             	sub    esp,0x8
c0019b99:	68 8c 52 02 c0       	push   0xc002528c
c0019b9e:	50                   	push   eax
c0019b9f:	e8 90 8c ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bac:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019bb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bb6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019bb9:	83 ec 08             	sub    esp,0x8
c0019bbc:	52                   	push   edx
c0019bbd:	50                   	push   eax
c0019bbe:	e8 2b 8c ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bcb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019bd1:	83 ec 08             	sub    esp,0x8
c0019bd4:	68 94 52 02 c0       	push   0xc0025294
c0019bd9:	50                   	push   eax
c0019bda:	e8 55 8c ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019be7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019bed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bf1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019bf4:	83 ec 08             	sub    esp,0x8
c0019bf7:	52                   	push   edx
c0019bf8:	50                   	push   eax
c0019bf9:	e8 f0 8b ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019bfe:	83 c4 10             	add    esp,0x10
c0019c01:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c06:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c0c:	83 ec 08             	sub    esp,0x8
c0019c0f:	68 9c 52 02 c0       	push   0xc002529c
c0019c14:	50                   	push   eax
c0019c15:	e8 1a 8c ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c22:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c28:	83 ec 08             	sub    esp,0x8
c0019c2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c2f:	50                   	push   eax
c0019c30:	e8 b9 8b ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019c35:	83 c4 10             	add    esp,0x10
c0019c38:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c3d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c43:	83 ec 08             	sub    esp,0x8
c0019c46:	68 a5 52 02 c0       	push   0xc00252a5
c0019c4b:	50                   	push   eax
c0019c4c:	e8 e3 8b ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019c51:	83 c4 10             	add    esp,0x10
c0019c54:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c59:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c5f:	83 ec 08             	sub    esp,0x8
c0019c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c66:	50                   	push   eax
c0019c67:	e8 82 8b ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019c6c:	83 c4 10             	add    esp,0x10
c0019c6f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c74:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c7a:	83 ec 08             	sub    esp,0x8
c0019c7d:	68 ad 52 02 c0       	push   0xc00252ad
c0019c82:	50                   	push   eax
c0019c83:	e8 ac 8b ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019c88:	83 c4 10             	add    esp,0x10
c0019c8b:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c90:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c96:	83 ec 08             	sub    esp,0x8
c0019c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9d:	50                   	push   eax
c0019c9e:	e8 4b 8b ff ff       	call   c00127ee <VgaText::putx(unsigned int)>
c0019ca3:	83 c4 10             	add    esp,0x10
c0019ca6:	fa                   	cli    
c0019ca7:	f4                   	hlt    
c0019ca8:	eb fe                	jmp    c0019ca8 <HalDisplayDebugInfo(void*)+0x38c>

c0019caa <HalReceivedNMI()>:
c0019caa:	83 ec 1c             	sub    esp,0x1c
c0019cad:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb8:	89 c2                	mov    edx,eax
c0019cba:	ec                   	in     al,dx
c0019cbb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019cbf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019cc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019cc7:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cd2:	89 c2                	mov    edx,eax
c0019cd4:	ec                   	in     al,dx
c0019cd5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019cd9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019cdd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019ce1:	83 ec 0c             	sub    esp,0xc
c0019ce4:	68 b5 52 02 c0       	push   0xc00252b5
c0019ce9:	e8 76 d2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019cee:	83 c4 10             	add    esp,0x10
c0019cf1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019cf6:	83 e0 10             	and    eax,0x10
c0019cf9:	74 10                	je     c0019d0b <HalReceivedNMI()+0x61>
c0019cfb:	83 ec 0c             	sub    esp,0xc
c0019cfe:	68 c6 52 02 c0       	push   0xc00252c6
c0019d03:	e8 d6 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019d10:	83 e0 40             	and    eax,0x40
c0019d13:	74 10                	je     c0019d25 <HalReceivedNMI()+0x7b>
c0019d15:	83 ec 0c             	sub    esp,0xc
c0019d18:	68 d3 52 02 c0       	push   0xc00252d3
c0019d1d:	e8 bc 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d22:	83 c4 10             	add    esp,0x10
c0019d25:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019d29:	0f be c0             	movsx  eax,al
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	79 10                	jns    c0019d40 <HalReceivedNMI()+0x96>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	68 dd 52 02 c0       	push   0xc00252dd
c0019d38:	e8 a1 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	90                   	nop
c0019d41:	83 c4 1c             	add    esp,0x1c
c0019d44:	c3                   	ret    

c0019d45 <HalSystemIdle()>:
c0019d45:	56                   	push   esi
c0019d46:	53                   	push   ebx
c0019d47:	83 ec 14             	sub    esp,0x14
c0019d4a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019d4f:	83 e0 10             	and    eax,0x10
c0019d52:	0f b6 c0             	movzx  eax,al
c0019d55:	85 c0                	test   eax,eax
c0019d57:	74 43                	je     c0019d9c <HalSystemIdle()+0x57>
c0019d59:	83 ec 0c             	sub    esp,0xc
c0019d5c:	68 e1 00 00 00       	push   0xe1
c0019d61:	e8 99 f9 ff ff       	call   c00196ff <x86rdmsr(unsigned int)>
c0019d66:	83 c4 10             	add    esp,0x10
c0019d69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d75:	83 e0 02             	and    eax,0x2
c0019d78:	89 c3                	mov    ebx,eax
c0019d7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d7e:	83 e0 00             	and    eax,0x0
c0019d81:	89 c6                	mov    esi,eax
c0019d83:	83 ec 04             	sub    esp,0x4
c0019d86:	56                   	push   esi
c0019d87:	53                   	push   ebx
c0019d88:	68 e1 00 00 00       	push   0xe1
c0019d8d:	e8 ab f9 ff ff       	call   c001973d <x86wrmsr(unsigned int, unsigned long long)>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	e8 fa 63 fe ff       	call   c0000194 <doTPAUSE>
c0019d9a:	eb 01                	jmp    c0019d9d <HalSystemIdle()+0x58>
c0019d9c:	f4                   	hlt    
c0019d9d:	90                   	nop
c0019d9e:	83 c4 14             	add    esp,0x14
c0019da1:	5b                   	pop    ebx
c0019da2:	5e                   	pop    esi
c0019da3:	c3                   	ret    

c0019da4 <i386SaveCoprocessor(void*)>:
c0019da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da8:	83 c0 3f             	add    eax,0x3f
c0019dab:	83 e0 c0             	and    eax,0xffffffc0
c0019dae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019db2:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019db8 <i386LoadCoprocessor(void*)>:
c0019db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbc:	83 c0 3f             	add    eax,0x3f
c0019dbf:	83 e0 c0             	and    eax,0xffffffc0
c0019dc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019dc6:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019dcc <x87EmulHandler(regs*, void*)>:
c0019dcc:	53                   	push   ebx
c0019dcd:	83 ec 08             	sub    esp,0x8
c0019dd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dd5:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0019dd9:	74 10                	je     c0019deb <x87EmulHandler(regs*, void*)+0x1f>
c0019ddb:	83 ec 0c             	sub    esp,0xc
c0019dde:	68 ea 52 02 c0       	push   0xc00252ea
c0019de3:	e8 f6 61 ff ff       	call   c000ffde <KePanic(char const*)>
c0019de8:	83 c4 10             	add    esp,0x10
c0019deb:	0f 20 c0             	mov    eax,cr0
c0019dee:	a8 08                	test   al,0x8
c0019df0:	74 59                	je     c0019e4b <x87EmulHandler(regs*, void*)+0x7f>
c0019df2:	0f 06                	clts   
c0019df4:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019df9:	85 c0                	test   eax,eax
c0019dfb:	74 0e                	je     c0019e0b <x87EmulHandler(regs*, void*)+0x3f>
c0019dfd:	83 ec 0c             	sub    esp,0xc
c0019e00:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019e03:	e8 9c ff ff ff       	call   c0019da4 <i386SaveCoprocessor(void*)>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019e11:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c0019e15:	75 12                	jne    c0019e29 <x87EmulHandler(regs*, void*)+0x5d>
c0019e17:	83 ec 0c             	sub    esp,0xc
c0019e1a:	68 40 02 00 00       	push   0x240
c0019e1f:	e8 73 5e ff ff       	call   c000fc97 <malloc>
c0019e24:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c0019e27:	eb 10                	jmp    c0019e39 <x87EmulHandler(regs*, void*)+0x6d>
c0019e29:	83 ec 0c             	sub    esp,0xc
c0019e2c:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019e31:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019e34:	e8 7f ff ff ff       	call   c0019db8 <i386LoadCoprocessor(void*)>
c0019e39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e3e:	83 c4 10             	add    esp,0x10
c0019e41:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019e46:	83 c4 08             	add    esp,0x8
c0019e49:	5b                   	pop    ebx
c0019e4a:	c3                   	ret    
c0019e4b:	83 ec 0c             	sub    esp,0xc
c0019e4e:	68 fe 52 02 c0       	push   0xc00252fe
c0019e53:	e8 0c d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019e58:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019e60:	83 c4 18             	add    esp,0x18
c0019e63:	5b                   	pop    ebx
c0019e64:	e9 b7 d9 ff ff       	jmp    c0017820 <Thr::terminateFromIRQ(int)>

c0019e69 <HalInitialiseCoprocessor()>:
c0019e69:	83 ec 10             	sub    esp,0x10
c0019e6c:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019e76:	6a 00                	push   0x0
c0019e78:	68 cc 9d 01 c0       	push   0xc0019dcc
c0019e7d:	6a 07                	push   0x7
c0019e7f:	e8 9d 06 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019e84:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019e89:	83 c4 10             	add    esp,0x10
c0019e8c:	a8 80                	test   al,0x80
c0019e8e:	74 1c                	je     c0019eac <HalInitialiseCoprocessor()+0x43>
c0019e90:	c7 05 d0 ea 02 c0 f8 14 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00214f8
c0019e9a:	c7 05 cc ea 02 c0 00 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0021500
c0019ea4:	83 c4 0c             	add    esp,0xc
c0019ea7:	e9 5c 76 00 00       	jmp    c0021508 <sseInit>
c0019eac:	a8 10                	test   al,0x10
c0019eae:	74 1c                	je     c0019ecc <HalInitialiseCoprocessor()+0x63>
c0019eb0:	c7 05 d0 ea 02 c0 47 15 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021547
c0019eba:	c7 05 cc ea 02 c0 4e 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc002154e
c0019ec4:	83 c4 0c             	add    esp,0xc
c0019ec7:	e9 89 76 00 00       	jmp    c0021555 <x87Init>
c0019ecc:	c7 05 d0 ea 02 c0 fe 85 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00185fe
c0019ed6:	c7 05 cc ea 02 c0 fe 85 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc00185fe
c0019ee0:	0f 20 c0             	mov    eax,cr0
c0019ee3:	83 c8 04             	or     eax,0x4
c0019ee6:	0f 22 c0             	mov    cr0,eax
c0019ee9:	83 c4 0c             	add    esp,0xc
c0019eec:	c3                   	ret    

c0019eed <HalPanic(char const*)>:
c0019eed:	53                   	push   ebx
c0019eee:	83 ec 10             	sub    esp,0x10
c0019ef1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ef5:	fa                   	cli    
c0019ef6:	53                   	push   ebx
c0019ef7:	68 14 53 02 c0       	push   0xc0025314
c0019efc:	e8 63 d0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019f01:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019f06:	83 c4 10             	add    esp,0x10
c0019f09:	85 c0                	test   eax,eax
c0019f0b:	74 09                	je     c0019f16 <HalPanic(char const*)+0x29>
c0019f0d:	83 ec 0c             	sub    esp,0xc
c0019f10:	53                   	push   ebx
c0019f11:	ff d0                	call   eax
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019f1b:	85 c0                	test   eax,eax
c0019f1d:	0f 84 dc 00 00 00    	je     c0019fff <HalPanic(char const*)+0x112>
c0019f23:	52                   	push   edx
c0019f24:	6a 01                	push   0x1
c0019f26:	6a 0f                	push   0xf
c0019f28:	50                   	push   eax
c0019f29:	e8 f8 83 ff ff       	call   c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f2e:	59                   	pop    ecx
c0019f2f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f35:	e8 f8 85 ff ff       	call   c0012532 <VgaText::clearScreen()>
c0019f3a:	58                   	pop    eax
c0019f3b:	5a                   	pop    edx
c0019f3c:	68 55 43 02 c0       	push   0xc0024355
c0019f41:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f47:	e8 12 84 ff ff       	call   c001235e <VgaText::setTitle(char*)>
c0019f4c:	83 c4 0c             	add    esp,0xc
c0019f4f:	6a 01                	push   0x1
c0019f51:	6a 0f                	push   0xf
c0019f53:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f59:	e8 c8 83 ff ff       	call   c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f5e:	59                   	pop    ecx
c0019f5f:	58                   	pop    eax
c0019f60:	68 2d 53 02 c0       	push   0xc002532d
c0019f65:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f6b:	e8 c4 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019f70:	83 c4 0c             	add    esp,0xc
c0019f73:	6a 0f                	push   0xf
c0019f75:	6a 01                	push   0x1
c0019f77:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f7d:	e8 a4 83 ff ff       	call   c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f82:	58                   	pop    eax
c0019f83:	5a                   	pop    edx
c0019f84:	68 36 53 02 c0       	push   0xc0025336
c0019f89:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f8f:	e8 a0 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019f94:	83 c4 0c             	add    esp,0xc
c0019f97:	6a 01                	push   0x1
c0019f99:	6a 0f                	push   0xf
c0019f9b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fa1:	e8 80 83 ff ff       	call   c0012326 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fa6:	59                   	pop    ecx
c0019fa7:	58                   	pop    eax
c0019fa8:	68 7a 53 02 c0       	push   0xc002537a
c0019fad:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fb3:	e8 7c 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019fb8:	58                   	pop    eax
c0019fb9:	5a                   	pop    edx
c0019fba:	68 43 53 02 c0       	push   0xc0025343
c0019fbf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fc5:	e8 6a 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019fca:	59                   	pop    ecx
c0019fcb:	58                   	pop    eax
c0019fcc:	68 7d 53 02 c0       	push   0xc002537d
c0019fd1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fd7:	e8 58 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019fdc:	58                   	pop    eax
c0019fdd:	5a                   	pop    edx
c0019fde:	53                   	push   ebx
c0019fdf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fe5:	e8 4a 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019fea:	59                   	pop    ecx
c0019feb:	5b                   	pop    ebx
c0019fec:	68 7a 53 02 c0       	push   0xc002537a
c0019ff1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019ff7:	e8 38 88 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	eb fe                	jmp    c0019fff <HalPanic(char const*)+0x112>

c001a001 <HalQueryPerformanceCounter()>:
c001a001:	31 c0                	xor    eax,eax
c001a003:	31 d2                	xor    edx,edx
c001a005:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a00c:	75 02                	jne    c001a010 <HalQueryPerformanceCounter()+0xf>
c001a00e:	0f 31                	rdtsc  
c001a010:	c3                   	ret    

c001a011 <HalInitialise()>:
c001a011:	53                   	push   ebx
c001a012:	83 ec 08             	sub    esp,0x8
c001a015:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c001a01c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001a021:	83 e0 fe             	and    eax,0xfffffffe
c001a024:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001a029:	e8 d2 07 00 00       	call   c001a800 <picOpen()>
c001a02e:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a035:	74 0a                	je     c001a041 <HalInitialise()+0x30>
c001a037:	e8 14 07 00 00       	call   c001a750 <picDisable()>
c001a03c:	e8 c5 6a 00 00       	call   c0020b06 <apicOpen()>
c001a041:	bb 0f 00 00 00       	mov    ebx,0xf
c001a046:	50                   	push   eax
c001a047:	6a 00                	push   0x0
c001a049:	68 58 ec 00 c0       	push   0xc000ec58
c001a04e:	6a 00                	push   0x0
c001a050:	e8 cc 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a055:	83 c4 0c             	add    esp,0xc
c001a058:	6a 00                	push   0x0
c001a05a:	68 58 ec 00 c0       	push   0xc000ec58
c001a05f:	6a 01                	push   0x1
c001a061:	e8 bb 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a066:	83 c4 0c             	add    esp,0xc
c001a069:	6a 00                	push   0x0
c001a06b:	68 48 ec 00 c0       	push   0xc000ec48
c001a070:	6a 02                	push   0x2
c001a072:	e8 aa 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a077:	83 c4 0c             	add    esp,0xc
c001a07a:	6a 00                	push   0x0
c001a07c:	68 58 ec 00 c0       	push   0xc000ec58
c001a081:	6a 03                	push   0x3
c001a083:	e8 99 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a088:	83 c4 0c             	add    esp,0xc
c001a08b:	6a 00                	push   0x0
c001a08d:	68 58 ec 00 c0       	push   0xc000ec58
c001a092:	6a 04                	push   0x4
c001a094:	e8 88 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a099:	83 c4 0c             	add    esp,0xc
c001a09c:	6a 00                	push   0x0
c001a09e:	68 58 ec 00 c0       	push   0xc000ec58
c001a0a3:	6a 05                	push   0x5
c001a0a5:	e8 77 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0aa:	83 c4 0c             	add    esp,0xc
c001a0ad:	6a 00                	push   0x0
c001a0af:	68 8c ec 00 c0       	push   0xc000ec8c
c001a0b4:	6a 06                	push   0x6
c001a0b6:	e8 66 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0bb:	83 c4 0c             	add    esp,0xc
c001a0be:	6a 00                	push   0x0
c001a0c0:	68 e0 ec 00 c0       	push   0xc000ece0
c001a0c5:	6a 08                	push   0x8
c001a0c7:	e8 55 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0cc:	83 c4 0c             	add    esp,0xc
c001a0cf:	6a 00                	push   0x0
c001a0d1:	68 58 ec 00 c0       	push   0xc000ec58
c001a0d6:	6a 09                	push   0x9
c001a0d8:	e8 44 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0dd:	83 c4 0c             	add    esp,0xc
c001a0e0:	6a 00                	push   0x0
c001a0e2:	68 58 ec 00 c0       	push   0xc000ec58
c001a0e7:	6a 0a                	push   0xa
c001a0e9:	e8 33 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0ee:	83 c4 0c             	add    esp,0xc
c001a0f1:	6a 00                	push   0x0
c001a0f3:	68 58 ec 00 c0       	push   0xc000ec58
c001a0f8:	6a 0b                	push   0xb
c001a0fa:	e8 22 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0ff:	83 c4 0c             	add    esp,0xc
c001a102:	6a 00                	push   0x0
c001a104:	68 90 eb 00 c0       	push   0xc000eb90
c001a109:	6a 0d                	push   0xd
c001a10b:	e8 11 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a110:	83 c4 0c             	add    esp,0xc
c001a113:	6a 00                	push   0x0
c001a115:	68 e4 eb 00 c0       	push   0xc000ebe4
c001a11a:	6a 0e                	push   0xe
c001a11c:	e8 00 04 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	50                   	push   eax
c001a125:	6a 00                	push   0x0
c001a127:	68 58 ec 00 c0       	push   0xc000ec58
c001a12c:	53                   	push   ebx
c001a12d:	43                   	inc    ebx
c001a12e:	e8 ee 03 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	83 fb 1e             	cmp    ebx,0x1e
c001a139:	75 e9                	jne    c001a124 <HalInitialise()+0x113>
c001a13b:	50                   	push   eax
c001a13c:	6a 00                	push   0x0
c001a13e:	68 bf 21 01 c0       	push   0xc00121bf
c001a143:	6a 60                	push   0x60
c001a145:	e8 d7 03 00 00       	call   c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a14a:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a14f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a159:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a160:	e8 32 5b ff ff       	call   c000fc97 <malloc>
c001a165:	89 04 24             	mov    DWORD PTR [esp],eax
c001a168:	89 c3                	mov    ebx,eax
c001a16a:	e8 ff 0d 00 00       	call   c001af6e <RTC::RTC()>
c001a16f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a179:	5a                   	pop    edx
c001a17a:	59                   	pop    ecx
c001a17b:	53                   	push   ebx
c001a17c:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c001a182:	e8 75 f8 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001a187:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a189:	6a 00                	push   0x0
c001a18b:	6a 00                	push   0x0
c001a18d:	6a 00                	push   0x0
c001a18f:	53                   	push   ebx
c001a190:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a193:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a198:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a19e:	83 c4 28             	add    esp,0x28
c001a1a1:	5b                   	pop    ebx
c001a1a2:	c3                   	ret    

c001a1a3 <HalMakeBeep(int)>:
c001a1a3:	53                   	push   ebx
c001a1a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a1a8:	85 db                	test   ebx,ebx
c001a1aa:	75 07                	jne    c001a1b3 <HalMakeBeep(int)+0x10>
c001a1ac:	e4 61                	in     al,0x61
c001a1ae:	83 e0 fc             	and    eax,0xfffffffc
c001a1b1:	eb 26                	jmp    c001a1d9 <HalMakeBeep(int)+0x36>
c001a1b3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a1b8:	99                   	cdq    
c001a1b9:	f7 fb                	idiv   ebx
c001a1bb:	89 c1                	mov    ecx,eax
c001a1bd:	b0 b6                	mov    al,0xb6
c001a1bf:	e6 43                	out    0x43,al
c001a1c1:	88 c8                	mov    al,cl
c001a1c3:	e6 42                	out    0x42,al
c001a1c5:	89 c8                	mov    eax,ecx
c001a1c7:	c1 e8 08             	shr    eax,0x8
c001a1ca:	e6 42                	out    0x42,al
c001a1cc:	e4 61                	in     al,0x61
c001a1ce:	89 c2                	mov    edx,eax
c001a1d0:	83 ca 03             	or     edx,0x3
c001a1d3:	38 d0                	cmp    al,dl
c001a1d5:	74 04                	je     c001a1db <HalMakeBeep(int)+0x38>
c001a1d7:	88 d0                	mov    al,dl
c001a1d9:	e6 61                	out    0x61,al
c001a1db:	5b                   	pop    ebx
c001a1dc:	c3                   	ret    

c001a1dd <HalGetRand()>:
c001a1dd:	31 c0                	xor    eax,eax
c001a1df:	c3                   	ret    

c001a1e0 <HalEndOfInterrupt(int)>:
c001a1e0:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a1e7:	74 1d                	je     c001a206 <HalEndOfInterrupt(int)+0x26>
c001a1e9:	83 ec 18             	sub    esp,0x18
c001a1ec:	6a 1b                	push   0x1b
c001a1ee:	e8 0c f5 ff ff       	call   c00196ff <x86rdmsr(unsigned int)>
c001a1f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1f8:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a202:	83 c4 1c             	add    esp,0x1c
c001a205:	c3                   	ret    
c001a206:	e9 79 07 00 00       	jmp    c001a984 <picEOI(int)>

c001a20b <HalRestart()>:
c001a20b:	c3                   	ret    

c001a20c <HalShutdown()>:
c001a20c:	c3                   	ret    

c001a20d <HalSleep()>:
c001a20d:	c3                   	ret    

c001a20e <CPU::CPU()>:
c001a20e:	83 ec 0c             	sub    esp,0xc
c001a211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a215:	83 ec 08             	sub    esp,0x8
c001a218:	68 ef 50 02 c0       	push   0xc00250ef
c001a21d:	50                   	push   eax
c001a21e:	e8 3b f9 fe ff       	call   c0009b5e <Device::Device(char const*)>
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	ba 4c 54 02 c0       	mov    edx,0xc002544c
c001a22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a22f:	89 10                	mov    DWORD PTR [eax],edx
c001a231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a235:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a243:	05 64 01 00 00       	add    eax,0x164
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	50                   	push   eax
c001a24c:	e8 e3 4a ff ff       	call   c000ed34 <GDT::GDT()>
c001a251:	83 c4 10             	add    esp,0x10
c001a254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a258:	05 68 09 00 00       	add    eax,0x968
c001a25d:	83 ec 0c             	sub    esp,0xc
c001a260:	50                   	push   eax
c001a261:	e8 22 4d ff ff       	call   c000ef88 <IDT::IDT()>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a26d:	05 68 11 00 00       	add    eax,0x1168
c001a272:	83 ec 0c             	sub    esp,0xc
c001a275:	50                   	push   eax
c001a276:	e8 95 8a ff ff       	call   c0012d10 <TSS::TSS()>
c001a27b:	83 c4 10             	add    esp,0x10
c001a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a282:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a28c:	90                   	nop
c001a28d:	83 c4 0c             	add    esp,0xc
c001a290:	c3                   	ret    
c001a291:	90                   	nop

c001a292 <CPU::setupSMEP()>:
c001a292:	0f 20 e0             	mov    eax,cr4
c001a295:	0d 00 00 10 00       	or     eax,0x100000
c001a29a:	0f 22 e0             	mov    cr4,eax
c001a29d:	c3                   	ret    

c001a29e <CPU::setupUMIP()>:
c001a29e:	0f 20 e0             	mov    eax,cr4
c001a2a1:	80 cc 08             	or     ah,0x8
c001a2a4:	0f 22 e0             	mov    cr4,eax
c001a2a7:	c3                   	ret    

c001a2a8 <CPU::setupTSC()>:
c001a2a8:	0f 20 e0             	mov    eax,cr4
c001a2ab:	83 c8 04             	or     eax,0x4
c001a2ae:	0f 22 e0             	mov    cr4,eax
c001a2b1:	c3                   	ret    

c001a2b2 <CPU::setupLargePages()>:
c001a2b2:	0f 20 e0             	mov    eax,cr4
c001a2b5:	83 c8 10             	or     eax,0x10
c001a2b8:	0f 22 e0             	mov    cr4,eax
c001a2bb:	c3                   	ret    

c001a2bc <CPU::setupPAT()>:
c001a2bc:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c001a2c3:	74 28                	je     c001a2ed <CPU::setupPAT()+0x31>
c001a2c5:	53                   	push   ebx
c001a2c6:	83 ec 14             	sub    esp,0x14
c001a2c9:	68 77 02 00 00       	push   0x277
c001a2ce:	e8 2c f4 ff ff       	call   c00196ff <x86rdmsr(unsigned int)>
c001a2d3:	83 c4 0c             	add    esp,0xc
c001a2d6:	83 e2 f8             	and    edx,0xfffffff8
c001a2d9:	83 ca 01             	or     edx,0x1
c001a2dc:	52                   	push   edx
c001a2dd:	50                   	push   eax
c001a2de:	68 77 02 00 00       	push   0x277
c001a2e3:	e8 55 f4 ff ff       	call   c001973d <x86wrmsr(unsigned int, unsigned long long)>
c001a2e8:	83 c4 18             	add    esp,0x18
c001a2eb:	5b                   	pop    ebx
c001a2ec:	c3                   	ret    
c001a2ed:	c3                   	ret    

c001a2ee <CPU::setupMTRR()>:
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <CPU::setupGlobalPages()>:
c001a2f0:	0f 20 e0             	mov    eax,cr4
c001a2f3:	0c 80                	or     al,0x80
c001a2f5:	0f 22 e0             	mov    cr4,eax
c001a2f8:	c3                   	ret    
c001a2f9:	90                   	nop

c001a2fa <CPU::allowUsermodeDataAccess()>:
c001a2fa:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a301:	74 03                	je     c001a306 <CPU::allowUsermodeDataAccess()+0xc>
c001a303:	0f 01 cb             	stac   
c001a306:	c3                   	ret    
c001a307:	90                   	nop

c001a308 <CPU::prohibitUsermodeDataAccess()>:
c001a308:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a30f:	74 03                	je     c001a314 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a311:	0f 01 ca             	clac   
c001a314:	c3                   	ret    
c001a315:	90                   	nop

c001a316 <CPU::setupSMAP()>:
c001a316:	0f 20 e0             	mov    eax,cr4
c001a319:	0d 00 00 20 00       	or     eax,0x200000
c001a31e:	0f 22 e0             	mov    cr4,eax
c001a321:	eb e5                	jmp    c001a308 <CPU::prohibitUsermodeDataAccess()>
c001a323:	90                   	nop

c001a324 <CPU::setupFeatures()>:
c001a324:	53                   	push   ebx
c001a325:	83 ec 08             	sub    esp,0x8
c001a328:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a32c:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c001a333:	74 18                	je     c001a34d <CPU::setupFeatures()+0x29>
c001a335:	83 ec 0c             	sub    esp,0xc
c001a338:	68 88 53 02 c0       	push   0xc0025388
c001a33d:	e8 22 cc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a345:	e8 54 ff ff ff       	call   c001a29e <CPU::setupUMIP()>
c001a34a:	83 c4 10             	add    esp,0x10
c001a34d:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a354:	74 18                	je     c001a36e <CPU::setupFeatures()+0x4a>
c001a356:	83 ec 0c             	sub    esp,0xc
c001a359:	68 92 53 02 c0       	push   0xc0025392
c001a35e:	e8 01 cc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a363:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a366:	e8 3d ff ff ff       	call   c001a2a8 <CPU::setupTSC()>
c001a36b:	83 c4 10             	add    esp,0x10
c001a36e:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c001a375:	74 18                	je     c001a38f <CPU::setupFeatures()+0x6b>
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	68 9b 53 02 c0       	push   0xc002539b
c001a37f:	e8 e0 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a387:	e8 26 ff ff ff       	call   c001a2b2 <CPU::setupLargePages()>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c001a396:	74 18                	je     c001a3b0 <CPU::setupFeatures()+0x8c>
c001a398:	83 ec 0c             	sub    esp,0xc
c001a39b:	68 a4 53 02 c0       	push   0xc00253a4
c001a3a0:	e8 bf cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3a8:	e8 43 ff ff ff       	call   c001a2f0 <CPU::setupGlobalPages()>
c001a3ad:	83 c4 10             	add    esp,0x10
c001a3b0:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a3b7:	74 18                	je     c001a3d1 <CPU::setupFeatures()+0xad>
c001a3b9:	83 ec 0c             	sub    esp,0xc
c001a3bc:	68 b6 53 02 c0       	push   0xc00253b6
c001a3c1:	e8 9e cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c9:	e8 ee fe ff ff       	call   c001a2bc <CPU::setupPAT()>
c001a3ce:	83 c4 10             	add    esp,0x10
c001a3d1:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a3d8:	74 11                	je     c001a3eb <CPU::setupFeatures()+0xc7>
c001a3da:	c7 44 24 10 bf 53 02 c0 	mov    DWORD PTR [esp+0x10],0xc00253bf
c001a3e2:	83 c4 08             	add    esp,0x8
c001a3e5:	5b                   	pop    ebx
c001a3e6:	e9 79 cb fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3eb:	83 c4 08             	add    esp,0x8
c001a3ee:	5b                   	pop    ebx
c001a3ef:	c3                   	ret    

c001a3f0 <CPU::open(int, int, void*)>:
c001a3f0:	55                   	push   ebp
c001a3f1:	57                   	push   edi
c001a3f2:	56                   	push   esi
c001a3f3:	53                   	push   ebx
c001a3f4:	83 ec 18             	sub    esp,0x18
c001a3f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a3fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a3ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a403:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a409:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a40f:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a415:	50                   	push   eax
c001a416:	e8 7b 49 ff ff       	call   c000ed96 <GDT::setup()>
c001a41b:	83 c4 0c             	add    esp,0xc
c001a41e:	6a 00                	push   0x0
c001a420:	68 ef be ad de       	push   0xdeadbeef
c001a425:	55                   	push   ebp
c001a426:	e8 29 89 ff ff       	call   c0012d54 <TSS::setup(unsigned long, unsigned long)>
c001a42b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a42e:	e8 01 89 ff ff       	call   c0012d34 <TSS::flush()>
c001a433:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a439:	89 04 24             	mov    DWORD PTR [esp],eax
c001a43c:	e8 bd 4b ff ff       	call   c000effe <IDT::setup()>
c001a441:	b8 00 04 00 00       	mov    eax,0x400
c001a446:	0f 23 f8             	mov    dr7,eax
c001a449:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a453:	e8 7a 5d ff ff       	call   c00101d2 <Phys::allocatePage()>
c001a458:	83 c4 10             	add    esp,0x10
c001a45b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a461:	85 f6                	test   esi,esi
c001a463:	89 38                	mov    DWORD PTR [eax],edi
c001a465:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a46b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a46e:	74 10                	je     c001a480 <CPU::open(int, int, void*)+0x90>
c001a470:	50                   	push   eax
c001a471:	50                   	push   eax
c001a472:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a478:	56                   	push   esi
c001a479:	e8 90 92 ff ff       	call   c001370e <VAS::setCPUSpecific(unsigned long)>
c001a47e:	eb 0d                	jmp    c001a48d <CPU::open(int, int, void*)+0x9d>
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	68 c9 53 02 c0       	push   0xc00253c9
c001a488:	e8 51 5b ff ff       	call   c000ffde <KePanic(char const*)>
c001a48d:	83 c4 10             	add    esp,0x10
c001a490:	83 ec 0c             	sub    esp,0xc
c001a493:	68 d7 53 02 c0       	push   0xc00253d7
c001a498:	e8 c2 2d ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001a49d:	e8 6f fb ff ff       	call   c001a011 <HalInitialise()>
c001a4a2:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a4a7:	83 e0 10             	and    eax,0x10
c001a4aa:	83 f8 01             	cmp    eax,0x1
c001a4ad:	19 c0                	sbb    eax,eax
c001a4af:	83 e0 46             	and    eax,0x46
c001a4b2:	83 c0 1e             	add    eax,0x1e
c001a4b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4b8:	e8 d8 0b ff ff       	call   c000b095 <setupTimer(int)>
c001a4bd:	83 c4 10             	add    esp,0x10
c001a4c0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a4c6:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a4cd:	74 0c                	je     c001a4db <CPU::open(int, int, void*)+0xeb>
c001a4cf:	83 ec 0c             	sub    esp,0xc
c001a4d2:	53                   	push   ebx
c001a4d3:	e8 4c fe ff ff       	call   c001a324 <CPU::setupFeatures()>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	83 c4 0c             	add    esp,0xc
c001a4de:	31 c0                	xor    eax,eax
c001a4e0:	5b                   	pop    ebx
c001a4e1:	5e                   	pop    esi
c001a4e2:	5f                   	pop    edi
c001a4e3:	5d                   	pop    ebp
c001a4e4:	c3                   	ret    

c001a4e5 <convertLegacyIRQNumber(int)>:
c001a4e5:	83 ec 0c             	sub    esp,0xc
c001a4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ec:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a4f3:	74 0c                	je     c001a501 <convertLegacyIRQNumber(int)+0x1c>
c001a4f5:	83 f8 0f             	cmp    eax,0xf
c001a4f8:	7f 0b                	jg     c001a505 <convertLegacyIRQNumber(int)+0x20>
c001a4fa:	0f b6 80 c8 5f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda038]
c001a501:	83 c4 0c             	add    esp,0xc
c001a504:	c3                   	ret    
c001a505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	68 70 54 02 c0       	push   0xc0025470
c001a511:	e8 c8 5a ff ff       	call   c000ffde <KePanic(char const*)>
c001a516:	83 c4 10             	add    esp,0x10
c001a519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51d:	83 c4 0c             	add    esp,0xc
c001a520:	c3                   	ret    

c001a521 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a521:	56                   	push   esi
c001a522:	31 c0                	xor    eax,eax
c001a524:	53                   	push   ebx
c001a525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a529:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a52d:	89 ca                	mov    edx,ecx
c001a52f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a533:	c1 e2 04             	shl    edx,0x4
c001a536:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a53e:	74 17                	je     c001a557 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a540:	83 c0 01             	add    eax,0x1
c001a543:	83 f8 04             	cmp    eax,0x4
c001a546:	75 ee                	jne    c001a536 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a548:	c7 44 24 0c d1 54 02 c0 	mov    DWORD PTR [esp+0xc],0xc00254d1
c001a550:	5b                   	pop    ebx
c001a551:	5e                   	pop    esi
c001a552:	e9 87 5a ff ff       	jmp    c000ffde <KePanic(char const*)>
c001a557:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a55a:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a561:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a568:	5b                   	pop    ebx
c001a569:	5e                   	pop    esi
c001a56a:	c3                   	ret    

c001a56b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a56b:	57                   	push   edi
c001a56c:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a573:	56                   	push   esi
c001a574:	53                   	push   ebx
c001a575:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a57d:	74 54                	je     c001a5d3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001a57f:	89 c7                	mov    edi,eax
c001a581:	84 c0                	test   al,al
c001a583:	74 1d                	je     c001a5a2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a585:	83 fe 0f             	cmp    esi,0xf
c001a588:	0f 8f d5 00 00 00    	jg     c001a663 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001a58e:	0f b6 b6 c8 5f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda038]
c001a595:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a59d:	d1 ef                	shr    edi,1
c001a59f:	83 e7 01             	and    edi,0x1
c001a5a2:	83 ec 08             	sub    esp,0x8
c001a5a5:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a5aa:	31 db                	xor    ebx,ebx
c001a5ac:	50                   	push   eax
c001a5ad:	68 de 54 02 c0       	push   0xc00254de
c001a5b2:	e8 ad c9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a5b7:	83 c4 10             	add    esp,0x10
c001a5ba:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a5bf:	85 c0                	test   eax,eax
c001a5c1:	7f 55                	jg     c001a618 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a5c3:	83 ec 0c             	sub    esp,0xc
c001a5c6:	68 f5 54 02 c0       	push   0xc00254f5
c001a5cb:	e8 0e 5a ff ff       	call   c000ffde <KePanic(char const*)>
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	8d 7e 20             	lea    edi,[esi+0x20]
c001a5d6:	89 f8                	mov    eax,edi
c001a5d8:	31 d2                	xor    edx,edx
c001a5da:	c1 e0 04             	shl    eax,0x4
c001a5dd:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a5e4:	85 c9                	test   ecx,ecx
c001a5e6:	0f 84 8e 00 00 00    	je     c001a67a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001a5ec:	83 c2 01             	add    edx,0x1
c001a5ef:	83 fa 04             	cmp    edx,0x4
c001a5f2:	75 e9                	jne    c001a5dd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	68 ac 54 02 c0       	push   0xc00254ac
c001a5fc:	e8 dd 59 ff ff       	call   c000ffde <KePanic(char const*)>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a609:	5b                   	pop    ebx
c001a60a:	5e                   	pop    esi
c001a60b:	5f                   	pop    edi
c001a60c:	c3                   	ret    
c001a60d:	83 c3 01             	add    ebx,0x1
c001a610:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a616:	7e ab                	jle    c001a5c3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001a618:	83 ec 08             	sub    esp,0x8
c001a61b:	8b 04 9d 80 f4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b80]
c001a622:	56                   	push   esi
c001a623:	50                   	push   eax
c001a624:	e8 69 66 00 00       	call   c0020c92 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a629:	83 c4 10             	add    esp,0x10
c001a62c:	84 c0                	test   al,al
c001a62e:	74 dd                	je     c001a60d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001a630:	83 ec 04             	sub    esp,0x4
c001a633:	89 f8                	mov    eax,edi
c001a635:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a63c:	0f b6 f8             	movzx  edi,al
c001a63f:	57                   	push   edi
c001a640:	8d 7e 20             	lea    edi,[esi+0x20]
c001a643:	6a 00                	push   0x0
c001a645:	89 f8                	mov    eax,edi
c001a647:	0f b6 c0             	movzx  eax,al
c001a64a:	50                   	push   eax
c001a64b:	89 f0                	mov    eax,esi
c001a64d:	6a 00                	push   0x0
c001a64f:	0f b6 c0             	movzx  eax,al
c001a652:	6a 00                	push   0x0
c001a654:	50                   	push   eax
c001a655:	53                   	push   ebx
c001a656:	e8 a3 67 00 00       	call   c0020dfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a65b:	83 c4 20             	add    esp,0x20
c001a65e:	e9 73 ff ff ff       	jmp    c001a5d6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001a663:	83 ec 0c             	sub    esp,0xc
c001a666:	31 ff                	xor    edi,edi
c001a668:	68 70 54 02 c0       	push   0xc0025470
c001a66d:	e8 6c 59 ff ff       	call   c000ffde <KePanic(char const*)>
c001a672:	83 c4 10             	add    esp,0x10
c001a675:	e9 28 ff ff ff       	jmp    c001a5a2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a67a:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a67d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a681:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a68c:	5b                   	pop    ebx
c001a68d:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a694:	89 f0                	mov    eax,esi
c001a696:	5e                   	pop    esi
c001a697:	5f                   	pop    edi
c001a698:	c3                   	ret    

c001a699 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a69d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a6a1:	c1 e0 04             	shl    eax,0x4
c001a6a4:	8d 50 10             	lea    edx,[eax+0x10]
c001a6a7:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a6ad:	74 08                	je     c001a6b7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a6af:	83 c0 04             	add    eax,0x4
c001a6b2:	39 d0                	cmp    eax,edx
c001a6b4:	75 f1                	jne    c001a6a7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a6b6:	c3                   	ret    
c001a6b7:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a6c1:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a6cb:	eb e2                	jmp    c001a6af <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a6cd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a6cd:	53                   	push   ebx
c001a6ce:	83 ec 08             	sub    esp,0x8
c001a6d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a6da:	74 09                	je     c001a6e5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a6dc:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a6e3:	75 37                	jne    c001a71c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001a6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6e9:	83 c0 20             	add    eax,0x20
c001a6ec:	c1 e0 04             	shl    eax,0x4
c001a6ef:	8d 50 10             	lea    edx,[eax+0x10]
c001a6f2:	39 98 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ebx
c001a6f8:	74 0c                	je     c001a706 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001a6fa:	83 c0 04             	add    eax,0x4
c001a6fd:	39 d0                	cmp    eax,edx
c001a6ff:	75 f1                	jne    c001a6f2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001a701:	83 c4 08             	add    esp,0x8
c001a704:	5b                   	pop    ebx
c001a705:	c3                   	ret    
c001a706:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a710:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a71a:	eb de                	jmp    c001a6fa <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001a71c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001a721:	7f 11                	jg     c001a734 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a727:	0f b6 80 c8 5f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda038]
c001a72e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a732:	eb b1                	jmp    c001a6e5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a734:	83 ec 0c             	sub    esp,0xc
c001a737:	68 02 55 02 c0       	push   0xc0025502
c001a73c:	e8 9d 58 ff ff       	call   c000ffde <KePanic(char const*)>
c001a741:	83 c4 10             	add    esp,0x10
c001a744:	eb 9f                	jmp    c001a6e5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a746:	66 90                	xchg   ax,ax

c001a748 <picIoWait()>:
c001a748:	eb 00                	jmp    c001a74a <picIoWait()+0x2>
c001a74a:	eb 00                	jmp    c001a74c <picIoWait()+0x4>
c001a74c:	90                   	nop
c001a74d:	c3                   	ret    
c001a74e:	66 90                	xchg   ax,ax

c001a750 <picDisable()>:
c001a750:	83 ec 10             	sub    esp,0x10
c001a753:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a75a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a75f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a763:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a768:	ee                   	out    dx,al
c001a769:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a770:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a775:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a779:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a77e:	ee                   	out    dx,al
c001a77f:	90                   	nop
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	c3                   	ret    

c001a784 <picGetIRQReg(int)>:
c001a784:	83 ec 10             	sub    esp,0x10
c001a787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a78b:	0f b6 c0             	movzx  eax,al
c001a78e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a795:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a799:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a79d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a7a2:	ee                   	out    dx,al
c001a7a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7a7:	0f b6 c0             	movzx  eax,al
c001a7aa:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a7b1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a7b5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a7b9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a7be:	ee                   	out    dx,al
c001a7bf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a7c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a7cb:	89 c2                	mov    edx,eax
c001a7cd:	ec                   	in     al,dx
c001a7ce:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a7d2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a7d6:	0f b6 c0             	movzx  eax,al
c001a7d9:	c1 e0 08             	shl    eax,0x8
c001a7dc:	89 c1                	mov    ecx,eax
c001a7de:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a7e5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a7ea:	89 c2                	mov    edx,eax
c001a7ec:	ec                   	in     al,dx
c001a7ed:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a7f1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a7f5:	0f b6 c0             	movzx  eax,al
c001a7f8:	09 c8                	or     eax,ecx
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	c3                   	ret    
c001a7fe:	66 90                	xchg   ax,ax

c001a800 <picOpen()>:
c001a800:	83 ec 50             	sub    esp,0x50
c001a803:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a80a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a80f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a813:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a817:	ee                   	out    dx,al
c001a818:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a81f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a824:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a828:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a82c:	ee                   	out    dx,al
c001a82d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a835:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a83d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a848:	89 c2                	mov    edx,eax
c001a84a:	ec                   	in     al,dx
c001a84b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a84f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a853:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a857:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a85e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a862:	89 c2                	mov    edx,eax
c001a864:	ec                   	in     al,dx
c001a865:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a869:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a86d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a871:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a878:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a87d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a881:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a885:	ee                   	out    dx,al
c001a886:	e8 bd fe ff ff       	call   c001a748 <picIoWait()>
c001a88b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a892:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a897:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a89b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a89f:	ee                   	out    dx,al
c001a8a0:	e8 a3 fe ff ff       	call   c001a748 <picIoWait()>
c001a8a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8a9:	0f b6 c0             	movzx  eax,al
c001a8ac:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a8b3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a8b7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a8bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a8bf:	ee                   	out    dx,al
c001a8c0:	e8 83 fe ff ff       	call   c001a748 <picIoWait()>
c001a8c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a8c9:	0f b6 c0             	movzx  eax,al
c001a8cc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a8d3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a8d7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a8db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a8df:	ee                   	out    dx,al
c001a8e0:	e8 63 fe ff ff       	call   c001a748 <picIoWait()>
c001a8e5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a8ec:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a8f1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a8f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a8f9:	ee                   	out    dx,al
c001a8fa:	e8 49 fe ff ff       	call   c001a748 <picIoWait()>
c001a8ff:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a906:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a90b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a90f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a913:	ee                   	out    dx,al
c001a914:	e8 2f fe ff ff       	call   c001a748 <picIoWait()>
c001a919:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a920:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a925:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a929:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a92d:	ee                   	out    dx,al
c001a92e:	e8 15 fe ff ff       	call   c001a748 <picIoWait()>
c001a933:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a93a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a93f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a943:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a947:	ee                   	out    dx,al
c001a948:	e8 fb fd ff ff       	call   c001a748 <picIoWait()>
c001a94d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a952:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a959:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a95d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a961:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a965:	ee                   	out    dx,al
c001a966:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a96b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a972:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a976:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a97a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a97e:	ee                   	out    dx,al
c001a97f:	90                   	nop
c001a980:	83 c4 50             	add    esp,0x50
c001a983:	c3                   	ret    

c001a984 <picEOI(int)>:
c001a984:	83 ec 10             	sub    esp,0x10
c001a987:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a98c:	75 1e                	jne    c001a9ac <picEOI(int)+0x28>
c001a98e:	6a 0b                	push   0xb
c001a990:	e8 ef fd ff ff       	call   c001a784 <picGetIRQReg(int)>
c001a995:	83 c4 04             	add    esp,0x4
c001a998:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a99d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a9a2:	25 80 00 00 00       	and    eax,0x80
c001a9a7:	74 73                	je     c001aa1c <picEOI(int)+0x98>
c001a9a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9ac:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a9b1:	75 31                	jne    c001a9e4 <picEOI(int)+0x60>
c001a9b3:	6a 0b                	push   0xb
c001a9b5:	e8 ca fd ff ff       	call   c001a784 <picGetIRQReg(int)>
c001a9ba:	83 c4 04             	add    esp,0x4
c001a9bd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a9c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9c6:	98                   	cwde   
c001a9c7:	85 c0                	test   eax,eax
c001a9c9:	78 19                	js     c001a9e4 <picEOI(int)+0x60>
c001a9cb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a9d2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a9d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a9db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a9e0:	ee                   	out    dx,al
c001a9e1:	eb 3d                	jmp    c001aa20 <picEOI(int)+0x9c>
c001a9e3:	90                   	nop
c001a9e4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a9e9:	7e 19                	jle    c001aa04 <picEOI(int)+0x80>
c001a9eb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a9f2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a9f7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a9fb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001aa00:	ee                   	out    dx,al
c001aa01:	8d 76 00             	lea    esi,[esi+0x0]
c001aa04:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001aa0b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001aa10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aa14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aa19:	ee                   	out    dx,al
c001aa1a:	eb 04                	jmp    c001aa20 <picEOI(int)+0x9c>
c001aa1c:	90                   	nop
c001aa1d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	c3                   	ret    

c001aa24 <RTC::open(int, int, void*)>:
c001aa24:	31 c0                	xor    eax,eax
c001aa26:	c3                   	ret    
c001aa27:	90                   	nop

c001aa28 <RTC::close(int, int, void*)>:
c001aa28:	31 c0                	xor    eax,eax
c001aa2a:	c3                   	ret    
c001aa2b:	90                   	nop

c001aa2c <RTC::timeInSecondsUTC()>:
c001aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aa36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa3c:	c3                   	ret    
c001aa3d:	90                   	nop

c001aa3e <RTC::timeInDatetimeUTC()>:
c001aa3e:	53                   	push   ebx
c001aa3f:	83 ec 14             	sub    esp,0x14
c001aa42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa4a:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa4c:	50                   	push   eax
c001aa4d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001aa50:	83 c4 0c             	add    esp,0xc
c001aa53:	52                   	push   edx
c001aa54:	50                   	push   eax
c001aa55:	53                   	push   ebx
c001aa56:	e8 97 eb fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001aa5b:	89 d8                	mov    eax,ebx
c001aa5d:	83 c4 14             	add    esp,0x14
c001aa60:	5b                   	pop    ebx
c001aa61:	c2 04 00             	ret    0x4

c001aa64 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001aa64:	56                   	push   esi
c001aa65:	53                   	push   ebx
c001aa66:	83 ec 14             	sub    esp,0x14
c001aa69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa6f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001aa72:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa76:	52                   	push   edx
c001aa77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa7f:	50                   	push   eax
c001aa80:	e8 6d eb fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001aa85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa91:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001aa95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa99:	89 f0                	mov    eax,esi
c001aa9b:	83 c4 20             	add    esp,0x20
c001aa9e:	5b                   	pop    ebx
c001aa9f:	5e                   	pop    esi
c001aaa0:	ff e0                	jmp    eax

c001aaa2 <RTC::~RTC()>:
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	ba 2c 55 02 c0       	mov    edx,0xc002552c
c001aaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaae:	89 10                	mov    DWORD PTR [eax],edx
c001aab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	50                   	push   eax
c001aab8:	e8 d7 e5 fe ff       	call   c0009094 <Clock::~Clock()>
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	90                   	nop
c001aac1:	83 c4 0c             	add    esp,0xc
c001aac4:	c3                   	ret    
c001aac5:	90                   	nop

c001aac6 <RTC::~RTC()>:
c001aac6:	83 ec 0c             	sub    esp,0xc
c001aac9:	83 ec 0c             	sub    esp,0xc
c001aacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aad0:	e8 cd ff ff ff       	call   c001aaa2 <RTC::~RTC()>
c001aad5:	83 c4 10             	add    esp,0x10
c001aad8:	83 ec 08             	sub    esp,0x8
c001aadb:	68 60 01 00 00       	push   0x160
c001aae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aae4:	e8 36 28 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	83 c4 0c             	add    esp,0xc
c001aaef:	c3                   	ret    

c001aaf0 <RTC::get_update_in_progress_flag()>:
c001aaf0:	83 ec 18             	sub    esp,0x18
c001aaf3:	6a 0a                	push   0xa
c001aaf5:	e8 09 db ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001aafa:	83 c4 1c             	add    esp,0x1c
c001aafd:	0f b6 c0             	movzx  eax,al
c001ab00:	c1 e8 07             	shr    eax,0x7
c001ab03:	c3                   	ret    

c001ab04 <RTC::completeRTCRefresh()>:
c001ab04:	55                   	push   ebp
c001ab05:	57                   	push   edi
c001ab06:	56                   	push   esi
c001ab07:	53                   	push   ebx
c001ab08:	83 ec 3c             	sub    esp,0x3c
c001ab0b:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001ab11:	83 ec 0c             	sub    esp,0xc
c001ab14:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ab18:	e8 d3 ff ff ff       	call   c001aaf0 <RTC::get_update_in_progress_flag()>
c001ab1d:	83 c4 10             	add    esp,0x10
c001ab20:	84 c0                	test   al,al
c001ab22:	74 0e                	je     c001ab32 <RTC::completeRTCRefresh()+0x2e>
c001ab24:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ab2a:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001ab30:	73 df                	jae    c001ab11 <RTC::completeRTCRefresh()+0xd>
c001ab32:	83 ec 0c             	sub    esp,0xc
c001ab35:	6a 00                	push   0x0
c001ab37:	e8 c7 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab3c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ab43:	89 c5                	mov    ebp,eax
c001ab45:	e8 b9 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab4a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ab51:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ab55:	e8 a9 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab5a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ab61:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001ab65:	e8 99 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab6a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ab71:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ab75:	e8 89 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab7a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001ab81:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab85:	e8 79 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ab8a:	0f b6 c0             	movzx  eax,al
c001ab8d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ab91:	83 c4 10             	add    esp,0x10
c001ab94:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001ab9a:	83 ec 0c             	sub    esp,0xc
c001ab9d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aba1:	e8 4a ff ff ff       	call   c001aaf0 <RTC::get_update_in_progress_flag()>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	84 c0                	test   al,al
c001abab:	74 0e                	je     c001abbb <RTC::completeRTCRefresh()+0xb7>
c001abad:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001abb3:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001abb9:	73 df                	jae    c001ab9a <RTC::completeRTCRefresh()+0x96>
c001abbb:	83 ec 0c             	sub    esp,0xc
c001abbe:	6a 00                	push   0x0
c001abc0:	e8 3e da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001abc5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001abcc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001abd0:	e8 2e da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001abd5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001abdc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001abe0:	e8 1e da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001abe5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001abec:	88 c3                	mov    bl,al
c001abee:	e8 10 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001abf3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001abfa:	89 c6                	mov    esi,eax
c001abfc:	e8 02 da ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ac01:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001ac08:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ac0c:	e8 f2 d9 ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ac11:	89 e9                	mov    ecx,ebp
c001ac13:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ac17:	0f b6 f8             	movzx  edi,al
c001ac1a:	83 c4 10             	add    esp,0x10
c001ac1d:	0f b6 eb             	movzx  ebp,bl
c001ac20:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001ac24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac29:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ac2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ac32:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ac36:	0f 94 c0             	sete   al
c001ac39:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac3d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001ac41:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001ac46:	0f 94 c2             	sete   dl
c001ac49:	21 d0                	and    eax,edx
c001ac4b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001ac4f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001ac53:	0f 94 c2             	sete   dl
c001ac56:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac5a:	21 c2                	and    edx,eax
c001ac5c:	89 f0                	mov    eax,esi
c001ac5e:	0f b6 c0             	movzx  eax,al
c001ac61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac65:	89 f0                	mov    eax,esi
c001ac67:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001ac6b:	0f 94 c0             	sete   al
c001ac6e:	21 d0                	and    eax,edx
c001ac70:	31 d2                	xor    edx,edx
c001ac72:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001ac76:	0f 94 c2             	sete   dl
c001ac79:	85 c2                	test   edx,eax
c001ac7b:	75 27                	jne    c001aca4 <RTC::completeRTCRefresh()+0x1a0>
c001ac7d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ac81:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001ac85:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001ac89:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001ac8d:	89 f0                	mov    eax,esi
c001ac8f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001ac93:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001ac97:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac9b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ac9f:	e9 f0 fe ff ff       	jmp    c001ab94 <RTC::completeRTCRefresh()+0x90>
c001aca4:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001aca8:	75 d3                	jne    c001ac7d <RTC::completeRTCRefresh()+0x179>
c001acaa:	83 ec 0c             	sub    esp,0xc
c001acad:	6a 0b                	push   0xb
c001acaf:	e8 4f d9 ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001acb4:	83 c4 10             	add    esp,0x10
c001acb7:	a8 04                	test   al,0x4
c001acb9:	75 7a                	jne    c001ad35 <RTC::completeRTCRefresh()+0x231>
c001acbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001acbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001acc3:	83 e1 0f             	and    ecx,0xf
c001acc6:	c1 ea 04             	shr    edx,0x4
c001acc9:	83 e6 0f             	and    esi,0xf
c001accc:	6b d2 0a             	imul   edx,edx,0xa
c001accf:	c1 ef 04             	shr    edi,0x4
c001acd2:	01 d1                	add    ecx,edx
c001acd4:	6b ff 0a             	imul   edi,edi,0xa
c001acd7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001acdb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001acdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ace3:	c1 ea 04             	shr    edx,0x4
c001ace6:	83 e1 0f             	and    ecx,0xf
c001ace9:	6b d2 0a             	imul   edx,edx,0xa
c001acec:	01 d1                	add    ecx,edx
c001acee:	89 ea                	mov    edx,ebp
c001acf0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001acf4:	c1 ea 04             	shr    edx,0x4
c001acf7:	89 d9                	mov    ecx,ebx
c001acf9:	83 e2 07             	and    edx,0x7
c001acfc:	83 e1 0f             	and    ecx,0xf
c001acff:	6b d2 0a             	imul   edx,edx,0xa
c001ad02:	83 e3 80             	and    ebx,0xffffff80
c001ad05:	01 d1                	add    ecx,edx
c001ad07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad0b:	09 cb                	or     ebx,ecx
c001ad0d:	c1 ea 04             	shr    edx,0x4
c001ad10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad14:	6b d2 0a             	imul   edx,edx,0xa
c001ad17:	83 e1 0f             	and    ecx,0xf
c001ad1a:	01 d6                	add    esi,edx
c001ad1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad20:	c1 ea 04             	shr    edx,0x4
c001ad23:	6b d2 0a             	imul   edx,edx,0xa
c001ad26:	01 d1                	add    ecx,edx
c001ad28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad2c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001ad30:	83 e2 0f             	and    edx,0xf
c001ad33:	01 d7                	add    edi,edx
c001ad35:	a8 02                	test   al,0x2
c001ad37:	75 15                	jne    c001ad4e <RTC::completeRTCRefresh()+0x24a>
c001ad39:	f6 c3 80             	test   bl,0x80
c001ad3c:	74 10                	je     c001ad4e <RTC::completeRTCRefresh()+0x24a>
c001ad3e:	83 e3 7f             	and    ebx,0x7f
c001ad41:	b9 18 00 00 00       	mov    ecx,0x18
c001ad46:	8d 43 0c             	lea    eax,[ebx+0xc]
c001ad49:	99                   	cdq    
c001ad4a:	f7 f9                	idiv   ecx
c001ad4c:	88 d3                	mov    bl,dl
c001ad4e:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001ad54:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001ad5a:	77 06                	ja     c001ad62 <RTC::completeRTCRefresh()+0x25e>
c001ad5c:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001ad62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ad67:	31 c9                	xor    ecx,ecx
c001ad69:	c1 e0 10             	shl    eax,0x10
c001ad6c:	89 cf                	mov    edi,ecx
c001ad6e:	c1 e5 10             	shl    ebp,0x10
c001ad71:	31 d2                	xor    edx,edx
c001ad73:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001ad79:	09 c7                	or     edi,eax
c001ad7b:	89 f0                	mov    eax,esi
c001ad7d:	89 f9                	mov    ecx,edi
c001ad7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad83:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001ad87:	88 c2                	mov    dl,al
c001ad89:	88 d9                	mov    cl,bl
c001ad8b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001ad8f:	0f b7 c2             	movzx  eax,dx
c001ad92:	09 e8                	or     eax,ebp
c001ad94:	89 c2                	mov    edx,eax
c001ad96:	50                   	push   eax
c001ad97:	50                   	push   eax
c001ad98:	51                   	push   ecx
c001ad99:	52                   	push   edx
c001ad9a:	e8 45 e4 fe ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c001ad9f:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001ada3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001ada9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001adaf:	83 c4 4c             	add    esp,0x4c
c001adb2:	5b                   	pop    ebx
c001adb3:	5e                   	pop    esi
c001adb4:	5f                   	pop    edi
c001adb5:	5d                   	pop    ebp
c001adb6:	c3                   	ret    
c001adb7:	90                   	nop

c001adb8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001adb8:	55                   	push   ebp
c001adb9:	57                   	push   edi
c001adba:	56                   	push   esi
c001adbb:	53                   	push   ebx
c001adbc:	83 ec 34             	sub    esp,0x34
c001adbf:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001adc3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adc7:	6a 00                	push   0x0
c001adc9:	89 fb                	mov    ebx,edi
c001adcb:	6a 00                	push   0x0
c001adcd:	e8 85 d8 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001add2:	5d                   	pop    ebp
c001add3:	58                   	pop    eax
c001add4:	6a 00                	push   0x0
c001add6:	6a 02                	push   0x2
c001add8:	e8 7a d8 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001addd:	31 d2                	xor    edx,edx
c001addf:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001ade6:	89 f9                	mov    ecx,edi
c001ade8:	89 f8                	mov    eax,edi
c001adea:	c1 e9 10             	shr    ecx,0x10
c001aded:	0f b6 c4             	movzx  eax,ah
c001adf0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001adf4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001adf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adfc:	b9 64 00 00 00       	mov    ecx,0x64
c001ae01:	89 f0                	mov    eax,esi
c001ae03:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ae07:	89 f0                	mov    eax,esi
c001ae09:	0f b6 c4             	movzx  eax,ah
c001ae0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae10:	89 f0                	mov    eax,esi
c001ae12:	c1 e8 10             	shr    eax,0x10
c001ae15:	f7 f1                	div    ecx
c001ae17:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae1b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ae1f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ae23:	e8 db d7 ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	89 c5                	mov    ebp,eax
c001ae2d:	a8 04                	test   al,0x4
c001ae2f:	75 6e                	jne    c001ae9f <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001ae31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae35:	31 d2                	xor    edx,edx
c001ae37:	0f b6 c1             	movzx  eax,cl
c001ae3a:	b9 0a 00 00 00       	mov    ecx,0xa
c001ae3f:	f7 f1                	div    ecx
c001ae41:	c1 e0 04             	shl    eax,0x4
c001ae44:	09 d0                	or     eax,edx
c001ae46:	31 d2                	xor    edx,edx
c001ae48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae4c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ae51:	f7 f1                	div    ecx
c001ae53:	c1 e0 04             	shl    eax,0x4
c001ae56:	09 d0                	or     eax,edx
c001ae58:	31 d2                	xor    edx,edx
c001ae5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae5e:	0f b6 c3             	movzx  eax,bl
c001ae61:	f7 f1                	div    ecx
c001ae63:	c1 e0 04             	shl    eax,0x4
c001ae66:	09 d0                	or     eax,edx
c001ae68:	31 d2                	xor    edx,edx
c001ae6a:	89 c3                	mov    ebx,eax
c001ae6c:	89 f0                	mov    eax,esi
c001ae6e:	0f b6 c0             	movzx  eax,al
c001ae71:	f7 f1                	div    ecx
c001ae73:	c1 e0 04             	shl    eax,0x4
c001ae76:	09 d0                	or     eax,edx
c001ae78:	31 d2                	xor    edx,edx
c001ae7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ae83:	f7 f1                	div    ecx
c001ae85:	c1 e0 04             	shl    eax,0x4
c001ae88:	09 d0                	or     eax,edx
c001ae8a:	31 d2                	xor    edx,edx
c001ae8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae94:	f7 f1                	div    ecx
c001ae96:	c1 e0 04             	shl    eax,0x4
c001ae99:	09 d0                	or     eax,edx
c001ae9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae9f:	83 e5 02             	and    ebp,0x2
c001aea2:	75 1e                	jne    c001aec2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aea4:	0f b6 c3             	movzx  eax,bl
c001aea7:	83 f8 0b             	cmp    eax,0xb
c001aeaa:	76 10                	jbe    c001aebc <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001aeac:	8d 53 f4             	lea    edx,[ebx-0xc]
c001aeaf:	88 d3                	mov    bl,dl
c001aeb1:	84 d2                	test   dl,dl
c001aeb3:	75 02                	jne    c001aeb7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001aeb5:	b3 0c                	mov    bl,0xc
c001aeb7:	83 cb 80             	or     ebx,0xffffff80
c001aeba:	eb 06                	jmp    c001aec2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aebc:	85 c0                	test   eax,eax
c001aebe:	75 02                	jne    c001aec2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aec0:	b3 0c                	mov    bl,0xc
c001aec2:	0f b6 db             	movzx  ebx,bl
c001aec5:	50                   	push   eax
c001aec6:	50                   	push   eax
c001aec7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001aecc:	52                   	push   edx
c001aecd:	6a 00                	push   0x0
c001aecf:	e8 83 d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001aed4:	5a                   	pop    edx
c001aed5:	59                   	pop    ecx
c001aed6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aedb:	50                   	push   eax
c001aedc:	6a 02                	push   0x2
c001aede:	e8 74 d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001aee3:	5e                   	pop    esi
c001aee4:	5f                   	pop    edi
c001aee5:	53                   	push   ebx
c001aee6:	6a 04                	push   0x4
c001aee8:	e8 6a d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001aeed:	5d                   	pop    ebp
c001aeee:	58                   	pop    eax
c001aeef:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001aef4:	52                   	push   edx
c001aef5:	6a 07                	push   0x7
c001aef7:	e8 5b d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001aefc:	58                   	pop    eax
c001aefd:	5a                   	pop    edx
c001aefe:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001af03:	50                   	push   eax
c001af04:	6a 08                	push   0x8
c001af06:	e8 4c d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001af0b:	59                   	pop    ecx
c001af0c:	5b                   	pop    ebx
c001af0d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af12:	55                   	push   ebp
c001af13:	6a 09                	push   0x9
c001af15:	e8 3d d7 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001af1a:	5e                   	pop    esi
c001af1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af1f:	e8 e0 fb ff ff       	call   c001ab04 <RTC::completeRTCRefresh()>
c001af24:	83 c4 3c             	add    esp,0x3c
c001af27:	b0 01                	mov    al,0x1
c001af29:	5b                   	pop    ebx
c001af2a:	5e                   	pop    esi
c001af2b:	5f                   	pop    edi
c001af2c:	5d                   	pop    ebp
c001af2d:	c3                   	ret    

c001af2e <rtcIRQHandler(regs*, void*)>:
c001af2e:	53                   	push   ebx
c001af2f:	83 ec 14             	sub    esp,0x14
c001af32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af36:	6a 0c                	push   0xc
c001af38:	e8 c6 d6 ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001af3d:	83 c4 10             	add    esp,0x10
c001af40:	a8 80                	test   al,0x80
c001af42:	74 24                	je     c001af68 <rtcIRQHandler(regs*, void*)+0x3a>
c001af44:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001af4b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001af52:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001af59:	75 0d                	jne    c001af68 <rtcIRQHandler(regs*, void*)+0x3a>
c001af5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001af5f:	83 c4 08             	add    esp,0x8
c001af62:	5b                   	pop    ebx
c001af63:	e9 9c fb ff ff       	jmp    c001ab04 <RTC::completeRTCRefresh()>
c001af68:	83 c4 08             	add    esp,0x8
c001af6b:	5b                   	pop    ebx
c001af6c:	c3                   	ret    
c001af6d:	90                   	nop

c001af6e <RTC::RTC()>:
c001af6e:	83 ec 1c             	sub    esp,0x1c
c001af71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af75:	83 ec 08             	sub    esp,0x8
c001af78:	68 0f 55 02 c0       	push   0xc002550f
c001af7d:	50                   	push   eax
c001af7e:	e8 db e0 fe ff       	call   c000905e <Clock::Clock(char const*)>
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	ba 2c 55 02 c0       	mov    edx,0xc002552c
c001af8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af8f:	89 10                	mov    DWORD PTR [eax],edx
c001af91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af95:	83 ec 0c             	sub    esp,0xc
c001af98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af9c:	6a 01                	push   0x1
c001af9e:	68 2e af 01 c0       	push   0xc001af2e
c001afa3:	6a 08                	push   0x8
c001afa5:	50                   	push   eax
c001afa6:	e8 fd e9 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001afab:	83 c4 20             	add    esp,0x20
c001afae:	89 c2                	mov    edx,eax
c001afb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afb4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001afba:	fa                   	cli    
c001afbb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001afc0:	83 c0 01             	add    eax,0x1
c001afc3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	6a 0b                	push   0xb
c001afcd:	e8 31 d6 ff ff       	call   c0018603 <x86ReadCMOS(unsigned char)>
c001afd2:	83 c4 10             	add    esp,0x10
c001afd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001afd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afdd:	83 c8 10             	or     eax,0x10
c001afe0:	0f b6 c0             	movzx  eax,al
c001afe3:	83 ec 08             	sub    esp,0x8
c001afe6:	50                   	push   eax
c001afe7:	6a 0b                	push   0xb
c001afe9:	e8 69 d6 ff ff       	call   c0018657 <x86WriteCMOS(unsigned char, unsigned char)>
c001afee:	83 c4 10             	add    esp,0x10
c001aff1:	83 ec 0c             	sub    esp,0xc
c001aff4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff8:	e8 07 fb ff ff       	call   c001ab04 <RTC::completeRTCRefresh()>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001b008:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b00d:	85 c0                	test   eax,eax
c001b00f:	75 01                	jne    c001b012 <RTC::RTC()+0xa4>
c001b011:	fb                   	sti    
c001b012:	90                   	nop
c001b013:	83 c4 1c             	add    esp,0x1c
c001b016:	c3                   	ret    
c001b017:	90                   	nop

c001b018 <HalConsoleScroll(int, int)>:
c001b018:	83 ec 10             	sub    esp,0x10
c001b01b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b023:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b02b:	90                   	nop
c001b02c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b031:	0f 8f e1 00 00 00    	jg     c001b118 <HalConsoleScroll(int, int)+0x100>
c001b037:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b03f:	90                   	nop
c001b040:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b048:	0f 8f be 00 00 00    	jg     c001b10c <HalConsoleScroll(int, int)+0xf4>
c001b04e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b052:	89 d0                	mov    eax,edx
c001b054:	c1 e0 02             	shl    eax,0x2
c001b057:	01 d0                	add    eax,edx
c001b059:	c1 e0 05             	shl    eax,0x5
c001b05c:	89 c2                	mov    edx,eax
c001b05e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b062:	01 d0                	add    eax,edx
c001b064:	89 c2                	mov    edx,eax
c001b066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b06a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b06d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b071:	89 d0                	mov    eax,edx
c001b073:	c1 e0 02             	shl    eax,0x2
c001b076:	01 d0                	add    eax,edx
c001b078:	c1 e0 05             	shl    eax,0x5
c001b07b:	89 c2                	mov    edx,eax
c001b07d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b081:	01 d0                	add    eax,edx
c001b083:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b08d:	01 c2                	add    edx,eax
c001b08f:	8a 01                	mov    al,BYTE PTR [ecx]
c001b091:	88 02                	mov    BYTE PTR [edx],al
c001b093:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b098:	75 66                	jne    c001b100 <HalConsoleScroll(int, int)+0xe8>
c001b09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b09e:	83 e0 01             	and    eax,0x1
c001b0a1:	74 39                	je     c001b0dc <HalConsoleScroll(int, int)+0xc4>
c001b0a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0a7:	83 e0 0f             	and    eax,0xf
c001b0aa:	88 c2                	mov    dl,al
c001b0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0b0:	c1 e0 04             	shl    eax,0x4
c001b0b3:	09 d0                	or     eax,edx
c001b0b5:	88 c1                	mov    cl,al
c001b0b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0bb:	89 d0                	mov    eax,edx
c001b0bd:	c1 e0 02             	shl    eax,0x2
c001b0c0:	01 d0                	add    eax,edx
c001b0c2:	c1 e0 05             	shl    eax,0x5
c001b0c5:	89 c2                	mov    edx,eax
c001b0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0cb:	01 d0                	add    eax,edx
c001b0cd:	89 c2                	mov    edx,eax
c001b0cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0d3:	01 d0                	add    eax,edx
c001b0d5:	88 ca                	mov    dl,cl
c001b0d7:	88 10                	mov    BYTE PTR [eax],dl
c001b0d9:	eb 25                	jmp    c001b100 <HalConsoleScroll(int, int)+0xe8>
c001b0db:	90                   	nop
c001b0dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0e0:	89 d0                	mov    eax,edx
c001b0e2:	c1 e0 02             	shl    eax,0x2
c001b0e5:	01 d0                	add    eax,edx
c001b0e7:	c1 e0 05             	shl    eax,0x5
c001b0ea:	89 c2                	mov    edx,eax
c001b0ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0f0:	01 d0                	add    eax,edx
c001b0f2:	89 c2                	mov    edx,eax
c001b0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f8:	01 d0                	add    eax,edx
c001b0fa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b100:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b105:	e9 36 ff ff ff       	jmp    c001b040 <HalConsoleScroll(int, int)+0x28>
c001b10a:	66 90                	xchg   ax,ax
c001b10c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b111:	e9 16 ff ff ff       	jmp    c001b02c <HalConsoleScroll(int, int)+0x14>
c001b116:	66 90                	xchg   ax,ax
c001b118:	90                   	nop
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	c3                   	ret    
c001b11d:	8d 76 00             	lea    esi,[esi+0x0]

c001b120 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b120:	83 ec 14             	sub    esp,0x14
c001b123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b127:	88 04 24             	mov    BYTE PTR [esp],al
c001b12a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b12d:	0f b6 c0             	movzx  eax,al
c001b130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b134:	89 d1                	mov    ecx,edx
c001b136:	83 e1 0f             	and    ecx,0xf
c001b139:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b13d:	c1 e2 04             	shl    edx,0x4
c001b140:	0f b6 d2             	movzx  edx,dl
c001b143:	09 ca                	or     edx,ecx
c001b145:	c1 e2 08             	shl    edx,0x8
c001b148:	09 d0                	or     eax,edx
c001b14a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b14f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b157:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b15b:	89 d0                	mov    eax,edx
c001b15d:	c1 e0 02             	shl    eax,0x2
c001b160:	01 d0                	add    eax,edx
c001b162:	c1 e0 04             	shl    eax,0x4
c001b165:	89 c2                	mov    edx,eax
c001b167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b16b:	01 d0                	add    eax,edx
c001b16d:	01 c0                	add    eax,eax
c001b16f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b173:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b177:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b17c:	66 89 02             	mov    WORD PTR [edx],ax
c001b17f:	90                   	nop
c001b180:	83 c4 14             	add    esp,0x14
c001b183:	c3                   	ret    

c001b184 <HalConsoleCursorUpdate(int, int)>:
c001b184:	83 ec 20             	sub    esp,0x20
c001b187:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b18b:	89 c2                	mov    edx,eax
c001b18d:	c1 e2 02             	shl    edx,0x2
c001b190:	01 d0                	add    eax,edx
c001b192:	c1 e0 04             	shl    eax,0x4
c001b195:	89 c2                	mov    edx,eax
c001b197:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b19b:	01 d0                	add    eax,edx
c001b19d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b1a2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b1a9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b1ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1b6:	ee                   	out    dx,al
c001b1b7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b1bc:	0f b6 c0             	movzx  eax,al
c001b1bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b1c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b1ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b1ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1d2:	ee                   	out    dx,al
c001b1d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b1da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b1df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b1e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b1e7:	ee                   	out    dx,al
c001b1e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b1ed:	c1 e8 08             	shr    eax,0x8
c001b1f0:	0f b6 c0             	movzx  eax,al
c001b1f3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b1fa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b1fe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b202:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b206:	ee                   	out    dx,al
c001b207:	90                   	nop
c001b208:	83 c4 20             	add    esp,0x20
c001b20b:	c3                   	ret    

c001b20c <FAT::getName()>:
c001b20c:	b8 60 55 02 c0       	mov    eax,0xc0025560
c001b211:	c3                   	ret    
c001b212:	66 90                	xchg   ax,ax

c001b214 <FAT::tell(void*, unsigned long long*)>:
c001b214:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b219:	75 09                	jne    c001b224 <FAT::tell(void*, unsigned long long*)+0x10>
c001b21b:	b8 04 00 00 00       	mov    eax,0x4
c001b220:	c3                   	ret    
c001b221:	8d 76 00             	lea    esi,[esi+0x0]
c001b224:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b229:	75 09                	jne    c001b234 <FAT::tell(void*, unsigned long long*)+0x20>
c001b22b:	b8 04 00 00 00       	mov    eax,0x4
c001b230:	c3                   	ret    
c001b231:	8d 76 00             	lea    esi,[esi+0x0]
c001b234:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b238:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b23b:	ba 00 00 00 00       	mov    edx,0x0
c001b240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b244:	89 01                	mov    DWORD PTR [ecx],eax
c001b246:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b249:	b8 00 00 00 00       	mov    eax,0x0
c001b24e:	c3                   	ret    
c001b24f:	90                   	nop

c001b250 <FAT::stat(void*, unsigned long long*)>:
c001b250:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b255:	75 09                	jne    c001b260 <FAT::stat(void*, unsigned long long*)+0x10>
c001b257:	b8 04 00 00 00       	mov    eax,0x4
c001b25c:	c3                   	ret    
c001b25d:	8d 76 00             	lea    esi,[esi+0x0]
c001b260:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b265:	75 09                	jne    c001b270 <FAT::stat(void*, unsigned long long*)+0x20>
c001b267:	b8 04 00 00 00       	mov    eax,0x4
c001b26c:	c3                   	ret    
c001b26d:	8d 76 00             	lea    esi,[esi+0x0]
c001b270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b274:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b277:	ba 00 00 00 00       	mov    edx,0x0
c001b27c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b280:	89 01                	mov    DWORD PTR [ecx],eax
c001b282:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b285:	b8 00 00 00 00       	mov    eax,0x0
c001b28a:	c3                   	ret    
c001b28b:	90                   	nop

c001b28c <FAT::~FAT()>:
c001b28c:	83 ec 0c             	sub    esp,0xc
c001b28f:	ba ac 55 02 c0       	mov    edx,0xc00255ac
c001b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b298:	89 10                	mov    DWORD PTR [eax],edx
c001b29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b29e:	83 ec 0c             	sub    esp,0xc
c001b2a1:	50                   	push   eax
c001b2a2:	e8 ed ca fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001b2a7:	83 c4 10             	add    esp,0x10
c001b2aa:	90                   	nop
c001b2ab:	83 c4 0c             	add    esp,0xc
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <FAT::~FAT()>:
c001b2b0:	83 ec 0c             	sub    esp,0xc
c001b2b3:	83 ec 0c             	sub    esp,0xc
c001b2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ba:	e8 cd ff ff ff       	call   c001b28c <FAT::~FAT()>
c001b2bf:	83 c4 10             	add    esp,0x10
c001b2c2:	83 ec 08             	sub    esp,0x8
c001b2c5:	6a 08                	push   0x8
c001b2c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2cb:	e8 4f 20 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	83 c4 0c             	add    esp,0xc
c001b2d6:	c3                   	ret    
c001b2d7:	90                   	nop

c001b2d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b2d8:	83 ec 1c             	sub    esp,0x1c
c001b2db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b2e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b2e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b2eb:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b2f2:	83 f8 ff             	cmp    eax,0xffffffff
c001b2f5:	75 35                	jne    c001b32c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b2f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b2fb:	88 c2                	mov    dl,al
c001b2fd:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b302:	01 d0                	add    eax,edx
c001b304:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b308:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b30e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b312:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b319:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b31e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b322:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b329:	eb 19                	jmp    c001b344 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b32b:	90                   	nop
c001b32c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b330:	88 c2                	mov    dl,al
c001b332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b336:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b33d:	01 d0                	add    eax,edx
c001b33f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b343:	90                   	nop
c001b344:	83 ec 04             	sub    esp,0x4
c001b347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b34b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b34f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b353:	50                   	push   eax
c001b354:	e8 5f 9e fe ff       	call   c00051b8 <f_getlabel>
c001b359:	83 c4 10             	add    esp,0x10
c001b35c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b360:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b365:	75 09                	jne    c001b370 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b367:	b8 00 00 00 00       	mov    eax,0x0
c001b36c:	eb 0a                	jmp    c001b378 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b36e:	66 90                	xchg   ax,ax
c001b370:	b8 01 00 00 00       	mov    eax,0x1
c001b375:	8d 76 00             	lea    esi,[esi+0x0]
c001b378:	83 c4 1c             	add    esp,0x1c
c001b37b:	c3                   	ret    

c001b37c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b37c:	57                   	push   edi
c001b37d:	83 ec 58             	sub    esp,0x58
c001b380:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b388:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b38c:	b8 00 00 00 00       	mov    eax,0x0
c001b391:	b9 0f 00 00 00       	mov    ecx,0xf
c001b396:	fc                   	cld    
c001b397:	89 d7                	mov    edi,edx
c001b399:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b39b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b39f:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3a6:	83 f8 ff             	cmp    eax,0xffffffff
c001b3a9:	75 35                	jne    c001b3e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b3ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3af:	88 c2                	mov    dl,al
c001b3b1:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3b6:	01 d0                	add    eax,edx
c001b3b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b3bc:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b3c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b3c6:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b3cd:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3d2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b3d6:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b3dd:	eb 19                	jmp    c001b3f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b3df:	90                   	nop
c001b3e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3e4:	88 c2                	mov    dl,al
c001b3e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b3ea:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3f1:	01 d0                	add    eax,edx
c001b3f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b3f7:	90                   	nop
c001b3f8:	83 ec 08             	sub    esp,0x8
c001b3fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b3ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b403:	50                   	push   eax
c001b404:	e8 37 54 fe ff       	call   c0000840 <strcat>
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b413:	50                   	push   eax
c001b414:	e8 f0 9e fe ff       	call   c0005309 <f_setlabel>
c001b419:	83 c4 10             	add    esp,0x10
c001b41c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b420:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b425:	75 09                	jne    c001b430 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b427:	b8 00 00 00 00       	mov    eax,0x0
c001b42c:	eb 0a                	jmp    c001b438 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b42e:	66 90                	xchg   ax,ax
c001b430:	b8 01 00 00 00       	mov    eax,0x1
c001b435:	8d 76 00             	lea    esi,[esi+0x0]
c001b438:	83 c4 58             	add    esp,0x58
c001b43b:	5f                   	pop    edi
c001b43c:	c3                   	ret    
c001b43d:	90                   	nop
c001b43e:	66 90                	xchg   ax,ax

c001b440 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b440:	83 ec 2c             	sub    esp,0x2c
c001b443:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b44b:	83 ec 08             	sub    esp,0x8
c001b44e:	68 84 55 02 c0       	push   0xc0025584
c001b453:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b457:	e8 f4 52 fe ff       	call   c0000750 <strcmp>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	85 c0                	test   eax,eax
c001b461:	0f 94 c0             	sete   al
c001b464:	0f b6 c0             	movzx  eax,al
c001b467:	85 c0                	test   eax,eax
c001b469:	74 0d                	je     c001b478 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b46b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b473:	e9 c0 00 00 00       	jmp    c001b538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b478:	83 ec 08             	sub    esp,0x8
c001b47b:	68 76 55 02 c0       	push   0xc0025576
c001b480:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b484:	e8 c7 52 fe ff       	call   c0000750 <strcmp>
c001b489:	83 c4 10             	add    esp,0x10
c001b48c:	85 c0                	test   eax,eax
c001b48e:	0f 94 c0             	sete   al
c001b491:	0f b6 c0             	movzx  eax,al
c001b494:	85 c0                	test   eax,eax
c001b496:	74 10                	je     c001b4a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b498:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4a0:	e9 93 00 00 00       	jmp    c001b538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a8:	83 ec 08             	sub    esp,0x8
c001b4ab:	68 7c 55 02 c0       	push   0xc002557c
c001b4b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4b4:	e8 97 52 fe ff       	call   c0000750 <strcmp>
c001b4b9:	83 c4 10             	add    esp,0x10
c001b4bc:	85 c0                	test   eax,eax
c001b4be:	0f 94 c0             	sete   al
c001b4c1:	0f b6 c0             	movzx  eax,al
c001b4c4:	85 c0                	test   eax,eax
c001b4c6:	74 0c                	je     c001b4d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b4c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4d0:	eb 66                	jmp    c001b538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4d2:	66 90                	xchg   ax,ax
c001b4d4:	83 ec 08             	sub    esp,0x8
c001b4d7:	68 5c 26 02 c0       	push   0xc002265c
c001b4dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4e0:	e8 6b 52 fe ff       	call   c0000750 <strcmp>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	85 c0                	test   eax,eax
c001b4ea:	0f 94 c0             	sete   al
c001b4ed:	0f b6 c0             	movzx  eax,al
c001b4f0:	85 c0                	test   eax,eax
c001b4f2:	74 0c                	je     c001b500 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b4f4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b4fc:	eb 3a                	jmp    c001b538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4fe:	66 90                	xchg   ax,ax
c001b500:	83 ec 08             	sub    esp,0x8
c001b503:	68 82 55 02 c0       	push   0xc0025582
c001b508:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b50c:	e8 3f 52 fe ff       	call   c0000750 <strcmp>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	85 c0                	test   eax,eax
c001b516:	0f 94 c0             	sete   al
c001b519:	0f b6 c0             	movzx  eax,al
c001b51c:	85 c0                	test   eax,eax
c001b51e:	74 0c                	je     c001b52c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b520:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b528:	eb 0e                	jmp    c001b538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b52a:	66 90                	xchg   ax,ax
c001b52c:	b8 08 00 00 00       	mov    eax,0x8
c001b531:	e9 ea 00 00 00       	jmp    c001b620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b536:	66 90                	xchg   ax,ax
c001b538:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b53f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b544:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b548:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b54f:	83 f8 ff             	cmp    eax,0xffffffff
c001b552:	75 34                	jne    c001b588 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b554:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b558:	88 c2                	mov    dl,al
c001b55a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b55f:	01 d0                	add    eax,edx
c001b561:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b565:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b56b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b56f:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b576:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b57b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b57f:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b586:	eb 18                	jmp    c001b5a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b588:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b58c:	88 c2                	mov    dl,al
c001b58e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b592:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b599:	01 d0                	add    eax,edx
c001b59b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b59f:	90                   	nop
c001b5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5a4:	88 04 24             	mov    BYTE PTR [esp],al
c001b5a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b5b7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b5bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	68 00 20 00 00       	push   0x2000
c001b5cc:	e8 c6 46 ff ff       	call   c000fc97 <malloc>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5d8:	68 00 20 00 00       	push   0x2000
c001b5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5e5:	50                   	push   eax
c001b5e6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b5ea:	50                   	push   eax
c001b5eb:	e8 16 a0 fe ff       	call   c0005606 <f_mkfs>
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b5fc:	75 0a                	jne    c001b608 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b5fe:	b8 00 00 00 00       	mov    eax,0x0
c001b603:	eb 1b                	jmp    c001b620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b605:	8d 76 00             	lea    esi,[esi+0x0]
c001b608:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b60d:	75 09                	jne    c001b618 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b60f:	b8 09 00 00 00       	mov    eax,0x9
c001b614:	eb 0a                	jmp    c001b620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b616:	66 90                	xchg   ax,ax
c001b618:	b8 01 00 00 00       	mov    eax,0x1
c001b61d:	8d 76 00             	lea    esi,[esi+0x0]
c001b620:	83 c4 2c             	add    esp,0x2c
c001b623:	c3                   	ret    

c001b624 <FAT::tryMount(LogicalDisk*, int)>:
c001b624:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b62a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b62f:	83 f8 14             	cmp    eax,0x14
c001b632:	75 18                	jne    c001b64c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	68 88 55 02 c0       	push   0xc0025588
c001b63c:	e8 9d 49 ff ff       	call   c000ffde <KePanic(char const*)>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	b0 00                	mov    al,0x0
c001b646:	e9 ed 01 00 00       	jmp    c001b838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b64b:	90                   	nop
c001b64c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b653:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b659:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b65f:	3d 00 02 00 00       	cmp    eax,0x200
c001b664:	74 0a                	je     c001b670 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b666:	b0 00                	mov    al,0x0
c001b668:	e9 cb 01 00 00       	jmp    c001b838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b66d:	8d 76 00             	lea    esi,[esi+0x0]
c001b670:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b678:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b67f:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b686:	83 f8 ff             	cmp    eax,0xffffffff
c001b689:	74 09                	je     c001b694 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b68b:	b0 01                	mov    al,0x1
c001b68d:	e9 a6 01 00 00       	jmp    c001b838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b692:	66 90                	xchg   ax,ax
c001b694:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b69e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b6a6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b6ad:	88 c2                	mov    dl,al
c001b6af:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6b4:	01 d0                	add    eax,edx
c001b6b6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b6bd:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b6c3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b6ca:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b6d1:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6d6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b6dd:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	68 34 02 00 00       	push   0x234
c001b6ec:	e8 a6 45 ff ff       	call   c000fc97 <malloc>
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b6fb:	83 ec 04             	sub    esp,0x4
c001b6fe:	6a 00                	push   0x0
c001b700:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b707:	50                   	push   eax
c001b708:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b70f:	e8 cd 86 fe ff       	call   c0003de1 <f_mount>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b71e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b726:	74 1c                	je     c001b744 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b732:	e8 80 45 ff ff       	call   c000fcb7 <rfree>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	b0 00                	mov    al,0x0
c001b73c:	e9 f7 00 00 00       	jmp    c001b838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b741:	8d 76 00             	lea    esi,[esi+0x0]
c001b744:	83 ec 04             	sub    esp,0x4
c001b747:	68 00 01 00 00       	push   0x100
c001b74c:	6a 00                	push   0x0
c001b74e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b755:	50                   	push   eax
c001b756:	e8 95 4d fe ff       	call   c00004f0 <memset>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	83 ec 08             	sub    esp,0x8
c001b761:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b768:	50                   	push   eax
c001b769:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b770:	50                   	push   eax
c001b771:	e8 ca 50 fe ff       	call   c0000840 <strcat>
c001b776:	83 c4 10             	add    esp,0x10
c001b779:	83 ec 08             	sub    esp,0x8
c001b77c:	68 96 55 02 c0       	push   0xc0025596
c001b781:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b788:	50                   	push   eax
c001b789:	e8 b2 50 fe ff       	call   c0000840 <strcat>
c001b78e:	83 c4 10             	add    esp,0x10
c001b791:	83 ec 04             	sub    esp,0x4
c001b794:	6a 01                	push   0x1
c001b796:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b79d:	50                   	push   eax
c001b79e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7a2:	50                   	push   eax
c001b7a3:	e8 9b 86 fe ff       	call   c0003e43 <f_open>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b7b2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b7b9:	85 c0                	test   eax,eax
c001b7bb:	74 0b                	je     c001b7c8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b7bd:	78 31                	js     c001b7f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b7bf:	83 e8 04             	sub    eax,0x4
c001b7c2:	83 f8 01             	cmp    eax,0x1
c001b7c5:	77 29                	ja     c001b7f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b7c7:	90                   	nop
c001b7c8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b7d0:	83 ec 0c             	sub    esp,0xc
c001b7d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7d7:	50                   	push   eax
c001b7d8:	e8 35 8e fe ff       	call   c0004612 <f_close>
c001b7dd:	83 c4 10             	add    esp,0x10
c001b7e0:	90                   	nop
c001b7e1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b7e9:	85 c0                	test   eax,eax
c001b7eb:	74 43                	je     c001b830 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b7ed:	eb 31                	jmp    c001b820 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b7ef:	90                   	nop
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b7fa:	e8 b8 44 ff ff       	call   c000fcb7 <rfree>
c001b7ff:	83 c4 10             	add    esp,0x10
c001b802:	83 ec 04             	sub    esp,0x4
c001b805:	6a 00                	push   0x0
c001b807:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b80e:	50                   	push   eax
c001b80f:	6a 00                	push   0x0
c001b811:	e8 cb 85 fe ff       	call   c0003de1 <f_mount>
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	b0 00                	mov    al,0x0
c001b81b:	eb 1b                	jmp    c001b838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b81d:	8d 76 00             	lea    esi,[esi+0x0]
c001b820:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b825:	83 c0 01             	add    eax,0x1
c001b828:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b82d:	8d 76 00             	lea    esi,[esi+0x0]
c001b830:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b837:	90                   	nop
c001b838:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b83e:	c3                   	ret    
c001b83f:	90                   	nop

c001b840 <FAT::allocateSwapfile(char const*, int)>:
c001b840:	55                   	push   ebp
c001b841:	57                   	push   edi
c001b842:	56                   	push   esi
c001b843:	53                   	push   ebx
c001b844:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b84a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b855:	83 ec 0c             	sub    esp,0xc
c001b858:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b85f:	e8 33 44 ff ff       	call   c000fc97 <malloc>
c001b864:	83 c4 10             	add    esp,0x10
c001b867:	89 c7                	mov    edi,eax
c001b869:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b86e:	83 ec 04             	sub    esp,0x4
c001b871:	50                   	push   eax
c001b872:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b879:	57                   	push   edi
c001b87a:	e8 b3 c8 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b889:	83 ec 04             	sub    esp,0x4
c001b88c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b890:	50                   	push   eax
c001b891:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b895:	50                   	push   eax
c001b896:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b89d:	e8 b0 cb fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b8ac:	c1 e0 14             	shl    eax,0x14
c001b8af:	89 c7                	mov    edi,eax
c001b8b1:	89 c5                	mov    ebp,eax
c001b8b3:	c1 fd 1f             	sar    ebp,0x1f
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8be:	89 f9                	mov    ecx,edi
c001b8c0:	31 c1                	xor    ecx,eax
c001b8c2:	89 cb                	mov    ebx,ecx
c001b8c4:	89 e9                	mov    ecx,ebp
c001b8c6:	31 d1                	xor    ecx,edx
c001b8c8:	89 ce                	mov    esi,ecx
c001b8ca:	89 f0                	mov    eax,esi
c001b8cc:	09 d8                	or     eax,ebx
c001b8ce:	0f 84 9c 00 00 00    	je     c001b970 <FAT::allocateSwapfile(char const*, int)+0x130>
c001b8d4:	83 ec 0c             	sub    esp,0xc
c001b8d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b8de:	e8 3b ca fe ff       	call   c000831e <File::unlink()>
c001b8e3:	83 c4 10             	add    esp,0x10
c001b8e6:	83 ec 08             	sub    esp,0x8
c001b8e9:	6a 12                	push   0x12
c001b8eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b8f2:	e8 59 c8 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b901:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b907:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b90e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b915:	c1 e0 14             	shl    eax,0x14
c001b918:	83 ec 04             	sub    esp,0x4
c001b91b:	6a 01                	push   0x1
c001b91d:	50                   	push   eax
c001b91e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b925:	e8 6f 9b fe ff       	call   c0005499 <f_expand>
c001b92a:	83 c4 10             	add    esp,0x10
c001b92d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b934:	8b 00                	mov    eax,DWORD PTR [eax]
c001b936:	83 c0 10             	add    eax,0x10
c001b939:	8b 00                	mov    eax,DWORD PTR [eax]
c001b93b:	83 ec 0c             	sub    esp,0xc
c001b93e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b942:	52                   	push   edx
c001b943:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b947:	52                   	push   edx
c001b948:	6a 00                	push   0x0
c001b94a:	68 00 04 00 00       	push   0x400
c001b94f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b956:	ff d0                	call   eax
c001b958:	83 c4 20             	add    esp,0x20
c001b95b:	83 ec 0c             	sub    esp,0xc
c001b95e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b965:	e8 44 c8 fe ff       	call   c00081ae <File::close()>
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	8d 76 00             	lea    esi,[esi+0x0]
c001b970:	83 ec 08             	sub    esp,0x8
c001b973:	6a 01                	push   0x1
c001b975:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b97c:	e8 cf c7 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b98b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b98d:	83 c0 0c             	add    eax,0xc
c001b990:	8b 00                	mov    eax,DWORD PTR [eax]
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b999:	52                   	push   edx
c001b99a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b99e:	52                   	push   edx
c001b99f:	6a 00                	push   0x0
c001b9a1:	6a 04                	push   0x4
c001b9a3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b9aa:	ff d0                	call   eax
c001b9ac:	83 c4 20             	add    esp,0x20
c001b9af:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b9b6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b9bc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b9c3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b9ca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b9cd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9de:	e8 cb c7 fe ff       	call   c00081ae <File::close()>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b9ed:	ba 00 00 00 00       	mov    edx,0x0
c001b9f2:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b9f8:	5b                   	pop    ebx
c001b9f9:	5e                   	pop    esi
c001b9fa:	5f                   	pop    edi
c001b9fb:	5d                   	pop    ebp
c001b9fc:	c3                   	ret    
c001b9fd:	90                   	nop
c001b9fe:	66 90                	xchg   ax,ax

c001ba00 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ba00:	57                   	push   edi
c001ba01:	56                   	push   esi
c001ba02:	53                   	push   ebx
c001ba03:	81 ec 50 02 00 00    	sub    esp,0x250
c001ba09:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ba11:	74 0d                	je     c001ba20 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ba13:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ba1b:	75 0f                	jne    c001ba2c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba20:	b8 04 00 00 00       	mov    eax,0x4
c001ba25:	e9 3a 01 00 00       	jmp    c001bb64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ba2a:	66 90                	xchg   ax,ax
c001ba2c:	83 ec 08             	sub    esp,0x8
c001ba2f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ba36:	50                   	push   eax
c001ba37:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ba3e:	e8 9c 8e fe ff       	call   c00048df <f_readdir>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ba4d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ba5e:	83 c0 16             	add    eax,0x16
c001ba61:	50                   	push   eax
c001ba62:	e8 09 4b fe ff       	call   c0000570 <strlen>
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	ba 00 00 00 00       	mov    edx,0x0
c001ba6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba73:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba77:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ba7e:	0f b6 c0             	movzx  eax,al
c001ba81:	83 e0 10             	and    eax,0x10
c001ba84:	74 0a                	je     c001ba90 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ba86:	b8 02 00 00 00       	mov    eax,0x2
c001ba8b:	eb 0b                	jmp    c001ba98 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ba8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba90:	b8 01 00 00 00       	mov    eax,0x1
c001ba95:	8d 76 00             	lea    esi,[esi+0x0]
c001ba98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba9c:	83 ec 08             	sub    esp,0x8
c001ba9f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001baa6:	83 c0 16             	add    eax,0x16
c001baa9:	50                   	push   eax
c001baaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001baae:	83 c0 10             	add    eax,0x10
c001bab1:	50                   	push   eax
c001bab2:	e8 89 4b fe ff       	call   c0000640 <strcpy>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bac1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bac8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bacc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bad3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bada:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bae1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bae8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001baef:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001baf6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bafd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bb04:	89 c6                	mov    esi,eax
c001bb06:	89 d7                	mov    edi,edx
c001bb08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb0a:	89 c8                	mov    eax,ecx
c001bb0c:	89 fa                	mov    edx,edi
c001bb0e:	89 f3                	mov    ebx,esi
c001bb10:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bb17:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bb1e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bb25:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bb2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bb32:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bb39:	0f be c0             	movsx  eax,al
c001bb3c:	85 c0                	test   eax,eax
c001bb3e:	75 08                	jne    c001bb48 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bb40:	b8 07 00 00 00       	mov    eax,0x7
c001bb45:	eb 1d                	jmp    c001bb64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bb47:	90                   	nop
c001bb48:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bb4f:	85 c0                	test   eax,eax
c001bb51:	75 09                	jne    c001bb5c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bb53:	b8 00 00 00 00       	mov    eax,0x0
c001bb58:	eb 0a                	jmp    c001bb64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bb5a:	66 90                	xchg   ax,ax
c001bb5c:	b8 01 00 00 00       	mov    eax,0x1
c001bb61:	8d 76 00             	lea    esi,[esi+0x0]
c001bb64:	81 c4 50 02 00 00    	add    esp,0x250
c001bb6a:	5b                   	pop    ebx
c001bb6b:	5e                   	pop    esi
c001bb6c:	5f                   	pop    edi
c001bb6d:	c3                   	ret    
c001bb6e:	66 90                	xchg   ax,ax

c001bb70 <FAT::read(void*, unsigned long, void*, int*)>:
c001bb70:	83 ec 1c             	sub    esp,0x1c
c001bb73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bb78:	74 0a                	je     c001bb84 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bb7a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bb7f:	75 0b                	jne    c001bb8c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bb81:	8d 76 00             	lea    esi,[esi+0x0]
c001bb84:	b8 04 00 00 00       	mov    eax,0x4
c001bb89:	eb 41                	jmp    c001bbcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bb8b:	90                   	nop
c001bb8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb90:	50                   	push   eax
c001bb91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bb99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bb9d:	e8 64 85 fe ff       	call   c0004106 <f_read>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbad:	89 c2                	mov    edx,eax
c001bbaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbb3:	89 10                	mov    DWORD PTR [eax],edx
c001bbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb9:	85 c0                	test   eax,eax
c001bbbb:	75 07                	jne    c001bbc4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bbbd:	b8 00 00 00 00       	mov    eax,0x0
c001bbc2:	eb 08                	jmp    c001bbcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bbc4:	b8 01 00 00 00       	mov    eax,0x1
c001bbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbcc:	83 c4 1c             	add    esp,0x1c
c001bbcf:	c3                   	ret    

c001bbd0 <FAT::write(void*, unsigned long, void*, int*)>:
c001bbd0:	83 ec 1c             	sub    esp,0x1c
c001bbd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bbd8:	74 0a                	je     c001bbe4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bbda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bbdf:	75 0b                	jne    c001bbec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bbe1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe4:	b8 04 00 00 00       	mov    eax,0x4
c001bbe9:	eb 41                	jmp    c001bc2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bbeb:	90                   	nop
c001bbec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbf0:	50                   	push   eax
c001bbf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bbf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bbfd:	e8 03 87 fe ff       	call   c0004305 <f_write>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc0d:	89 c2                	mov    edx,eax
c001bc0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc13:	89 10                	mov    DWORD PTR [eax],edx
c001bc15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc19:	85 c0                	test   eax,eax
c001bc1b:	75 07                	jne    c001bc24 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bc1d:	b8 00 00 00 00       	mov    eax,0x0
c001bc22:	eb 08                	jmp    c001bc2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc24:	b8 01 00 00 00       	mov    eax,0x1
c001bc29:	8d 76 00             	lea    esi,[esi+0x0]
c001bc2c:	83 c4 1c             	add    esp,0x1c
c001bc2f:	c3                   	ret    

c001bc30 <FAT::close(void*)>:
c001bc30:	83 ec 1c             	sub    esp,0x1c
c001bc33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc38:	75 0a                	jne    c001bc44 <FAT::close(void*)+0x14>
c001bc3a:	b8 04 00 00 00       	mov    eax,0x4
c001bc3f:	eb 3f                	jmp    c001bc80 <FAT::close(void*)+0x50>
c001bc41:	8d 76 00             	lea    esi,[esi+0x0]
c001bc44:	83 ec 0c             	sub    esp,0xc
c001bc47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc4b:	e8 c2 89 fe ff       	call   c0004612 <f_close>
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc57:	83 ec 0c             	sub    esp,0xc
c001bc5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc5e:	e8 44 40 ff ff       	call   c000fca7 <free>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc6a:	85 c0                	test   eax,eax
c001bc6c:	75 0a                	jne    c001bc78 <FAT::close(void*)+0x48>
c001bc6e:	b8 00 00 00 00       	mov    eax,0x0
c001bc73:	eb 0b                	jmp    c001bc80 <FAT::close(void*)+0x50>
c001bc75:	8d 76 00             	lea    esi,[esi+0x0]
c001bc78:	b8 01 00 00 00       	mov    eax,0x1
c001bc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc80:	83 c4 1c             	add    esp,0x1c
c001bc83:	c3                   	ret    

c001bc84 <FAT::closeDir(void*)>:
c001bc84:	83 ec 1c             	sub    esp,0x1c
c001bc87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc8c:	75 0a                	jne    c001bc98 <FAT::closeDir(void*)+0x14>
c001bc8e:	b8 04 00 00 00       	mov    eax,0x4
c001bc93:	eb 3f                	jmp    c001bcd4 <FAT::closeDir(void*)+0x50>
c001bc95:	8d 76 00             	lea    esi,[esi+0x0]
c001bc98:	83 ec 0c             	sub    esp,0xc
c001bc9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc9f:	e8 19 8c fe ff       	call   c00048bd <f_closedir>
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcab:	83 ec 0c             	sub    esp,0xc
c001bcae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcb2:	e8 f0 3f ff ff       	call   c000fca7 <free>
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcbe:	85 c0                	test   eax,eax
c001bcc0:	75 0a                	jne    c001bccc <FAT::closeDir(void*)+0x48>
c001bcc2:	b8 00 00 00 00       	mov    eax,0x0
c001bcc7:	eb 0b                	jmp    c001bcd4 <FAT::closeDir(void*)+0x50>
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	b8 01 00 00 00       	mov    eax,0x1
c001bcd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd4:	83 c4 1c             	add    esp,0x1c
c001bcd7:	c3                   	ret    

c001bcd8 <FAT::truncate(void*, unsigned long long)>:
c001bcd8:	83 ec 2c             	sub    esp,0x2c
c001bcdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bcdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bce3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bceb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bcf0:	75 0a                	jne    c001bcfc <FAT::truncate(void*, unsigned long long)+0x24>
c001bcf2:	b8 04 00 00 00       	mov    eax,0x4
c001bcf7:	eb 47                	jmp    c001bd40 <FAT::truncate(void*, unsigned long long)+0x68>
c001bcf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bd00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bd0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd13:	83 ec 08             	sub    esp,0x8
c001bd16:	50                   	push   eax
c001bd17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd1b:	e8 21 89 fe ff       	call   c0004641 <f_lseek>
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd2b:	85 c0                	test   eax,eax
c001bd2d:	75 09                	jne    c001bd38 <FAT::truncate(void*, unsigned long long)+0x60>
c001bd2f:	b8 00 00 00 00       	mov    eax,0x0
c001bd34:	eb 0a                	jmp    c001bd40 <FAT::truncate(void*, unsigned long long)+0x68>
c001bd36:	66 90                	xchg   ax,ax
c001bd38:	b8 01 00 00 00       	mov    eax,0x1
c001bd3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd40:	83 c4 2c             	add    esp,0x2c
c001bd43:	c3                   	ret    

c001bd44 <FAT::seek(void*, unsigned long long)>:
c001bd44:	83 ec 2c             	sub    esp,0x2c
c001bd47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd57:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bd5c:	75 0a                	jne    c001bd68 <FAT::seek(void*, unsigned long long)+0x24>
c001bd5e:	b8 04 00 00 00       	mov    eax,0x4
c001bd63:	eb 33                	jmp    c001bd98 <FAT::seek(void*, unsigned long long)+0x54>
c001bd65:	8d 76 00             	lea    esi,[esi+0x0]
c001bd68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd6c:	83 ec 08             	sub    esp,0x8
c001bd6f:	50                   	push   eax
c001bd70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd74:	e8 c8 88 fe ff       	call   c0004641 <f_lseek>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd84:	85 c0                	test   eax,eax
c001bd86:	75 08                	jne    c001bd90 <FAT::seek(void*, unsigned long long)+0x4c>
c001bd88:	b8 00 00 00 00       	mov    eax,0x0
c001bd8d:	eb 09                	jmp    c001bd98 <FAT::seek(void*, unsigned long long)+0x54>
c001bd8f:	90                   	nop
c001bd90:	b8 01 00 00 00       	mov    eax,0x1
c001bd95:	8d 76 00             	lea    esi,[esi+0x0]
c001bd98:	83 c4 2c             	add    esp,0x2c
c001bd9b:	c3                   	ret    

c001bd9c <fatWrapperReadDisk>:
c001bd9c:	53                   	push   ebx
c001bd9d:	83 ec 18             	sub    esp,0x18
c001bda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bda4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bda8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdad:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bdb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bdb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bdbc:	ba 00 00 00 00       	mov    edx,0x0
c001bdc1:	83 ec 0c             	sub    esp,0xc
c001bdc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdc8:	53                   	push   ebx
c001bdc9:	52                   	push   edx
c001bdca:	50                   	push   eax
c001bdcb:	51                   	push   ecx
c001bdcc:	e8 7f ec fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001bdd1:	83 c4 20             	add    esp,0x20
c001bdd4:	83 c4 18             	add    esp,0x18
c001bdd7:	5b                   	pop    ebx
c001bdd8:	c3                   	ret    
c001bdd9:	8d 76 00             	lea    esi,[esi+0x0]

c001bddc <fatWrapperWriteDisk>:
c001bddc:	53                   	push   ebx
c001bddd:	83 ec 18             	sub    esp,0x18
c001bde0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bde4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bde8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bded:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bdf4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bdf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bdfc:	ba 00 00 00 00       	mov    edx,0x0
c001be01:	83 ec 0c             	sub    esp,0xc
c001be04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be08:	53                   	push   ebx
c001be09:	52                   	push   edx
c001be0a:	50                   	push   eax
c001be0b:	51                   	push   ecx
c001be0c:	e8 ab ec fe ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c001be11:	83 c4 20             	add    esp,0x20
c001be14:	83 c4 18             	add    esp,0x18
c001be17:	5b                   	pop    ebx
c001be18:	c3                   	ret    
c001be19:	8d 76 00             	lea    esi,[esi+0x0]

c001be1c <fatWrapperIoctl>:
c001be1c:	53                   	push   ebx
c001be1d:	83 ec 28             	sub    esp,0x28
c001be20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001be24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001be28:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001be2c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be35:	83 f8 02             	cmp    eax,0x2
c001be38:	75 32                	jne    c001be6c <fatWrapperIoctl+0x50>
c001be3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be42:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be47:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001be4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be5e:	66 89 02             	mov    WORD PTR [edx],ax
c001be61:	b8 00 00 00 00       	mov    eax,0x0
c001be66:	e9 c5 00 00 00       	jmp    c001bf30 <fatWrapperIoctl+0x114>
c001be6b:	90                   	nop
c001be6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be71:	83 f8 01             	cmp    eax,0x1
c001be74:	75 6a                	jne    c001bee0 <fatWrapperIoctl+0xc4>
c001be76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be83:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001be8a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be90:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001be96:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001be9c:	89 c8                	mov    eax,ecx
c001be9e:	89 da                	mov    edx,ebx
c001bea0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bea4:	c1 e0 0a             	shl    eax,0xa
c001bea7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001beac:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001beb3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001beb9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bebf:	89 cb                	mov    ebx,ecx
c001bec1:	c1 fb 1f             	sar    ebx,0x1f
c001bec4:	53                   	push   ebx
c001bec5:	51                   	push   ecx
c001bec6:	52                   	push   edx
c001bec7:	50                   	push   eax
c001bec8:	e8 97 59 00 00       	call   c0021864 <__udivdi3>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	89 c2                	mov    edx,eax
c001bed2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bed6:	89 10                	mov    DWORD PTR [eax],edx
c001bed8:	b8 00 00 00 00       	mov    eax,0x0
c001bedd:	eb 51                	jmp    c001bf30 <fatWrapperIoctl+0x114>
c001bedf:	90                   	nop
c001bee0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bee5:	85 c0                	test   eax,eax
c001bee7:	75 07                	jne    c001bef0 <fatWrapperIoctl+0xd4>
c001bee9:	b8 00 00 00 00       	mov    eax,0x0
c001beee:	eb 40                	jmp    c001bf30 <fatWrapperIoctl+0x114>
c001bef0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bef5:	83 f8 03             	cmp    eax,0x3
c001bef8:	75 1a                	jne    c001bf14 <fatWrapperIoctl+0xf8>
c001befa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001befe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf06:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bf0c:	b8 00 00 00 00       	mov    eax,0x0
c001bf11:	eb 1d                	jmp    c001bf30 <fatWrapperIoctl+0x114>
c001bf13:	90                   	nop
c001bf14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf19:	83 f8 04             	cmp    eax,0x4
c001bf1c:	75 0a                	jne    c001bf28 <fatWrapperIoctl+0x10c>
c001bf1e:	b8 00 00 00 00       	mov    eax,0x0
c001bf23:	eb 0b                	jmp    c001bf30 <fatWrapperIoctl+0x114>
c001bf25:	8d 76 00             	lea    esi,[esi+0x0]
c001bf28:	b8 04 00 00 00       	mov    eax,0x4
c001bf2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf30:	83 c4 28             	add    esp,0x28
c001bf33:	5b                   	pop    ebx
c001bf34:	c3                   	ret    
c001bf35:	90                   	nop
c001bf36:	66 90                	xchg   ax,ax

c001bf38 <FAT::FAT()>:
c001bf38:	83 ec 1c             	sub    esp,0x1c
c001bf3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	50                   	push   eax
c001bf43:	e8 28 be fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001bf48:	83 c4 10             	add    esp,0x10
c001bf4b:	ba ac 55 02 c0       	mov    edx,0xc00255ac
c001bf50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf54:	89 10                	mov    DWORD PTR [eax],edx
c001bf56:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001bf60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf68:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bf6d:	7f 19                	jg     c001bf88 <FAT::FAT()+0x50>
c001bf6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf73:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001bf7e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bf83:	eb e3                	jmp    c001bf68 <FAT::FAT()+0x30>
c001bf85:	8d 76 00             	lea    esi,[esi+0x0]
c001bf88:	90                   	nop
c001bf89:	83 c4 1c             	add    esp,0x1c
c001bf8c:	c3                   	ret    
c001bf8d:	90                   	nop
c001bf8e:	66 90                	xchg   ax,ax

c001bf90 <FAT::fixFilepath(char*)>:
c001bf90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf94:	8a 00                	mov    al,BYTE PTR [eax]
c001bf96:	0f be c0             	movsx  eax,al
c001bf99:	83 f8 40             	cmp    eax,0x40
c001bf9c:	7e 2e                	jle    c001bfcc <FAT::fixFilepath(char*)+0x3c>
c001bf9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfa2:	8a 00                	mov    al,BYTE PTR [eax]
c001bfa4:	83 e8 41             	sub    eax,0x41
c001bfa7:	88 c2                	mov    dl,al
c001bfa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfad:	88 10                	mov    BYTE PTR [eax],dl
c001bfaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfb3:	8a 00                	mov    al,BYTE PTR [eax]
c001bfb5:	0f be c0             	movsx  eax,al
c001bfb8:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001bfbf:	83 c0 30             	add    eax,0x30
c001bfc2:	88 c2                	mov    dl,al
c001bfc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfc8:	88 10                	mov    BYTE PTR [eax],dl
c001bfca:	66 90                	xchg   ax,ax
c001bfcc:	90                   	nop
c001bfcd:	c3                   	ret    
c001bfce:	66 90                	xchg   ax,ax

c001bfd0 <FAT::open(char const*, void**, FileOpenMode)>:
c001bfd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfde:	74 0c                	je     c001bfec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bfe0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bfe8:	75 0e                	jne    c001bff8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bfea:	66 90                	xchg   ax,ax
c001bfec:	b8 04 00 00 00       	mov    eax,0x4
c001bff1:	e9 46 01 00 00       	jmp    c001c13c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bff6:	66 90                	xchg   ax,ax
c001bff8:	83 ec 08             	sub    esp,0x8
c001bffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c002:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c006:	50                   	push   eax
c001c007:	e8 34 46 fe ff       	call   c0000640 <strcpy>
c001c00c:	83 c4 10             	add    esp,0x10
c001c00f:	83 ec 08             	sub    esp,0x8
c001c012:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c016:	50                   	push   eax
c001c017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c01e:	e8 6d ff ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c02e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c035:	83 e0 01             	and    eax,0x1
c001c038:	74 12                	je     c001c04c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c03a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c041:	83 c8 01             	or     eax,0x1
c001c044:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c04b:	90                   	nop
c001c04c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c053:	83 e0 04             	and    eax,0x4
c001c056:	74 24                	je     c001c07c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c058:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c05f:	83 c8 30             	or     eax,0x30
c001c062:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c069:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c070:	83 c8 02             	or     eax,0x2
c001c073:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c07a:	66 90                	xchg   ax,ax
c001c07c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c083:	83 e0 02             	and    eax,0x2
c001c086:	74 14                	je     c001c09c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c088:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c08f:	83 c8 02             	or     eax,0x2
c001c092:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c099:	8d 76 00             	lea    esi,[esi+0x0]
c001c09c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0a3:	83 e0 08             	and    eax,0x8
c001c0a6:	74 14                	je     c001c0bc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c0a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0af:	83 c8 04             	or     eax,0x4
c001c0b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0c3:	83 e0 10             	and    eax,0x10
c001c0c6:	74 14                	je     c001c0dc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c0c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0cf:	83 c8 08             	or     eax,0x8
c001c0d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0dc:	83 ec 0c             	sub    esp,0xc
c001c0df:	68 28 02 00 00       	push   0x228
c001c0e4:	e8 ae 3b ff ff       	call   c000fc97 <malloc>
c001c0e9:	83 c4 10             	add    esp,0x10
c001c0ec:	89 c2                	mov    edx,eax
c001c0ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c0f5:	89 10                	mov    DWORD PTR [eax],edx
c001c0f7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c0ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c106:	8b 00                	mov    eax,DWORD PTR [eax]
c001c108:	83 ec 04             	sub    esp,0x4
c001c10b:	52                   	push   edx
c001c10c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c110:	52                   	push   edx
c001c111:	50                   	push   eax
c001c112:	e8 2c 7d fe ff       	call   c0003e43 <f_open>
c001c117:	83 c4 10             	add    esp,0x10
c001c11a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c121:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c129:	74 09                	je     c001c134 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c12b:	b8 01 00 00 00       	mov    eax,0x1
c001c130:	eb 0a                	jmp    c001c13c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c132:	66 90                	xchg   ax,ax
c001c134:	b8 00 00 00 00       	mov    eax,0x0
c001c139:	8d 76 00             	lea    esi,[esi+0x0]
c001c13c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c142:	c3                   	ret    
c001c143:	90                   	nop

c001c144 <FAT::openDir(char const*, void**)>:
c001c144:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c14a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c152:	74 0c                	je     c001c160 <FAT::openDir(char const*, void**)+0x1c>
c001c154:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c15c:	75 0e                	jne    c001c16c <FAT::openDir(char const*, void**)+0x28>
c001c15e:	66 90                	xchg   ax,ax
c001c160:	b8 04 00 00 00       	mov    eax,0x4
c001c165:	e9 82 00 00 00       	jmp    c001c1ec <FAT::openDir(char const*, void**)+0xa8>
c001c16a:	66 90                	xchg   ax,ax
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c176:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c17a:	50                   	push   eax
c001c17b:	e8 c0 44 fe ff       	call   c0000640 <strcpy>
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	83 ec 08             	sub    esp,0x8
c001c186:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c18a:	50                   	push   eax
c001c18b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c192:	e8 f9 fd ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	83 ec 0c             	sub    esp,0xc
c001c19d:	6a 30                	push   0x30
c001c19f:	e8 f3 3a ff ff       	call   c000fc97 <malloc>
c001c1a4:	83 c4 10             	add    esp,0x10
c001c1a7:	89 c2                	mov    edx,eax
c001c1a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1b0:	89 10                	mov    DWORD PTR [eax],edx
c001c1b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1bb:	83 ec 08             	sub    esp,0x8
c001c1be:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c1c2:	52                   	push   edx
c001c1c3:	50                   	push   eax
c001c1c4:	e8 29 86 fe ff       	call   c00047f2 <f_opendir>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c1d3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c1db:	74 07                	je     c001c1e4 <FAT::openDir(char const*, void**)+0xa0>
c001c1dd:	b8 01 00 00 00       	mov    eax,0x1
c001c1e2:	eb 08                	jmp    c001c1ec <FAT::openDir(char const*, void**)+0xa8>
c001c1e4:	b8 00 00 00 00       	mov    eax,0x0
c001c1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1f2:	c3                   	ret    
c001c1f3:	90                   	nop

c001c1f4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c1f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c1fa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c202:	75 0c                	jne    c001c210 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c204:	b8 04 00 00 00       	mov    eax,0x4
c001c209:	e9 d6 00 00 00       	jmp    c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c20e:	66 90                	xchg   ax,ax
c001c210:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c218:	75 0a                	jne    c001c224 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c21a:	b8 04 00 00 00       	mov    eax,0x4
c001c21f:	e9 c0 00 00 00       	jmp    c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c224:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c22c:	75 0a                	jne    c001c238 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c22e:	b8 04 00 00 00       	mov    eax,0x4
c001c233:	e9 ac 00 00 00       	jmp    c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c238:	83 ec 08             	sub    esp,0x8
c001c23b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c242:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c249:	50                   	push   eax
c001c24a:	e8 f1 43 fe ff       	call   c0000640 <strcpy>
c001c24f:	83 c4 10             	add    esp,0x10
c001c252:	83 ec 08             	sub    esp,0x8
c001c255:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c25c:	50                   	push   eax
c001c25d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c264:	e8 27 fd ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c269:	83 c4 10             	add    esp,0x10
c001c26c:	83 ec 08             	sub    esp,0x8
c001c26f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c273:	50                   	push   eax
c001c274:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c27b:	50                   	push   eax
c001c27c:	e8 f0 86 fe ff       	call   c0004971 <f_stat>
c001c281:	83 c4 10             	add    esp,0x10
c001c284:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c28b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c292:	85 c0                	test   eax,eax
c001c294:	74 0a                	je     c001c2a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c296:	83 f8 04             	cmp    eax,0x4
c001c299:	74 39                	je     c001c2d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c29b:	eb 3f                	jmp    c001c2dc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c29d:	8d 76 00             	lea    esi,[esi+0x0]
c001c2a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c2a4:	0f b6 c0             	movzx  eax,al
c001c2a7:	83 e0 10             	and    eax,0x10
c001c2aa:	0f 95 c2             	setne  dl
c001c2ad:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c2b4:	88 10                	mov    BYTE PTR [eax],dl
c001c2b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2ba:	ba 00 00 00 00       	mov    edx,0x0
c001c2bf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c2c6:	89 01                	mov    DWORD PTR [ecx],eax
c001c2c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c2cb:	b8 00 00 00 00       	mov    eax,0x0
c001c2d0:	eb 12                	jmp    c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2d2:	66 90                	xchg   ax,ax
c001c2d4:	b8 02 00 00 00       	mov    eax,0x2
c001c2d9:	eb 09                	jmp    c001c2e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2db:	90                   	nop
c001c2dc:	b8 01 00 00 00       	mov    eax,0x1
c001c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c2ea:	c3                   	ret    
c001c2eb:	90                   	nop

c001c2ec <FAT::unlink(char const*)>:
c001c2ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c2f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c2fa:	75 08                	jne    c001c304 <FAT::unlink(char const*)+0x18>
c001c2fc:	b8 04 00 00 00       	mov    eax,0x4
c001c301:	eb 61                	jmp    c001c364 <FAT::unlink(char const*)+0x78>
c001c303:	90                   	nop
c001c304:	83 ec 08             	sub    esp,0x8
c001c307:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c30e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c312:	50                   	push   eax
c001c313:	e8 28 43 fe ff       	call   c0000640 <strcpy>
c001c318:	83 c4 10             	add    esp,0x10
c001c31b:	83 ec 08             	sub    esp,0x8
c001c31e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c322:	50                   	push   eax
c001c323:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c32a:	e8 61 fc ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	83 ec 0c             	sub    esp,0xc
c001c335:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c339:	50                   	push   eax
c001c33a:	e8 a4 88 fe ff       	call   c0004be3 <f_unlink>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c349:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c350:	85 c0                	test   eax,eax
c001c352:	75 08                	jne    c001c35c <FAT::unlink(char const*)+0x70>
c001c354:	b8 00 00 00 00       	mov    eax,0x0
c001c359:	eb 09                	jmp    c001c364 <FAT::unlink(char const*)+0x78>
c001c35b:	90                   	nop
c001c35c:	b8 01 00 00 00       	mov    eax,0x1
c001c361:	8d 76 00             	lea    esi,[esi+0x0]
c001c364:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c36a:	c3                   	ret    
c001c36b:	90                   	nop

c001c36c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c36c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c372:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c379:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c380:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c384:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c388:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c390:	75 0a                	jne    c001c39c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c392:	b8 04 00 00 00       	mov    eax,0x4
c001c397:	e9 7c 01 00 00       	jmp    c001c518 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c39c:	83 ec 08             	sub    esp,0x8
c001c39f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c3a6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c3aa:	50                   	push   eax
c001c3ab:	e8 90 42 fe ff       	call   c0000640 <strcpy>
c001c3b0:	83 c4 10             	add    esp,0x10
c001c3b3:	83 ec 08             	sub    esp,0x8
c001c3b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c3ba:	50                   	push   eax
c001c3bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c3c2:	e8 c9 fb ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c3d2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c3da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3df:	83 e0 01             	and    eax,0x1
c001c3e2:	74 14                	je     c001c3f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c3e4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c3eb:	83 c8 01             	or     eax,0x1
c001c3ee:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3fd:	83 e0 02             	and    eax,0x2
c001c400:	74 12                	je     c001c414 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c402:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c409:	83 c8 20             	or     eax,0x20
c001c40c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c413:	90                   	nop
c001c414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c419:	83 e0 04             	and    eax,0x4
c001c41c:	74 12                	je     c001c430 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c41e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c425:	83 c8 04             	or     eax,0x4
c001c428:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c42f:	90                   	nop
c001c430:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c435:	83 e0 08             	and    eax,0x8
c001c438:	74 12                	je     c001c44c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001c43a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c441:	83 c8 02             	or     eax,0x2
c001c444:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c44b:	90                   	nop
c001c44c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c451:	83 e0 01             	and    eax,0x1
c001c454:	74 12                	je     c001c468 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001c456:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c45d:	83 c8 01             	or     eax,0x1
c001c460:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c467:	90                   	nop
c001c468:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c46d:	83 e0 02             	and    eax,0x2
c001c470:	74 12                	je     c001c484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001c472:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c479:	83 c8 20             	or     eax,0x20
c001c47c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c483:	90                   	nop
c001c484:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c489:	83 e0 04             	and    eax,0x4
c001c48c:	74 12                	je     c001c4a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001c48e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c495:	83 c8 04             	or     eax,0x4
c001c498:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c49f:	90                   	nop
c001c4a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4a5:	83 e0 08             	and    eax,0x8
c001c4a8:	74 12                	je     c001c4bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001c4aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c4b1:	83 c8 02             	or     eax,0x2
c001c4b4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4bb:	90                   	nop
c001c4bc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c4c3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c4ca:	09 d0                	or     eax,edx
c001c4cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4d3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c4db:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c4e3:	83 ec 04             	sub    esp,0x4
c001c4e6:	52                   	push   edx
c001c4e7:	50                   	push   eax
c001c4e8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c4ec:	50                   	push   eax
c001c4ed:	e8 66 8b fe ff       	call   c0005058 <f_chmod>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c4fc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c503:	85 c0                	test   eax,eax
c001c505:	75 09                	jne    c001c510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001c507:	b8 00 00 00 00       	mov    eax,0x0
c001c50c:	eb 0a                	jmp    c001c518 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c50e:	66 90                	xchg   ax,ax
c001c510:	b8 01 00 00 00       	mov    eax,0x1
c001c515:	8d 76 00             	lea    esi,[esi+0x0]
c001c518:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c51e:	c3                   	ret    
c001c51f:	90                   	nop

c001c520 <FAT::rename(char const*, char const*)>:
c001c520:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c526:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c52e:	74 0c                	je     c001c53c <FAT::rename(char const*, char const*)+0x1c>
c001c530:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c538:	75 0e                	jne    c001c548 <FAT::rename(char const*, char const*)+0x28>
c001c53a:	66 90                	xchg   ax,ax
c001c53c:	b8 04 00 00 00       	mov    eax,0x4
c001c541:	e9 9e 00 00 00       	jmp    c001c5e4 <FAT::rename(char const*, char const*)+0xc4>
c001c546:	66 90                	xchg   ax,ax
c001c548:	83 ec 08             	sub    esp,0x8
c001c54b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c552:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c559:	50                   	push   eax
c001c55a:	e8 e1 40 fe ff       	call   c0000640 <strcpy>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	83 ec 08             	sub    esp,0x8
c001c565:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c56c:	50                   	push   eax
c001c56d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c574:	e8 17 fa ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	83 ec 08             	sub    esp,0x8
c001c57f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c586:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c58a:	50                   	push   eax
c001c58b:	e8 b0 40 fe ff       	call   c0000640 <strcpy>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	83 ec 08             	sub    esp,0x8
c001c596:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c59a:	50                   	push   eax
c001c59b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5a2:	e8 e9 f9 ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	83 ec 08             	sub    esp,0x8
c001c5ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5b1:	50                   	push   eax
c001c5b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5b9:	50                   	push   eax
c001c5ba:	e8 e1 88 fe ff       	call   c0004ea0 <f_rename>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c5c9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c5d0:	85 c0                	test   eax,eax
c001c5d2:	75 08                	jne    c001c5dc <FAT::rename(char const*, char const*)+0xbc>
c001c5d4:	b8 00 00 00 00       	mov    eax,0x0
c001c5d9:	eb 09                	jmp    c001c5e4 <FAT::rename(char const*, char const*)+0xc4>
c001c5db:	90                   	nop
c001c5dc:	b8 01 00 00 00       	mov    eax,0x1
c001c5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5ea:	c3                   	ret    
c001c5eb:	90                   	nop

c001c5ec <FAT::mkdir(char const*)>:
c001c5ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5fa:	75 08                	jne    c001c604 <FAT::mkdir(char const*)+0x18>
c001c5fc:	b8 04 00 00 00       	mov    eax,0x4
c001c601:	eb 61                	jmp    c001c664 <FAT::mkdir(char const*)+0x78>
c001c603:	90                   	nop
c001c604:	83 ec 08             	sub    esp,0x8
c001c607:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c60e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c612:	50                   	push   eax
c001c613:	e8 28 40 fe ff       	call   c0000640 <strcpy>
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	83 ec 08             	sub    esp,0x8
c001c61e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c622:	50                   	push   eax
c001c623:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c62a:	e8 61 f9 ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c62f:	83 c4 10             	add    esp,0x10
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c639:	50                   	push   eax
c001c63a:	e8 c6 86 fe ff       	call   c0004d05 <f_mkdir>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c649:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c650:	85 c0                	test   eax,eax
c001c652:	75 08                	jne    c001c65c <FAT::mkdir(char const*)+0x70>
c001c654:	b8 00 00 00 00       	mov    eax,0x0
c001c659:	eb 09                	jmp    c001c664 <FAT::mkdir(char const*)+0x78>
c001c65b:	90                   	nop
c001c65c:	b8 01 00 00 00       	mov    eax,0x1
c001c661:	8d 76 00             	lea    esi,[esi+0x0]
c001c664:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c66a:	c3                   	ret    
c001c66b:	90                   	nop

c001c66c <FAT::exists(char const*)>:
c001c66c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c672:	83 ec 08             	sub    esp,0x8
c001c675:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c67c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c680:	50                   	push   eax
c001c681:	e8 ba 3f fe ff       	call   c0000640 <strcpy>
c001c686:	83 c4 10             	add    esp,0x10
c001c689:	83 ec 08             	sub    esp,0x8
c001c68c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c690:	50                   	push   eax
c001c691:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c698:	e8 f3 f8 ff ff       	call   c001bf90 <FAT::fixFilepath(char*)>
c001c69d:	83 c4 10             	add    esp,0x10
c001c6a0:	83 ec 08             	sub    esp,0x8
c001c6a3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c6aa:	50                   	push   eax
c001c6ab:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c6af:	50                   	push   eax
c001c6b0:	e8 bc 82 fe ff       	call   c0004971 <f_stat>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c6bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c6c6:	85 c0                	test   eax,eax
c001c6c8:	75 06                	jne    c001c6d0 <FAT::exists(char const*)+0x64>
c001c6ca:	b0 01                	mov    al,0x1
c001c6cc:	eb 06                	jmp    c001c6d4 <FAT::exists(char const*)+0x68>
c001c6ce:	66 90                	xchg   ax,ax
c001c6d0:	b0 00                	mov    al,0x0
c001c6d2:	66 90                	xchg   ax,ax
c001c6d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c6da:	c3                   	ret    
c001c6db:	90                   	nop

c001c6dc <isoReadDiscSectorHelper>:
c001c6dc:	83 ec 2c             	sub    esp,0x2c
c001c6df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c6e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c6e7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c6ec:	83 e8 41             	sub    eax,0x41
c001c6ef:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c6f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c6fa:	ba 00 00 00 00       	mov    edx,0x0
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c706:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c70a:	52                   	push   edx
c001c70b:	50                   	push   eax
c001c70c:	51                   	push   ecx
c001c70d:	e8 3e e3 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001c712:	83 c4 20             	add    esp,0x20
c001c715:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c719:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c71e:	74 0c                	je     c001c72c <isoReadDiscSectorHelper+0x50>
c001c720:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c724:	c1 e0 0b             	shl    eax,0xb
c001c727:	eb 0b                	jmp    c001c734 <isoReadDiscSectorHelper+0x58>
c001c729:	8d 76 00             	lea    esi,[esi+0x0]
c001c72c:	b8 00 00 00 00       	mov    eax,0x0
c001c731:	8d 76 00             	lea    esi,[esi+0x0]
c001c734:	83 c4 2c             	add    esp,0x2c
c001c737:	c3                   	ret    

c001c738 <iso_kprintf>:
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	83 ec 08             	sub    esp,0x8
c001c73e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c742:	68 51 52 02 c0       	push   0xc0025251
c001c747:	e8 18 a8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c74c:	83 c4 10             	add    esp,0x10
c001c74f:	90                   	nop
c001c750:	83 c4 0c             	add    esp,0xc
c001c753:	c3                   	ret    

c001c754 <iso_kprintfd>:
c001c754:	83 ec 0c             	sub    esp,0xc
c001c757:	83 ec 08             	sub    esp,0x8
c001c75a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c75e:	68 52 3f 02 c0       	push   0xc0023f52
c001c763:	e8 fc a7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c768:	83 c4 10             	add    esp,0x10
c001c76b:	90                   	nop
c001c76c:	83 c4 0c             	add    esp,0xc
c001c76f:	c3                   	ret    

c001c770 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c770:	b8 08 00 00 00       	mov    eax,0x8
c001c775:	c3                   	ret    

c001c776 <ISO9660::truncate(void*, unsigned long long)>:
c001c776:	b8 01 00 00 00       	mov    eax,0x1
c001c77b:	c3                   	ret    

c001c77c <ISO9660::getName()>:
c001c77c:	b8 10 56 02 c0       	mov    eax,0xc0025610
c001c781:	c3                   	ret    

c001c782 <ISO9660::closeDir(void*)>:
c001c782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c786:	8b 00                	mov    eax,DWORD PTR [eax]
c001c788:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c78b:	90                   	nop

c001c78c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c78c:	b8 01 00 00 00       	mov    eax,0x1
c001c791:	c3                   	ret    

c001c792 <ISO9660::unlink(char const*)>:
c001c792:	b8 01 00 00 00       	mov    eax,0x1
c001c797:	c3                   	ret    

c001c798 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c798:	b8 03 00 00 00       	mov    eax,0x3
c001c79d:	c3                   	ret    

c001c79e <ISO9660::rename(char const*, char const*)>:
c001c79e:	b8 01 00 00 00       	mov    eax,0x1
c001c7a3:	c3                   	ret    

c001c7a4 <ISO9660::mkdir(char const*)>:
c001c7a4:	b8 01 00 00 00       	mov    eax,0x1
c001c7a9:	c3                   	ret    

c001c7aa <ISO9660::~ISO9660()>:
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	ba 50 57 02 c0       	mov    edx,0xc0025750
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	89 10                	mov    DWORD PTR [eax],edx
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	50                   	push   eax
c001c7c0:	e8 cf b5 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	90                   	nop
c001c7c9:	83 c4 0c             	add    esp,0xc
c001c7cc:	c3                   	ret    
c001c7cd:	90                   	nop

c001c7ce <ISO9660::~ISO9660()>:
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d8:	e8 cd ff ff ff       	call   c001c7aa <ISO9660::~ISO9660()>
c001c7dd:	83 c4 10             	add    esp,0x10
c001c7e0:	83 ec 08             	sub    esp,0x8
c001c7e3:	6a 08                	push   0x8
c001c7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e9:	e8 31 0b ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001c7ee:	83 c4 10             	add    esp,0x10
c001c7f1:	83 c4 0c             	add    esp,0xc
c001c7f4:	c3                   	ret    
c001c7f5:	90                   	nop

c001c7f6 <ISO9660::exists(char const*)>:
c001c7f6:	83 ec 18             	sub    esp,0x18
c001c7f9:	68 2b 56 02 c0       	push   0xc002562b
c001c7fe:	e8 db 37 ff ff       	call   c000ffde <KePanic(char const*)>
c001c803:	31 c0                	xor    eax,eax
c001c805:	83 c4 1c             	add    esp,0x1c
c001c808:	c3                   	ret    
c001c809:	90                   	nop

c001c80a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c80a:	56                   	push   esi
c001c80b:	53                   	push   ebx
c001c80c:	53                   	push   ebx
c001c80d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c811:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c815:	85 db                	test   ebx,ebx
c001c817:	0f 84 ca 00 00 00    	je     c001c8e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c81d:	85 f6                	test   esi,esi
c001c81f:	0f 84 c2 00 00 00    	je     c001c8e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c825:	b8 03 00 00 00       	mov    eax,0x3
c001c82a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c82f:	0f 85 b7 00 00 00    	jne    c001c8ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c835:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c837:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c83e:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c844:	74 1b                	je     c001c861 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c846:	85 c0                	test   eax,eax
c001c848:	74 10                	je     c001c85a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	68 49 56 02 c0       	push   0xc0025649
c001c852:	e8 87 37 ff ff       	call   c000ffde <KePanic(char const*)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	8a 03                	mov    al,BYTE PTR [ebx]
c001c85c:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c861:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c864:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c86b:	85 c0                	test   eax,eax
c001c86d:	74 09                	je     c001c878 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c86f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c876:	74 48                	je     c001c8c0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c878:	83 ec 0c             	sub    esp,0xc
c001c87b:	68 59 56 02 c0       	push   0xc0025659
c001c880:	e8 df a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c885:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c888:	83 c4 10             	add    esp,0x10
c001c88b:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c892:	85 c0                	test   eax,eax
c001c894:	74 17                	je     c001c8ad <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c896:	83 ec 0c             	sub    esp,0xc
c001c899:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c8a0:	68 79 56 02 c0       	push   0xc0025679
c001c8a5:	e8 ba a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	83 ec 0c             	sub    esp,0xc
c001c8b0:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c8b7:	50                   	push   eax
c001c8b8:	e8 71 a3 fe ff       	call   c0006c2e <init_percd>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	83 c3 03             	add    ebx,0x3
c001c8c3:	51                   	push   ecx
c001c8c4:	51                   	push   ecx
c001c8c5:	6a 00                	push   0x0
c001c8c7:	53                   	push   ebx
c001c8c8:	e8 28 9e fe ff       	call   c00066f5 <iso_open>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	89 c2                	mov    edx,eax
c001c8d2:	b8 01 00 00 00       	mov    eax,0x1
c001c8d7:	83 fa ff             	cmp    edx,0xffffffff
c001c8da:	74 10                	je     c001c8ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c8dc:	83 c2 32             	add    edx,0x32
c001c8df:	31 c0                	xor    eax,eax
c001c8e1:	01 d2                	add    edx,edx
c001c8e3:	89 16                	mov    DWORD PTR [esi],edx
c001c8e5:	eb 05                	jmp    c001c8ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c8e7:	b8 04 00 00 00       	mov    eax,0x4
c001c8ec:	5a                   	pop    edx
c001c8ed:	5b                   	pop    ebx
c001c8ee:	5e                   	pop    esi
c001c8ef:	c3                   	ret    

c001c8f0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c8f0:	53                   	push   ebx
c001c8f1:	83 ec 08             	sub    esp,0x8
c001c8f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c8fc:	85 c0                	test   eax,eax
c001c8fe:	74 2d                	je     c001c92d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c900:	85 db                	test   ebx,ebx
c001c902:	74 29                	je     c001c92d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c904:	b9 02 00 00 00       	mov    ecx,0x2
c001c909:	52                   	push   edx
c001c90a:	99                   	cdq    
c001c90b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c90f:	f7 f9                	idiv   ecx
c001c911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c915:	83 e8 32             	sub    eax,0x32
c001c918:	50                   	push   eax
c001c919:	e8 7f 9e fe ff       	call   c000679d <iso_read>
c001c91e:	83 c4 10             	add    esp,0x10
c001c921:	89 03                	mov    DWORD PTR [ebx],eax
c001c923:	09 d0                	or     eax,edx
c001c925:	0f 94 c0             	sete   al
c001c928:	0f b6 c0             	movzx  eax,al
c001c92b:	eb 05                	jmp    c001c932 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c92d:	b8 04 00 00 00       	mov    eax,0x4
c001c932:	83 c4 08             	add    esp,0x8
c001c935:	5b                   	pop    ebx
c001c936:	c3                   	ret    
c001c937:	90                   	nop

c001c938 <ISO9660::seek(void*, unsigned long long)>:
c001c938:	57                   	push   edi
c001c939:	56                   	push   esi
c001c93a:	b8 04 00 00 00       	mov    eax,0x4
c001c93f:	51                   	push   ecx
c001c940:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c944:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c948:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c94c:	85 d2                	test   edx,edx
c001c94e:	74 26                	je     c001c976 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c950:	6a 00                	push   0x0
c001c952:	b9 02 00 00 00       	mov    ecx,0x2
c001c957:	57                   	push   edi
c001c958:	89 d0                	mov    eax,edx
c001c95a:	56                   	push   esi
c001c95b:	99                   	cdq    
c001c95c:	f7 f9                	idiv   ecx
c001c95e:	83 e8 32             	sub    eax,0x32
c001c961:	50                   	push   eax
c001c962:	e8 4c 9f fe ff       	call   c00068b3 <iso_seek>
c001c967:	83 c4 10             	add    esp,0x10
c001c96a:	31 f0                	xor    eax,esi
c001c96c:	31 fa                	xor    edx,edi
c001c96e:	09 d0                	or     eax,edx
c001c970:	0f 95 c0             	setne  al
c001c973:	0f b6 c0             	movzx  eax,al
c001c976:	5a                   	pop    edx
c001c977:	5e                   	pop    esi
c001c978:	5f                   	pop    edi
c001c979:	c3                   	ret    

c001c97a <ISO9660::tell(void*, unsigned long long*)>:
c001c97a:	53                   	push   ebx
c001c97b:	83 ec 08             	sub    esp,0x8
c001c97e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c982:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c986:	85 c0                	test   eax,eax
c001c988:	74 24                	je     c001c9ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c98a:	85 db                	test   ebx,ebx
c001c98c:	74 20                	je     c001c9ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c98e:	83 ec 0c             	sub    esp,0xc
c001c991:	b9 02 00 00 00       	mov    ecx,0x2
c001c996:	99                   	cdq    
c001c997:	f7 f9                	idiv   ecx
c001c999:	83 e8 32             	sub    eax,0x32
c001c99c:	50                   	push   eax
c001c99d:	e8 95 9f fe ff       	call   c0006937 <iso_tell>
c001c9a2:	83 c4 10             	add    esp,0x10
c001c9a5:	89 03                	mov    DWORD PTR [ebx],eax
c001c9a7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c9aa:	31 c0                	xor    eax,eax
c001c9ac:	eb 05                	jmp    c001c9b3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c9ae:	b8 04 00 00 00       	mov    eax,0x4
c001c9b3:	83 c4 08             	add    esp,0x8
c001c9b6:	5b                   	pop    ebx
c001c9b7:	c3                   	ret    

c001c9b8 <ISO9660::stat(void*, unsigned long long*)>:
c001c9b8:	53                   	push   ebx
c001c9b9:	83 ec 14             	sub    esp,0x14
c001c9bc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c9c0:	68 9d 56 02 c0       	push   0xc002569d
c001c9c5:	e8 9a a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c9d2:	74 2c                	je     c001ca00 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c9d4:	85 db                	test   ebx,ebx
c001c9d6:	74 28                	je     c001ca00 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c9d8:	83 ec 0c             	sub    esp,0xc
c001c9db:	b9 02 00 00 00       	mov    ecx,0x2
c001c9e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e4:	99                   	cdq    
c001c9e5:	f7 f9                	idiv   ecx
c001c9e7:	83 e8 32             	sub    eax,0x32
c001c9ea:	50                   	push   eax
c001c9eb:	e8 78 9f fe ff       	call   c0006968 <iso_total>
c001c9f0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9f7:	89 03                	mov    DWORD PTR [ebx],eax
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	31 c0                	xor    eax,eax
c001c9fe:	eb 05                	jmp    c001ca05 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ca00:	b8 04 00 00 00       	mov    eax,0x4
c001ca05:	83 c4 08             	add    esp,0x8
c001ca08:	5b                   	pop    ebx
c001ca09:	c3                   	ret    

c001ca0a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ca0a:	55                   	push   ebp
c001ca0b:	57                   	push   edi
c001ca0c:	56                   	push   esi
c001ca0d:	53                   	push   ebx
c001ca0e:	83 ec 18             	sub    esp,0x18
c001ca11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ca15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ca19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca1d:	68 a5 56 02 c0       	push   0xc00256a5
c001ca22:	e8 3d a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ca27:	83 c4 10             	add    esp,0x10
c001ca2a:	85 ff                	test   edi,edi
c001ca2c:	0f 94 c0             	sete   al
c001ca2f:	85 f6                	test   esi,esi
c001ca31:	0f 94 c2             	sete   dl
c001ca34:	09 d0                	or     eax,edx
c001ca36:	a8 01                	test   al,0x1
c001ca38:	0f 85 dd 00 00 00    	jne    c001cb1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ca3e:	85 db                	test   ebx,ebx
c001ca40:	0f 84 d5 00 00 00    	je     c001cb1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ca46:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ca49:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ca4f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ca56:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001ca5d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ca5f:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001ca65:	74 1b                	je     c001ca82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ca67:	85 c0                	test   eax,eax
c001ca69:	74 10                	je     c001ca7b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ca6b:	83 ec 0c             	sub    esp,0xc
c001ca6e:	68 49 56 02 c0       	push   0xc0025649
c001ca73:	e8 66 35 ff ff       	call   c000ffde <KePanic(char const*)>
c001ca78:	83 c4 10             	add    esp,0x10
c001ca7b:	8a 03                	mov    al,BYTE PTR [ebx]
c001ca7d:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001ca82:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ca85:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ca8c:	85 c0                	test   eax,eax
c001ca8e:	74 09                	je     c001ca99 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001ca90:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ca97:	74 51                	je     c001caea <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ca99:	83 ec 0c             	sub    esp,0xc
c001ca9c:	68 ad 56 02 c0       	push   0xc00256ad
c001caa1:	e8 be a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001caa6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001caa9:	83 c4 10             	add    esp,0x10
c001caac:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001cab4:	74 21                	je     c001cad7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	68 cd 56 02 c0       	push   0xc00256cd
c001cabe:	e8 a1 a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cac3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cad0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cad7:	83 ec 0c             	sub    esp,0xc
c001cada:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cae1:	50                   	push   eax
c001cae2:	e8 47 a1 fe ff       	call   c0006c2e <init_percd>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	83 c3 03             	add    ebx,0x3
c001caed:	52                   	push   edx
c001caee:	52                   	push   edx
c001caef:	6a 00                	push   0x0
c001caf1:	53                   	push   ebx
c001caf2:	e8 fe 9b fe ff       	call   c00066f5 <iso_open>
c001caf7:	83 c4 10             	add    esp,0x10
c001cafa:	89 c5                	mov    ebp,eax
c001cafc:	83 f8 ff             	cmp    eax,0xffffffff
c001caff:	75 21                	jne    c001cb22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cb01:	50                   	push   eax
c001cb02:	50                   	push   eax
c001cb03:	6a 01                	push   0x1
c001cb05:	53                   	push   ebx
c001cb06:	e8 ea 9b fe ff       	call   c00066f5 <iso_open>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	ba 02 00 00 00       	mov    edx,0x2
c001cb13:	40                   	inc    eax
c001cb14:	74 2b                	je     c001cb41 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb16:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cb19:	eb 24                	jmp    c001cb3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cb1b:	ba 04 00 00 00       	mov    edx,0x4
c001cb20:	eb 1f                	jmp    c001cb41 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb22:	83 ec 0c             	sub    esp,0xc
c001cb25:	50                   	push   eax
c001cb26:	e8 3d 9e fe ff       	call   c0006968 <iso_total>
c001cb2b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cb32:	89 07                	mov    DWORD PTR [edi],eax
c001cb34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb37:	e8 43 9c fe ff       	call   c000677f <iso_close>
c001cb3c:	83 c4 10             	add    esp,0x10
c001cb3f:	31 d2                	xor    edx,edx
c001cb41:	83 c4 0c             	add    esp,0xc
c001cb44:	89 d0                	mov    eax,edx
c001cb46:	5b                   	pop    ebx
c001cb47:	5e                   	pop    esi
c001cb48:	5f                   	pop    edi
c001cb49:	5d                   	pop    ebp
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <ISO9660::close(void*)>:
c001cb4c:	83 ec 0c             	sub    esp,0xc
c001cb4f:	b8 04 00 00 00       	mov    eax,0x4
c001cb54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb58:	85 d2                	test   edx,edx
c001cb5a:	74 1b                	je     c001cb77 <ISO9660::close(void*)+0x2b>
c001cb5c:	83 ec 0c             	sub    esp,0xc
c001cb5f:	b9 02 00 00 00       	mov    ecx,0x2
c001cb64:	89 d0                	mov    eax,edx
c001cb66:	99                   	cdq    
c001cb67:	f7 f9                	idiv   ecx
c001cb69:	83 e8 32             	sub    eax,0x32
c001cb6c:	50                   	push   eax
c001cb6d:	e8 0d 9c fe ff       	call   c000677f <iso_close>
c001cb72:	83 c4 10             	add    esp,0x10
c001cb75:	31 c0                	xor    eax,eax
c001cb77:	83 c4 0c             	add    esp,0xc
c001cb7a:	c3                   	ret    
c001cb7b:	90                   	nop

c001cb7c <ISO9660::openDir(char const*, void**)>:
c001cb7c:	56                   	push   esi
c001cb7d:	53                   	push   ebx
c001cb7e:	50                   	push   eax
c001cb7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cb87:	85 db                	test   ebx,ebx
c001cb89:	0f 84 bd 00 00 00    	je     c001cc4c <ISO9660::openDir(char const*, void**)+0xd0>
c001cb8f:	85 f6                	test   esi,esi
c001cb91:	0f 84 b5 00 00 00    	je     c001cc4c <ISO9660::openDir(char const*, void**)+0xd0>
c001cb97:	8a 13                	mov    dl,BYTE PTR [ebx]
c001cb99:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cba0:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001cba6:	74 1b                	je     c001cbc3 <ISO9660::openDir(char const*, void**)+0x47>
c001cba8:	85 c0                	test   eax,eax
c001cbaa:	74 10                	je     c001cbbc <ISO9660::openDir(char const*, void**)+0x40>
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	68 49 56 02 c0       	push   0xc0025649
c001cbb4:	e8 25 34 ff ff       	call   c000ffde <KePanic(char const*)>
c001cbb9:	83 c4 10             	add    esp,0x10
c001cbbc:	8a 03                	mov    al,BYTE PTR [ebx]
c001cbbe:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001cbc3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cbc6:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cbcd:	85 c0                	test   eax,eax
c001cbcf:	74 10                	je     c001cbe1 <ISO9660::openDir(char const*, void**)+0x65>
c001cbd1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cbd8:	74 1a                	je     c001cbf4 <ISO9660::openDir(char const*, void**)+0x78>
c001cbda:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cbe1:	83 ec 0c             	sub    esp,0xc
c001cbe4:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cbeb:	50                   	push   eax
c001cbec:	e8 3d a0 fe ff       	call   c0006c2e <init_percd>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	83 c3 03             	add    ebx,0x3
c001cbf7:	50                   	push   eax
c001cbf8:	50                   	push   eax
c001cbf9:	6a 01                	push   0x1
c001cbfb:	53                   	push   ebx
c001cbfc:	e8 f4 9a fe ff       	call   c00066f5 <iso_open>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	89 c3                	mov    ebx,eax
c001cc06:	83 f8 ff             	cmp    eax,0xffffffff
c001cc09:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cc0e:	75 1c                	jne    c001cc2c <ISO9660::openDir(char const*, void**)+0xb0>
c001cc10:	53                   	push   ebx
c001cc11:	53                   	push   ebx
c001cc12:	68 f1 56 02 c0       	push   0xc00256f1
c001cc17:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cc1d:	e8 12 5c ff ff       	call   c0012834 <VgaText::puts(char const*)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	b8 01 00 00 00       	mov    eax,0x1
c001cc2a:	eb 25                	jmp    c001cc51 <ISO9660::openDir(char const*, void**)+0xd5>
c001cc2c:	01 db                	add    ebx,ebx
c001cc2e:	51                   	push   ecx
c001cc2f:	83 c3 65             	add    ebx,0x65
c001cc32:	51                   	push   ecx
c001cc33:	68 04 57 02 c0       	push   0xc0025704
c001cc38:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cc3e:	e8 f1 5b ff ff       	call   c0012834 <VgaText::puts(char const*)>
c001cc43:	89 1e                	mov    DWORD PTR [esi],ebx
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	31 c0                	xor    eax,eax
c001cc4a:	eb 05                	jmp    c001cc51 <ISO9660::openDir(char const*, void**)+0xd5>
c001cc4c:	b8 04 00 00 00       	mov    eax,0x4
c001cc51:	5a                   	pop    edx
c001cc52:	5b                   	pop    ebx
c001cc53:	5e                   	pop    esi
c001cc54:	c3                   	ret    
c001cc55:	90                   	nop

c001cc56 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cc56:	55                   	push   ebp
c001cc57:	57                   	push   edi
c001cc58:	56                   	push   esi
c001cc59:	53                   	push   ebx
c001cc5a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cc60:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001cc67:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cc6e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cc76:	0f 84 e7 00 00 00    	je     c001cd63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001cc7c:	85 db                	test   ebx,ebx
c001cc7e:	0f 84 df 00 00 00    	je     c001cd63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	68 17 57 02 c0       	push   0xc0025717
c001cc8c:	e8 d3 a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cc91:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001cc98:	b9 02 00 00 00       	mov    ecx,0x2
c001cc9d:	99                   	cdq    
c001cc9e:	f7 f9                	idiv   ecx
c001cca0:	83 e8 32             	sub    eax,0x32
c001cca3:	89 04 24             	mov    DWORD PTR [esp],eax
c001cca6:	e8 0f 9d fe ff       	call   c00069ba <iso_readdir>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	89 c6                	mov    esi,eax
c001ccb0:	85 c0                	test   eax,eax
c001ccb2:	75 37                	jne    c001cceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001ccb4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001ccb9:	56                   	push   esi
c001ccba:	56                   	push   esi
c001ccbb:	68 22 57 02 c0       	push   0xc0025722
c001ccc0:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001ccc6:	e8 69 5b ff ff       	call   c0012834 <VgaText::puts(char const*)>
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	68 10 01 00 00       	push   0x110
c001ccd3:	6a 00                	push   0x0
c001ccd5:	57                   	push   edi
c001ccd6:	e8 15 38 fe ff       	call   c00004f0 <memset>
c001ccdb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	b8 01 00 00 00       	mov    eax,0x1
c001cce9:	eb 7d                	jmp    c001cd68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cceb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ccf1:	8d 68 08             	lea    ebp,[eax+0x8]
c001ccf4:	83 ec 0c             	sub    esp,0xc
c001ccf7:	55                   	push   ebp
c001ccf8:	e8 73 38 fe ff       	call   c0000570 <strlen>
c001ccfd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cd05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001cd10:	75 0a                	jne    c001cd1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001cd12:	b8 02 00 00 00       	mov    eax,0x2
c001cd17:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001cd1a:	74 05                	je     c001cd21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001cd1c:	b8 01 00 00 00       	mov    eax,0x1
c001cd21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd25:	50                   	push   eax
c001cd26:	50                   	push   eax
c001cd27:	55                   	push   ebp
c001cd28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd2c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cd30:	50                   	push   eax
c001cd31:	e8 0a 39 fe ff       	call   c0000640 <strcpy>
c001cd36:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cd3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd3f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001cd45:	5a                   	pop    edx
c001cd46:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cd4b:	59                   	pop    ecx
c001cd4c:	68 35 57 02 c0       	push   0xc0025735
c001cd51:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cd57:	e8 d8 5a ff ff       	call   c0012834 <VgaText::puts(char const*)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	31 c0                	xor    eax,eax
c001cd61:	eb 05                	jmp    c001cd68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cd63:	b8 04 00 00 00       	mov    eax,0x4
c001cd68:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cd6e:	5b                   	pop    ebx
c001cd6f:	5e                   	pop    esi
c001cd70:	5f                   	pop    edi
c001cd71:	5d                   	pop    ebp
c001cd72:	c3                   	ret    

c001cd73 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cd73:	57                   	push   edi
c001cd74:	56                   	push   esi
c001cd75:	53                   	push   ebx
c001cd76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cd7e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cd82:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001cd88:	0f be cb             	movsx  ecx,bl
c001cd8b:	75 0b                	jne    c001cd98 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001cd8d:	0f be 05 04 6a 02 c0 	movsx  eax,BYTE PTR ds:0xc0026a04
c001cd94:	39 c8                	cmp    eax,ecx
c001cd96:	74 47                	je     c001cddf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	31 d2                	xor    edx,edx
c001cd9d:	68 40 ec 02 c0       	push   0xc002ec40
c001cda2:	6a 01                	push   0x1
c001cda4:	52                   	push   edx
c001cda5:	56                   	push   esi
c001cda6:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001cdad:	e8 9e dc fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001cdb2:	83 c4 20             	add    esp,0x20
c001cdb5:	85 c0                	test   eax,eax
c001cdb7:	75 0e                	jne    c001cdc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001cdb9:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001cdbf:	88 1d 04 6a 02 c0    	mov    BYTE PTR ds:0xc0026a04,bl
c001cdc5:	eb 18                	jmp    c001cddf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cdc7:	50                   	push   eax
c001cdc8:	68 00 08 00 00       	push   0x800
c001cdcd:	6a 00                	push   0x0
c001cdcf:	57                   	push   edi
c001cdd0:	e8 1b 37 fe ff       	call   c00004f0 <memset>
c001cdd5:	83 c4 10             	add    esp,0x10
c001cdd8:	b8 01 00 00 00       	mov    eax,0x1
c001cddd:	eb 0e                	jmp    c001cded <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001cddf:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001cde4:	b9 00 08 00 00       	mov    ecx,0x800
c001cde9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdeb:	31 c0                	xor    eax,eax
c001cded:	5b                   	pop    ebx
c001cdee:	5e                   	pop    esi
c001cdef:	5f                   	pop    edi
c001cdf0:	c3                   	ret    
c001cdf1:	90                   	nop

c001cdf2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cdf2:	53                   	push   ebx
c001cdf3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001cdf9:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001ce03:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ce0a:	8d 58 41             	lea    ebx,[eax+0x41]
c001ce0d:	0f be db             	movsx  ebx,bl
c001ce10:	53                   	push   ebx
c001ce11:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ce15:	50                   	push   eax
c001ce16:	6a 10                	push   0x10
c001ce18:	e8 56 ff ff ff       	call   c001cd73 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	31 d2                	xor    edx,edx
c001ce22:	85 c0                	test   eax,eax
c001ce24:	75 33                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce26:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ce2b:	75 2c                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce2d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ce32:	75 25                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce34:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ce39:	75 1e                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce3b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ce40:	75 17                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce42:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ce47:	75 10                	jne    c001ce59 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce49:	83 ec 0c             	sub    esp,0xc
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 dc 9d fe ff       	call   c0006c2e <init_percd>
c001ce52:	83 c4 10             	add    esp,0x10
c001ce55:	40                   	inc    eax
c001ce56:	0f 95 c2             	setne  dl
c001ce59:	88 d0                	mov    al,dl
c001ce5b:	81 c4 08 08 00 00    	add    esp,0x808
c001ce61:	5b                   	pop    ebx
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <ISO9660::ISO9660()>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	50                   	push   eax
c001ce6f:	e8 fc ae fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001ce74:	83 c4 10             	add    esp,0x10
c001ce77:	ba 50 57 02 c0       	mov    edx,0xc0025750
c001ce7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce80:	89 10                	mov    DWORD PTR [eax],edx
c001ce82:	e8 b9 9e fe ff       	call   c0006d40 <fs_iso9660_init>
c001ce87:	90                   	nop
c001ce88:	83 c4 0c             	add    esp,0xc
c001ce8b:	c3                   	ret    

c001ce8c <SoundCard::beginPlayback()>:
c001ce8c:	c7 44 24 04 b4 57 02 c0 	mov    DWORD PTR [esp+0x4],0xc00257b4
c001ce94:	e9 45 31 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001ce99:	90                   	nop

c001ce9a <SoundCard::stopPlayback()>:
c001ce9a:	c7 44 24 04 b4 57 02 c0 	mov    DWORD PTR [esp+0x4],0xc00257b4
c001cea2:	e9 37 31 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001cea7:	90                   	nop

c001cea8 <SoundCard::SoundCard(char const*)>:
c001cea8:	83 ec 1c             	sub    esp,0x1c
c001ceab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceaf:	83 ec 08             	sub    esp,0x8
c001ceb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceb6:	50                   	push   eax
c001ceb7:	e8 a2 cc fe ff       	call   c0009b5e <Device::Device(char const*)>
c001cebc:	83 c4 10             	add    esp,0x10
c001cebf:	ba 00 58 02 c0       	mov    edx,0xc0025800
c001cec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec8:	89 10                	mov    DWORD PTR [eax],edx
c001ceca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cece:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ced5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ceff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf03:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cf0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf15:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cf1a:	7f 1a                	jg     c001cf36 <SoundCard::SoundCard(char const*)+0x8e>
c001cf1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf24:	83 c2 54             	add    edx,0x54
c001cf27:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cf2f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cf34:	eb df                	jmp    c001cf15 <SoundCard::SoundCard(char const*)+0x6d>
c001cf36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cf41:	90                   	nop
c001cf42:	83 c4 1c             	add    esp,0x1c
c001cf45:	c3                   	ret    

c001cf46 <SoundCard::~SoundCard()>:
c001cf46:	83 ec 0c             	sub    esp,0xc
c001cf49:	ba 00 58 02 c0       	mov    edx,0xc0025800
c001cf4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf52:	89 10                	mov    DWORD PTR [eax],edx
c001cf54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	50                   	push   eax
c001cf5c:	e8 9d c9 fe ff       	call   c00098fe <Device::~Device()>
c001cf61:	83 c4 10             	add    esp,0x10
c001cf64:	90                   	nop
c001cf65:	83 c4 0c             	add    esp,0xc
c001cf68:	c3                   	ret    
c001cf69:	90                   	nop

c001cf6a <SoundCard::~SoundCard()>:
c001cf6a:	83 ec 0c             	sub    esp,0xc
c001cf6d:	83 ec 0c             	sub    esp,0xc
c001cf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf74:	e8 cd ff ff ff       	call   c001cf46 <SoundCard::~SoundCard()>
c001cf79:	83 c4 10             	add    esp,0x10
c001cf7c:	83 ec 08             	sub    esp,0x8
c001cf7f:	68 e8 01 00 00       	push   0x1e8
c001cf84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf88:	e8 92 03 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	83 c4 0c             	add    esp,0xc
c001cf93:	c3                   	ret    

c001cf94 <SoundCard::configureRates(int, int, int)>:
c001cf94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf98:	31 c0                	xor    eax,eax
c001cf9a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cfa1:	75 20                	jne    c001cfc3 <SoundCard::configureRates(int, int, int)+0x2f>
c001cfa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfa7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cfad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfb1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cfb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cfc1:	b0 01                	mov    al,0x1
c001cfc3:	c3                   	ret    

c001cfc4 <SoundCard::getSamples16(int, short*)>:
c001cfc4:	55                   	push   ebp
c001cfc5:	57                   	push   edi
c001cfc6:	31 ff                	xor    edi,edi
c001cfc8:	56                   	push   esi
c001cfc9:	53                   	push   ebx
c001cfca:	31 db                	xor    ebx,ebx
c001cfcc:	83 ec 10             	sub    esp,0x10
c001cfcf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001cfd3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cfd7:	8d 04 36             	lea    eax,[esi+esi*1]
c001cfda:	50                   	push   eax
c001cfdb:	6a 00                	push   0x0
c001cfdd:	55                   	push   ebp
c001cfde:	e8 0d 35 fe ff       	call   c00004f0 <memset>
c001cfe3:	83 c4 10             	add    esp,0x10
c001cfe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfea:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cff1:	85 c0                	test   eax,eax
c001cff3:	74 1b                	je     c001d010 <SoundCard::getSamples16(int, short*)+0x4c>
c001cff5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cff9:	75 15                	jne    c001d010 <SoundCard::getSamples16(int, short*)+0x4c>
c001cffb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfff:	55                   	push   ebp
c001d000:	56                   	push   esi
c001d001:	50                   	push   eax
c001d002:	e8 8d 03 00 00       	call   c001d394 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	39 c7                	cmp    edi,eax
c001d00c:	7d 02                	jge    c001d010 <SoundCard::getSamples16(int, short*)+0x4c>
c001d00e:	89 c7                	mov    edi,eax
c001d010:	43                   	inc    ebx
c001d011:	83 fb 20             	cmp    ebx,0x20
c001d014:	75 d0                	jne    c001cfe6 <SoundCard::getSamples16(int, short*)+0x22>
c001d016:	83 c4 0c             	add    esp,0xc
c001d019:	89 f8                	mov    eax,edi
c001d01b:	5b                   	pop    ebx
c001d01c:	5e                   	pop    esi
c001d01d:	5f                   	pop    edi
c001d01e:	5d                   	pop    ebp
c001d01f:	c3                   	ret    

c001d020 <SoundCard::getSamples32(int, int*)>:
c001d020:	55                   	push   ebp
c001d021:	57                   	push   edi
c001d022:	31 ff                	xor    edi,edi
c001d024:	56                   	push   esi
c001d025:	31 f6                	xor    esi,esi
c001d027:	53                   	push   ebx
c001d028:	83 ec 10             	sub    esp,0x10
c001d02b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d02f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d033:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d037:	c1 e0 02             	shl    eax,0x2
c001d03a:	50                   	push   eax
c001d03b:	6a 00                	push   0x0
c001d03d:	55                   	push   ebp
c001d03e:	e8 ad 34 fe ff       	call   c00004f0 <memset>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d04d:	85 c0                	test   eax,eax
c001d04f:	74 1b                	je     c001d06c <SoundCard::getSamples32(int, int*)+0x4c>
c001d051:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d055:	75 15                	jne    c001d06c <SoundCard::getSamples32(int, int*)+0x4c>
c001d057:	53                   	push   ebx
c001d058:	55                   	push   ebp
c001d059:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d05d:	50                   	push   eax
c001d05e:	e8 fd 03 00 00       	call   c001d460 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d063:	83 c4 10             	add    esp,0x10
c001d066:	39 c6                	cmp    esi,eax
c001d068:	7d 02                	jge    c001d06c <SoundCard::getSamples32(int, int*)+0x4c>
c001d06a:	89 c6                	mov    esi,eax
c001d06c:	47                   	inc    edi
c001d06d:	83 ff 20             	cmp    edi,0x20
c001d070:	75 d4                	jne    c001d046 <SoundCard::getSamples32(int, int*)+0x26>
c001d072:	85 f6                	test   esi,esi
c001d074:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d07b:	75 0f                	jne    c001d08c <SoundCard::getSamples32(int, int*)+0x6c>
c001d07d:	85 c0                	test   eax,eax
c001d07f:	74 1b                	je     c001d09c <SoundCard::getSamples32(int, int*)+0x7c>
c001d081:	83 ec 0c             	sub    esp,0xc
c001d084:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d086:	53                   	push   ebx
c001d087:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d08a:	eb 0d                	jmp    c001d099 <SoundCard::getSamples32(int, int*)+0x79>
c001d08c:	85 c0                	test   eax,eax
c001d08e:	75 0c                	jne    c001d09c <SoundCard::getSamples32(int, int*)+0x7c>
c001d090:	83 ec 0c             	sub    esp,0xc
c001d093:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d095:	53                   	push   ebx
c001d096:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d099:	83 c4 10             	add    esp,0x10
c001d09c:	83 c4 0c             	add    esp,0xc
c001d09f:	89 f0                	mov    eax,esi
c001d0a1:	5b                   	pop    ebx
c001d0a2:	5e                   	pop    esi
c001d0a3:	5f                   	pop    edi
c001d0a4:	5d                   	pop    ebp
c001d0a5:	c3                   	ret    

c001d0a6 <SoundCard::addChannel(SoundPort*)>:
c001d0a6:	83 ec 0c             	sub    esp,0xc
c001d0a9:	31 c0                	xor    eax,eax
c001d0ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0af:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d0b7:	74 1b                	je     c001d0d4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d0b9:	40                   	inc    eax
c001d0ba:	83 f8 20             	cmp    eax,0x20
c001d0bd:	75 f0                	jne    c001d0af <SoundCard::addChannel(SoundPort*)+0x9>
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	68 d9 57 02 c0       	push   0xc00257d9
c001d0c7:	e8 12 2f ff ff       	call   c000ffde <KePanic(char const*)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	83 c8 ff             	or     eax,0xffffffff
c001d0d2:	eb 0b                	jmp    c001d0df <SoundCard::addChannel(SoundPort*)+0x39>
c001d0d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d0d8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d0df:	83 c4 0c             	add    esp,0xc
c001d0e2:	c3                   	ret    
c001d0e3:	90                   	nop

c001d0e4 <SoundCard::removeChannel(int)>:
c001d0e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0ec:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d0f7:	c3                   	ret    

c001d0f8 <SoundPort::SoundPort(int, int, int, int)>:
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d10a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d112:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d116:	89 10                	mov    DWORD PTR [eax],edx
c001d118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d120:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d127:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d12b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d12e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d133:	75 13                	jne    c001d148 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d139:	8b 00                	mov    eax,DWORD PTR [eax]
c001d13b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d140:	01 c0                	add    eax,eax
c001d142:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d146:	66 90                	xchg   ax,ax
c001d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d150:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d157:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d162:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d165:	c1 e0 02             	shl    eax,0x2
c001d168:	83 ec 0c             	sub    esp,0xc
c001d16b:	50                   	push   eax
c001d16c:	e8 26 2b ff ff       	call   c000fc97 <malloc>
c001d171:	83 c4 10             	add    esp,0x10
c001d174:	89 c2                	mov    edx,eax
c001d176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d17d:	90                   	nop
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	c3                   	ret    
c001d182:	66 90                	xchg   ax,ax

c001d184 <SoundPort::~SoundPort()>:
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d18e:	85 c0                	test   eax,eax
c001d190:	74 1e                	je     c001d1b0 <SoundPort::~SoundPort()+0x2c>
c001d192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d196:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	50                   	push   eax
c001d19d:	e8 05 2b ff ff       	call   c000fca7 <free>
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d1b0:	90                   	nop
c001d1b1:	83 c4 0c             	add    esp,0xc
c001d1b4:	c3                   	ret    
c001d1b5:	90                   	nop
c001d1b6:	66 90                	xchg   ax,ax

c001d1b8 <SoundPort::unpause()>:
c001d1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1bc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d1c0:	c3                   	ret    
c001d1c1:	90                   	nop
c001d1c2:	66 90                	xchg   ax,ax

c001d1c4 <SoundPort::pause()>:
c001d1c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1c8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d1cc:	c3                   	ret    
c001d1cd:	90                   	nop
c001d1ce:	66 90                	xchg   ax,ax

c001d1d0 <SoundPort::getBufferUsed()>:
c001d1d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d1d7:	c3                   	ret    

c001d1d8 <SoundPort::getBufferSize()>:
c001d1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d1df:	c3                   	ret    

c001d1e0 <SoundPort::buffer8(signed char*, int)>:
c001d1e0:	55                   	push   ebp
c001d1e1:	57                   	push   edi
c001d1e2:	56                   	push   esi
c001d1e3:	53                   	push   ebx
c001d1e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1e8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d1ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d1ef:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d1f2:	74 70                	je     c001d264 <SoundPort::buffer8(signed char*, int)+0x84>
c001d1f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1f8:	85 c9                	test   ecx,ecx
c001d1fa:	7e 68                	jle    c001d264 <SoundPort::buffer8(signed char*, int)+0x84>
c001d1fc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d200:	8d 48 01             	lea    ecx,[eax+0x1]
c001d203:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d206:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d209:	89 f1                	mov    ecx,esi
c001d20b:	c1 e1 18             	shl    ecx,0x18
c001d20e:	29 f1                	sub    ecx,esi
c001d210:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d213:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d216:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d219:	74 51                	je     c001d26c <SoundPort::buffer8(signed char*, int)+0x8c>
c001d21b:	31 ff                	xor    edi,edi
c001d21d:	eb 25                	jmp    c001d244 <SoundPort::buffer8(signed char*, int)+0x64>
c001d21f:	90                   	nop
c001d220:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d225:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d228:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d22b:	89 f3                	mov    ebx,esi
c001d22d:	c1 e3 18             	shl    ebx,0x18
c001d230:	29 f3                	sub    ebx,esi
c001d232:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d235:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d238:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d23b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d23e:	74 1c                	je     c001d25c <SoundPort::buffer8(signed char*, int)+0x7c>
c001d240:	89 c7                	mov    edi,eax
c001d242:	66 90                	xchg   ax,ax
c001d244:	8d 47 01             	lea    eax,[edi+0x1]
c001d247:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d24b:	75 d3                	jne    c001d220 <SoundPort::buffer8(signed char*, int)+0x40>
c001d24d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d251:	8d 76 00             	lea    esi,[esi+0x0]
c001d254:	5b                   	pop    ebx
c001d255:	5e                   	pop    esi
c001d256:	5f                   	pop    edi
c001d257:	5d                   	pop    ebp
c001d258:	c3                   	ret    
c001d259:	8d 76 00             	lea    esi,[esi+0x0]
c001d25c:	5b                   	pop    ebx
c001d25d:	8d 47 02             	lea    eax,[edi+0x2]
c001d260:	5e                   	pop    esi
c001d261:	5f                   	pop    edi
c001d262:	5d                   	pop    ebp
c001d263:	c3                   	ret    
c001d264:	5b                   	pop    ebx
c001d265:	31 c0                	xor    eax,eax
c001d267:	5e                   	pop    esi
c001d268:	5f                   	pop    edi
c001d269:	5d                   	pop    ebp
c001d26a:	c3                   	ret    
c001d26b:	90                   	nop
c001d26c:	b8 01 00 00 00       	mov    eax,0x1
c001d271:	eb e1                	jmp    c001d254 <SoundPort::buffer8(signed char*, int)+0x74>
c001d273:	90                   	nop

c001d274 <SoundPort::buffer16(short*, int)>:
c001d274:	55                   	push   ebp
c001d275:	57                   	push   edi
c001d276:	56                   	push   esi
c001d277:	53                   	push   ebx
c001d278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d27c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d280:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d283:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d286:	74 70                	je     c001d2f8 <SoundPort::buffer16(short*, int)+0x84>
c001d288:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d28c:	85 c9                	test   ecx,ecx
c001d28e:	7e 68                	jle    c001d2f8 <SoundPort::buffer16(short*, int)+0x84>
c001d290:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d294:	8d 48 01             	lea    ecx,[eax+0x1]
c001d297:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d29a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d29d:	89 f1                	mov    ecx,esi
c001d29f:	c1 e1 10             	shl    ecx,0x10
c001d2a2:	29 f1                	sub    ecx,esi
c001d2a4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d2a7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2ad:	74 51                	je     c001d300 <SoundPort::buffer16(short*, int)+0x8c>
c001d2af:	31 ff                	xor    edi,edi
c001d2b1:	eb 25                	jmp    c001d2d8 <SoundPort::buffer16(short*, int)+0x64>
c001d2b3:	90                   	nop
c001d2b4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d2b9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d2bc:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d2bf:	89 f3                	mov    ebx,esi
c001d2c1:	c1 e3 10             	shl    ebx,0x10
c001d2c4:	29 f3                	sub    ebx,esi
c001d2c6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d2c9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d2cc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2cf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2d2:	74 1c                	je     c001d2f0 <SoundPort::buffer16(short*, int)+0x7c>
c001d2d4:	89 c7                	mov    edi,eax
c001d2d6:	66 90                	xchg   ax,ax
c001d2d8:	8d 47 01             	lea    eax,[edi+0x1]
c001d2db:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d2df:	75 d3                	jne    c001d2b4 <SoundPort::buffer16(short*, int)+0x40>
c001d2e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2e8:	5b                   	pop    ebx
c001d2e9:	5e                   	pop    esi
c001d2ea:	5f                   	pop    edi
c001d2eb:	5d                   	pop    ebp
c001d2ec:	c3                   	ret    
c001d2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d2f0:	5b                   	pop    ebx
c001d2f1:	8d 47 02             	lea    eax,[edi+0x2]
c001d2f4:	5e                   	pop    esi
c001d2f5:	5f                   	pop    edi
c001d2f6:	5d                   	pop    ebp
c001d2f7:	c3                   	ret    
c001d2f8:	5b                   	pop    ebx
c001d2f9:	31 c0                	xor    eax,eax
c001d2fb:	5e                   	pop    esi
c001d2fc:	5f                   	pop    edi
c001d2fd:	5d                   	pop    ebp
c001d2fe:	c3                   	ret    
c001d2ff:	90                   	nop
c001d300:	b8 01 00 00 00       	mov    eax,0x1
c001d305:	eb e1                	jmp    c001d2e8 <SoundPort::buffer16(short*, int)+0x74>
c001d307:	90                   	nop

c001d308 <SoundPort::buffer32(int*, int)>:
c001d308:	55                   	push   ebp
c001d309:	57                   	push   edi
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	83 ec 04             	sub    esp,0x4
c001d30f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d317:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d31a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d31e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d321:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d324:	74 5a                	je     c001d380 <SoundPort::buffer32(int*, int)+0x78>
c001d326:	85 c0                	test   eax,eax
c001d328:	7e 56                	jle    c001d380 <SoundPort::buffer32(int*, int)+0x78>
c001d32a:	8d 71 01             	lea    esi,[ecx+0x1]
c001d32d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d330:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d333:	8b 37                	mov    esi,DWORD PTR [edi]
c001d335:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d338:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d33b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d33e:	74 4c                	je     c001d38c <SoundPort::buffer32(int*, int)+0x84>
c001d340:	31 f6                	xor    esi,esi
c001d342:	eb 1c                	jmp    c001d360 <SoundPort::buffer32(int*, int)+0x58>
c001d344:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d347:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d34a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d34d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d350:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d354:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d357:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d35a:	74 18                	je     c001d374 <SoundPort::buffer32(int*, int)+0x6c>
c001d35c:	89 de                	mov    esi,ebx
c001d35e:	66 90                	xchg   ax,ax
c001d360:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d363:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d366:	75 dc                	jne    c001d344 <SoundPort::buffer32(int*, int)+0x3c>
c001d368:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d36b:	90                   	nop
c001d36c:	83 c4 04             	add    esp,0x4
c001d36f:	5b                   	pop    ebx
c001d370:	5e                   	pop    esi
c001d371:	5f                   	pop    edi
c001d372:	5d                   	pop    ebp
c001d373:	c3                   	ret    
c001d374:	83 c4 04             	add    esp,0x4
c001d377:	8d 46 02             	lea    eax,[esi+0x2]
c001d37a:	5b                   	pop    ebx
c001d37b:	5e                   	pop    esi
c001d37c:	5f                   	pop    edi
c001d37d:	5d                   	pop    ebp
c001d37e:	c3                   	ret    
c001d37f:	90                   	nop
c001d380:	83 c4 04             	add    esp,0x4
c001d383:	31 c0                	xor    eax,eax
c001d385:	5b                   	pop    ebx
c001d386:	5e                   	pop    esi
c001d387:	5f                   	pop    edi
c001d388:	5d                   	pop    ebp
c001d389:	c3                   	ret    
c001d38a:	66 90                	xchg   ax,ax
c001d38c:	b8 01 00 00 00       	mov    eax,0x1
c001d391:	eb d9                	jmp    c001d36c <SoundPort::buffer32(int*, int)+0x64>
c001d393:	90                   	nop

c001d394 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d394:	57                   	push   edi
c001d395:	56                   	push   esi
c001d396:	53                   	push   ebx
c001d397:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d39b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d39f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d3a5:	39 03                	cmp    DWORD PTR [ebx],eax
c001d3a7:	74 13                	je     c001d3bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d3a9:	83 ec 0c             	sub    esp,0xc
c001d3ac:	68 2c 58 02 c0       	push   0xc002582c
c001d3b1:	e8 28 2c ff ff       	call   c000ffde <KePanic(char const*)>
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3bc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d3c2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d3c5:	74 11                	je     c001d3d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d3c7:	83 ec 0c             	sub    esp,0xc
c001d3ca:	68 6b 58 02 c0       	push   0xc002586b
c001d3cf:	e8 0a 2c ff ff       	call   c000ffde <KePanic(char const*)>
c001d3d4:	83 c4 10             	add    esp,0x10
c001d3d7:	90                   	nop
c001d3d8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d3de:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d3e1:	74 11                	je     c001d3f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d3e3:	83 ec 0c             	sub    esp,0xc
c001d3e6:	68 6b 58 02 c0       	push   0xc002586b
c001d3eb:	e8 ee 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	90                   	nop
c001d3f4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d3f7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d3fb:	7e 07                	jle    c001d404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d3fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d401:	8d 76 00             	lea    esi,[esi+0x0]
c001d404:	85 f6                	test   esi,esi
c001d406:	7e 2c                	jle    c001d434 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d408:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d40c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d40f:	31 c9                	xor    ecx,ecx
c001d411:	01 d7                	add    edi,edx
c001d413:	90                   	nop
c001d414:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d417:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d41a:	85 c0                	test   eax,eax
c001d41c:	79 06                	jns    c001d424 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d41e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d423:	90                   	nop
c001d424:	c1 f8 0f             	sar    eax,0xf
c001d427:	83 c1 04             	add    ecx,0x4
c001d42a:	66 01 02             	add    WORD PTR [edx],ax
c001d42d:	83 c2 02             	add    edx,0x2
c001d430:	39 d7                	cmp    edi,edx
c001d432:	75 e0                	jne    c001d414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d434:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d437:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d43a:	83 ec 04             	sub    esp,0x4
c001d43d:	29 f0                	sub    eax,esi
c001d43f:	c1 e0 02             	shl    eax,0x2
c001d442:	50                   	push   eax
c001d443:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d446:	50                   	push   eax
c001d447:	52                   	push   edx
c001d448:	e8 83 2f fe ff       	call   c00003d0 <memmove>
c001d44d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	29 f0                	sub    eax,esi
c001d455:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d458:	89 f0                	mov    eax,esi
c001d45a:	5b                   	pop    ebx
c001d45b:	5e                   	pop    esi
c001d45c:	5f                   	pop    edi
c001d45d:	c3                   	ret    
c001d45e:	66 90                	xchg   ax,ax

c001d460 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d460:	57                   	push   edi
c001d461:	56                   	push   esi
c001d462:	53                   	push   ebx
c001d463:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d467:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d46b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d46f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d475:	39 06                	cmp    DWORD PTR [esi],eax
c001d477:	74 13                	je     c001d48c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d479:	83 ec 0c             	sub    esp,0xc
c001d47c:	68 4c 58 02 c0       	push   0xc002584c
c001d481:	e8 58 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	8d 76 00             	lea    esi,[esi+0x0]
c001d48c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d492:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d495:	74 11                	je     c001d4a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d497:	83 ec 0c             	sub    esp,0xc
c001d49a:	68 87 58 02 c0       	push   0xc0025887
c001d49f:	e8 3a 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	90                   	nop
c001d4a8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d4ae:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d4b1:	74 11                	je     c001d4c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d4b3:	83 ec 0c             	sub    esp,0xc
c001d4b6:	68 87 58 02 c0       	push   0xc0025887
c001d4bb:	e8 1e 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d4c0:	83 c4 10             	add    esp,0x10
c001d4c3:	90                   	nop
c001d4c4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d4c7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d4cb:	7e 07                	jle    c001d4d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d4cd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4d4:	85 ff                	test   edi,edi
c001d4d6:	7e 1c                	jle    c001d4f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d4d8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d4df:	31 c0                	xor    eax,eax
c001d4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d4e7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d4ea:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d4ed:	83 c0 04             	add    eax,0x4
c001d4f0:	39 c1                	cmp    ecx,eax
c001d4f2:	75 f0                	jne    c001d4e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d4f4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d4f7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d4fa:	83 ec 04             	sub    esp,0x4
c001d4fd:	29 f8                	sub    eax,edi
c001d4ff:	c1 e0 02             	shl    eax,0x2
c001d502:	50                   	push   eax
c001d503:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d506:	50                   	push   eax
c001d507:	52                   	push   edx
c001d508:	e8 c3 2e fe ff       	call   c00003d0 <memmove>
c001d50d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d510:	83 c4 10             	add    esp,0x10
c001d513:	29 f8                	sub    eax,edi
c001d515:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001d518:	89 f8                	mov    eax,edi
c001d51a:	5b                   	pop    ebx
c001d51b:	5e                   	pop    esi
c001d51c:	5f                   	pop    edi
c001d51d:	c3                   	ret    

c001d51e <PCI::open(int, int, void*)>:
c001d51e:	83 ec 18             	sub    esp,0x18
c001d521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d525:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d529:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d52f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d531:	50                   	push   eax
c001d532:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d535:	31 c0                	xor    eax,eax
c001d537:	83 c4 1c             	add    esp,0x1c
c001d53a:	c3                   	ret    
c001d53b:	90                   	nop

c001d53c <PCI::close(int, int, void*)>:
c001d53c:	31 c0                	xor    eax,eax
c001d53e:	c3                   	ret    
c001d53f:	90                   	nop

c001d540 <PCI::PCI()>:
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d547:	83 ec 08             	sub    esp,0x8
c001d54a:	68 a3 58 02 c0       	push   0xc00258a3
c001d54f:	50                   	push   eax
c001d550:	e8 b7 b3 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	ba b0 59 02 c0       	mov    edx,0xc00259b0
c001d55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d561:	89 10                	mov    DWORD PTR [eax],edx
c001d563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d567:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d575:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d584:	0f b6 d0             	movzx  edx,al
c001d587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d596:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d59c:	0f b6 d0             	movzx  edx,al
c001d59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5b2:	8d 50 01             	lea    edx,[eax+0x1]
c001d5b5:	88 d1                	mov    cl,dl
c001d5b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d5bb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d5c1:	0f b6 d0             	movzx  edx,al
c001d5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d5cc:	83 c9 c0             	or     ecx,0xffffffc0
c001d5cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d5d3:	90                   	nop
c001d5d4:	83 c4 0c             	add    esp,0xc
c001d5d7:	c3                   	ret    

c001d5d8 <PCI::readBAR8(unsigned int, int)>:
c001d5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5e0:	f6 c2 01             	test   dl,0x1
c001d5e3:	74 07                	je     c001d5ec <PCI::readBAR8(unsigned int, int)+0x14>
c001d5e5:	83 e2 fc             	and    edx,0xfffffffc
c001d5e8:	01 c2                	add    edx,eax
c001d5ea:	ec                   	in     al,dx
c001d5eb:	c3                   	ret    
c001d5ec:	83 e2 f0             	and    edx,0xfffffff0
c001d5ef:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d5f2:	c3                   	ret    
c001d5f3:	90                   	nop

c001d5f4 <PCI::readBAR16(unsigned int, int)>:
c001d5f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5fc:	f6 c2 01             	test   dl,0x1
c001d5ff:	74 08                	je     c001d609 <PCI::readBAR16(unsigned int, int)+0x15>
c001d601:	83 e2 fc             	and    edx,0xfffffffc
c001d604:	01 c2                	add    edx,eax
c001d606:	66 ed                	in     ax,dx
c001d608:	c3                   	ret    
c001d609:	83 e2 f0             	and    edx,0xfffffff0
c001d60c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d610:	c3                   	ret    
c001d611:	90                   	nop

c001d612 <PCI::readBAR32(unsigned int, int)>:
c001d612:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d61a:	f6 c2 01             	test   dl,0x1
c001d61d:	74 07                	je     c001d626 <PCI::readBAR32(unsigned int, int)+0x14>
c001d61f:	83 e2 fc             	and    edx,0xfffffffc
c001d622:	01 c2                	add    edx,eax
c001d624:	ed                   	in     eax,dx
c001d625:	c3                   	ret    
c001d626:	83 e2 f0             	and    edx,0xfffffff0
c001d629:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d62e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d636:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d63a:	f6 c2 01             	test   dl,0x1
c001d63d:	74 07                	je     c001d646 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d63f:	83 e2 fc             	and    edx,0xfffffffc
c001d642:	01 ca                	add    edx,ecx
c001d644:	ee                   	out    dx,al
c001d645:	c3                   	ret    
c001d646:	83 e2 f0             	and    edx,0xfffffff0
c001d649:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d64c:	c3                   	ret    
c001d64d:	90                   	nop

c001d64e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d64e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d65a:	f6 c2 01             	test   dl,0x1
c001d65d:	74 08                	je     c001d667 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d65f:	83 e2 fc             	and    edx,0xfffffffc
c001d662:	01 ca                	add    edx,ecx
c001d664:	66 ef                	out    dx,ax
c001d666:	c3                   	ret    
c001d667:	83 e2 f0             	and    edx,0xfffffff0
c001d66a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d67c:	f6 c2 01             	test   dl,0x1
c001d67f:	74 07                	je     c001d688 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d681:	83 e2 fc             	and    edx,0xfffffffc
c001d684:	01 ca                	add    edx,ecx
c001d686:	ef                   	out    dx,eax
c001d687:	c3                   	ret    
c001d688:	83 e2 f0             	and    edx,0xfffffff0
c001d68b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d68e:	c3                   	ret    
c001d68f:	90                   	nop

c001d690 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d690:	55                   	push   ebp
c001d691:	57                   	push   edi
c001d692:	56                   	push   esi
c001d693:	53                   	push   ebx
c001d694:	83 ec 0c             	sub    esp,0xc
c001d697:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d69c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d6a0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d6a4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6a8:	83 fe 07             	cmp    esi,0x7
c001d6ab:	76 10                	jbe    c001d6bd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d6ad:	83 ec 0c             	sub    esp,0xc
c001d6b0:	68 ab 58 02 c0       	push   0xc00258ab
c001d6b5:	e8 24 29 ff ff       	call   c000ffde <KePanic(char const*)>
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	0f b6 db             	movzx  ebx,bl
c001d6c0:	83 fb 0f             	cmp    ebx,0xf
c001d6c3:	76 10                	jbe    c001d6d5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d6c5:	83 ec 0c             	sub    esp,0xc
c001d6c8:	68 db 58 02 c0       	push   0xc00258db
c001d6cd:	e8 0c 29 ff ff       	call   c000ffde <KePanic(char const*)>
c001d6d2:	83 c4 10             	add    esp,0x10
c001d6d5:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6d8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d6dd:	83 c8 f0             	or     eax,0xfffffff0
c001d6e0:	ee                   	out    dx,al
c001d6e1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d6e6:	89 e8                	mov    eax,ebp
c001d6e8:	ee                   	out    dx,al
c001d6e9:	83 c4 0c             	add    esp,0xc
c001d6ec:	89 d8                	mov    eax,ebx
c001d6ee:	89 f9                	mov    ecx,edi
c001d6f0:	c1 e0 08             	shl    eax,0x8
c001d6f3:	0f b6 d9             	movzx  ebx,cl
c001d6f6:	83 e3 fc             	and    ebx,0xfffffffc
c001d6f9:	09 d8                	or     eax,ebx
c001d6fb:	5b                   	pop    ebx
c001d6fc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d701:	5e                   	pop    esi
c001d702:	5f                   	pop    edi
c001d703:	5d                   	pop    ebp
c001d704:	c3                   	ret    
c001d705:	90                   	nop

c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d706:	57                   	push   edi
c001d707:	56                   	push   esi
c001d708:	53                   	push   ebx
c001d709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d70d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d711:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d71b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d71f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d723:	83 ff 01             	cmp    edi,0x1
c001d726:	75 3f                	jne    c001d767 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d728:	89 de                	mov    esi,ebx
c001d72a:	0f b6 c0             	movzx  eax,al
c001d72d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d733:	c1 e0 10             	shl    eax,0x10
c001d736:	0f b6 c9             	movzx  ecx,cl
c001d739:	09 f0                	or     eax,esi
c001d73b:	c1 e1 08             	shl    ecx,0x8
c001d73e:	0f b6 d2             	movzx  edx,dl
c001d741:	09 c8                	or     eax,ecx
c001d743:	c1 e2 0b             	shl    edx,0xb
c001d746:	09 d0                	or     eax,edx
c001d748:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d74d:	0d 00 00 00 80       	or     eax,0x80000000
c001d752:	ef                   	out    dx,eax
c001d753:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d758:	ed                   	in     eax,dx
c001d759:	83 e3 02             	and    ebx,0x2
c001d75c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d763:	d3 e8                	shr    eax,cl
c001d765:	eb 44                	jmp    c001d7ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d767:	83 ff 02             	cmp    edi,0x2
c001d76a:	75 2d                	jne    c001d799 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	0f b6 c9             	movzx  ecx,cl
c001d772:	0f b6 d2             	movzx  edx,dl
c001d775:	0f b6 fb             	movzx  edi,bl
c001d778:	0f b6 c0             	movzx  eax,al
c001d77b:	57                   	push   edi
c001d77c:	51                   	push   ecx
c001d77d:	52                   	push   edx
c001d77e:	50                   	push   eax
c001d77f:	56                   	push   esi
c001d780:	e8 0b ff ff ff       	call   c001d690 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d785:	89 c2                	mov    edx,eax
c001d787:	ed                   	in     eax,dx
c001d788:	83 e3 02             	and    ebx,0x2
c001d78b:	83 c4 20             	add    esp,0x20
c001d78e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d795:	d3 e8                	shr    eax,cl
c001d797:	eb 12                	jmp    c001d7ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d799:	83 ec 0c             	sub    esp,0xc
c001d79c:	68 0b 59 02 c0       	push   0xc002590b
c001d7a1:	e8 38 28 ff ff       	call   c000ffde <KePanic(char const*)>
c001d7a6:	83 c4 10             	add    esp,0x10
c001d7a9:	31 c0                	xor    eax,eax
c001d7ab:	5b                   	pop    ebx
c001d7ac:	5e                   	pop    esi
c001d7ad:	5f                   	pop    edi
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d7b0:	83 ec 18             	sub    esp,0x18
c001d7b3:	6a 00                	push   0x0
c001d7b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7ba:	50                   	push   eax
c001d7bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7c0:	50                   	push   eax
c001d7c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7c6:	50                   	push   eax
c001d7c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7cb:	e8 36 ff ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7d0:	83 c4 2c             	add    esp,0x2c
c001d7d3:	c3                   	ret    

c001d7d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d7d4:	83 ec 18             	sub    esp,0x18
c001d7d7:	6a 0e                	push   0xe
c001d7d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7de:	50                   	push   eax
c001d7df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7e4:	50                   	push   eax
c001d7e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7ea:	50                   	push   eax
c001d7eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7ef:	e8 12 ff ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7f4:	83 c4 2c             	add    esp,0x2c
c001d7f7:	0f b6 c0             	movzx  eax,al
c001d7fa:	c3                   	ret    
c001d7fb:	90                   	nop

c001d7fc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d7fc:	55                   	push   ebp
c001d7fd:	57                   	push   edi
c001d7fe:	56                   	push   esi
c001d7ff:	53                   	push   ebx
c001d800:	83 ec 18             	sub    esp,0x18
c001d803:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d808:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d80d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d812:	6a 0a                	push   0xa
c001d814:	56                   	push   esi
c001d815:	55                   	push   ebp
c001d816:	57                   	push   edi
c001d817:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d81b:	e8 e6 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d820:	83 c4 14             	add    esp,0x14
c001d823:	89 c3                	mov    ebx,eax
c001d825:	6a 0a                	push   0xa
c001d827:	0f b6 db             	movzx  ebx,bl
c001d82a:	56                   	push   esi
c001d82b:	55                   	push   ebp
c001d82c:	57                   	push   edi
c001d82d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d831:	e8 d0 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d836:	83 c4 2c             	add    esp,0x2c
c001d839:	25 00 ff 00 00       	and    eax,0xff00
c001d83e:	09 d8                	or     eax,ebx
c001d840:	5b                   	pop    ebx
c001d841:	5e                   	pop    esi
c001d842:	5f                   	pop    edi
c001d843:	5d                   	pop    ebp
c001d844:	c3                   	ret    
c001d845:	90                   	nop

c001d846 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d846:	83 ec 18             	sub    esp,0x18
c001d849:	6a 08                	push   0x8
c001d84b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d850:	50                   	push   eax
c001d851:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d856:	50                   	push   eax
c001d857:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d85c:	50                   	push   eax
c001d85d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d861:	e8 a0 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d866:	83 c4 2c             	add    esp,0x2c
c001d869:	0f b6 c4             	movzx  eax,ah
c001d86c:	c3                   	ret    
c001d86d:	90                   	nop

c001d86e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d86e:	83 ec 18             	sub    esp,0x18
c001d871:	6a 08                	push   0x8
c001d873:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d878:	50                   	push   eax
c001d879:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d87e:	50                   	push   eax
c001d87f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d884:	50                   	push   eax
c001d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d889:	e8 78 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d88e:	83 c4 2c             	add    esp,0x2c
c001d891:	c3                   	ret    

c001d892 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d892:	83 ec 18             	sub    esp,0x18
c001d895:	6a 3c                	push   0x3c
c001d897:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d89c:	50                   	push   eax
c001d89d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8a2:	50                   	push   eax
c001d8a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8a8:	50                   	push   eax
c001d8a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8ad:	e8 54 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8b2:	83 c4 2c             	add    esp,0x2c
c001d8b5:	c3                   	ret    

c001d8b6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d8b6:	83 ec 18             	sub    esp,0x18
c001d8b9:	6a 18                	push   0x18
c001d8bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8c0:	50                   	push   eax
c001d8c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8c6:	50                   	push   eax
c001d8c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8cc:	50                   	push   eax
c001d8cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8d1:	e8 30 fe ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8d6:	83 c4 2c             	add    esp,0x2c
c001d8d9:	0f b6 c4             	movzx  eax,ah
c001d8dc:	c3                   	ret    
c001d8dd:	90                   	nop

c001d8de <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d8de:	55                   	push   ebp
c001d8df:	57                   	push   edi
c001d8e0:	56                   	push   esi
c001d8e1:	53                   	push   ebx
c001d8e2:	83 ec 28             	sub    esp,0x28
c001d8e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d8e9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d8ee:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d8f3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d8f8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d8ff:	8d 43 12             	lea    eax,[ebx+0x12]
c001d902:	83 c3 10             	add    ebx,0x10
c001d905:	0f b6 c0             	movzx  eax,al
c001d908:	0f b6 db             	movzx  ebx,bl
c001d90b:	50                   	push   eax
c001d90c:	51                   	push   ecx
c001d90d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d911:	57                   	push   edi
c001d912:	55                   	push   ebp
c001d913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d917:	e8 ea fd ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d91c:	83 c4 14             	add    esp,0x14
c001d91f:	89 c6                	mov    esi,eax
c001d921:	53                   	push   ebx
c001d922:	c1 e6 10             	shl    esi,0x10
c001d925:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d929:	51                   	push   ecx
c001d92a:	57                   	push   edi
c001d92b:	55                   	push   ebp
c001d92c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d930:	e8 d1 fd ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d935:	83 c4 3c             	add    esp,0x3c
c001d938:	0f b7 c0             	movzx  eax,ax
c001d93b:	5b                   	pop    ebx
c001d93c:	09 f0                	or     eax,esi
c001d93e:	5e                   	pop    esi
c001d93f:	5f                   	pop    edi
c001d940:	5d                   	pop    ebp
c001d941:	c3                   	ret    

c001d942 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d942:	55                   	push   ebp
c001d943:	57                   	push   edi
c001d944:	56                   	push   esi
c001d945:	53                   	push   ebx
c001d946:	83 ec 0c             	sub    esp,0xc
c001d949:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d94d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d951:	89 f5                	mov    ebp,esi
c001d953:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d95d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d961:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d965:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d969:	83 f9 01             	cmp    ecx,0x1
c001d96c:	75 5d                	jne    c001d9cb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d96e:	0f b6 c8             	movzx  ecx,al
c001d971:	0f b6 d2             	movzx  edx,dl
c001d974:	c1 e1 10             	shl    ecx,0x10
c001d977:	c1 e2 0b             	shl    edx,0xb
c001d97a:	89 f0                	mov    eax,esi
c001d97c:	25 fc 00 00 00       	and    eax,0xfc
c001d981:	09 c1                	or     ecx,eax
c001d983:	89 e8                	mov    eax,ebp
c001d985:	0f b6 c0             	movzx  eax,al
c001d988:	c1 e0 08             	shl    eax,0x8
c001d98b:	09 c1                	or     ecx,eax
c001d98d:	09 d1                	or     ecx,edx
c001d98f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d994:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d99a:	89 c8                	mov    eax,ecx
c001d99c:	ef                   	out    dx,eax
c001d99d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9a2:	ed                   	in     eax,dx
c001d9a3:	0f b7 db             	movzx  ebx,bx
c001d9a6:	83 e6 02             	and    esi,0x2
c001d9a9:	74 0a                	je     c001d9b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d9ab:	0f b7 d0             	movzx  edx,ax
c001d9ae:	c1 e3 10             	shl    ebx,0x10
c001d9b1:	09 d3                	or     ebx,edx
c001d9b3:	eb 05                	jmp    c001d9ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d9b5:	66 31 c0             	xor    ax,ax
c001d9b8:	09 c3                	or     ebx,eax
c001d9ba:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9bf:	89 c8                	mov    eax,ecx
c001d9c1:	ef                   	out    dx,eax
c001d9c2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9c7:	89 d8                	mov    eax,ebx
c001d9c9:	eb 41                	jmp    c001da0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d9cb:	83 f9 02             	cmp    ecx,0x2
c001d9ce:	75 45                	jne    c001da15 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	0f b6 d2             	movzx  edx,dl
c001d9d6:	89 f1                	mov    ecx,esi
c001d9d8:	0f b6 c0             	movzx  eax,al
c001d9db:	0f b6 f1             	movzx  esi,cl
c001d9de:	89 e9                	mov    ecx,ebp
c001d9e0:	56                   	push   esi
c001d9e1:	0f b6 c9             	movzx  ecx,cl
c001d9e4:	51                   	push   ecx
c001d9e5:	52                   	push   edx
c001d9e6:	50                   	push   eax
c001d9e7:	57                   	push   edi
c001d9e8:	e8 a3 fc ff ff       	call   c001d690 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9ed:	89 c2                	mov    edx,eax
c001d9ef:	ed                   	in     eax,dx
c001d9f0:	83 c4 20             	add    esp,0x20
c001d9f3:	0f b7 db             	movzx  ebx,bx
c001d9f6:	f6 c2 02             	test   dl,0x2
c001d9f9:	74 0c                	je     c001da07 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d9fb:	0f b7 c8             	movzx  ecx,ax
c001d9fe:	89 d8                	mov    eax,ebx
c001da00:	c1 e0 10             	shl    eax,0x10
c001da03:	09 c8                	or     eax,ecx
c001da05:	eb 05                	jmp    c001da0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da07:	66 31 c0             	xor    ax,ax
c001da0a:	09 d8                	or     eax,ebx
c001da0c:	ef                   	out    dx,eax
c001da0d:	83 c4 0c             	add    esp,0xc
c001da10:	5b                   	pop    ebx
c001da11:	5e                   	pop    esi
c001da12:	5f                   	pop    edi
c001da13:	5d                   	pop    ebp
c001da14:	c3                   	ret    
c001da15:	c7 44 24 20 0b 59 02 c0 	mov    DWORD PTR [esp+0x20],0xc002590b
c001da1d:	83 c4 0c             	add    esp,0xc
c001da20:	5b                   	pop    ebx
c001da21:	5e                   	pop    esi
c001da22:	5f                   	pop    edi
c001da23:	5d                   	pop    ebp
c001da24:	e9 b5 25 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001da29:	90                   	nop

c001da2a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001da2a:	55                   	push   ebp
c001da2b:	57                   	push   edi
c001da2c:	56                   	push   esi
c001da2d:	53                   	push   ebx
c001da2e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001da34:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001da3b:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001da42:	0f 85 bd 00 00 00    	jne    c001db05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001da48:	83 ec 0c             	sub    esp,0xc
c001da4b:	68 14 01 00 00       	push   0x114
c001da50:	e8 42 22 ff ff       	call   c000fc97 <malloc>
c001da55:	83 c4 0c             	add    esp,0xc
c001da58:	89 c3                	mov    ebx,eax
c001da5a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001da60:	68 11 59 02 c0       	push   0xc0025911
c001da65:	50                   	push   eax
c001da66:	e8 c7 a6 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001da6b:	83 c4 10             	add    esp,0x10
c001da6e:	85 db                	test   ebx,ebx
c001da70:	0f 84 67 02 00 00    	je     c001dcdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001da76:	56                   	push   esi
c001da77:	56                   	push   esi
c001da78:	6a 01                	push   0x1
c001da7a:	53                   	push   ebx
c001da7b:	e8 d0 a6 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001da80:	83 c4 10             	add    esp,0x10
c001da83:	85 c0                	test   eax,eax
c001da85:	0f 85 52 02 00 00    	jne    c001dcdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001da8b:	52                   	push   edx
c001da8c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001da90:	50                   	push   eax
c001da91:	8d 44 24 48          	lea    eax,[esp+0x48]
c001da95:	50                   	push   eax
c001da96:	53                   	push   ebx
c001da97:	e8 b6 a9 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001da9c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001daa0:	40                   	inc    eax
c001daa1:	89 04 24             	mov    DWORD PTR [esp],eax
c001daa4:	e8 ee 21 ff ff       	call   c000fc97 <malloc>
c001daa9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001daad:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001dab2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001dab6:	59                   	pop    ecx
c001dab7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001dab9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001dabd:	51                   	push   ecx
c001dabe:	50                   	push   eax
c001dabf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dac3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dac7:	53                   	push   ebx
c001dac8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dacb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001dacf:	83 c4 20             	add    esp,0x20
c001dad2:	89 c8                	mov    eax,ecx
c001dad4:	99                   	cdq    
c001dad5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001dad9:	0f 85 fe 01 00 00    	jne    c001dcdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001dadf:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001dae3:	0f 85 f4 01 00 00    	jne    c001dcdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	53                   	push   ebx
c001daed:	e8 bc a6 fe ff       	call   c00081ae <File::close()>
c001daf2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001daf6:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001dafd:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001db0a:	8b 1d 48 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f448
c001db10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db14:	31 f6                	xor    esi,esi
c001db16:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001db1e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001db25:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001db2a:	31 c9                	xor    ecx,ecx
c001db2c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001db34:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001db39:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001db41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db45:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001db4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001db51:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001db55:	0f 8e 82 01 00 00    	jle    c001dcdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db5b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001db5e:	d4 40                	aam    0x40
c001db60:	d5 39                	aad    0x39
c001db62:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001db66:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001db6a:	d4 40                	aam    0x40
c001db6c:	d5 39                	aad    0x39
c001db6e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001db72:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001db76:	d4 40                	aam    0x40
c001db78:	d5 39                	aad    0x39
c001db7a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001db7e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001db82:	d4 40                	aam    0x40
c001db84:	d5 39                	aad    0x39
c001db86:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001db8a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001db8e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001db92:	3c 56                	cmp    al,0x56
c001db94:	74 43                	je     c001dbd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001db96:	d4 40                	aam    0x40
c001db98:	d5 39                	aad    0x39
c001db9a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001db9d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001dba1:	0f b6 c9             	movzx  ecx,cl
c001dba4:	c1 e1 04             	shl    ecx,0x4
c001dba7:	d4 40                	aam    0x40
c001dba9:	d5 39                	aad    0x39
c001dbab:	83 e8 30             	sub    eax,0x30
c001dbae:	0f b6 c0             	movzx  eax,al
c001dbb1:	09 c1                	or     ecx,eax
c001dbb3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001dbb7:	c1 e1 04             	shl    ecx,0x4
c001dbba:	d4 40                	aam    0x40
c001dbbc:	d5 39                	aad    0x39
c001dbbe:	83 e8 30             	sub    eax,0x30
c001dbc1:	0f b6 c0             	movzx  eax,al
c001dbc4:	09 c1                	or     ecx,eax
c001dbc6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001dbca:	c1 e1 04             	shl    ecx,0x4
c001dbcd:	d4 40                	aam    0x40
c001dbcf:	d5 39                	aad    0x39
c001dbd1:	83 e8 30             	sub    eax,0x30
c001dbd4:	0f b6 c0             	movzx  eax,al
c001dbd7:	09 c1                	or     ecx,eax
c001dbd9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001dbdd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dbe1:	3c 58                	cmp    al,0x58
c001dbe3:	74 47                	je     c001dc2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001dbe5:	d4 40                	aam    0x40
c001dbe7:	d5 39                	aad    0x39
c001dbe9:	8d 50 d0             	lea    edx,[eax-0x30]
c001dbec:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001dbf0:	0f b6 d2             	movzx  edx,dl
c001dbf3:	c1 e2 04             	shl    edx,0x4
c001dbf6:	d4 40                	aam    0x40
c001dbf8:	d5 39                	aad    0x39
c001dbfa:	83 e8 30             	sub    eax,0x30
c001dbfd:	0f b6 c0             	movzx  eax,al
c001dc00:	09 c2                	or     edx,eax
c001dc02:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001dc06:	c1 e2 04             	shl    edx,0x4
c001dc09:	d4 40                	aam    0x40
c001dc0b:	d5 39                	aad    0x39
c001dc0d:	83 e8 30             	sub    eax,0x30
c001dc10:	0f b6 c0             	movzx  eax,al
c001dc13:	09 c2                	or     edx,eax
c001dc15:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001dc19:	c1 e2 04             	shl    edx,0x4
c001dc1c:	d4 40                	aam    0x40
c001dc1e:	d5 39                	aad    0x39
c001dc20:	83 e8 30             	sub    eax,0x30
c001dc23:	0f b6 c0             	movzx  eax,al
c001dc26:	09 c2                	or     edx,eax
c001dc28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc2c:	83 c6 10             	add    esi,0x10
c001dc2f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001dc33:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001dc37:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001dc3b:	83 fa 0a             	cmp    edx,0xa
c001dc3e:	74 0b                	je     c001dc4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001dc40:	47                   	inc    edi
c001dc41:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001dc45:	75 19                	jne    c001dc60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001dc47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001dc4b:	31 c0                	xor    eax,eax
c001dc4d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001dc52:	0f 94 c0             	sete   al
c001dc55:	01 c6                	add    esi,eax
c001dc57:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001dc5c:	75 0b                	jne    c001dc69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001dc5e:	eb 14                	jmp    c001dc74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001dc60:	46                   	inc    esi
c001dc61:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001dc64:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dc67:	eb ca                	jmp    c001dc33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001dc69:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001dc6e:	0f 85 dd fe ff ff    	jne    c001db51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dc74:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001dc79:	74 10                	je     c001dc8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001dc7b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001dc80:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001dc85:	0f 85 c6 fe ff ff    	jne    c001db51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dc8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dc93:	83 e8 30             	sub    eax,0x30
c001dc96:	83 ef 30             	sub    edi,0x30
c001dc99:	c1 e0 04             	shl    eax,0x4
c001dc9c:	09 f8                	or     eax,edi
c001dc9e:	0f b6 c0             	movzx  eax,al
c001dca1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001dca5:	0f 85 a6 fe ff ff    	jne    c001db51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dcab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcaf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dcb3:	83 e8 30             	sub    eax,0x30
c001dcb6:	83 ef 30             	sub    edi,0x30
c001dcb9:	c1 e0 04             	shl    eax,0x4
c001dcbc:	09 f8                	or     eax,edi
c001dcbe:	0f b6 c0             	movzx  eax,al
c001dcc1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001dcc5:	0f 85 86 fe ff ff    	jne    c001db51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dccb:	50                   	push   eax
c001dccc:	50                   	push   eax
c001dccd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dcd1:	50                   	push   eax
c001dcd2:	55                   	push   ebp
c001dcd3:	e8 68 29 fe ff       	call   c0000640 <strcpy>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	eb 06                	jmp    c001dce3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001dcdd:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001dce1:	31 ed                	xor    ebp,ebp
c001dce3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001dce9:	89 e8                	mov    eax,ebp
c001dceb:	5b                   	pop    ebx
c001dcec:	5e                   	pop    esi
c001dced:	5f                   	pop    edi
c001dcee:	5d                   	pop    ebp
c001dcef:	c3                   	ret    

c001dcf0 <PCI::checkBus(unsigned char)>:
c001dcf0:	56                   	push   esi
c001dcf1:	53                   	push   ebx
c001dcf2:	31 db                	xor    ebx,ebx
c001dcf4:	51                   	push   ecx
c001dcf5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dcfa:	52                   	push   edx
c001dcfb:	53                   	push   ebx
c001dcfc:	43                   	inc    ebx
c001dcfd:	56                   	push   esi
c001dcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd02:	e8 6f 03 00 00       	call   c001e076 <PCI::checkDevice(unsigned char, unsigned char)>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	83 fb 20             	cmp    ebx,0x20
c001dd0d:	75 eb                	jne    c001dcfa <PCI::checkBus(unsigned char)+0xa>
c001dd0f:	58                   	pop    eax
c001dd10:	5b                   	pop    ebx
c001dd11:	5e                   	pop    esi
c001dd12:	c3                   	ret    
c001dd13:	90                   	nop

c001dd14 <PCI::foundDevice(PCIDeviceInfo)>:
c001dd14:	55                   	push   ebp
c001dd15:	57                   	push   edi
c001dd16:	56                   	push   esi
c001dd17:	53                   	push   ebx
c001dd18:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001dd1e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001dd26:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001dd2d:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd32:	0f 84 b7 01 00 00    	je     c001deef <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001dd38:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001dd40:	66 81 fb 06 04       	cmp    bx,0x406
c001dd45:	75 32                	jne    c001dd79 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001dd47:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001dd4f:	50                   	push   eax
c001dd50:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001dd58:	50                   	push   eax
c001dd59:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dd61:	50                   	push   eax
c001dd62:	55                   	push   ebp
c001dd63:	e8 4e fb ff ff       	call   c001d8b6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dd68:	59                   	pop    ecx
c001dd69:	0f b6 c0             	movzx  eax,al
c001dd6c:	5b                   	pop    ebx
c001dd6d:	50                   	push   eax
c001dd6e:	55                   	push   ebp
c001dd6f:	e8 7c ff ff ff       	call   c001dcf0 <PCI::checkBus(unsigned char)>
c001dd74:	e9 16 01 00 00       	jmp    c001de8f <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001dd79:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001dd80:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001dd86:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001dd8a:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001dd91:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001dd99:	85 c0                	test   eax,eax
c001dd9b:	74 36                	je     c001ddd3 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001dd9d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dda0:	85 d2                	test   edx,edx
c001dda2:	74 2b                	je     c001ddcf <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001dda4:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001ddaa:	31 f9                	xor    ecx,edi
c001ddac:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001ddb2:	75 1b                	jne    c001ddcf <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ddb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddb8:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001ddbe:	75 0f                	jne    c001ddcf <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ddc0:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001ddc7:	39 f2                	cmp    edx,esi
c001ddc9:	0f 84 20 01 00 00    	je     c001deef <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ddcf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddd1:	eb c6                	jmp    c001dd99 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001ddd3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ddd7:	be 44 59 02 c0       	mov    esi,0xc0025944
c001dddc:	b9 07 00 00 00       	mov    ecx,0x7
c001dde1:	fc                   	cld    
c001dde2:	31 d2                	xor    edx,edx
c001dde4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dde6:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001dded:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ddf1:	b9 12 00 00 00       	mov    ecx,0x12
c001ddf6:	83 ec 0c             	sub    esp,0xc
c001ddf9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ddfb:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001de03:	b9 0a 00 00 00       	mov    ecx,0xa
c001de08:	f7 f1                	div    ecx
c001de0a:	83 c0 30             	add    eax,0x30
c001de0d:	83 c2 30             	add    edx,0x30
c001de10:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001de14:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001de18:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001de20:	31 d2                	xor    edx,edx
c001de22:	f7 f1                	div    ecx
c001de24:	83 c0 30             	add    eax,0x30
c001de27:	83 c2 30             	add    edx,0x30
c001de2a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001de2e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001de32:	8d 44 24 28          	lea    eax,[esp+0x28]
c001de36:	50                   	push   eax
c001de37:	e8 23 f4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001de45:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001de4c:	75 46                	jne    c001de94 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	68 64 01 00 00       	push   0x164
c001de56:	e8 3c 1e ff ff       	call   c000fc97 <malloc>
c001de5b:	89 c3                	mov    ebx,eax
c001de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001de60:	e8 3b 11 00 00       	call   c001efa0 <SATABus::SATABus()>
c001de65:	58                   	pop    eax
c001de66:	5a                   	pop    edx
c001de67:	53                   	push   ebx
c001de68:	55                   	push   ebp
c001de69:	e8 8e bb fe ff       	call   c00099fc <Device::addChild(Device*)>
c001de6e:	83 ec 1c             	sub    esp,0x1c
c001de71:	b9 09 00 00 00       	mov    ecx,0x9
c001de76:	89 e7                	mov    edi,esp
c001de78:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de7a:	53                   	push   ebx
c001de7b:	e8 c2 ba fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001de80:	83 c4 30             	add    esp,0x30
c001de83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de85:	6a 00                	push   0x0
c001de87:	6a 00                	push   0x0
c001de89:	6a 00                	push   0x0
c001de8b:	53                   	push   ebx
c001de8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de8f:	83 c4 10             	add    esp,0x10
c001de92:	eb 5b                	jmp    c001deef <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001de94:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001de9a:	75 19                	jne    c001deb5 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	68 70 02 00 00       	push   0x270
c001dea4:	e8 ee 1d ff ff       	call   c000fc97 <malloc>
c001dea9:	89 c3                	mov    ebx,eax
c001deab:	89 04 24             	mov    DWORD PTR [esp],eax
c001deae:	e8 93 02 00 00       	call   c001e146 <IDE::IDE()>
c001deb3:	eb b0                	jmp    c001de65 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001deb5:	83 ec 0c             	sub    esp,0xc
c001deb8:	68 58 01 00 00       	push   0x158
c001debd:	e8 d5 1d ff ff       	call   c000fc97 <malloc>
c001dec2:	89 c3                	mov    ebx,eax
c001dec4:	58                   	pop    eax
c001dec5:	5a                   	pop    edx
c001dec6:	68 2a 59 02 c0       	push   0xc002592a
c001decb:	53                   	push   ebx
c001decc:	e8 df bd fe ff       	call   c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>
c001ded1:	59                   	pop    ecx
c001ded2:	5f                   	pop    edi
c001ded3:	53                   	push   ebx
c001ded4:	55                   	push   ebp
c001ded5:	e8 22 bb fe ff       	call   c00099fc <Device::addChild(Device*)>
c001deda:	83 ec 1c             	sub    esp,0x1c
c001dedd:	b9 09 00 00 00       	mov    ecx,0x9
c001dee2:	89 e7                	mov    edi,esp
c001dee4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dee6:	53                   	push   ebx
c001dee7:	e8 56 ba fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001deec:	83 c4 30             	add    esp,0x30
c001deef:	81 c4 8c 00 00 00    	add    esp,0x8c
c001def5:	5b                   	pop    ebx
c001def6:	5e                   	pop    esi
c001def7:	5f                   	pop    edi
c001def8:	5d                   	pop    ebp
c001def9:	c3                   	ret    

c001defa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001defa:	55                   	push   ebp
c001defb:	57                   	push   edi
c001defc:	56                   	push   esi
c001defd:	53                   	push   ebx
c001defe:	83 ec 68             	sub    esp,0x68
c001df01:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001df05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001df0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df10:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001df17:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001df1c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df20:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001df27:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001df2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001df30:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001df35:	6a 0c                	push   0xc
c001df37:	57                   	push   edi
c001df38:	53                   	push   ebx
c001df39:	56                   	push   esi
c001df3a:	55                   	push   ebp
c001df3b:	e8 c6 f7 ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df40:	83 c4 20             	add    esp,0x20
c001df43:	57                   	push   edi
c001df44:	53                   	push   ebx
c001df45:	56                   	push   esi
c001df46:	55                   	push   ebp
c001df47:	e8 b0 f8 ff ff       	call   c001d7fc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001df4c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001df51:	57                   	push   edi
c001df52:	53                   	push   ebx
c001df53:	56                   	push   esi
c001df54:	55                   	push   ebp
c001df55:	e8 38 f9 ff ff       	call   c001d892 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001df5a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001df5e:	83 c4 14             	add    esp,0x14
c001df61:	6a 3c                	push   0x3c
c001df63:	57                   	push   edi
c001df64:	53                   	push   ebx
c001df65:	56                   	push   esi
c001df66:	55                   	push   ebp
c001df67:	e8 9a f7 ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df6c:	0f b6 c4             	movzx  eax,ah
c001df6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df73:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001df77:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001df7b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001df80:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001df86:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001df8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df90:	83 c4 20             	add    esp,0x20
c001df93:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001df98:	74 30                	je     c001dfca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001df9a:	31 c0                	xor    eax,eax
c001df9c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dfa0:	7e 28                	jle    c001dfca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dfa2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001dfaa:	39 cb                	cmp    ebx,ecx
c001dfac:	75 19                	jne    c001dfc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dfae:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001dfb6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001dfba:	75 0b                	jne    c001dfc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dfbc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001dfc3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001dfc7:	40                   	inc    eax
c001dfc8:	eb d2                	jmp    c001df9c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001dfca:	31 d2                	xor    edx,edx
c001dfcc:	83 ec 0c             	sub    esp,0xc
c001dfcf:	57                   	push   edi
c001dfd0:	53                   	push   ebx
c001dfd1:	56                   	push   esi
c001dfd2:	52                   	push   edx
c001dfd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001dfd7:	55                   	push   ebp
c001dfd8:	e8 01 f9 ff ff       	call   c001d8de <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfdd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dfe1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001dfe5:	42                   	inc    edx
c001dfe6:	83 c4 20             	add    esp,0x20
c001dfe9:	83 fa 06             	cmp    edx,0x6
c001dfec:	75 de                	jne    c001dfcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001dfee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dff6:	c1 e2 08             	shl    edx,0x8
c001dff9:	83 ec 0c             	sub    esp,0xc
c001dffc:	0f b6 c4             	movzx  eax,ah
c001dfff:	09 d0                	or     eax,edx
c001e001:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e006:	6a 02                	push   0x2
c001e008:	57                   	push   edi
c001e009:	53                   	push   ebx
c001e00a:	56                   	push   esi
c001e00b:	55                   	push   ebp
c001e00c:	e8 f5 f6 ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e011:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e016:	83 c4 20             	add    esp,0x20
c001e019:	57                   	push   edi
c001e01a:	53                   	push   ebx
c001e01b:	56                   	push   esi
c001e01c:	55                   	push   ebp
c001e01d:	e8 24 f8 ff ff       	call   c001d846 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e022:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e026:	57                   	push   edi
c001e027:	53                   	push   ebx
c001e028:	56                   	push   esi
c001e029:	55                   	push   ebp
c001e02a:	e8 81 f7 ff ff       	call   c001d7b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e02f:	b9 09 00 00 00       	mov    ecx,0x9
c001e034:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e039:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e03d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e041:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e045:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e049:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e04d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e051:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e055:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e059:	83 ec 0c             	sub    esp,0xc
c001e05c:	fc                   	cld    
c001e05d:	89 e7                	mov    edi,esp
c001e05f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e063:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e065:	55                   	push   ebp
c001e066:	e8 a9 fc ff ff       	call   c001dd14 <PCI::foundDevice(PCIDeviceInfo)>
c001e06b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e071:	5b                   	pop    ebx
c001e072:	5e                   	pop    esi
c001e073:	5f                   	pop    edi
c001e074:	5d                   	pop    ebp
c001e075:	c3                   	ret    

c001e076 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e076:	55                   	push   ebp
c001e077:	57                   	push   edi
c001e078:	56                   	push   esi
c001e079:	53                   	push   ebx
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e081:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e086:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e08b:	6a 00                	push   0x0
c001e08d:	56                   	push   esi
c001e08e:	57                   	push   edi
c001e08f:	55                   	push   ebp
c001e090:	e8 1b f7 ff ff       	call   c001d7b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e095:	6a 00                	push   0x0
c001e097:	56                   	push   esi
c001e098:	57                   	push   edi
c001e099:	55                   	push   ebp
c001e09a:	e8 5b fe ff ff       	call   c001defa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e09f:	83 c4 20             	add    esp,0x20
c001e0a2:	6a 00                	push   0x0
c001e0a4:	56                   	push   esi
c001e0a5:	57                   	push   edi
c001e0a6:	55                   	push   ebp
c001e0a7:	e8 28 f7 ff ff       	call   c001d7d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e0ac:	83 c4 10             	add    esp,0x10
c001e0af:	a8 80                	test   al,0x80
c001e0b1:	74 2d                	je     c001e0e0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e0b3:	bb 01 00 00 00       	mov    ebx,0x1
c001e0b8:	53                   	push   ebx
c001e0b9:	56                   	push   esi
c001e0ba:	57                   	push   edi
c001e0bb:	55                   	push   ebp
c001e0bc:	e8 ef f6 ff ff       	call   c001d7b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0c1:	83 c4 10             	add    esp,0x10
c001e0c4:	0f b7 c0             	movzx  eax,ax
c001e0c7:	3d ff ff 00 00       	cmp    eax,0xffff
c001e0cc:	74 0c                	je     c001e0da <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e0ce:	53                   	push   ebx
c001e0cf:	56                   	push   esi
c001e0d0:	57                   	push   edi
c001e0d1:	55                   	push   ebp
c001e0d2:	e8 23 fe ff ff       	call   c001defa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e0d7:	83 c4 10             	add    esp,0x10
c001e0da:	43                   	inc    ebx
c001e0db:	83 fb 08             	cmp    ebx,0x8
c001e0de:	75 d8                	jne    c001e0b8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e0e0:	83 c4 0c             	add    esp,0xc
c001e0e3:	5b                   	pop    ebx
c001e0e4:	5e                   	pop    esi
c001e0e5:	5f                   	pop    edi
c001e0e6:	5d                   	pop    ebp
c001e0e7:	c3                   	ret    

c001e0e8 <PCI::detect()>:
c001e0e8:	56                   	push   esi
c001e0e9:	53                   	push   ebx
c001e0ea:	53                   	push   ebx
c001e0eb:	31 db                	xor    ebx,ebx
c001e0ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0f1:	6a 00                	push   0x0
c001e0f3:	6a 00                	push   0x0
c001e0f5:	6a 00                	push   0x0
c001e0f7:	56                   	push   esi
c001e0f8:	e8 d7 f6 ff ff       	call   c001d7d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e0fd:	83 c4 10             	add    esp,0x10
c001e100:	a8 80                	test   al,0x80
c001e102:	75 21                	jne    c001e125 <PCI::detect()+0x3d>
c001e104:	51                   	push   ecx
c001e105:	51                   	push   ecx
c001e106:	6a 00                	push   0x0
c001e108:	56                   	push   esi
c001e109:	e8 e2 fb ff ff       	call   c001dcf0 <PCI::checkBus(unsigned char)>
c001e10e:	83 c4 10             	add    esp,0x10
c001e111:	eb 2a                	jmp    c001e13d <PCI::detect()+0x55>
c001e113:	52                   	push   edx
c001e114:	52                   	push   edx
c001e115:	53                   	push   ebx
c001e116:	43                   	inc    ebx
c001e117:	56                   	push   esi
c001e118:	e8 d3 fb ff ff       	call   c001dcf0 <PCI::checkBus(unsigned char)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	83 fb 08             	cmp    ebx,0x8
c001e123:	74 18                	je     c001e13d <PCI::detect()+0x55>
c001e125:	53                   	push   ebx
c001e126:	6a 00                	push   0x0
c001e128:	6a 00                	push   0x0
c001e12a:	56                   	push   esi
c001e12b:	e8 80 f6 ff ff       	call   c001d7b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e130:	83 c4 10             	add    esp,0x10
c001e133:	0f b7 c0             	movzx  eax,ax
c001e136:	3d ff ff 00 00       	cmp    eax,0xffff
c001e13b:	74 d6                	je     c001e113 <PCI::detect()+0x2b>
c001e13d:	58                   	pop    eax
c001e13e:	5b                   	pop    ebx
c001e13f:	5e                   	pop    esi
c001e140:	c3                   	ret    
c001e141:	90                   	nop

c001e142 <IDE::close(int, int, void*)>:
c001e142:	83 c8 ff             	or     eax,0xffffffff
c001e145:	c3                   	ret    

c001e146 <IDE::IDE()>:
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14d:	83 ec 08             	sub    esp,0x8
c001e150:	68 d4 59 02 c0       	push   0xc00259d4
c001e155:	50                   	push   eax
c001e156:	e8 f9 bb fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001e15b:	83 c4 10             	add    esp,0x10
c001e15e:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c001e163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e167:	89 10                	mov    DWORD PTR [eax],edx
c001e169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e174:	90                   	nop
c001e175:	83 c4 0c             	add    esp,0xc
c001e178:	c3                   	ret    
c001e179:	90                   	nop

c001e17a <IDE::prepareInterrupt(unsigned char)>:
c001e17a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e17f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e183:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e18b:	c3                   	ret    

c001e18c <selectDrive(unsigned char, unsigned char)>:
c001e18c:	c3                   	ret    
c001e18d:	90                   	nop

c001e18e <IDE::getBase(unsigned char)>:
c001e18e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e197:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e19f:	c3                   	ret    

c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e1a0:	55                   	push   ebp
c001e1a1:	57                   	push   edi
c001e1a2:	56                   	push   esi
c001e1a3:	53                   	push   ebx
c001e1a4:	83 ec 1c             	sub    esp,0x1c
c001e1a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1af:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e1b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e1b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1ba:	80 f9 03             	cmp    cl,0x3
c001e1bd:	77 4f                	ja     c001e20e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e1bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1c3:	0f b6 fa             	movzx  edi,dl
c001e1c6:	0f b6 db             	movzx  ebx,bl
c001e1c9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e1cc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e1d1:	80 ca 80             	or     dl,0x80
c001e1d4:	52                   	push   edx
c001e1d5:	6a 0c                	push   0xc
c001e1d7:	57                   	push   edi
c001e1d8:	56                   	push   esi
c001e1d9:	e8 c2 ff ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1de:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e1e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1e7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e1eb:	ee                   	out    dx,al
c001e1ec:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e1f1:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e1f5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e1f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e1fd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e205:	83 c4 2c             	add    esp,0x2c
c001e208:	5b                   	pop    ebx
c001e209:	5e                   	pop    esi
c001e20a:	5f                   	pop    edi
c001e20b:	5d                   	pop    ebp
c001e20c:	eb 92                	jmp    c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e20e:	0f b6 cb             	movzx  ecx,bl
c001e211:	83 f9 07             	cmp    ecx,0x7
c001e214:	77 12                	ja     c001e228 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e216:	0f b6 d2             	movzx  edx,dl
c001e219:	0f b6 db             	movzx  ebx,bl
c001e21c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e224:	01 da                	add    edx,ebx
c001e226:	eb 2f                	jmp    c001e257 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e228:	83 f9 0d             	cmp    ecx,0xd
c001e22b:	77 13                	ja     c001e240 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e22d:	0f b6 d2             	movzx  edx,dl
c001e230:	0f b6 db             	movzx  ebx,bl
c001e233:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e23a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e23e:	eb 17                	jmp    c001e257 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e240:	83 f9 15             	cmp    ecx,0x15
c001e243:	77 13                	ja     c001e258 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e245:	0f b6 d2             	movzx  edx,dl
c001e248:	0f b6 db             	movzx  ebx,bl
c001e24b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e253:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e257:	ee                   	out    dx,al
c001e258:	83 c4 1c             	add    esp,0x1c
c001e25b:	5b                   	pop    ebx
c001e25c:	5e                   	pop    esi
c001e25d:	5f                   	pop    edi
c001e25e:	5d                   	pop    ebp
c001e25f:	c3                   	ret    

c001e260 <IDE::read(unsigned char, unsigned char)>:
c001e260:	55                   	push   ebp
c001e261:	57                   	push   edi
c001e262:	56                   	push   esi
c001e263:	53                   	push   ebx
c001e264:	83 ec 1c             	sub    esp,0x1c
c001e267:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e26b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e26f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e272:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e276:	3c 03                	cmp    al,0x3
c001e278:	77 40                	ja     c001e2ba <IDE::read(unsigned char, unsigned char)+0x5a>
c001e27a:	0f b6 f9             	movzx  edi,cl
c001e27d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e280:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e285:	0c 80                	or     al,0x80
c001e287:	50                   	push   eax
c001e288:	6a 0c                	push   0xc
c001e28a:	57                   	push   edi
c001e28b:	56                   	push   esi
c001e28c:	e8 0f ff ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e291:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e296:	0f b6 d3             	movzx  edx,bl
c001e299:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e29d:	ec                   	in     al,dx
c001e29e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2a2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e2a7:	52                   	push   edx
c001e2a8:	6a 0c                	push   0xc
c001e2aa:	57                   	push   edi
c001e2ab:	56                   	push   esi
c001e2ac:	e8 ef fe ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2b1:	83 c4 20             	add    esp,0x20
c001e2b4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e2b8:	eb 4c                	jmp    c001e306 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e2ba:	0f b6 d3             	movzx  edx,bl
c001e2bd:	83 fa 07             	cmp    edx,0x7
c001e2c0:	77 12                	ja     c001e2d4 <IDE::read(unsigned char, unsigned char)+0x74>
c001e2c2:	0f b6 c9             	movzx  ecx,cl
c001e2c5:	0f b6 d3             	movzx  edx,bl
c001e2c8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e2d0:	01 c2                	add    edx,eax
c001e2d2:	eb 31                	jmp    c001e305 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e2d4:	83 fa 0d             	cmp    edx,0xd
c001e2d7:	77 13                	ja     c001e2ec <IDE::read(unsigned char, unsigned char)+0x8c>
c001e2d9:	0f b6 c9             	movzx  ecx,cl
c001e2dc:	0f b6 d3             	movzx  edx,bl
c001e2df:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e2e6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e2ea:	eb 19                	jmp    c001e305 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e2ec:	31 c0                	xor    eax,eax
c001e2ee:	83 fa 15             	cmp    edx,0x15
c001e2f1:	77 13                	ja     c001e306 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e2f3:	0f b6 c9             	movzx  ecx,cl
c001e2f6:	0f b6 d3             	movzx  edx,bl
c001e2f9:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e301:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e305:	ec                   	in     al,dx
c001e306:	83 c4 1c             	add    esp,0x1c
c001e309:	5b                   	pop    ebx
c001e30a:	5e                   	pop    esi
c001e30b:	5f                   	pop    edi
c001e30c:	5d                   	pop    ebp
c001e30d:	c3                   	ret    

c001e30e <IDE::waitInterrupt(unsigned char)>:
c001e30e:	55                   	push   ebp
c001e30f:	57                   	push   edi
c001e310:	56                   	push   esi
c001e311:	53                   	push   ebx
c001e312:	31 db                	xor    ebx,ebx
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e31b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e320:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e328:	89 e8                	mov    eax,ebp
c001e32a:	84 c0                	test   al,al
c001e32c:	75 31                	jne    c001e35f <IDE::waitInterrupt(unsigned char)+0x51>
c001e32e:	52                   	push   edx
c001e32f:	6a 0c                	push   0xc
c001e331:	56                   	push   esi
c001e332:	57                   	push   edi
c001e333:	e8 28 ff ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	a8 01                	test   al,0x1
c001e33d:	75 28                	jne    c001e367 <IDE::waitInterrupt(unsigned char)+0x59>
c001e33f:	f6 c3 04             	test   bl,0x4
c001e342:	75 13                	jne    c001e357 <IDE::waitInterrupt(unsigned char)+0x49>
c001e344:	83 fb 32             	cmp    ebx,0x32
c001e347:	7e 0e                	jle    c001e357 <IDE::waitInterrupt(unsigned char)+0x49>
c001e349:	50                   	push   eax
c001e34a:	50                   	push   eax
c001e34b:	6a 00                	push   0x0
c001e34d:	6a 64                	push   0x64
c001e34f:	e8 b0 8d ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001e354:	83 c4 10             	add    esp,0x10
c001e357:	83 fb 3c             	cmp    ebx,0x3c
c001e35a:	74 0b                	je     c001e367 <IDE::waitInterrupt(unsigned char)+0x59>
c001e35c:	43                   	inc    ebx
c001e35d:	eb c1                	jmp    c001e320 <IDE::waitInterrupt(unsigned char)+0x12>
c001e35f:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e367:	83 c4 0c             	add    esp,0xc
c001e36a:	89 e8                	mov    eax,ebp
c001e36c:	5b                   	pop    ebx
c001e36d:	5e                   	pop    esi
c001e36e:	5f                   	pop    edi
c001e36f:	5d                   	pop    ebp
c001e370:	c3                   	ret    

c001e371 <ideChannel0IRQHandler(regs*, void*)>:
c001e371:	83 ec 10             	sub    esp,0x10
c001e374:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e378:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e37f:	6a 07                	push   0x7
c001e381:	6a 00                	push   0x0
c001e383:	50                   	push   eax
c001e384:	e8 d7 fe ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e389:	83 c4 1c             	add    esp,0x1c
c001e38c:	c3                   	ret    

c001e38d <ideChannel1IRQHandler(regs*, void*)>:
c001e38d:	83 ec 10             	sub    esp,0x10
c001e390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e394:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e39b:	6a 07                	push   0x7
c001e39d:	6a 01                	push   0x1
c001e39f:	50                   	push   eax
c001e3a0:	e8 bb fe ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e3a5:	83 c4 1c             	add    esp,0x1c
c001e3a8:	c3                   	ret    
c001e3a9:	90                   	nop

c001e3aa <IDE::enableIRQs(unsigned char, bool)>:
c001e3aa:	57                   	push   edi
c001e3ab:	b8 02 00 00 00       	mov    eax,0x2
c001e3b0:	56                   	push   esi
c001e3b1:	53                   	push   ebx
c001e3b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3ba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e3bf:	74 02                	je     c001e3c3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e3c1:	31 c0                	xor    eax,eax
c001e3c3:	0f b6 db             	movzx  ebx,bl
c001e3c6:	bf 04 00 00 00       	mov    edi,0x4
c001e3cb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e3d2:	50                   	push   eax
c001e3d3:	6a 0c                	push   0xc
c001e3d5:	53                   	push   ebx
c001e3d6:	56                   	push   esi
c001e3d7:	e8 c4 fd ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	50                   	push   eax
c001e3e0:	6a 0c                	push   0xc
c001e3e2:	53                   	push   ebx
c001e3e3:	56                   	push   esi
c001e3e4:	e8 77 fe ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	4f                   	dec    edi
c001e3ed:	75 f0                	jne    c001e3df <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e3ef:	5b                   	pop    ebx
c001e3f0:	5e                   	pop    esi
c001e3f1:	5f                   	pop    edi
c001e3f2:	c3                   	ret    
c001e3f3:	90                   	nop

c001e3f4 <IDE::open(int, int, void*)>:
c001e3f4:	57                   	push   edi
c001e3f5:	56                   	push   esi
c001e3f6:	53                   	push   ebx
c001e3f7:	83 ec 10             	sub    esp,0x10
c001e3fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e3fe:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e407:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e410:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e417:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e41e:	0f 85 84 02 00 00    	jne    c001e6a8 <IDE::open(int, int, void*)+0x2b4>
c001e424:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e42a:	a8 70                	test   al,0x70
c001e42c:	75 44                	jne    c001e472 <IDE::open(int, int, void*)+0x7e>
c001e42e:	ba 20 84 00 00       	mov    edx,0x8420
c001e433:	0f a3 c2             	bt     edx,eax
c001e436:	73 3a                	jae    c001e472 <IDE::open(int, int, void*)+0x7e>
c001e438:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e43e:	83 ec 0c             	sub    esp,0xc
c001e441:	83 e0 fc             	and    eax,0xfffffffc
c001e444:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e44b:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e451:	83 e0 fc             	and    eax,0xfffffffc
c001e454:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e45b:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e461:	83 e0 fc             	and    eax,0xfffffffc
c001e464:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e46b:	68 15 31 02 c0       	push   0xc0023115
c001e470:	eb 60                	jmp    c001e4d2 <IDE::open(int, int, void*)+0xde>
c001e472:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e47c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e486:	be 64 00 00 00       	mov    esi,0x64
c001e48b:	57                   	push   edi
c001e48c:	57                   	push   edi
c001e48d:	68 ec 59 02 c0       	push   0xc00259ec
c001e492:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e496:	57                   	push   edi
c001e497:	e8 a4 21 fe ff       	call   c0000640 <strcpy>
c001e49c:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e4a3:	31 d2                	xor    edx,edx
c001e4a5:	89 c8                	mov    eax,ecx
c001e4a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e4aa:	f7 f6                	div    esi
c001e4ac:	be 0a 00 00 00       	mov    esi,0xa
c001e4b1:	83 c0 30             	add    eax,0x30
c001e4b4:	31 d2                	xor    edx,edx
c001e4b6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e4ba:	89 c8                	mov    eax,ecx
c001e4bc:	f7 f6                	div    esi
c001e4be:	89 d1                	mov    ecx,edx
c001e4c0:	31 d2                	xor    edx,edx
c001e4c2:	83 c1 30             	add    ecx,0x30
c001e4c5:	f7 f6                	div    esi
c001e4c7:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e4cb:	83 c2 30             	add    edx,0x30
c001e4ce:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e4d2:	e8 88 ed fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e4d7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e4dc:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e4e3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e4ea:	c1 e1 10             	shl    ecx,0x10
c001e4ed:	c1 e0 0b             	shl    eax,0xb
c001e4f0:	83 c4 10             	add    esp,0x10
c001e4f3:	09 c1                	or     ecx,eax
c001e4f5:	89 fa                	mov    edx,edi
c001e4f7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e4fe:	c1 e0 08             	shl    eax,0x8
c001e501:	09 c1                	or     ecx,eax
c001e503:	89 c8                	mov    eax,ecx
c001e505:	0d 08 00 00 80       	or     eax,0x80000008
c001e50a:	ef                   	out    dx,eax
c001e50b:	be fc 0c 00 00       	mov    esi,0xcfc
c001e510:	89 f2                	mov    edx,esi
c001e512:	ed                   	in     eax,dx
c001e513:	c1 e8 10             	shr    eax,0x10
c001e516:	3d ff ff 00 00       	cmp    eax,0xffff
c001e51b:	0f 84 e5 00 00 00    	je     c001e606 <IDE::open(int, int, void*)+0x212>
c001e521:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e527:	89 fa                	mov    edx,edi
c001e529:	89 c8                	mov    eax,ecx
c001e52b:	ef                   	out    dx,eax
c001e52c:	b0 fe                	mov    al,0xfe
c001e52e:	89 f2                	mov    edx,esi
c001e530:	ee                   	out    dx,al
c001e531:	89 c8                	mov    eax,ecx
c001e533:	89 fa                	mov    edx,edi
c001e535:	ef                   	out    dx,eax
c001e536:	89 f2                	mov    edx,esi
c001e538:	ed                   	in     eax,dx
c001e539:	3c fe                	cmp    al,0xfe
c001e53b:	0f 85 85 00 00 00    	jne    c001e5c6 <IDE::open(int, int, void*)+0x1d2>
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	68 4b 31 02 c0       	push   0xc002314b
c001e549:	e8 11 ed fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e54e:	c7 04 24 f2 59 02 c0 	mov    DWORD PTR [esp],0xc00259f2
c001e555:	e8 0a 8a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e55a:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e564:	c7 04 24 28 34 02 c0 	mov    DWORD PTR [esp],0xc0023428
c001e56b:	e8 ef ec fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e570:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e577:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e57e:	c1 e1 10             	shl    ecx,0x10
c001e581:	c1 e0 08             	shl    eax,0x8
c001e584:	89 fa                	mov    edx,edi
c001e586:	09 c1                	or     ecx,eax
c001e588:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e58f:	c1 e0 0b             	shl    eax,0xb
c001e592:	09 c1                	or     ecx,eax
c001e594:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e59a:	89 c8                	mov    eax,ecx
c001e59c:	ef                   	out    dx,eax
c001e59d:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e5a3:	89 f2                	mov    edx,esi
c001e5a5:	ee                   	out    dx,al
c001e5a6:	89 c8                	mov    eax,ecx
c001e5a8:	89 fa                	mov    edx,edi
c001e5aa:	ef                   	out    dx,eax
c001e5ab:	89 f2                	mov    edx,esi
c001e5ad:	ed                   	in     eax,dx
c001e5ae:	0f b6 c0             	movzx  eax,al
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e5ba:	74 5a                	je     c001e616 <IDE::open(int, int, void*)+0x222>
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	68 07 5a 02 c0       	push   0xc0025a07
c001e5c4:	eb 48                	jmp    c001e60e <IDE::open(int, int, void*)+0x21a>
c001e5c6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e5cf:	75 2b                	jne    c001e5fc <IDE::open(int, int, void*)+0x208>
c001e5d1:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e5d8:	3d 80 00 00 00       	cmp    eax,0x80
c001e5dd:	74 07                	je     c001e5e6 <IDE::open(int, int, void*)+0x1f2>
c001e5df:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e5e4:	75 16                	jne    c001e5fc <IDE::open(int, int, void*)+0x208>
c001e5e6:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e5ed:	83 ec 0c             	sub    esp,0xc
c001e5f0:	68 3e 2c 02 c0       	push   0xc0022c3e
c001e5f5:	e8 65 ec fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e5fa:	eb 17                	jmp    c001e613 <IDE::open(int, int, void*)+0x21f>
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	68 0f 5a 02 c0       	push   0xc0025a0f
c001e604:	eb 08                	jmp    c001e60e <IDE::open(int, int, void*)+0x21a>
c001e606:	83 ec 0c             	sub    esp,0xc
c001e609:	68 40 5a 02 c0       	push   0xc0025a40
c001e60e:	e8 cb 19 ff ff       	call   c000ffde <KePanic(char const*)>
c001e613:	83 c4 10             	add    esp,0x10
c001e616:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e61d:	0f 84 bf 00 00 00    	je     c001e6e2 <IDE::open(int, int, void*)+0x2ee>
c001e623:	83 ec 0c             	sub    esp,0xc
c001e626:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e62c:	83 e0 fc             	and    eax,0xfffffffc
c001e62f:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e636:	83 c0 08             	add    eax,0x8
c001e639:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e640:	68 6a 5a 02 c0       	push   0xc0025a6a
c001e645:	e8 1a 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e64a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e651:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e658:	50                   	push   eax
c001e659:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e660:	50                   	push   eax
c001e661:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e668:	50                   	push   eax
c001e669:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e66f:	e8 92 f0 ff ff       	call   c001d706 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e674:	83 c4 18             	add    esp,0x18
c001e677:	83 c8 07             	or     eax,0x7
c001e67a:	0f b7 c0             	movzx  eax,ax
c001e67d:	50                   	push   eax
c001e67e:	6a 04                	push   0x4
c001e680:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e687:	50                   	push   eax
c001e688:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e68f:	50                   	push   eax
c001e690:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e697:	50                   	push   eax
c001e698:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e69e:	e8 9f f2 ff ff       	call   c001d942 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e6a3:	83 c4 20             	add    esp,0x20
c001e6a6:	eb 3a                	jmp    c001e6e2 <IDE::open(int, int, void*)+0x2ee>
c001e6a8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e6ae:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e6b5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e6bc:	05 06 02 00 00       	add    eax,0x206
c001e6c1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e6c8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e6cf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e6d6:	05 06 02 00 00       	add    eax,0x206
c001e6db:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 a3 39 02 c0       	push   0xc00239a3
c001e6ea:	e8 70 eb fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e6ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e6f5:	83 c4 10             	add    esp,0x10
c001e6f8:	89 c2                	mov    edx,eax
c001e6fa:	83 e2 0f             	and    edx,0xf
c001e6fd:	83 fa 08             	cmp    edx,0x8
c001e700:	75 0a                	jne    c001e70c <IDE::open(int, int, void*)+0x318>
c001e702:	83 e8 02             	sub    eax,0x2
c001e705:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e70c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e712:	89 c2                	mov    edx,eax
c001e714:	83 e2 0f             	and    edx,0xf
c001e717:	83 fa 08             	cmp    edx,0x8
c001e71a:	75 0a                	jne    c001e726 <IDE::open(int, int, void*)+0x332>
c001e71c:	83 e8 02             	sub    eax,0x2
c001e71f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e726:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e72d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e734:	89 d0                	mov    eax,edx
c001e736:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e739:	8d 7a 01             	lea    edi,[edx+0x1]
c001e73c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e740:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e744:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e748:	83 e1 3f             	and    ecx,0x3f
c001e74b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e74f:	89 f9                	mov    ecx,edi
c001e751:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e758:	0f b6 c9             	movzx  ecx,cl
c001e75b:	8d 78 02             	lea    edi,[eax+0x2]
c001e75e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e761:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e765:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e769:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e76d:	83 e2 3f             	and    edx,0x3f
c001e770:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e774:	89 f9                	mov    ecx,edi
c001e776:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e77c:	0f b6 d1             	movzx  edx,cl
c001e77f:	8d 78 03             	lea    edi,[eax+0x3]
c001e782:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e785:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e789:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e78d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e791:	83 e1 3f             	and    ecx,0x3f
c001e794:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e798:	89 fa                	mov    edx,edi
c001e79a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e7a0:	0f b6 ca             	movzx  ecx,dl
c001e7a3:	8d 78 04             	lea    edi,[eax+0x4]
c001e7a6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e7a9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e7ad:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e7b1:	89 fa                	mov    edx,edi
c001e7b3:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e7b9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e7bd:	83 e2 3f             	and    edx,0x3f
c001e7c0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e7c4:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e7cb:	66 85 f6             	test   si,si
c001e7ce:	74 24                	je     c001e7f4 <IDE::open(int, int, void*)+0x400>
c001e7d0:	89 f9                	mov    ecx,edi
c001e7d2:	83 c0 05             	add    eax,0x5
c001e7d5:	0f b6 d1             	movzx  edx,cl
c001e7d8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e7db:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e7df:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e7e3:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e7e9:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e7ed:	83 e0 3f             	and    eax,0x3f
c001e7f0:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e7f4:	83 ec 0c             	sub    esp,0xc
c001e7f7:	68 82 5a 02 c0       	push   0xc0025a82
c001e7fc:	e8 5e ea fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e801:	58                   	pop    eax
c001e802:	5a                   	pop    edx
c001e803:	6a 00                	push   0x0
c001e805:	53                   	push   ebx
c001e806:	e8 6f f9 ff ff       	call   c001e17a <IDE::prepareInterrupt(unsigned char)>
c001e80b:	59                   	pop    ecx
c001e80c:	5e                   	pop    esi
c001e80d:	6a 01                	push   0x1
c001e80f:	53                   	push   ebx
c001e810:	e8 65 f9 ff ff       	call   c001e17a <IDE::prepareInterrupt(unsigned char)>
c001e815:	c7 04 24 d1 52 02 c0 	mov    DWORD PTR [esp],0xc00252d1
c001e81c:	e8 3e ea fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e821:	83 c4 0c             	add    esp,0xc
c001e824:	6a 00                	push   0x0
c001e826:	6a 00                	push   0x0
c001e828:	53                   	push   ebx
c001e829:	e8 7c fb ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001e82e:	83 c4 0c             	add    esp,0xc
c001e831:	6a 00                	push   0x0
c001e833:	6a 01                	push   0x1
c001e835:	53                   	push   ebx
c001e836:	e8 6f fb ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001e83b:	c7 04 24 84 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a84
c001e842:	e8 18 ea fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e851:	74 3c                	je     c001e88f <IDE::open(int, int, void*)+0x49b>
c001e853:	83 ec 0c             	sub    esp,0xc
c001e856:	53                   	push   ebx
c001e857:	6a 01                	push   0x1
c001e859:	68 71 e3 01 c0       	push   0xc001e371
c001e85e:	6a 0e                	push   0xe
c001e860:	53                   	push   ebx
c001e861:	e8 42 b1 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e866:	83 c4 14             	add    esp,0x14
c001e869:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e86f:	53                   	push   ebx
c001e870:	6a 01                	push   0x1
c001e872:	68 8d e3 01 c0       	push   0xc001e38d
c001e877:	6a 0f                	push   0xf
c001e879:	53                   	push   ebx
c001e87a:	e8 29 b1 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e87f:	83 c4 14             	add    esp,0x14
c001e882:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e888:	68 2e 36 02 c0       	push   0xc002362e
c001e88d:	eb 40                	jmp    c001e8cf <IDE::open(int, int, void*)+0x4db>
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e89c:	53                   	push   ebx
c001e89d:	6a 00                	push   0x0
c001e89f:	68 71 e3 01 c0       	push   0xc001e371
c001e8a4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e8aa:	53                   	push   ebx
c001e8ab:	e8 f8 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8b0:	83 c4 14             	add    esp,0x14
c001e8b3:	53                   	push   ebx
c001e8b4:	6a 00                	push   0x0
c001e8b6:	68 8d e3 01 c0       	push   0xc001e38d
c001e8bb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e8c1:	53                   	push   ebx
c001e8c2:	e8 e1 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8c7:	83 c4 14             	add    esp,0x14
c001e8ca:	68 2b 43 02 c0       	push   0xc002432b
c001e8cf:	e8 8b e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	68 86 5a 02 c0       	push   0xc0025a86
c001e8df:	e8 7b e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e8e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e8e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e8ec:	c7 04 24 31 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a31
c001e8f3:	e8 67 e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e8f8:	83 c4 0c             	add    esp,0xc
c001e8fb:	6a 07                	push   0x7
c001e8fd:	6a 00                	push   0x0
c001e8ff:	53                   	push   ebx
c001e900:	e8 5b f9 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e905:	83 c4 0c             	add    esp,0xc
c001e908:	6a 07                	push   0x7
c001e90a:	6a 01                	push   0x1
c001e90c:	53                   	push   ebx
c001e90d:	e8 4e f9 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001e912:	c7 04 24 ec 40 02 c0 	mov    DWORD PTR [esp],0xc00240ec
c001e919:	e8 41 e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e91e:	83 c4 0c             	add    esp,0xc
c001e921:	6a 01                	push   0x1
c001e923:	6a 00                	push   0x0
c001e925:	53                   	push   ebx
c001e926:	e8 7f fa ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001e92b:	83 c4 0c             	add    esp,0xc
c001e92e:	6a 01                	push   0x1
c001e930:	6a 01                	push   0x1
c001e932:	53                   	push   ebx
c001e933:	e8 72 fa ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001e938:	c7 04 24 89 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a89
c001e93f:	e8 1b e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e944:	83 c4 20             	add    esp,0x20
c001e947:	31 c0                	xor    eax,eax
c001e949:	5b                   	pop    ebx
c001e94a:	5e                   	pop    esi
c001e94b:	5f                   	pop    edi
c001e94c:	c3                   	ret    
c001e94d:	90                   	nop

c001e94e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e94e:	55                   	push   ebp
c001e94f:	57                   	push   edi
c001e950:	56                   	push   esi
c001e951:	53                   	push   ebx
c001e952:	83 ec 1c             	sub    esp,0x1c
c001e955:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e959:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e95d:	8d 42 f8             	lea    eax,[edx-0x8]
c001e960:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e964:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e968:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e96c:	3c 03                	cmp    al,0x3
c001e96e:	77 5a                	ja     c001e9ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e970:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e974:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e978:	0f b6 db             	movzx  ebx,bl
c001e97b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e97e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e983:	0c 80                	or     al,0x80
c001e985:	50                   	push   eax
c001e986:	6a 0c                	push   0xc
c001e988:	53                   	push   ebx
c001e989:	56                   	push   esi
c001e98a:	e8 11 f8 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e98f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e998:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e99c:	0f b6 d2             	movzx  edx,dl
c001e99f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e9a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e9a5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e9aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e9ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e9b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e9b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e9be:	83 c4 2c             	add    esp,0x2c
c001e9c1:	5b                   	pop    ebx
c001e9c2:	5e                   	pop    esi
c001e9c3:	5f                   	pop    edi
c001e9c4:	5d                   	pop    ebp
c001e9c5:	e9 d6 f7 ff ff       	jmp    c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9ca:	0f b6 c2             	movzx  eax,dl
c001e9cd:	83 f8 07             	cmp    eax,0x7
c001e9d0:	77 12                	ja     c001e9e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e9d2:	0f b6 c2             	movzx  eax,dl
c001e9d5:	0f b6 db             	movzx  ebx,bl
c001e9d8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001e9e0:	01 c2                	add    edx,eax
c001e9e2:	eb 2f                	jmp    c001ea13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e9e4:	83 f8 0d             	cmp    eax,0xd
c001e9e7:	77 13                	ja     c001e9fc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001e9e9:	0f b6 db             	movzx  ebx,bl
c001e9ec:	0f b6 d2             	movzx  edx,dl
c001e9ef:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001e9f6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e9fa:	eb 17                	jmp    c001ea13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e9fc:	83 f8 15             	cmp    eax,0x15
c001e9ff:	77 14                	ja     c001ea15 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ea01:	0f b6 db             	movzx  ebx,bl
c001ea04:	0f b6 d2             	movzx  edx,dl
c001ea07:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ea0f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ea13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea15:	83 c4 1c             	add    esp,0x1c
c001ea18:	5b                   	pop    ebx
c001ea19:	5e                   	pop    esi
c001ea1a:	5f                   	pop    edi
c001ea1b:	5d                   	pop    ebp
c001ea1c:	c3                   	ret    
c001ea1d:	90                   	nop

c001ea1e <IDE::detect()>:
c001ea1e:	55                   	push   ebp
c001ea1f:	57                   	push   edi
c001ea20:	56                   	push   esi
c001ea21:	53                   	push   ebx
c001ea22:	81 ec 28 02 00 00    	sub    esp,0x228
c001ea28:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ea2f:	68 8b 5a 02 c0       	push   0xc0025a8b
c001ea34:	e8 26 e8 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea39:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ea3f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ea4b:	0f 85 2f 04 00 00    	jne    c001ee80 <IDE::detect()+0x462>
c001ea51:	83 ec 0c             	sub    esp,0xc
c001ea54:	31 f6                	xor    esi,esi
c001ea56:	68 8e 5a 02 c0       	push   0xc0025a8e
c001ea5b:	31 ff                	xor    edi,edi
c001ea5d:	e8 fd e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea62:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 ec 0c             	sub    esp,0xc
c001ea6f:	68 91 5a 02 c0       	push   0xc0025a91
c001ea74:	e8 e6 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ea83:	83 ec 0c             	sub    esp,0xc
c001ea86:	31 ed                	xor    ebp,ebp
c001ea88:	68 94 5a 02 c0       	push   0xc0025a94
c001ea8d:	e8 cd e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea92:	89 f8                	mov    eax,edi
c001ea94:	c1 e0 06             	shl    eax,0x6
c001ea97:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ea9f:	c7 04 24 97 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a97
c001eaa6:	e8 b4 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eaab:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eaaf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	c1 e0 04             	shl    eax,0x4
c001eaba:	83 c8 a0             	or     eax,0xffffffa0
c001eabd:	0f b6 c0             	movzx  eax,al
c001eac0:	50                   	push   eax
c001eac1:	6a 06                	push   0x6
c001eac3:	56                   	push   esi
c001eac4:	53                   	push   ebx
c001eac5:	e8 d6 f6 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaca:	83 c4 1c             	add    esp,0x1c
c001eacd:	6a 0c                	push   0xc
c001eacf:	56                   	push   esi
c001ead0:	53                   	push   ebx
c001ead1:	e8 8a f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001ead6:	83 c4 0c             	add    esp,0xc
c001ead9:	6a 0c                	push   0xc
c001eadb:	56                   	push   esi
c001eadc:	53                   	push   ebx
c001eadd:	e8 7e f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eae2:	83 c4 0c             	add    esp,0xc
c001eae5:	6a 0c                	push   0xc
c001eae7:	56                   	push   esi
c001eae8:	53                   	push   ebx
c001eae9:	e8 72 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eaee:	83 c4 0c             	add    esp,0xc
c001eaf1:	6a 0c                	push   0xc
c001eaf3:	56                   	push   esi
c001eaf4:	53                   	push   ebx
c001eaf5:	e8 66 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eafa:	c7 04 24 9a 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a9a
c001eb01:	e8 59 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb06:	68 ec 00 00 00       	push   0xec
c001eb0b:	6a 07                	push   0x7
c001eb0d:	56                   	push   esi
c001eb0e:	53                   	push   ebx
c001eb0f:	e8 8c f6 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb14:	83 c4 1c             	add    esp,0x1c
c001eb17:	6a 0c                	push   0xc
c001eb19:	56                   	push   esi
c001eb1a:	53                   	push   ebx
c001eb1b:	e8 40 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb20:	83 c4 0c             	add    esp,0xc
c001eb23:	6a 0c                	push   0xc
c001eb25:	56                   	push   esi
c001eb26:	53                   	push   ebx
c001eb27:	e8 34 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb2c:	83 c4 0c             	add    esp,0xc
c001eb2f:	6a 0c                	push   0xc
c001eb31:	56                   	push   esi
c001eb32:	53                   	push   ebx
c001eb33:	e8 28 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb38:	83 c4 0c             	add    esp,0xc
c001eb3b:	6a 0c                	push   0xc
c001eb3d:	56                   	push   esi
c001eb3e:	53                   	push   ebx
c001eb3f:	e8 1c f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb44:	c7 04 24 9d 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a9d
c001eb4b:	e8 0f e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb50:	83 c4 0c             	add    esp,0xc
c001eb53:	6a 0c                	push   0xc
c001eb55:	56                   	push   esi
c001eb56:	53                   	push   ebx
c001eb57:	e8 04 f7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb5c:	83 c4 10             	add    esp,0x10
c001eb5f:	84 c0                	test   al,al
c001eb61:	75 1f                	jne    c001eb82 <IDE::detect()+0x164>
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	68 a0 5a 02 c0       	push   0xc0025aa0
c001eb6b:	e8 ef e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb70:	e9 e9 02 00 00       	jmp    c001ee5e <IDE::detect()+0x440>
c001eb75:	a8 80                	test   al,0x80
c001eb77:	74 21                	je     c001eb9a <IDE::detect()+0x17c>
c001eb79:	45                   	inc    ebp
c001eb7a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001eb80:	7f 1e                	jg     c001eba0 <IDE::detect()+0x182>
c001eb82:	50                   	push   eax
c001eb83:	6a 0c                	push   0xc
c001eb85:	56                   	push   esi
c001eb86:	53                   	push   ebx
c001eb87:	e8 d4 f6 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	a8 01                	test   al,0x1
c001eb91:	74 e2                	je     c001eb75 <IDE::detect()+0x157>
c001eb93:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001eb98:	eb 23                	jmp    c001ebbd <IDE::detect()+0x19f>
c001eb9a:	a8 08                	test   al,0x8
c001eb9c:	74 db                	je     c001eb79 <IDE::detect()+0x15b>
c001eb9e:	eb 18                	jmp    c001ebb8 <IDE::detect()+0x19a>
c001eba0:	50                   	push   eax
c001eba1:	50                   	push   eax
c001eba2:	6a 00                	push   0x0
c001eba4:	6a 32                	push   0x32
c001eba6:	e8 59 85 ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001ebab:	83 c4 10             	add    esp,0x10
c001ebae:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ebb4:	75 cc                	jne    c001eb82 <IDE::detect()+0x164>
c001ebb6:	eb db                	jmp    c001eb93 <IDE::detect()+0x175>
c001ebb8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ebbd:	83 ec 0c             	sub    esp,0xc
c001ebc0:	68 a3 5a 02 c0       	push   0xc0025aa3
c001ebc5:	e8 95 e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ebca:	83 c4 10             	add    esp,0x10
c001ebcd:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ebd2:	74 5f                	je     c001ec33 <IDE::detect()+0x215>
c001ebd4:	51                   	push   ecx
c001ebd5:	6a 04                	push   0x4
c001ebd7:	56                   	push   esi
c001ebd8:	53                   	push   ebx
c001ebd9:	e8 82 f6 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001ebde:	83 c4 0c             	add    esp,0xc
c001ebe1:	89 c5                	mov    ebp,eax
c001ebe3:	6a 05                	push   0x5
c001ebe5:	56                   	push   esi
c001ebe6:	53                   	push   ebx
c001ebe7:	e8 74 f6 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001ebec:	83 c4 10             	add    esp,0x10
c001ebef:	89 e9                	mov    ecx,ebp
c001ebf1:	0f b6 c0             	movzx  eax,al
c001ebf4:	0f b6 e9             	movzx  ebp,cl
c001ebf7:	83 fd 14             	cmp    ebp,0x14
c001ebfa:	75 07                	jne    c001ec03 <IDE::detect()+0x1e5>
c001ebfc:	3d eb 00 00 00       	cmp    eax,0xeb
c001ec01:	eb 0e                	jmp    c001ec11 <IDE::detect()+0x1f3>
c001ec03:	3d 96 00 00 00       	cmp    eax,0x96
c001ec08:	0f 85 53 02 00 00    	jne    c001ee61 <IDE::detect()+0x443>
c001ec0e:	83 fd 69             	cmp    ebp,0x69
c001ec11:	0f 85 4a 02 00 00    	jne    c001ee61 <IDE::detect()+0x443>
c001ec17:	68 a1 00 00 00       	push   0xa1
c001ec1c:	6a 07                	push   0x7
c001ec1e:	56                   	push   esi
c001ec1f:	53                   	push   ebx
c001ec20:	e8 7b f5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec25:	58                   	pop    eax
c001ec26:	5a                   	pop    edx
c001ec27:	6a 00                	push   0x0
c001ec29:	6a 0a                	push   0xa
c001ec2b:	e8 d4 84 ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001ec30:	83 c4 10             	add    esp,0x10
c001ec33:	83 ec 0c             	sub    esp,0xc
c001ec36:	89 fd                	mov    ebp,edi
c001ec38:	68 a6 5a 02 c0       	push   0xc0025aa6
c001ec3d:	c1 e5 06             	shl    ebp,0x6
c001ec40:	e8 1a e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ec45:	01 dd                	add    ebp,ebx
c001ec47:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ec4b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001ec52:	52                   	push   edx
c001ec53:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ec57:	6a 00                	push   0x0
c001ec59:	56                   	push   esi
c001ec5a:	53                   	push   ebx
c001ec5b:	e8 ee fc ff ff       	call   c001e94e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ec60:	83 c4 14             	add    esp,0x14
c001ec63:	68 aa 5a 02 c0       	push   0xc0025aaa
c001ec68:	e8 f2 e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ec6d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ec72:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001ec79:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001ec80:	89 f0                	mov    eax,esi
c001ec82:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001ec88:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ec8c:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001ec92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec96:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001ec9d:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001eca5:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001ecac:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001ecb4:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001ecba:	c7 04 24 ae 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aae
c001ecc1:	e8 99 e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001ecd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ecd4:	74 09                	je     c001ecdf <IDE::detect()+0x2c1>
c001ecd6:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001ecdd:	eb 07                	jmp    c001ece6 <IDE::detect()+0x2c8>
c001ecdf:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ece6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ecea:	89 f8                	mov    eax,edi
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	c1 e0 06             	shl    eax,0x6
c001ecf2:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001ecf5:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001ecfb:	68 b2 5a 02 c0       	push   0xc0025ab2
c001ed00:	e8 5a e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ed05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed09:	89 e8                	mov    eax,ebp
c001ed0b:	83 c4 10             	add    esp,0x10
c001ed0e:	8d 6a 28             	lea    ebp,[edx+0x28]
c001ed11:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001ed14:	83 c0 02             	add    eax,0x2
c001ed17:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001ed1d:	83 c2 02             	add    edx,0x2
c001ed20:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001ed23:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001ed29:	39 d5                	cmp    ebp,edx
c001ed2b:	75 e4                	jne    c001ed11 <IDE::detect()+0x2f3>
c001ed2d:	89 f8                	mov    eax,edi
c001ed2f:	c1 e0 06             	shl    eax,0x6
c001ed32:	01 d8                	add    eax,ebx
c001ed34:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001ed3b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ed42:	c1 ea 09             	shr    edx,0x9
c001ed45:	83 e2 01             	and    edx,0x1
c001ed48:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001ed4f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ed55:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001ed59:	74 0c                	je     c001ed67 <IDE::detect()+0x349>
c001ed5b:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001ed64:	0f 95 c2             	setne  dl
c001ed67:	83 ec 0c             	sub    esp,0xc
c001ed6a:	89 fd                	mov    ebp,edi
c001ed6c:	c1 e5 06             	shl    ebp,0x6
c001ed6f:	01 dd                	add    ebp,ebx
c001ed71:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001ed77:	68 b6 5a 02 c0       	push   0xc0025ab6
c001ed7c:	e8 de e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ed81:	83 c4 10             	add    esp,0x10
c001ed84:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ed89:	75 66                	jne    c001edf1 <IDE::detect()+0x3d3>
c001ed8b:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001ed92:	0f 84 b8 00 00 00    	je     c001ee50 <IDE::detect()+0x432>
c001ed98:	83 ec 0c             	sub    esp,0xc
c001ed9b:	68 ba 5a 02 c0       	push   0xc0025aba
c001eda0:	e8 ba e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eda5:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001edac:	e8 e6 0e ff ff       	call   c000fc97 <malloc>
c001edb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edb4:	89 c5                	mov    ebp,eax
c001edb6:	e8 43 05 00 00       	call   c001f2fe <ATA::ATA()>
c001edbb:	c7 04 24 be 5a 02 c0 	mov    DWORD PTR [esp],0xc0025abe
c001edc2:	e8 98 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001edc7:	59                   	pop    ecx
c001edc8:	58                   	pop    eax
c001edc9:	55                   	push   ebp
c001edca:	53                   	push   ebx
c001edcb:	e8 2c ac fe ff       	call   c00099fc <Device::addChild(Device*)>
c001edd0:	c7 04 24 c3 5a 02 c0 	mov    DWORD PTR [esp],0xc0025ac3
c001edd7:	e8 83 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eddc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001eddf:	53                   	push   ebx
c001ede0:	57                   	push   edi
c001ede1:	6a 00                	push   0x0
c001ede3:	55                   	push   ebp
c001ede4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ede7:	83 c4 14             	add    esp,0x14
c001edea:	68 c8 5a 02 c0       	push   0xc0025ac8
c001edef:	eb 57                	jmp    c001ee48 <IDE::detect()+0x42a>
c001edf1:	83 ec 0c             	sub    esp,0xc
c001edf4:	68 cd 5a 02 c0       	push   0xc0025acd
c001edf9:	e8 61 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001edfe:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ee05:	e8 8d 0e ff ff       	call   c000fc97 <malloc>
c001ee0a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee0d:	89 c5                	mov    ebp,eax
c001ee0f:	e8 98 0c 00 00       	call   c001faac <ATAPI::ATAPI()>
c001ee14:	c7 04 24 d3 5a 02 c0 	mov    DWORD PTR [esp],0xc0025ad3
c001ee1b:	e8 3f e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee20:	58                   	pop    eax
c001ee21:	5a                   	pop    edx
c001ee22:	55                   	push   ebp
c001ee23:	53                   	push   ebx
c001ee24:	e8 d3 ab fe ff       	call   c00099fc <Device::addChild(Device*)>
c001ee29:	c7 04 24 da 5a 02 c0 	mov    DWORD PTR [esp],0xc0025ada
c001ee30:	e8 2a e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee38:	53                   	push   ebx
c001ee39:	57                   	push   edi
c001ee3a:	6a 00                	push   0x0
c001ee3c:	55                   	push   ebp
c001ee3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee40:	83 c4 14             	add    esp,0x14
c001ee43:	68 e1 5a 02 c0       	push   0xc0025ae1
c001ee48:	e8 12 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee4d:	83 c4 10             	add    esp,0x10
c001ee50:	83 ec 0c             	sub    esp,0xc
c001ee53:	47                   	inc    edi
c001ee54:	68 e8 5a 02 c0       	push   0xc0025ae8
c001ee59:	e8 01 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001ee65:	74 0c                	je     c001ee73 <IDE::detect()+0x455>
c001ee67:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001ee6e:	e9 10 fc ff ff       	jmp    c001ea83 <IDE::detect()+0x65>
c001ee73:	4e                   	dec    esi
c001ee74:	74 0a                	je     c001ee80 <IDE::detect()+0x462>
c001ee76:	be 01 00 00 00       	mov    esi,0x1
c001ee7b:	e9 ec fb ff ff       	jmp    c001ea6c <IDE::detect()+0x4e>
c001ee80:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ee86:	5b                   	pop    ebx
c001ee87:	5e                   	pop    esi
c001ee88:	5f                   	pop    edi
c001ee89:	5d                   	pop    ebp
c001ee8a:	c3                   	ret    
c001ee8b:	90                   	nop

c001ee8c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ee8c:	55                   	push   ebp
c001ee8d:	57                   	push   edi
c001ee8e:	56                   	push   esi
c001ee8f:	53                   	push   ebx
c001ee90:	83 ec 1c             	sub    esp,0x1c
c001ee93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ee97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ee9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001eea3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eea7:	88 c3                	mov    bl,al
c001eea9:	25 ff 00 00 00       	and    eax,0xff
c001eeae:	0f 84 88 00 00 00    	je     c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	89 c7                	mov    edi,eax
c001eeb9:	68 ec 5a 02 c0       	push   0xc0025aec
c001eebe:	e8 a1 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	83 ff 01             	cmp    edi,0x1
c001eec9:	74 6b                	je     c001ef36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001eecb:	83 ff 02             	cmp    edi,0x2
c001eece:	75 58                	jne    c001ef28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001eed0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001eed5:	01 ff                	add    edi,edi
c001eed7:	50                   	push   eax
c001eed8:	09 fe                	or     esi,edi
c001eeda:	6a 01                	push   0x1
c001eedc:	89 f0                	mov    eax,esi
c001eede:	0f b6 f0             	movzx  esi,al
c001eee1:	c1 e6 06             	shl    esi,0x6
c001eee4:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001eeec:	50                   	push   eax
c001eeed:	55                   	push   ebp
c001eeee:	e8 6d f3 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	a8 01                	test   al,0x1
c001eef8:	74 02                	je     c001eefc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001eefa:	b3 07                	mov    bl,0x7
c001eefc:	a8 02                	test   al,0x2
c001eefe:	74 02                	je     c001ef02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ef00:	b3 03                	mov    bl,0x3
c001ef02:	a8 04                	test   al,0x4
c001ef04:	74 02                	je     c001ef08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ef06:	b3 14                	mov    bl,0x14
c001ef08:	a8 08                	test   al,0x8
c001ef0a:	74 02                	je     c001ef0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ef0c:	b3 03                	mov    bl,0x3
c001ef0e:	a8 10                	test   al,0x10
c001ef10:	74 02                	je     c001ef14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ef12:	b3 15                	mov    bl,0x15
c001ef14:	a8 20                	test   al,0x20
c001ef16:	74 02                	je     c001ef1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ef18:	b3 03                	mov    bl,0x3
c001ef1a:	a8 40                	test   al,0x40
c001ef1c:	74 02                	je     c001ef20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ef1e:	b3 16                	mov    bl,0x16
c001ef20:	a8 80                	test   al,0x80
c001ef22:	74 18                	je     c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef24:	b3 0d                	mov    bl,0xd
c001ef26:	eb 14                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef28:	83 ff 03             	cmp    edi,0x3
c001ef2b:	74 0d                	je     c001ef3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001ef2d:	83 ff 04             	cmp    edi,0x4
c001ef30:	75 0a                	jne    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef32:	b3 08                	mov    bl,0x8
c001ef34:	eb 06                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef36:	b3 13                	mov    bl,0x13
c001ef38:	eb 02                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef3a:	b3 17                	mov    bl,0x17
c001ef3c:	83 c4 1c             	add    esp,0x1c
c001ef3f:	88 d8                	mov    al,bl
c001ef41:	5b                   	pop    ebx
c001ef42:	5e                   	pop    esi
c001ef43:	5f                   	pop    edi
c001ef44:	5d                   	pop    ebp
c001ef45:	c3                   	ret    

c001ef46 <IDE::polling(unsigned char, unsigned int)>:
c001ef46:	57                   	push   edi
c001ef47:	56                   	push   esi
c001ef48:	53                   	push   ebx
c001ef49:	bb 04 00 00 00       	mov    ebx,0x4
c001ef4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef52:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef57:	52                   	push   edx
c001ef58:	6a 0c                	push   0xc
c001ef5a:	56                   	push   esi
c001ef5b:	57                   	push   edi
c001ef5c:	e8 ff f2 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	4b                   	dec    ebx
c001ef65:	75 f0                	jne    c001ef57 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ef67:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef6c:	50                   	push   eax
c001ef6d:	6a 0c                	push   0xc
c001ef6f:	56                   	push   esi
c001ef70:	57                   	push   edi
c001ef71:	e8 ea f2 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	a8 01                	test   al,0x1
c001ef7b:	75 17                	jne    c001ef94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef7d:	a8 20                	test   al,0x20
c001ef7f:	75 0f                	jne    c001ef90 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ef81:	4b                   	dec    ebx
c001ef82:	74 10                	je     c001ef94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef84:	a8 80                	test   al,0x80
c001ef86:	75 e4                	jne    c001ef6c <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef88:	a8 08                	test   al,0x8
c001ef8a:	74 e0                	je     c001ef6c <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef8c:	31 c0                	xor    eax,eax
c001ef8e:	eb 06                	jmp    c001ef96 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef90:	b0 01                	mov    al,0x1
c001ef92:	eb 02                	jmp    c001ef96 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef94:	b0 02                	mov    al,0x2
c001ef96:	5b                   	pop    ebx
c001ef97:	5e                   	pop    esi
c001ef98:	5f                   	pop    edi
c001ef99:	c3                   	ret    

c001ef9a <SATABus::close(int, int, void*)>:
c001ef9a:	31 c0                	xor    eax,eax
c001ef9c:	c3                   	ret    
c001ef9d:	90                   	nop

c001ef9e <SATABus::detect()>:
c001ef9e:	c3                   	ret    
c001ef9f:	90                   	nop

c001efa0 <SATABus::SATABus()>:
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa7:	83 ec 08             	sub    esp,0x8
c001efaa:	68 24 5b 02 c0       	push   0xc0025b24
c001efaf:	50                   	push   eax
c001efb0:	e8 9f ad fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001efb5:	83 c4 10             	add    esp,0x10
c001efb8:	ba 50 5b 02 c0       	mov    edx,0xc0025b50
c001efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc1:	89 10                	mov    DWORD PTR [eax],edx
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	6a 50                	push   0x50
c001efc8:	e8 e3 12 ff ff       	call   c00102b0 <Phys::allocateContiguousPages(int)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	89 c2                	mov    edx,eax
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	6a 50                	push   0x50
c001efe1:	e8 87 44 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	89 c2                	mov    edx,eax
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eff5:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001effa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001effe:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f008:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f00e:	83 ec 0c             	sub    esp,0xc
c001f011:	6a 03                	push   0x3
c001f013:	6a 50                	push   0x50
c001f015:	51                   	push   ecx
c001f016:	52                   	push   edx
c001f017:	50                   	push   eax
c001f018:	e8 1d 4d ff ff       	call   c0013d3a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f01d:	83 c4 20             	add    esp,0x20
c001f020:	90                   	nop
c001f021:	83 c4 0c             	add    esp,0xc
c001f024:	c3                   	ret    
c001f025:	90                   	nop

c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f02a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f02d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f030:	09 c2                	or     edx,eax
c001f032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f036:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f03c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f03e:	31 c0                	xor    eax,eax
c001f040:	c1 e9 08             	shr    ecx,0x8
c001f043:	83 e1 0f             	and    ecx,0xf
c001f046:	39 c8                	cmp    eax,ecx
c001f048:	74 0a                	je     c001f054 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f04a:	f6 c2 01             	test   dl,0x1
c001f04d:	74 08                	je     c001f057 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f04f:	d1 ea                	shr    edx,1
c001f051:	40                   	inc    eax
c001f052:	eb f2                	jmp    c001f046 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f054:	83 c8 ff             	or     eax,0xffffffff
c001f057:	c3                   	ret    

c001f058 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f058:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f05c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f05f:	89 c2                	mov    edx,eax
c001f061:	c1 ea 08             	shr    edx,0x8
c001f064:	83 e2 0f             	and    edx,0xf
c001f067:	4a                   	dec    edx
c001f068:	75 32                	jne    c001f09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f06a:	83 e0 0f             	and    eax,0xf
c001f06d:	83 f8 03             	cmp    eax,0x3
c001f070:	75 2a                	jne    c001f09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f072:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f075:	b8 02 00 00 00       	mov    eax,0x2
c001f07a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f080:	74 1c                	je     c001f09e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f082:	b8 04 00 00 00       	mov    eax,0x4
c001f087:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f08d:	74 0f                	je     c001f09e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f08f:	31 c0                	xor    eax,eax
c001f091:	83 fa 03             	cmp    edx,0x3
c001f094:	0f 94 c0             	sete   al
c001f097:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f09b:	c3                   	ret    
c001f09c:	31 c0                	xor    eax,eax
c001f09e:	c3                   	ret    
c001f09f:	90                   	nop

c001f0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0a7:	0f ba e2 0f          	bt     edx,0xf
c001f0ab:	72 f7                	jb     c001f0a4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f0ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0b0:	83 ca 10             	or     edx,0x10
c001f0b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0b9:	83 ca 01             	or     edx,0x1
c001f0bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0bf:	c3                   	ret    

c001f0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0c7:	83 e2 fe             	and    edx,0xfffffffe
c001f0ca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0d0:	83 e2 ef             	and    edx,0xffffffef
c001f0d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0d9:	0f ba e2 0e          	bt     edx,0xe
c001f0dd:	72 f7                	jb     c001f0d6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f0df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0e2:	0f ba e2 0f          	bt     edx,0xf
c001f0e6:	72 ee                	jb     c001f0d6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f0e8:	c3                   	ret    
c001f0e9:	90                   	nop

c001f0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f0ea:	55                   	push   ebp
c001f0eb:	57                   	push   edi
c001f0ec:	56                   	push   esi
c001f0ed:	53                   	push   ebx
c001f0ee:	83 ec 1c             	sub    esp,0x1c
c001f0f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0f9:	53                   	push   ebx
c001f0fa:	56                   	push   esi
c001f0fb:	e8 c0 ff ff ff       	call   c001f0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f100:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f104:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	c1 e5 0a             	shl    ebp,0xa
c001f110:	01 e8                	add    eax,ebp
c001f112:	89 03                	mov    DWORD PTR [ebx],eax
c001f114:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f116:	68 00 04 00 00       	push   0x400
c001f11b:	6a 00                	push   0x0
c001f11d:	50                   	push   eax
c001f11e:	e8 cd 13 fe ff       	call   c00004f0 <memset>
c001f123:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f129:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f12d:	01 e8                	add    eax,ebp
c001f12f:	83 c4 1c             	add    esp,0x1c
c001f132:	89 03                	mov    DWORD PTR [ebx],eax
c001f134:	c1 e2 08             	shl    edx,0x8
c001f137:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f13e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f144:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f14a:	01 f8                	add    eax,edi
c001f14c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f14f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f152:	68 00 01 00 00       	push   0x100
c001f157:	6a 00                	push   0x0
c001f159:	50                   	push   eax
c001f15a:	e8 91 13 fe ff       	call   c00004f0 <memset>
c001f15f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f165:	01 fa                	add    edx,edi
c001f167:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f16b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f16e:	c1 e7 0d             	shl    edi,0xd
c001f171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f178:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f17e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f184:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f188:	31 ff                	xor    edi,edi
c001f18a:	83 c4 10             	add    esp,0x10
c001f18d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f193:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f197:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f19d:	83 c5 20             	add    ebp,0x20
c001f1a0:	01 f8                	add    eax,edi
c001f1a2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1a5:	52                   	push   edx
c001f1a6:	68 00 01 00 00       	push   0x100
c001f1ab:	6a 00                	push   0x0
c001f1ad:	50                   	push   eax
c001f1ae:	e8 3d 13 fe ff       	call   c00004f0 <memset>
c001f1b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f1c0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f1c7:	01 f8                	add    eax,edi
c001f1c9:	81 c7 00 01 00 00    	add    edi,0x100
c001f1cf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1d2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f1d8:	75 b3                	jne    c001f18d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f1da:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f1e1:	50                   	push   eax
c001f1e2:	50                   	push   eax
c001f1e3:	53                   	push   ebx
c001f1e4:	56                   	push   esi
c001f1e5:	e8 b6 fe ff ff       	call   c001f0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f1ea:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f1f1:	83 c4 2c             	add    esp,0x2c
c001f1f4:	5b                   	pop    ebx
c001f1f5:	5e                   	pop    esi
c001f1f6:	5f                   	pop    edi
c001f1f7:	5d                   	pop    ebp
c001f1f8:	c3                   	ret    
c001f1f9:	90                   	nop

c001f1fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f1fa:	55                   	push   ebp
c001f1fb:	57                   	push   edi
c001f1fc:	56                   	push   esi
c001f1fd:	53                   	push   ebx
c001f1fe:	31 db                	xor    ebx,ebx
c001f200:	83 ec 0c             	sub    esp,0xc
c001f203:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f207:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f20b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f20e:	f7 c7 01 00 00 00    	test   edi,0x1
c001f214:	74 7a                	je     c001f290 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f216:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f21a:	89 d8                	mov    eax,ebx
c001f21c:	c1 e0 07             	shl    eax,0x7
c001f21f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f226:	55                   	push   ebp
c001f227:	56                   	push   esi
c001f228:	e8 2b fe ff ff       	call   c001f058 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f22d:	5a                   	pop    edx
c001f22e:	83 f8 01             	cmp    eax,0x1
c001f231:	59                   	pop    ecx
c001f232:	75 21                	jne    c001f255 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f234:	50                   	push   eax
c001f235:	53                   	push   ebx
c001f236:	55                   	push   ebp
c001f237:	56                   	push   esi
c001f238:	e8 ad fe ff ff       	call   c001f0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f23d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f244:	e8 4e 0a ff ff       	call   c000fc97 <malloc>
c001f249:	89 c5                	mov    ebp,eax
c001f24b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f24e:	e8 25 0f 00 00       	call   c0020178 <SATA::SATA()>
c001f253:	eb 24                	jmp    c001f279 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f255:	83 f8 04             	cmp    eax,0x4
c001f258:	75 36                	jne    c001f290 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f25a:	51                   	push   ecx
c001f25b:	53                   	push   ebx
c001f25c:	55                   	push   ebp
c001f25d:	56                   	push   esi
c001f25e:	e8 87 fe ff ff       	call   c001f0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f263:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f26a:	e8 28 0a ff ff       	call   c000fc97 <malloc>
c001f26f:	89 c5                	mov    ebp,eax
c001f271:	89 04 24             	mov    DWORD PTR [esp],eax
c001f274:	e8 97 12 00 00       	call   c0020510 <SATAPI::SATAPI()>
c001f279:	58                   	pop    eax
c001f27a:	5a                   	pop    edx
c001f27b:	55                   	push   ebp
c001f27c:	56                   	push   esi
c001f27d:	e8 7a a7 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001f282:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f285:	56                   	push   esi
c001f286:	6a 00                	push   0x0
c001f288:	53                   	push   ebx
c001f289:	55                   	push   ebp
c001f28a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f28d:	83 c4 20             	add    esp,0x20
c001f290:	d1 ef                	shr    edi,1
c001f292:	43                   	inc    ebx
c001f293:	83 fb 20             	cmp    ebx,0x20
c001f296:	0f 85 72 ff ff ff    	jne    c001f20e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f29c:	83 c4 0c             	add    esp,0xc
c001f29f:	5b                   	pop    ebx
c001f2a0:	5e                   	pop    esi
c001f2a1:	5f                   	pop    edi
c001f2a2:	5d                   	pop    ebp
c001f2a3:	c3                   	ret    

c001f2a4 <SATABus::open(int, int, void*)>:
c001f2a4:	53                   	push   ebx
c001f2a5:	83 ec 08             	sub    esp,0x8
c001f2a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2ac:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f2b2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f2b8:	e8 7b 79 ff ff       	call   c0016c38 <KeDisablePreemption()>
c001f2bd:	52                   	push   edx
c001f2be:	52                   	push   edx
c001f2bf:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f2c5:	53                   	push   ebx
c001f2c6:	e8 2f ff ff ff       	call   c001f1fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f2cb:	e8 90 79 ff ff       	call   c0016c60 <KeRestorePreemption()>
c001f2d0:	31 c0                	xor    eax,eax
c001f2d2:	83 c4 18             	add    esp,0x18
c001f2d5:	5b                   	pop    ebx
c001f2d6:	c3                   	ret    
c001f2d7:	90                   	nop

c001f2d8 <ATA::close(int, int, void*)>:
c001f2d8:	83 ec 0c             	sub    esp,0xc
c001f2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f2e5:	85 c0                	test   eax,eax
c001f2e7:	74 0c                	je     c001f2f5 <ATA::close(int, int, void*)+0x1d>
c001f2e9:	83 ec 0c             	sub    esp,0xc
c001f2ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2ee:	50                   	push   eax
c001f2ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f2f2:	83 c4 10             	add    esp,0x10
c001f2f5:	31 c0                	xor    eax,eax
c001f2f7:	83 c4 0c             	add    esp,0xc
c001f2fa:	c3                   	ret    
c001f2fb:	90                   	nop

c001f2fc <ATA::powerSaving(PowerSavingLevel)>:
c001f2fc:	c3                   	ret    
c001f2fd:	90                   	nop

c001f2fe <ATA::ATA()>:
c001f2fe:	83 ec 0c             	sub    esp,0xc
c001f301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f305:	83 ec 04             	sub    esp,0x4
c001f308:	68 00 02 00 00       	push   0x200
c001f30d:	68 d1 5c 02 c0       	push   0xc0025cd1
c001f312:	50                   	push   eax
c001f313:	e8 c6 aa fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f318:	83 c4 10             	add    esp,0x10
c001f31b:	ba 38 5c 02 c0       	mov    edx,0xc0025c38
c001f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f324:	89 10                	mov    DWORD PTR [eax],edx
c001f326:	90                   	nop
c001f327:	83 c4 0c             	add    esp,0xc
c001f32a:	c3                   	ret    
c001f32b:	90                   	nop

c001f32c <ATA::flush(bool)>:
c001f32c:	53                   	push   ebx
c001f32d:	83 ec 08             	sub    esp,0x8
c001f330:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f334:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f339:	83 f8 01             	cmp    eax,0x1
c001f33c:	19 c0                	sbb    eax,eax
c001f33e:	83 e0 fd             	and    eax,0xfffffffd
c001f341:	05 ea 00 00 00       	add    eax,0xea
c001f346:	50                   	push   eax
c001f347:	6a 07                	push   0x7
c001f349:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f350:	50                   	push   eax
c001f351:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f357:	e8 44 ee ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f35c:	83 c4 0c             	add    esp,0xc
c001f35f:	6a 00                	push   0x0
c001f361:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f368:	50                   	push   eax
c001f369:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f36f:	e8 d2 fb ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001f374:	83 c4 18             	add    esp,0x18
c001f377:	5b                   	pop    ebx
c001f378:	c3                   	ret    
c001f379:	90                   	nop

c001f37a <ATA::readyForCommand()>:
c001f37a:	56                   	push   esi
c001f37b:	53                   	push   ebx
c001f37c:	31 db                	xor    ebx,ebx
c001f37e:	50                   	push   eax
c001f37f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f383:	50                   	push   eax
c001f384:	6a 0c                	push   0xc
c001f386:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f38d:	50                   	push   eax
c001f38e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f394:	e8 c7 ee ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001f399:	83 c4 10             	add    esp,0x10
c001f39c:	a8 88                	test   al,0x88
c001f39e:	74 20                	je     c001f3c0 <ATA::readyForCommand()+0x46>
c001f3a0:	43                   	inc    ebx
c001f3a1:	83 fb 63             	cmp    ebx,0x63
c001f3a4:	7e dd                	jle    c001f383 <ATA::readyForCommand()+0x9>
c001f3a6:	51                   	push   ecx
c001f3a7:	51                   	push   ecx
c001f3a8:	6a 00                	push   0x0
c001f3aa:	6a 0a                	push   0xa
c001f3ac:	e8 53 7d ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f3ba:	75 c7                	jne    c001f383 <ATA::readyForCommand()+0x9>
c001f3bc:	31 c0                	xor    eax,eax
c001f3be:	eb 02                	jmp    c001f3c2 <ATA::readyForCommand()+0x48>
c001f3c0:	b0 01                	mov    al,0x1
c001f3c2:	5a                   	pop    edx
c001f3c3:	5b                   	pop    ebx
c001f3c4:	5e                   	pop    esi
c001f3c5:	c3                   	ret    

c001f3c6 <ATA::access(unsigned long long, int, void*, bool)>:
c001f3c6:	55                   	push   ebp
c001f3c7:	57                   	push   edi
c001f3c8:	56                   	push   esi
c001f3c9:	53                   	push   ebx
c001f3ca:	83 ec 2c             	sub    esp,0x2c
c001f3cd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f3d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f3d5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f3d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f3dd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f3e1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f3e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f3e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f3ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3f3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f3f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3fd:	c1 e0 06             	shl    eax,0x6
c001f400:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f408:	74 5d                	je     c001f467 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f40a:	89 fa                	mov    edx,edi
c001f40c:	89 f0                	mov    eax,esi
c001f40e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f412:	c1 ea 1c             	shr    edx,0x1c
c001f415:	89 d1                	mov    ecx,edx
c001f417:	09 c1                	or     ecx,eax
c001f419:	74 25                	je     c001f440 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f41b:	31 ed                	xor    ebp,ebp
c001f41d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f424:	89 fa                	mov    edx,edi
c001f426:	89 f0                	mov    eax,esi
c001f428:	0f ad d0             	shrd   eax,edx,cl
c001f42b:	d3 ea                	shr    edx,cl
c001f42d:	f6 c1 20             	test   cl,0x20
c001f430:	74 02                	je     c001f434 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f432:	89 d0                	mov    eax,edx
c001f434:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f438:	45                   	inc    ebp
c001f439:	83 fd 06             	cmp    ebp,0x6
c001f43c:	75 df                	jne    c001f41d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f43e:	eb 76                	jmp    c001f4b6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001f440:	89 f0                	mov    eax,esi
c001f442:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f447:	89 fa                	mov    edx,edi
c001f449:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f450:	0f ac d0 10          	shrd   eax,edx,0x10
c001f454:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f459:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f45d:	c1 ee 18             	shr    esi,0x18
c001f460:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f465:	eb 56                	jmp    c001f4bd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f467:	6a 00                	push   0x0
c001f469:	6a 3f                	push   0x3f
c001f46b:	57                   	push   edi
c001f46c:	56                   	push   esi
c001f46d:	e8 f2 24 00 00       	call   c0021964 <__umoddi3>
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	40                   	inc    eax
c001f476:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f47a:	6a 00                	push   0x0
c001f47c:	68 f0 03 00 00       	push   0x3f0
c001f481:	57                   	push   edi
c001f482:	56                   	push   esi
c001f483:	e8 dc 23 00 00       	call   c0021864 <__udivdi3>
c001f488:	83 c4 10             	add    esp,0x10
c001f48b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f490:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f497:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f49c:	6a 00                	push   0x0
c001f49e:	6a 3f                	push   0x3f
c001f4a0:	57                   	push   edi
c001f4a1:	56                   	push   esi
c001f4a2:	e8 bd 23 00 00       	call   c0021864 <__udivdi3>
c001f4a7:	83 c4 10             	add    esp,0x10
c001f4aa:	83 e0 0f             	and    eax,0xf
c001f4ad:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4b2:	89 c6                	mov    esi,eax
c001f4b4:	eb 07                	jmp    c001f4bd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f4b6:	31 f6                	xor    esi,esi
c001f4b8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f4bd:	55                   	push   ebp
c001f4be:	6a 00                	push   0x0
c001f4c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4c7:	50                   	push   eax
c001f4c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f4cc:	e8 d9 ee ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001f4d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4d4:	e8 a1 fe ff ff       	call   c001f37a <ATA::readyForCommand()>
c001f4d9:	83 c4 10             	add    esp,0x10
c001f4dc:	84 c0                	test   al,al
c001f4de:	75 0a                	jne    c001f4ea <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001f4e0:	be 01 00 00 00       	mov    esi,0x1
c001f4e5:	e9 c2 02 00 00       	jmp    c001f7ac <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f4ea:	fa                   	cli    
c001f4eb:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f4f1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f4f7:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001f4fc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f502:	75 0a                	jne    c001f50e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001f504:	c1 e0 04             	shl    eax,0x4
c001f507:	09 c6                	or     esi,eax
c001f509:	83 ce a0             	or     esi,0xffffffa0
c001f50c:	eb 08                	jmp    c001f516 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001f50e:	c1 e0 04             	shl    eax,0x4
c001f511:	09 c6                	or     esi,eax
c001f513:	83 ce e0             	or     esi,0xffffffe0
c001f516:	89 f0                	mov    eax,esi
c001f518:	0f b6 d2             	movzx  edx,dl
c001f51b:	0f b6 f0             	movzx  esi,al
c001f51e:	56                   	push   esi
c001f51f:	6a 06                	push   0x6
c001f521:	52                   	push   edx
c001f522:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f528:	e8 73 ec ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	6a 00                	push   0x0
c001f532:	6a 01                	push   0x1
c001f534:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f53b:	50                   	push   eax
c001f53c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f542:	e8 59 ec ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f547:	83 c4 10             	add    esp,0x10
c001f54a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f54f:	83 f8 02             	cmp    eax,0x2
c001f552:	75 6e                	jne    c001f5c2 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001f554:	6a 00                	push   0x0
c001f556:	6a 08                	push   0x8
c001f558:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f55f:	50                   	push   eax
c001f560:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f566:	e8 35 ec ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f56b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f570:	50                   	push   eax
c001f571:	6a 09                	push   0x9
c001f573:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f57a:	50                   	push   eax
c001f57b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f581:	e8 1a ec ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f586:	83 c4 20             	add    esp,0x20
c001f589:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f58e:	50                   	push   eax
c001f58f:	6a 0a                	push   0xa
c001f591:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f598:	50                   	push   eax
c001f599:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f59f:	e8 fc eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5a4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f5a9:	50                   	push   eax
c001f5aa:	6a 0b                	push   0xb
c001f5ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5b3:	50                   	push   eax
c001f5b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5ba:	e8 e1 eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5bf:	83 c4 20             	add    esp,0x20
c001f5c2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f5c7:	50                   	push   eax
c001f5c8:	6a 02                	push   0x2
c001f5ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5d1:	50                   	push   eax
c001f5d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5d8:	e8 c3 eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5dd:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f5e2:	50                   	push   eax
c001f5e3:	6a 03                	push   0x3
c001f5e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5ec:	50                   	push   eax
c001f5ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5f3:	e8 a8 eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5f8:	83 c4 20             	add    esp,0x20
c001f5fb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f600:	50                   	push   eax
c001f601:	6a 04                	push   0x4
c001f603:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f60a:	50                   	push   eax
c001f60b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f611:	e8 8a eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f616:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f61b:	50                   	push   eax
c001f61c:	6a 05                	push   0x5
c001f61e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f625:	50                   	push   eax
c001f626:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f62c:	e8 6f eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f631:	83 c4 20             	add    esp,0x20
c001f634:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f639:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f63e:	74 13                	je     c001f653 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001f640:	83 f8 02             	cmp    eax,0x2
c001f643:	74 20                	je     c001f665 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001f645:	48                   	dec    eax
c001f646:	0f 85 94 fe ff ff    	jne    c001f4e0 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f64c:	b8 30 00 00 00       	mov    eax,0x30
c001f651:	eb 1e                	jmp    c001f671 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f653:	83 f8 02             	cmp    eax,0x2
c001f656:	74 14                	je     c001f66c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001f658:	48                   	dec    eax
c001f659:	b8 20 00 00 00       	mov    eax,0x20
c001f65e:	74 11                	je     c001f671 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f660:	e9 7b fe ff ff       	jmp    c001f4e0 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f665:	b8 34 00 00 00       	mov    eax,0x34
c001f66a:	eb 05                	jmp    c001f671 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f66c:	b8 24 00 00 00       	mov    eax,0x24
c001f671:	50                   	push   eax
c001f672:	6a 07                	push   0x7
c001f674:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f67b:	50                   	push   eax
c001f67c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f682:	e8 19 eb ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f687:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f68e:	83 c4 10             	add    esp,0x10
c001f691:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f698:	75 01                	jne    c001f69b <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001f69a:	fb                   	sti    
c001f69b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f69f:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001f6a4:	85 f6                	test   esi,esi
c001f6a6:	0f 84 dd 00 00 00    	je     c001f789 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001f6ac:	57                   	push   edi
c001f6ad:	6a 01                	push   0x1
c001f6af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6b6:	50                   	push   eax
c001f6b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6bd:	e8 84 f8 ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	0f b6 c0             	movzx  eax,al
c001f6c8:	85 c0                	test   eax,eax
c001f6ca:	74 23                	je     c001f6ef <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001f6cc:	50                   	push   eax
c001f6cd:	89 c6                	mov    esi,eax
c001f6cf:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f6d6:	50                   	push   eax
c001f6d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6de:	50                   	push   eax
c001f6df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6e5:	e8 a2 f7 ff ff       	call   c001ee8c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f6ea:	e9 ba 00 00 00       	jmp    c001f7a9 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001f6ef:	85 ed                	test   ebp,ebp
c001f6f1:	74 49                	je     c001f73c <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001f6f3:	fa                   	cli    
c001f6f4:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f6fa:	31 c9                	xor    ecx,ecx
c001f6fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f700:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f704:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001f708:	51                   	push   ecx
c001f709:	51                   	push   ecx
c001f70a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f711:	50                   	push   eax
c001f712:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f718:	e8 71 ea ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001f71d:	89 c2                	mov    edx,eax
c001f71f:	89 f8                	mov    eax,edi
c001f721:	66 ef                	out    dx,ax
c001f723:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f727:	83 c4 10             	add    esp,0x10
c001f72a:	41                   	inc    ecx
c001f72b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001f731:	75 c9                	jne    c001f6fc <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001f733:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f73a:	eb 35                	jmp    c001f771 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001f73c:	fa                   	cli    
c001f73d:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f743:	52                   	push   edx
c001f744:	52                   	push   edx
c001f745:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f74c:	50                   	push   eax
c001f74d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f753:	e8 36 ea ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001f758:	b9 00 01 00 00       	mov    ecx,0x100
c001f75d:	89 c2                	mov    edx,eax
c001f75f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f763:	fc                   	cld    
c001f764:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f767:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f76e:	83 c4 10             	add    esp,0x10
c001f771:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f778:	75 01                	jne    c001f77b <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001f77a:	fb                   	sti    
c001f77b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f783:	4e                   	dec    esi
c001f784:	e9 1b ff ff ff       	jmp    c001f6a4 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001f789:	31 f6                	xor    esi,esi
c001f78b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f790:	74 1a                	je     c001f7ac <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f792:	50                   	push   eax
c001f793:	50                   	push   eax
c001f794:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f799:	83 f8 02             	cmp    eax,0x2
c001f79c:	0f 94 c0             	sete   al
c001f79f:	0f b6 c0             	movzx  eax,al
c001f7a2:	50                   	push   eax
c001f7a3:	53                   	push   ebx
c001f7a4:	e8 83 fb ff ff       	call   c001f32c <ATA::flush(bool)>
c001f7a9:	83 c4 10             	add    esp,0x10
c001f7ac:	83 c4 2c             	add    esp,0x2c
c001f7af:	89 f0                	mov    eax,esi
c001f7b1:	5b                   	pop    ebx
c001f7b2:	5e                   	pop    esi
c001f7b3:	5f                   	pop    edi
c001f7b4:	5d                   	pop    ebp
c001f7b5:	c3                   	ret    

c001f7b6 <ATA::read(unsigned long long, int, void*)>:
c001f7b6:	57                   	push   edi
c001f7b7:	b8 04 00 00 00       	mov    eax,0x4
c001f7bc:	56                   	push   esi
c001f7bd:	53                   	push   ebx
c001f7be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f7c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f7c6:	8d 7a ff             	lea    edi,[edx-0x1]
c001f7c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7d1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f7d7:	77 25                	ja     c001f7fe <ATA::read(unsigned long long, int, void*)+0x48>
c001f7d9:	b8 06 00 00 00       	mov    eax,0x6
c001f7de:	85 f6                	test   esi,esi
c001f7e0:	74 1c                	je     c001f7fe <ATA::read(unsigned long long, int, void*)+0x48>
c001f7e2:	50                   	push   eax
c001f7e3:	50                   	push   eax
c001f7e4:	6a 00                	push   0x0
c001f7e6:	56                   	push   esi
c001f7e7:	52                   	push   edx
c001f7e8:	53                   	push   ebx
c001f7e9:	51                   	push   ecx
c001f7ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f7ee:	e8 d3 fb ff ff       	call   c001f3c6 <ATA::access(unsigned long long, int, void*, bool)>
c001f7f3:	83 c4 20             	add    esp,0x20
c001f7f6:	85 c0                	test   eax,eax
c001f7f8:	0f 95 c0             	setne  al
c001f7fb:	0f b6 c0             	movzx  eax,al
c001f7fe:	5b                   	pop    ebx
c001f7ff:	5e                   	pop    esi
c001f800:	5f                   	pop    edi
c001f801:	c3                   	ret    

c001f802 <ATA::write(unsigned long long, int, void*)>:
c001f802:	57                   	push   edi
c001f803:	b8 04 00 00 00       	mov    eax,0x4
c001f808:	56                   	push   esi
c001f809:	53                   	push   ebx
c001f80a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f80e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f812:	8d 7a ff             	lea    edi,[edx-0x1]
c001f815:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f819:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f81d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f823:	77 25                	ja     c001f84a <ATA::write(unsigned long long, int, void*)+0x48>
c001f825:	b8 06 00 00 00       	mov    eax,0x6
c001f82a:	85 f6                	test   esi,esi
c001f82c:	74 1c                	je     c001f84a <ATA::write(unsigned long long, int, void*)+0x48>
c001f82e:	50                   	push   eax
c001f82f:	50                   	push   eax
c001f830:	6a 01                	push   0x1
c001f832:	56                   	push   esi
c001f833:	52                   	push   edx
c001f834:	53                   	push   ebx
c001f835:	51                   	push   ecx
c001f836:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f83a:	e8 87 fb ff ff       	call   c001f3c6 <ATA::access(unsigned long long, int, void*, bool)>
c001f83f:	83 c4 20             	add    esp,0x20
c001f842:	85 c0                	test   eax,eax
c001f844:	0f 95 c0             	setne  al
c001f847:	0f b6 c0             	movzx  eax,al
c001f84a:	5b                   	pop    ebx
c001f84b:	5e                   	pop    esi
c001f84c:	5f                   	pop    edi
c001f84d:	c3                   	ret    

c001f84e <ATA::detectCHS()>:
c001f84e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f852:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f858:	c1 e0 06             	shl    eax,0x6
c001f85b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f861:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f86b:	c7 44 24 04 74 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b74
c001f873:	e9 66 07 ff ff       	jmp    c000ffde <KePanic(char const*)>

c001f878 <ATA::open(int, int, void*)>:
c001f878:	53                   	push   ebx
c001f879:	83 ec 08             	sub    esp,0x8
c001f87c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f884:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f888:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f88e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f894:	c1 e0 06             	shl    eax,0x6
c001f897:	01 d0                	add    eax,edx
c001f899:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f8a0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f8a6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f8ad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f8b7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f8bd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f8c4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f8cb:	75 0c                	jne    c001f8d9 <ATA::open(int, int, void*)+0x61>
c001f8cd:	83 ec 0c             	sub    esp,0xc
c001f8d0:	53                   	push   ebx
c001f8d1:	e8 78 ff ff ff       	call   c001f84e <ATA::detectCHS()>
c001f8d6:	83 c4 10             	add    esp,0x10
c001f8d9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f8df:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f8e5:	c1 e0 06             	shl    eax,0x6
c001f8e8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f8ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8f9:	d1 e8                	shr    eax,1
c001f8fb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f901:	6a 04                	push   0x4
c001f903:	6a 0c                	push   0xc
c001f905:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f90c:	50                   	push   eax
c001f90d:	52                   	push   edx
c001f90e:	e8 8d e8 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f913:	90                   	nop
c001f914:	90                   	nop
c001f915:	6a 00                	push   0x0
c001f917:	6a 0c                	push   0xc
c001f919:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f920:	50                   	push   eax
c001f921:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f927:	e8 74 e8 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f92c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f932:	83 c4 20             	add    esp,0x20
c001f935:	c1 e0 06             	shl    eax,0x6
c001f938:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f93e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f945:	0f 84 00 01 00 00    	je     c001fa4b <ATA::open(int, int, void*)+0x1d3>
c001f94b:	83 ec 0c             	sub    esp,0xc
c001f94e:	6a 08                	push   0x8
c001f950:	e8 5b 09 ff ff       	call   c00102b0 <Phys::allocateContiguousPages(int)>
c001f955:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f95b:	c7 04 24 86 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b86
c001f962:	e8 fd 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f967:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f96e:	e8 fa 3a ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c001f973:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f979:	6a 03                	push   0x3
c001f97b:	50                   	push   eax
c001f97c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f982:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f988:	e8 c3 41 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f98d:	83 c4 20             	add    esp,0x20
c001f990:	e8 3d 08 ff ff       	call   c00101d2 <Phys::allocatePage()>
c001f995:	83 ec 0c             	sub    esp,0xc
c001f998:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f99e:	6a 01                	push   0x1
c001f9a0:	e8 c8 3a ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c001f9a5:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f9ab:	6a 03                	push   0x3
c001f9ad:	50                   	push   eax
c001f9ae:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f9b4:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f9ba:	e8 91 41 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9bf:	83 c4 14             	add    esp,0x14
c001f9c2:	68 bf 5b 02 c0       	push   0xc0025bbf
c001f9c7:	e8 98 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f9cc:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f9d3:	50                   	push   eax
c001f9d4:	6a 12                	push   0x12
c001f9d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9dd:	50                   	push   eax
c001f9de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9e4:	e8 b7 e7 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e9:	83 c4 20             	add    esp,0x20
c001f9ec:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001f9f2:	0f b6 c4             	movzx  eax,ah
c001f9f5:	50                   	push   eax
c001f9f6:	6a 13                	push   0x13
c001f9f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ff:	50                   	push   eax
c001fa00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa06:	e8 95 e7 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa0b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fa12:	50                   	push   eax
c001fa13:	6a 14                	push   0x14
c001fa15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa1c:	50                   	push   eax
c001fa1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa23:	e8 78 e7 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa28:	83 c4 20             	add    esp,0x20
c001fa2b:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001fa32:	50                   	push   eax
c001fa33:	6a 15                	push   0x15
c001fa35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa3c:	50                   	push   eax
c001fa3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa43:	e8 58 e7 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa48:	83 c4 10             	add    esp,0x10
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	53                   	push   ebx
c001fa4f:	e8 f2 a3 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001fa54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa57:	e8 8a b2 fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c001fa5c:	31 c0                	xor    eax,eax
c001fa5e:	83 c4 18             	add    esp,0x18
c001fa61:	5b                   	pop    ebx
c001fa62:	c3                   	ret    

c001fa63 <combineCharAndColour(char, unsigned char)>:
c001fa63:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fa68:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001fa6e:	c1 e0 08             	shl    eax,0x8
c001fa71:	09 d0                	or     eax,edx
c001fa73:	c3                   	ret    

c001fa74 <combineColours(unsigned char, unsigned char)>:
c001fa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fa79:	c1 e0 04             	shl    eax,0x4
c001fa7c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001fa80:	c3                   	ret    
c001fa81:	90                   	nop

c001fa82 <ATAPI::write(unsigned long long, int, void*)>:
c001fa82:	b8 03 00 00 00       	mov    eax,0x3
c001fa87:	c3                   	ret    

c001fa88 <ATAPI::close(int, int, void*)>:
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fa95:	85 c0                	test   eax,eax
c001fa97:	74 0c                	je     c001faa5 <ATAPI::close(int, int, void*)+0x1d>
c001fa99:	83 ec 0c             	sub    esp,0xc
c001fa9c:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa9e:	50                   	push   eax
c001fa9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001faa2:	83 c4 10             	add    esp,0x10
c001faa5:	31 c0                	xor    eax,eax
c001faa7:	83 c4 0c             	add    esp,0xc
c001faaa:	c3                   	ret    
c001faab:	90                   	nop

c001faac <ATAPI::ATAPI()>:
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab3:	83 ec 04             	sub    esp,0x4
c001fab6:	68 00 08 00 00       	push   0x800
c001fabb:	68 71 5d 02 c0       	push   0xc0025d71
c001fac0:	50                   	push   eax
c001fac1:	e8 18 a3 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fac6:	83 c4 10             	add    esp,0x10
c001fac9:	ba 80 5c 02 c0       	mov    edx,0xc0025c80
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	89 10                	mov    DWORD PTR [eax],edx
c001fad4:	90                   	nop
c001fad5:	83 c4 0c             	add    esp,0xc
c001fad8:	c3                   	ret    
c001fad9:	90                   	nop

c001fada <ATAPI::readyForCommand()>:
c001fada:	56                   	push   esi
c001fadb:	53                   	push   ebx
c001fadc:	31 db                	xor    ebx,ebx
c001fade:	50                   	push   eax
c001fadf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fae3:	50                   	push   eax
c001fae4:	6a 0c                	push   0xc
c001fae6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001faed:	50                   	push   eax
c001faee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001faf4:	e8 67 e7 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001faf9:	83 c4 10             	add    esp,0x10
c001fafc:	a8 88                	test   al,0x88
c001fafe:	74 26                	je     c001fb26 <ATAPI::readyForCommand()+0x4c>
c001fb00:	43                   	inc    ebx
c001fb01:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb07:	7e da                	jle    c001fae3 <ATAPI::readyForCommand()+0x9>
c001fb09:	51                   	push   ecx
c001fb0a:	51                   	push   ecx
c001fb0b:	6a 00                	push   0x0
c001fb0d:	68 5e 01 00 00       	push   0x15e
c001fb12:	e8 ed 75 ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c001fb17:	83 c4 10             	add    esp,0x10
c001fb1a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb20:	75 c1                	jne    c001fae3 <ATAPI::readyForCommand()+0x9>
c001fb22:	31 c0                	xor    eax,eax
c001fb24:	eb 02                	jmp    c001fb28 <ATAPI::readyForCommand()+0x4e>
c001fb26:	b0 01                	mov    al,0x1
c001fb28:	5a                   	pop    edx
c001fb29:	5b                   	pop    ebx
c001fb2a:	5e                   	pop    esi
c001fb2b:	c3                   	ret    

c001fb2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fb2c:	55                   	push   ebp
c001fb2d:	57                   	push   edi
c001fb2e:	56                   	push   esi
c001fb2f:	53                   	push   ebx
c001fb30:	83 ec 20             	sub    esp,0x20
c001fb33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fb37:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fb3b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fb3f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fb43:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fb47:	6a 01                	push   0x1
c001fb49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb50:	50                   	push   eax
c001fb51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb57:	e8 4e e8 ff ff       	call   c001e3aa <IDE::enableIRQs(unsigned char, bool)>
c001fb5c:	5e                   	pop    esi
c001fb5d:	58                   	pop    eax
c001fb5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb65:	50                   	push   eax
c001fb66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb6c:	e8 09 e6 ff ff       	call   c001e17a <IDE::prepareInterrupt(unsigned char)>
c001fb71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fb74:	e8 61 ff ff ff       	call   c001fada <ATAPI::readyForCommand()>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	84 c0                	test   al,al
c001fb7e:	75 0a                	jne    c001fb8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fb80:	bb 01 00 00 00       	mov    ebx,0x1
c001fb85:	e9 60 02 00 00       	jmp    c001fdea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fb8a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fb90:	c1 e0 04             	shl    eax,0x4
c001fb93:	0f b6 c0             	movzx  eax,al
c001fb96:	50                   	push   eax
c001fb97:	6a 06                	push   0x6
c001fb99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fba0:	50                   	push   eax
c001fba1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fba7:	e8 f4 e5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbac:	6a 00                	push   0x0
c001fbae:	6a 01                	push   0x1
c001fbb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbb7:	50                   	push   eax
c001fbb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbbe:	e8 dd e5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbc3:	83 c4 20             	add    esp,0x20
c001fbc6:	0f b6 c3             	movzx  eax,bl
c001fbc9:	0f b6 df             	movzx  ebx,bh
c001fbcc:	50                   	push   eax
c001fbcd:	6a 04                	push   0x4
c001fbcf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbd6:	50                   	push   eax
c001fbd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbdd:	e8 be e5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbe2:	53                   	push   ebx
c001fbe3:	6a 05                	push   0x5
c001fbe5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbec:	50                   	push   eax
c001fbed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbf3:	e8 a8 e5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbf8:	83 c4 20             	add    esp,0x20
c001fbfb:	68 a0 00 00 00       	push   0xa0
c001fc00:	6a 07                	push   0x7
c001fc02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc09:	50                   	push   eax
c001fc0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc10:	e8 8b e5 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc15:	83 c4 0c             	add    esp,0xc
c001fc18:	6a 01                	push   0x1
c001fc1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc21:	50                   	push   eax
c001fc22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc28:	e8 19 f3 ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001fc2d:	83 c4 10             	add    esp,0x10
c001fc30:	0f b6 d8             	movzx  ebx,al
c001fc33:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001fc39:	85 db                	test   ebx,ebx
c001fc3b:	74 20                	je     c001fc5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fc3d:	53                   	push   ebx
c001fc3e:	0f b6 c0             	movzx  eax,al
c001fc41:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc50:	e8 37 f2 ff ff       	call   c001ee8c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	e9 8d 01 00 00       	jmp    c001fdea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fc5d:	0f b6 c0             	movzx  eax,al
c001fc60:	53                   	push   ebx
c001fc61:	53                   	push   ebx
c001fc62:	50                   	push   eax
c001fc63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc69:	e8 20 e5 ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001fc6e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fc72:	b9 06 00 00 00       	mov    ecx,0x6
c001fc77:	89 c2                	mov    edx,eax
c001fc79:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fc7c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fc80:	83 c4 10             	add    esp,0x10
c001fc83:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001fc88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc8c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fc92:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fc99:	85 db                	test   ebx,ebx
c001fc9b:	0f 84 ec 00 00 00    	je     c001fd8d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001fca1:	51                   	push   ecx
c001fca2:	51                   	push   ecx
c001fca3:	52                   	push   edx
c001fca4:	50                   	push   eax
c001fca5:	e8 64 e6 ff ff       	call   c001e30e <IDE::waitInterrupt(unsigned char)>
c001fcaa:	83 c4 10             	add    esp,0x10
c001fcad:	84 c0                	test   al,al
c001fcaf:	0f 84 cb fe ff ff    	je     c001fb80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fcb5:	56                   	push   esi
c001fcb6:	56                   	push   esi
c001fcb7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcbe:	50                   	push   eax
c001fcbf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcc5:	e8 b0 e4 ff ff       	call   c001e17a <IDE::prepareInterrupt(unsigned char)>
c001fcca:	83 c4 0c             	add    esp,0xc
c001fccd:	6a 04                	push   0x4
c001fccf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcd6:	50                   	push   eax
c001fcd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcdd:	e8 7e e5 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001fce2:	83 c4 0c             	add    esp,0xc
c001fce5:	89 c6                	mov    esi,eax
c001fce7:	6a 05                	push   0x5
c001fce9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf0:	50                   	push   eax
c001fcf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcf7:	e8 64 e5 ff ff       	call   c001e260 <IDE::read(unsigned char, unsigned char)>
c001fcfc:	89 f1                	mov    ecx,esi
c001fcfe:	0f b6 c0             	movzx  eax,al
c001fd01:	0f b6 f1             	movzx  esi,cl
c001fd04:	c1 e0 08             	shl    eax,0x8
c001fd07:	09 c6                	or     esi,eax
c001fd09:	d1 fe                	sar    esi,1
c001fd0b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd0f:	83 c4 10             	add    esp,0x10
c001fd12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd17:	74 41                	je     c001fd5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001fd19:	31 c9                	xor    ecx,ecx
c001fd1b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd21:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd28:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fd2c:	75 0a                	jne    c001fd38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001fd2e:	01 c9                	add    ecx,ecx
c001fd30:	01 cd                	add    ebp,ecx
c001fd32:	4b                   	dec    ebx
c001fd33:	e9 54 ff ff ff       	jmp    c001fc8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001fd38:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fd3d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fd41:	51                   	push   ecx
c001fd42:	51                   	push   ecx
c001fd43:	52                   	push   edx
c001fd44:	50                   	push   eax
c001fd45:	e8 44 e4 ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001fd4a:	89 c2                	mov    edx,eax
c001fd4c:	89 f0                	mov    eax,esi
c001fd4e:	66 ef                	out    dx,ax
c001fd50:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fd54:	83 c4 10             	add    esp,0x10
c001fd57:	41                   	inc    ecx
c001fd58:	eb c1                	jmp    c001fd1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001fd5a:	31 f6                	xor    esi,esi
c001fd5c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd62:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd69:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fd6d:	75 06                	jne    c001fd75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001fd6f:	01 f6                	add    esi,esi
c001fd71:	01 f5                	add    ebp,esi
c001fd73:	eb bd                	jmp    c001fd32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001fd75:	51                   	push   ecx
c001fd76:	51                   	push   ecx
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	e8 10 e4 ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001fd7e:	89 c2                	mov    edx,eax
c001fd80:	66 ed                	in     ax,dx
c001fd82:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fd87:	83 c4 10             	add    esp,0x10
c001fd8a:	46                   	inc    esi
c001fd8b:	eb cf                	jmp    c001fd5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001fd8d:	51                   	push   ecx
c001fd8e:	51                   	push   ecx
c001fd8f:	52                   	push   edx
c001fd90:	50                   	push   eax
c001fd91:	e8 78 e5 ff ff       	call   c001e30e <IDE::waitInterrupt(unsigned char)>
c001fd96:	83 c4 10             	add    esp,0x10
c001fd99:	84 c0                	test   al,al
c001fd9b:	0f 84 df fd ff ff    	je     c001fb80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fda1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fda6:	52                   	push   edx
c001fda7:	52                   	push   edx
c001fda8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdaf:	50                   	push   eax
c001fdb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdb6:	e8 bf e3 ff ff       	call   c001e17a <IDE::prepareInterrupt(unsigned char)>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	50                   	push   eax
c001fdbf:	50                   	push   eax
c001fdc0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdc7:	50                   	push   eax
c001fdc8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdce:	e8 bb e3 ff ff       	call   c001e18e <IDE::getBase(unsigned char)>
c001fdd3:	8d 50 07             	lea    edx,[eax+0x7]
c001fdd6:	ec                   	in     al,dx
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	a8 88                	test   al,0x88
c001fddc:	74 0a                	je     c001fde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001fdde:	4b                   	dec    ebx
c001fddf:	75 dd                	jne    c001fdbe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001fde1:	bb 02 00 00 00       	mov    ebx,0x2
c001fde6:	eb 02                	jmp    c001fdea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fde8:	31 db                	xor    ebx,ebx
c001fdea:	83 c4 1c             	add    esp,0x1c
c001fded:	89 d8                	mov    eax,ebx
c001fdef:	5b                   	pop    ebx
c001fdf0:	5e                   	pop    esi
c001fdf1:	5f                   	pop    edi
c001fdf2:	5d                   	pop    ebp
c001fdf3:	c3                   	ret    

c001fdf4 <ATAPI::diskRemoved()>:
c001fdf4:	53                   	push   ebx
c001fdf5:	83 ec 14             	sub    esp,0x14
c001fdf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fdfc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe03:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fe09:	e8 c8 ab fe ff       	call   c000a9d6 <LogicalDisk::unmount()>
c001fe0e:	58                   	pop    eax
c001fe0f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fe15:	e8 9a b5 fe ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c001fe1a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fe20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fe24:	83 c4 18             	add    esp,0x18
c001fe27:	5b                   	pop    ebx
c001fe28:	e9 77 b5 fe ff       	jmp    c000b3a4 <VCache::invalidateReadBuffer()>
c001fe2d:	90                   	nop

c001fe2e <ATAPI::eject()>:
c001fe2e:	57                   	push   edi
c001fe2f:	b9 03 00 00 00       	mov    ecx,0x3
c001fe34:	53                   	push   ebx
c001fe35:	83 ec 14             	sub    esp,0x14
c001fe38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fe3c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe40:	fc                   	cld    
c001fe41:	31 c0                	xor    eax,eax
c001fe43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe45:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fe4a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fe4f:	50                   	push   eax
c001fe50:	50                   	push   eax
c001fe51:	6a 00                	push   0x0
c001fe53:	6a 00                	push   0x0
c001fe55:	6a 00                	push   0x0
c001fe57:	6a 02                	push   0x2
c001fe59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe5d:	50                   	push   eax
c001fe5e:	53                   	push   ebx
c001fe5f:	e8 c8 fc ff ff       	call   c001fb2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe64:	83 c4 14             	add    esp,0x14
c001fe67:	53                   	push   ebx
c001fe68:	e8 87 ff ff ff       	call   c001fdf4 <ATAPI::diskRemoved()>
c001fe6d:	83 c4 24             	add    esp,0x24
c001fe70:	31 c0                	xor    eax,eax
c001fe72:	5b                   	pop    ebx
c001fe73:	5f                   	pop    edi
c001fe74:	c3                   	ret    
c001fe75:	90                   	nop

c001fe76 <ATAPI::diskInserted()>:
c001fe76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fe81:	c3                   	ret    

c001fe82 <ATAPI::detectMedia()>:
c001fe82:	56                   	push   esi
c001fe83:	53                   	push   ebx
c001fe84:	83 ec 28             	sub    esp,0x28
c001fe87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe8b:	6a 0c                	push   0xc
c001fe8d:	6a 00                	push   0x0
c001fe8f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fe93:	56                   	push   esi
c001fe94:	e8 57 06 fe ff       	call   c00004f0 <memset>
c001fe99:	58                   	pop    eax
c001fe9a:	5a                   	pop    edx
c001fe9b:	6a 00                	push   0x0
c001fe9d:	6a 00                	push   0x0
c001fe9f:	6a 00                	push   0x0
c001fea1:	6a 00                	push   0x0
c001fea3:	56                   	push   esi
c001fea4:	53                   	push   ebx
c001fea5:	e8 82 fc ff ff       	call   c001fb2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001feaa:	83 c4 1c             	add    esp,0x1c
c001fead:	6a 0c                	push   0xc
c001feaf:	6a 00                	push   0x0
c001feb1:	56                   	push   esi
c001feb2:	e8 39 06 fe ff       	call   c00004f0 <memset>
c001feb7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001febc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fec1:	59                   	pop    ecx
c001fec2:	58                   	pop    eax
c001fec3:	6a 01                	push   0x1
c001fec5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fec9:	50                   	push   eax
c001feca:	6a 00                	push   0x0
c001fecc:	6a 12                	push   0x12
c001fece:	56                   	push   esi
c001fecf:	53                   	push   ebx
c001fed0:	e8 57 fc ff ff       	call   c001fb2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fed5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fed9:	83 c4 20             	add    esp,0x20
c001fedc:	83 e0 7f             	and    eax,0x7f
c001fedf:	83 f8 70             	cmp    eax,0x70
c001fee2:	74 15                	je     c001fef9 <ATAPI::detectMedia()+0x77>
c001fee4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001feeb:	75 0c                	jne    c001fef9 <ATAPI::detectMedia()+0x77>
c001feed:	83 ec 0c             	sub    esp,0xc
c001fef0:	53                   	push   ebx
c001fef1:	e8 80 ff ff ff       	call   c001fe76 <ATAPI::diskInserted()>
c001fef6:	83 c4 10             	add    esp,0x10
c001fef9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fefd:	83 e0 0f             	and    eax,0xf
c001ff00:	83 f8 02             	cmp    eax,0x2
c001ff03:	75 1b                	jne    c001ff20 <ATAPI::detectMedia()+0x9e>
c001ff05:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff0a:	75 2d                	jne    c001ff39 <ATAPI::detectMedia()+0xb7>
c001ff0c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff13:	74 24                	je     c001ff39 <ATAPI::detectMedia()+0xb7>
c001ff15:	83 ec 0c             	sub    esp,0xc
c001ff18:	53                   	push   ebx
c001ff19:	e8 d6 fe ff ff       	call   c001fdf4 <ATAPI::diskRemoved()>
c001ff1e:	eb 16                	jmp    c001ff36 <ATAPI::detectMedia()+0xb4>
c001ff20:	85 c0                	test   eax,eax
c001ff22:	75 15                	jne    c001ff39 <ATAPI::detectMedia()+0xb7>
c001ff24:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff2b:	75 0c                	jne    c001ff39 <ATAPI::detectMedia()+0xb7>
c001ff2d:	83 ec 0c             	sub    esp,0xc
c001ff30:	53                   	push   ebx
c001ff31:	e8 40 ff ff ff       	call   c001fe76 <ATAPI::diskInserted()>
c001ff36:	83 c4 10             	add    esp,0x10
c001ff39:	83 c4 24             	add    esp,0x24
c001ff3c:	5b                   	pop    ebx
c001ff3d:	5e                   	pop    esi
c001ff3e:	c3                   	ret    
c001ff3f:	90                   	nop

c001ff40 <ATAPI::open(int, int, void*)>:
c001ff40:	56                   	push   esi
c001ff41:	53                   	push   ebx
c001ff42:	50                   	push   eax
c001ff43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ff4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff4f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff55:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ff5b:	c1 e0 06             	shl    eax,0x6
c001ff5e:	01 d0                	add    eax,edx
c001ff60:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ff67:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ff6d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ff74:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ff7e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ff84:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ff8b:	6a 04                	push   0x4
c001ff8d:	6a 0c                	push   0xc
c001ff8f:	51                   	push   ecx
c001ff90:	52                   	push   edx
c001ff91:	e8 0a e2 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff96:	90                   	nop
c001ff97:	90                   	nop
c001ff98:	6a 00                	push   0x0
c001ff9a:	6a 0c                	push   0xc
c001ff9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffa3:	50                   	push   eax
c001ffa4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffaa:	e8 f1 e1 ff ff       	call   c001e1a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffaf:	83 c4 14             	add    esp,0x14
c001ffb2:	68 78 01 00 00       	push   0x178
c001ffb7:	e8 db fc fe ff       	call   c000fc97 <malloc>
c001ffbc:	83 c4 0c             	add    esp,0xc
c001ffbf:	89 c6                	mov    esi,eax
c001ffc1:	6a 00                	push   0x0
c001ffc3:	68 ff ff ff 7f       	push   0x7fffffff
c001ffc8:	6a 00                	push   0x0
c001ffca:	6a 00                	push   0x0
c001ffcc:	53                   	push   ebx
c001ffcd:	68 23 5e 02 c0       	push   0xc0025e23
c001ffd2:	50                   	push   eax
c001ffd3:	e8 3c a8 fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ffd8:	83 c4 14             	add    esp,0x14
c001ffdb:	56                   	push   esi
c001ffdc:	e8 f3 a8 fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c001ffe1:	5a                   	pop    edx
c001ffe2:	0f be c0             	movsx  eax,al
c001ffe5:	59                   	pop    ecx
c001ffe6:	50                   	push   eax
c001ffe7:	68 68 5c 02 c0       	push   0xc0025c68
c001ffec:	e8 73 6f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fff1:	58                   	pop    eax
c001fff2:	5a                   	pop    edx
c001fff3:	56                   	push   esi
c001fff4:	53                   	push   ebx
c001fff5:	e8 02 9a fe ff       	call   c00099fc <Device::addChild(Device*)>
c001fffa:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020003:	e8 3e 9e fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020008:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002000f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020012:	e8 6b fe ff ff       	call   c001fe82 <ATAPI::detectMedia()>
c0020017:	83 c4 14             	add    esp,0x14
c002001a:	31 c0                	xor    eax,eax
c002001c:	5b                   	pop    ebx
c002001d:	5e                   	pop    esi
c002001e:	c3                   	ret    
c002001f:	90                   	nop

c0020020 <ATAPI::read(unsigned long long, int, void*)>:
c0020020:	55                   	push   ebp
c0020021:	57                   	push   edi
c0020022:	56                   	push   esi
c0020023:	53                   	push   ebx
c0020024:	83 ec 1c             	sub    esp,0x1c
c0020027:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002002b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002002f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020033:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002003a:	74 3c                	je     c0020078 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002003c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020040:	b9 03 00 00 00       	mov    ecx,0x3
c0020045:	fc                   	cld    
c0020046:	31 c0                	xor    eax,eax
c0020048:	0f ce                	bswap  esi
c002004a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002004c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020051:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020055:	89 e8                	mov    eax,ebp
c0020057:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002005b:	50                   	push   eax
c002005c:	50                   	push   eax
c002005d:	55                   	push   ebp
c002005e:	c1 e5 0b             	shl    ebp,0xb
c0020061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020065:	6a 00                	push   0x0
c0020067:	55                   	push   ebp
c0020068:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002006c:	50                   	push   eax
c002006d:	53                   	push   ebx
c002006e:	e8 b9 fa ff ff       	call   c001fb2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020073:	83 c4 20             	add    esp,0x20
c0020076:	eb 1a                	jmp    c0020092 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020078:	83 ec 0c             	sub    esp,0xc
c002007b:	53                   	push   ebx
c002007c:	e8 01 fe ff ff       	call   c001fe82 <ATAPI::detectMedia()>
c0020081:	83 c4 10             	add    esp,0x10
c0020084:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002008b:	75 af                	jne    c002003c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002008d:	b8 02 00 00 00       	mov    eax,0x2
c0020092:	83 c4 1c             	add    esp,0x1c
c0020095:	5b                   	pop    ebx
c0020096:	5e                   	pop    esi
c0020097:	5f                   	pop    edi
c0020098:	5d                   	pop    ebp
c0020099:	c3                   	ret    

c002009a <SATA::close(int, int, void*)>:
c002009a:	83 ec 0c             	sub    esp,0xc
c002009d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200a7:	85 c0                	test   eax,eax
c00200a9:	74 0c                	je     c00200b7 <SATA::close(int, int, void*)+0x1d>
c00200ab:	83 ec 0c             	sub    esp,0xc
c00200ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00200b0:	50                   	push   eax
c00200b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00200b4:	83 c4 10             	add    esp,0x10
c00200b7:	31 c0                	xor    eax,eax
c00200b9:	83 c4 0c             	add    esp,0xc
c00200bc:	c3                   	ret    
c00200bd:	90                   	nop

c00200be <SATA::powerSaving(PowerSavingLevel)>:
c00200be:	c3                   	ret    
c00200bf:	90                   	nop

c00200c0 <SATA::open(int, int, void*)>:
c00200c0:	56                   	push   esi
c00200c1:	53                   	push   ebx
c00200c2:	83 ec 10             	sub    esp,0x10
c00200c5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00200c9:	68 b0 5c 02 c0       	push   0xc0025cb0
c00200ce:	e8 91 6e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00200d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00200d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00200e7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00200f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00200f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020105:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002010c:	e8 c1 00 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0020111:	89 c6                	mov    esi,eax
c0020113:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020119:	81 c6 00 10 00 00    	add    esi,0x1000
c002011f:	e8 ae 00 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0020124:	83 c4 10             	add    esp,0x10
c0020127:	39 c6                	cmp    esi,eax
c0020129:	74 10                	je     c002013b <SATA::open(int, int, void*)+0x7b>
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	68 bc 5c 02 c0       	push   0xc0025cbc
c0020133:	e8 a6 fe fe ff       	call   c000ffde <KePanic(char const*)>
c0020138:	83 c4 10             	add    esp,0x10
c002013b:	83 ec 0c             	sub    esp,0xc
c002013e:	6a 02                	push   0x2
c0020140:	e8 28 33 ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0020145:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002014b:	6a 03                	push   0x3
c002014d:	50                   	push   eax
c002014e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020154:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002015a:	e8 f1 39 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c002015f:	83 c4 14             	add    esp,0x14
c0020162:	53                   	push   ebx
c0020163:	e8 de 9c fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002016b:	e8 76 ab fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c0020170:	83 c4 14             	add    esp,0x14
c0020173:	31 c0                	xor    eax,eax
c0020175:	5b                   	pop    ebx
c0020176:	5e                   	pop    esi
c0020177:	c3                   	ret    

c0020178 <SATA::SATA()>:
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017f:	83 ec 04             	sub    esp,0x4
c0020182:	68 00 02 00 00       	push   0x200
c0020187:	68 d0 5c 02 c0       	push   0xc0025cd0
c002018c:	50                   	push   eax
c002018d:	e8 4c 9c fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020192:	83 c4 10             	add    esp,0x10
c0020195:	ba 40 5d 02 c0       	mov    edx,0xc0025d40
c002019a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019e:	89 10                	mov    DWORD PTR [eax],edx
c00201a0:	90                   	nop
c00201a1:	83 c4 0c             	add    esp,0xc
c00201a4:	c3                   	ret    
c00201a5:	90                   	nop

c00201a6 <SATA::access(unsigned long long, int, void*, bool)>:
c00201a6:	55                   	push   ebp
c00201a7:	57                   	push   edi
c00201a8:	56                   	push   esi
c00201a9:	53                   	push   ebx
c00201aa:	83 ec 2c             	sub    esp,0x2c
c00201ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00201b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00201b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00201bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00201c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201c5:	fa                   	cli    
c00201c6:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00201cc:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00201d1:	7e 10                	jle    c00201e3 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c00201d3:	83 ec 0c             	sub    esp,0xc
c00201d6:	68 e0 5c 02 c0       	push   0xc0025ce0
c00201db:	e8 fe fd fe ff       	call   c000ffde <KePanic(char const*)>
c00201e0:	83 c4 10             	add    esp,0x10
c00201e3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00201e9:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00201ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00201f9:	89 d0                	mov    eax,edx
c00201fb:	c1 e0 07             	shl    eax,0x7
c00201fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020202:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002020c:	51                   	push   ecx
c002020d:	8d 42 02             	lea    eax,[edx+0x2]
c0020210:	51                   	push   ecx
c0020211:	c1 e0 07             	shl    eax,0x7
c0020214:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020218:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002021c:	50                   	push   eax
c002021d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020223:	e8 fe ed ff ff       	call   c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020228:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002022c:	83 c4 10             	add    esp,0x10
c002022f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020234:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020238:	0f 84 a4 01 00 00    	je     c00203e2 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002023e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020242:	c1 e0 09             	shl    eax,0x9
c0020245:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002024a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002024e:	74 0e                	je     c002025e <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020250:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020256:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002025a:	89 c1                	mov    ecx,eax
c002025c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002025e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020264:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020268:	8d 42 02             	lea    eax,[edx+0x2]
c002026b:	c1 e0 07             	shl    eax,0x7
c002026e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020272:	8b 00                	mov    eax,DWORD PTR [eax]
c0020274:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002027a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020280:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020284:	c1 e1 05             	shl    ecx,0x5
c0020287:	01 c8                	add    eax,ecx
c0020289:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002028d:	83 e1 01             	and    ecx,0x1
c0020290:	89 ce                	mov    esi,ecx
c0020292:	8a 08                	mov    cl,BYTE PTR [eax]
c0020294:	c1 e6 06             	shl    esi,0x6
c0020297:	83 e1 bf             	and    ecx,0xffffffbf
c002029a:	09 f1                	or     ecx,esi
c002029c:	88 08                	mov    BYTE PTR [eax],cl
c002029e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00202a0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00202a6:	81 c9 05 00 01 00    	or     ecx,0x10005
c00202ac:	89 08                	mov    DWORD PTR [eax],ecx
c00202ae:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00202b4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00202ba:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00202c0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00202c3:	50                   	push   eax
c00202c4:	68 90 00 00 00       	push   0x90
c00202c9:	6a 00                	push   0x0
c00202cb:	56                   	push   esi
c00202cc:	e8 1f 02 fe ff       	call   c00004f0 <memset>
c00202d1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00202d7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00202dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	48                   	dec    eax
c00202e5:	25 ff ff 3f 00       	and    eax,0x3fffff
c00202ea:	89 c1                	mov    ecx,eax
c00202ec:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00202f2:	25 00 00 c0 ff       	and    eax,0xffc00000
c00202f7:	09 c8                	or     eax,ecx
c00202f9:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00202ff:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020305:	83 c8 80             	or     eax,0xffffff80
c0020308:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002030e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020311:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020315:	25 00 7f 00 00       	and    eax,0x7f00
c002031a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002031f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020324:	66 89 06             	mov    WORD PTR [esi],ax
c0020327:	b0 35                	mov    al,0x35
c0020329:	75 02                	jne    c002032d <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002032b:	b0 25                	mov    al,0x25
c002032d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020330:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020334:	89 e8                	mov    eax,ebp
c0020336:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002033a:	c1 e8 10             	shr    eax,0x10
c002033d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020340:	89 e8                	mov    eax,ebp
c0020342:	c1 e8 18             	shr    eax,0x18
c0020345:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020348:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002034c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002034f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020353:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020356:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002035a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002035e:	89 d6                	mov    esi,edx
c0020360:	31 c0                	xor    eax,eax
c0020362:	c1 e6 07             	shl    esi,0x7
c0020365:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020369:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002036f:	80 e1 88             	and    cl,0x88
c0020372:	74 0a                	je     c002037e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020374:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020379:	74 0a                	je     c0020385 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002037b:	40                   	inc    eax
c002037c:	eb eb                	jmp    c0020369 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002037e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020383:	75 0a                	jne    c002038f <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	68 19 5d 02 c0       	push   0xc0025d19
c002038d:	eb 36                	jmp    c00203c5 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002038f:	b8 01 00 00 00       	mov    eax,0x1
c0020394:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020398:	c1 e2 07             	shl    edx,0x7
c002039b:	d3 e0                	shl    eax,cl
c002039d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00203a1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00203a7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00203ad:	85 c8                	test   eax,ecx
c00203af:	74 25                	je     c00203d6 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c00203b1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00203b7:	0f ba e1 1e          	bt     ecx,0x1e
c00203bb:	73 ea                	jae    c00203a7 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c00203bd:	83 ec 0c             	sub    esp,0xc
c00203c0:	68 27 5d 02 c0       	push   0xc0025d27
c00203c5:	e8 9a 6b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00203ca:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00203d1:	83 c4 10             	add    esp,0x10
c00203d4:	eb 13                	jmp    c00203e9 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c00203d6:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00203dc:	0f ba e0 1e          	bt     eax,0x1e
c00203e0:	73 18                	jae    c00203fa <SATA::access(unsigned long long, int, void*, bool)+0x254>
c00203e2:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00203e9:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00203f0:	75 01                	jne    c00203f3 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c00203f2:	fb                   	sti    
c00203f3:	b8 01 00 00 00       	mov    eax,0x1
c00203f8:	eb 2c                	jmp    c0020426 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00203fa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00203ff:	75 10                	jne    c0020411 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020401:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020407:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002040b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002040f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020411:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020418:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c002041d:	85 c0                	test   eax,eax
c002041f:	75 03                	jne    c0020424 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020421:	fb                   	sti    
c0020422:	eb 02                	jmp    c0020426 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020424:	31 c0                	xor    eax,eax
c0020426:	83 c4 2c             	add    esp,0x2c
c0020429:	5b                   	pop    ebx
c002042a:	5e                   	pop    esi
c002042b:	5f                   	pop    edi
c002042c:	5d                   	pop    ebp
c002042d:	c3                   	ret    

c002042e <SATA::read(unsigned long long, int, void*)>:
c002042e:	57                   	push   edi
c002042f:	b8 04 00 00 00       	mov    eax,0x4
c0020434:	56                   	push   esi
c0020435:	53                   	push   ebx
c0020436:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002043a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002043e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020441:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020445:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020449:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002044f:	77 25                	ja     c0020476 <SATA::read(unsigned long long, int, void*)+0x48>
c0020451:	b8 06 00 00 00       	mov    eax,0x6
c0020456:	85 f6                	test   esi,esi
c0020458:	74 1c                	je     c0020476 <SATA::read(unsigned long long, int, void*)+0x48>
c002045a:	50                   	push   eax
c002045b:	50                   	push   eax
c002045c:	6a 00                	push   0x0
c002045e:	56                   	push   esi
c002045f:	52                   	push   edx
c0020460:	53                   	push   ebx
c0020461:	51                   	push   ecx
c0020462:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020466:	e8 3b fd ff ff       	call   c00201a6 <SATA::access(unsigned long long, int, void*, bool)>
c002046b:	83 c4 20             	add    esp,0x20
c002046e:	85 c0                	test   eax,eax
c0020470:	0f 95 c0             	setne  al
c0020473:	0f b6 c0             	movzx  eax,al
c0020476:	5b                   	pop    ebx
c0020477:	5e                   	pop    esi
c0020478:	5f                   	pop    edi
c0020479:	c3                   	ret    

c002047a <SATA::write(unsigned long long, int, void*)>:
c002047a:	55                   	push   ebp
c002047b:	b8 04 00 00 00       	mov    eax,0x4
c0020480:	57                   	push   edi
c0020481:	56                   	push   esi
c0020482:	53                   	push   ebx
c0020483:	83 ec 0c             	sub    esp,0xc
c0020486:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002048a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002048e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020491:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020495:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020499:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002049f:	77 3d                	ja     c00204de <SATA::write(unsigned long long, int, void*)+0x64>
c00204a1:	b8 06 00 00 00       	mov    eax,0x6
c00204a6:	85 ed                	test   ebp,ebp
c00204a8:	74 34                	je     c00204de <SATA::write(unsigned long long, int, void*)+0x64>
c00204aa:	c1 e3 09             	shl    ebx,0x9
c00204ad:	01 eb                	add    ebx,ebp
c00204af:	89 d6                	mov    esi,edx
c00204b1:	89 cf                	mov    edi,ecx
c00204b3:	83 c6 01             	add    esi,0x1
c00204b6:	83 d7 00             	adc    edi,0x0
c00204b9:	50                   	push   eax
c00204ba:	50                   	push   eax
c00204bb:	6a 01                	push   0x1
c00204bd:	55                   	push   ebp
c00204be:	81 c5 00 02 00 00    	add    ebp,0x200
c00204c4:	6a 01                	push   0x1
c00204c6:	51                   	push   ecx
c00204c7:	52                   	push   edx
c00204c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204cc:	e8 d5 fc ff ff       	call   c00201a6 <SATA::access(unsigned long long, int, void*, bool)>
c00204d1:	83 c4 20             	add    esp,0x20
c00204d4:	89 f2                	mov    edx,esi
c00204d6:	89 f9                	mov    ecx,edi
c00204d8:	39 dd                	cmp    ebp,ebx
c00204da:	75 d3                	jne    c00204af <SATA::write(unsigned long long, int, void*)+0x35>
c00204dc:	31 c0                	xor    eax,eax
c00204de:	83 c4 0c             	add    esp,0xc
c00204e1:	5b                   	pop    ebx
c00204e2:	5e                   	pop    esi
c00204e3:	5f                   	pop    edi
c00204e4:	5d                   	pop    ebp
c00204e5:	c3                   	ret    

c00204e6 <SATAPI::write(unsigned long long, int, void*)>:
c00204e6:	b8 03 00 00 00       	mov    eax,0x3
c00204eb:	c3                   	ret    

c00204ec <SATAPI::close(int, int, void*)>:
c00204ec:	83 ec 0c             	sub    esp,0xc
c00204ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00204f9:	85 c0                	test   eax,eax
c00204fb:	74 0c                	je     c0020509 <SATAPI::close(int, int, void*)+0x1d>
c00204fd:	83 ec 0c             	sub    esp,0xc
c0020500:	8b 10                	mov    edx,DWORD PTR [eax]
c0020502:	50                   	push   eax
c0020503:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020506:	83 c4 10             	add    esp,0x10
c0020509:	31 c0                	xor    eax,eax
c002050b:	83 c4 0c             	add    esp,0xc
c002050e:	c3                   	ret    
c002050f:	90                   	nop

c0020510 <SATAPI::SATAPI()>:
c0020510:	83 ec 0c             	sub    esp,0xc
c0020513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020517:	83 ec 04             	sub    esp,0x4
c002051a:	68 00 08 00 00       	push   0x800
c002051f:	68 70 5d 02 c0       	push   0xc0025d70
c0020524:	50                   	push   eax
c0020525:	e8 b4 98 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	ba 64 5e 02 c0       	mov    edx,0xc0025e64
c0020532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020536:	89 10                	mov    DWORD PTR [eax],edx
c0020538:	90                   	nop
c0020539:	83 c4 0c             	add    esp,0xc
c002053c:	c3                   	ret    
c002053d:	90                   	nop

c002053e <SATAPI::diskRemoved()>:
c002053e:	c3                   	ret    
c002053f:	90                   	nop

c0020540 <SATAPI::diskInserted()>:
c0020540:	83 ec 18             	sub    esp,0x18
c0020543:	68 7c 5d 02 c0       	push   0xc0025d7c
c0020548:	e8 17 6a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002054d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020551:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020558:	83 c4 1c             	add    esp,0x1c
c002055b:	c3                   	ret    

c002055c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002055c:	55                   	push   ebp
c002055d:	57                   	push   edi
c002055e:	56                   	push   esi
c002055f:	53                   	push   ebx
c0020560:	83 ec 34             	sub    esp,0x34
c0020563:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020567:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002056b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002056f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020573:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020577:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002057d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020587:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002058d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020591:	83 c0 02             	add    eax,0x2
c0020594:	c1 e0 07             	shl    eax,0x7
c0020597:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002059b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002059f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205a3:	c1 e0 07             	shl    eax,0x7
c00205a6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00205aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205ae:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00205b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00205bc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00205c2:	e8 5f ea ff ff       	call   c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00205c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00205cb:	83 c4 10             	add    esp,0x10
c00205ce:	b8 01 00 00 00       	mov    eax,0x1
c00205d3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00205d8:	0f 84 57 02 00 00    	je     c0020835 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00205de:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00205e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00205ea:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00205f0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00205f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00205fa:	c1 e1 05             	shl    ecx,0x5
c00205fd:	01 c8                	add    eax,ecx
c00205ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020601:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020607:	81 c9 25 00 01 00    	or     ecx,0x10025
c002060d:	89 08                	mov    DWORD PTR [eax],ecx
c002060f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020615:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002061b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020621:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020624:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020627:	50                   	push   eax
c0020628:	68 90 00 00 00       	push   0x90
c002062d:	6a 00                	push   0x0
c002062f:	53                   	push   ebx
c0020630:	e8 bb fe fd ff       	call   c00004f0 <memset>
c0020635:	b9 0c 00 00 00       	mov    ecx,0xc
c002063a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002063e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020640:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020646:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002064a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020650:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020654:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020658:	48                   	dec    eax
c0020659:	25 ff ff 3f 00       	and    eax,0x3fffff
c002065e:	89 c1                	mov    ecx,eax
c0020660:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020666:	25 00 00 c0 ff       	and    eax,0xffc00000
c002066b:	09 c8                	or     eax,ecx
c002066d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020673:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020679:	83 c8 80             	or     eax,0xffffff80
c002067c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020682:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020685:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020689:	25 00 7f 00 00       	and    eax,0x7f00
c002068e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020692:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020697:	66 89 03             	mov    WORD PTR [ebx],ax
c002069a:	89 d0                	mov    eax,edx
c002069c:	c1 ea 18             	shr    edx,0x18
c002069f:	c1 e8 10             	shr    eax,0x10
c00206a2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00206a5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00206a8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00206ac:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00206af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00206b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ba:	83 c4 10             	add    esp,0x10
c00206bd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00206c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206c5:	31 c0                	xor    eax,eax
c00206c7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00206cd:	80 e1 88             	and    cl,0x88
c00206d0:	74 0a                	je     c00206dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c00206d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00206d7:	74 0a                	je     c00206e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c00206d9:	40                   	inc    eax
c00206da:	eb eb                	jmp    c00206c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00206dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00206e1:	75 43                	jne    c0020726 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00206e3:	83 ec 0c             	sub    esp,0xc
c00206e6:	68 94 5d 02 c0       	push   0xc0025d94
c00206eb:	e8 74 68 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00206f0:	58                   	pop    eax
c00206f1:	5a                   	pop    edx
c00206f2:	68 a9 5d 02 c0       	push   0xc0025da9
c00206f7:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00206fd:	e8 32 21 ff ff       	call   c0012834 <VgaText::puts(char const*)>
c0020702:	59                   	pop    ecx
c0020703:	5b                   	pop    ebx
c0020704:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020708:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002070e:	e8 ad e9 ff ff       	call   c001f0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020713:	5e                   	pop    esi
c0020714:	5f                   	pop    edi
c0020715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020719:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002071f:	e8 7c e9 ff ff       	call   c001f0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020724:	eb 48                	jmp    c002076e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020726:	be 01 00 00 00       	mov    esi,0x1
c002072b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002072f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020733:	d3 e6                	shl    esi,cl
c0020735:	c1 e7 07             	shl    edi,0x7
c0020738:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002073e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020743:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020747:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002074d:	85 c6                	test   esi,eax
c002074f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020755:	0f 84 a7 00 00 00    	je     c0020802 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c002075b:	0f ba e0 1e          	bt     eax,0x1e
c002075f:	73 1a                	jae    c002077b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020761:	83 ec 0c             	sub    esp,0xc
c0020764:	68 bb 5d 02 c0       	push   0xc0025dbb
c0020769:	e8 f6 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002076e:	83 c4 10             	add    esp,0x10
c0020771:	b8 01 00 00 00       	mov    eax,0x1
c0020776:	e9 ba 00 00 00       	jmp    c0020835 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002077b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0020781:	83 f8 0d             	cmp    eax,0xd
c0020784:	77 0b                	ja     c0020791 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020786:	50                   	push   eax
c0020787:	50                   	push   eax
c0020788:	6a 00                	push   0x0
c002078a:	68 c8 00 00 00       	push   0xc8
c002078f:	eb 2a                	jmp    c00207bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020791:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020797:	83 f8 0d             	cmp    eax,0xd
c002079a:	77 0b                	ja     c00207a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c002079c:	51                   	push   ecx
c002079d:	51                   	push   ecx
c002079e:	6a 00                	push   0x0
c00207a0:	68 58 02 00 00       	push   0x258
c00207a5:	eb 14                	jmp    c00207bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00207a7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c00207ad:	83 f8 06             	cmp    eax,0x6
c00207b0:	77 11                	ja     c00207c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00207b2:	52                   	push   edx
c00207b3:	52                   	push   edx
c00207b4:	6a 00                	push   0x0
c00207b6:	68 dc 05 00 00       	push   0x5dc
c00207bb:	e8 44 69 ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c00207c0:	83 c4 10             	add    esp,0x10
c00207c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00207c7:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00207ca:	75 06                	jne    c00207d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c00207cc:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00207d0:	74 16                	je     c00207e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00207d2:	83 fb 06             	cmp    ebx,0x6
c00207d5:	77 11                	ja     c00207e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00207d7:	50                   	push   eax
c00207d8:	50                   	push   eax
c00207d9:	6a 00                	push   0x0
c00207db:	68 c4 09 00 00       	push   0x9c4
c00207e0:	e8 1f 69 ff ff       	call   c0017104 <milliTenthSleep(unsigned long long)>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	43                   	inc    ebx
c00207e9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c00207ef:	0f 85 52 ff ff ff    	jne    c0020747 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c00207f5:	83 ec 0c             	sub    esp,0xc
c00207f8:	68 ce 5d 02 c0       	push   0xc0025dce
c00207fd:	e9 67 ff ff ff       	jmp    c0020769 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020802:	0f ba e0 1e          	bt     eax,0x1e
c0020806:	73 0d                	jae    c0020815 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020808:	83 ec 0c             	sub    esp,0xc
c002080b:	68 e2 5d 02 c0       	push   0xc0025de2
c0020810:	e9 54 ff ff ff       	jmp    c0020769 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020815:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002081a:	74 17                	je     c0020833 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002081c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020821:	74 10                	je     c0020833 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020823:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020829:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002082d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020831:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020833:	31 c0                	xor    eax,eax
c0020835:	83 c4 2c             	add    esp,0x2c
c0020838:	5b                   	pop    ebx
c0020839:	5e                   	pop    esi
c002083a:	5f                   	pop    edi
c002083b:	5d                   	pop    ebp
c002083c:	c3                   	ret    
c002083d:	90                   	nop

c002083e <SATAPI::eject()>:
c002083e:	57                   	push   edi
c002083f:	b9 03 00 00 00       	mov    ecx,0x3
c0020844:	83 ec 18             	sub    esp,0x18
c0020847:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002084b:	fc                   	cld    
c002084c:	31 c0                	xor    eax,eax
c002084e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020850:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020855:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002085a:	50                   	push   eax
c002085b:	6a 00                	push   0x0
c002085d:	6a 00                	push   0x0
c002085f:	6a 00                	push   0x0
c0020861:	6a 00                	push   0x0
c0020863:	6a 02                	push   0x2
c0020865:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020869:	50                   	push   eax
c002086a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002086e:	e8 e9 fc ff ff       	call   c002055c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020873:	31 c0                	xor    eax,eax
c0020875:	83 c4 38             	add    esp,0x38
c0020878:	5f                   	pop    edi
c0020879:	c3                   	ret    

c002087a <SATAPI::detectMedia()>:
c002087a:	53                   	push   ebx
c002087b:	83 ec 14             	sub    esp,0x14
c002087e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020882:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020888:	e8 27 ab fe ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c002088d:	59                   	pop    ecx
c002088e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020894:	e8 0b ab fe ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c0020899:	c7 04 24 f7 5d 02 c0 	mov    DWORD PTR [esp],0xc0025df7
c00208a0:	e8 bf 66 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00208a5:	83 c4 10             	add    esp,0x10
c00208a8:	31 c0                	xor    eax,eax
c00208aa:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c00208b1:	85 d2                	test   edx,edx
c00208b3:	74 0f                	je     c00208c4 <SATAPI::detectMedia()+0x4a>
c00208b5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00208bb:	75 07                	jne    c00208c4 <SATAPI::detectMedia()+0x4a>
c00208bd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00208c4:	40                   	inc    eax
c00208c5:	83 f8 1a             	cmp    eax,0x1a
c00208c8:	75 e0                	jne    c00208aa <SATAPI::detectMedia()+0x30>
c00208ca:	83 c4 08             	add    esp,0x8
c00208cd:	5b                   	pop    ebx
c00208ce:	c3                   	ret    
c00208cf:	90                   	nop

c00208d0 <SATAPI::open(int, int, void*)>:
c00208d0:	56                   	push   esi
c00208d1:	53                   	push   ebx
c00208d2:	51                   	push   ecx
c00208d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00208e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00208eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00208f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020903:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020909:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020910:	e8 bd f8 fe ff       	call   c00101d2 <Phys::allocatePage()>
c0020915:	89 c6                	mov    esi,eax
c0020917:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002091d:	81 c6 00 10 00 00    	add    esi,0x1000
c0020923:	e8 aa f8 fe ff       	call   c00101d2 <Phys::allocatePage()>
c0020928:	39 c6                	cmp    esi,eax
c002092a:	74 10                	je     c002093c <SATAPI::open(int, int, void*)+0x6c>
c002092c:	83 ec 0c             	sub    esp,0xc
c002092f:	68 0c 5e 02 c0       	push   0xc0025e0c
c0020934:	e8 a5 f6 fe ff       	call   c000ffde <KePanic(char const*)>
c0020939:	83 c4 10             	add    esp,0x10
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	6a 02                	push   0x2
c0020941:	e8 27 2b ff ff       	call   c001346d <Virt::allocateKernelVirtualPages(int)>
c0020946:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002094c:	6a 03                	push   0x3
c002094e:	50                   	push   eax
c002094f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020955:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002095b:	e8 f0 31 ff ff       	call   c0013b50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020960:	83 c4 14             	add    esp,0x14
c0020963:	68 78 01 00 00       	push   0x178
c0020968:	e8 2a f3 fe ff       	call   c000fc97 <malloc>
c002096d:	83 c4 0c             	add    esp,0xc
c0020970:	89 c6                	mov    esi,eax
c0020972:	6a 00                	push   0x0
c0020974:	68 ff ff ff 7f       	push   0x7fffffff
c0020979:	6a 00                	push   0x0
c002097b:	6a 00                	push   0x0
c002097d:	53                   	push   ebx
c002097e:	68 22 5e 02 c0       	push   0xc0025e22
c0020983:	50                   	push   eax
c0020984:	e8 8b 9e fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020989:	83 c4 14             	add    esp,0x14
c002098c:	56                   	push   esi
c002098d:	e8 42 9f fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c0020992:	5a                   	pop    edx
c0020993:	0f be c0             	movsx  eax,al
c0020996:	59                   	pop    ecx
c0020997:	50                   	push   eax
c0020998:	68 68 5c 02 c0       	push   0xc0025c68
c002099d:	e8 c2 65 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00209a2:	58                   	pop    eax
c00209a3:	5a                   	pop    edx
c00209a4:	56                   	push   esi
c00209a5:	53                   	push   ebx
c00209a6:	e8 51 90 fe ff       	call   c00099fc <Device::addChild(Device*)>
c00209ab:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00209b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209b4:	e8 8d 94 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c00209b9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00209c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209c3:	e8 b2 fe ff ff       	call   c002087a <SATAPI::detectMedia()>
c00209c8:	83 c4 14             	add    esp,0x14
c00209cb:	31 c0                	xor    eax,eax
c00209cd:	5b                   	pop    ebx
c00209ce:	5e                   	pop    esi
c00209cf:	c3                   	ret    

c00209d0 <SATAPI::read(unsigned long long, int, void*)>:
c00209d0:	57                   	push   edi
c00209d1:	56                   	push   esi
c00209d2:	53                   	push   ebx
c00209d3:	83 ec 30             	sub    esp,0x30
c00209d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00209da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00209de:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00209e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00209e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209ee:	83 fe 04             	cmp    esi,0x4
c00209f1:	7e 10                	jle    c0020a03 <SATAPI::read(unsigned long long, int, void*)+0x33>
c00209f3:	83 ec 0c             	sub    esp,0xc
c00209f6:	68 30 5e 02 c0       	push   0xc0025e30
c00209fb:	e8 de f5 fe ff       	call   c000ffde <KePanic(char const*)>
c0020a00:	83 c4 10             	add    esp,0x10
c0020a03:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020a09:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020a0f:	51                   	push   ecx
c0020a10:	50                   	push   eax
c0020a11:	83 c0 02             	add    eax,0x2
c0020a14:	c1 e0 07             	shl    eax,0x7
c0020a17:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020a1d:	50                   	push   eax
c0020a1e:	52                   	push   edx
c0020a1f:	e8 c6 e6 ff ff       	call   c001f0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020a24:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020a28:	b9 03 00 00 00       	mov    ecx,0x3
c0020a2d:	fc                   	cld    
c0020a2e:	31 c0                	xor    eax,eax
c0020a30:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a32:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020a37:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020a3c:	83 c4 0c             	add    esp,0xc
c0020a3f:	6a 00                	push   0x0
c0020a41:	6a 00                	push   0x0
c0020a43:	6a 00                	push   0x0
c0020a45:	6a 00                	push   0x0
c0020a47:	6a 02                	push   0x2
c0020a49:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020a4d:	50                   	push   eax
c0020a4e:	53                   	push   ebx
c0020a4f:	e8 08 fb ff ff       	call   c002055c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020a54:	83 c4 20             	add    esp,0x20
c0020a57:	85 c0                	test   eax,eax
c0020a59:	75 44                	jne    c0020a9f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0020a5b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020a5f:	b9 03 00 00 00       	mov    ecx,0x3
c0020a64:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a6a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020a6f:	0f c8                	bswap  eax
c0020a71:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020a75:	89 f0                	mov    eax,esi
c0020a77:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020a7b:	50                   	push   eax
c0020a7c:	56                   	push   esi
c0020a7d:	c1 e6 0b             	shl    esi,0xb
c0020a80:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020a84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a8c:	56                   	push   esi
c0020a8d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020a91:	50                   	push   eax
c0020a92:	53                   	push   ebx
c0020a93:	e8 c4 fa ff ff       	call   c002055c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020a98:	83 c4 20             	add    esp,0x20
c0020a9b:	85 c0                	test   eax,eax
c0020a9d:	74 14                	je     c0020ab3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0020a9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020aa3:	83 ec 0c             	sub    esp,0xc
c0020aa6:	53                   	push   ebx
c0020aa7:	e8 ce fd ff ff       	call   c002087a <SATAPI::detectMedia()>
c0020aac:	83 c4 10             	add    esp,0x10
c0020aaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ab3:	83 c4 30             	add    esp,0x30
c0020ab6:	5b                   	pop    ebx
c0020ab7:	5e                   	pop    esi
c0020ab8:	5f                   	pop    edi
c0020ab9:	c3                   	ret    

c0020aba <IOAPIC::close(int, int, void*)>:
c0020aba:	b8 00 00 00 00       	mov    eax,0x0
c0020abf:	c3                   	ret    

c0020ac0 <apicGetBase()>:
c0020ac0:	55                   	push   ebp
c0020ac1:	89 e5                	mov    ebp,esp
c0020ac3:	83 ec 08             	sub    esp,0x8
c0020ac6:	83 ec 0c             	sub    esp,0xc
c0020ac9:	68 94 5e 02 c0       	push   0xc0025e94
c0020ace:	e8 0b f5 fe ff       	call   c000ffde <KePanic(char const*)>
c0020ad3:	83 c4 10             	add    esp,0x10
c0020ad6:	b8 00 00 00 00       	mov    eax,0x0
c0020adb:	c9                   	leave  
c0020adc:	c3                   	ret    
c0020add:	90                   	nop

c0020ade <IOAPIC::IOAPIC()>:
c0020ade:	83 ec 0c             	sub    esp,0xc
c0020ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae5:	83 ec 08             	sub    esp,0x8
c0020ae8:	68 a3 5e 02 c0       	push   0xc0025ea3
c0020aed:	50                   	push   eax
c0020aee:	e8 6b 90 fe ff       	call   c0009b5e <Device::Device(char const*)>
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c0020afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aff:	89 10                	mov    DWORD PTR [eax],edx
c0020b01:	90                   	nop
c0020b02:	83 c4 0c             	add    esp,0xc
c0020b05:	c3                   	ret    

c0020b06 <apicOpen()>:
c0020b06:	55                   	push   ebp
c0020b07:	89 e5                	mov    ebp,esp
c0020b09:	53                   	push   ebx
c0020b0a:	83 ec 34             	sub    esp,0x34
c0020b0d:	83 ec 0c             	sub    esp,0xc
c0020b10:	68 ab 5e 02 c0       	push   0xc0025eab
c0020b15:	e8 4a 64 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020b1a:	83 c4 10             	add    esp,0x10
c0020b1d:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c0020b22:	83 f0 01             	xor    eax,0x1
c0020b25:	0f b6 c0             	movzx  eax,al
c0020b28:	85 c0                	test   eax,eax
c0020b2a:	0f 84 a3 00 00 00    	je     c0020bd3 <apicOpen()+0xcd>
c0020b30:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020b34:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0020b39:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020b3d:	0f b6 c0             	movzx  eax,al
c0020b40:	39 c2                	cmp    edx,eax
c0020b42:	0f 83 84 00 00 00    	jae    c0020bcc <apicOpen()+0xc6>
c0020b48:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020b4f:	83 ec 0c             	sub    esp,0xc
c0020b52:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020b55:	e8 3d f1 fe ff       	call   c000fc97 <malloc>
c0020b5a:	83 c4 10             	add    esp,0x10
c0020b5d:	89 c3                	mov    ebx,eax
c0020b5f:	83 ec 0c             	sub    esp,0xc
c0020b62:	53                   	push   ebx
c0020b63:	e8 76 ff ff ff       	call   c0020ade <IOAPIC::IOAPIC()>
c0020b68:	83 c4 10             	add    esp,0x10
c0020b6b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020b6e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020b72:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020b75:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c0020b7c:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0020b81:	83 c0 01             	add    eax,0x1
c0020b84:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c0020b89:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0020b8e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020b94:	83 ec 08             	sub    esp,0x8
c0020b97:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020b9a:	50                   	push   eax
c0020b9b:	e8 5c 8e fe ff       	call   c00099fc <Device::addChild(Device*)>
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ba8:	83 c0 08             	add    eax,0x8
c0020bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bad:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020bb1:	6a 00                	push   0x0
c0020bb3:	6a 00                	push   0x0
c0020bb5:	52                   	push   edx
c0020bb6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020bb9:	ff d0                	call   eax
c0020bbb:	83 c4 10             	add    esp,0x10
c0020bbe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020bc1:	83 c0 01             	add    eax,0x1
c0020bc4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020bc7:	e9 68 ff ff ff       	jmp    c0020b34 <apicOpen()+0x2e>
c0020bcc:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020bd3:	e8 e8 fe ff ff       	call   c0020ac0 <apicGetBase()>
c0020bd8:	05 f0 00 00 00       	add    eax,0xf0
c0020bdd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020be0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0020be5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020be8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020bef:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020bf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020bf9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020bfc:	89 10                	mov    DWORD PTR [eax],edx
c0020bfe:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020c05:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020c0a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020c0d:	7d 7c                	jge    c0020c8b <apicOpen()+0x185>
c0020c0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c12:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c19:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020c1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c1f:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c26:	c1 e8 08             	shr    eax,0x8
c0020c29:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020c2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c30:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c37:	c1 e8 18             	shr    eax,0x18
c0020c3a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020c3d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020c41:	3d ff 00 00 00       	cmp    eax,0xff
c0020c46:	75 3a                	jne    c0020c82 <apicOpen()+0x17c>
c0020c48:	e8 73 fe ff ff       	call   c0020ac0 <apicGetBase()>
c0020c4d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020c51:	83 fa 01             	cmp    edx,0x1
c0020c54:	75 07                	jne    c0020c5d <apicOpen()+0x157>
c0020c56:	ba 60 03 00 00       	mov    edx,0x360
c0020c5b:	eb 05                	jmp    c0020c62 <apicOpen()+0x15c>
c0020c5d:	ba 50 03 00 00       	mov    edx,0x350
c0020c62:	01 d0                	add    eax,edx
c0020c64:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020c67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c6c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020c6f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020c76:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020c7a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020c7d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020c80:	89 10                	mov    DWORD PTR [eax],edx
c0020c82:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020c86:	e9 7a ff ff ff       	jmp    c0020c05 <apicOpen()+0xff>
c0020c8b:	90                   	nop
c0020c8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020c8f:	c9                   	leave  
c0020c90:	c3                   	ret    
c0020c91:	90                   	nop

c0020c92 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020c92:	55                   	push   ebp
c0020c93:	89 e5                	mov    ebp,esp
c0020c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c9e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020ca1:	72 1d                	jb     c0020cc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ca6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020caf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020cb5:	01 d0                	add    eax,edx
c0020cb7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020cba:	73 04                	jae    c0020cc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020cbc:	b0 01                	mov    al,0x1
c0020cbe:	eb 02                	jmp    c0020cc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020cc0:	b0 00                	mov    al,0x0
c0020cc2:	5d                   	pop    ebp
c0020cc3:	c3                   	ret    

c0020cc4 <IOAPIC::read(int)>:
c0020cc4:	55                   	push   ebp
c0020cc5:	89 e5                	mov    ebp,esp
c0020cc7:	83 ec 10             	sub    esp,0x10
c0020cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ccd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020cd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020cd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020cd9:	0f b6 d0             	movzx  edx,al
c0020cdc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020cdf:	89 10                	mov    DWORD PTR [eax],edx
c0020ce1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020ce4:	83 c0 10             	add    eax,0x10
c0020ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ce9:	c9                   	leave  
c0020cea:	c3                   	ret    
c0020ceb:	90                   	nop

c0020cec <IOAPIC::open(int, int, void*)>:
c0020cec:	55                   	push   ebp
c0020ced:	89 e5                	mov    ebp,esp
c0020cef:	57                   	push   edi
c0020cf0:	56                   	push   esi
c0020cf1:	53                   	push   ebx
c0020cf2:	83 ec 04             	sub    esp,0x4
c0020cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020cf8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020cfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d0a:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c0020d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d23:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d2d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d36:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020d45:	0f b6 f0             	movzx  esi,al
c0020d48:	89 d0                	mov    eax,edx
c0020d4a:	ba 00 00 00 00       	mov    edx,0x0
c0020d4f:	89 c7                	mov    edi,eax
c0020d51:	83 e7 ff             	and    edi,0xffffffff
c0020d54:	89 f9                	mov    ecx,edi
c0020d56:	0f b6 da             	movzx  ebx,dl
c0020d59:	89 c8                	mov    eax,ecx
c0020d5b:	89 da                	mov    edx,ebx
c0020d5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020d60:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020d63:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020d67:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020d6b:	83 e0 00             	and    eax,0x0
c0020d6e:	09 d0                	or     eax,edx
c0020d70:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d77:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020d7d:	8d 50 01             	lea    edx,[eax+0x1]
c0020d80:	88 d1                	mov    cl,dl
c0020d82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020d85:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020d8b:	0f b6 d0             	movzx  edx,al
c0020d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d91:	83 c2 08             	add    edx,0x8
c0020d94:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020d98:	0f b6 c9             	movzx  ecx,cl
c0020d9b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020da1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020da5:	6a 01                	push   0x1
c0020da7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020daa:	e8 15 ff ff ff       	call   c0020cc4 <IOAPIC::read(int)>
c0020daf:	83 c4 08             	add    esp,0x8
c0020db2:	c1 f8 10             	sar    eax,0x10
c0020db5:	0f b6 c0             	movzx  eax,al
c0020db8:	8d 50 01             	lea    edx,[eax+0x1]
c0020dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020dbe:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020dc4:	b8 00 00 00 00       	mov    eax,0x0
c0020dc9:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020dcc:	5b                   	pop    ebx
c0020dcd:	5e                   	pop    esi
c0020dce:	5f                   	pop    edi
c0020dcf:	5d                   	pop    ebp
c0020dd0:	c3                   	ret    
c0020dd1:	90                   	nop

c0020dd2 <IOAPIC::write(int, int)>:
c0020dd2:	55                   	push   ebp
c0020dd3:	89 e5                	mov    ebp,esp
c0020dd5:	83 ec 10             	sub    esp,0x10
c0020dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ddb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020de1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020de4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020de7:	0f b6 d0             	movzx  edx,al
c0020dea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020ded:	89 10                	mov    DWORD PTR [eax],edx
c0020def:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020df2:	8d 50 10             	lea    edx,[eax+0x10]
c0020df5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020df8:	89 02                	mov    DWORD PTR [edx],eax
c0020dfa:	90                   	nop
c0020dfb:	c9                   	leave  
c0020dfc:	c3                   	ret    
c0020dfd:	90                   	nop

c0020dfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020dfe:	55                   	push   ebp
c0020dff:	89 e5                	mov    ebp,esp
c0020e01:	53                   	push   ebx
c0020e02:	83 ec 2c             	sub    esp,0x2c
c0020e05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e08:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020e0b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020e0e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020e11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020e14:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020e17:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020e1a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020e1d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020e20:	88 d8                	mov    al,bl
c0020e22:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020e25:	88 c8                	mov    al,cl
c0020e27:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020e2a:	88 d0                	mov    al,dl
c0020e2c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020e2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020e33:	83 c0 08             	add    eax,0x8
c0020e36:	01 c0                	add    eax,eax
c0020e38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020e3b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020e3f:	83 c0 08             	add    eax,0x8
c0020e42:	01 c0                	add    eax,eax
c0020e44:	83 c0 01             	add    eax,0x1
c0020e47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020e4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020e4d:	50                   	push   eax
c0020e4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e51:	e8 6e fe ff ff       	call   c0020cc4 <IOAPIC::read(int)>
c0020e56:	83 c4 08             	add    esp,0x8
c0020e59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020e5c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020e63:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020e66:	c1 e0 18             	shl    eax,0x18
c0020e69:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020e6c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020e6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020e72:	52                   	push   edx
c0020e73:	50                   	push   eax
c0020e74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e77:	e8 56 ff ff ff       	call   c0020dd2 <IOAPIC::write(int, int)>
c0020e7c:	83 c4 0c             	add    esp,0xc
c0020e7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020e82:	50                   	push   eax
c0020e83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e86:	e8 39 fe ff ff       	call   c0020cc4 <IOAPIC::read(int)>
c0020e8b:	83 c4 08             	add    esp,0x8
c0020e8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020e91:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020e98:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020e9f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020ea6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020eaa:	85 c0                	test   eax,eax
c0020eac:	74 09                	je     c0020eb7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020eae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020eb5:	eb 07                	jmp    c0020ebe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020eb7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020ebe:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020ec2:	85 c0                	test   eax,eax
c0020ec4:	74 09                	je     c0020ecf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020ec6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020ecd:	eb 07                	jmp    c0020ed6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020ecf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020ed6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020edd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020ee1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020ee4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020ee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020eea:	52                   	push   edx
c0020eeb:	50                   	push   eax
c0020eec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020eef:	e8 de fe ff ff       	call   c0020dd2 <IOAPIC::write(int, int)>
c0020ef4:	83 c4 0c             	add    esp,0xc
c0020ef7:	90                   	nop
c0020ef8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020efb:	c9                   	leave  
c0020efc:	c3                   	ret    
c0020efd:	66 90                	xchg   ax,ax
c0020eff:	90                   	nop

c0020f00 <APICTimer::close(int, int, void*)>:
c0020f00:	b8 00 00 00 00       	mov    eax,0x0
c0020f05:	c3                   	ret    
c0020f06:	66 90                	xchg   ax,ax

c0020f08 <apicTimerHandler(regs*, void*)>:
c0020f08:	83 ec 0c             	sub    esp,0xc
c0020f0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f11:	b8 10 27 00 00       	mov    eax,0x2710
c0020f16:	ba 00 00 00 00       	mov    edx,0x0
c0020f1b:	f7 f1                	div    ecx
c0020f1d:	83 ec 0c             	sub    esp,0xc
c0020f20:	50                   	push   eax
c0020f21:	e8 aa a1 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0020f26:	83 c4 10             	add    esp,0x10
c0020f29:	90                   	nop
c0020f2a:	83 c4 0c             	add    esp,0xc
c0020f2d:	c3                   	ret    
c0020f2e:	66 90                	xchg   ax,ax

c0020f30 <APICTimer::open(int, int, void*)>:
c0020f30:	83 ec 0c             	sub    esp,0xc
c0020f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f39:	83 c0 24             	add    eax,0x24
c0020f3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f3e:	83 ec 08             	sub    esp,0x8
c0020f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f49:	ff d0                	call   eax
c0020f4b:	83 c4 10             	add    esp,0x10
c0020f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020f56:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f64:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020f6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f6e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020f74:	83 ec 0c             	sub    esp,0xc
c0020f77:	51                   	push   ecx
c0020f78:	6a 01                	push   0x1
c0020f7a:	68 08 0f 02 c0       	push   0xc0020f08
c0020f7f:	52                   	push   edx
c0020f80:	50                   	push   eax
c0020f81:	e8 22 8a fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020f86:	83 c4 20             	add    esp,0x20
c0020f89:	89 c2                	mov    edx,eax
c0020f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f8f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020f95:	b8 00 00 00 00       	mov    eax,0x0
c0020f9a:	83 c4 0c             	add    esp,0xc
c0020f9d:	c3                   	ret    
c0020f9e:	66 90                	xchg   ax,ax

c0020fa0 <APICTimer::write(int)>:
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	83 ec 0c             	sub    esp,0xc
c0020fa6:	68 e8 5e 02 c0       	push   0xc0025ee8
c0020fab:	e8 2e f0 fe ff       	call   c000ffde <KePanic(char const*)>
c0020fb0:	83 c4 10             	add    esp,0x10
c0020fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020fc1:	90                   	nop
c0020fc2:	83 c4 0c             	add    esp,0xc
c0020fc5:	c3                   	ret    
c0020fc6:	66 90                	xchg   ax,ax

c0020fc8 <APICTimer::APICTimer()>:
c0020fc8:	83 ec 0c             	sub    esp,0xc
c0020fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fcf:	83 ec 08             	sub    esp,0x8
c0020fd2:	68 f8 5e 02 c0       	push   0xc0025ef8
c0020fd7:	50                   	push   eax
c0020fd8:	e8 27 a0 fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0020fdd:	83 c4 10             	add    esp,0x10
c0020fe0:	ba 0c 5f 02 c0       	mov    edx,0xc0025f0c
c0020fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe9:	89 10                	mov    DWORD PTR [eax],edx
c0020feb:	90                   	nop
c0020fec:	83 c4 0c             	add    esp,0xc
c0020fef:	c3                   	ret    

c0020ff0 <PIT::write(int)>:
c0020ff0:	83 ec 10             	sub    esp,0x10
c0020ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ff7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020ffb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021001:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021005:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c002100a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002100f:	89 c2                	mov    edx,eax
c0021011:	c1 fa 1f             	sar    edx,0x1f
c0021014:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002101c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021023:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021028:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002102c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021031:	ee                   	out    dx,al
c0021032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021036:	0f b6 c0             	movzx  eax,al
c0021039:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021040:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021044:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021048:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002104d:	ee                   	out    dx,al
c002104e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021052:	c1 f8 08             	sar    eax,0x8
c0021055:	0f b6 c0             	movzx  eax,al
c0021058:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002105f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021063:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021067:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002106c:	ee                   	out    dx,al
c002106d:	90                   	nop
c002106e:	83 c4 10             	add    esp,0x10
c0021071:	c3                   	ret    
c0021072:	66 90                	xchg   ax,ax

c0021074 <pitHandler(regs*, void*)>:
c0021074:	83 ec 0c             	sub    esp,0xc
c0021077:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c002107d:	b8 10 27 00 00       	mov    eax,0x2710
c0021082:	89 c2                	mov    edx,eax
c0021084:	c1 fa 1f             	sar    edx,0x1f
c0021087:	f7 f9                	idiv   ecx
c0021089:	83 ec 0c             	sub    esp,0xc
c002108c:	50                   	push   eax
c002108d:	e8 3e a0 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0021092:	83 c4 10             	add    esp,0x10
c0021095:	90                   	nop
c0021096:	83 c4 0c             	add    esp,0xc
c0021099:	c3                   	ret    
c002109a:	66 90                	xchg   ax,ax

c002109c <PIT::open(int, int, void*)>:
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00210a5:	83 c0 24             	add    eax,0x24
c00210a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210aa:	83 ec 08             	sub    esp,0x8
c00210ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210b5:	ff d0                	call   eax
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210be:	83 ec 0c             	sub    esp,0xc
c00210c1:	6a 00                	push   0x0
c00210c3:	6a 01                	push   0x1
c00210c5:	68 74 10 02 c0       	push   0xc0021074
c00210ca:	6a 00                	push   0x0
c00210cc:	50                   	push   eax
c00210cd:	e8 d6 88 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00210d2:	83 c4 20             	add    esp,0x20
c00210d5:	89 c2                	mov    edx,eax
c00210d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00210e1:	b8 00 00 00 00       	mov    eax,0x0
c00210e6:	83 c4 0c             	add    esp,0xc
c00210e9:	c3                   	ret    
c00210ea:	66 90                	xchg   ax,ax

c00210ec <PIT::close(int, int, void*)>:
c00210ec:	83 ec 0c             	sub    esp,0xc
c00210ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00210fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021101:	6a 01                	push   0x1
c0021103:	68 74 10 02 c0       	push   0xc0021074
c0021108:	6a 00                	push   0x0
c002110a:	50                   	push   eax
c002110b:	e8 ce 88 fe ff       	call   c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021110:	83 c4 10             	add    esp,0x10
c0021113:	b8 00 00 00 00       	mov    eax,0x0
c0021118:	83 c4 0c             	add    esp,0xc
c002111b:	c3                   	ret    

c002111c <PIT::PIT()>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021123:	83 ec 08             	sub    esp,0x8
c0021126:	68 34 5f 02 c0       	push   0xc0025f34
c002112b:	50                   	push   eax
c002112c:	e8 d3 9e fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	ba 5c 5f 02 c0       	mov    edx,0xc0025f5c
c0021139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113d:	89 10                	mov    DWORD PTR [eax],edx
c002113f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021149:	0f b6 d0             	movzx  edx,al
c002114c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021150:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021161:	0f b6 d0             	movzx  edx,al
c0021164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021168:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002116d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021171:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021177:	8d 50 01             	lea    edx,[eax+0x1]
c002117a:	88 d1                	mov    cl,dl
c002117c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021180:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021186:	0f b6 d0             	movzx  edx,al
c0021189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002118d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021191:	83 e1 3f             	and    ecx,0x3f
c0021194:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021198:	90                   	nop
c0021199:	83 c4 0c             	add    esp,0xc
c002119c:	c3                   	ret    
c002119d:	66 90                	xchg   ax,ax
c002119f:	90                   	nop

c00211a0 <avxDetect>:
c00211a0:	b8 01 00 00 00       	mov    eax,0x1
c00211a5:	0f a2                	cpuid  
c00211a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00211ad:	74 15                	je     c00211c4 <avxDetect.noAVX>
c00211af:	b8 01 00 00 00       	mov    eax,0x1
c00211b4:	0f a2                	cpuid  
c00211b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00211bc:	74 06                	je     c00211c4 <avxDetect.noAVX>
c00211be:	b8 01 00 00 00       	mov    eax,0x1
c00211c3:	c3                   	ret    

c00211c4 <avxDetect.noAVX>:
c00211c4:	b8 00 00 00 00       	mov    eax,0x0
c00211c9:	c3                   	ret    

c00211ca <avxSave>:
c00211ca:	53                   	push   ebx
c00211cb:	52                   	push   edx
c00211cc:	31 c0                	xor    eax,eax
c00211ce:	48                   	dec    eax
c00211cf:	89 c2                	mov    edx,eax
c00211d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00211d5:	0f ae 23             	xsave  [ebx]
c00211d8:	5a                   	pop    edx
c00211d9:	5b                   	pop    ebx
c00211da:	c3                   	ret    

c00211db <avxLoad>:
c00211db:	53                   	push   ebx
c00211dc:	52                   	push   edx
c00211dd:	31 c0                	xor    eax,eax
c00211df:	48                   	dec    eax
c00211e0:	89 c2                	mov    edx,eax
c00211e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00211e6:	0f ae 2b             	xrstor [ebx]
c00211e9:	5a                   	pop    edx
c00211ea:	5b                   	pop    ebx
c00211eb:	c3                   	ret    

c00211ec <avxInit>:
c00211ec:	e8 17 03 00 00       	call   c0021508 <sseInit>
c00211f1:	50                   	push   eax
c00211f2:	51                   	push   ecx
c00211f3:	0f 20 e0             	mov    eax,cr4
c00211f6:	0d 00 00 04 00       	or     eax,0x40000
c00211fb:	0f 22 e0             	mov    cr4,eax
c00211fe:	31 c9                	xor    ecx,ecx
c0021200:	0f 01 d0             	xgetbv 
c0021203:	0d 07 00 00 00       	or     eax,0x7
c0021208:	0f 01 d1             	xsetbv 
c002120b:	59                   	pop    ecx
c002120c:	58                   	pop    eax
c002120d:	c3                   	ret    

c002120e <avxClose>:
c002120e:	c3                   	ret    
c002120f:	90                   	nop

c0021210 <isr0>:
c0021210:	fa                   	cli    
c0021211:	68 00 00 00 00       	push   0x0
c0021216:	68 00 00 00 00       	push   0x0
c002121b:	e9 56 01 00 00       	jmp    c0021376 <int_common_stub>

c0021220 <isr1>:
c0021220:	fa                   	cli    
c0021221:	6a 00                	push   0x0
c0021223:	6a 01                	push   0x1
c0021225:	e9 4c 01 00 00       	jmp    c0021376 <int_common_stub>

c002122a <isr2>:
c002122a:	fa                   	cli    
c002122b:	6a 00                	push   0x0
c002122d:	6a 02                	push   0x2
c002122f:	e9 42 01 00 00       	jmp    c0021376 <int_common_stub>

c0021234 <isr3>:
c0021234:	fa                   	cli    
c0021235:	6a 00                	push   0x0
c0021237:	6a 03                	push   0x3
c0021239:	e9 38 01 00 00       	jmp    c0021376 <int_common_stub>

c002123e <isr4>:
c002123e:	fa                   	cli    
c002123f:	6a 00                	push   0x0
c0021241:	6a 04                	push   0x4
c0021243:	e9 2e 01 00 00       	jmp    c0021376 <int_common_stub>

c0021248 <isr5>:
c0021248:	fa                   	cli    
c0021249:	6a 00                	push   0x0
c002124b:	6a 05                	push   0x5
c002124d:	e9 24 01 00 00       	jmp    c0021376 <int_common_stub>

c0021252 <isr6>:
c0021252:	fa                   	cli    
c0021253:	6a 00                	push   0x0
c0021255:	6a 06                	push   0x6
c0021257:	e9 1a 01 00 00       	jmp    c0021376 <int_common_stub>

c002125c <isr7>:
c002125c:	fa                   	cli    
c002125d:	6a 00                	push   0x0
c002125f:	6a 07                	push   0x7
c0021261:	e9 10 01 00 00       	jmp    c0021376 <int_common_stub>

c0021266 <isr8>:
c0021266:	fa                   	cli    
c0021267:	6a 08                	push   0x8
c0021269:	e9 08 01 00 00       	jmp    c0021376 <int_common_stub>

c002126e <isr9>:
c002126e:	fa                   	cli    
c002126f:	6a 00                	push   0x0
c0021271:	6a 09                	push   0x9
c0021273:	e9 fe 00 00 00       	jmp    c0021376 <int_common_stub>

c0021278 <isr10>:
c0021278:	fa                   	cli    
c0021279:	6a 0a                	push   0xa
c002127b:	e9 f6 00 00 00       	jmp    c0021376 <int_common_stub>

c0021280 <isr11>:
c0021280:	fa                   	cli    
c0021281:	6a 0b                	push   0xb
c0021283:	e9 ee 00 00 00       	jmp    c0021376 <int_common_stub>

c0021288 <isr12>:
c0021288:	fa                   	cli    
c0021289:	6a 0c                	push   0xc
c002128b:	e9 e6 00 00 00       	jmp    c0021376 <int_common_stub>

c0021290 <isr13>:
c0021290:	fa                   	cli    
c0021291:	6a 0d                	push   0xd
c0021293:	53                   	push   ebx
c0021294:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021298:	81 fb 35 14 02 c0    	cmp    ebx,0xc0021435
c002129e:	5b                   	pop    ebx
c002129f:	0f 84 92 01 00 00    	je     c0021437 <finishSignal2>
c00212a5:	e9 cc 00 00 00       	jmp    c0021376 <int_common_stub>

c00212aa <isr14>:
c00212aa:	fa                   	cli    
c00212ab:	6a 0e                	push   0xe
c00212ad:	e9 c4 00 00 00       	jmp    c0021376 <int_common_stub>

c00212b2 <isr15>:
c00212b2:	fa                   	cli    
c00212b3:	6a 00                	push   0x0
c00212b5:	6a 0f                	push   0xf
c00212b7:	e9 ba 00 00 00       	jmp    c0021376 <int_common_stub>

c00212bc <isr16>:
c00212bc:	fa                   	cli    
c00212bd:	6a 00                	push   0x0
c00212bf:	6a 10                	push   0x10
c00212c1:	e9 b0 00 00 00       	jmp    c0021376 <int_common_stub>

c00212c6 <isr17>:
c00212c6:	fa                   	cli    
c00212c7:	6a 00                	push   0x0
c00212c9:	6a 11                	push   0x11
c00212cb:	e9 a6 00 00 00       	jmp    c0021376 <int_common_stub>

c00212d0 <isr18>:
c00212d0:	fa                   	cli    
c00212d1:	6a 00                	push   0x0
c00212d3:	6a 12                	push   0x12
c00212d5:	e9 9c 00 00 00       	jmp    c0021376 <int_common_stub>

c00212da <irq3>:
c00212da:	fa                   	cli    
c00212db:	6a 00                	push   0x0
c00212dd:	6a 23                	push   0x23
c00212df:	e9 92 00 00 00       	jmp    c0021376 <int_common_stub>

c00212e4 <irq4>:
c00212e4:	fa                   	cli    
c00212e5:	6a 00                	push   0x0
c00212e7:	6a 24                	push   0x24
c00212e9:	e9 88 00 00 00       	jmp    c0021376 <int_common_stub>

c00212ee <irq5>:
c00212ee:	fa                   	cli    
c00212ef:	6a 00                	push   0x0
c00212f1:	6a 25                	push   0x25
c00212f3:	e9 7e 00 00 00       	jmp    c0021376 <int_common_stub>

c00212f8 <irq6>:
c00212f8:	fa                   	cli    
c00212f9:	6a 00                	push   0x0
c00212fb:	6a 26                	push   0x26
c00212fd:	e9 74 00 00 00       	jmp    c0021376 <int_common_stub>

c0021302 <irq7>:
c0021302:	fa                   	cli    
c0021303:	6a 00                	push   0x0
c0021305:	6a 27                	push   0x27
c0021307:	e9 6a 00 00 00       	jmp    c0021376 <int_common_stub>

c002130c <irq8>:
c002130c:	fa                   	cli    
c002130d:	6a 00                	push   0x0
c002130f:	6a 28                	push   0x28
c0021311:	e9 60 00 00 00       	jmp    c0021376 <int_common_stub>

c0021316 <irq9>:
c0021316:	fa                   	cli    
c0021317:	6a 00                	push   0x0
c0021319:	6a 29                	push   0x29
c002131b:	e9 56 00 00 00       	jmp    c0021376 <int_common_stub>

c0021320 <irq10>:
c0021320:	fa                   	cli    
c0021321:	6a 00                	push   0x0
c0021323:	6a 2a                	push   0x2a
c0021325:	e9 4c 00 00 00       	jmp    c0021376 <int_common_stub>

c002132a <irq11>:
c002132a:	fa                   	cli    
c002132b:	6a 00                	push   0x0
c002132d:	6a 2b                	push   0x2b
c002132f:	e9 42 00 00 00       	jmp    c0021376 <int_common_stub>

c0021334 <irq12>:
c0021334:	fa                   	cli    
c0021335:	6a 00                	push   0x0
c0021337:	6a 2c                	push   0x2c
c0021339:	e9 38 00 00 00       	jmp    c0021376 <int_common_stub>

c002133e <irq13>:
c002133e:	fa                   	cli    
c002133f:	6a 00                	push   0x0
c0021341:	6a 2d                	push   0x2d
c0021343:	e9 2e 00 00 00       	jmp    c0021376 <int_common_stub>

c0021348 <irq14>:
c0021348:	fa                   	cli    
c0021349:	6a 00                	push   0x0
c002134b:	6a 2e                	push   0x2e
c002134d:	e9 24 00 00 00       	jmp    c0021376 <int_common_stub>

c0021352 <irq15>:
c0021352:	fa                   	cli    
c0021353:	6a 00                	push   0x0
c0021355:	6a 2f                	push   0x2f
c0021357:	e9 1a 00 00 00       	jmp    c0021376 <int_common_stub>

c002135c <irq1>:
c002135c:	fa                   	cli    
c002135d:	6a 00                	push   0x0
c002135f:	6a 21                	push   0x21
c0021361:	eb 13                	jmp    c0021376 <int_common_stub>

c0021363 <irq2>:
c0021363:	fa                   	cli    
c0021364:	6a 00                	push   0x0
c0021366:	6a 22                	push   0x22
c0021368:	eb 0c                	jmp    c0021376 <int_common_stub>

c002136a <isr96>:
c002136a:	6a 00                	push   0x0
c002136c:	6a 60                	push   0x60
c002136e:	fb                   	sti    
c002136f:	eb 05                	jmp    c0021376 <int_common_stub>

c0021371 <irq0>:
c0021371:	fa                   	cli    
c0021372:	6a 00                	push   0x0
c0021374:	6a 20                	push   0x20

c0021376 <int_common_stub>:
c0021376:	60                   	pusha  
c0021377:	1e                   	push   ds
c0021378:	06                   	push   es
c0021379:	0f a0                	push   fs
c002137b:	0f a8                	push   gs
c002137d:	66 b8 10 00          	mov    ax,0x10
c0021381:	66 8e d8             	mov    ds,ax
c0021384:	66 8e c0             	mov    es,ax
c0021387:	66 8e e0             	mov    fs,ax
c002138a:	66 8e e8             	mov    gs,ax
c002138d:	54                   	push   esp
c002138e:	fc                   	cld    
c002138f:	e8 7c d6 fe ff       	call   c000ea10 <int_handler>
c0021394:	81 c4 04 00 00 00    	add    esp,0x4
c002139a:	0f a9                	pop    gs
c002139c:	0f a1                	pop    fs
c002139e:	07                   	pop    es
c002139f:	1f                   	pop    ds
c00213a0:	e8 66 ff fe ff       	call   c001130b <KiCheckSignalZ>
c00213a5:	85 c0                	test   eax,eax
c00213a7:	75 08                	jne    c00213b1 <doSignals>
c00213a9:	61                   	popa   
c00213aa:	81 c4 08 00 00 00    	add    esp,0x8
c00213b0:	cf                   	iret   

c00213b1 <doSignals>:
c00213b1:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00213b6:	61                   	popa   
c00213b7:	53                   	push   ebx
c00213b8:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00213be:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00213c1:	5b                   	pop    ebx
c00213c2:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00213c7:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00213ca:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00213cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00213d0:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00213d3:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00213d6:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00213d9:	81 c4 08 00 00 00    	add    esp,0x8
c00213df:	5e                   	pop    esi
c00213e0:	5b                   	pop    ebx
c00213e1:	59                   	pop    ecx
c00213e2:	5a                   	pop    edx
c00213e3:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00213e6:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00213e9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00213ec:	52                   	push   edx
c00213ed:	51                   	push   ecx
c00213ee:	53                   	push   ebx
c00213ef:	56                   	push   esi
c00213f0:	81 ec 08 00 00 00    	sub    esp,0x8
c00213f6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00213f9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00213fc:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00213ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021402:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021405:	60                   	pusha  
c0021406:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002140c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002140f:	89 e3                	mov    ebx,esp
c0021411:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021414:	52                   	push   edx
c0021415:	68 35 14 02 c0       	push   0xc0021435
c002141a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002141d:	89 dc                	mov    esp,ebx
c002141f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021422:	68 23 00 00 00       	push   0x23
c0021427:	51                   	push   ecx
c0021428:	68 02 02 00 00       	push   0x202
c002142d:	68 1b 00 00 00       	push   0x1b
c0021432:	ff 36                	push   DWORD PTR [esi]
c0021434:	cf                   	iret   

c0021435 <finishSignal>:
c0021435:	cd 0f                	int    0xf

c0021437 <finishSignal2>:
c0021437:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002143d:	e8 55 ff fe ff       	call   c0011397 <KiFinishSignalZ>
c0021442:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021448:	68 23 00 00 00       	push   0x23
c002144d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021450:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021453:	68 1b 00 00 00       	push   0x1b
c0021458:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002145b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002145e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021461:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021467:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002146a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002146d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021470:	cf                   	iret   
c0021471:	90                   	nop
c0021472:	90                   	nop
c0021473:	90                   	nop

c0021474 <irq16>:
c0021474:	fa                   	cli    
c0021475:	6a 00                	push   0x0
c0021477:	6a 30                	push   0x30
c0021479:	e9 f8 fe ff ff       	jmp    c0021376 <int_common_stub>

c002147e <irq17>:
c002147e:	fa                   	cli    
c002147f:	6a 00                	push   0x0
c0021481:	6a 31                	push   0x31
c0021483:	e9 ee fe ff ff       	jmp    c0021376 <int_common_stub>

c0021488 <irq18>:
c0021488:	fa                   	cli    
c0021489:	6a 00                	push   0x0
c002148b:	6a 32                	push   0x32
c002148d:	e9 e4 fe ff ff       	jmp    c0021376 <int_common_stub>

c0021492 <irq19>:
c0021492:	fa                   	cli    
c0021493:	6a 00                	push   0x0
c0021495:	6a 33                	push   0x33
c0021497:	e9 da fe ff ff       	jmp    c0021376 <int_common_stub>

c002149c <irq20>:
c002149c:	fa                   	cli    
c002149d:	6a 00                	push   0x0
c002149f:	6a 34                	push   0x34
c00214a1:	e9 d0 fe ff ff       	jmp    c0021376 <int_common_stub>

c00214a6 <irq21>:
c00214a6:	fa                   	cli    
c00214a7:	6a 00                	push   0x0
c00214a9:	6a 35                	push   0x35
c00214ab:	e9 c6 fe ff ff       	jmp    c0021376 <int_common_stub>

c00214b0 <irq22>:
c00214b0:	fa                   	cli    
c00214b1:	6a 00                	push   0x0
c00214b3:	6a 36                	push   0x36
c00214b5:	e9 bc fe ff ff       	jmp    c0021376 <int_common_stub>

c00214ba <irq23>:
c00214ba:	fa                   	cli    
c00214bb:	6a 00                	push   0x0
c00214bd:	6a 37                	push   0x37
c00214bf:	e9 b2 fe ff ff       	jmp    c0021376 <int_common_stub>
c00214c4:	66 90                	xchg   ax,ax
c00214c6:	66 90                	xchg   ax,ax
c00214c8:	66 90                	xchg   ax,ax
c00214ca:	66 90                	xchg   ax,ax
c00214cc:	66 90                	xchg   ax,ax
c00214ce:	66 90                	xchg   ax,ax

c00214d0 <i386GetRDRAND>:
c00214d0:	b9 64 00 00 00       	mov    ecx,0x64

c00214d5 <retry>:
c00214d5:	0f c7 f0             	rdrand eax
c00214d8:	72 05                	jb     c00214df <retry.done>
c00214da:	e2 f9                	loop   c00214d5 <retry>

c00214dc <retry.fail>:
c00214dc:	31 c0                	xor    eax,eax
c00214de:	c3                   	ret    

c00214df <retry.done>:
c00214df:	c3                   	ret    

c00214e0 <sseDetect>:
c00214e0:	b8 01 00 00 00       	mov    eax,0x1
c00214e5:	0f a2                	cpuid  
c00214e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00214ed:	74 06                	je     c00214f5 <sseDetect.noSSE>
c00214ef:	b8 01 00 00 00       	mov    eax,0x1
c00214f4:	c3                   	ret    

c00214f5 <sseDetect.noSSE>:
c00214f5:	31 c0                	xor    eax,eax
c00214f7:	c3                   	ret    

c00214f8 <sseSave>:
c00214f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214fc:	0f ae 00             	fxsave [eax]
c00214ff:	c3                   	ret    

c0021500 <sseLoad>:
c0021500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021504:	0f ae 08             	fxrstor [eax]
c0021507:	c3                   	ret    

c0021508 <sseInit>:
c0021508:	e8 48 00 00 00       	call   c0021555 <x87Init>
c002150d:	0f 20 e0             	mov    eax,cr4
c0021510:	66 0d 00 06          	or     ax,0x600
c0021514:	0f 22 e0             	mov    cr4,eax
c0021517:	c3                   	ret    

c0021518 <sseClose>:
c0021518:	c3                   	ret    
c0021519:	66 90                	xchg   ax,ax
c002151b:	66 90                	xchg   ax,ax
c002151d:	66 90                	xchg   ax,ax
c002151f:	90                   	nop

c0021520 <value_37F>:
c0021520:	7f 03                	jg     c0021525 <value_37A+0x1>

c0021522 <value_37E>:
c0021522:	7e 03                	jle    c0021527 <x87Detect+0x1>

c0021524 <value_37A>:
c0021524:	7a 03                	jp     c0021529 <x87Detect+0x3>

c0021526 <x87Detect>:
c0021526:	53                   	push   ebx
c0021527:	51                   	push   ecx
c0021528:	52                   	push   edx
c0021529:	b8 01 00 00 00       	mov    eax,0x1
c002152e:	0f a2                	cpuid  
c0021530:	f7 c2 01 00 00 00    	test   edx,0x1
c0021536:	74 06                	je     c002153e <x87Detect.nox87>
c0021538:	b8 01 00 00 00       	mov    eax,0x1
c002153d:	c3                   	ret    

c002153e <x87Detect.nox87>:
c002153e:	b8 00 00 00 00       	mov    eax,0x0
c0021543:	5a                   	pop    edx
c0021544:	59                   	pop    ecx
c0021545:	5b                   	pop    ebx
c0021546:	c3                   	ret    

c0021547 <x87Save>:
c0021547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154b:	dd 30                	fnsave [eax]
c002154d:	c3                   	ret    

c002154e <x87Load>:
c002154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021552:	dd 20                	frstor [eax]
c0021554:	c3                   	ret    

c0021555 <x87Init>:
c0021555:	0f 20 c0             	mov    eax,cr0
c0021558:	66 25 fb ff          	and    ax,0xfffb
c002155c:	66 0d 22 00          	or     ax,0x22
c0021560:	0f 22 c0             	mov    cr0,eax
c0021563:	db e3                	fninit 
c0021565:	0f 06                	clts   
c0021567:	d9 2d 24 15 02 c0    	fldcw  WORD PTR ds:0xc0021524
c002156d:	c3                   	ret    

c002156e <x87Close>:
c002156e:	c3                   	ret    
c002156f:	90                   	nop

c0021570 <__do_global_ctors_aux>:
c0021570:	a1 24 25 02 c0       	mov    eax,ds:0xc0022524
c0021575:	83 f8 ff             	cmp    eax,0xffffffff
c0021578:	74 1a                	je     c0021594 <__do_global_ctors_aux+0x24>
c002157a:	55                   	push   ebp
c002157b:	89 e5                	mov    ebp,esp
c002157d:	53                   	push   ebx
c002157e:	52                   	push   edx
c002157f:	bb 24 25 02 c0       	mov    ebx,0xc0022524
c0021584:	ff d0                	call   eax
c0021586:	83 eb 04             	sub    ebx,0x4
c0021589:	8b 03                	mov    eax,DWORD PTR [ebx]
c002158b:	83 f8 ff             	cmp    eax,0xffffffff
c002158e:	75 f4                	jne    c0021584 <__do_global_ctors_aux+0x14>
c0021590:	58                   	pop    eax
c0021591:	5b                   	pop    ebx
c0021592:	5d                   	pop    ebp
c0021593:	c3                   	ret    
c0021594:	c3                   	ret    
c0021595:	66 90                	xchg   ax,ax
c0021597:	90                   	nop

c0021598 <__divdi3>:
c0021598:	55                   	push   ebp
c0021599:	57                   	push   edi
c002159a:	56                   	push   esi
c002159b:	53                   	push   ebx
c002159c:	83 ec 1c             	sub    esp,0x1c
c002159f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00215a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00215a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00215aa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00215ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00215b6:	85 db                	test   ebx,ebx
c00215b8:	0f 88 8e 00 00 00    	js     c002164c <__divdi3+0xb4>
c00215be:	89 dd                	mov    ebp,ebx
c00215c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00215c8:	89 d3                	mov    ebx,edx
c00215ca:	85 d2                	test   edx,edx
c00215cc:	79 0d                	jns    c00215db <__divdi3+0x43>
c00215ce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00215d2:	f7 d8                	neg    eax
c00215d4:	83 d2 00             	adc    edx,0x0
c00215d7:	f7 da                	neg    edx
c00215d9:	89 d3                	mov    ebx,edx
c00215db:	89 c7                	mov    edi,eax
c00215dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00215e0:	85 db                	test   ebx,ebx
c00215e2:	75 48                	jne    c002162c <__divdi3+0x94>
c00215e4:	39 ef                	cmp    edi,ebp
c00215e6:	76 24                	jbe    c002160c <__divdi3+0x74>
c00215e8:	89 ea                	mov    edx,ebp
c00215ea:	f7 f7                	div    edi
c00215ec:	89 c1                	mov    ecx,eax
c00215ee:	31 f6                	xor    esi,esi
c00215f0:	89 c8                	mov    eax,ecx
c00215f2:	89 f2                	mov    edx,esi
c00215f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215f8:	85 c9                	test   ecx,ecx
c00215fa:	74 07                	je     c0021603 <__divdi3+0x6b>
c00215fc:	f7 d8                	neg    eax
c00215fe:	83 d2 00             	adc    edx,0x0
c0021601:	f7 da                	neg    edx
c0021603:	83 c4 1c             	add    esp,0x1c
c0021606:	5b                   	pop    ebx
c0021607:	5e                   	pop    esi
c0021608:	5f                   	pop    edi
c0021609:	5d                   	pop    ebp
c002160a:	c3                   	ret    
c002160b:	90                   	nop
c002160c:	85 ff                	test   edi,edi
c002160e:	75 0b                	jne    c002161b <__divdi3+0x83>
c0021610:	b8 01 00 00 00       	mov    eax,0x1
c0021615:	31 d2                	xor    edx,edx
c0021617:	f7 f3                	div    ebx
c0021619:	89 c7                	mov    edi,eax
c002161b:	31 d2                	xor    edx,edx
c002161d:	89 e8                	mov    eax,ebp
c002161f:	f7 f7                	div    edi
c0021621:	89 c6                	mov    esi,eax
c0021623:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021626:	f7 f7                	div    edi
c0021628:	89 c1                	mov    ecx,eax
c002162a:	eb c4                	jmp    c00215f0 <__divdi3+0x58>
c002162c:	39 eb                	cmp    ebx,ebp
c002162e:	77 3c                	ja     c002166c <__divdi3+0xd4>
c0021630:	0f bd f3             	bsr    esi,ebx
c0021633:	83 f6 1f             	xor    esi,0x1f
c0021636:	75 40                	jne    c0021678 <__divdi3+0xe0>
c0021638:	39 eb                	cmp    ebx,ebp
c002163a:	72 09                	jb     c0021645 <__divdi3+0xad>
c002163c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002163f:	0f 87 97 00 00 00    	ja     c00216dc <__divdi3+0x144>
c0021645:	b9 01 00 00 00       	mov    ecx,0x1
c002164a:	eb a4                	jmp    c00215f0 <__divdi3+0x58>
c002164c:	f7 d9                	neg    ecx
c002164e:	83 d3 00             	adc    ebx,0x0
c0021651:	f7 db                	neg    ebx
c0021653:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021656:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002165a:	89 dd                	mov    ebp,ebx
c002165c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021664:	e9 5f ff ff ff       	jmp    c00215c8 <__divdi3+0x30>
c0021669:	8d 76 00             	lea    esi,[esi+0x0]
c002166c:	31 f6                	xor    esi,esi
c002166e:	31 c9                	xor    ecx,ecx
c0021670:	e9 7b ff ff ff       	jmp    c00215f0 <__divdi3+0x58>
c0021675:	8d 76 00             	lea    esi,[esi+0x0]
c0021678:	b8 20 00 00 00       	mov    eax,0x20
c002167d:	29 f0                	sub    eax,esi
c002167f:	89 f1                	mov    ecx,esi
c0021681:	d3 e3                	shl    ebx,cl
c0021683:	89 fa                	mov    edx,edi
c0021685:	88 c1                	mov    cl,al
c0021687:	d3 ea                	shr    edx,cl
c0021689:	09 da                	or     edx,ebx
c002168b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002168f:	89 f1                	mov    ecx,esi
c0021691:	d3 e7                	shl    edi,cl
c0021693:	89 eb                	mov    ebx,ebp
c0021695:	88 c1                	mov    cl,al
c0021697:	d3 eb                	shr    ebx,cl
c0021699:	89 f1                	mov    ecx,esi
c002169b:	d3 e5                	shl    ebp,cl
c002169d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00216a0:	88 c1                	mov    cl,al
c00216a2:	d3 ea                	shr    edx,cl
c00216a4:	09 d5                	or     ebp,edx
c00216a6:	89 e8                	mov    eax,ebp
c00216a8:	89 da                	mov    edx,ebx
c00216aa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00216ae:	89 d3                	mov    ebx,edx
c00216b0:	89 c5                	mov    ebp,eax
c00216b2:	f7 e7                	mul    edi
c00216b4:	39 d3                	cmp    ebx,edx
c00216b6:	72 18                	jb     c00216d0 <__divdi3+0x138>
c00216b8:	74 0a                	je     c00216c4 <__divdi3+0x12c>
c00216ba:	89 e9                	mov    ecx,ebp
c00216bc:	31 f6                	xor    esi,esi
c00216be:	e9 2d ff ff ff       	jmp    c00215f0 <__divdi3+0x58>
c00216c3:	90                   	nop
c00216c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00216c7:	89 f1                	mov    ecx,esi
c00216c9:	d3 e7                	shl    edi,cl
c00216cb:	39 c7                	cmp    edi,eax
c00216cd:	73 eb                	jae    c00216ba <__divdi3+0x122>
c00216cf:	90                   	nop
c00216d0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00216d3:	31 f6                	xor    esi,esi
c00216d5:	e9 16 ff ff ff       	jmp    c00215f0 <__divdi3+0x58>
c00216da:	66 90                	xchg   ax,ax
c00216dc:	31 c9                	xor    ecx,ecx
c00216de:	e9 0d ff ff ff       	jmp    c00215f0 <__divdi3+0x58>
c00216e3:	90                   	nop

c00216e4 <__moddi3>:
c00216e4:	55                   	push   ebp
c00216e5:	57                   	push   edi
c00216e6:	56                   	push   esi
c00216e7:	53                   	push   ebx
c00216e8:	83 ec 2c             	sub    esp,0x2c
c00216eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00216ef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00216f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00216f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00216fb:	85 db                	test   ebx,ebx
c00216fd:	0f 88 85 00 00 00    	js     c0021788 <__moddi3+0xa4>
c0021703:	89 de                	mov    esi,ebx
c0021705:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002170d:	89 d7                	mov    edi,edx
c002170f:	85 d2                	test   edx,edx
c0021711:	79 09                	jns    c002171c <__moddi3+0x38>
c0021713:	f7 d8                	neg    eax
c0021715:	83 d2 00             	adc    edx,0x0
c0021718:	f7 da                	neg    edx
c002171a:	89 d7                	mov    edi,edx
c002171c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021720:	89 cd                	mov    ebp,ecx
c0021722:	85 ff                	test   edi,edi
c0021724:	75 52                	jne    c0021778 <__moddi3+0x94>
c0021726:	89 c3                	mov    ebx,eax
c0021728:	39 f0                	cmp    eax,esi
c002172a:	76 24                	jbe    c0021750 <__moddi3+0x6c>
c002172c:	89 c8                	mov    eax,ecx
c002172e:	89 f2                	mov    edx,esi
c0021730:	f7 f3                	div    ebx
c0021732:	89 d6                	mov    esi,edx
c0021734:	89 f0                	mov    eax,esi
c0021736:	31 d2                	xor    edx,edx
c0021738:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002173c:	85 c9                	test   ecx,ecx
c002173e:	74 07                	je     c0021747 <__moddi3+0x63>
c0021740:	f7 d8                	neg    eax
c0021742:	83 d2 00             	adc    edx,0x0
c0021745:	f7 da                	neg    edx
c0021747:	83 c4 2c             	add    esp,0x2c
c002174a:	5b                   	pop    ebx
c002174b:	5e                   	pop    esi
c002174c:	5f                   	pop    edi
c002174d:	5d                   	pop    ebp
c002174e:	c3                   	ret    
c002174f:	90                   	nop
c0021750:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021754:	85 db                	test   ebx,ebx
c0021756:	75 0d                	jne    c0021765 <__moddi3+0x81>
c0021758:	b8 01 00 00 00       	mov    eax,0x1
c002175d:	31 d2                	xor    edx,edx
c002175f:	f7 f7                	div    edi
c0021761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021765:	89 f0                	mov    eax,esi
c0021767:	31 d2                	xor    edx,edx
c0021769:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002176d:	f7 f7                	div    edi
c002176f:	89 e8                	mov    eax,ebp
c0021771:	f7 f7                	div    edi
c0021773:	89 d6                	mov    esi,edx
c0021775:	eb bd                	jmp    c0021734 <__moddi3+0x50>
c0021777:	90                   	nop
c0021778:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002177c:	39 f7                	cmp    edi,esi
c002177e:	76 20                	jbe    c00217a0 <__moddi3+0xbc>
c0021780:	89 c8                	mov    eax,ecx
c0021782:	89 f2                	mov    edx,esi
c0021784:	eb b2                	jmp    c0021738 <__moddi3+0x54>
c0021786:	66 90                	xchg   ax,ax
c0021788:	f7 d9                	neg    ecx
c002178a:	83 d3 00             	adc    ebx,0x0
c002178d:	f7 db                	neg    ebx
c002178f:	89 de                	mov    esi,ebx
c0021791:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021799:	e9 6f ff ff ff       	jmp    c002170d <__moddi3+0x29>
c002179e:	66 90                	xchg   ax,ax
c00217a0:	0f bd c7             	bsr    eax,edi
c00217a3:	83 f0 1f             	xor    eax,0x1f
c00217a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217aa:	75 24                	jne    c00217d0 <__moddi3+0xec>
c00217ac:	39 f7                	cmp    edi,esi
c00217ae:	72 06                	jb     c00217b6 <__moddi3+0xd2>
c00217b0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00217b4:	77 0c                	ja     c00217c2 <__moddi3+0xde>
c00217b6:	89 e9                	mov    ecx,ebp
c00217b8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00217bc:	19 fe                	sbb    esi,edi
c00217be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00217c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217c6:	89 f2                	mov    edx,esi
c00217c8:	e9 6b ff ff ff       	jmp    c0021738 <__moddi3+0x54>
c00217cd:	8d 76 00             	lea    esi,[esi+0x0]
c00217d0:	b8 20 00 00 00       	mov    eax,0x20
c00217d5:	89 c2                	mov    edx,eax
c00217d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00217db:	29 da                	sub    edx,ebx
c00217dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00217e1:	88 d9                	mov    cl,bl
c00217e3:	d3 e7                	shl    edi,cl
c00217e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217e9:	88 d1                	mov    cl,dl
c00217eb:	d3 e8                	shr    eax,cl
c00217ed:	09 c7                	or     edi,eax
c00217ef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00217f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00217f7:	89 d8                	mov    eax,ebx
c00217f9:	88 d9                	mov    cl,bl
c00217fb:	d3 e7                	shl    edi,cl
c00217fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021801:	89 f3                	mov    ebx,esi
c0021803:	88 d1                	mov    cl,dl
c0021805:	d3 eb                	shr    ebx,cl
c0021807:	89 c7                	mov    edi,eax
c0021809:	88 c1                	mov    cl,al
c002180b:	d3 e6                	shl    esi,cl
c002180d:	89 e8                	mov    eax,ebp
c002180f:	88 d1                	mov    cl,dl
c0021811:	d3 e8                	shr    eax,cl
c0021813:	09 f0                	or     eax,esi
c0021815:	89 f9                	mov    ecx,edi
c0021817:	d3 e5                	shl    ebp,cl
c0021819:	89 da                	mov    edx,ebx
c002181b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002181f:	89 d3                	mov    ebx,edx
c0021821:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021825:	89 c6                	mov    esi,eax
c0021827:	89 d1                	mov    ecx,edx
c0021829:	39 d3                	cmp    ebx,edx
c002182b:	72 27                	jb     c0021854 <__moddi3+0x170>
c002182d:	74 21                	je     c0021850 <__moddi3+0x16c>
c002182f:	29 f5                	sub    ebp,esi
c0021831:	19 cb                	sbb    ebx,ecx
c0021833:	89 de                	mov    esi,ebx
c0021835:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021839:	d3 e6                	shl    esi,cl
c002183b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002183f:	89 f9                	mov    ecx,edi
c0021841:	d3 ed                	shr    ebp,cl
c0021843:	09 ee                	or     esi,ebp
c0021845:	89 f0                	mov    eax,esi
c0021847:	d3 eb                	shr    ebx,cl
c0021849:	89 da                	mov    edx,ebx
c002184b:	e9 e8 fe ff ff       	jmp    c0021738 <__moddi3+0x54>
c0021850:	39 c5                	cmp    ebp,eax
c0021852:	73 db                	jae    c002182f <__moddi3+0x14b>
c0021854:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021858:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002185c:	89 d1                	mov    ecx,edx
c002185e:	89 c6                	mov    esi,eax
c0021860:	eb cd                	jmp    c002182f <__moddi3+0x14b>
c0021862:	66 90                	xchg   ax,ax

c0021864 <__udivdi3>:
c0021864:	55                   	push   ebp
c0021865:	57                   	push   edi
c0021866:	56                   	push   esi
c0021867:	53                   	push   ebx
c0021868:	83 ec 1c             	sub    esp,0x1c
c002186b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002186f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021873:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021877:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002187b:	85 d2                	test   edx,edx
c002187d:	75 41                	jne    c00218c0 <__udivdi3+0x5c>
c002187f:	39 f7                	cmp    edi,esi
c0021881:	76 15                	jbe    c0021898 <__udivdi3+0x34>
c0021883:	89 e8                	mov    eax,ebp
c0021885:	89 f2                	mov    edx,esi
c0021887:	f7 f7                	div    edi
c0021889:	31 db                	xor    ebx,ebx
c002188b:	89 da                	mov    edx,ebx
c002188d:	83 c4 1c             	add    esp,0x1c
c0021890:	5b                   	pop    ebx
c0021891:	5e                   	pop    esi
c0021892:	5f                   	pop    edi
c0021893:	5d                   	pop    ebp
c0021894:	c3                   	ret    
c0021895:	8d 76 00             	lea    esi,[esi+0x0]
c0021898:	89 f9                	mov    ecx,edi
c002189a:	85 ff                	test   edi,edi
c002189c:	75 0b                	jne    c00218a9 <__udivdi3+0x45>
c002189e:	b8 01 00 00 00       	mov    eax,0x1
c00218a3:	31 d2                	xor    edx,edx
c00218a5:	f7 f7                	div    edi
c00218a7:	89 c1                	mov    ecx,eax
c00218a9:	31 d2                	xor    edx,edx
c00218ab:	89 f0                	mov    eax,esi
c00218ad:	f7 f1                	div    ecx
c00218af:	89 c3                	mov    ebx,eax
c00218b1:	89 e8                	mov    eax,ebp
c00218b3:	f7 f1                	div    ecx
c00218b5:	89 da                	mov    edx,ebx
c00218b7:	83 c4 1c             	add    esp,0x1c
c00218ba:	5b                   	pop    ebx
c00218bb:	5e                   	pop    esi
c00218bc:	5f                   	pop    edi
c00218bd:	5d                   	pop    ebp
c00218be:	c3                   	ret    
c00218bf:	90                   	nop
c00218c0:	39 f2                	cmp    edx,esi
c00218c2:	77 1c                	ja     c00218e0 <__udivdi3+0x7c>
c00218c4:	0f bd da             	bsr    ebx,edx
c00218c7:	83 f3 1f             	xor    ebx,0x1f
c00218ca:	75 24                	jne    c00218f0 <__udivdi3+0x8c>
c00218cc:	39 f2                	cmp    edx,esi
c00218ce:	72 08                	jb     c00218d8 <__udivdi3+0x74>
c00218d0:	39 ef                	cmp    edi,ebp
c00218d2:	0f 87 84 00 00 00    	ja     c002195c <__udivdi3+0xf8>
c00218d8:	b8 01 00 00 00       	mov    eax,0x1
c00218dd:	eb ac                	jmp    c002188b <__udivdi3+0x27>
c00218df:	90                   	nop
c00218e0:	31 db                	xor    ebx,ebx
c00218e2:	31 c0                	xor    eax,eax
c00218e4:	89 da                	mov    edx,ebx
c00218e6:	83 c4 1c             	add    esp,0x1c
c00218e9:	5b                   	pop    ebx
c00218ea:	5e                   	pop    esi
c00218eb:	5f                   	pop    edi
c00218ec:	5d                   	pop    ebp
c00218ed:	c3                   	ret    
c00218ee:	66 90                	xchg   ax,ax
c00218f0:	b8 20 00 00 00       	mov    eax,0x20
c00218f5:	29 d8                	sub    eax,ebx
c00218f7:	88 d9                	mov    cl,bl
c00218f9:	d3 e2                	shl    edx,cl
c00218fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00218ff:	89 fa                	mov    edx,edi
c0021901:	88 c1                	mov    cl,al
c0021903:	d3 ea                	shr    edx,cl
c0021905:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021909:	09 d1                	or     ecx,edx
c002190b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002190f:	88 d9                	mov    cl,bl
c0021911:	d3 e7                	shl    edi,cl
c0021913:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021917:	89 f7                	mov    edi,esi
c0021919:	88 c1                	mov    cl,al
c002191b:	d3 ef                	shr    edi,cl
c002191d:	88 d9                	mov    cl,bl
c002191f:	d3 e6                	shl    esi,cl
c0021921:	89 ea                	mov    edx,ebp
c0021923:	88 c1                	mov    cl,al
c0021925:	d3 ea                	shr    edx,cl
c0021927:	09 d6                	or     esi,edx
c0021929:	89 f0                	mov    eax,esi
c002192b:	89 fa                	mov    edx,edi
c002192d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021931:	89 d7                	mov    edi,edx
c0021933:	89 c6                	mov    esi,eax
c0021935:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021939:	39 d7                	cmp    edi,edx
c002193b:	72 13                	jb     c0021950 <__udivdi3+0xec>
c002193d:	74 09                	je     c0021948 <__udivdi3+0xe4>
c002193f:	89 f0                	mov    eax,esi
c0021941:	31 db                	xor    ebx,ebx
c0021943:	e9 43 ff ff ff       	jmp    c002188b <__udivdi3+0x27>
c0021948:	88 d9                	mov    cl,bl
c002194a:	d3 e5                	shl    ebp,cl
c002194c:	39 c5                	cmp    ebp,eax
c002194e:	73 ef                	jae    c002193f <__udivdi3+0xdb>
c0021950:	8d 46 ff             	lea    eax,[esi-0x1]
c0021953:	31 db                	xor    ebx,ebx
c0021955:	e9 31 ff ff ff       	jmp    c002188b <__udivdi3+0x27>
c002195a:	66 90                	xchg   ax,ax
c002195c:	31 c0                	xor    eax,eax
c002195e:	e9 28 ff ff ff       	jmp    c002188b <__udivdi3+0x27>
c0021963:	90                   	nop

c0021964 <__umoddi3>:
c0021964:	55                   	push   ebp
c0021965:	57                   	push   edi
c0021966:	56                   	push   esi
c0021967:	53                   	push   ebx
c0021968:	83 ec 1c             	sub    esp,0x1c
c002196b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002196f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021973:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021977:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002197b:	89 da                	mov    edx,ebx
c002197d:	85 c0                	test   eax,eax
c002197f:	75 37                	jne    c00219b8 <__umoddi3+0x54>
c0021981:	39 df                	cmp    edi,ebx
c0021983:	76 13                	jbe    c0021998 <__umoddi3+0x34>
c0021985:	89 f0                	mov    eax,esi
c0021987:	f7 f7                	div    edi
c0021989:	89 d0                	mov    eax,edx
c002198b:	31 d2                	xor    edx,edx
c002198d:	83 c4 1c             	add    esp,0x1c
c0021990:	5b                   	pop    ebx
c0021991:	5e                   	pop    esi
c0021992:	5f                   	pop    edi
c0021993:	5d                   	pop    ebp
c0021994:	c3                   	ret    
c0021995:	8d 76 00             	lea    esi,[esi+0x0]
c0021998:	89 fd                	mov    ebp,edi
c002199a:	85 ff                	test   edi,edi
c002199c:	75 0b                	jne    c00219a9 <__umoddi3+0x45>
c002199e:	b8 01 00 00 00       	mov    eax,0x1
c00219a3:	31 d2                	xor    edx,edx
c00219a5:	f7 f7                	div    edi
c00219a7:	89 c5                	mov    ebp,eax
c00219a9:	89 d8                	mov    eax,ebx
c00219ab:	31 d2                	xor    edx,edx
c00219ad:	f7 f5                	div    ebp
c00219af:	89 f0                	mov    eax,esi
c00219b1:	f7 f5                	div    ebp
c00219b3:	89 d0                	mov    eax,edx
c00219b5:	eb d4                	jmp    c002198b <__umoddi3+0x27>
c00219b7:	90                   	nop
c00219b8:	89 f1                	mov    ecx,esi
c00219ba:	39 d8                	cmp    eax,ebx
c00219bc:	76 0a                	jbe    c00219c8 <__umoddi3+0x64>
c00219be:	89 f0                	mov    eax,esi
c00219c0:	83 c4 1c             	add    esp,0x1c
c00219c3:	5b                   	pop    ebx
c00219c4:	5e                   	pop    esi
c00219c5:	5f                   	pop    edi
c00219c6:	5d                   	pop    ebp
c00219c7:	c3                   	ret    
c00219c8:	0f bd e8             	bsr    ebp,eax
c00219cb:	83 f5 1f             	xor    ebp,0x1f
c00219ce:	75 1c                	jne    c00219ec <__umoddi3+0x88>
c00219d0:	39 d8                	cmp    eax,ebx
c00219d2:	72 04                	jb     c00219d8 <__umoddi3+0x74>
c00219d4:	39 f7                	cmp    edi,esi
c00219d6:	77 08                	ja     c00219e0 <__umoddi3+0x7c>
c00219d8:	89 da                	mov    edx,ebx
c00219da:	29 fe                	sub    esi,edi
c00219dc:	19 c2                	sbb    edx,eax
c00219de:	89 f1                	mov    ecx,esi
c00219e0:	89 c8                	mov    eax,ecx
c00219e2:	83 c4 1c             	add    esp,0x1c
c00219e5:	5b                   	pop    ebx
c00219e6:	5e                   	pop    esi
c00219e7:	5f                   	pop    edi
c00219e8:	5d                   	pop    ebp
c00219e9:	c3                   	ret    
c00219ea:	66 90                	xchg   ax,ax
c00219ec:	ba 20 00 00 00       	mov    edx,0x20
c00219f1:	29 ea                	sub    edx,ebp
c00219f3:	89 e9                	mov    ecx,ebp
c00219f5:	d3 e0                	shl    eax,cl
c00219f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219fb:	89 f8                	mov    eax,edi
c00219fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a01:	88 d1                	mov    cl,dl
c0021a03:	d3 e8                	shr    eax,cl
c0021a05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a09:	09 c1                	or     ecx,eax
c0021a0b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a0f:	89 e9                	mov    ecx,ebp
c0021a11:	d3 e7                	shl    edi,cl
c0021a13:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a17:	89 d8                	mov    eax,ebx
c0021a19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a1d:	88 d1                	mov    cl,dl
c0021a1f:	d3 e8                	shr    eax,cl
c0021a21:	89 c7                	mov    edi,eax
c0021a23:	89 e9                	mov    ecx,ebp
c0021a25:	d3 e3                	shl    ebx,cl
c0021a27:	89 f0                	mov    eax,esi
c0021a29:	88 d1                	mov    cl,dl
c0021a2b:	d3 e8                	shr    eax,cl
c0021a2d:	09 d8                	or     eax,ebx
c0021a2f:	89 e9                	mov    ecx,ebp
c0021a31:	d3 e6                	shl    esi,cl
c0021a33:	89 f3                	mov    ebx,esi
c0021a35:	89 fa                	mov    edx,edi
c0021a37:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021a3b:	89 d1                	mov    ecx,edx
c0021a3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021a41:	89 c6                	mov    esi,eax
c0021a43:	89 d7                	mov    edi,edx
c0021a45:	39 d1                	cmp    ecx,edx
c0021a47:	72 27                	jb     c0021a70 <__umoddi3+0x10c>
c0021a49:	74 21                	je     c0021a6c <__umoddi3+0x108>
c0021a4b:	89 ca                	mov    edx,ecx
c0021a4d:	29 f3                	sub    ebx,esi
c0021a4f:	19 fa                	sbb    edx,edi
c0021a51:	89 d0                	mov    eax,edx
c0021a53:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021a57:	d3 e0                	shl    eax,cl
c0021a59:	89 e9                	mov    ecx,ebp
c0021a5b:	d3 eb                	shr    ebx,cl
c0021a5d:	09 d8                	or     eax,ebx
c0021a5f:	d3 ea                	shr    edx,cl
c0021a61:	83 c4 1c             	add    esp,0x1c
c0021a64:	5b                   	pop    ebx
c0021a65:	5e                   	pop    esi
c0021a66:	5f                   	pop    edi
c0021a67:	5d                   	pop    ebp
c0021a68:	c3                   	ret    
c0021a69:	8d 76 00             	lea    esi,[esi+0x0]
c0021a6c:	39 c3                	cmp    ebx,eax
c0021a6e:	73 db                	jae    c0021a4b <__umoddi3+0xe7>
c0021a70:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021a74:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021a78:	89 d7                	mov    edi,edx
c0021a7a:	89 c6                	mov    esi,eax
c0021a7c:	eb cd                	jmp    c0021a4b <__umoddi3+0xe7>

Disassembly of section .init:

c0021a7e <_init>:
c0021a7e:	55                   	push   ebp
c0021a7f:	89 e5                	mov    ebp,esp
c0021a81:	e8 6e e6 fd ff       	call   c00000f4 <frame_dummy>
c0021a86:	e8 e5 fa ff ff       	call   c0021570 <__do_global_ctors_aux>
c0021a8b:	5d                   	pop    ebp
c0021a8c:	c3                   	ret    

Disassembly of section .fini:

c0021a8d <_fini>:
c0021a8d:	55                   	push   ebp
c0021a8e:	89 e5                	mov    ebp,esp
c0021a90:	e8 ef e5 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021a95:	5d                   	pop    ebp
c0021a96:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021a98 <DriverlessDevice::~DriverlessDevice()>:
c0021a98:	ba dc 34 02 c0       	mov    edx,0xc00234dc
c0021a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa1:	89 10                	mov    DWORD PTR [eax],edx
c0021aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa7:	50                   	push   eax
c0021aa8:	e8 51 7e fe ff       	call   c00098fe <Device::~Device()>
c0021aad:	83 c4 04             	add    esp,0x4
c0021ab0:	90                   	nop
c0021ab1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021ab2 <DriverlessDevice::~DriverlessDevice()>:
c0021ab2:	83 ec 0c             	sub    esp,0xc
c0021ab5:	83 ec 0c             	sub    esp,0xc
c0021ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021abc:	e8 d7 ff ff ff       	call   c0021a98 <DriverlessDevice::~DriverlessDevice()>
c0021ac1:	83 c4 10             	add    esp,0x10
c0021ac4:	83 ec 08             	sub    esp,0x8
c0021ac7:	68 58 01 00 00       	push   0x158
c0021acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ad0:	e8 4a b8 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	83 c4 0c             	add    esp,0xc
c0021adb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021adc <LinkedList<Device>::addElement(Device*)>:
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021ae4:	75 10                	jne    c0021af6 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021ae6:	83 ec 0c             	sub    esp,0xc
c0021ae9:	68 70 34 02 c0       	push   0xc0023470
c0021aee:	e8 eb e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021af3:	83 c4 10             	add    esp,0x10
c0021af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0021afc:	85 c0                	test   eax,eax
c0021afe:	74 3a                	je     c0021b3a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b07:	85 c0                	test   eax,eax
c0021b09:	74 2f                	je     c0021b3a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b16:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b2e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021b38:	eb 68                	jmp    c0021ba2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b40:	85 c0                	test   eax,eax
c0021b42:	75 4e                	jne    c0021b92 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b4b:	85 c0                	test   eax,eax
c0021b4d:	75 43                	jne    c0021b92 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b57:	89 10                	mov    DWORD PTR [eax],edx
c0021b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b6b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b7c:	85 c0                	test   eax,eax
c0021b7e:	74 22                	je     c0021ba2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b80:	83 ec 0c             	sub    esp,0xc
c0021b83:	68 92 34 02 c0       	push   0xc0023492
c0021b88:	e8 51 e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021b8d:	83 c4 10             	add    esp,0x10
c0021b90:	eb 10                	jmp    c0021ba2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b92:	83 ec 0c             	sub    esp,0xc
c0021b95:	68 9c 34 02 c0       	push   0xc002349c
c0021b9a:	e8 3f e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ba9:	8d 50 01             	lea    edx,[eax+0x1]
c0021bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bb3:	90                   	nop
c0021bb4:	83 c4 0c             	add    esp,0xc
c0021bb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021bb8 <LinkedList<Device>::LinkedList()>:
c0021bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021be6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021bf8:	90                   	nop
c0021bf9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021bfc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c02:	85 c0                	test   eax,eax
c0021c04:	75 0e                	jne    c0021c14 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c0d:	85 c0                	test   eax,eax
c0021c0f:	75 03                	jne    c0021c14 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c11:	b0 01                	mov    al,0x1
c0021c13:	c3                   	ret    
c0021c14:	b0 00                	mov    al,0x0
c0021c16:	90                   	nop
c0021c17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021c18 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021c20 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021c20:	83 ec 0c             	sub    esp,0xc
c0021c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c29:	85 c0                	test   eax,eax
c0021c2b:	75 17                	jne    c0021c44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021c2d:	83 ec 0c             	sub    esp,0xc
c0021c30:	68 0c 37 02 c0       	push   0xc002370c
c0021c35:	e8 a4 e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021c3a:	83 c4 10             	add    esp,0x10
c0021c3d:	e9 96 00 00 00       	jmp    c0021cd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021c42:	66 90                	xchg   ax,ax
c0021c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c4e:	85 c0                	test   eax,eax
c0021c50:	0f 95 c0             	setne  al
c0021c53:	0f b6 c0             	movzx  eax,al
c0021c56:	85 c0                	test   eax,eax
c0021c58:	74 12                	je     c0021c6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	68 57 37 02 c0       	push   0xc0023757
c0021c62:	e8 77 e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021c67:	83 c4 10             	add    esp,0x10
c0021c6a:	66 90                	xchg   ax,ax
c0021c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c75:	85 c0                	test   eax,eax
c0021c77:	0f 94 c0             	sete   al
c0021c7a:	0f b6 c0             	movzx  eax,al
c0021c7d:	85 c0                	test   eax,eax
c0021c7f:	74 33                	je     c0021cb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c9d:	83 f8 01             	cmp    eax,0x1
c0021ca0:	74 22                	je     c0021cc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021ca2:	83 ec 0c             	sub    esp,0xc
c0021ca5:	68 30 37 02 c0       	push   0xc0023730
c0021caa:	e8 2f e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	eb 10                	jmp    c0021cc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc1:	89 10                	mov    DWORD PTR [eax],edx
c0021cc3:	90                   	nop
c0021cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ccb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cd8:	83 c4 0c             	add    esp,0xc
c0021cdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021cdc:	83 ec 0c             	sub    esp,0xc
c0021cdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021ce4:	75 12                	jne    c0021cf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021ce6:	83 ec 0c             	sub    esp,0xc
c0021ce9:	68 70 34 02 c0       	push   0xc0023470
c0021cee:	e8 eb e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021cf3:	83 c4 10             	add    esp,0x10
c0021cf6:	66 90                	xchg   ax,ax
c0021cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cfe:	85 c0                	test   eax,eax
c0021d00:	74 36                	je     c0021d38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d09:	85 c0                	test   eax,eax
c0021d0b:	74 2b                	je     c0021d38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d18:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d34:	eb 6a                	jmp    c0021da0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d36:	66 90                	xchg   ax,ax
c0021d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d3e:	85 c0                	test   eax,eax
c0021d40:	75 4e                	jne    c0021d90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d49:	85 c0                	test   eax,eax
c0021d4b:	75 43                	jne    c0021d90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d55:	89 10                	mov    DWORD PTR [eax],edx
c0021d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d77:	85 c0                	test   eax,eax
c0021d79:	74 25                	je     c0021da0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d7b:	83 ec 0c             	sub    esp,0xc
c0021d7e:	68 92 34 02 c0       	push   0xc0023492
c0021d83:	e8 56 e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021d88:	83 c4 10             	add    esp,0x10
c0021d8b:	eb 13                	jmp    c0021da0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0021d90:	83 ec 0c             	sub    esp,0xc
c0021d93:	68 9c 34 02 c0       	push   0xc002349c
c0021d98:	e8 41 e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021d9d:	83 c4 10             	add    esp,0x10
c0021da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021da7:	8d 50 01             	lea    edx,[eax+0x1]
c0021daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021db1:	90                   	nop
c0021db2:	83 c4 0c             	add    esp,0xc
c0021db5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021db8 <ACPI::~ACPI()>:
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	ba 2c 3b 02 c0       	mov    edx,0xc0023b2c
c0021dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc4:	89 10                	mov    DWORD PTR [eax],edx
c0021dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dca:	83 ec 0c             	sub    esp,0xc
c0021dcd:	50                   	push   eax
c0021dce:	e8 2b 7b fe ff       	call   c00098fe <Device::~Device()>
c0021dd3:	83 c4 10             	add    esp,0x10
c0021dd6:	90                   	nop
c0021dd7:	83 c4 0c             	add    esp,0xc
c0021dda:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021ddc <ACPI::~ACPI()>:
c0021ddc:	83 ec 0c             	sub    esp,0xc
c0021ddf:	83 ec 0c             	sub    esp,0xc
c0021de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021de6:	e8 cd ff ff ff       	call   c0021db8 <ACPI::~ACPI()>
c0021deb:	83 c4 10             	add    esp,0x10
c0021dee:	83 ec 08             	sub    esp,0x8
c0021df1:	68 64 12 00 00       	push   0x1264
c0021df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dfa:	e8 20 b5 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021dff:	83 c4 10             	add    esp,0x10
c0021e02:	83 c4 0c             	add    esp,0xc
c0021e05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021e08 <LinkedList<Device>::~LinkedList()>:
c0021e08:	90                   	nop
c0021e09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021e0c <LinkedList<Device>::isEmpty()>:
c0021e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e12:	85 c0                	test   eax,eax
c0021e14:	75 0e                	jne    c0021e24 <LinkedList<Device>::isEmpty()+0x18>
c0021e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e1d:	85 c0                	test   eax,eax
c0021e1f:	75 03                	jne    c0021e24 <LinkedList<Device>::isEmpty()+0x18>
c0021e21:	b0 01                	mov    al,0x1
c0021e23:	c3                   	ret    
c0021e24:	b0 00                	mov    al,0x0
c0021e26:	90                   	nop
c0021e27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021e28 <LinkedList<Device>::getFirstElement()>:
c0021e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021e30 <LinkedList<Device>::removeFirst()>:
c0021e30:	83 ec 0c             	sub    esp,0xc
c0021e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e37:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e39:	85 c0                	test   eax,eax
c0021e3b:	75 17                	jne    c0021e54 <LinkedList<Device>::removeFirst()+0x24>
c0021e3d:	83 ec 0c             	sub    esp,0xc
c0021e40:	68 0c 37 02 c0       	push   0xc002370c
c0021e45:	e8 94 e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021e4a:	83 c4 10             	add    esp,0x10
c0021e4d:	e9 92 00 00 00       	jmp    c0021ee4 <LinkedList<Device>::removeFirst()+0xb4>
c0021e52:	66 90                	xchg   ax,ax
c0021e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e5b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021e61:	85 c0                	test   eax,eax
c0021e63:	74 13                	je     c0021e78 <LinkedList<Device>::removeFirst()+0x48>
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	68 57 37 02 c0       	push   0xc0023757
c0021e6d:	e8 6c e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021e72:	83 c4 10             	add    esp,0x10
c0021e75:	8d 76 00             	lea    esi,[esi+0x0]
c0021e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e7e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021e84:	85 c0                	test   eax,eax
c0021e86:	75 34                	jne    c0021ebc <LinkedList<Device>::removeFirst()+0x8c>
c0021e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ea4:	83 f8 01             	cmp    eax,0x1
c0021ea7:	74 27                	je     c0021ed0 <LinkedList<Device>::removeFirst()+0xa0>
c0021ea9:	83 ec 0c             	sub    esp,0xc
c0021eac:	68 30 37 02 c0       	push   0xc0023730
c0021eb1:	e8 28 e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021eb6:	83 c4 10             	add    esp,0x10
c0021eb9:	eb 15                	jmp    c0021ed0 <LinkedList<Device>::removeFirst()+0xa0>
c0021ebb:	90                   	nop
c0021ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ec2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ecc:	89 10                	mov    DWORD PTR [eax],edx
c0021ece:	66 90                	xchg   ax,ax
c0021ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ed7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ede:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0021ee4:	83 c4 0c             	add    esp,0xc
c0021ee7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021ee8 <Computer::~Computer()>:
c0021ee8:	83 ec 0c             	sub    esp,0xc
c0021eeb:	ba dc 3d 02 c0       	mov    edx,0xc0023ddc
c0021ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef4:	89 10                	mov    DWORD PTR [eax],edx
c0021ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efa:	83 ec 0c             	sub    esp,0xc
c0021efd:	50                   	push   eax
c0021efe:	e8 fb 79 fe ff       	call   c00098fe <Device::~Device()>
c0021f03:	83 c4 10             	add    esp,0x10
c0021f06:	90                   	nop
c0021f07:	83 c4 0c             	add    esp,0xc
c0021f0a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021f0c <Computer::~Computer()>:
c0021f0c:	83 ec 0c             	sub    esp,0xc
c0021f0f:	83 ec 0c             	sub    esp,0xc
c0021f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f16:	e8 cd ff ff ff       	call   c0021ee8 <Computer::~Computer()>
c0021f1b:	83 c4 10             	add    esp,0x10
c0021f1e:	83 ec 08             	sub    esp,0x8
c0021f21:	68 6c 01 00 00       	push   0x16c
c0021f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f2a:	e8 f0 b3 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021f2f:	83 c4 10             	add    esp,0x10
c0021f32:	83 c4 0c             	add    esp,0xc
c0021f35:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021f36 <idleCommon()>:
c0021f36:	83 ec 0c             	sub    esp,0xc
c0021f39:	fa                   	cli    
c0021f3a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021f40:	e8 cb 4f ff ff       	call   c0016f10 <schedule()>
c0021f45:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021f4c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021f53:	75 01                	jne    c0021f56 <idleCommon()+0x20>
c0021f55:	fb                   	sti    
c0021f56:	83 c4 0c             	add    esp,0xc
c0021f59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021f5a <LinkedList<UnixFile>::~LinkedList()>:
c0021f5a:	90                   	nop
c0021f5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021f5c <LinkedList<UnixFile>::LinkedList()>:
c0021f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f9c:	90                   	nop
c0021f9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021f9e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021f9e:	83 ec 0c             	sub    esp,0xc
c0021fa1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021fa6:	75 10                	jne    c0021fb8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021fa8:	83 ec 0c             	sub    esp,0xc
c0021fab:	68 70 34 02 c0       	push   0xc0023470
c0021fb0:	e8 29 e0 fe ff       	call   c000ffde <KePanic(char const*)>
c0021fb5:	83 c4 10             	add    esp,0x10
c0021fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbe:	85 c0                	test   eax,eax
c0021fc0:	74 34                	je     c0021ff6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fc9:	85 c0                	test   eax,eax
c0021fcb:	74 29                	je     c0021ff6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fe3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ff4:	eb 65                	jmp    c002205b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffa:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ffc:	85 c0                	test   eax,eax
c0021ffe:	75 4b                	jne    c002204b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022007:	85 c0                	test   eax,eax
c0022009:	75 40                	jne    c002204b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022013:	89 10                	mov    DWORD PTR [eax],edx
c0022015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022019:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002201d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022027:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002202e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022035:	85 c0                	test   eax,eax
c0022037:	74 22                	je     c002205b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022039:	83 ec 0c             	sub    esp,0xc
c002203c:	68 92 34 02 c0       	push   0xc0023492
c0022041:	e8 98 df fe ff       	call   c000ffde <KePanic(char const*)>
c0022046:	83 c4 10             	add    esp,0x10
c0022049:	eb 10                	jmp    c002205b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002204b:	83 ec 0c             	sub    esp,0xc
c002204e:	68 9c 34 02 c0       	push   0xc002349c
c0022053:	e8 86 df fe ff       	call   c000ffde <KePanic(char const*)>
c0022058:	83 c4 10             	add    esp,0x10
c002205b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022062:	8d 50 01             	lea    edx,[eax+0x1]
c0022065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022069:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002206c:	90                   	nop
c002206d:	83 c4 0c             	add    esp,0xc
c0022070:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022072 <LinkedList<UnixFile>::getFirstElement()>:
c0022072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022076:	8b 00                	mov    eax,DWORD PTR [eax]
c0022078:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002207a <LinkedList<UnixFile>::removeFirst()>:
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022081:	8b 00                	mov    eax,DWORD PTR [eax]
c0022083:	85 c0                	test   eax,eax
c0022085:	75 12                	jne    c0022099 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022087:	83 ec 0c             	sub    esp,0xc
c002208a:	68 0c 37 02 c0       	push   0xc002370c
c002208f:	e8 4a df fe ff       	call   c000ffde <KePanic(char const*)>
c0022094:	83 c4 10             	add    esp,0x10
c0022097:	eb 7e                	jmp    c0022117 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220a3:	85 c0                	test   eax,eax
c00220a5:	74 10                	je     c00220b7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00220a7:	83 ec 0c             	sub    esp,0xc
c00220aa:	68 57 37 02 c0       	push   0xc0023757
c00220af:	e8 2a df fe ff       	call   c000ffde <KePanic(char const*)>
c00220b4:	83 c4 10             	add    esp,0x10
c00220b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00220bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220c0:	85 c0                	test   eax,eax
c00220c2:	75 33                	jne    c00220f7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00220c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220e0:	83 f8 01             	cmp    eax,0x1
c00220e3:	74 21                	je     c0022106 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00220e5:	83 ec 0c             	sub    esp,0xc
c00220e8:	68 30 37 02 c0       	push   0xc0023730
c00220ed:	e8 ec de fe ff       	call   c000ffde <KePanic(char const*)>
c00220f2:	83 c4 10             	add    esp,0x10
c00220f5:	eb 0f                	jmp    c0022106 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00220f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00220fd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022104:	89 10                	mov    DWORD PTR [eax],edx
c0022106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002210d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022117:	83 c4 0c             	add    esp,0xc
c002211a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002211c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002211c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022120:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022123:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022124 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022128:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002212b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002212c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002212c:	90                   	nop
c002212d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022130 <ThreadControlBlock::ThreadControlBlock()>:
c0022130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022134:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002213b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002213f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002214a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022155:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002215c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022160:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002216f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022173:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022177:	90                   	nop
c0022178:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002217c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002217c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022180:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002218a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022195:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002219c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221bc:	90                   	nop
c00221bd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00221be <CPU::~CPU()>:
c00221be:	83 ec 0c             	sub    esp,0xc
c00221c1:	ba 4c 54 02 c0       	mov    edx,0xc002544c
c00221c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ca:	89 10                	mov    DWORD PTR [eax],edx
c00221cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	50                   	push   eax
c00221d4:	e8 25 77 fe ff       	call   c00098fe <Device::~Device()>
c00221d9:	83 c4 10             	add    esp,0x10
c00221dc:	90                   	nop
c00221dd:	83 c4 0c             	add    esp,0xc
c00221e0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00221e2 <CPU::~CPU()>:
c00221e2:	83 ec 0c             	sub    esp,0xc
c00221e5:	83 ec 0c             	sub    esp,0xc
c00221e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221ec:	e8 cd ff ff ff       	call   c00221be <CPU::~CPU()>
c00221f1:	83 c4 10             	add    esp,0x10
c00221f4:	83 ec 08             	sub    esp,0x8
c00221f7:	68 78 11 00 00       	push   0x1178
c00221fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022200:	e8 1a b1 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022205:	83 c4 10             	add    esp,0x10
c0022208:	83 c4 0c             	add    esp,0xc
c002220b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002220c <PCI::~PCI()>:
c002220c:	83 ec 0c             	sub    esp,0xc
c002220f:	ba b0 59 02 c0       	mov    edx,0xc00259b0
c0022214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022218:	89 10                	mov    DWORD PTR [eax],edx
c002221a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221e:	83 ec 0c             	sub    esp,0xc
c0022221:	50                   	push   eax
c0022222:	e8 1d 67 fe ff       	call   c0008944 <Bus::~Bus()>
c0022227:	83 c4 10             	add    esp,0x10
c002222a:	90                   	nop
c002222b:	83 c4 0c             	add    esp,0xc
c002222e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022230 <PCI::~PCI()>:
c0022230:	83 ec 0c             	sub    esp,0xc
c0022233:	83 ec 0c             	sub    esp,0xc
c0022236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002223a:	e8 cd ff ff ff       	call   c002220c <PCI::~PCI()>
c002223f:	83 c4 10             	add    esp,0x10
c0022242:	83 ec 08             	sub    esp,0x8
c0022245:	68 5c 01 00 00       	push   0x15c
c002224a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002224e:	e8 cc b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022253:	83 c4 10             	add    esp,0x10
c0022256:	83 c4 0c             	add    esp,0xc
c0022259:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002225a <IDE::~IDE()>:
c002225a:	83 ec 0c             	sub    esp,0xc
c002225d:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c0022262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022266:	89 10                	mov    DWORD PTR [eax],edx
c0022268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226c:	83 ec 0c             	sub    esp,0xc
c002226f:	50                   	push   eax
c0022270:	e8 17 7b fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	90                   	nop
c0022279:	83 c4 0c             	add    esp,0xc
c002227c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002227e <IDE::~IDE()>:
c002227e:	83 ec 0c             	sub    esp,0xc
c0022281:	83 ec 0c             	sub    esp,0xc
c0022284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022288:	e8 cd ff ff ff       	call   c002225a <IDE::~IDE()>
c002228d:	83 c4 10             	add    esp,0x10
c0022290:	83 ec 08             	sub    esp,0x8
c0022293:	68 70 02 00 00       	push   0x270
c0022298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002229c:	e8 7e b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00222a1:	83 c4 10             	add    esp,0x10
c00222a4:	83 c4 0c             	add    esp,0xc
c00222a7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00222a8 <SATABus::~SATABus()>:
c00222a8:	83 ec 0c             	sub    esp,0xc
c00222ab:	ba 50 5b 02 c0       	mov    edx,0xc0025b50
c00222b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b4:	89 10                	mov    DWORD PTR [eax],edx
c00222b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ba:	83 ec 0c             	sub    esp,0xc
c00222bd:	50                   	push   eax
c00222be:	e8 c9 7a fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c00222c3:	83 c4 10             	add    esp,0x10
c00222c6:	90                   	nop
c00222c7:	83 c4 0c             	add    esp,0xc
c00222ca:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00222cc <SATABus::~SATABus()>:
c00222cc:	83 ec 0c             	sub    esp,0xc
c00222cf:	83 ec 0c             	sub    esp,0xc
c00222d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222d6:	e8 cd ff ff ff       	call   c00222a8 <SATABus::~SATABus()>
c00222db:	83 c4 10             	add    esp,0x10
c00222de:	83 ec 08             	sub    esp,0x8
c00222e1:	68 64 01 00 00       	push   0x164
c00222e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ea:	e8 30 b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00222ef:	83 c4 10             	add    esp,0x10
c00222f2:	83 c4 0c             	add    esp,0xc
c00222f5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00222f6 <ATA::~ATA()>:
c00222f6:	83 ec 0c             	sub    esp,0xc
c00222f9:	ba 38 5c 02 c0       	mov    edx,0xc0025c38
c00222fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022302:	89 10                	mov    DWORD PTR [eax],edx
c0022304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022308:	83 ec 0c             	sub    esp,0xc
c002230b:	50                   	push   eax
c002230c:	e8 5d 7b fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0022311:	83 c4 10             	add    esp,0x10
c0022314:	90                   	nop
c0022315:	83 c4 0c             	add    esp,0xc
c0022318:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002231a <ATA::~ATA()>:
c002231a:	83 ec 0c             	sub    esp,0xc
c002231d:	83 ec 0c             	sub    esp,0xc
c0022320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022324:	e8 cd ff ff ff       	call   c00222f6 <ATA::~ATA()>
c0022329:	83 c4 10             	add    esp,0x10
c002232c:	83 ec 08             	sub    esp,0x8
c002232f:	68 8c 01 00 00       	push   0x18c
c0022334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022338:	e8 e2 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c002233d:	83 c4 10             	add    esp,0x10
c0022340:	83 c4 0c             	add    esp,0xc
c0022343:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022344 <ATAPI::~ATAPI()>:
c0022344:	83 ec 0c             	sub    esp,0xc
c0022347:	ba 80 5c 02 c0       	mov    edx,0xc0025c80
c002234c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022350:	89 10                	mov    DWORD PTR [eax],edx
c0022352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022356:	83 ec 0c             	sub    esp,0xc
c0022359:	50                   	push   eax
c002235a:	e8 0f 7b fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002235f:	83 c4 10             	add    esp,0x10
c0022362:	90                   	nop
c0022363:	83 c4 0c             	add    esp,0xc
c0022366:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022368 <ATAPI::~ATAPI()>:
c0022368:	83 ec 0c             	sub    esp,0xc
c002236b:	83 ec 0c             	sub    esp,0xc
c002236e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022372:	e8 cd ff ff ff       	call   c0022344 <ATAPI::~ATAPI()>
c0022377:	83 c4 10             	add    esp,0x10
c002237a:	83 ec 08             	sub    esp,0x8
c002237d:	68 84 01 00 00       	push   0x184
c0022382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022386:	e8 94 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c002238b:	83 c4 10             	add    esp,0x10
c002238e:	83 c4 0c             	add    esp,0xc
c0022391:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022392 <SATA::~SATA()>:
c0022392:	83 ec 0c             	sub    esp,0xc
c0022395:	ba 40 5d 02 c0       	mov    edx,0xc0025d40
c002239a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239e:	89 10                	mov    DWORD PTR [eax],edx
c00223a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a4:	83 ec 0c             	sub    esp,0xc
c00223a7:	50                   	push   eax
c00223a8:	e8 c1 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c00223ad:	83 c4 10             	add    esp,0x10
c00223b0:	90                   	nop
c00223b1:	83 c4 0c             	add    esp,0xc
c00223b4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00223b6 <SATA::~SATA()>:
c00223b6:	83 ec 0c             	sub    esp,0xc
c00223b9:	83 ec 0c             	sub    esp,0xc
c00223bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223c0:	e8 cd ff ff ff       	call   c0022392 <SATA::~SATA()>
c00223c5:	83 c4 10             	add    esp,0x10
c00223c8:	83 ec 08             	sub    esp,0x8
c00223cb:	68 7c 01 00 00       	push   0x17c
c00223d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223d4:	e8 46 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00223d9:	83 c4 10             	add    esp,0x10
c00223dc:	83 c4 0c             	add    esp,0xc
c00223df:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00223e0 <SATAPI::~SATAPI()>:
c00223e0:	83 ec 0c             	sub    esp,0xc
c00223e3:	ba 64 5e 02 c0       	mov    edx,0xc0025e64
c00223e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ec:	89 10                	mov    DWORD PTR [eax],edx
c00223ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f2:	83 ec 0c             	sub    esp,0xc
c00223f5:	50                   	push   eax
c00223f6:	e8 73 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c00223fb:	83 c4 10             	add    esp,0x10
c00223fe:	90                   	nop
c00223ff:	83 c4 0c             	add    esp,0xc
c0022402:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022404 <SATAPI::~SATAPI()>:
c0022404:	83 ec 0c             	sub    esp,0xc
c0022407:	83 ec 0c             	sub    esp,0xc
c002240a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002240e:	e8 cd ff ff ff       	call   c00223e0 <SATAPI::~SATAPI()>
c0022413:	83 c4 10             	add    esp,0x10
c0022416:	83 ec 08             	sub    esp,0x8
c0022419:	68 84 01 00 00       	push   0x184
c002241e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022422:	e8 f8 ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022427:	83 c4 10             	add    esp,0x10
c002242a:	83 c4 0c             	add    esp,0xc
c002242d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002242e <IOAPIC::~IOAPIC()>:
c002242e:	83 ec 0c             	sub    esp,0xc
c0022431:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c0022436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243a:	89 10                	mov    DWORD PTR [eax],edx
c002243c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022440:	83 ec 0c             	sub    esp,0xc
c0022443:	50                   	push   eax
c0022444:	e8 b5 74 fe ff       	call   c00098fe <Device::~Device()>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	90                   	nop
c002244d:	83 c4 0c             	add    esp,0xc
c0022450:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022452 <IOAPIC::~IOAPIC()>:
c0022452:	83 ec 0c             	sub    esp,0xc
c0022455:	83 ec 0c             	sub    esp,0xc
c0022458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002245c:	e8 cd ff ff ff       	call   c002242e <IOAPIC::~IOAPIC()>
c0022461:	83 c4 10             	add    esp,0x10
c0022464:	83 ec 08             	sub    esp,0x8
c0022467:	68 68 01 00 00       	push   0x168
c002246c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022470:	e8 aa ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022475:	83 c4 10             	add    esp,0x10
c0022478:	83 c4 0c             	add    esp,0xc
c002247b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002247c <APICTimer::~APICTimer()>:
c002247c:	83 ec 0c             	sub    esp,0xc
c002247f:	ba 0c 5f 02 c0       	mov    edx,0xc0025f0c
c0022484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022488:	89 10                	mov    DWORD PTR [eax],edx
c002248a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248e:	83 ec 0c             	sub    esp,0xc
c0022491:	50                   	push   eax
c0022492:	e8 a5 8b fe ff       	call   c000b03c <Timer::~Timer()>
c0022497:	83 c4 10             	add    esp,0x10
c002249a:	90                   	nop
c002249b:	83 c4 0c             	add    esp,0xc
c002249e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00224a0 <APICTimer::~APICTimer()>:
c00224a0:	83 ec 0c             	sub    esp,0xc
c00224a3:	83 ec 0c             	sub    esp,0xc
c00224a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224aa:	e8 cd ff ff ff       	call   c002247c <APICTimer::~APICTimer()>
c00224af:	83 c4 10             	add    esp,0x10
c00224b2:	83 ec 08             	sub    esp,0x8
c00224b5:	68 60 01 00 00       	push   0x160
c00224ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224be:	e8 5c ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00224c3:	83 c4 10             	add    esp,0x10
c00224c6:	83 c4 0c             	add    esp,0xc
c00224c9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00224cc <PIT::~PIT()>:
c00224cc:	83 ec 0c             	sub    esp,0xc
c00224cf:	ba 5c 5f 02 c0       	mov    edx,0xc0025f5c
c00224d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d8:	89 10                	mov    DWORD PTR [eax],edx
c00224da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224de:	83 ec 0c             	sub    esp,0xc
c00224e1:	50                   	push   eax
c00224e2:	e8 55 8b fe ff       	call   c000b03c <Timer::~Timer()>
c00224e7:	83 c4 10             	add    esp,0x10
c00224ea:	90                   	nop
c00224eb:	83 c4 0c             	add    esp,0xc
c00224ee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00224f0 <PIT::~PIT()>:
c00224f0:	83 ec 0c             	sub    esp,0xc
c00224f3:	83 ec 0c             	sub    esp,0xc
c00224f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224fa:	e8 cd ff ff ff       	call   c00224cc <PIT::~PIT()>
c00224ff:	83 c4 10             	add    esp,0x10
c0022502:	83 ec 08             	sub    esp,0x8
c0022505:	68 5c 01 00 00       	push   0x15c
c002250a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002250e:	e8 0c ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022513:	83 c4 10             	add    esp,0x10
c0022516:	83 c4 0c             	add    esp,0xc
c0022519:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be bf 41 02 c0       	mov    esi,0xc00241bf
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be db 41 02 c0       	mov    esi,0xc00241db
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
