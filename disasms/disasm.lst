
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8b eb 00 00       	call   c000ebab <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 48 02 c0       	mov    eax,0xc00248a8
c0000025:	3d a8 48 02 c0       	cmp    eax,0xc00248a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 48 02 c0       	push   0xc00248a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 48 02 c0       	mov    eax,0xc00248a8
c0000051:	2d a8 48 02 c0       	sub    eax,0xc00248a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 48 02 c0       	push   0xc00248a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 30 0a 02 c0       	mov    ebx,0xc0020a30
c0000097:	81 eb 2c 0a 02 c0    	sub    ebx,0xc0020a2c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 2c 0a 02 c0       	mov    esi,0xc0020a2c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 48 02 c0       	push   0xc00248a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 a8 48 02 c0       	push   0xc00248a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 33 4a 01 00       	call   c0014ce0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 a6 2d 01 00       	call   c001306b <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 11 4a 01 00       	call   c0014ce0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1e 4f 01 00       	call   c001520c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d1 53 01 00       	call   c00156c8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3a e4 00 00       	jmp    c000e7b9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 0a 02 c0 02 	test   BYTE PTR [edx-0x3ffdf5c0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 0a 02 c0 01 	test   BYTE PTR [edx-0x3ffdf5c0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 0a 02 c0 08 	test   BYTE PTR [edx-0x3ffdf5c0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 0a 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf5c0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 0a 02 c0 01 	test   BYTE PTR [edx-0x3ffdf5c0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 99 da 00 00       	call   c000e8f9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 a6 d9 00 00       	call   c000e89b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 85 d8 00 00       	call   c000e865 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 80 d8 00 00       	call   c000e89b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 2c d7 00 00       	call   c000e865 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 12 d7 00 00       	call   c000e865 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 e8 d6 00 00       	call   c000e865 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00012e5:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c0001321:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001326:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001334:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001385:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013a0:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c000145a:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c0001460:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001467:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000152d:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001533:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c000153a:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 44 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf4bc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 e1 82 01 00       	jmp    c001a26c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 0b 83 01 00       	jmp    c001a2ac <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 2c 83 01 00       	jmp    c001a2ec <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 a0 0c 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf360]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 a0 0c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf360]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 4c 34 02 c0       	mov    edx,0xc002344c
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 5c 0b 02 c0       	mov    edx,0xc0020b5c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 62 0b 02 c0       	mov    eax,0xc0020b62
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 20 0c 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf3e0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 6b 0b 02 c0       	mov    eax,0xc0020b6b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 a0 0c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf360]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 f0 0b 02 c0       	mov    eax,0xc0020bf0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb e0 0b 02 c0       	mov    ebx,0xc0020be0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 c0 0b 02 c0       	mov    eax,0xc0020bc0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 d0 0b 02 c0       	mov    eax,0xc0020bd0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 72 0b 02 c0       	mov    edx,0xc0020b72
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 7e 0b 02 c0       	mov    edx,0xc0020b7e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 92 0b 02 c0       	mov    edx,0xc0020b92
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 64 8b 00 00       	call   c000e97b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 5c 8b 00 00       	call   c000e98b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c c0 0f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020fc0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 c0 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fc0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 c0 0d 02 c0       	mov    eax,0xc0020dc0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 00 0d 02 c0       	mov    eax,0xc0020d00
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 c0 0c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf340]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 c0 10 02 c0       	push   0xc00210c0
c0006303:	e8 00 49 01 00       	call   c001ac08 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ce 10 02 c0       	push   0xc00210ce
c000633b:	e8 c8 48 01 00       	call   c001ac08 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 31 48 01 00       	call   c001abac <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 dd 10 02 c0       	push   0xc00210dd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c0006746:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000674c:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006768:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067e1:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068d9:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c0006917:	05 40 65 02 c0       	add    eax,0xc0026540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069d6:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 e0 10 02 c0       	push   0xc00210e0
c00069fa:	e8 09 42 01 00       	call   c001ac08 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 1d 42 01 00       	call   c001ac24 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 e5 10 02 c0 	mov    DWORD PTR [esp],0xc00210e5
c0006a14:	e8 ef 41 01 00       	call   c001ac08 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a20:	e8 ff 41 01 00       	call   c001ac24 <iso_kprintfd>
c0006a25:	c7 04 24 eb 10 02 c0 	mov    DWORD PTR [esp],0xc00210eb
c0006a2c:	e8 d7 41 01 00       	call   c001ac08 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a38:	e8 e7 41 01 00       	call   c001ac24 <iso_kprintfd>
c0006a3d:	c7 04 24 f1 10 02 c0 	mov    DWORD PTR [esp],0xc00210f1
c0006a44:	e8 bf 41 01 00       	call   c001ac08 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a50:	e8 cf 41 01 00       	call   c001ac24 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006ab6:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c0006b12:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 dd 10 02 c0       	push   0xc00210dd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006bee:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006bf4:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 65 02 c0       	add    eax,0xc0026550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 fa 10 02 c0       	push   0xc00210fa
c0006c19:	e8 ea 3f 01 00       	call   c001ac08 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c4e:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 05 11 02 c0       	push   0xc0021105
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 0c 11 02 c0       	push   0xc002110c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006cec:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d0f:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 13 11 02 c0       	push   0xc0021113
c0006d30:	e8 d3 3e 01 00       	call   c001ac08 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 1e 11 02 c0       	push   0xc002111e
c0006d4b:	e8 b8 3e 01 00       	call   c001ac08 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 65 02 c0       	push   0xc0026540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d75:	e8 01 7c 00 00       	call   c000e97b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d86:	e8 f0 7b 00 00       	call   c000e97b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 db 7b 00 00       	call   c000e97b <malloc>
c0006da0:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 c2 7b 00 00       	call   c000e97b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006de6:	e8 a0 7b 00 00       	call   c000e98b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 92 7b 00 00       	call   c000e98b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 78 7b 00 00       	call   c000e98b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 63 7b 00 00       	call   c000e98b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e35:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 30 11 02 c0       	mov    esi,0xc0021130
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 2f 11 02 c0       	mov    al,ds:0xc002112f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 40 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeec0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 90 12 02 c0       	push   0xc0021290
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 a4 12 02 c0       	push   0xc00212a4
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 ae 12 02 c0       	push   0xc00212ae
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 b8 12 02 c0       	push   0xc00212b8
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 fc 13 02 c0       	push   0xc00213fc
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 c2 12 02 c0       	push   0xc00212c2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 1c 14 02 c0       	push   0xc002141c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 d7 12 02 c0       	push   0xc00212d7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 f1 12 02 c0       	push   0xc00212f1
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 60 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc1a0]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 44 14 02 c0       	push   0xc0021444
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 fc 13 02 c0       	push   0xc00213fc
c00071d4:	e8 e9 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 8c 14 02 c0       	push   0xc002148c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 8c 14 02 c0       	push   0xc002148c
c0007203:	e8 ba 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 fc 12 02 c0       	push   0xc00212fc
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 fc 12 02 c0       	push   0xc00212fc
c000722f:	e8 8e 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 19 13 02 c0       	push   0xc0021319
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 19 13 02 c0       	push   0xc0021319
c000725b:	e8 62 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 ac 14 02 c0       	push   0xc00214ac
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 ac 14 02 c0       	push   0xc00214ac
c0007287:	e8 36 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 d0 14 02 c0       	push   0xc00214d0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 d0 14 02 c0       	push   0xc00214d0
c00072b3:	e8 0a 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 35 13 02 c0       	push   0xc0021335
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 35 13 02 c0       	push   0xc0021335
c00072df:	e8 de 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 51 13 02 c0       	push   0xc0021351
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 51 13 02 c0       	push   0xc0021351
c000730b:	e8 b2 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 f0 14 02 c0       	push   0xc00214f0
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 f0 14 02 c0       	push   0xc00214f0
c0007337:	e8 86 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 14 15 02 c0       	push   0xc0021514
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 14 15 02 c0       	push   0xc0021514
c0007363:	e8 5a 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 b1 75 00 00       	call   c000e97b <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073d5:	68 33 15 02 c0       	push   0xc0021533
c00073da:	50                   	push   eax
c00073db:	e8 32 0d 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 51 15 02 c0       	push   0xc0021551
c00073ef:	e8 ce 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 2f 0d 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 6b 15 02 c0       	push   0xc002156b
c0007410:	e8 ad 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 85 15 02 c0       	push   0xc0021585
c0007457:	e8 66 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 9f 15 02 c0       	push   0xc002159f
c0007487:	e8 36 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 f3 0c 00 00       	call   c000818e <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 b4 62 00 00       	call   c000d78d <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 b3 81 00 00       	call   c000f6a6 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 b9 15 02 c0       	push   0xc00215b9
c000752c:	e8 91 77 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 73 02 c0       	push   0xc0027300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 69 4f 00 00       	call   c000c57a <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 5e 73 00 00       	call   c000e97b <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007628:	68 33 15 02 c0       	push   0xc0021533
c000762d:	50                   	push   eax
c000762e:	e8 df 0a 00 00       	call   c0008112 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 c2 15 02 c0       	push   0xc00215c2
c0007642:	e8 7b 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 a1 0d 00 00       	call   c00083f4 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 cc 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 df 15 02 c0       	push   0xc00215df
c0007673:	e8 4a 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 0a 0b 00 00       	call   c000818e <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 92 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 fc 15 02 c0       	push   0xc00215fc
c00076ad:	e8 10 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 70 0a 00 00       	call   c000818e <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007790:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 cf 71 00 00       	call   c000e97b <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00077b7:	68 33 15 02 c0       	push   0xc0021533
c00077bc:	50                   	push   eax
c00077bd:	e8 50 09 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 17 16 02 c0       	push   0xc0021617
c00077d1:	e8 ec 74 00 00       	call   c000ecc2 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 10 0c 00 00       	call   c00083f4 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 3b 09 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 32 16 02 c0       	push   0xc0021632
c0007804:	e8 b9 74 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 25 09 00 00       	call   c000818e <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 07 09 00 00       	call   c000818e <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 a8 70 00 00       	call   c000e97b <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 2d 08 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 36 08 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 9d 0a 00 00       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 77 07 00 00       	call   c000818e <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 5e 07 00 00       	call   c000818e <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 1e 6f 00 00       	call   c000e97b <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 a5 06 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 4d 16 02 c0       	mov    esi,0xc002164d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 3a 06 00 00       	call   c000818e <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 22 06 00 00       	call   c000818e <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 e7 a0 00 00       	call   c0011dd6 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 e5 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 28 17 02 c0       	mov    edx,0xc0021728
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 99 a0 00 00       	call   c0011dd6 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 97 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 41 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 81 6b 00 00       	call   c000e97b <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 06 26 01 00       	call   c001a408 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 6d 6b 00 00       	call   c000e97b <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 1e 35 01 00       	call   c001b334 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 94 2d 02 c0       	push   0xc0022d94
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 56 16 02 c0       	push   0xc0021656
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 71 16 02 c0       	push   0xc0021671
c000801f:	e8 9e 6c 00 00       	call   c000ecc2 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 a2 9b 00 00       	call   c0011bf0 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080a0:	83 e8 41             	sub    eax,0x41
c00080a3:	88 c2                	mov    dl,al
c00080a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080c1:	0f b6 c0             	movzx  eax,al
c00080c4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080cb:	85 c0                	test   eax,eax
c00080cd:	74 3e                	je     c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d9:	0f b6 c0             	movzx  eax,al
c00080dc:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e9:	85 c0                	test   eax,eax
c00080eb:	75 20                	jne    c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f7:	0f b6 c0             	movzx  eax,al
c00080fa:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008101:	83 ec 0c             	sub    esp,0xc
c0008104:	50                   	push   eax
c0008105:	e8 00 1f 00 00       	call   c000a00a <LogicalDisk::mount()>
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	90                   	nop
c000810e:	83 c4 1c             	add    esp,0x1c
c0008111:	c3                   	ret    

c0008112 <File::File(char const*, Process*)>:
c0008112:	83 ec 0c             	sub    esp,0xc
c0008115:	6a 01                	push   0x1
c0008117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008123:	e8 0c ff ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008128:	83 c4 10             	add    esp,0x10
c000812b:	90                   	nop
c000812c:	83 c4 0c             	add    esp,0xc
c000812f:	c3                   	ret    

c0008130 <File::open(FileOpenMode)>:
c0008130:	53                   	push   ebx
c0008131:	b8 0b 00 00 00       	mov    eax,0xb
c0008136:	83 ec 08             	sub    esp,0x8
c0008139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000813d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008144:	83 fa 19             	cmp    edx,0x19
c0008147:	77 40                	ja     c0008189 <File::open(FileOpenMode)+0x59>
c0008149:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008150:	85 d2                	test   edx,edx
c0008152:	74 35                	je     c0008189 <File::open(FileOpenMode)+0x59>
c0008154:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000815a:	85 d2                	test   edx,edx
c000815c:	74 2b                	je     c0008189 <File::open(FileOpenMode)+0x59>
c000815e:	b8 06 00 00 00       	mov    eax,0x6
c0008163:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008167:	75 20                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008169:	8b 02                	mov    eax,DWORD PTR [edx]
c000816b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008175:	51                   	push   ecx
c0008176:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008179:	51                   	push   ecx
c000817a:	52                   	push   edx
c000817b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	85 c0                	test   eax,eax
c0008183:	75 04                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008185:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008189:	83 c4 08             	add    esp,0x8
c000818c:	5b                   	pop    ebx
c000818d:	c3                   	ret    

c000818e <File::close()>:
c000818e:	53                   	push   ebx
c000818f:	b8 0b 00 00 00       	mov    eax,0xb
c0008194:	83 ec 08             	sub    esp,0x8
c0008197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000819b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081a2:	83 f9 19             	cmp    ecx,0x19
c00081a5:	77 41                	ja     c00081e8 <File::close()+0x5a>
c00081a7:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081ae:	85 db                	test   ebx,ebx
c00081b0:	74 36                	je     c00081e8 <File::close()+0x5a>
c00081b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b9:	74 2d                	je     c00081e8 <File::close()+0x5a>
c00081bb:	b8 05 00 00 00       	mov    eax,0x5
c00081c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081c4:	74 22                	je     c00081e8 <File::close()+0x5a>
c00081c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ca:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d7:	53                   	push   ebx
c00081d8:	53                   	push   ebx
c00081d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081e1:	50                   	push   eax
c00081e2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	83 c4 08             	add    esp,0x8
c00081eb:	5b                   	pop    ebx
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <File::seek(unsigned long long)>:
c00081ee:	56                   	push   esi
c00081ef:	53                   	push   ebx
c00081f0:	b8 0b 00 00 00       	mov    eax,0xb
c00081f5:	51                   	push   ecx
c00081f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008205:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008209:	83 fa 19             	cmp    edx,0x19
c000820c:	77 31                	ja     c000823f <File::seek(unsigned long long)+0x51>
c000820e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008215:	85 d2                	test   edx,edx
c0008217:	74 26                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008219:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000821f:	85 d2                	test   edx,edx
c0008221:	74 1c                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008223:	b8 05 00 00 00       	mov    eax,0x5
c0008228:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000822c:	74 11                	je     c000823f <File::seek(unsigned long long)+0x51>
c000822e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008230:	53                   	push   ebx
c0008231:	51                   	push   ecx
c0008232:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008238:	52                   	push   edx
c0008239:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	5a                   	pop    edx
c0008240:	5b                   	pop    ebx
c0008241:	5e                   	pop    esi
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <File::truncate(unsigned long long)>:
c0008244:	56                   	push   esi
c0008245:	53                   	push   ebx
c0008246:	b8 0b 00 00 00       	mov    eax,0xb
c000824b:	51                   	push   ecx
c000824c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008254:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000825b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000825f:	83 fa 19             	cmp    edx,0x19
c0008262:	77 31                	ja     c0008295 <File::truncate(unsigned long long)+0x51>
c0008264:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000826b:	85 d2                	test   edx,edx
c000826d:	74 26                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c000826f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008275:	85 d2                	test   edx,edx
c0008277:	74 1c                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008279:	b8 05 00 00 00       	mov    eax,0x5
c000827e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008282:	74 11                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 02                	mov    eax,DWORD PTR [edx]
c0008286:	53                   	push   ebx
c0008287:	51                   	push   ecx
c0008288:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828e:	52                   	push   edx
c000828f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	5a                   	pop    edx
c0008296:	5b                   	pop    ebx
c0008297:	5e                   	pop    esi
c0008298:	c3                   	ret    
c0008299:	90                   	nop

c000829a <File::tell(unsigned long long*)>:
c000829a:	83 ec 0c             	sub    esp,0xc
c000829d:	b8 0b 00 00 00       	mov    eax,0xb
c00082a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082ad:	83 fa 19             	cmp    edx,0x19
c00082b0:	77 34                	ja     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082b2:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b9:	85 d2                	test   edx,edx
c00082bb:	74 29                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c3:	85 d2                	test   edx,edx
c00082c5:	74 1f                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082c7:	b8 05 00 00 00       	mov    eax,0x5
c00082cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082d0:	74 14                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082d2:	50                   	push   eax
c00082d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082df:	52                   	push   edx
c00082e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082e3:	83 c4 10             	add    esp,0x10
c00082e6:	83 c4 0c             	add    esp,0xc
c00082e9:	c3                   	ret    

c00082ea <File::rewind()>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	6a 00                	push   0x0
c00082ef:	6a 00                	push   0x0
c00082f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f5:	e8 f4 fe ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00082fa:	83 c4 1c             	add    esp,0x1c
c00082fd:	c3                   	ret    

c00082fe <File::unlink()>:
c00082fe:	83 ec 0c             	sub    esp,0xc
c0008301:	b8 0b 00 00 00       	mov    eax,0xb
c0008306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000830a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008311:	83 f9 19             	cmp    ecx,0x19
c0008314:	77 2f                	ja     c0008345 <File::unlink()+0x47>
c0008316:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000831d:	85 c9                	test   ecx,ecx
c000831f:	74 24                	je     c0008345 <File::unlink()+0x47>
c0008321:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008327:	85 c9                	test   ecx,ecx
c0008329:	74 1a                	je     c0008345 <File::unlink()+0x47>
c000832b:	b8 06 00 00 00       	mov    eax,0x6
c0008330:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008334:	75 0f                	jne    c0008345 <File::unlink()+0x47>
c0008336:	83 c2 0d             	add    edx,0xd
c0008339:	50                   	push   eax
c000833a:	50                   	push   eax
c000833b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000833d:	52                   	push   edx
c000833e:	51                   	push   ecx
c000833f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008342:	83 c4 10             	add    esp,0x10
c0008345:	83 c4 0c             	add    esp,0xc
c0008348:	c3                   	ret    
c0008349:	90                   	nop

c000834a <File::rename(char const*)>:
c000834a:	83 ec 0c             	sub    esp,0xc
c000834d:	b8 0b 00 00 00       	mov    eax,0xb
c0008352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000835d:	83 f9 19             	cmp    ecx,0x19
c0008360:	77 32                	ja     c0008394 <File::rename(char const*)+0x4a>
c0008362:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008369:	85 c9                	test   ecx,ecx
c000836b:	74 27                	je     c0008394 <File::rename(char const*)+0x4a>
c000836d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008373:	85 c9                	test   ecx,ecx
c0008375:	74 1d                	je     c0008394 <File::rename(char const*)+0x4a>
c0008377:	b8 06 00 00 00       	mov    eax,0x6
c000837c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008380:	75 12                	jne    c0008394 <File::rename(char const*)+0x4a>
c0008382:	83 c2 0d             	add    edx,0xd
c0008385:	50                   	push   eax
c0008386:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000838c:	52                   	push   edx
c000838d:	51                   	push   ecx
c000838e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008391:	83 c4 10             	add    esp,0x10
c0008394:	83 c4 0c             	add    esp,0xc
c0008397:	c3                   	ret    

c0008398 <File::chfatattr(unsigned char, unsigned char)>:
c0008398:	57                   	push   edi
c0008399:	b8 0b 00 00 00       	mov    eax,0xb
c000839e:	56                   	push   esi
c000839f:	53                   	push   ebx
c00083a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083b3:	83 f9 19             	cmp    ecx,0x19
c00083b6:	77 37                	ja     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083bf:	85 c9                	test   ecx,ecx
c00083c1:	74 2c                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c9:	85 c9                	test   ecx,ecx
c00083cb:	74 22                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083cd:	b8 06 00 00 00       	mov    eax,0x6
c00083d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083d6:	75 17                	jne    c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083da:	89 f0                	mov    eax,esi
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	0f b6 f0             	movzx  esi,al
c00083e2:	0f b6 db             	movzx  ebx,bl
c00083e5:	56                   	push   esi
c00083e6:	53                   	push   ebx
c00083e7:	52                   	push   edx
c00083e8:	51                   	push   ecx
c00083e9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	5b                   	pop    ebx
c00083f0:	5e                   	pop    esi
c00083f1:	5f                   	pop    edi
c00083f2:	c3                   	ret    
c00083f3:	90                   	nop

c00083f4 <File::exists()>:
c00083f4:	83 ec 0c             	sub    esp,0xc
c00083f7:	31 c0                	xor    eax,eax
c00083f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008404:	83 f9 19             	cmp    ecx,0x19
c0008407:	77 24                	ja     c000842d <File::exists()+0x39>
c0008409:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008410:	85 c9                	test   ecx,ecx
c0008412:	74 19                	je     c000842d <File::exists()+0x39>
c0008414:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841a:	85 c9                	test   ecx,ecx
c000841c:	74 0f                	je     c000842d <File::exists()+0x39>
c000841e:	83 c2 0d             	add    edx,0xd
c0008421:	50                   	push   eax
c0008422:	50                   	push   eax
c0008423:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008425:	52                   	push   edx
c0008426:	51                   	push   ecx
c0008427:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000842a:	83 c4 10             	add    esp,0x10
c000842d:	83 c4 0c             	add    esp,0xc
c0008430:	c3                   	ret    
c0008431:	90                   	nop

c0008432 <File::stat(unsigned long long*, bool*)>:
c0008432:	56                   	push   esi
c0008433:	53                   	push   ebx
c0008434:	50                   	push   eax
c0008435:	b8 0b 00 00 00       	mov    eax,0xb
c000843a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000843e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008442:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000844d:	83 f9 19             	cmp    ecx,0x19
c0008450:	77 3d                	ja     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008452:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008459:	85 c9                	test   ecx,ecx
c000845b:	74 32                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c000845d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008463:	85 c9                	test   ecx,ecx
c0008465:	74 28                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008467:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008469:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000846d:	74 13                	je     c0008482 <File::stat(unsigned long long*, bool*)+0x50>
c000846f:	83 ec 04             	sub    esp,0x4
c0008472:	56                   	push   esi
c0008473:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008479:	51                   	push   ecx
c000847a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000847d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008480:	eb 0a                	jmp    c000848c <File::stat(unsigned long long*, bool*)+0x5a>
c0008482:	53                   	push   ebx
c0008483:	83 c2 0d             	add    edx,0xd
c0008486:	56                   	push   esi
c0008487:	52                   	push   edx
c0008488:	51                   	push   ecx
c0008489:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	5a                   	pop    edx
c0008490:	5b                   	pop    ebx
c0008491:	5e                   	pop    esi
c0008492:	c3                   	ret    

c0008493 <Fs::setcwd(Process*, char*)>:
c0008493:	55                   	push   ebp
c0008494:	57                   	push   edi
c0008495:	56                   	push   esi
c0008496:	53                   	push   ebx
c0008497:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000849d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084a4:	6a 00                	push   0x0
c00084a6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084ac:	57                   	push   edi
c00084ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084b4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b8:	56                   	push   esi
c00084b9:	e8 5c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084be:	89 34 24             	mov    DWORD PTR [esp],esi
c00084c1:	e8 aa 80 ff ff       	call   c0000570 <strlen>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	83 f8 02             	cmp    eax,0x2
c00084cc:	77 15                	ja     c00084e3 <Fs::setcwd(Process*, char*)+0x50>
c00084ce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084d3:	83 eb 41             	sub    ebx,0x41
c00084d6:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084dd:	85 c0                	test   eax,eax
c00084df:	75 1c                	jne    c00084fd <Fs::setcwd(Process*, char*)+0x6a>
c00084e1:	eb 2f                	jmp    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	56                   	push   esi
c00084e7:	e8 84 80 ff ff       	call   c0000570 <strlen>
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	83 f8 03             	cmp    eax,0x3
c00084f2:	75 57                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f9:	75 50                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084fb:	eb d1                	jmp    c00084ce <Fs::setcwd(Process*, char*)+0x3b>
c00084fd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008504:	75 0c                	jne    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c0008506:	83 ec 0c             	sub    esp,0xc
c0008509:	50                   	push   eax
c000850a:	e8 fb 1a 00 00       	call   c000a00a <LogicalDisk::mount()>
c000850f:	83 c4 10             	add    esp,0x10
c0008512:	b8 03 00 00 00       	mov    eax,0x3
c0008517:	83 fb 19             	cmp    ebx,0x19
c000851a:	0f 87 c6 00 00 00    	ja     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008520:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008527:	b8 05 00 00 00       	mov    eax,0x5
c000852c:	85 d2                	test   edx,edx
c000852e:	0f 84 b2 00 00 00    	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008534:	b8 06 00 00 00       	mov    eax,0x6
c0008539:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008540:	0f 85 92 00 00 00    	jne    c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c0008546:	e9 9b 00 00 00       	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c000854b:	83 ec 0c             	sub    esp,0xc
c000854e:	68 14 01 00 00       	push   0x114
c0008553:	e8 23 64 00 00       	call   c000e97b <malloc>
c0008558:	83 c4 0c             	add    esp,0xc
c000855b:	89 c3                	mov    ebx,eax
c000855d:	55                   	push   ebp
c000855e:	56                   	push   esi
c000855f:	50                   	push   eax
c0008560:	e8 ad fb ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0008565:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000856a:	83 c4 0c             	add    esp,0xc
c000856d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008571:	50                   	push   eax
c0008572:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008576:	50                   	push   eax
c0008577:	53                   	push   ebx
c0008578:	e8 b5 fe ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	83 f8 02             	cmp    eax,0x2
c0008583:	74 27                	je     c00085ac <Fs::setcwd(Process*, char*)+0x119>
c0008585:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000858a:	75 1c                	jne    c00085a8 <Fs::setcwd(Process*, char*)+0x115>
c000858c:	b8 02 00 00 00       	mov    eax,0x2
c0008591:	85 db                	test   ebx,ebx
c0008593:	74 51                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000859a:	53                   	push   ebx
c000859b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000859e:	83 c4 10             	add    esp,0x10
c00085a1:	b8 02 00 00 00       	mov    eax,0x2
c00085a6:	eb 3e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085a8:	85 c0                	test   eax,eax
c00085aa:	74 1c                	je     c00085c8 <Fs::setcwd(Process*, char*)+0x135>
c00085ac:	b8 01 00 00 00       	mov    eax,0x1
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 31                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 01 00 00 00       	mov    eax,0x1
c00085c6:	eb 1e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 db                	test   ebx,ebx
c00085ca:	74 0c                	je     c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c00085cc:	83 ec 0c             	sub    esp,0xc
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	53                   	push   ebx
c00085d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	50                   	push   eax
c00085d9:	50                   	push   eax
c00085da:	56                   	push   esi
c00085db:	57                   	push   edi
c00085dc:	e8 5f 80 ff ff       	call   c0000640 <strcpy>
c00085e1:	83 c4 10             	add    esp,0x10
c00085e4:	31 c0                	xor    eax,eax
c00085e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085ec:	5b                   	pop    ebx
c00085ed:	5e                   	pop    esi
c00085ee:	5f                   	pop    edi
c00085ef:	5d                   	pop    ebp
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <Directory::Directory(char const*, Process*)>:
c00085f2:	83 ec 0c             	sub    esp,0xc
c00085f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f9:	83 ec 08             	sub    esp,0x8
c00085fc:	6a 00                	push   0x0
c00085fe:	50                   	push   eax
c00085ff:	e8 ec 95 00 00       	call   c0011bf0 <UnixFile::UnixFile(int)>
c0008604:	83 c4 10             	add    esp,0x10
c0008607:	ba 28 17 02 c0       	mov    edx,0xc0021728
c000860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008610:	89 10                	mov    DWORD PTR [eax],edx
c0008612:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008617:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000861b:	0f 95 c0             	setne  al
c000861e:	0f b6 c0             	movzx  eax,al
c0008621:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008625:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000862b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000862f:	83 c2 0d             	add    edx,0xd
c0008632:	50                   	push   eax
c0008633:	51                   	push   ecx
c0008634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008638:	52                   	push   edx
c0008639:	e8 dc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000863e:	83 c4 10             	add    esp,0x10
c0008641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008645:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008648:	83 e8 41             	sub    eax,0x41
c000864b:	88 c2                	mov    dl,al
c000864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008651:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008663:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008669:	0f b6 c0             	movzx  eax,al
c000866c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008673:	85 c0                	test   eax,eax
c0008675:	74 3e                	je     c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008681:	0f b6 c0             	movzx  eax,al
c0008684:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000868b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008691:	85 c0                	test   eax,eax
c0008693:	75 20                	jne    c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008699:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869f:	0f b6 c0             	movzx  eax,al
c00086a2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	50                   	push   eax
c00086ad:	e8 58 19 00 00       	call   c000a00a <LogicalDisk::mount()>
c00086b2:	83 c4 10             	add    esp,0x10
c00086b5:	90                   	nop
c00086b6:	83 c4 0c             	add    esp,0xc
c00086b9:	c3                   	ret    

c00086ba <Directory::open()>:
c00086ba:	53                   	push   ebx
c00086bb:	b8 0b 00 00 00       	mov    eax,0xb
c00086c0:	83 ec 08             	sub    esp,0x8
c00086c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ce:	83 fa 19             	cmp    edx,0x19
c00086d1:	77 3d                	ja     c0008710 <Directory::open()+0x56>
c00086d3:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086da:	85 d2                	test   edx,edx
c00086dc:	74 32                	je     c0008710 <Directory::open()+0x56>
c00086de:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086e4:	85 d2                	test   edx,edx
c00086e6:	74 28                	je     c0008710 <Directory::open()+0x56>
c00086e8:	b8 06 00 00 00       	mov    eax,0x6
c00086ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086f1:	75 1d                	jne    c0008710 <Directory::open()+0x56>
c00086f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f9:	50                   	push   eax
c00086fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00086fc:	51                   	push   ecx
c00086fd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008700:	51                   	push   ecx
c0008701:	52                   	push   edx
c0008702:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 04                	jne    c0008710 <Directory::open()+0x56>
c000870c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008710:	83 c4 08             	add    esp,0x8
c0008713:	5b                   	pop    ebx
c0008714:	c3                   	ret    
c0008715:	90                   	nop

c0008716 <Directory::close()>:
c0008716:	53                   	push   ebx
c0008717:	b8 0b 00 00 00       	mov    eax,0xb
c000871c:	83 ec 08             	sub    esp,0x8
c000871f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008723:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000872a:	83 f9 19             	cmp    ecx,0x19
c000872d:	77 41                	ja     c0008770 <Directory::close()+0x5a>
c000872f:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008736:	85 db                	test   ebx,ebx
c0008738:	74 36                	je     c0008770 <Directory::close()+0x5a>
c000873a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008741:	74 2d                	je     c0008770 <Directory::close()+0x5a>
c0008743:	b8 05 00 00 00       	mov    eax,0x5
c0008748:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000874c:	74 22                	je     c0008770 <Directory::close()+0x5a>
c000874e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008752:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008759:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000875f:	53                   	push   ebx
c0008760:	53                   	push   ebx
c0008761:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008763:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008769:	50                   	push   eax
c000876a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    
c0008775:	90                   	nop

c0008776 <Directory::unlink()>:
c0008776:	83 ec 0c             	sub    esp,0xc
c0008779:	b8 0b 00 00 00       	mov    eax,0xb
c000877e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008782:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008789:	83 f9 19             	cmp    ecx,0x19
c000878c:	77 2f                	ja     c00087bd <Directory::unlink()+0x47>
c000878e:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008795:	85 c9                	test   ecx,ecx
c0008797:	74 24                	je     c00087bd <Directory::unlink()+0x47>
c0008799:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000879f:	85 c9                	test   ecx,ecx
c00087a1:	74 1a                	je     c00087bd <Directory::unlink()+0x47>
c00087a3:	b8 06 00 00 00       	mov    eax,0x6
c00087a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ac:	75 0f                	jne    c00087bd <Directory::unlink()+0x47>
c00087ae:	83 c2 0d             	add    edx,0xd
c00087b1:	50                   	push   eax
c00087b2:	50                   	push   eax
c00087b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087b5:	52                   	push   edx
c00087b6:	51                   	push   ecx
c00087b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087ba:	83 c4 10             	add    esp,0x10
c00087bd:	83 c4 0c             	add    esp,0xc
c00087c0:	c3                   	ret    
c00087c1:	90                   	nop

c00087c2 <Directory::rename(char const*)>:
c00087c2:	83 ec 0c             	sub    esp,0xc
c00087c5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087d5:	83 f9 19             	cmp    ecx,0x19
c00087d8:	77 32                	ja     c000880c <Directory::rename(char const*)+0x4a>
c00087da:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087e1:	85 c9                	test   ecx,ecx
c00087e3:	74 27                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087eb:	85 c9                	test   ecx,ecx
c00087ed:	74 1d                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087ef:	b8 06 00 00 00       	mov    eax,0x6
c00087f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087f8:	75 12                	jne    c000880c <Directory::rename(char const*)+0x4a>
c00087fa:	83 c2 0d             	add    edx,0xd
c00087fd:	50                   	push   eax
c00087fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008804:	52                   	push   edx
c0008805:	51                   	push   ecx
c0008806:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	83 c4 0c             	add    esp,0xc
c000880f:	c3                   	ret    

c0008810 <Directory::exists()>:
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	31 c0                	xor    eax,eax
c0008815:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008819:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008820:	83 f9 19             	cmp    ecx,0x19
c0008823:	77 24                	ja     c0008849 <Directory::exists()+0x39>
c0008825:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000882c:	85 c9                	test   ecx,ecx
c000882e:	74 19                	je     c0008849 <Directory::exists()+0x39>
c0008830:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0f                	je     c0008849 <Directory::exists()+0x39>
c000883a:	83 c2 0d             	add    edx,0xd
c000883d:	50                   	push   eax
c000883e:	50                   	push   eax
c000883f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008841:	52                   	push   edx
c0008842:	51                   	push   ecx
c0008843:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	83 c4 0c             	add    esp,0xc
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <Directory::read(dirent*)>:
c000884e:	83 ec 1c             	sub    esp,0x1c
c0008851:	b8 0b 00 00 00       	mov    eax,0xb
c0008856:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000885a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008861:	83 f9 19             	cmp    ecx,0x19
c0008864:	77 30                	ja     c0008896 <Directory::read(dirent*)+0x48>
c0008866:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000886d:	85 c9                	test   ecx,ecx
c000886f:	74 25                	je     c0008896 <Directory::read(dirent*)+0x48>
c0008871:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008878:	74 1c                	je     c0008896 <Directory::read(dirent*)+0x48>
c000887a:	83 ec 0c             	sub    esp,0xc
c000887d:	8b 02                	mov    eax,DWORD PTR [edx]
c000887f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008883:	51                   	push   ecx
c0008884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008888:	6a 00                	push   0x0
c000888a:	68 10 01 00 00       	push   0x110
c000888f:	52                   	push   edx
c0008890:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008893:	83 c4 20             	add    esp,0x20
c0008896:	83 c4 1c             	add    esp,0x1c
c0008899:	c3                   	ret    

c000889a <Directory::create()>:
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	b8 0b 00 00 00       	mov    eax,0xb
c00088a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ad:	83 f9 19             	cmp    ecx,0x19
c00088b0:	77 2f                	ja     c00088e1 <Directory::create()+0x47>
c00088b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b9:	85 c9                	test   ecx,ecx
c00088bb:	74 24                	je     c00088e1 <Directory::create()+0x47>
c00088bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c3:	85 c9                	test   ecx,ecx
c00088c5:	74 1a                	je     c00088e1 <Directory::create()+0x47>
c00088c7:	b8 06 00 00 00       	mov    eax,0x6
c00088cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088d0:	75 0f                	jne    c00088e1 <Directory::create()+0x47>
c00088d2:	83 c2 0d             	add    edx,0xd
c00088d5:	50                   	push   eax
c00088d6:	50                   	push   eax
c00088d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d9:	52                   	push   edx
c00088da:	51                   	push   ecx
c00088db:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088de:	83 c4 10             	add    esp,0x10
c00088e1:	83 c4 0c             	add    esp,0xc
c00088e4:	c3                   	ret    
c00088e5:	90                   	nop

c00088e6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e6:	b8 0a 00 00 00       	mov    eax,0xa
c00088eb:	c3                   	ret    

c00088ec <Bus::Bus(char const*)>:
c00088ec:	83 ec 0c             	sub    esp,0xc
c00088ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088f3:	83 ec 08             	sub    esp,0x8
c00088f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fa:	50                   	push   eax
c00088fb:	e8 a4 08 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008900:	83 c4 10             	add    esp,0x10
c0008903:	ba 44 17 02 c0       	mov    edx,0xc0021744
c0008908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890c:	89 10                	mov    DWORD PTR [eax],edx
c000890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008912:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000891c:	90                   	nop
c000891d:	83 c4 0c             	add    esp,0xc
c0008920:	c3                   	ret    
c0008921:	90                   	nop
c0008922:	66 90                	xchg   ax,ax

c0008924 <Bus::~Bus()>:
c0008924:	83 ec 0c             	sub    esp,0xc
c0008927:	ba 44 17 02 c0       	mov    edx,0xc0021744
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	89 10                	mov    DWORD PTR [eax],edx
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	83 ec 0c             	sub    esp,0xc
c0008939:	50                   	push   eax
c000893a:	e8 05 06 00 00       	call   c0008f44 <Device::~Device()>
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	90                   	nop
c0008943:	83 c4 0c             	add    esp,0xc
c0008946:	c3                   	ret    
c0008947:	90                   	nop

c0008948 <Bus::~Bus()>:
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	83 ec 0c             	sub    esp,0xc
c000894e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008952:	e8 cd ff ff ff       	call   c0008924 <Bus::~Bus()>
c0008957:	83 c4 10             	add    esp,0x10
c000895a:	83 ec 08             	sub    esp,0x8
c000895d:	68 58 01 00 00       	push   0x158
c0008962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008966:	e8 95 3d 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	83 c4 0c             	add    esp,0xc
c0008971:	c3                   	ret    

c0008972 <KeBeepThread(void*)>:
c0008972:	83 ec 0c             	sub    esp,0xc
c0008975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008979:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0008980:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0008987:	75 01                	jne    c000898a <KeBeepThread(void*)+0x18>
c0008989:	fb                   	sti    
c000898a:	83 ec 0c             	sub    esp,0xc
c000898d:	6b c0 0a             	imul   eax,eax,0xa
c0008990:	50                   	push   eax
c0008991:	e8 02 cd 00 00       	call   c0015698 <milliTenthSleep(unsigned int)>
c0008996:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000899d:	e8 d3 fc 00 00       	call   c0018675 <HalMakeBeep(int)>
c00089a2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089aa:	83 c4 1c             	add    esp,0x1c
c00089ad:	e9 be cb 00 00       	jmp    c0015570 <blockTask(TaskState)>

c00089b2 <KeBeep(int, int, bool)>:
c00089b2:	56                   	push   esi
c00089b3:	53                   	push   ebx
c00089b4:	83 ec 10             	sub    esp,0x10
c00089b7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c3:	e8 ad fc 00 00       	call   c0018675 <HalMakeBeep(int)>
c00089c8:	83 c4 10             	add    esp,0x10
c00089cb:	89 f0                	mov    eax,esi
c00089cd:	84 c0                	test   al,al
c00089cf:	74 1e                	je     c00089ef <KeBeep(int, int, bool)+0x3d>
c00089d1:	83 ec 0c             	sub    esp,0xc
c00089d4:	6b db 0a             	imul   ebx,ebx,0xa
c00089d7:	53                   	push   ebx
c00089d8:	e8 bb cc 00 00       	call   c0015698 <milliTenthSleep(unsigned int)>
c00089dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e5:	83 c4 14             	add    esp,0x14
c00089e8:	5b                   	pop    ebx
c00089e9:	5e                   	pop    esi
c00089ea:	e9 86 fc 00 00       	jmp    c0018675 <HalMakeBeep(int)>
c00089ef:	68 e6 00 00 00       	push   0xe6
c00089f4:	53                   	push   ebx
c00089f5:	68 72 89 00 c0       	push   0xc0008972
c00089fa:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0008a00:	e8 5b c8 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	c3                   	ret    
c0008a0b:	90                   	nop

c0008a0c <KeLoadClockSettings()>:
c0008a0c:	57                   	push   edi
c0008a0d:	56                   	push   esi
c0008a0e:	53                   	push   ebx
c0008a0f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a15:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a1a:	68 68 17 02 c0       	push   0xc0021768
c0008a1f:	e8 30 3d 00 00       	call   c000c754 <CmOpen(char const*)>
c0008a24:	59                   	pop    ecx
c0008a25:	89 c3                	mov    ebx,eax
c0008a27:	5e                   	pop    esi
c0008a28:	68 8d 17 02 c0       	push   0xc002178d
c0008a2d:	50                   	push   eax
c0008a2e:	e8 21 49 00 00       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a33:	5f                   	pop    edi
c0008a34:	89 c6                	mov    esi,eax
c0008a36:	5a                   	pop    edx
c0008a37:	50                   	push   eax
c0008a38:	68 a2 17 02 c0       	push   0xc00217a2
c0008a3d:	e8 22 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	85 f6                	test   esi,esi
c0008a47:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a4b:	7e 0c                	jle    c0008a59 <KeLoadClockSettings()+0x4d>
c0008a4d:	52                   	push   edx
c0008a4e:	57                   	push   edi
c0008a4f:	56                   	push   esi
c0008a50:	53                   	push   ebx
c0008a51:	e8 6e 3e 00 00       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 ec 0c             	sub    esp,0xc
c0008a5c:	53                   	push   ebx
c0008a5d:	e8 10 3e 00 00       	call   c000c872 <CmClose(Reghive_Tag*)>
c0008a62:	83 c4 0c             	add    esp,0xc
c0008a65:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a6a:	50                   	push   eax
c0008a6b:	57                   	push   edi
c0008a6c:	68 b0 17 02 c0       	push   0xc00217b0
c0008a71:	e8 ee e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a76:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a7a:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a81:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	a8 fd                	test   al,0xfd
c0008a89:	75 50                	jne    c0008adb <KeLoadClockSettings()+0xcf>
c0008a8b:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a90:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a95:	83 fb 2e             	cmp    ebx,0x2e
c0008a98:	75 07                	jne    c0008aa1 <KeLoadClockSettings()+0x95>
c0008a9a:	b0 01                	mov    al,0x1
c0008a9c:	83 fa 35             	cmp    edx,0x35
c0008a9f:	74 0f                	je     c0008ab0 <KeLoadClockSettings()+0xa4>
c0008aa1:	31 c0                	xor    eax,eax
c0008aa3:	83 fa 2e             	cmp    edx,0x2e
c0008aa6:	75 08                	jne    c0008ab0 <KeLoadClockSettings()+0xa4>
c0008aa8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aad:	0f 94 c0             	sete   al
c0008ab0:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008aba:	83 e8 30             	sub    eax,0x30
c0008abd:	83 fa 2e             	cmp    edx,0x2e
c0008ac0:	75 07                	jne    c0008ac9 <KeLoadClockSettings()+0xbd>
c0008ac2:	6b c0 0a             	imul   eax,eax,0xa
c0008ac5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ac9:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008ace:	80 f9 2d             	cmp    cl,0x2d
c0008ad1:	75 19                	jne    c0008aec <KeLoadClockSettings()+0xe0>
c0008ad3:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad9:	eb 11                	jmp    c0008aec <KeLoadClockSettings()+0xe0>
c0008adb:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008ae2:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008aec:	50                   	push   eax
c0008aed:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af4:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af7:	50                   	push   eax
c0008af8:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afe:	68 c7 17 02 c0       	push   0xc00217c7
c0008b03:	e8 5c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b08:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0e:	5b                   	pop    ebx
c0008b0f:	5e                   	pop    esi
c0008b10:	5f                   	pop    edi
c0008b11:	c3                   	ret    

c0008b12 <Clock::Clock(char const*)>:
c0008b12:	83 ec 0c             	sub    esp,0xc
c0008b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b19:	83 ec 08             	sub    esp,0x8
c0008b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b20:	50                   	push   eax
c0008b21:	e8 7e 06 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008b26:	83 c4 10             	add    esp,0x10
c0008b29:	ba e0 17 02 c0       	mov    edx,0xc00217e0
c0008b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b32:	89 10                	mov    DWORD PTR [eax],edx
c0008b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b42:	90                   	nop
c0008b43:	83 c4 0c             	add    esp,0xc
c0008b46:	c3                   	ret    
c0008b47:	90                   	nop

c0008b48 <Clock::~Clock()>:
c0008b48:	83 ec 0c             	sub    esp,0xc
c0008b4b:	ba e0 17 02 c0       	mov    edx,0xc00217e0
c0008b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b54:	89 10                	mov    DWORD PTR [eax],edx
c0008b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b5a:	83 ec 0c             	sub    esp,0xc
c0008b5d:	50                   	push   eax
c0008b5e:	e8 e1 03 00 00       	call   c0008f44 <Device::~Device()>
c0008b63:	83 c4 10             	add    esp,0x10
c0008b66:	90                   	nop
c0008b67:	83 c4 0c             	add    esp,0xc
c0008b6a:	c3                   	ret    
c0008b6b:	90                   	nop

c0008b6c <Clock::~Clock()>:
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	83 ec 0c             	sub    esp,0xc
c0008b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b76:	e8 cd ff ff ff       	call   c0008b48 <Clock::~Clock()>
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	83 ec 08             	sub    esp,0x8
c0008b81:	68 58 01 00 00       	push   0x158
c0008b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b8a:	e8 71 3b 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	83 c4 0c             	add    esp,0xc
c0008b95:	c3                   	ret    

c0008b96 <Clock::timeInSecondsLocal()>:
c0008b96:	53                   	push   ebx
c0008b97:	83 ec 14             	sub    esp,0x14
c0008b9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ba0:	50                   	push   eax
c0008ba1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba4:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008bab:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb7:	89 cb                	mov    ebx,ecx
c0008bb9:	c1 fb 1f             	sar    ebx,0x1f
c0008bbc:	01 c8                	add    eax,ecx
c0008bbe:	11 da                	adc    edx,ebx
c0008bc0:	83 c4 10             	add    esp,0x10
c0008bc3:	31 c9                	xor    ecx,ecx
c0008bc5:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bcc:	74 05                	je     c0008bd3 <Clock::timeInSecondsLocal()+0x3d>
c0008bce:	b9 08 07 00 00       	mov    ecx,0x708
c0008bd3:	31 db                	xor    ebx,ebx
c0008bd5:	01 c8                	add    eax,ecx
c0008bd7:	11 da                	adc    edx,ebx
c0008bd9:	83 c4 08             	add    esp,0x8
c0008bdc:	5b                   	pop    ebx
c0008bdd:	c3                   	ret    

c0008bde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bde:	57                   	push   edi
c0008bdf:	56                   	push   esi
c0008be0:	53                   	push   ebx
c0008be1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008beb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008bef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bf2:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf9:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c05:	99                   	cdq    
c0008c06:	29 c6                	sub    esi,eax
c0008c08:	19 d7                	sbb    edi,edx
c0008c0a:	89 f0                	mov    eax,esi
c0008c0c:	89 fa                	mov    edx,edi
c0008c0e:	31 f6                	xor    esi,esi
c0008c10:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c17:	74 05                	je     c0008c1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c19:	be 08 07 00 00       	mov    esi,0x708
c0008c1e:	31 ff                	xor    edi,edi
c0008c20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c24:	29 f0                	sub    eax,esi
c0008c26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c2a:	19 fa                	sbb    edx,edi
c0008c2c:	89 d8                	mov    eax,ebx
c0008c2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c32:	5b                   	pop    ebx
c0008c33:	5e                   	pop    esi
c0008c34:	5f                   	pop    edi
c0008c35:	ff e0                	jmp    eax

c0008c37 <KeDatetimeToSeconds(datetime_t)>:
c0008c37:	55                   	push   ebp
c0008c38:	57                   	push   edi
c0008c39:	56                   	push   esi
c0008c3a:	53                   	push   ebx
c0008c3b:	83 ec 0c             	sub    esp,0xc
c0008c3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c42:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c46:	89 d6                	mov    esi,edx
c0008c48:	0f b6 c7             	movzx  eax,bh
c0008c4b:	c1 ee 10             	shr    esi,0x10
c0008c4e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c51:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c57:	0f b6 ce             	movzx  ecx,dh
c0008c5a:	89 df                	mov    edi,ebx
c0008c5c:	49                   	dec    ecx
c0008c5d:	c1 ef 10             	shr    edi,0x10
c0008c60:	0f b6 db             	movzx  ebx,bl
c0008c63:	89 f8                	mov    eax,edi
c0008c65:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c6b:	0f b6 f8             	movzx  edi,al
c0008c6e:	0f b6 d2             	movzx  edx,dl
c0008c71:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c75:	01 d8                	add    eax,ebx
c0008c77:	0f b7 de             	movzx  ebx,si
c0008c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c7d:	c1 f8 1f             	sar    eax,0x1f
c0008c80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c84:	0f b6 c1             	movzx  eax,cl
c0008c87:	8b 0c 85 20 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde7e0]
c0008c8e:	83 f8 01             	cmp    eax,0x1
c0008c91:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008c95:	76 27                	jbe    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c97:	83 e6 03             	and    esi,0x3
c0008c9a:	75 22                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c9c:	31 d2                	xor    edx,edx
c0008c9e:	be 64 00 00 00       	mov    esi,0x64
c0008ca3:	89 d8                	mov    eax,ebx
c0008ca5:	f7 f6                	div    esi
c0008ca7:	85 d2                	test   edx,edx
c0008ca9:	75 12                	jne    c0008cbd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008cab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb1:	be 90 01 00 00       	mov    esi,0x190
c0008cb6:	99                   	cdq    
c0008cb7:	f7 fe                	idiv   esi
c0008cb9:	85 d2                	test   edx,edx
c0008cbb:	75 01                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbd:	41                   	inc    ecx
c0008cbe:	83 fb 46             	cmp    ebx,0x46
c0008cc1:	76 48                	jbe    c0008d0b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008cc3:	be 46 00 00 00       	mov    esi,0x46
c0008cc8:	bf 64 00 00 00       	mov    edi,0x64
c0008ccd:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cd7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cdd:	75 23                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cdf:	89 f0                	mov    eax,esi
c0008ce1:	99                   	cdq    
c0008ce2:	f7 ff                	idiv   edi
c0008ce4:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce9:	85 d2                	test   edx,edx
c0008ceb:	75 15                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008ced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf3:	99                   	cdq    
c0008cf4:	f7 fd                	idiv   ebp
c0008cf6:	83 fa 01             	cmp    edx,0x1
c0008cf9:	19 c0                	sbb    eax,eax
c0008cfb:	f7 d0                	not    eax
c0008cfd:	05 6e 01 00 00       	add    eax,0x16e
c0008d02:	01 c1                	add    ecx,eax
c0008d04:	46                   	inc    esi
c0008d05:	39 de                	cmp    esi,ebx
c0008d07:	7c c9                	jl     c0008cd2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d09:	eb 34                	jmp    c0008d3f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d0b:	74 32                	je     c0008d3f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d0d:	b8 45 00 00 00       	mov    eax,0x45
c0008d12:	89 c2                	mov    edx,eax
c0008d14:	83 e2 03             	and    edx,0x3
c0008d17:	39 d8                	cmp    eax,ebx
c0008d19:	7e 0f                	jle    c0008d2a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d1b:	83 fa 01             	cmp    edx,0x1
c0008d1e:	19 d2                	sbb    edx,edx
c0008d20:	48                   	dec    eax
c0008d21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d28:	eb e8                	jmp    c0008d12 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d2a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d2f:	85 d2                	test   edx,edx
c0008d31:	75 0a                	jne    c0008d3d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d33:	83 fb 01             	cmp    ebx,0x1
c0008d36:	19 c0                	sbb    eax,eax
c0008d38:	05 6e 01 00 00       	add    eax,0x16e
c0008d3d:	29 c1                	sub    ecx,eax
c0008d3f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d44:	f7 e9                	imul   ecx
c0008d46:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d4d:	83 c4 0c             	add    esp,0xc
c0008d50:	5b                   	pop    ebx
c0008d51:	5e                   	pop    esi
c0008d52:	5f                   	pop    edi
c0008d53:	5d                   	pop    ebp
c0008d54:	c3                   	ret    
c0008d55:	90                   	nop

c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d56:	57                   	push   edi
c0008d57:	56                   	push   esi
c0008d58:	53                   	push   ebx
c0008d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	e8 c8 fe ff ff       	call   c0008c37 <KeDatetimeToSeconds(datetime_t)>
c0008d6f:	59                   	pop    ecx
c0008d70:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d77:	5b                   	pop    ebx
c0008d78:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d84:	89 cb                	mov    ebx,ecx
c0008d86:	c1 fb 1f             	sar    ebx,0x1f
c0008d89:	29 c8                	sub    eax,ecx
c0008d8b:	19 da                	sbb    edx,ebx
c0008d8d:	31 c9                	xor    ecx,ecx
c0008d8f:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d96:	74 05                	je     c0008d9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d98:	b9 08 07 00 00       	mov    ecx,0x708
c0008d9d:	31 db                	xor    ebx,ebx
c0008d9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da3:	29 c8                	sub    eax,ecx
c0008da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da9:	19 da                	sbb    edx,ebx
c0008dab:	89 f8                	mov    eax,edi
c0008dad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db1:	5b                   	pop    ebx
c0008db2:	5e                   	pop    esi
c0008db3:	5f                   	pop    edi
c0008db4:	ff e0                	jmp    eax

c0008db6 <KeSecondsToDatetime(unsigned long long)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 1c             	sub    esp,0x1c
c0008dbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc9:	6a 00                	push   0x0
c0008dcb:	68 80 51 01 00       	push   0x15180
c0008dd0:	55                   	push   ebp
c0008dd1:	57                   	push   edi
c0008dd2:	e8 8d 6f 01 00       	call   c001fd64 <__udivdi3>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de4:	6a 00                	push   0x0
c0008de6:	68 80 51 01 00       	push   0x15180
c0008deb:	55                   	push   ebp
c0008dec:	57                   	push   edi
c0008ded:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df2:	e8 6d 70 01 00       	call   c001fe64 <__umoddi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	99                   	cdq    
c0008dfb:	f7 ff                	idiv   edi
c0008dfd:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e05:	89 d0                	mov    eax,edx
c0008e07:	99                   	cdq    
c0008e08:	f7 ff                	idiv   edi
c0008e0a:	85 db                	test   ebx,ebx
c0008e0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e12:	79 11                	jns    c0008e25 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e23:	eb 07                	jmp    c0008e2c <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2a:	89 d8                	mov    eax,ebx
c0008e2c:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e31:	99                   	cdq    
c0008e32:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e37:	f7 f9                	idiv   ecx
c0008e39:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e42:	31 d2                	xor    edx,edx
c0008e44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e4c:	01 c3                	add    ebx,eax
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	f7 f1                	div    ecx
c0008e52:	31 d2                	xor    edx,edx
c0008e54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e57:	89 d8                	mov    eax,ebx
c0008e59:	f7 f7                	div    edi
c0008e5b:	31 d2                	xor    edx,edx
c0008e5d:	29 c1                	sub    ecx,eax
c0008e5f:	89 d8                	mov    eax,ebx
c0008e61:	f7 f5                	div    ebp
c0008e63:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e68:	29 c1                	sub    ecx,eax
c0008e6a:	31 d2                	xor    edx,edx
c0008e6c:	89 c8                	mov    eax,ecx
c0008e6e:	f7 f5                	div    ebp
c0008e70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e79:	31 d2                	xor    edx,edx
c0008e7b:	89 c8                	mov    eax,ecx
c0008e7d:	f7 f5                	div    ebp
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	01 c3                	add    ebx,eax
c0008e83:	89 c8                	mov    eax,ecx
c0008e85:	f7 f7                	div    edi
c0008e87:	bf 99 00 00 00       	mov    edi,0x99
c0008e8c:	29 c3                	sub    ebx,eax
c0008e8e:	31 d2                	xor    edx,edx
c0008e90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e98:	29 c3                	sub    ebx,eax
c0008e9a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008e9d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ea0:	bb 05 00 00 00       	mov    ebx,0x5
c0008ea5:	83 c1 02             	add    ecx,0x2
c0008ea8:	89 c8                	mov    eax,ecx
c0008eaa:	f7 f7                	div    edi
c0008eac:	31 d2                	xor    edx,edx
c0008eae:	89 c7                	mov    edi,eax
c0008eb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb6:	83 c0 02             	add    eax,0x2
c0008eb9:	f7 f3                	div    ebx
c0008ebb:	89 eb                	mov    ebx,ebp
c0008ebd:	29 c3                	sub    ebx,eax
c0008ebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec7:	19 c0                	sbb    eax,eax
c0008ec9:	31 d2                	xor    edx,edx
c0008ecb:	83 e0 0c             	and    eax,0xc
c0008ece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008eda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ede:	83 f9 01             	cmp    ecx,0x1
c0008ee1:	0f 96 c2             	setbe  dl
c0008ee4:	41                   	inc    ecx
c0008ee5:	01 d0                	add    eax,edx
c0008ee7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008eea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eee:	83 c4 1c             	add    esp,0x1c
c0008ef1:	89 f0                	mov    eax,esi
c0008ef3:	5b                   	pop    ebx
c0008ef4:	5e                   	pop    esi
c0008ef5:	5f                   	pop    edi
c0008ef6:	5d                   	pop    ebp
c0008ef7:	c2 04 00             	ret    0x4

c0008efa <Clock::timeInDatetimeLocal()>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 14             	sub    esp,0x14
c0008efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f06:	e8 8b fc ff ff       	call   c0008b96 <Clock::timeInSecondsLocal()>
c0008f0b:	83 c4 0c             	add    esp,0xc
c0008f0e:	52                   	push   edx
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 a0 fe ff ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0008f16:	89 d8                	mov    eax,ebx
c0008f18:	83 c4 14             	add    esp,0x14
c0008f1b:	5b                   	pop    ebx
c0008f1c:	c2 04 00             	ret    0x4
c0008f1f:	90                   	nop

c0008f20 <Device::hibernate()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::wake()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::detect()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::disableLegacy()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::powerSaving(PowerSavingLevel)>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::close(int, int, void*)>:
c0008f2a:	31 c0                	xor    eax,eax
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::detect()>:
c0008f2e:	c3                   	ret    
c0008f2f:	90                   	nop

c0008f30 <DriverlessDevice::open(int, int, void*)>:
c0008f30:	83 ec 18             	sub    esp,0x18
c0008f33:	68 50 18 02 c0       	push   0xc0021850
c0008f38:	e8 85 5d 00 00       	call   c000ecc2 <KePanic(char const*)>
c0008f3d:	83 c8 ff             	or     eax,0xffffffff
c0008f40:	83 c4 1c             	add    esp,0x1c
c0008f43:	c3                   	ret    

c0008f44 <Device::~Device()>:
c0008f44:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c0008f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f4d:	89 10                	mov    DWORD PTR [eax],edx
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <Device::~Device()>:
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f59:	e8 e6 ff ff ff       	call   c0008f44 <Device::~Device()>
c0008f5e:	83 c4 04             	add    esp,0x4
c0008f61:	83 ec 08             	sub    esp,0x8
c0008f64:	68 58 01 00 00       	push   0x158
c0008f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f6d:	e8 8e 37 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0008f72:	83 c4 10             	add    esp,0x10
c0008f75:	83 c4 0c             	add    esp,0xc
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <Device::findAndLoadDriver()>:
c0008f7a:	c7 44 24 04 6e 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002186e
c0008f82:	e9 dd df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008f87:	90                   	nop

c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f88:	57                   	push   edi
c0008f89:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8e:	56                   	push   esi
c0008f8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f93:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa7:	fc                   	cld    
c0008fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008faa:	5e                   	pop    esi
c0008fab:	5f                   	pop    edi
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Device::preOpenACPI(void*, char*, char*)>:
c0008fae:	57                   	push   edi
c0008faf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb4:	56                   	push   esi
c0008fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fbd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fc7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fcd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd9:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fde:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fea:	5e                   	pop    esi
c0008feb:	5f                   	pop    edi
c0008fec:	c3                   	ret    
c0008fed:	90                   	nop

c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fee:	53                   	push   ebx
c0008fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ff3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fff:	0f b6 c0             	movzx  eax,al
c0009002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009012:	5b                   	pop    ebx
c0009013:	e9 25 fa 00 00       	jmp    c0018a3d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009018 <Device::getParent()>:
c0009018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000901c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009022:	c3                   	ret    
c0009023:	90                   	nop

c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000902c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009031:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000903d:	e9 5d fb 00 00       	jmp    c0018b9f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009042 <Device::addChild(Device*)>:
c0009042:	53                   	push   ebx
c0009043:	83 ec 08             	sub    esp,0x8
c0009046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000905c:	85 d2                	test   edx,edx
c000905e:	74 04                	je     c0009064 <Device::addChild(Device*)+0x22>
c0009060:	89 d3                	mov    ebx,edx
c0009062:	eb f6                	jmp    c000905a <Device::addChild(Device*)+0x18>
c0009064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009067:	83 ec 0c             	sub    esp,0xc
c000906a:	6a 08                	push   0x8
c000906c:	e8 0a 59 00 00       	call   c000e97b <malloc>
c0009071:	89 03                	mov    DWORD PTR [ebx],eax
c0009073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009080:	83 c4 18             	add    esp,0x18
c0009083:	5b                   	pop    ebx
c0009084:	c3                   	ret    
c0009085:	90                   	nop

c0009086 <Device::removeAllChildren()>:
c0009086:	56                   	push   esi
c0009087:	53                   	push   ebx
c0009088:	52                   	push   edx
c0009089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000908d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009096:	74 17                	je     c00090af <Device::removeAllChildren()+0x29>
c0009098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909b:	85 c0                	test   eax,eax
c000909d:	74 0c                	je     c00090ab <Device::removeAllChildren()+0x25>
c000909f:	83 ec 0c             	sub    esp,0xc
c00090a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a4:	50                   	push   eax
c00090a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090ad:	eb e4                	jmp    c0009093 <Device::removeAllChildren()+0xd>
c00090af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c8:	58                   	pop    eax
c00090c9:	5b                   	pop    ebx
c00090ca:	5e                   	pop    esi
c00090cb:	c3                   	ret    

c00090cc <Device::hibernateAll()>:
c00090cc:	53                   	push   ebx
c00090cd:	83 ec 14             	sub    esp,0x14
c00090d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d6:	53                   	push   ebx
c00090d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 0f                	je     c00090f7 <Device::hibernateAll()+0x2b>
c00090e8:	83 ec 0c             	sub    esp,0xc
c00090eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ee:	e8 d9 ff ff ff       	call   c00090cc <Device::hibernateAll()>
c00090f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f5:	eb e9                	jmp    c00090e0 <Device::hibernateAll()+0x14>
c00090f7:	83 c4 08             	add    esp,0x8
c00090fa:	5b                   	pop    ebx
c00090fb:	c3                   	ret    

c00090fc <Device::wakeAll()>:
c00090fc:	53                   	push   ebx
c00090fd:	83 ec 14             	sub    esp,0x14
c0009100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009106:	53                   	push   ebx
c0009107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009116:	74 0f                	je     c0009127 <Device::wakeAll()+0x2b>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 d9 ff ff ff       	call   c00090fc <Device::wakeAll()>
c0009123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009125:	eb e9                	jmp    c0009110 <Device::wakeAll()+0x14>
c0009127:	83 c4 08             	add    esp,0x8
c000912a:	5b                   	pop    ebx
c000912b:	c3                   	ret    

c000912c <Device::detectAll()>:
c000912c:	53                   	push   ebx
c000912d:	83 ec 14             	sub    esp,0x14
c0009130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009134:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009136:	53                   	push   ebx
c0009137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009140:	83 c4 10             	add    esp,0x10
c0009143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009146:	74 0f                	je     c0009157 <Device::detectAll()+0x2b>
c0009148:	83 ec 0c             	sub    esp,0xc
c000914b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914e:	e8 d9 ff ff ff       	call   c000912c <Device::detectAll()>
c0009153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009155:	eb e9                	jmp    c0009140 <Device::detectAll()+0x14>
c0009157:	83 c4 08             	add    esp,0x8
c000915a:	5b                   	pop    ebx
c000915b:	c3                   	ret    

c000915c <Device::disableLegacyAll()>:
c000915c:	c3                   	ret    
c000915d:	90                   	nop

c000915e <Device::loadDriversForAll()>:
c000915e:	c3                   	ret    
c000915f:	90                   	nop

c0009160 <Device::powerSavingAll(PowerSavingLevel)>:
c0009160:	56                   	push   esi
c0009161:	53                   	push   ebx
c0009162:	83 ec 0c             	sub    esp,0xc
c0009165:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009169:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000916d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916f:	56                   	push   esi
c0009170:	53                   	push   ebx
c0009171:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009180:	74 0f                	je     c0009191 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009182:	52                   	push   edx
c0009183:	52                   	push   edx
c0009184:	56                   	push   esi
c0009185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009188:	e8 d3 ff ff ff       	call   c0009160 <Device::powerSavingAll(PowerSavingLevel)>
c000918d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918f:	eb e9                	jmp    c000917a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009191:	58                   	pop    eax
c0009192:	5b                   	pop    ebx
c0009193:	5e                   	pop    esi
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <Device::setName(char const*)>:
c0009196:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919e:	e9 9d 74 ff ff       	jmp    c0000640 <strcpy>
c00091a3:	90                   	nop

c00091a4 <Device::Device(char const*)>:
c00091a4:	83 ec 1c             	sub    esp,0x1c
c00091a7:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c00091ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b0:	89 10                	mov    DWORD PTR [eax],edx
c00091b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ea:	83 ec 08             	sub    esp,0x8
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	e8 9c ff ff ff       	call   c0009196 <Device::setName(char const*)>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009205:	83 ec 0c             	sub    esp,0xc
c0009208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000920c:	e8 6a 57 00 00       	call   c000e97b <malloc>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009225:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000924c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009250:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009266:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009282:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000928c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009290:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929a:	90                   	nop
c000929b:	83 c4 1c             	add    esp,0x1c
c000929e:	c3                   	ret    
c000929f:	90                   	nop

c00092a0 <Device::getName()>:
c00092a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a4:	05 d0 00 00 00       	add    eax,0xd0
c00092a9:	c3                   	ret    

c00092aa <Device::closeAll()>:
c00092aa:	53                   	push   ebx
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b2:	53                   	push   ebx
c00092b3:	e8 e8 ff ff ff       	call   c00092a0 <Device::getName()>
c00092b8:	52                   	push   edx
c00092b9:	50                   	push   eax
c00092ba:	68 a8 18 02 c0       	push   0xc00218a8
c00092bf:	e8 a0 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c6:	6a 00                	push   0x0
c00092c8:	6a 00                	push   0x0
c00092ca:	6a 00                	push   0x0
c00092cc:	53                   	push   ebx
c00092cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d6:	83 c4 20             	add    esp,0x20
c00092d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092dc:	74 12                	je     c00092f0 <Device::closeAll()+0x46>
c00092de:	83 ec 0c             	sub    esp,0xc
c00092e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e4:	e8 c1 ff ff ff       	call   c00092aa <Device::closeAll()>
c00092e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092eb:	83 c4 10             	add    esp,0x10
c00092ee:	eb e9                	jmp    c00092d9 <Device::closeAll()+0x2f>
c00092f0:	83 c4 08             	add    esp,0x8
c00092f3:	5b                   	pop    ebx
c00092f4:	c3                   	ret    
c00092f5:	90                   	nop

c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f6:	83 ec 0c             	sub    esp,0xc
c00092f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092fd:	83 ec 08             	sub    esp,0x8
c0009300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009304:	50                   	push   eax
c0009305:	e8 9a fe ff ff       	call   c00091a4 <Device::Device(char const*)>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	ba 20 19 02 c0       	mov    edx,0xc0021920
c0009312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009316:	89 10                	mov    DWORD PTR [eax],edx
c0009318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009326:	90                   	nop
c0009327:	83 c4 0c             	add    esp,0xc
c000932a:	c3                   	ret    
c000932b:	90                   	nop

c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000932c:	57                   	push   edi
c000932d:	56                   	push   esi
c000932e:	53                   	push   ebx
c000932f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009337:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009341:	75 0c                	jne    c000934f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009343:	52                   	push   edx
c0009344:	52                   	push   edx
c0009345:	53                   	push   ebx
c0009346:	56                   	push   esi
c0009347:	e8 90 6c 01 00       	call   c001ffdc <LinkedList<Device>::addElement(Device*)>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009355:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009358:	74 12                	je     c000936c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935a:	50                   	push   eax
c000935b:	57                   	push   edi
c000935c:	56                   	push   esi
c000935d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009360:	e8 c7 ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009365:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	eb e9                	jmp    c0009355 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000936c:	5b                   	pop    ebx
c000936d:	5e                   	pop    esi
c000936e:	5f                   	pop    edi
c000936f:	c3                   	ret    

c0009370 <getDevicesOfType(DeviceType)>:
c0009370:	53                   	push   ebx
c0009371:	83 ec 14             	sub    esp,0x14
c0009374:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009378:	53                   	push   ebx
c0009379:	e8 3a 6d 01 00       	call   c00200b8 <LinkedList<Device>::LinkedList()>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009385:	53                   	push   ebx
c0009386:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000938c:	e8 9b ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009391:	89 d8                	mov    eax,ebx
c0009393:	83 c4 18             	add    esp,0x18
c0009396:	5b                   	pop    ebx
c0009397:	c2 04 00             	ret    0x4
c000939a:	66 90                	xchg   ax,ax

c000939c <HardDiskController::HardDiskController(char const*)>:
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a3:	83 ec 08             	sub    esp,0x8
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	50                   	push   eax
c00093ab:	e8 f4 fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c00093b0:	83 c4 10             	add    esp,0x10
c00093b3:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c00093b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bc:	89 10                	mov    DWORD PTR [eax],edx
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093cc:	90                   	nop
c00093cd:	83 c4 0c             	add    esp,0xc
c00093d0:	c3                   	ret    
c00093d1:	90                   	nop
c00093d2:	66 90                	xchg   ax,ax

c00093d4 <HardDiskController::~HardDiskController()>:
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	83 ec 0c             	sub    esp,0xc
c00093e9:	50                   	push   eax
c00093ea:	e8 55 fb ff ff       	call   c0008f44 <Device::~Device()>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	90                   	nop
c00093f3:	83 c4 0c             	add    esp,0xc
c00093f6:	c3                   	ret    
c00093f7:	90                   	nop

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	83 ec 0c             	sub    esp,0xc
c00093fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009402:	e8 cd ff ff ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	68 58 01 00 00       	push   0x158
c0009412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009416:	e8 e5 32 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 c4 0c             	add    esp,0xc
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::eject()>:
c0009422:	83 c8 ff             	or     eax,0xffffffff
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009426:	83 ec 0c             	sub    esp,0xc
c0009429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000942d:	83 ec 08             	sub    esp,0x8
c0009430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009434:	50                   	push   eax
c0009435:	e8 6a fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c000943a:	83 c4 10             	add    esp,0x10
c000943d:	ba 78 19 02 c0       	mov    edx,0xc0021978
c0009442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009446:	89 10                	mov    DWORD PTR [eax],edx
c0009448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009457:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009474:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009488:	90                   	nop
c0009489:	83 c4 0c             	add    esp,0xc
c000948c:	c3                   	ret    
c000948d:	90                   	nop

c000948e <PhysicalDisk::startCache()>:
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 10             	sub    esp,0x10
c0009493:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009497:	6a 44                	push   0x44
c0009499:	e8 dd 54 00 00       	call   c000e97b <malloc>
c000949e:	89 c6                	mov    esi,eax
c00094a0:	58                   	pop    eax
c00094a1:	5a                   	pop    edx
c00094a2:	53                   	push   ebx
c00094a3:	56                   	push   esi
c00094a4:	e8 0f 14 00 00       	call   c000a8b8 <VCache::VCache(PhysicalDisk*)>
c00094a9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094af:	83 c4 14             	add    esp,0x14
c00094b2:	5b                   	pop    ebx
c00094b3:	5e                   	pop    esi
c00094b4:	c3                   	ret    
c00094b5:	90                   	nop

c00094b6 <PhysicalDisk::~PhysicalDisk()>:
c00094b6:	83 ec 0c             	sub    esp,0xc
c00094b9:	ba 78 19 02 c0       	mov    edx,0xc0021978
c00094be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c2:	89 10                	mov    DWORD PTR [eax],edx
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	50                   	push   eax
c00094cc:	e8 73 fa ff ff       	call   c0008f44 <Device::~Device()>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	90                   	nop
c00094d5:	83 c4 0c             	add    esp,0xc
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e4:	e8 cd ff ff ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00094e9:	83 c4 10             	add    esp,0x10
c00094ec:	83 ec 08             	sub    esp,0x8
c00094ef:	68 6c 01 00 00       	push   0x16c
c00094f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f8:	e8 03 32 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c00094fd:	83 c4 10             	add    esp,0x10
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	c3                   	ret    

c0009504 <startGUI(void*)>:
c0009504:	55                   	push   ebp
c0009505:	89 e5                	mov    ebp,esp
c0009507:	53                   	push   ebx
c0009508:	83 ec 04             	sub    esp,0x4
c000950b:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009513:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009518:	85 c0                	test   eax,eax
c000951a:	75 01                	jne    c000951d <startGUI(void*)+0x19>
c000951c:	fb                   	sti    
c000951d:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009523:	83 ec 08             	sub    esp,0x8
c0009526:	6a 01                	push   0x1
c0009528:	68 a8 19 02 c0       	push   0xc00219a8
c000952d:	e8 9a b4 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c0009532:	83 c4 10             	add    esp,0x10
c0009535:	83 ec 08             	sub    esp,0x8
c0009538:	53                   	push   ebx
c0009539:	50                   	push   eax
c000953a:	e8 df b6 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009548:	83 ec 08             	sub    esp,0x8
c000954b:	6a 01                	push   0x1
c000954d:	68 c2 19 02 c0       	push   0xc00219c2
c0009552:	e8 75 b4 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c0009557:	83 c4 10             	add    esp,0x10
c000955a:	83 ec 08             	sub    esp,0x8
c000955d:	53                   	push   ebx
c000955e:	50                   	push   eax
c000955f:	e8 ba b6 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c0009564:	83 c4 10             	add    esp,0x10
c0009567:	eb fe                	jmp    c0009567 <startGUI(void*)+0x63>

c0009569 <startGUIVESA(void*)>:
c0009569:	55                   	push   ebp
c000956a:	89 e5                	mov    ebp,esp
c000956c:	53                   	push   ebx
c000956d:	83 ec 04             	sub    esp,0x4
c0009570:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009578:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000957d:	85 c0                	test   eax,eax
c000957f:	75 01                	jne    c0009582 <startGUIVESA(void*)+0x19>
c0009581:	fb                   	sti    
c0009582:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009588:	83 ec 08             	sub    esp,0x8
c000958b:	6a 01                	push   0x1
c000958d:	68 e0 19 02 c0       	push   0xc00219e0
c0009592:	e8 35 b4 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c0009597:	83 c4 10             	add    esp,0x10
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	53                   	push   ebx
c000959e:	50                   	push   eax
c000959f:	e8 7a b6 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c00095a4:	83 c4 10             	add    esp,0x10
c00095a7:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095ad:	83 ec 08             	sub    esp,0x8
c00095b0:	6a 01                	push   0x1
c00095b2:	68 c2 19 02 c0       	push   0xc00219c2
c00095b7:	e8 10 b4 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c00095bc:	83 c4 10             	add    esp,0x10
c00095bf:	83 ec 08             	sub    esp,0x8
c00095c2:	53                   	push   ebx
c00095c3:	50                   	push   eax
c00095c4:	e8 55 b6 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c00095c9:	83 c4 10             	add    esp,0x10
c00095cc:	eb fe                	jmp    c00095cc <startGUIVESA(void*)+0x63>

c00095ce <sendKeyToTerminal(unsigned char)>:
c00095ce:	55                   	push   ebp
c00095cf:	89 e5                	mov    ebp,esp
c00095d1:	83 ec 28             	sub    esp,0x28
c00095d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095da:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095df:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e3:	83 ec 08             	sub    esp,0x8
c00095e6:	52                   	push   edx
c00095e7:	50                   	push   eax
c00095e8:	e8 79 81 00 00       	call   c0011766 <VgaText::receiveKey(unsigned char)>
c00095ed:	83 c4 10             	add    esp,0x10
c00095f0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095f4:	83 f8 0a             	cmp    eax,0xa
c00095f7:	74 16                	je     c000960f <sendKeyToTerminal(unsigned char)+0x41>
c00095f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fd:	83 f8 03             	cmp    eax,0x3
c0009600:	74 0d                	je     c000960f <sendKeyToTerminal(unsigned char)+0x41>
c0009602:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009606:	83 f8 1c             	cmp    eax,0x1c
c0009609:	0f 85 92 00 00 00    	jne    c00096a1 <sendKeyToTerminal(unsigned char)+0xd3>
c000960f:	fa                   	cli    
c0009610:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009615:	83 c0 01             	add    eax,0x1
c0009618:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000961d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009622:	83 c0 01             	add    eax,0x1
c0009625:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000962a:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c000962f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009632:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c000963c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009640:	74 1f                	je     c0009661 <sendKeyToTerminal(unsigned char)+0x93>
c0009642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009645:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009648:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000964b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000964e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009651:	83 ec 0c             	sub    esp,0xc
c0009654:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009657:	e8 64 c1 00 00       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	eb db                	jmp    c000963c <sendKeyToTerminal(unsigned char)+0x6e>
c0009661:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009666:	83 e8 01             	sub    eax,0x1
c0009669:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000966e:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009673:	85 c0                	test   eax,eax
c0009675:	75 18                	jne    c000968f <sendKeyToTerminal(unsigned char)+0xc1>
c0009677:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000967c:	85 c0                	test   eax,eax
c000967e:	74 0f                	je     c000968f <sendKeyToTerminal(unsigned char)+0xc1>
c0009680:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000968a:	e8 21 be 00 00       	call   c00154b0 <schedule()>
c000968f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009697:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969c:	85 c0                	test   eax,eax
c000969e:	75 01                	jne    c00096a1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096a0:	fb                   	sti    
c00096a1:	90                   	nop
c00096a2:	c9                   	leave  
c00096a3:	c3                   	ret    

c00096a4 <sendKeyboardToken(KeyboardToken)>:
c00096a4:	55                   	push   ebp
c00096a5:	89 e5                	mov    ebp,esp
c00096a7:	83 ec 18             	sub    esp,0x18
c00096aa:	e8 33 5f 00 00       	call   c000f5e2 <KeUserIOReceived()>
c00096af:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b5:	0f b7 c0             	movzx  eax,ax
c00096b8:	83 f2 01             	xor    edx,0x1
c00096bb:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096c1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096c6:	85 c0                	test   eax,eax
c00096c8:	74 24                	je     c00096ee <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ca:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c00096d0:	83 ec 04             	sub    esp,0x4
c00096d3:	68 40 93 02 c0       	push   0xc0029340
c00096d8:	83 ec 08             	sub    esp,0x8
c00096db:	89 e2                	mov    edx,esp
c00096dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e0:	89 02                	mov    DWORD PTR [edx],eax
c00096e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00096e5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00096e9:	ff d1                	call   ecx
c00096eb:	83 c4 10             	add    esp,0x10
c00096ee:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096f2:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00096f5:	0f b6 c0             	movzx  eax,al
c00096f8:	85 c0                	test   eax,eax
c00096fa:	0f 84 da 00 00 00    	je     c00097da <sendKeyboardToken(KeyboardToken)+0x136>
c0009700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009703:	0f b7 c0             	movzx  eax,ax
c0009706:	3d 18 03 00 00       	cmp    eax,0x318
c000970b:	75 06                	jne    c0009713 <sendKeyboardToken(KeyboardToken)+0x6f>
c000970d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009716:	0f b7 c0             	movzx  eax,ax
c0009719:	3d 19 03 00 00       	cmp    eax,0x319
c000971e:	75 06                	jne    c0009726 <sendKeyboardToken(KeyboardToken)+0x82>
c0009720:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009729:	0f b7 c0             	movzx  eax,ax
c000972c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009731:	75 06                	jne    c0009739 <sendKeyboardToken(KeyboardToken)+0x95>
c0009733:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000973c:	0f b7 c0             	movzx  eax,ax
c000973f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009744:	75 06                	jne    c000974c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009746:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000974c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974f:	0f b7 c0             	movzx  eax,ax
c0009752:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009757:	75 06                	jne    c000975f <sendKeyboardToken(KeyboardToken)+0xbb>
c0009759:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000975f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009762:	0f b7 c0             	movzx  eax,ax
c0009765:	3d 1d 03 00 00       	cmp    eax,0x31d
c000976a:	75 06                	jne    c0009772 <sendKeyboardToken(KeyboardToken)+0xce>
c000976c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009775:	0f b7 c0             	movzx  eax,ax
c0009778:	3d 1e 03 00 00       	cmp    eax,0x31e
c000977d:	75 06                	jne    c0009785 <sendKeyboardToken(KeyboardToken)+0xe1>
c000977f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009788:	0f b7 c0             	movzx  eax,ax
c000978b:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009790:	75 06                	jne    c0009798 <sendKeyboardToken(KeyboardToken)+0xf4>
c0009792:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0009798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979b:	0f b7 c0             	movzx  eax,ax
c000979e:	3d 20 03 00 00       	cmp    eax,0x320
c00097a3:	75 06                	jne    c00097ab <sendKeyboardToken(KeyboardToken)+0x107>
c00097a5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ae:	0f b7 c0             	movzx  eax,ax
c00097b1:	3d 21 03 00 00       	cmp    eax,0x321
c00097b6:	75 06                	jne    c00097be <sendKeyboardToken(KeyboardToken)+0x11a>
c00097b8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c1:	0f b7 c0             	movzx  eax,ax
c00097c4:	3d 22 03 00 00       	cmp    eax,0x322
c00097c9:	0f 85 f1 00 00 00    	jne    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097cf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097d5:	e9 e6 00 00 00       	jmp    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097dd:	0f b7 c0             	movzx  eax,ax
c00097e0:	3d 18 03 00 00       	cmp    eax,0x318
c00097e5:	75 0a                	jne    c00097f1 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097e7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097f4:	0f b7 c0             	movzx  eax,ax
c00097f7:	3d 19 03 00 00       	cmp    eax,0x319
c00097fc:	75 0a                	jne    c0009808 <sendKeyboardToken(KeyboardToken)+0x164>
c00097fe:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009804:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000980b:	0f b7 c0             	movzx  eax,ax
c000980e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009813:	75 0a                	jne    c000981f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009815:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000981b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000981f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009822:	0f b7 c0             	movzx  eax,ax
c0009825:	3d 1b 03 00 00       	cmp    eax,0x31b
c000982a:	75 0a                	jne    c0009836 <sendKeyboardToken(KeyboardToken)+0x192>
c000982c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009832:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009839:	0f b7 c0             	movzx  eax,ax
c000983c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009841:	75 0a                	jne    c000984d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009843:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009849:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000984d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009850:	0f b7 c0             	movzx  eax,ax
c0009853:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009858:	75 0a                	jne    c0009864 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000985a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009860:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009867:	0f b7 c0             	movzx  eax,ax
c000986a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000986f:	75 0a                	jne    c000987b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009871:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009877:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000987b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000987e:	0f b7 c0             	movzx  eax,ax
c0009881:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009886:	75 0a                	jne    c0009892 <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009888:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000988e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009895:	0f b7 c0             	movzx  eax,ax
c0009898:	3d 20 03 00 00       	cmp    eax,0x320
c000989d:	75 0a                	jne    c00098a9 <sendKeyboardToken(KeyboardToken)+0x205>
c000989f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ac:	0f b7 c0             	movzx  eax,ax
c00098af:	3d 21 03 00 00       	cmp    eax,0x321
c00098b4:	75 0a                	jne    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098b6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098c3:	0f b7 c0             	movzx  eax,ax
c00098c6:	3d 00 02 00 00       	cmp    eax,0x200
c00098cb:	75 2f                	jne    c00098fc <sendKeyboardToken(KeyboardToken)+0x258>
c00098cd:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098d2:	83 f0 01             	xor    eax,0x1
c00098d5:	0f b6 c0             	movzx  eax,al
c00098d8:	85 c0                	test   eax,eax
c00098da:	74 20                	je     c00098fc <sendKeyboardToken(KeyboardToken)+0x258>
c00098dc:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098e1:	6a 01                	push   0x1
c00098e3:	6a 00                	push   0x0
c00098e5:	68 04 95 00 c0       	push   0xc0009504
c00098ea:	50                   	push   eax
c00098eb:	e8 70 b9 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c00098f0:	83 c4 10             	add    esp,0x10
c00098f3:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c00098fa:	eb 3a                	jmp    c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c00098fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ff:	0f b7 c0             	movzx  eax,ax
c0009902:	3d 01 02 00 00       	cmp    eax,0x201
c0009907:	75 2d                	jne    c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c0009909:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c000990e:	83 f0 01             	xor    eax,0x1
c0009911:	0f b6 c0             	movzx  eax,al
c0009914:	85 c0                	test   eax,eax
c0009916:	74 1e                	je     c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c0009918:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000991d:	6a 01                	push   0x1
c000991f:	6a 00                	push   0x0
c0009921:	68 69 95 00 c0       	push   0xc0009569
c0009926:	50                   	push   eax
c0009927:	e8 34 b9 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c000992c:	83 c4 10             	add    esp,0x10
c000992f:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009939:	0f b7 c0             	movzx  eax,ax
c000993c:	3d 25 03 00 00       	cmp    eax,0x325
c0009941:	75 06                	jne    c0009949 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009943:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994c:	0f b7 c0             	movzx  eax,ax
c000994f:	3d 24 03 00 00       	cmp    eax,0x324
c0009954:	75 06                	jne    c000995c <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009956:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000995c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995f:	0f b7 c0             	movzx  eax,ax
c0009962:	3d 23 03 00 00       	cmp    eax,0x323
c0009967:	75 06                	jne    c000996f <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009969:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000996f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009972:	0f b7 c0             	movzx  eax,ax
c0009975:	3d 26 03 00 00       	cmp    eax,0x326
c000997a:	75 06                	jne    c0009982 <sendKeyboardToken(KeyboardToken)+0x2de>
c000997c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009985:	0f b7 c0             	movzx  eax,ax
c0009988:	3d 27 03 00 00       	cmp    eax,0x327
c000998d:	75 06                	jne    c0009995 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000998f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009998:	0f b7 c0             	movzx  eax,ax
c000999b:	3d 22 03 00 00       	cmp    eax,0x322
c00099a0:	75 06                	jne    c00099a8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099a2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099a8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099af:	83 f0 01             	xor    eax,0x1
c00099b2:	0f b6 c0             	movzx  eax,al
c00099b5:	85 c0                	test   eax,eax
c00099b7:	74 7c                	je     c0009a35 <sendKeyboardToken(KeyboardToken)+0x391>
c00099b9:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099be:	0f b6 c0             	movzx  eax,al
c00099c1:	85 c0                	test   eax,eax
c00099c3:	74 43                	je     c0009a08 <sendKeyboardToken(KeyboardToken)+0x364>
c00099c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099c9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099cd:	85 c0                	test   eax,eax
c00099cf:	74 2b                	je     c00099fc <sendKeyboardToken(KeyboardToken)+0x358>
c00099d1:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099d7:	89 d0                	mov    eax,edx
c00099d9:	c1 e0 02             	shl    eax,0x2
c00099dc:	01 d0                	add    eax,edx
c00099de:	01 c0                	add    eax,eax
c00099e0:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	8d 50 d0             	lea    edx,[eax-0x30]
c00099ee:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099f3:	01 d0                	add    eax,edx
c00099f5:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099fa:	eb 71                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00099fc:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a06:	eb 65                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a08:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a0d:	85 c0                	test   eax,eax
c0009a0f:	74 18                	je     c0009a29 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a11:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a16:	0f b6 c0             	movzx  eax,al
c0009a19:	83 ec 0c             	sub    esp,0xc
c0009a1c:	50                   	push   eax
c0009a1d:	e8 ac fb ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a29:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a33:	eb 38                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a40:	75 2b                	jne    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a42:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a47:	85 c0                	test   eax,eax
c0009a49:	74 18                	je     c0009a63 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a4b:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a50:	0f b6 c0             	movzx  eax,al
c0009a53:	83 ec 0c             	sub    esp,0xc
c0009a56:	50                   	push   eax
c0009a57:	e8 72 fb ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a63:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a6d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a70:	83 f0 01             	xor    eax,0x1
c0009a73:	0f b6 c0             	movzx  eax,al
c0009a76:	85 c0                	test   eax,eax
c0009a78:	74 5a                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a7a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a7d:	83 f0 01             	xor    eax,0x1
c0009a80:	0f b6 c0             	movzx  eax,al
c0009a83:	85 c0                	test   eax,eax
c0009a85:	74 4d                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a87:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a8c:	83 f0 01             	xor    eax,0x1
c0009a8f:	0f b6 c0             	movzx  eax,al
c0009a92:	85 c0                	test   eax,eax
c0009a94:	74 3e                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a99:	0f b7 c0             	movzx  eax,ax
c0009a9c:	83 f8 1f             	cmp    eax,0x1f
c0009a9f:	76 0b                	jbe    c0009aac <sendKeyboardToken(KeyboardToken)+0x408>
c0009aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa4:	0f b7 c0             	movzx  eax,ax
c0009aa7:	83 f8 7e             	cmp    eax,0x7e
c0009aaa:	76 16                	jbe    c0009ac2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aaf:	0f b7 c0             	movzx  eax,ax
c0009ab2:	83 f8 0a             	cmp    eax,0xa
c0009ab5:	74 0b                	je     c0009ac2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aba:	0f b7 c0             	movzx  eax,ax
c0009abd:	83 f8 08             	cmp    eax,0x8
c0009ac0:	75 12                	jne    c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac5:	0f b6 c0             	movzx  eax,al
c0009ac8:	83 ec 0c             	sub    esp,0xc
c0009acb:	50                   	push   eax
c0009acc:	e8 fd fa ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009ad1:	83 c4 10             	add    esp,0x10
c0009ad4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ad7:	83 f0 01             	xor    eax,0x1
c0009ada:	0f b6 c0             	movzx  eax,al
c0009add:	85 c0                	test   eax,eax
c0009adf:	74 5d                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009ae1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ae4:	83 f0 01             	xor    eax,0x1
c0009ae7:	0f b6 c0             	movzx  eax,al
c0009aea:	85 c0                	test   eax,eax
c0009aec:	74 50                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009aee:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009af3:	0f b6 c0             	movzx  eax,al
c0009af6:	85 c0                	test   eax,eax
c0009af8:	74 44                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009afd:	0f b7 c0             	movzx  eax,ax
c0009b00:	83 f8 3f             	cmp    eax,0x3f
c0009b03:	76 39                	jbe    c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b08:	0f b7 c0             	movzx  eax,ax
c0009b0b:	83 f8 7f             	cmp    eax,0x7f
c0009b0e:	77 2e                	ja     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b13:	88 c2                	mov    dl,al
c0009b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b18:	0f b7 c0             	movzx  eax,ax
c0009b1b:	83 f8 5f             	cmp    eax,0x5f
c0009b1e:	76 04                	jbe    c0009b24 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b20:	b0 20                	mov    al,0x20
c0009b22:	eb 02                	jmp    c0009b26 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b24:	b0 00                	mov    al,0x0
c0009b26:	89 d1                	mov    ecx,edx
c0009b28:	29 c1                	sub    ecx,eax
c0009b2a:	89 c8                	mov    eax,ecx
c0009b2c:	83 e8 40             	sub    eax,0x40
c0009b2f:	0f b6 c0             	movzx  eax,al
c0009b32:	83 ec 0c             	sub    esp,0xc
c0009b35:	50                   	push   eax
c0009b36:	e8 93 fa ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009b3b:	83 c4 10             	add    esp,0x10
c0009b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b41:	0f b7 c0             	movzx  eax,ax
c0009b44:	3d 00 03 00 00       	cmp    eax,0x300
c0009b49:	75 12                	jne    c0009b5d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b4b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b4e:	83 f0 01             	xor    eax,0x1
c0009b51:	0f b6 c0             	movzx  eax,al
c0009b54:	85 c0                	test   eax,eax
c0009b56:	74 05                	je     c0009b5d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b58:	e8 56 73 00 00       	call   c0010eb3 <doTerminalCycle()>
c0009b5d:	90                   	nop
c0009b5e:	c9                   	leave  
c0009b5f:	c3                   	ret    

c0009b60 <clearInternalKeybuffer(VgaText*)>:
c0009b60:	55                   	push   ebp
c0009b61:	89 e5                	mov    ebp,esp
c0009b63:	83 ec 08             	sub    esp,0x8
c0009b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b69:	05 02 01 00 00       	add    eax,0x102
c0009b6e:	83 ec 0c             	sub    esp,0xc
c0009b71:	50                   	push   eax
c0009b72:	e8 f9 69 ff ff       	call   c0000570 <strlen>
c0009b77:	83 c4 10             	add    esp,0x10
c0009b7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b7d:	81 c2 02 01 00 00    	add    edx,0x102
c0009b83:	83 ec 04             	sub    esp,0x4
c0009b86:	50                   	push   eax
c0009b87:	6a 00                	push   0x0
c0009b89:	52                   	push   edx
c0009b8a:	e8 61 69 ff ff       	call   c00004f0 <memset>
c0009b8f:	83 c4 10             	add    esp,0x10
c0009b92:	90                   	nop
c0009b93:	c9                   	leave  
c0009b94:	c3                   	ret    

c0009b95 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009b95:	55                   	push   ebp
c0009b96:	89 e5                	mov    ebp,esp
c0009b98:	83 ec 18             	sub    esp,0x18
c0009b9b:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009ba0:	85 c0                	test   eax,eax
c0009ba2:	74 2a                	je     c0009bce <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009ba4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009baa:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c0009bb0:	83 ec 04             	sub    esp,0x4
c0009bb3:	68 40 93 02 c0       	push   0xc0029340
c0009bb8:	83 ec 08             	sub    esp,0x8
c0009bbb:	89 e2                	mov    edx,esp
c0009bbd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009bc0:	89 02                	mov    DWORD PTR [edx],eax
c0009bc2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009bc5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009bc9:	ff d1                	call   ecx
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bd3:	0f b6 c0             	movzx  eax,al
c0009bd6:	85 c0                	test   eax,eax
c0009bd8:	74 07                	je     c0009be1 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009bda:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009be1:	fb                   	sti    
c0009be2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009be9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bed:	0f 84 2a 01 00 00    	je     c0009d1d <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009bfc:	0f be c0             	movsx  eax,al
c0009bff:	85 c0                	test   eax,eax
c0009c01:	75 27                	jne    c0009c2a <readKeyboard(VgaText*, char*, unsigned long)+0x95>
c0009c03:	fa                   	cli    
c0009c04:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c09:	83 c0 01             	add    eax,0x1
c0009c0c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c11:	e8 9a b8 00 00       	call   c00154b0 <schedule()>
c0009c16:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009c1e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c23:	85 c0                	test   eax,eax
c0009c25:	75 cc                	jne    c0009bf3 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c27:	fb                   	sti    
c0009c28:	eb c9                	jmp    c0009bf3 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2a:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c2f:	0f b6 c0             	movzx  eax,al
c0009c32:	85 c0                	test   eax,eax
c0009c34:	74 0a                	je     c0009c40 <readKeyboard(VgaText*, char*, unsigned long)+0xab>
c0009c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c39:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c43:	8d 50 01             	lea    edx,[eax+0x1]
c0009c46:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c4c:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c52:	88 10                	mov    BYTE PTR [eax],dl
c0009c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c57:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c5d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c60:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c64:	83 f8 03             	cmp    eax,0x3
c0009c67:	75 1e                	jne    c0009c87 <readKeyboard(VgaText*, char*, unsigned long)+0xf2>
c0009c69:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c73:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c79:	83 ec 08             	sub    esp,0x8
c0009c7c:	6a 02                	push   0x2
c0009c7e:	50                   	push   eax
c0009c7f:	e8 77 61 00 00       	call   c000fdfb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c84:	83 c4 10             	add    esp,0x10
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 1c             	cmp    eax,0x1c
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 09                	push   0x9
c0009ca5:	50                   	push   eax
c0009ca6:	e8 50 61 00 00       	call   c000fdfb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb1:	05 02 01 00 00       	add    eax,0x102
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 b1 68 ff ff       	call   c0000570 <strlen>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc5:	81 c2 02 01 00 00    	add    edx,0x102
c0009ccb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd1:	81 c2 02 01 00 00    	add    edx,0x102
c0009cd7:	83 ec 04             	sub    esp,0x4
c0009cda:	50                   	push   eax
c0009cdb:	51                   	push   ecx
c0009cdc:	52                   	push   edx
c0009cdd:	e8 ee 66 ff ff       	call   c00003d0 <memmove>
c0009ce2:	83 c4 10             	add    esp,0x10
c0009ce5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ced:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf1:	83 f8 0a             	cmp    eax,0xa
c0009cf4:	74 22                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cf6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfa:	83 f8 03             	cmp    eax,0x3
c0009cfd:	74 19                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cff:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d03:	83 f8 1c             	cmp    eax,0x1c
c0009d06:	74 10                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d08:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d0d:	0f b6 c0             	movzx  eax,al
c0009d10:	85 c0                	test   eax,eax
c0009d12:	0f 84 d1 fe ff ff    	je     c0009be9 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d1b:	eb 03                	jmp    c0009d20 <readKeyboard(VgaText*, char*, unsigned long)+0x18b>
c0009d1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d20:	c9                   	leave  
c0009d21:	c3                   	ret    

c0009d22 <Keyboard::Keyboard(char const*)>:
c0009d22:	83 ec 0c             	sub    esp,0xc
c0009d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d29:	83 ec 08             	sub    esp,0x8
c0009d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d30:	50                   	push   eax
c0009d31:	e8 6e f4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009d36:	83 c4 10             	add    esp,0x10
c0009d39:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c0009d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d42:	89 10                	mov    DWORD PTR [eax],edx
c0009d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d48:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d52:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d59:	90                   	nop
c0009d5a:	83 c4 0c             	add    esp,0xc
c0009d5d:	c3                   	ret    

c0009d5e <Keyboard::~Keyboard()>:
c0009d5e:	83 ec 0c             	sub    esp,0xc
c0009d61:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c0009d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d6a:	89 10                	mov    DWORD PTR [eax],edx
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	83 ec 0c             	sub    esp,0xc
c0009d73:	50                   	push   eax
c0009d74:	e8 cb f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	90                   	nop
c0009d7d:	83 c4 0c             	add    esp,0xc
c0009d80:	c3                   	ret    
c0009d81:	90                   	nop

c0009d82 <Keyboard::~Keyboard()>:
c0009d82:	83 ec 0c             	sub    esp,0xc
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	e8 cd ff ff ff       	call   c0009d5e <Keyboard::~Keyboard()>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	83 ec 08             	sub    esp,0x8
c0009d97:	68 5c 01 00 00       	push   0x15c
c0009d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da0:	e8 5b 29 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	83 c4 0c             	add    esp,0xc
c0009dab:	c3                   	ret    

c0009dac <LogicalDisk::close(int, int, void*)>:
c0009dac:	83 c8 ff             	or     eax,0xffffffff
c0009daf:	c3                   	ret    

c0009db0 <LogicalDisk::~LogicalDisk()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c0009db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dbc:	89 10                	mov    DWORD PTR [eax],edx
c0009dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc2:	83 ec 0c             	sub    esp,0xc
c0009dc5:	50                   	push   eax
c0009dc6:	e8 79 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009dcb:	83 c4 10             	add    esp,0x10
c0009dce:	90                   	nop
c0009dcf:	83 c4 0c             	add    esp,0xc
c0009dd2:	c3                   	ret    
c0009dd3:	90                   	nop

c0009dd4 <LogicalDisk::~LogicalDisk()>:
c0009dd4:	83 ec 0c             	sub    esp,0xc
c0009dd7:	83 ec 0c             	sub    esp,0xc
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 cd ff ff ff       	call   c0009db0 <LogicalDisk::~LogicalDisk()>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	83 ec 08             	sub    esp,0x8
c0009de9:	68 78 01 00 00       	push   0x178
c0009dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df2:	e8 09 29 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	83 c4 0c             	add    esp,0xc
c0009dfd:	c3                   	ret    

c0009dfe <LogicalDisk::open(int, int, void*)>:
c0009dfe:	83 ec 18             	sub    esp,0x18
c0009e01:	68 30 1a 02 c0       	push   0xc0021a30
c0009e06:	e8 b7 4e 00 00       	call   c000ecc2 <KePanic(char const*)>
c0009e0b:	83 c8 ff             	or     eax,0xffffffff
c0009e0e:	83 c4 1c             	add    esp,0x1c
c0009e11:	c3                   	ret    

c0009e12 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e12:	53                   	push   ebx
c0009e13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e1f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e25:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e2b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e31:	77 10                	ja     c0009e43 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e33:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e39:	89 d3                	mov    ebx,edx
c0009e3b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e41:	72 05                	jb     c0009e48 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e43:	83 c8 ff             	or     eax,0xffffffff
c0009e46:	89 c2                	mov    edx,eax
c0009e48:	5b                   	pop    ebx
c0009e49:	c3                   	ret    

c0009e4a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e4a:	56                   	push   esi
c0009e4b:	83 c8 ff             	or     eax,0xffffffff
c0009e4e:	53                   	push   ebx
c0009e4f:	89 c2                	mov    edx,eax
c0009e51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e55:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e63:	77 27                	ja     c0009e8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e65:	89 d8                	mov    eax,ebx
c0009e67:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e6d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e78:	89 c2                	mov    edx,eax
c0009e7a:	73 10                	jae    c0009e8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e7c:	89 c8                	mov    eax,ecx
c0009e7e:	89 da                	mov    edx,ebx
c0009e80:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e86:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	c3                   	ret    
c0009e8f:	90                   	nop

c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e90:	83 ec 1c             	sub    esp,0x1c
c0009e93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ea7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb6:	83 ec 08             	sub    esp,0x8
c0009eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ebd:	50                   	push   eax
c0009ebe:	e8 e1 f2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009ec3:	83 c4 10             	add    esp,0x10
c0009ec6:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c0009ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ecf:	89 10                	mov    DWORD PTR [eax],edx
c0009ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f0c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f12:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f23:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f29:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f37:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f41:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f4b:	90                   	nop
c0009f4c:	83 c4 1c             	add    esp,0x1c
c0009f4f:	c3                   	ret    

c0009f50 <LogicalDisk::assignDriveLetter()>:
c0009f50:	55                   	push   ebp
c0009f51:	57                   	push   edi
c0009f52:	56                   	push   esi
c0009f53:	53                   	push   ebx
c0009f54:	83 ec 14             	sub    esp,0x14
c0009f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f61:	b0 41                	mov    al,0x41
c0009f63:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f69:	84 d2                	test   dl,dl
c0009f6b:	75 02                	jne    c0009f6f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f6d:	b0 43                	mov    al,0x43
c0009f6f:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f75:	0f b6 ca             	movzx  ecx,dl
c0009f78:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f7c:	0f be e8             	movsx  ebp,al
c0009f7f:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f89:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f8d:	3c 43                	cmp    al,0x43
c0009f8f:	75 10                	jne    c0009fa1 <LogicalDisk::assignDriveLetter()+0x51>
c0009f91:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f98:	75 5a                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f9a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f9f:	75 53                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fa1:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fa4:	ba 01 00 00 00       	mov    edx,0x1
c0009fa9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fac:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009faf:	d3 e2                	shl    edx,cl
c0009fb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb5:	89 d7                	mov    edi,edx
c0009fb7:	89 d6                	mov    esi,edx
c0009fb9:	c1 ff 1f             	sar    edi,0x1f
c0009fbc:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fc0:	21 f9                	and    ecx,edi
c0009fc2:	09 d1                	or     ecx,edx
c0009fc4:	75 2e                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fc6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fce:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fd4:	09 f2                	or     edx,esi
c0009fd6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fd9:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fdf:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fea:	09 fa                	or     edx,edi
c0009fec:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c0009ff2:	eb 0d                	jmp    c000a001 <LogicalDisk::assignDriveLetter()+0xb1>
c0009ff4:	8d 50 01             	lea    edx,[eax+0x1]
c0009ff7:	45                   	inc    ebp
c0009ff8:	88 d0                	mov    al,dl
c0009ffa:	80 fa 5b             	cmp    dl,0x5b
c0009ffd:	75 8e                	jne    c0009f8d <LogicalDisk::assignDriveLetter()+0x3d>
c0009fff:	31 c0                	xor    eax,eax
c000a001:	83 c4 14             	add    esp,0x14
c000a004:	5b                   	pop    ebx
c000a005:	5e                   	pop    esi
c000a006:	5f                   	pop    edi
c000a007:	5d                   	pop    ebp
c000a008:	c3                   	ret    
c000a009:	90                   	nop

c000a00a <LogicalDisk::mount()>:
c000a00a:	56                   	push   esi
c000a00b:	53                   	push   ebx
c000a00c:	53                   	push   ebx
c000a00d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a011:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a017:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a021:	85 db                	test   ebx,ebx
c000a023:	74 27                	je     c000a04c <LogicalDisk::mount()+0x42>
c000a025:	51                   	push   ecx
c000a026:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a02d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a02f:	83 e8 41             	sub    eax,0x41
c000a032:	50                   	push   eax
c000a033:	56                   	push   esi
c000a034:	53                   	push   ebx
c000a035:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	84 c0                	test   al,al
c000a03d:	74 08                	je     c000a047 <LogicalDisk::mount()+0x3d>
c000a03f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a045:	eb 07                	jmp    c000a04e <LogicalDisk::mount()+0x44>
c000a047:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a04a:	eb d5                	jmp    c000a021 <LogicalDisk::mount()+0x17>
c000a04c:	31 c0                	xor    eax,eax
c000a04e:	5a                   	pop    edx
c000a04f:	5b                   	pop    ebx
c000a050:	5e                   	pop    esi
c000a051:	c3                   	ret    

c000a052 <LogicalDisk::unmount()>:
c000a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a056:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a060:	c3                   	ret    
c000a061:	90                   	nop

c000a062 <LogicalDisk::eject()>:
c000a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a066:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a06c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a06e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a072:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a075:	90                   	nop

c000a076 <LogicalDisk::unassignDriveLetter()>:
c000a076:	57                   	push   edi
c000a077:	56                   	push   esi
c000a078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a07c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a083:	85 c9                	test   ecx,ecx
c000a085:	75 0f                	jne    c000a096 <LogicalDisk::unassignDriveLetter()+0x20>
c000a087:	c7 44 24 0c 54 1a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021a54
c000a08f:	5e                   	pop    esi
c000a090:	5f                   	pop    edi
c000a091:	e9 2c 4c 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000a096:	83 e9 41             	sub    ecx,0x41
c000a099:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0a0:	b8 01 00 00 00       	mov    eax,0x1
c000a0a5:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0b0:	d3 e0                	shl    eax,cl
c000a0b2:	89 c7                	mov    edi,eax
c000a0b4:	f7 d0                	not    eax
c000a0b6:	c1 ff 1f             	sar    edi,0x1f
c000a0b9:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0bf:	89 fe                	mov    esi,edi
c000a0c1:	f7 d6                	not    esi
c000a0c3:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0c9:	5e                   	pop    esi
c000a0ca:	5f                   	pop    edi
c000a0cb:	c3                   	ret    

c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0cc:	57                   	push   edi
c000a0cd:	56                   	push   esi
c000a0ce:	53                   	push   ebx
c000a0cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0e5:	77 41                	ja     c000a128 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0e7:	99                   	cdq    
c000a0e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0ee:	01 c8                	add    eax,ecx
c000a0f0:	11 da                	adc    edx,ebx
c000a0f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0f8:	19 d7                	sbb    edi,edx
c000a0fa:	72 33                	jb     c000a12f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a102:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a108:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a10c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a110:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a116:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a11c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a120:	5b                   	pop    ebx
c000a121:	5e                   	pop    esi
c000a122:	5f                   	pop    edi
c000a123:	e9 d0 0a 00 00       	jmp    c000abf8 <VCache::read(unsigned long long, int, void*)>
c000a128:	b8 05 00 00 00       	mov    eax,0x5
c000a12d:	eb 05                	jmp    c000a134 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a12f:	b8 07 00 00 00       	mov    eax,0x7
c000a134:	5b                   	pop    ebx
c000a135:	5e                   	pop    esi
c000a136:	5f                   	pop    edi
c000a137:	c3                   	ret    

c000a138 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a138:	57                   	push   edi
c000a139:	56                   	push   esi
c000a13a:	53                   	push   ebx
c000a13b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a13f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a143:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a14b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a151:	77 41                	ja     c000a194 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a153:	99                   	cdq    
c000a154:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a15a:	01 c8                	add    eax,ecx
c000a15c:	11 da                	adc    edx,ebx
c000a15e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a164:	19 d7                	sbb    edi,edx
c000a166:	72 33                	jb     c000a19b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a168:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a16e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a174:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a178:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a17c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a182:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a18c:	5b                   	pop    ebx
c000a18d:	5e                   	pop    esi
c000a18e:	5f                   	pop    edi
c000a18f:	e9 70 09 00 00       	jmp    c000ab04 <VCache::write(unsigned long long, int, void*)>
c000a194:	b8 05 00 00 00       	mov    eax,0x5
c000a199:	eb 05                	jmp    c000a1a0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a19b:	b8 07 00 00 00       	mov    eax,0x7
c000a1a0:	5b                   	pop    ebx
c000a1a1:	5e                   	pop    esi
c000a1a2:	5f                   	pop    edi
c000a1a3:	c3                   	ret    

c000a1a4 <Mouse::Mouse(char const*)>:
c000a1a4:	83 ec 0c             	sub    esp,0xc
c000a1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ab:	83 ec 08             	sub    esp,0x8
c000a1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b2:	50                   	push   eax
c000a1b3:	e8 ec ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a1b8:	83 c4 10             	add    esp,0x10
c000a1bb:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	89 10                	mov    DWORD PTR [eax],edx
c000a1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1d4:	90                   	nop
c000a1d5:	83 c4 0c             	add    esp,0xc
c000a1d8:	c3                   	ret    
c000a1d9:	90                   	nop
c000a1da:	66 90                	xchg   ax,ax

c000a1dc <Mouse::~Mouse()>:
c000a1dc:	83 ec 0c             	sub    esp,0xc
c000a1df:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000a1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e8:	89 10                	mov    DWORD PTR [eax],edx
c000a1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ee:	83 ec 0c             	sub    esp,0xc
c000a1f1:	50                   	push   eax
c000a1f2:	e8 4d ed ff ff       	call   c0008f44 <Device::~Device()>
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	90                   	nop
c000a1fb:	83 c4 0c             	add    esp,0xc
c000a1fe:	c3                   	ret    
c000a1ff:	90                   	nop

c000a200 <Mouse::~Mouse()>:
c000a200:	83 ec 0c             	sub    esp,0xc
c000a203:	83 ec 0c             	sub    esp,0xc
c000a206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20a:	e8 cd ff ff ff       	call   c000a1dc <Mouse::~Mouse()>
c000a20f:	83 c4 10             	add    esp,0x10
c000a212:	83 ec 08             	sub    esp,0x8
c000a215:	68 58 01 00 00       	push   0x158
c000a21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21e:	e8 dd 24 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	83 c4 0c             	add    esp,0xc
c000a229:	c3                   	ret    

c000a22a <NIC::getMAC()>:
c000a22a:	31 c0                	xor    eax,eax
c000a22c:	31 d2                	xor    edx,edx
c000a22e:	c3                   	ret    
c000a22f:	90                   	nop

c000a230 <NIC::write(int, unsigned char*, int*)>:
c000a230:	b8 01 00 00 00       	mov    eax,0x1
c000a235:	c3                   	ret    

c000a236 <NIC::NIC(char const*)>:
c000a236:	83 ec 0c             	sub    esp,0xc
c000a239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23d:	83 ec 08             	sub    esp,0x8
c000a240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a244:	50                   	push   eax
c000a245:	e8 5a ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000a252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a256:	89 10                	mov    DWORD PTR [eax],edx
c000a258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a266:	90                   	nop
c000a267:	83 c4 0c             	add    esp,0xc
c000a26a:	c3                   	ret    
c000a26b:	90                   	nop

c000a26c <NIC::~NIC()>:
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	89 10                	mov    DWORD PTR [eax],edx
c000a27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27e:	83 ec 0c             	sub    esp,0xc
c000a281:	50                   	push   eax
c000a282:	e8 bd ec ff ff       	call   c0008f44 <Device::~Device()>
c000a287:	83 c4 10             	add    esp,0x10
c000a28a:	90                   	nop
c000a28b:	83 c4 0c             	add    esp,0xc
c000a28e:	c3                   	ret    
c000a28f:	90                   	nop

c000a290 <NIC::~NIC()>:
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	83 ec 0c             	sub    esp,0xc
c000a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29a:	e8 cd ff ff ff       	call   c000a26c <NIC::~NIC()>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	83 ec 08             	sub    esp,0x8
c000a2a5:	68 58 01 00 00       	push   0x158
c000a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ae:	e8 4d 24 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a2b3:	83 c4 10             	add    esp,0x10
c000a2b6:	83 c4 0c             	add    esp,0xc
c000a2b9:	c3                   	ret    

c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ba:	55                   	push   ebp
c000a2bb:	57                   	push   edi
c000a2bc:	56                   	push   esi
c000a2bd:	53                   	push   ebx
c000a2be:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2c4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2cb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2d2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2d9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2e8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2ef:	e8 ac ef ff ff       	call   c00092a0 <Device::getName()>
c000a2f4:	5a                   	pop    edx
c000a2f5:	59                   	pop    ecx
c000a2f6:	50                   	push   eax
c000a2f7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2fb:	55                   	push   ebp
c000a2fc:	e8 3f 63 ff ff       	call   c0000640 <strcpy>
c000a301:	5b                   	pop    ebx
c000a302:	58                   	pop    eax
c000a303:	68 00 1b 02 c0       	push   0xc0021b00
c000a308:	55                   	push   ebp
c000a309:	e8 32 65 ff ff       	call   c0000840 <strcat>
c000a30e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a315:	e8 61 46 00 00       	call   c000e97b <malloc>
c000a31a:	83 c4 0c             	add    esp,0xc
c000a31d:	89 c3                	mov    ebx,eax
c000a31f:	57                   	push   edi
c000a320:	56                   	push   esi
c000a321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a325:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a329:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a330:	55                   	push   ebp
c000a331:	50                   	push   eax
c000a332:	e8 59 fb ff ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a337:	83 c4 14             	add    esp,0x14
c000a33a:	53                   	push   ebx
c000a33b:	e8 10 fc ff ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c000a340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a343:	e8 c2 fc ff ff       	call   c000a00a <LogicalDisk::mount()>
c000a348:	58                   	pop    eax
c000a349:	5a                   	pop    edx
c000a34a:	53                   	push   ebx
c000a34b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a352:	e8 eb ec ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a357:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a35d:	5b                   	pop    ebx
c000a35e:	5e                   	pop    esi
c000a35f:	5f                   	pop    edi
c000a360:	5d                   	pop    ebp
c000a361:	c3                   	ret    

c000a362 <createPartitionsForDisk(PhysicalDisk*)>:
c000a362:	55                   	push   ebp
c000a363:	57                   	push   edi
c000a364:	56                   	push   esi
c000a365:	53                   	push   ebx
c000a366:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a36c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a373:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a379:	3d 00 02 00 00       	cmp    eax,0x200
c000a37e:	74 27                	je     c000a3a7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a380:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a386:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a38c:	83 ec 10             	sub    esp,0x10
c000a38f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a393:	99                   	cdq    
c000a394:	c1 e6 0a             	shl    esi,0xa
c000a397:	52                   	push   edx
c000a398:	89 fd                	mov    ebp,edi
c000a39a:	50                   	push   eax
c000a39b:	55                   	push   ebp
c000a39c:	56                   	push   esi
c000a39d:	e8 c2 59 01 00       	call   c001fd64 <__udivdi3>
c000a3a2:	e9 b9 00 00 00       	jmp    c000a460 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3a7:	83 ec 0c             	sub    esp,0xc
c000a3aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3ac:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3b0:	56                   	push   esi
c000a3b1:	6a 01                	push   0x1
c000a3b3:	6a 00                	push   0x0
c000a3b5:	6a 00                	push   0x0
c000a3b7:	53                   	push   ebx
c000a3b8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3bb:	83 c4 20             	add    esp,0x20
c000a3be:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3c6:	75 0a                	jne    c000a3d2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3c8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3d0:	74 2c                	je     c000a3fe <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3d2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3d8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3e4:	83 ec 10             	sub    esp,0x10
c000a3e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3eb:	89 f7                	mov    edi,esi
c000a3ed:	c1 e0 0a             	shl    eax,0xa
c000a3f0:	c1 ff 1f             	sar    edi,0x1f
c000a3f3:	57                   	push   edi
c000a3f4:	56                   	push   esi
c000a3f5:	52                   	push   edx
c000a3f6:	50                   	push   eax
c000a3f7:	e8 68 59 01 00       	call   c001fd64 <__udivdi3>
c000a3fc:	eb 62                	jmp    c000a460 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3fe:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a405:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a40c:	89 cf                	mov    edi,ecx
c000a40e:	83 e2 7f             	and    edx,0x7f
c000a411:	83 e7 7f             	and    edi,0x7f
c000a414:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a41b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a41e:	83 e0 7f             	and    eax,0x7f
c000a421:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a424:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a42b:	83 e0 7f             	and    eax,0x7f
c000a42e:	01 d0                	add    eax,edx
c000a430:	89 c5                	mov    ebp,eax
c000a432:	84 c0                	test   al,al
c000a434:	74 41                	je     c000a477 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a436:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a43c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a442:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a448:	83 ec 10             	sub    esp,0x10
c000a44b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a44f:	89 f7                	mov    edi,esi
c000a451:	c1 e0 0a             	shl    eax,0xa
c000a454:	c1 ff 1f             	sar    edi,0x1f
c000a457:	57                   	push   edi
c000a458:	56                   	push   esi
c000a459:	52                   	push   edx
c000a45a:	50                   	push   eax
c000a45b:	e8 04 59 01 00       	call   c001fd64 <__udivdi3>
c000a460:	83 c4 14             	add    esp,0x14
c000a463:	52                   	push   edx
c000a464:	50                   	push   eax
c000a465:	6a 00                	push   0x0
c000a467:	6a 00                	push   0x0
c000a469:	53                   	push   ebx
c000a46a:	e8 4b fe ff ff       	call   c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a46f:	83 c4 20             	add    esp,0x20
c000a472:	e9 73 01 00 00       	jmp    c000a5ea <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a477:	89 f0                	mov    eax,esi
c000a479:	31 c9                	xor    ecx,ecx
c000a47b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a482:	75 02                	jne    c000a486 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a484:	89 cd                	mov    ebp,ecx
c000a486:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a48d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a494:	c1 e2 08             	shl    edx,0x8
c000a497:	c1 e6 10             	shl    esi,0x10
c000a49a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4a2:	09 f2                	or     edx,esi
c000a4a4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4ac:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4b3:	83 c0 10             	add    eax,0x10
c000a4b6:	09 f2                	or     edx,esi
c000a4b8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4bf:	c1 e6 18             	shl    esi,0x18
c000a4c2:	09 f2                	or     edx,esi
c000a4c4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4cb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4cf:	c1 e6 10             	shl    esi,0x10
c000a4d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4d9:	c1 e2 08             	shl    edx,0x8
c000a4dc:	09 f2                	or     edx,esi
c000a4de:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4e5:	09 f2                	or     edx,esi
c000a4e7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4ee:	c1 e6 18             	shl    esi,0x18
c000a4f1:	09 f2                	or     edx,esi
c000a4f3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4f7:	41                   	inc    ecx
c000a4f8:	83 f9 04             	cmp    ecx,0x4
c000a4fb:	0f 85 7a ff ff ff    	jne    c000a47b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a505:	83 f0 01             	xor    eax,0x1
c000a508:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a50c:	75 4f                	jne    c000a55d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a50e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a512:	83 f0 01             	xor    eax,0x1
c000a515:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a519:	75 42                	jne    c000a55d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a523:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a52b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a531:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a537:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a53d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a541:	89 f7                	mov    edi,esi
c000a543:	c1 e0 0a             	shl    eax,0xa
c000a546:	c1 ff 1f             	sar    edi,0x1f
c000a549:	57                   	push   edi
c000a54a:	56                   	push   esi
c000a54b:	52                   	push   edx
c000a54c:	50                   	push   eax
c000a54d:	e8 12 58 01 00       	call   c001fd64 <__udivdi3>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a559:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a55d:	89 e8                	mov    eax,ebp
c000a55f:	0f b6 e8             	movzx  ebp,al
c000a562:	85 ed                	test   ebp,ebp
c000a564:	74 50                	je     c000a5b6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a56a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a56e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a572:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a57e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a582:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a586:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a58a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a592:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a596:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a59a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a59e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5a6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5aa:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ae:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5b2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5b6:	31 ed                	xor    ebp,ebp
c000a5b8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c0:	89 f8                	mov    eax,edi
c000a5c2:	09 f0                	or     eax,esi
c000a5c4:	74 1e                	je     c000a5e4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ce:	89 d1                	mov    ecx,edx
c000a5d0:	09 c1                	or     ecx,eax
c000a5d2:	74 10                	je     c000a5e4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d4:	83 ec 0c             	sub    esp,0xc
c000a5d7:	57                   	push   edi
c000a5d8:	56                   	push   esi
c000a5d9:	52                   	push   edx
c000a5da:	50                   	push   eax
c000a5db:	53                   	push   ebx
c000a5dc:	e8 d9 fc ff ff       	call   c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5e1:	83 c4 20             	add    esp,0x20
c000a5e4:	45                   	inc    ebp
c000a5e5:	83 fd 04             	cmp    ebp,0x4
c000a5e8:	75 ce                	jne    c000a5b8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5ea:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5f0:	5b                   	pop    ebx
c000a5f1:	5e                   	pop    esi
c000a5f2:	5f                   	pop    edi
c000a5f3:	5d                   	pop    ebp
c000a5f4:	c3                   	ret    
c000a5f5:	66 90                	xchg   ax,ax
c000a5f7:	90                   	nop

c000a5f8 <Serial::Serial(char const*)>:
c000a5f8:	83 ec 0c             	sub    esp,0xc
c000a5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5ff:	83 ec 08             	sub    esp,0x8
c000a602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a606:	50                   	push   eax
c000a607:	e8 98 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a60c:	83 c4 10             	add    esp,0x10
c000a60f:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000a614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a618:	89 10                	mov    DWORD PTR [eax],edx
c000a61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a628:	90                   	nop
c000a629:	83 c4 0c             	add    esp,0xc
c000a62c:	c3                   	ret    
c000a62d:	90                   	nop
c000a62e:	66 90                	xchg   ax,ax

c000a630 <Serial::~Serial()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000a638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63c:	89 10                	mov    DWORD PTR [eax],edx
c000a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a642:	83 ec 0c             	sub    esp,0xc
c000a645:	50                   	push   eax
c000a646:	e8 f9 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a64b:	83 c4 10             	add    esp,0x10
c000a64e:	90                   	nop
c000a64f:	83 c4 0c             	add    esp,0xc
c000a652:	c3                   	ret    
c000a653:	90                   	nop

c000a654 <Serial::~Serial()>:
c000a654:	83 ec 0c             	sub    esp,0xc
c000a657:	83 ec 0c             	sub    esp,0xc
c000a65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65e:	e8 cd ff ff ff       	call   c000a630 <Serial::~Serial()>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	83 ec 08             	sub    esp,0x8
c000a669:	68 58 01 00 00       	push   0x158
c000a66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a672:	e8 89 20 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	83 c4 0c             	add    esp,0xc
c000a67d:	c3                   	ret    
c000a67e:	66 90                	xchg   ax,ax

c000a680 <Timer::Timer(char const*)>:
c000a680:	83 ec 0c             	sub    esp,0xc
c000a683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	50                   	push   eax
c000a68f:	e8 10 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a694:	83 c4 10             	add    esp,0x10
c000a697:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000a69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a0:	89 10                	mov    DWORD PTR [eax],edx
c000a6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6b0:	90                   	nop
c000a6b1:	83 c4 0c             	add    esp,0xc
c000a6b4:	c3                   	ret    
c000a6b5:	90                   	nop
c000a6b6:	66 90                	xchg   ax,ax

c000a6b8 <Timer::~Timer()>:
c000a6b8:	83 ec 0c             	sub    esp,0xc
c000a6bb:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000a6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c4:	89 10                	mov    DWORD PTR [eax],edx
c000a6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ca:	83 ec 0c             	sub    esp,0xc
c000a6cd:	50                   	push   eax
c000a6ce:	e8 71 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a6d3:	83 c4 10             	add    esp,0x10
c000a6d6:	90                   	nop
c000a6d7:	83 c4 0c             	add    esp,0xc
c000a6da:	c3                   	ret    
c000a6db:	90                   	nop

c000a6dc <Timer::~Timer()>:
c000a6dc:	83 ec 0c             	sub    esp,0xc
c000a6df:	83 ec 0c             	sub    esp,0xc
c000a6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e6:	e8 cd ff ff ff       	call   c000a6b8 <Timer::~Timer()>
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	83 ec 08             	sub    esp,0x8
c000a6f1:	68 5c 01 00 00       	push   0x15c
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 01 20 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	83 c4 0c             	add    esp,0xc
c000a705:	c3                   	ret    

c000a706 <Timer::read()>:
c000a706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a70a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a710:	c3                   	ret    

c000a711 <setupTimer(int)>:
c000a711:	53                   	push   ebx
c000a712:	83 ec 14             	sub    esp,0x14
c000a715:	68 5c 01 00 00       	push   0x15c
c000a71a:	e8 5c 42 00 00       	call   c000e97b <malloc>
c000a71f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a722:	89 c3                	mov    ebx,eax
c000a724:	e8 bb 4e 01 00       	call   c001f5e4 <PIT::PIT()>
c000a729:	58                   	pop    eax
c000a72a:	5a                   	pop    edx
c000a72b:	53                   	push   ebx
c000a72c:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a732:	e8 0b e9 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a737:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a739:	6a 00                	push   0x0
c000a73b:	6a 00                	push   0x0
c000a73d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a741:	53                   	push   ebx
c000a742:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a745:	89 d8                	mov    eax,ebx
c000a747:	83 c4 28             	add    esp,0x28
c000a74a:	5b                   	pop    ebx
c000a74b:	c3                   	ret    

c000a74c <timerHandler(unsigned int)>:
c000a74c:	57                   	push   edi
c000a74d:	56                   	push   esi
c000a74e:	53                   	push   ebx
c000a74f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a753:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a759:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a760:	0f 84 4e 01 00 00    	je     c000a8b4 <timerHandler(unsigned int)+0x168>
c000a766:	fa                   	cli    
c000a767:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a76d:	83 ec 0c             	sub    esp,0xc
c000a770:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a776:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a77b:	e8 7c 59 01 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a780:	83 c4 10             	add    esp,0x10
c000a783:	84 c0                	test   al,al
c000a785:	0f 85 a1 00 00 00    	jne    c000a82c <timerHandler(unsigned int)+0xe0>
c000a78b:	83 ec 0c             	sub    esp,0xc
c000a78e:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a793:	e8 80 59 01 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a798:	83 c4 10             	add    esp,0x10
c000a79b:	89 c6                	mov    esi,eax
c000a79d:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a0:	83 ec 0c             	sub    esp,0xc
c000a7a3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a8:	e8 6b 59 01 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ad:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7b4:	89 c3                	mov    ebx,eax
c000a7b6:	e8 65 59 01 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7bb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7c7:	77 23                	ja     c000a7ec <timerHandler(unsigned int)+0xa0>
c000a7c9:	83 ec 0c             	sub    esp,0xc
c000a7cc:	53                   	push   ebx
c000a7cd:	e8 ee af 00 00       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	39 de                	cmp    esi,ebx
c000a7d7:	75 27                	jne    c000a800 <timerHandler(unsigned int)+0xb4>
c000a7d9:	83 ec 0c             	sub    esp,0xc
c000a7dc:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7e1:	e8 32 59 01 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e6:	89 c6                	mov    esi,eax
c000a7e8:	eb 12                	jmp    c000a7fc <timerHandler(unsigned int)+0xb0>
c000a7ea:	66 90                	xchg   ax,ax
c000a7ec:	50                   	push   eax
c000a7ed:	50                   	push   eax
c000a7ee:	53                   	push   ebx
c000a7ef:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f4:	e8 e3 59 01 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	90                   	nop
c000a800:	83 ec 0c             	sub    esp,0xc
c000a803:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a808:	e8 ef 58 01 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a80d:	83 c4 10             	add    esp,0x10
c000a810:	84 c0                	test   al,al
c000a812:	75 18                	jne    c000a82c <timerHandler(unsigned int)+0xe0>
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a81c:	e8 f7 58 01 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	39 f0                	cmp    eax,esi
c000a826:	0f 85 74 ff ff ff    	jne    c000a7a0 <timerHandler(unsigned int)+0x54>
c000a82c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a831:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a835:	74 41                	je     c000a878 <timerHandler(unsigned int)+0x12c>
c000a837:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a83e:	74 38                	je     c000a878 <timerHandler(unsigned int)+0x12c>
c000a840:	fa                   	cli    
c000a841:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a847:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a84d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a852:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a85a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a85d:	77 05                	ja     c000a864 <timerHandler(unsigned int)+0x118>
c000a85f:	e8 4c ac 00 00       	call   c00154b0 <schedule()>
c000a864:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a86b:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a872:	75 04                	jne    c000a878 <timerHandler(unsigned int)+0x12c>
c000a874:	fb                   	sti    
c000a875:	8d 76 00             	lea    esi,[esi+0x0]
c000a878:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a87d:	48                   	dec    eax
c000a87e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a883:	75 1b                	jne    c000a8a0 <timerHandler(unsigned int)+0x154>
c000a885:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a88c:	74 12                	je     c000a8a0 <timerHandler(unsigned int)+0x154>
c000a88e:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a898:	e8 13 ac 00 00       	call   c00154b0 <schedule()>
c000a89d:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a0:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a8a7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a8ae:	75 04                	jne    c000a8b4 <timerHandler(unsigned int)+0x168>
c000a8b0:	fb                   	sti    
c000a8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b4:	5b                   	pop    ebx
c000a8b5:	5e                   	pop    esi
c000a8b6:	5f                   	pop    edi
c000a8b7:	c3                   	ret    

c000a8b8 <VCache::VCache(PhysicalDisk*)>:
c000a8b8:	53                   	push   ebx
c000a8b9:	83 ec 18             	sub    esp,0x18
c000a8bc:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	89 10                	mov    DWORD PTR [eax],edx
c000a8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a905:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a910:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a918:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a91f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a932:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a942:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a949:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a951:	83 ec 0c             	sub    esp,0xc
c000a954:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a958:	e8 1e 40 00 00       	call   c000e97b <malloc>
c000a95d:	83 c4 10             	add    esp,0x10
c000a960:	89 c3                	mov    ebx,eax
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	53                   	push   ebx
c000a966:	e8 3d 43 00 00       	call   c000eca8 <Mutex::Mutex()>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a972:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a979:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a97d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a984:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a98b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a98f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a999:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a99c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9b3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9c8:	05 00 01 00 00       	add    eax,0x100
c000a9cd:	c1 e0 04             	shl    eax,0x4
c000a9d0:	83 ec 0c             	sub    esp,0xc
c000a9d3:	50                   	push   eax
c000a9d4:	e8 a2 3f 00 00       	call   c000e97b <malloc>
c000a9d9:	83 c4 10             	add    esp,0x10
c000a9dc:	89 c2                	mov    edx,eax
c000a9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e9:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa02:	89 d0                	mov    eax,edx
c000aa04:	c1 e0 02             	shl    eax,0x2
c000aa07:	01 d0                	add    eax,edx
c000aa09:	c1 e0 04             	shl    eax,0x4
c000aa0c:	83 ec 0c             	sub    esp,0xc
c000aa0f:	50                   	push   eax
c000aa10:	e8 66 3f 00 00       	call   c000e97b <malloc>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 c2                	mov    edx,eax
c000aa1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa1e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa21:	90                   	nop
c000aa22:	83 c4 18             	add    esp,0x18
c000aa25:	5b                   	pop    ebx
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VCache::invalidateReadBuffer()>:
c000aa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa2c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa32:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa36:	c3                   	ret    
c000aa37:	90                   	nop

c000aa38 <VCache::writeWriteBuffer()>:
c000aa38:	53                   	push   ebx
c000aa39:	83 ec 08             	sub    esp,0x8
c000aa3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa44:	74 1e                	je     c000aa64 <VCache::writeWriteBuffer()+0x2c>
c000aa46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa49:	83 ec 0c             	sub    esp,0xc
c000aa4c:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa54:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa5a:	50                   	push   eax
c000aa5b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa5e:	83 c4 20             	add    esp,0x20
c000aa61:	8d 76 00             	lea    esi,[esi+0x0]
c000aa64:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa6b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa72:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa76:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa7d:	83 c4 08             	add    esp,0x8
c000aa80:	5b                   	pop    ebx
c000aa81:	c3                   	ret    
c000aa82:	66 90                	xchg   ax,ax

c000aa84 <VCache::~VCache()>:
c000aa84:	83 ec 0c             	sub    esp,0xc
c000aa87:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	89 10                	mov    DWORD PTR [eax],edx
c000aa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa96:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa99:	0f b6 c0             	movzx  eax,al
c000aa9c:	85 c0                	test   eax,eax
c000aa9e:	74 10                	je     c000aab0 <VCache::~VCache()+0x2c>
c000aaa0:	83 ec 0c             	sub    esp,0xc
c000aaa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaa7:	e8 8c ff ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000aaac:	83 c4 10             	add    esp,0x10
c000aaaf:	90                   	nop
c000aab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aab7:	83 ec 0c             	sub    esp,0xc
c000aaba:	50                   	push   eax
c000aabb:	e8 cb 3e 00 00       	call   c000e98b <free>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	50                   	push   eax
c000aace:	e8 b8 3e 00 00       	call   c000e98b <free>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 0c             	add    esp,0xc
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <VCache::~VCache()>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 0c             	sub    esp,0xc
c000aae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aae6:	e8 99 ff ff ff       	call   c000aa84 <VCache::~VCache()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	83 ec 08             	sub    esp,0x8
c000aaf1:	6a 44                	push   0x44
c000aaf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf7:	e8 04 1c 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 c4 0c             	add    esp,0xc
c000ab02:	c3                   	ret    
c000ab03:	90                   	nop

c000ab04 <VCache::write(unsigned long long, int, void*)>:
c000ab04:	55                   	push   ebp
c000ab05:	57                   	push   edi
c000ab06:	56                   	push   esi
c000ab07:	53                   	push   ebx
c000ab08:	83 ec 1c             	sub    esp,0x1c
c000ab0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab17:	e8 fc a6 00 00       	call   c0015218 <KeDisablePreemption()>
c000ab1c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab20:	74 0e                	je     c000ab30 <VCache::write(unsigned long long, int, void*)+0x2c>
c000ab22:	83 ec 0c             	sub    esp,0xc
c000ab25:	53                   	push   ebx
c000ab26:	e8 fd fe ff ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c000ab2b:	83 c4 10             	add    esp,0x10
c000ab2e:	66 90                	xchg   ax,ax
c000ab30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab34:	74 5e                	je     c000ab94 <VCache::write(unsigned long long, int, void*)+0x90>
c000ab36:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000ab39:	89 e8                	mov    eax,ebp
c000ab3b:	99                   	cdq    
c000ab3c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab3f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab42:	89 c1                	mov    ecx,eax
c000ab44:	89 d0                	mov    eax,edx
c000ab46:	31 f1                	xor    ecx,esi
c000ab48:	31 f8                	xor    eax,edi
c000ab4a:	09 c1                	or     ecx,eax
c000ab4c:	75 3a                	jne    c000ab88 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab4e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c000ab53:	75 33                	jne    c000ab88 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab58:	89 ef                	mov    edi,ebp
c000ab5a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab60:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab64:	0f af f9             	imul   edi,ecx
c000ab67:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab6c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab6f:	40                   	inc    eax
c000ab70:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab73:	83 f8 50             	cmp    eax,0x50
c000ab76:	75 70                	jne    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab78:	83 ec 0c             	sub    esp,0xc
c000ab7b:	53                   	push   ebx
c000ab7c:	e8 b7 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	eb 62                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab86:	66 90                	xchg   ax,ax
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	53                   	push   ebx
c000ab8c:	e8 a7 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ab91:	83 c4 10             	add    esp,0x10
c000ab94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab97:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c000ab9c:	7f 22                	jg     c000abc0 <VCache::write(unsigned long long, int, void*)+0xbc>
c000ab9e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000aba4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000aba8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abac:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000abaf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abb8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abbe:	eb 28                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000abc0:	83 ec 0c             	sub    esp,0xc
c000abc3:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abcd:	57                   	push   edi
c000abce:	56                   	push   esi
c000abcf:	50                   	push   eax
c000abd0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abd3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abd7:	83 c4 20             	add    esp,0x20
c000abda:	e8 61 a6 00 00       	call   c0015240 <KeRestorePreemption()>
c000abdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abe3:	eb 0b                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xec>
c000abe5:	8d 76 00             	lea    esi,[esi+0x0]
c000abe8:	e8 53 a6 00 00       	call   c0015240 <KeRestorePreemption()>
c000abed:	31 c0                	xor    eax,eax
c000abef:	90                   	nop
c000abf0:	83 c4 1c             	add    esp,0x1c
c000abf3:	5b                   	pop    ebx
c000abf4:	5e                   	pop    esi
c000abf5:	5f                   	pop    edi
c000abf6:	5d                   	pop    ebp
c000abf7:	c3                   	ret    

c000abf8 <VCache::read(unsigned long long, int, void*)>:
c000abf8:	55                   	push   ebp
c000abf9:	57                   	push   edi
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 1c             	sub    esp,0x1c
c000abff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ac07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ac0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ac0f:	e8 04 a6 00 00       	call   c0015218 <KeDisablePreemption()>
c000ac14:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac18:	74 0e                	je     c000ac28 <VCache::read(unsigned long long, int, void*)+0x30>
c000ac1a:	83 ec 0c             	sub    esp,0xc
c000ac1d:	53                   	push   ebx
c000ac1e:	e8 15 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	66 90                	xchg   ax,ax
c000ac28:	83 fd 01             	cmp    ebp,0x1
c000ac2b:	0f 85 97 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac38:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac3f:	0f 85 83 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac45:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ac48:	89 e9                	mov    ecx,ebp
c000ac4a:	f7 d9                	neg    ecx
c000ac4c:	89 c8                	mov    eax,ecx
c000ac4e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac52:	c1 f8 1f             	sar    eax,0x1f
c000ac55:	21 f1                	and    ecx,esi
c000ac57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac5b:	89 c8                	mov    eax,ecx
c000ac5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac61:	21 f9                	and    ecx,edi
c000ac63:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac67:	89 ca                	mov    edx,ecx
c000ac69:	74 31                	je     c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac6b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac6e:	75 2c                	jne    c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac70:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ac73:	75 27                	jne    c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac75:	8d 76 00             	lea    esi,[esi+0x0]
c000ac78:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ac7f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac88:	48                   	dec    eax
c000ac89:	21 c6                	and    esi,eax
c000ac8b:	0f af f1             	imul   esi,ecx
c000ac8e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac93:	e8 a8 a5 00 00       	call   c0015240 <KeRestorePreemption()>
c000ac98:	31 c0                	xor    eax,eax
c000ac9a:	eb 58                	jmp    c000acf4 <VCache::read(unsigned long long, int, void*)+0xfc>
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000aca3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000acaa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000acad:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000acaf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acb2:	55                   	push   ebp
c000acb3:	52                   	push   edx
c000acb4:	50                   	push   eax
c000acb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acb9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acbc:	83 c4 20             	add    esp,0x20
c000acbf:	85 c0                	test   eax,eax
c000acc1:	75 31                	jne    c000acf4 <VCache::read(unsigned long long, int, void*)+0xfc>
c000acc3:	eb b3                	jmp    c000ac78 <VCache::read(unsigned long long, int, void*)+0x80>
c000acc5:	8d 76 00             	lea    esi,[esi+0x0]
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	53                   	push   ebx
c000accc:	e8 57 fd ff ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c000acd1:	5a                   	pop    edx
c000acd2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acd5:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000acdb:	55                   	push   ebp
c000acdc:	57                   	push   edi
c000acdd:	56                   	push   esi
c000acde:	50                   	push   eax
c000acdf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ace2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ace6:	83 c4 20             	add    esp,0x20
c000ace9:	e8 52 a5 00 00       	call   c0015240 <KeRestorePreemption()>
c000acee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acf2:	66 90                	xchg   ax,ax
c000acf4:	83 c4 1c             	add    esp,0x1c
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	5f                   	pop    edi
c000acfa:	5d                   	pop    ebp
c000acfb:	c3                   	ret    

c000acfc <Video::putrect(int, int, int, int, unsigned int)>:
c000acfc:	55                   	push   ebp
c000acfd:	57                   	push   edi
c000acfe:	56                   	push   esi
c000acff:	53                   	push   ebx
c000ad00:	83 ec 1c             	sub    esp,0x1c
c000ad03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad0f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad1b:	01 df                	add    edi,ebx
c000ad1d:	39 fb                	cmp    ebx,edi
c000ad1f:	7d 1f                	jge    c000ad40 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad25:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad29:	7d 12                	jge    c000ad3d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad2b:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad31:	53                   	push   ebx
c000ad32:	55                   	push   ebp
c000ad33:	45                   	inc    ebp
c000ad34:	56                   	push   esi
c000ad35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	eb e8                	jmp    c000ad25 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad3d:	43                   	inc    ebx
c000ad3e:	eb dd                	jmp    c000ad1d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad40:	83 c4 1c             	add    esp,0x1c
c000ad43:	5b                   	pop    ebx
c000ad44:	5e                   	pop    esi
c000ad45:	5f                   	pop    edi
c000ad46:	5d                   	pop    ebp
c000ad47:	c3                   	ret    

c000ad48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad48:	55                   	push   ebp
c000ad49:	57                   	push   edi
c000ad4a:	31 ff                	xor    edi,edi
c000ad4c:	56                   	push   esi
c000ad4d:	53                   	push   ebx
c000ad4e:	83 ec 1c             	sub    esp,0x1c
c000ad51:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad55:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad59:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad60:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad69:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad71:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad78:	01 f9                	add    ecx,edi
c000ad7a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad7e:	7d 2f                	jge    c000adaf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad80:	31 f6                	xor    esi,esi
c000ad82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad86:	01 f2                	add    edx,esi
c000ad88:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad8c:	7d 1a                	jge    c000ada8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad91:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad94:	46                   	inc    esi
c000ad95:	51                   	push   ecx
c000ad96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad9a:	52                   	push   edx
c000ad9b:	55                   	push   ebp
c000ad9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ada6:	eb da                	jmp    c000ad82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ada8:	47                   	inc    edi
c000ada9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adad:	eb c5                	jmp    c000ad74 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adaf:	83 c4 1c             	add    esp,0x1c
c000adb2:	5b                   	pop    ebx
c000adb3:	5e                   	pop    esi
c000adb4:	5f                   	pop    edi
c000adb5:	5d                   	pop    ebp
c000adb6:	c3                   	ret    
c000adb7:	90                   	nop

c000adb8 <Video::blit(unsigned int*, int, int, int, int)>:
c000adb8:	55                   	push   ebp
c000adb9:	57                   	push   edi
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	83 ec 1c             	sub    esp,0x1c
c000adbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000adc7:	85 c0                	test   eax,eax
c000adc9:	79 02                	jns    c000adcd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000adcb:	31 c0                	xor    eax,eax
c000adcd:	c1 e0 02             	shl    eax,0x2
c000add0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000add4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000add8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000addc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ade0:	39 d8                	cmp    eax,ebx
c000ade2:	7e 49                	jle    c000ae2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ade4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adea:	7c 41                	jl     c000ae2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000adf4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adf8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000adfc:	39 f9                	cmp    ecx,edi
c000adfe:	7e 22                	jle    c000ae22 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ae00:	83 c5 04             	add    ebp,0x4
c000ae03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae09:	7c 14                	jl     c000ae1f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ae0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae0d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ae10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae18:	56                   	push   esi
c000ae19:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	47                   	inc    edi
c000ae20:	eb d2                	jmp    c000adf4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ae22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae26:	43                   	inc    ebx
c000ae27:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ae2b:	eb ab                	jmp    c000add8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ae2d:	83 c4 1c             	add    esp,0x1c
c000ae30:	5b                   	pop    ebx
c000ae31:	5e                   	pop    esi
c000ae32:	5f                   	pop    edi
c000ae33:	5d                   	pop    ebp
c000ae34:	c3                   	ret    
c000ae35:	90                   	nop

c000ae36 <Video::clearScreen(unsigned int)>:
c000ae36:	57                   	push   edi
c000ae37:	56                   	push   esi
c000ae38:	53                   	push   ebx
c000ae39:	31 db                	xor    ebx,ebx
c000ae3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae3f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae45:	7e 1f                	jle    c000ae66 <Video::clearScreen(unsigned int)+0x30>
c000ae47:	31 ff                	xor    edi,edi
c000ae49:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae4f:	7e 12                	jle    c000ae63 <Video::clearScreen(unsigned int)+0x2d>
c000ae51:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae57:	53                   	push   ebx
c000ae58:	57                   	push   edi
c000ae59:	47                   	inc    edi
c000ae5a:	56                   	push   esi
c000ae5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	eb e6                	jmp    c000ae49 <Video::clearScreen(unsigned int)+0x13>
c000ae63:	43                   	inc    ebx
c000ae64:	eb d9                	jmp    c000ae3f <Video::clearScreen(unsigned int)+0x9>
c000ae66:	5b                   	pop    ebx
c000ae67:	5e                   	pop    esi
c000ae68:	5f                   	pop    edi
c000ae69:	c3                   	ret    

c000ae6a <Video::putpixel(int, int, unsigned int)>:
c000ae6a:	c7 44 24 04 e4 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021be4
c000ae72:	e9 4b 3e 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000ae77:	90                   	nop

c000ae78 <Video::readPixelApprox(int, int)>:
c000ae78:	83 ec 18             	sub    esp,0x18
c000ae7b:	68 05 1c 02 c0       	push   0xc0021c05
c000ae80:	e8 3d 3e 00 00       	call   c000ecc2 <KePanic(char const*)>
c000ae85:	31 c0                	xor    eax,eax
c000ae87:	83 c4 1c             	add    esp,0x1c
c000ae8a:	c3                   	ret    
c000ae8b:	90                   	nop

c000ae8c <Video::Video(char const*)>:
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae93:	83 ec 08             	sub    esp,0x8
c000ae96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9a:	50                   	push   eax
c000ae9b:	e8 04 e3 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeac:	89 10                	mov    DWORD PTR [eax],edx
c000aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aebc:	90                   	nop
c000aebd:	83 c4 0c             	add    esp,0xc
c000aec0:	c3                   	ret    
c000aec1:	90                   	nop

c000aec2 <Video::~Video()>:
c000aec2:	83 ec 0c             	sub    esp,0xc
c000aec5:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aece:	89 10                	mov    DWORD PTR [eax],edx
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	83 ec 0c             	sub    esp,0xc
c000aed7:	50                   	push   eax
c000aed8:	e8 67 e0 ff ff       	call   c0008f44 <Device::~Device()>
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	90                   	nop
c000aee1:	83 c4 0c             	add    esp,0xc
c000aee4:	c3                   	ret    
c000aee5:	90                   	nop

c000aee6 <Video::~Video()>:
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	83 ec 0c             	sub    esp,0xc
c000aeec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef0:	e8 cd ff ff ff       	call   c000aec2 <Video::~Video()>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	83 ec 08             	sub    esp,0x8
c000aefb:	68 64 01 00 00       	push   0x164
c000af00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af04:	e8 f7 17 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	83 c4 0c             	add    esp,0xc
c000af0f:	c3                   	ret    

c000af10 <Video::isMonochrome()>:
c000af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af14:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af1a:	c3                   	ret    
c000af1b:	90                   	nop

c000af1c <Video::getWidth()>:
c000af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af26:	c3                   	ret    
c000af27:	90                   	nop

c000af28 <Video::getHeight()>:
c000af28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af32:	c3                   	ret    
c000af33:	90                   	nop

c000af34 <Video::drawCursor(int, int, unsigned int*, int)>:
c000af34:	55                   	push   ebp
c000af35:	57                   	push   edi
c000af36:	56                   	push   esi
c000af37:	53                   	push   ebx
c000af38:	83 ec 2c             	sub    esp,0x2c
c000af3b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af3f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af43:	83 f8 01             	cmp    eax,0x1
c000af46:	19 c9                	sbb    ecx,ecx
c000af48:	31 db                	xor    ebx,ebx
c000af4a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af4e:	89 cd                	mov    ebp,ecx
c000af50:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af58:	f7 d5                	not    ebp
c000af5a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000af60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af64:	01 d8                	add    eax,ebx
c000af66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af6a:	56                   	push   esi
c000af6b:	e8 b8 ff ff ff       	call   c000af28 <Video::getHeight()>
c000af70:	59                   	pop    ecx
c000af71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af75:	7e 70                	jle    c000afe7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af7b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000af7f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af8a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af95:	89 f8                	mov    eax,edi
c000af97:	83 c0 20             	add    eax,0x20
c000af9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af9e:	56                   	push   esi
c000af9f:	e8 78 ff ff ff       	call   c000af1c <Video::getWidth()>
c000afa4:	5a                   	pop    edx
c000afa5:	39 c7                	cmp    edi,eax
c000afa7:	7d 34                	jge    c000afdd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afa9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afae:	74 05                	je     c000afb5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afb0:	8b 06                	mov    eax,DWORD PTR [esi]
c000afb2:	55                   	push   ebp
c000afb3:	eb 0d                	jmp    c000afc2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afb5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afba:	74 12                	je     c000afce <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afbc:	8b 06                	mov    eax,DWORD PTR [esi]
c000afbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afc6:	57                   	push   edi
c000afc7:	56                   	push   esi
c000afc8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afd2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afd6:	47                   	inc    edi
c000afd7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000afdb:	75 c1                	jne    c000af9e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afdd:	43                   	inc    ebx
c000afde:	83 fb 20             	cmp    ebx,0x20
c000afe1:	0f 85 79 ff ff ff    	jne    c000af60 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afe7:	83 c4 2c             	add    esp,0x2c
c000afea:	5b                   	pop    ebx
c000afeb:	5e                   	pop    esi
c000afec:	5f                   	pop    edi
c000afed:	5d                   	pop    ebp
c000afee:	c3                   	ret    
c000afef:	90                   	nop

c000aff0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000aff0:	55                   	push   ebp
c000aff1:	57                   	push   edi
c000aff2:	56                   	push   esi
c000aff3:	53                   	push   ebx
c000aff4:	83 ec 48             	sub    esp,0x48
c000aff7:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000affb:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000afff:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b003:	c1 e0 08             	shl    eax,0x8
c000b006:	01 d0                	add    eax,edx
c000b008:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b00c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b010:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b014:	c1 e0 08             	shl    eax,0x8
c000b017:	01 d0                	add    eax,edx
c000b019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b01d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b021:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b026:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b02a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b02e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b035:	50                   	push   eax
c000b036:	e8 40 39 00 00       	call   c000e97b <malloc>
c000b03b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b047:	75 10                	jne    c000b059 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b049:	83 ec 0c             	sub    esp,0xc
c000b04c:	68 30 1c 02 c0       	push   0xc0021c30
c000b051:	e8 6c 3c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	51                   	push   ecx
c000b05a:	51                   	push   ecx
c000b05b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b05f:	50                   	push   eax
c000b060:	68 40 1c 02 c0       	push   0xc0021c40
c000b065:	e8 fa be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b06a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b06d:	83 e0 20             	and    eax,0x20
c000b070:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b074:	85 c0                	test   eax,eax
c000b076:	5e                   	pop    esi
c000b077:	0f 94 c0             	sete   al
c000b07a:	5f                   	pop    edi
c000b07b:	0f b6 c0             	movzx  eax,al
c000b07e:	be 12 00 00 00       	mov    esi,0x12
c000b083:	50                   	push   eax
c000b084:	68 4a 1c 02 c0       	push   0xc0021c4a
c000b089:	e8 d6 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b08e:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 d0                	mov    eax,edx
c000b097:	85 d2                	test   edx,edx
c000b099:	74 11                	je     c000b0ac <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b09b:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b09f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0a3:	c1 fe 03             	sar    esi,0x3
c000b0a6:	0f af f1             	imul   esi,ecx
c000b0a9:	83 c6 12             	add    esi,0x12
c000b0ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0b1:	74 07                	je     c000b0ba <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b0b3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b0b8:	75 12                	jne    c000b0cc <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b0ba:	83 ec 0c             	sub    esp,0xc
c000b0bd:	68 58 1c 02 c0       	push   0xc0021c58
c000b0c2:	e8 9d be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0c7:	e9 a0 02 00 00       	jmp    c000b36c <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b0cc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0d0:	83 f9 02             	cmp    ecx,0x2
c000b0d3:	74 0e                	je     c000b0e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b0d5:	83 f9 0a             	cmp    ecx,0xa
c000b0d8:	0f 84 c8 00 00 00    	je     c000b1a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b0de:	e9 72 02 00 00       	jmp    c000b355 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b0e3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0e8:	75 0e                	jne    c000b0f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0ea:	84 c0                	test   al,al
c000b0ec:	75 0a                	jne    c000b0f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0ee:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0f1:	83 e8 18             	sub    eax,0x18
c000b0f4:	a8 f7                	test   al,0xf7
c000b0f6:	74 0d                	je     c000b105 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b0f8:	83 ec 0c             	sub    esp,0xc
c000b0fb:	68 6d 1c 02 c0       	push   0xc0021c6d
c000b100:	e9 58 02 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b105:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b10a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b112:	31 c0                	xor    eax,eax
c000b114:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b118:	89 c7                	mov    edi,eax
c000b11a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b122:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b127:	75 15                	jne    c000b13e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b129:	99                   	cdq    
c000b12a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b12e:	85 d2                	test   edx,edx
c000b130:	75 0c                	jne    c000b13e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b132:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b136:	29 c7                	sub    edi,eax
c000b138:	4f                   	dec    edi
c000b139:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b13e:	31 d2                	xor    edx,edx
c000b140:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b144:	75 08                	jne    c000b14e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b146:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b14b:	c1 e2 18             	shl    edx,0x18
c000b14e:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b153:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b157:	c1 e1 10             	shl    ecx,0x10
c000b15a:	8d 47 01             	lea    eax,[edi+0x1]
c000b15d:	89 cd                	mov    ebp,ecx
c000b15f:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b164:	c1 e1 08             	shl    ecx,0x8
c000b167:	09 e9                	or     ecx,ebp
c000b169:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b16d:	09 e9                	or     ecx,ebp
c000b16f:	09 d1                	or     ecx,edx
c000b171:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b175:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b178:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b17c:	c1 fa 03             	sar    edx,0x3
c000b17f:	01 d6                	add    esi,edx
c000b181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b185:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b189:	7e 04                	jle    c000b18f <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b18b:	89 c7                	mov    edi,eax
c000b18d:	eb 93                	jmp    c000b122 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b18f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b193:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b197:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b19b:	0f 8f 77 ff ff ff    	jg     c000b118 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b1a1:	e9 d3 01 00 00       	jmp    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1a6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1ab:	75 0e                	jne    c000b1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1ad:	85 d2                	test   edx,edx
c000b1af:	75 0a                	jne    c000b1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1b4:	83 e8 18             	sub    eax,0x18
c000b1b7:	a8 f7                	test   al,0xf7
c000b1b9:	74 0d                	je     c000b1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	68 7b 1c 02 c0       	push   0xc0021c7b
c000b1c3:	e9 95 01 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b1c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1d8:	31 c9                	xor    ecx,ecx
c000b1da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b1de:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b1e2:	0f 8e 91 01 00 00    	jle    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1e8:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b1ec:	0f 8d 87 01 00 00    	jge    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1f2:	8d 46 01             	lea    eax,[esi+0x1]
c000b1f5:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b1f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1fd:	83 fd 7f             	cmp    ebp,0x7f
c000b200:	89 e8                	mov    eax,ebp
c000b202:	0f 8e 9d 00 00 00    	jle    c000b2a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b208:	83 e0 7f             	and    eax,0x7f
c000b20b:	31 d2                	xor    edx,edx
c000b20d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b211:	40                   	inc    eax
c000b212:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b216:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21a:	75 0a                	jne    c000b226 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b21c:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b221:	89 ea                	mov    edx,ebp
c000b223:	c1 e2 18             	shl    edx,0x18
c000b226:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b22b:	c1 e0 10             	shl    eax,0x10
c000b22e:	89 c7                	mov    edi,eax
c000b230:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b235:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b239:	c1 e0 08             	shl    eax,0x8
c000b23c:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b240:	09 f8                	or     eax,edi
c000b242:	31 f6                	xor    esi,esi
c000b244:	09 c5                	or     ebp,eax
c000b246:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b24b:	09 d5                	or     ebp,edx
c000b24d:	85 ff                	test   edi,edi
c000b24f:	75 1d                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b251:	89 c8                	mov    eax,ecx
c000b253:	99                   	cdq    
c000b254:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b258:	85 d2                	test   edx,edx
c000b25a:	75 12                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b25c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b260:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b264:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b268:	49                   	dec    ecx
c000b269:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b272:	8d 51 01             	lea    edx,[ecx+0x1]
c000b275:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b278:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b27c:	8d 46 01             	lea    eax,[esi+0x1]
c000b27f:	7e 06                	jle    c000b287 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b281:	89 c6                	mov    esi,eax
c000b283:	89 d1                	mov    ecx,edx
c000b285:	eb c6                	jmp    c000b24d <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b287:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b28b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b28f:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b293:	c1 f8 03             	sar    eax,0x3
c000b296:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b29a:	89 d1                	mov    ecx,edx
c000b29c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b2a0:	e9 35 ff ff ff       	jmp    c000b1da <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b2a5:	8d 45 01             	lea    eax,[ebp+0x1]
c000b2a8:	31 f6                	xor    esi,esi
c000b2aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ae:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b2b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2b7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2bc:	75 1d                	jne    c000b2db <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2be:	89 c8                	mov    eax,ecx
c000b2c0:	99                   	cdq    
c000b2c1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2c5:	85 d2                	test   edx,edx
c000b2c7:	75 12                	jne    c000b2db <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2cd:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b2d1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b2d5:	49                   	dec    ecx
c000b2d6:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b2db:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2e3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2e7:	75 10                	jne    c000b2f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2ed:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b2f2:	c1 e7 18             	shl    edi,0x18
c000b2f5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b2f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2fd:	8d 51 01             	lea    edx,[ecx+0x1]
c000b300:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b305:	c1 e0 10             	shl    eax,0x10
c000b308:	89 c7                	mov    edi,eax
c000b30a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b30e:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b313:	c1 e0 08             	shl    eax,0x8
c000b316:	09 f8                	or     eax,edi
c000b318:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b31c:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b320:	09 f8                	or     eax,edi
c000b322:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b326:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b32a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b32d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b331:	c1 f8 03             	sar    eax,0x3
c000b334:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b338:	8d 46 01             	lea    eax,[esi+0x1]
c000b33b:	39 f5                	cmp    ebp,esi
c000b33d:	7e 09                	jle    c000b348 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b33f:	89 c6                	mov    esi,eax
c000b341:	89 d1                	mov    ecx,edx
c000b343:	e9 6f ff ff ff       	jmp    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b348:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b34c:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b350:	e9 45 ff ff ff       	jmp    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b355:	52                   	push   edx
c000b356:	52                   	push   edx
c000b357:	51                   	push   ecx
c000b358:	68 8a 1c 02 c0       	push   0xc0021c8a
c000b35d:	e8 02 bc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b362:	58                   	pop    eax
c000b363:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b367:	e8 1f 36 00 00       	call   c000e98b <free>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b377:	eb 14                	jmp    c000b38d <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b379:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b37d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b381:	89 18                	mov    DWORD PTR [eax],ebx
c000b383:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b38b:	89 18                	mov    DWORD PTR [eax],ebx
c000b38d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b391:	83 c4 3c             	add    esp,0x3c
c000b394:	5b                   	pop    ebx
c000b395:	5e                   	pop    esi
c000b396:	5f                   	pop    edi
c000b397:	5d                   	pop    ebp
c000b398:	c3                   	ret    
c000b399:	90                   	nop

c000b39a <Video::putTGA(int, int, unsigned char*, int)>:
c000b39a:	55                   	push   ebp
c000b39b:	57                   	push   edi
c000b39c:	56                   	push   esi
c000b39d:	53                   	push   ebx
c000b39e:	83 ec 28             	sub    esp,0x28
c000b3a1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b3a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3a9:	50                   	push   eax
c000b3aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3ae:	50                   	push   eax
c000b3af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3b7:	57                   	push   edi
c000b3b8:	e8 33 fc ff ff       	call   c000aff0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3bd:	83 c4 20             	add    esp,0x20
c000b3c0:	85 c0                	test   eax,eax
c000b3c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3c6:	74 3a                	je     c000b402 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3c8:	89 c6                	mov    esi,eax
c000b3ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3ce:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3d2:	39 d8                	cmp    eax,ebx
c000b3d4:	7e 2c                	jle    c000b402 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b3da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3e2:	39 e8                	cmp    eax,ebp
c000b3e4:	7e 19                	jle    c000b3ff <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b3e6:	83 c6 04             	add    esi,0x4
c000b3e9:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	79 0c                	jns    c000b3fc <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b3f0:	8b 17                	mov    edx,DWORD PTR [edi]
c000b3f2:	50                   	push   eax
c000b3f3:	53                   	push   ebx
c000b3f4:	55                   	push   ebp
c000b3f5:	57                   	push   edi
c000b3f6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	45                   	inc    ebp
c000b3fd:	eb db                	jmp    c000b3da <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b3ff:	43                   	inc    ebx
c000b400:	eb c8                	jmp    c000b3ca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b402:	83 c4 1c             	add    esp,0x1c
c000b405:	5b                   	pop    ebx
c000b406:	5e                   	pop    esi
c000b407:	5f                   	pop    edi
c000b408:	5d                   	pop    ebp
c000b409:	c3                   	ret    
c000b40a:	66 90                	xchg   ax,ax

c000b40c <ACPI::close(int, int, void*)>:
c000b40c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b411:	c3                   	ret    
c000b412:	66 90                	xchg   ax,ax

c000b414 <loadACPITables(unsigned char*)>:
c000b414:	57                   	push   edi
c000b415:	56                   	push   esi
c000b416:	53                   	push   ebx
c000b417:	83 ec 60             	sub    esp,0x60
c000b41a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b41f:	0f 84 43 02 00 00    	je     c000b668 <loadACPITables(unsigned char*)+0x254>
c000b425:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b42a:	0f b6 c0             	movzx  eax,al
c000b42d:	85 c0                	test   eax,eax
c000b42f:	74 7b                	je     c000b4ac <loadACPITables(unsigned char*)+0x98>
c000b431:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b435:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b439:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b43d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b440:	83 e8 24             	sub    eax,0x24
c000b443:	c1 e8 03             	shr    eax,0x3
c000b446:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b44a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b452:	66 90                	xchg   ax,ax
c000b454:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b458:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b45c:	0f 8d ba 00 00 00    	jge    c000b51c <loadACPITables(unsigned char*)+0x108>
c000b462:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b466:	83 c0 24             	add    eax,0x24
c000b469:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b46d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b471:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b475:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b479:	c1 e0 03             	shl    eax,0x3
c000b47c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b480:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b484:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b487:	8b 00                	mov    eax,DWORD PTR [eax]
c000b489:	89 c1                	mov    ecx,eax
c000b48b:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b490:	8d 50 01             	lea    edx,[eax+0x1]
c000b493:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b499:	89 ca                	mov    edx,ecx
c000b49b:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4a2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4a7:	eb ab                	jmp    c000b454 <loadACPITables(unsigned char*)+0x40>
c000b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4bb:	83 e8 24             	sub    eax,0x24
c000b4be:	c1 e8 02             	shr    eax,0x2
c000b4c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4c5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4d4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4d8:	7d 42                	jge    c000b51c <loadACPITables(unsigned char*)+0x108>
c000b4da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4de:	83 c0 24             	add    eax,0x24
c000b4e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f1:	c1 e0 02             	shl    eax,0x2
c000b4f4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b4f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b4fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4fe:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b503:	8d 50 01             	lea    edx,[eax+0x1]
c000b506:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b50c:	89 ca                	mov    edx,ecx
c000b50e:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b515:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b51a:	eb b4                	jmp    c000b4d0 <loadACPITables(unsigned char*)+0xbc>
c000b51c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b524:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b529:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b52d:	0f 8d 39 01 00 00    	jge    c000b66c <loadACPITables(unsigned char*)+0x258>
c000b533:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b537:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b53e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b54e:	25 ff 0f 00 00       	and    eax,0xfff
c000b553:	89 c6                	mov    esi,eax
c000b555:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b55b:	83 ec 0c             	sub    esp,0xc
c000b55e:	6a 01                	push   0x1
c000b560:	e8 da 6a 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b56c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	6a 01                	push   0x1
c000b577:	6a 01                	push   0x1
c000b579:	50                   	push   eax
c000b57a:	52                   	push   edx
c000b57b:	53                   	push   ebx
c000b57c:	e8 8b 73 00 00       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b581:	83 c4 20             	add    esp,0x20
c000b584:	09 f0                	or     eax,esi
c000b586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b58a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b58e:	c1 e0 03             	shl    eax,0x3
c000b591:	05 20 98 02 c0       	add    eax,0xc0029820
c000b596:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5a2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5be:	89 c6                	mov    esi,eax
c000b5c0:	89 d7                	mov    edi,edx
c000b5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5c4:	89 c8                	mov    eax,ecx
c000b5c6:	89 fa                	mov    edx,edi
c000b5c8:	89 f3                	mov    ebx,esi
c000b5ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5e5:	05 00 10 00 00       	add    eax,0x1000
c000b5ea:	c1 e8 0c             	shr    eax,0xc
c000b5ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5fd:	25 ff 0f 00 00       	and    eax,0xfff
c000b602:	89 c6                	mov    esi,eax
c000b604:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b611:	e8 29 6a 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b61d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b623:	83 ec 0c             	sub    esp,0xc
c000b626:	6a 01                	push   0x1
c000b628:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b62c:	50                   	push   eax
c000b62d:	52                   	push   edx
c000b62e:	53                   	push   ebx
c000b62f:	e8 d8 72 00 00       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b634:	83 c4 20             	add    esp,0x20
c000b637:	09 f0                	or     eax,esi
c000b639:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b641:	83 ec 0c             	sub    esp,0xc
c000b644:	50                   	push   eax
c000b645:	e8 fd 6c 00 00       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b651:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b655:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b65c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b661:	e9 be fe ff ff       	jmp    c000b524 <loadACPITables(unsigned char*)+0x110>
c000b666:	66 90                	xchg   ax,ax
c000b668:	90                   	nop
c000b669:	8d 76 00             	lea    esi,[esi+0x0]
c000b66c:	83 c4 60             	add    esp,0x60
c000b66f:	5b                   	pop    ebx
c000b670:	5e                   	pop    esi
c000b671:	5f                   	pop    edi
c000b672:	c3                   	ret    
c000b673:	90                   	nop

c000b674 <findRSDT(unsigned char*)>:
c000b674:	57                   	push   edi
c000b675:	56                   	push   esi
c000b676:	53                   	push   ebx
c000b677:	83 ec 50             	sub    esp,0x50
c000b67a:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b67f:	85 c0                	test   eax,eax
c000b681:	75 0d                	jne    c000b690 <findRSDT(unsigned char*)+0x1c>
c000b683:	b8 00 00 00 00       	mov    eax,0x0
c000b688:	e9 2b 01 00 00       	jmp    c000b7b8 <findRSDT(unsigned char*)+0x144>
c000b68d:	8d 76 00             	lea    esi,[esi+0x0]
c000b690:	89 e0                	mov    eax,esp
c000b692:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b696:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b69a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b69e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6ba:	89 c6                	mov    esi,eax
c000b6bc:	89 d7                	mov    edi,edx
c000b6be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6c0:	89 c8                	mov    eax,ecx
c000b6c2:	89 fa                	mov    edx,edi
c000b6c4:	89 f3                	mov    ebx,esi
c000b6c6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6d6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6da:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6fa:	25 ff 0f 00 00       	and    eax,0xfff
c000b6ff:	89 c6                	mov    esi,eax
c000b701:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b707:	83 ec 0c             	sub    esp,0xc
c000b70a:	6a 02                	push   0x2
c000b70c:	e8 2e 69 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b718:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b71e:	83 ec 0c             	sub    esp,0xc
c000b721:	6a 01                	push   0x1
c000b723:	6a 02                	push   0x2
c000b725:	50                   	push   eax
c000b726:	52                   	push   edx
c000b727:	53                   	push   ebx
c000b728:	e8 df 71 00 00       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b72d:	83 c4 20             	add    esp,0x20
c000b730:	09 f0                	or     eax,esi
c000b732:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b736:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b73a:	25 ff 0f 00 00       	and    eax,0xfff
c000b73f:	89 c6                	mov    esi,eax
c000b741:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 02                	push   0x2
c000b74c:	e8 ee 68 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b758:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b75e:	83 ec 0c             	sub    esp,0xc
c000b761:	6a 01                	push   0x1
c000b763:	6a 02                	push   0x2
c000b765:	50                   	push   eax
c000b766:	52                   	push   edx
c000b767:	53                   	push   ebx
c000b768:	e8 9f 71 00 00       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b76d:	83 c4 20             	add    esp,0x20
c000b770:	09 f0                	or     eax,esi
c000b772:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b776:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b77b:	85 c0                	test   eax,eax
c000b77d:	75 11                	jne    c000b790 <findRSDT(unsigned char*)+0x11c>
c000b77f:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b786:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b78a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b78e:	eb 24                	jmp    c000b7b4 <findRSDT(unsigned char*)+0x140>
c000b790:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b795:	83 f8 02             	cmp    eax,0x2
c000b798:	75 12                	jne    c000b7ac <findRSDT(unsigned char*)+0x138>
c000b79a:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7a5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7a9:	eb 09                	jmp    c000b7b4 <findRSDT(unsigned char*)+0x140>
c000b7ab:	90                   	nop
c000b7ac:	b8 00 00 00 00       	mov    eax,0x0
c000b7b1:	eb 05                	jmp    c000b7b8 <findRSDT(unsigned char*)+0x144>
c000b7b3:	90                   	nop
c000b7b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7b8:	83 c4 50             	add    esp,0x50
c000b7bb:	5b                   	pop    ebx
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <findDataTable(unsigned char*, char*)>:
c000b7c0:	83 ec 1c             	sub    esp,0x1c
c000b7c3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7c8:	75 0a                	jne    c000b7d4 <findDataTable(unsigned char*, char*)+0x14>
c000b7ca:	b8 00 00 00 00       	mov    eax,0x0
c000b7cf:	eb 5f                	jmp    c000b830 <findDataTable(unsigned char*, char*)+0x70>
c000b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7dc:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7e1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7e5:	7d 41                	jge    c000b828 <findDataTable(unsigned char*, char*)+0x68>
c000b7e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7eb:	c1 e0 03             	shl    eax,0x3
c000b7ee:	05 20 98 02 c0       	add    eax,0xc0029820
c000b7f3:	83 ec 04             	sub    esp,0x4
c000b7f6:	6a 04                	push   0x4
c000b7f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b7fc:	50                   	push   eax
c000b7fd:	e8 7e 4b ff ff       	call   c0000380 <memcmp>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	85 c0                	test   eax,eax
c000b807:	0f 94 c0             	sete   al
c000b80a:	0f b6 c0             	movzx  eax,al
c000b80d:	85 c0                	test   eax,eax
c000b80f:	74 0f                	je     c000b820 <findDataTable(unsigned char*, char*)+0x60>
c000b811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b815:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b81c:	eb 12                	jmp    c000b830 <findDataTable(unsigned char*, char*)+0x70>
c000b81e:	66 90                	xchg   ax,ax
c000b820:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b825:	eb b5                	jmp    c000b7dc <findDataTable(unsigned char*, char*)+0x1c>
c000b827:	90                   	nop
c000b828:	b8 00 00 00 00       	mov    eax,0x0
c000b82d:	8d 76 00             	lea    esi,[esi+0x0]
c000b830:	83 c4 1c             	add    esp,0x1c
c000b833:	c3                   	ret    

c000b834 <scanMADT()>:
c000b834:	53                   	push   ebx
c000b835:	83 ec 38             	sub    esp,0x38
c000b838:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b842:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b84c:	e8 97 c4 00 00       	call   c0017ce8 <HalFindRSDP()>
c000b851:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b856:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b85b:	85 c0                	test   eax,eax
c000b85d:	0f 84 11 04 00 00    	je     c000bc74 <scanMADT()+0x440>
c000b863:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b868:	83 ec 0c             	sub    esp,0xc
c000b86b:	50                   	push   eax
c000b86c:	e8 03 fe ff ff       	call   c000b674 <findRSDT(unsigned char*)>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b879:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b87e:	85 c0                	test   eax,eax
c000b880:	0f 84 f2 03 00 00    	je     c000bc78 <scanMADT()+0x444>
c000b886:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	50                   	push   eax
c000b88f:	e8 80 fb ff ff       	call   c000b414 <loadACPITables(unsigned char*)>
c000b894:	83 c4 10             	add    esp,0x10
c000b897:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 ec 1c 02 c0       	push   0xc0021cec
c000b8a4:	50                   	push   eax
c000b8a5:	e8 16 ff ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8b1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8b6:	0f 84 c0 03 00 00    	je     c000bc7c <scanMADT()+0x448>
c000b8bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8cb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8cf:	0f 87 af 03 00 00    	ja     c000bc84 <scanMADT()+0x450>
c000b8d5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8dd:	0f 87 a1 03 00 00    	ja     c000bc84 <scanMADT()+0x450>
c000b8e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ef:	8d 50 01             	lea    edx,[eax+0x1]
c000b8f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8fe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b906:	8d 50 01             	lea    edx,[eax+0x1]
c000b909:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b911:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b915:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b919:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b91e:	83 f8 02             	cmp    eax,0x2
c000b921:	0f 86 59 03 00 00    	jbe    c000bc80 <scanMADT()+0x44c>
c000b927:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b92c:	85 c0                	test   eax,eax
c000b92e:	75 58                	jne    c000b988 <scanMADT()+0x154>
c000b930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b934:	8d 50 01             	lea    edx,[eax+0x1]
c000b937:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b93b:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b941:	0f b6 d2             	movzx  edx,dl
c000b944:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b948:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b94c:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b956:	8d 50 01             	lea    edx,[eax+0x1]
c000b959:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b95d:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b963:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b966:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b96c:	0f b6 d2             	movzx  edx,dl
c000b96f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b973:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b977:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b97d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b982:	e9 d9 02 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000b987:	90                   	nop
c000b988:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b98d:	83 f8 01             	cmp    eax,0x1
c000b990:	0f 85 1a 01 00 00    	jne    c000bab0 <scanMADT()+0x27c>
c000b996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b99a:	8d 50 01             	lea    edx,[eax+0x1]
c000b99d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9a1:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9a7:	0f b6 d2             	movzx  edx,dl
c000b9aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9b2:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9b8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9c5:	01 d0                	add    eax,edx
c000b9c7:	83 c0 2c             	add    eax,0x2c
c000b9ca:	8a 00                	mov    al,BYTE PTR [eax]
c000b9cc:	0f b6 d0             	movzx  edx,al
c000b9cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d3:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9de:	0f b6 c0             	movzx  eax,al
c000b9e1:	c1 e0 08             	shl    eax,0x8
c000b9e4:	89 d1                	mov    ecx,edx
c000b9e6:	09 c1                	or     ecx,eax
c000b9e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ec:	8d 50 02             	lea    edx,[eax+0x2]
c000b9ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9f7:	0f b6 c0             	movzx  eax,al
c000b9fa:	c1 e0 10             	shl    eax,0x10
c000b9fd:	09 c1                	or     ecx,eax
c000b9ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba03:	8d 50 03             	lea    edx,[eax+0x3]
c000ba06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba0e:	0f b6 c0             	movzx  eax,al
c000ba11:	c1 e0 18             	shl    eax,0x18
c000ba14:	09 c1                	or     ecx,eax
c000ba16:	89 ca                	mov    edx,ecx
c000ba18:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba1d:	0f b6 c0             	movzx  eax,al
c000ba20:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba34:	01 d0                	add    eax,edx
c000ba36:	83 c0 2c             	add    eax,0x2c
c000ba39:	8a 00                	mov    al,BYTE PTR [eax]
c000ba3b:	0f b6 d0             	movzx  edx,al
c000ba3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba42:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba49:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	c1 e0 08             	shl    eax,0x8
c000ba53:	89 d1                	mov    ecx,edx
c000ba55:	09 c1                	or     ecx,eax
c000ba57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba5b:	8d 50 02             	lea    edx,[eax+0x2]
c000ba5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba66:	0f b6 c0             	movzx  eax,al
c000ba69:	c1 e0 10             	shl    eax,0x10
c000ba6c:	09 c1                	or     ecx,eax
c000ba6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba72:	8d 50 03             	lea    edx,[eax+0x3]
c000ba75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba7d:	0f b6 c0             	movzx  eax,al
c000ba80:	c1 e0 18             	shl    eax,0x18
c000ba83:	09 c1                	or     ecx,eax
c000ba85:	89 ca                	mov    edx,ecx
c000ba87:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba8c:	0f b6 c0             	movzx  eax,al
c000ba8f:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000ba96:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba9b:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa0:	83 c0 01             	add    eax,0x1
c000baa3:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000baa8:	e9 b3 01 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000baad:	8d 76 00             	lea    esi,[esi+0x0]
c000bab0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bab5:	83 f8 02             	cmp    eax,0x2
c000bab8:	0f 85 ea 00 00 00    	jne    c000bba8 <scanMADT()+0x374>
c000babe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac2:	8d 50 01             	lea    edx,[eax+0x1]
c000bac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bac9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bacd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bad5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad9:	8d 50 01             	lea    edx,[eax+0x1]
c000badc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bae8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000baec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf4:	01 d0                	add    eax,edx
c000baf6:	83 c0 2c             	add    eax,0x2c
c000baf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bafb:	0f b6 d0             	movzx  edx,al
c000bafe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb0d:	0f b6 c0             	movzx  eax,al
c000bb10:	c1 e0 08             	shl    eax,0x8
c000bb13:	89 d1                	mov    ecx,edx
c000bb15:	09 c1                	or     ecx,eax
c000bb17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb1b:	8d 50 02             	lea    edx,[eax+0x2]
c000bb1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb22:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb26:	0f b6 c0             	movzx  eax,al
c000bb29:	c1 e0 10             	shl    eax,0x10
c000bb2c:	09 c1                	or     ecx,eax
c000bb2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb32:	8d 50 03             	lea    edx,[eax+0x3]
c000bb35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb39:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb3d:	0f b6 c0             	movzx  eax,al
c000bb40:	c1 e0 18             	shl    eax,0x18
c000bb43:	09 c8                	or     eax,ecx
c000bb45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb49:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb56:	01 d0                	add    eax,edx
c000bb58:	83 c0 2c             	add    eax,0x2c
c000bb5b:	8a 00                	mov    al,BYTE PTR [eax]
c000bb5d:	0f b6 c0             	movzx  eax,al
c000bb60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bb64:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb6b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bb6f:	0f b6 d2             	movzx  edx,dl
c000bb72:	c1 e2 08             	shl    edx,0x8
c000bb75:	09 d0                	or     eax,edx
c000bb77:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb7c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb81:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb8a:	88 90 88 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc178],dl
c000bb90:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bb95:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bb9a:	66 89 84 12 c0 9a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6540],ax
c000bba2:	e9 b9 00 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000bba7:	90                   	nop
c000bba8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbad:	83 f8 04             	cmp    eax,0x4
c000bbb0:	0f 85 9a 00 00 00    	jne    c000bc50 <scanMADT()+0x41c>
c000bbb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbba:	8d 50 01             	lea    edx,[eax+0x1]
c000bbbd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbc5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbc9:	0f b6 c0             	movzx  eax,al
c000bbcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd8:	01 d0                	add    eax,edx
c000bbda:	83 c0 2c             	add    eax,0x2c
c000bbdd:	8a 00                	mov    al,BYTE PTR [eax]
c000bbdf:	0f b6 d0             	movzx  edx,al
c000bbe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbe9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbf1:	0f b6 c0             	movzx  eax,al
c000bbf4:	c1 e0 08             	shl    eax,0x8
c000bbf7:	09 d0                	or     eax,edx
c000bbf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbfd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc06:	8d 50 01             	lea    edx,[eax+0x1]
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc15:	0f b6 c0             	movzx  eax,al
c000bc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc20:	c1 e0 08             	shl    eax,0x8
c000bc23:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc27:	89 c1                	mov    ecx,eax
c000bc29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc2d:	c1 e0 18             	shl    eax,0x18
c000bc30:	89 c3                	mov    ebx,eax
c000bc32:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc37:	8d 50 01             	lea    edx,[eax+0x1]
c000bc3a:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc40:	09 d9                	or     ecx,ebx
c000bc42:	89 ca                	mov    edx,ecx
c000bc44:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc4b:	eb 13                	jmp    c000bc60 <scanMADT()+0x42c>
c000bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc55:	83 f8 05             	cmp    eax,0x5
c000bc58:	75 06                	jne    c000bc60 <scanMADT()+0x42c>
c000bc5a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc5f:	90                   	nop
c000bc60:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc69:	01 d0                	add    eax,edx
c000bc6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc6f:	e9 50 fc ff ff       	jmp    c000b8c4 <scanMADT()+0x90>
c000bc74:	90                   	nop
c000bc75:	eb 0d                	jmp    c000bc84 <scanMADT()+0x450>
c000bc77:	90                   	nop
c000bc78:	90                   	nop
c000bc79:	eb 09                	jmp    c000bc84 <scanMADT()+0x450>
c000bc7b:	90                   	nop
c000bc7c:	90                   	nop
c000bc7d:	eb 05                	jmp    c000bc84 <scanMADT()+0x450>
c000bc7f:	90                   	nop
c000bc80:	90                   	nop
c000bc81:	8d 76 00             	lea    esi,[esi+0x0]
c000bc84:	83 c4 38             	add    esp,0x38
c000bc87:	5b                   	pop    ebx
c000bc88:	c3                   	ret    
c000bc89:	90                   	nop
c000bc8a:	66 90                	xchg   ax,ax

c000bc8c <ACPI::ACPI()>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	83 ec 08             	sub    esp,0x8
c000bc96:	68 f1 1c 02 c0       	push   0xc0021cf1
c000bc9b:	50                   	push   eax
c000bc9c:	e8 03 d5 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c000bca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcad:	89 10                	mov    DWORD PTR [eax],edx
c000bcaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bccc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcd6:	e8 59 fb ff ff       	call   c000b834 <scanMADT()>
c000bcdb:	90                   	nop
c000bcdc:	83 c4 0c             	add    esp,0xc
c000bcdf:	c3                   	ret    

c000bce0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bce0:	83 ec 2c             	sub    esp,0x2c
c000bce3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bce7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bceb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bcf3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bcf8:	88 d0                	mov    al,dl
c000bcfa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bcfe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd0b:	90                   	nop
c000bd0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd10:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd16:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd1a:	0f 8d b0 00 00 00    	jge    c000bdd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd28:	83 c2 2a             	add    edx,0x2a
c000bd2b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd34:	0f b7 c0             	movzx  eax,ax
c000bd37:	39 c2                	cmp    edx,eax
c000bd39:	0f 85 85 00 00 00    	jne    c000bdc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd47:	83 c2 2a             	add    edx,0x2a
c000bd4a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd4e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd53:	0f b6 c0             	movzx  eax,al
c000bd56:	39 c2                	cmp    edx,eax
c000bd58:	75 6a                	jne    c000bdc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd5a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd5f:	85 c0                	test   eax,eax
c000bd61:	74 3d                	je     c000bda0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd6b:	83 c2 2a             	add    edx,0x2a
c000bd6e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd79:	39 c2                	cmp    edx,eax
c000bd7b:	74 13                	je     c000bd90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd7d:	83 ec 0c             	sub    esp,0xc
c000bd80:	68 6c 1e 02 c0       	push   0xc0021e6c
c000bd85:	e8 38 2f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bd8a:	83 c4 10             	add    esp,0x10
c000bd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	68 f6 1c 02 c0       	push   0xc0021cf6
c000bd98:	e8 25 2f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bda4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bda8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdac:	83 c2 2a             	add    edx,0x2a
c000bdaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdb8:	89 01                	mov    DWORD PTR [ecx],eax
c000bdba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdbd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdc2:	66 90                	xchg   ax,ax
c000bdc4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bdc9:	e9 3e ff ff ff       	jmp    c000bd0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdce:	66 90                	xchg   ax,ax
c000bdd0:	90                   	nop
c000bdd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdd5:	83 c4 2c             	add    esp,0x2c
c000bdd8:	c2 04 00             	ret    0x4
c000bddb:	90                   	nop

c000bddc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bddc:	83 ec 1c             	sub    esp,0x1c
c000bddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bde3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bde7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdf0:	88 c8                	mov    al,cl
c000bdf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdf6:	88 d0                	mov    al,dl
c000bdf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000be11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000be15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000be26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000be2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be3d:	83 c0 01             	add    eax,0x1
c000be40:	88 c1                	mov    cl,al
c000be42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be46:	83 c2 2a             	add    edx,0x2a
c000be49:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be62:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be70:	8d 50 01             	lea    edx,[eax+0x1]
c000be73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be77:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be81:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be87:	3d 00 02 00 00       	cmp    eax,0x200
c000be8c:	75 12                	jne    c000bea0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	68 05 1d 02 c0       	push   0xc0021d05
c000be96:	e8 27 2e 00 00       	call   c000ecc2 <KePanic(char const*)>
c000be9b:	83 c4 10             	add    esp,0x10
c000be9e:	66 90                	xchg   ax,ax
c000bea0:	90                   	nop
c000bea1:	83 c4 1c             	add    esp,0x1c
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop
c000bea6:	66 90                	xchg   ax,ax

c000bea8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bea8:	b8 00 00 00 00       	mov    eax,0x0
c000bead:	c3                   	ret    
c000beae:	66 90                	xchg   ax,ax

c000beb0 <ACPI::detectPCI()>:
c000beb0:	53                   	push   ebx
c000beb1:	83 ec 28             	sub    esp,0x28
c000beb4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000beb9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bebe:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bec3:	83 ec 08             	sub    esp,0x8
c000bec6:	68 22 1d 02 c0       	push   0xc0021d22
c000becb:	50                   	push   eax
c000becc:	e8 ef f8 ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bed8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bedd:	74 0d                	je     c000beec <ACPI::detectPCI()+0x3c>
c000bedf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bee4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bee9:	8d 76 00             	lea    esi,[esi+0x0]
c000beec:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bef8:	8a 00                	mov    al,BYTE PTR [eax]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 f8 01             	cmp    eax,0x1
c000bf00:	75 0e                	jne    c000bf10 <ACPI::detectPCI()+0x60>
c000bf02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf07:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf0c:	eb 2e                	jmp    c000bf3c <ACPI::detectPCI()+0x8c>
c000bf0e:	66 90                	xchg   ax,ax
c000bf10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf14:	8a 00                	mov    al,BYTE PTR [eax]
c000bf16:	0f b6 c0             	movzx  eax,al
c000bf19:	83 f8 02             	cmp    eax,0x2
c000bf1c:	75 1e                	jne    c000bf3c <ACPI::detectPCI()+0x8c>
c000bf1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf23:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf28:	85 c0                	test   eax,eax
c000bf2a:	74 10                	je     c000bf3c <ACPI::detectPCI()+0x8c>
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	68 9c 1e 02 c0       	push   0xc0021e9c
c000bf34:	e8 89 2d 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf40:	83 f0 01             	xor    eax,0x1
c000bf43:	0f b6 c0             	movzx  eax,al
c000bf46:	85 c0                	test   eax,eax
c000bf48:	74 46                	je     c000bf90 <ACPI::detectPCI()+0xe0>
c000bf4a:	e8 e1 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf58:	75 0e                	jne    c000bf68 <ACPI::detectPCI()+0xb8>
c000bf5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf5f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf64:	eb 2a                	jmp    c000bf90 <ACPI::detectPCI()+0xe0>
c000bf66:	66 90                	xchg   ax,ax
c000bf68:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf6d:	75 21                	jne    c000bf90 <ACPI::detectPCI()+0xe0>
c000bf6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf74:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf79:	85 c0                	test   eax,eax
c000bf7b:	74 13                	je     c000bf90 <ACPI::detectPCI()+0xe0>
c000bf7d:	83 ec 0c             	sub    esp,0xc
c000bf80:	68 9c 1e 02 c0       	push   0xc0021e9c
c000bf85:	e8 38 2d 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bf8a:	83 c4 10             	add    esp,0x10
c000bf8d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf95:	85 c0                	test   eax,eax
c000bf97:	0f 84 87 00 00 00    	je     c000c024 <ACPI::detectPCI()+0x174>
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	68 27 1d 02 c0       	push   0xc0021d27
c000bfa5:	e8 96 06 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfbc:	e8 ba 29 00 00       	call   c000e97b <malloc>
c000bfc1:	83 c4 10             	add    esp,0x10
c000bfc4:	89 c3                	mov    ebx,eax
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	53                   	push   ebx
c000bfca:	e8 41 fa 00 00       	call   c001ba10 <PCI::PCI()>
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe1:	50                   	push   eax
c000bfe2:	e8 5b d0 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfee:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff0:	83 c0 08             	add    eax,0x8
c000bff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000bffa:	85 d2                	test   edx,edx
c000bffc:	74 0a                	je     c000c008 <ACPI::detectPCI()+0x158>
c000bffe:	ba 01 00 00 00       	mov    edx,0x1
c000c003:	eb 0b                	jmp    c000c010 <ACPI::detectPCI()+0x160>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	ba 02 00 00 00       	mov    edx,0x2
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	6a 00                	push   0x0
c000c012:	6a 00                	push   0x0
c000c014:	52                   	push   edx
c000c015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c019:	ff d0                	call   eax
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	e9 91 00 00 00       	jmp    c000c0b4 <ACPI::detectPCI()+0x204>
c000c023:	90                   	nop
c000c024:	83 ec 0c             	sub    esp,0xc
c000c027:	68 3f 1d 02 c0       	push   0xc0021d3f
c000c02c:	e8 0f 06 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c031:	83 c4 10             	add    esp,0x10
c000c034:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c03b:	83 ec 0c             	sub    esp,0xc
c000c03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c042:	e8 34 29 00 00       	call   c000e97b <malloc>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 c3                	mov    ebx,eax
c000c04c:	83 ec 0c             	sub    esp,0xc
c000c04f:	53                   	push   ebx
c000c050:	e8 c1 05 01 00       	call   c001c616 <IDE::IDE()>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c05c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c060:	83 ec 08             	sub    esp,0x8
c000c063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c067:	50                   	push   eax
c000c068:	e8 d5 cf ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c06d:	83 c4 10             	add    esp,0x10
c000c070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c074:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c082:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c08b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c08f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c09c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c09e:	83 c0 08             	add    eax,0x8
c000c0a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0a3:	6a 00                	push   0x0
c000c0a5:	6a 00                	push   0x0
c000c0a7:	6a 00                	push   0x0
c000c0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ad:	ff d0                	call   eax
c000c0af:	83 c4 10             	add    esp,0x10
c000c0b2:	66 90                	xchg   ax,ax
c000c0b4:	90                   	nop
c000c0b5:	83 c4 28             	add    esp,0x28
c000c0b8:	5b                   	pop    ebx
c000c0b9:	c3                   	ret    
c000c0ba:	66 90                	xchg   ax,ax

c000c0bc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	68 54 1d 02 c0       	push   0xc0021d54
c000c0c7:	e8 f6 2b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c0cc:	83 c4 10             	add    esp,0x10
c000c0cf:	90                   	nop
c000c0d0:	83 c4 0c             	add    esp,0xc
c000c0d3:	c3                   	ret    

c000c0d4 <ACPI::open(int, int, void*)>:
c000c0d4:	57                   	push   edi
c000c0d5:	56                   	push   esi
c000c0d6:	53                   	push   ebx
c000c0d7:	81 ec 70 01 00 00    	sub    esp,0x170
c000c0dd:	83 ec 0c             	sub    esp,0xc
c000c0e0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c0e7:	e8 c4 fd ff ff       	call   c000beb0 <ACPI::detectPCI()>
c000c0ec:	83 c4 10             	add    esp,0x10
c000c0ef:	83 ec 0c             	sub    esp,0xc
c000c0f2:	68 c4 1e 02 c0       	push   0xc0021ec4
c000c0f7:	e8 44 05 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	b8 4c 05 00 00       	mov    eax,0x54c
c000c104:	8a 00                	mov    al,BYTE PTR [eax]
c000c106:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c10d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c115:	83 f8 01             	cmp    eax,0x1
c000c118:	75 12                	jne    c000c12c <ACPI::open(int, int, void*)+0x58>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	68 65 1d 02 c0       	push   0xc0021d65
c000c122:	e8 2b 7e 00 00       	call   c0013f52 <Thr::loadKernelSymbolTable(char const*)>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	eb 34                	jmp    c000c160 <ACPI::open(int, int, void*)+0x8c>
c000c12c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c134:	3d bb 00 00 00       	cmp    eax,0xbb
c000c139:	75 15                	jne    c000c150 <ACPI::open(int, int, void*)+0x7c>
c000c13b:	83 ec 0c             	sub    esp,0xc
c000c13e:	68 83 1d 02 c0       	push   0xc0021d83
c000c143:	e8 0a 7e 00 00       	call   c0013f52 <Thr::loadKernelSymbolTable(char const*)>
c000c148:	83 c4 10             	add    esp,0x10
c000c14b:	eb 13                	jmp    c000c160 <ACPI::open(int, int, void*)+0x8c>
c000c14d:	8d 76 00             	lea    esi,[esi+0x0]
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	68 a1 1d 02 c0       	push   0xc0021da1
c000c158:	e8 65 2b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c15d:	83 c4 10             	add    esp,0x10
c000c160:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c168:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c17d:	e8 f9 27 00 00       	call   c000e97b <malloc>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	89 c3                	mov    ebx,eax
c000c187:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c18c:	83 ec 04             	sub    esp,0x4
c000c18f:	50                   	push   eax
c000c190:	68 bb 1d 02 c0       	push   0xc0021dbb
c000c195:	53                   	push   ebx
c000c196:	e8 77 bf ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c1a5:	83 ec 08             	sub    esp,0x8
c000c1a8:	6a 01                	push   0x1
c000c1aa:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1b1:	e8 7a bf ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c1b6:	83 c4 10             	add    esp,0x10
c000c1b9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c1c0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c1c8:	75 16                	jne    c000c1e0 <ACPI::open(int, int, void*)+0x10c>
c000c1ca:	83 ec 0c             	sub    esp,0xc
c000c1cd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1d4:	e8 b5 bf ff ff       	call   c000818e <File::close()>
c000c1d9:	83 c4 10             	add    esp,0x10
c000c1dc:	eb 0a                	jmp    c000c1e8 <ACPI::open(int, int, void*)+0x114>
c000c1de:	66 90                	xchg   ax,ax
c000c1e0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c1e8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c1f0:	74 1e                	je     c000c210 <ACPI::open(int, int, void*)+0x13c>
c000c1f2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c1f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1fb:	83 c0 08             	add    eax,0x8
c000c1fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000c200:	83 ec 0c             	sub    esp,0xc
c000c203:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c20a:	ff d0                	call   eax
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	90                   	nop
c000c210:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c217:	83 f0 01             	xor    eax,0x1
c000c21a:	0f b6 c0             	movzx  eax,al
c000c21d:	85 c0                	test   eax,eax
c000c21f:	74 2f                	je     c000c250 <ACPI::open(int, int, void*)+0x17c>
c000c221:	83 ec 0c             	sub    esp,0xc
c000c224:	68 d9 1d 02 c0       	push   0xc0021dd9
c000c229:	e8 12 04 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c23c:	83 ec 0c             	sub    esp,0xc
c000c23f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c246:	e8 23 60 00 00       	call   c001226e <Virt::setupPageSwapping(int)>
c000c24b:	83 c4 10             	add    esp,0x10
c000c24e:	66 90                	xchg   ax,ax
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	68 f4 1d 02 c0       	push   0xc0021df4
c000c258:	e8 e3 03 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c267:	83 ec 08             	sub    esp,0x8
c000c26a:	6a 13                	push   0x13
c000c26c:	50                   	push   eax
c000c26d:	e8 fe d0 ff ff       	call   c0009370 <getDevicesOfType(DeviceType)>
c000c272:	83 c4 0c             	add    esp,0xc
c000c275:	8d 76 00             	lea    esi,[esi+0x0]
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c282:	50                   	push   eax
c000c283:	e8 84 40 01 00       	call   c002030c <LinkedList<Device>::isEmpty()>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	83 f0 01             	xor    eax,0x1
c000c28e:	0f b6 c0             	movzx  eax,al
c000c291:	85 c0                	test   eax,eax
c000c293:	0f 84 47 01 00 00    	je     c000c3e0 <ACPI::open(int, int, void*)+0x30c>
c000c299:	83 ec 0c             	sub    esp,0xc
c000c29c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2a3:	50                   	push   eax
c000c2a4:	e8 7f 40 01 00       	call   c0020328 <LinkedList<Device>::getFirstElement()>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c2b3:	83 ec 0c             	sub    esp,0xc
c000c2b6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2bd:	50                   	push   eax
c000c2be:	e8 6d 40 01 00       	call   c0020330 <LinkedList<Device>::removeFirst()>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c2cd:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c2d4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c2db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c2df:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c2e5:	ba 09 00 00 00       	mov    edx,0x9
c000c2ea:	fc                   	cld    
c000c2eb:	89 c7                	mov    edi,eax
c000c2ed:	89 de                	mov    esi,ebx
c000c2ef:	89 d1                	mov    ecx,edx
c000c2f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2f3:	83 ec 08             	sub    esp,0x8
c000c2f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c2fa:	50                   	push   eax
c000c2fb:	83 ec 24             	sub    esp,0x24
c000c2fe:	89 e0                	mov    eax,esp
c000c300:	89 c3                	mov    ebx,eax
c000c302:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c306:	ba 09 00 00 00       	mov    edx,0x9
c000c30b:	89 df                	mov    edi,ebx
c000c30d:	89 c6                	mov    esi,eax
c000c30f:	89 d1                	mov    ecx,edx
c000c311:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c313:	e8 e2 fb 00 00       	call   c001befa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c318:	83 c4 30             	add    esp,0x30
c000c31b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c322:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c32a:	0f 84 48 ff ff ff    	je     c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c330:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c33b:	83 ec 0c             	sub    esp,0xc
c000c33e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c345:	e8 31 26 00 00       	call   c000e97b <malloc>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	89 c3                	mov    ebx,eax
c000c34f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c354:	83 ec 04             	sub    esp,0x4
c000c357:	50                   	push   eax
c000c358:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c35f:	53                   	push   ebx
c000c360:	e8 ad bd ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c365:	83 c4 10             	add    esp,0x10
c000c368:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c36f:	83 ec 0c             	sub    esp,0xc
c000c372:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c379:	e8 76 c0 ff ff       	call   c00083f4 <File::exists()>
c000c37e:	83 c4 10             	add    esp,0x10
c000c381:	0f b6 c0             	movzx  eax,al
c000c384:	85 c0                	test   eax,eax
c000c386:	74 28                	je     c000c3b0 <ACPI::open(int, int, void*)+0x2dc>
c000c388:	83 ec 08             	sub    esp,0x8
c000c38b:	6a 01                	push   0x1
c000c38d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c394:	e8 33 86 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	83 ec 08             	sub    esp,0x8
c000c39f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3a6:	50                   	push   eax
c000c3a7:	e8 72 88 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c3b8:	0f 84 ba fe ff ff    	je     c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c3be:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3c7:	83 c0 08             	add    eax,0x8
c000c3ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3d6:	ff d0                	call   eax
c000c3d8:	83 c4 10             	add    esp,0x10
c000c3db:	e9 98 fe ff ff       	jmp    c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c3e0:	83 ec 0c             	sub    esp,0xc
c000c3e3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c3ea:	50                   	push   eax
c000c3eb:	e8 18 3f 01 00       	call   c0020308 <LinkedList<Device>::~LinkedList()>
c000c3f0:	83 c4 10             	add    esp,0x10
c000c3f3:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	6a 01                	push   0x1
c000c3fe:	68 0e 1e 02 c0       	push   0xc0021e0e
c000c403:	e8 c4 85 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	83 ec 08             	sub    esp,0x8
c000c40e:	53                   	push   ebx
c000c40f:	50                   	push   eax
c000c410:	e8 09 88 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c41d:	85 c0                	test   eax,eax
c000c41f:	0f 84 27 01 00 00    	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c425:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 1a 01 00 00    	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c432:	83 ec 0c             	sub    esp,0xc
c000c435:	68 2b 1e 02 c0       	push   0xc0021e2b
c000c43a:	e8 01 02 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c43f:	83 c4 10             	add    esp,0x10
c000c442:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c457:	e8 1f 25 00 00       	call   c000e97b <malloc>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	89 c3                	mov    ebx,eax
c000c461:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c466:	83 ec 04             	sub    esp,0x4
c000c469:	50                   	push   eax
c000c46a:	68 48 1e 02 c0       	push   0xc0021e48
c000c46f:	53                   	push   ebx
c000c470:	e8 9d bc ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c475:	83 c4 10             	add    esp,0x10
c000c478:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c47f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c487:	74 1f                	je     c000c4a8 <ACPI::open(int, int, void*)+0x3d4>
c000c489:	83 ec 0c             	sub    esp,0xc
c000c48c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c493:	e8 5c bf ff ff       	call   c00083f4 <File::exists()>
c000c498:	83 c4 10             	add    esp,0x10
c000c49b:	0f b6 c0             	movzx  eax,al
c000c49e:	85 c0                	test   eax,eax
c000c4a0:	74 06                	je     c000c4a8 <ACPI::open(int, int, void*)+0x3d4>
c000c4a2:	b0 01                	mov    al,0x1
c000c4a4:	eb 06                	jmp    c000c4ac <ACPI::open(int, int, void*)+0x3d8>
c000c4a6:	66 90                	xchg   ax,ax
c000c4a8:	b0 00                	mov    al,0x0
c000c4aa:	66 90                	xchg   ax,ax
c000c4ac:	0f b6 c0             	movzx  eax,al
c000c4af:	85 c0                	test   eax,eax
c000c4b1:	74 25                	je     c000c4d8 <ACPI::open(int, int, void*)+0x404>
c000c4b3:	83 ec 08             	sub    esp,0x8
c000c4b6:	6a 01                	push   0x1
c000c4b8:	68 48 1e 02 c0       	push   0xc0021e48
c000c4bd:	e8 0a 85 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c000c4c2:	83 c4 10             	add    esp,0x10
c000c4c5:	83 ec 08             	sub    esp,0x8
c000c4c8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c4cf:	50                   	push   eax
c000c4d0:	e8 49 87 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4e0:	74 2a                	je     c000c50c <ACPI::open(int, int, void*)+0x438>
c000c4e2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4ea:	74 20                	je     c000c50c <ACPI::open(int, int, void*)+0x438>
c000c4ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c4f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4f5:	83 c0 08             	add    eax,0x8
c000c4f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4fa:	83 ec 0c             	sub    esp,0xc
c000c4fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c504:	ff d0                	call   eax
c000c506:	83 c4 10             	add    esp,0x10
c000c509:	8d 76 00             	lea    esi,[esi+0x0]
c000c50c:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c511:	83 ec 08             	sub    esp,0x8
c000c514:	68 65 1e 02 c0       	push   0xc0021e65
c000c519:	50                   	push   eax
c000c51a:	e8 a1 f2 ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c529:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c531:	74 19                	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c533:	83 ec 08             	sub    esp,0x8
c000c536:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c53d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c544:	e8 73 fb ff ff       	call   c000c0bc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c549:	83 c4 10             	add    esp,0x10
c000c54c:	b8 00 00 00 00       	mov    eax,0x0
c000c551:	81 c4 70 01 00 00    	add    esp,0x170
c000c557:	5b                   	pop    ebx
c000c558:	5e                   	pop    esi
c000c559:	5f                   	pop    edi
c000c55a:	c3                   	ret    

c000c55b <KeInitialiseAtexit()>:
c000c55b:	83 ec 10             	sub    esp,0x10
c000c55e:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c568:	6a 60                	push   0x60
c000c56a:	6a 00                	push   0x0
c000c56c:	68 00 9d 02 c0       	push   0xc0029d00
c000c571:	e8 7a 3f ff ff       	call   c00004f0 <memset>
c000c576:	83 c4 1c             	add    esp,0x1c
c000c579:	c3                   	ret    

c000c57a <KeRegisterAtexit(void (*)(void*), void*)>:
c000c57a:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c57f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c583:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c58a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c58e:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c595:	40                   	inc    eax
c000c596:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c59b:	83 f8 17             	cmp    eax,0x17
c000c59e:	7e 0d                	jle    c000c5ad <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c5a0:	c7 44 24 04 10 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f10
c000c5a8:	e9 15 27 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000c5ad:	c3                   	ret    

c000c5ae <KeExecuteAtexit()>:
c000c5ae:	53                   	push   ebx
c000c5af:	31 db                	xor    ebx,ebx
c000c5b1:	83 ec 08             	sub    esp,0x8
c000c5b4:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c5ba:	7e 50                	jle    c000c60c <KeExecuteAtexit()+0x5e>
c000c5bc:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c5c3:	85 c0                	test   eax,eax
c000c5c5:	74 42                	je     c000c609 <KeExecuteAtexit()+0x5b>
c000c5c7:	51                   	push   ecx
c000c5c8:	50                   	push   eax
c000c5c9:	53                   	push   ebx
c000c5ca:	68 29 1f 02 c0       	push   0xc0021f29
c000c5cf:	e8 90 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5d4:	58                   	pop    eax
c000c5d5:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c5dc:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c5e3:	c7 04 24 4b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f4b
c000c5ea:	e8 75 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5ef:	c7 04 24 cb 22 02 c0 	mov    DWORD PTR [esp],0xc00222cb
c000c5f6:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c601:	e8 5e a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	43                   	inc    ebx
c000c60a:	eb a8                	jmp    c000c5b4 <KeExecuteAtexit()+0x6>
c000c60c:	83 c4 08             	add    esp,0x8
c000c60f:	5b                   	pop    ebx
c000c610:	c3                   	ret    

c000c611 <KeDisplaySplashScreen()>:
c000c611:	53                   	push   ebx
c000c612:	bb 01 00 00 00       	mov    ebx,0x1
c000c617:	83 ec 08             	sub    esp,0x8
c000c61a:	43                   	inc    ebx
c000c61b:	0f be 83 4e 1f 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde0b2]
c000c622:	85 c0                	test   eax,eax
c000c624:	74 15                	je     c000c63b <KeDisplaySplashScreen()+0x2a>
c000c626:	83 ec 0c             	sub    esp,0xc
c000c629:	6a 01                	push   0x1
c000c62b:	53                   	push   ebx
c000c62c:	6a 00                	push   0x0
c000c62e:	6a 0f                	push   0xf
c000c630:	50                   	push   eax
c000c631:	e8 ba cf 00 00       	call   c00195f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c636:	83 c4 20             	add    esp,0x20
c000c639:	eb df                	jmp    c000c61a <KeDisplaySplashScreen()+0x9>
c000c63b:	83 c4 08             	add    esp,0x8
c000c63e:	5b                   	pop    ebx
c000c63f:	c3                   	ret    

c000c640 <KeSetBootMessage(char const*)>:
c000c640:	57                   	push   edi
c000c641:	56                   	push   esi
c000c642:	53                   	push   ebx
c000c643:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c649:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c650:	68 9e 00 00 00       	push   0x9e
c000c655:	6a 00                	push   0x0
c000c657:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c65b:	56                   	push   esi
c000c65c:	e8 8f 3e ff ff       	call   c00004f0 <memset>
c000c661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c664:	e8 07 3f ff ff       	call   c0000570 <strlen>
c000c669:	ba 50 00 00 00       	mov    edx,0x50
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	29 c2                	sub    edx,eax
c000c673:	31 c9                	xor    ecx,ecx
c000c675:	83 e2 fe             	and    edx,0xfffffffe
c000c678:	01 f2                	add    edx,esi
c000c67a:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c67f:	84 c0                	test   al,al
c000c681:	74 0a                	je     c000c68d <KeSetBootMessage(char const*)+0x4d>
c000c683:	80 cc 07             	or     ah,0x7
c000c686:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c68a:	41                   	inc    ecx
c000c68b:	eb ed                	jmp    c000c67a <KeSetBootMessage(char const*)+0x3a>
c000c68d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c692:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c699:	50                   	push   eax
c000c69a:	50                   	push   eax
c000c69b:	53                   	push   ebx
c000c69c:	68 63 1f 02 c0       	push   0xc0021f63
c000c6a1:	e8 be a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6a6:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c6ac:	5b                   	pop    ebx
c000c6ad:	5e                   	pop    esi
c000c6ae:	5f                   	pop    edi
c000c6af:	c3                   	ret    

c000c6b0 <__cxa_atexit>:
c000c6b0:	31 c0                	xor    eax,eax
c000c6b2:	c3                   	ret    

c000c6b3 <__cxa_finalize>:
c000c6b3:	c3                   	ret    

c000c6b4 <__stack_chk_fail>:
c000c6b4:	55                   	push   ebp
c000c6b5:	89 e5                	mov    ebp,esp
c000c6b7:	83 ec 10             	sub    esp,0x10
c000c6ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c6bd:	68 71 1f 02 c0       	push   0xc0021f71
c000c6c2:	e8 9d a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6c7:	58                   	pop    eax
c000c6c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c6cb:	5a                   	pop    edx
c000c6cc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c6cf:	68 71 1f 02 c0       	push   0xc0021f71
c000c6d4:	e8 8b a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6d9:	c7 04 24 79 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f79
c000c6e0:	e8 dd 25 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	c9                   	leave  
c000c6e9:	c3                   	ret    

c000c6ea <__cxa_pure_virtual>:
c000c6ea:	83 ec 18             	sub    esp,0x18
c000c6ed:	68 91 1f 02 c0       	push   0xc0021f91
c000c6f2:	e8 cb 25 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c6f7:	83 c4 1c             	add    esp,0x1c
c000c6fa:	c3                   	ret    

c000c6fb <operator new[](unsigned long)>:
c000c6fb:	e9 7b 22 00 00       	jmp    c000e97b <malloc>

c000c700 <operator delete(void*, unsigned long)>:
c000c700:	e9 96 22 00 00       	jmp    c000e99b <rfree>

c000c705 <operator delete[](void*)>:
c000c705:	e9 91 22 00 00       	jmp    c000e99b <rfree>

c000c70a <operator delete[](void*, unsigned long)>:
c000c70a:	e9 8c 22 00 00       	jmp    c000e99b <rfree>
c000c70f:	90                   	nop

c000c710 <CUnlockScheduler>:
c000c710:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000c718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c71d:	85 c0                	test   eax,eax
c000c71f:	75 03                	jne    c000c724 <CUnlockScheduler+0x14>
c000c721:	fb                   	sti    
c000c722:	66 90                	xchg   ax,ax
c000c724:	90                   	nop
c000c725:	c3                   	ret    
c000c726:	66 90                	xchg   ax,ax

c000c728 <CLockScheduler>:
c000c728:	fa                   	cli    
c000c729:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c72e:	83 c0 01             	add    eax,0x1
c000c731:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c736:	90                   	nop
c000c737:	c3                   	ret    

c000c738 <CPrintf>:
c000c738:	83 ec 0c             	sub    esp,0xc
c000c73b:	83 ec 08             	sub    esp,0x8
c000c73e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c742:	68 a4 1f 02 c0       	push   0xc0021fa4
c000c747:	e8 18 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c74c:	83 c4 10             	add    esp,0x10
c000c74f:	90                   	nop
c000c750:	83 c4 0c             	add    esp,0xc
c000c753:	c3                   	ret    

c000c754 <CmOpen(char const*)>:
c000c754:	57                   	push   edi
c000c755:	56                   	push   esi
c000c756:	53                   	push   ebx
c000c757:	83 ec 1c             	sub    esp,0x1c
c000c75a:	6a 30                	push   0x30
c000c75c:	e8 1a 22 00 00       	call   c000e97b <malloc>
c000c761:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c768:	89 c3                	mov    ebx,eax
c000c76a:	e8 0c 22 00 00       	call   c000e97b <malloc>
c000c76f:	83 c4 0c             	add    esp,0xc
c000c772:	89 c6                	mov    esi,eax
c000c774:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c77a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c77e:	50                   	push   eax
c000c77f:	e8 8e b9 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c784:	83 c4 0c             	add    esp,0xc
c000c787:	89 33                	mov    DWORD PTR [ebx],esi
c000c789:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c78d:	50                   	push   eax
c000c78e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c792:	50                   	push   eax
c000c793:	56                   	push   esi
c000c794:	e8 99 bc ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000c799:	5a                   	pop    edx
c000c79a:	59                   	pop    ecx
c000c79b:	6a 01                	push   0x1
c000c79d:	ff 33                	push   DWORD PTR [ebx]
c000c79f:	e8 8c b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7a4:	5e                   	pop    esi
c000c7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a9:	e8 cd 21 00 00       	call   c000e97b <malloc>
c000c7ae:	5a                   	pop    edx
c000c7af:	89 c7                	mov    edi,eax
c000c7b1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c7b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7b9:	56                   	push   esi
c000c7ba:	57                   	push   edi
c000c7bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7c3:	50                   	push   eax
c000c7c4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7c7:	83 c4 14             	add    esp,0x14
c000c7ca:	ff 33                	push   DWORD PTR [ebx]
c000c7cc:	e8 bd b9 ff ff       	call   c000818e <File::close()>
c000c7d1:	59                   	pop    ecx
c000c7d2:	58                   	pop    eax
c000c7d3:	6a 13                	push   0x13
c000c7d5:	ff 33                	push   DWORD PTR [ebx]
c000c7d7:	e8 54 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7de:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7e3:	57                   	push   edi
c000c7e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7ec:	50                   	push   eax
c000c7ed:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c7f0:	83 c4 14             	add    esp,0x14
c000c7f3:	57                   	push   edi
c000c7f4:	e8 92 21 00 00       	call   c000e98b <free>
c000c7f9:	83 c4 10             	add    esp,0x10
c000c7fc:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ff:	75 10                	jne    c000c811 <CmOpen(char const*)+0xbd>
c000c801:	83 ec 0c             	sub    esp,0xc
c000c804:	68 a7 1f 02 c0       	push   0xc0021fa7
c000c809:	e8 b4 24 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c814:	50                   	push   eax
c000c815:	6a 00                	push   0x0
c000c817:	6a 00                	push   0x0
c000c819:	ff 33                	push   DWORD PTR [ebx]
c000c81b:	e8 ce b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c820:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c822:	8b 10                	mov    edx,DWORD PTR [eax]
c000c824:	89 34 24             	mov    DWORD PTR [esp],esi
c000c827:	57                   	push   edi
c000c828:	6a 00                	push   0x0
c000c82a:	6a 2b                	push   0x2b
c000c82c:	50                   	push   eax
c000c82d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c830:	83 c4 1c             	add    esp,0x1c
c000c833:	6a 00                	push   0x0
c000c835:	6a 00                	push   0x0
c000c837:	ff 33                	push   DWORD PTR [ebx]
c000c839:	e8 b0 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c83e:	83 c4 0c             	add    esp,0xc
c000c841:	6a 08                	push   0x8
c000c843:	68 b8 1f 02 c0       	push   0xc0021fb8
c000c848:	57                   	push   edi
c000c849:	e8 32 3b ff ff       	call   c0000380 <memcmp>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	85 c0                	test   eax,eax
c000c853:	74 10                	je     c000c865 <CmOpen(char const*)+0x111>
c000c855:	83 ec 0c             	sub    esp,0xc
c000c858:	68 c1 1f 02 c0       	push   0xc0021fc1
c000c85d:	e8 60 24 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c869:	89 d8                	mov    eax,ebx
c000c86b:	83 c4 10             	add    esp,0x10
c000c86e:	5b                   	pop    ebx
c000c86f:	5e                   	pop    esi
c000c870:	5f                   	pop    edi
c000c871:	c3                   	ret    

c000c872 <CmClose(Reghive_Tag*)>:
c000c872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c876:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c87a:	74 0b                	je     c000c887 <CmClose(Reghive_Tag*)+0x15>
c000c87c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c87e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c882:	e9 07 b9 ff ff       	jmp    c000818e <File::close()>
c000c887:	c3                   	ret    

c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 18             	sub    esp,0x18
c000c88c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c890:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c894:	74 29                	je     c000c8bf <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c896:	50                   	push   eax
c000c897:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c89c:	99                   	cdq    
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 33                	push   DWORD PTR [ebx]
c000c8a1:	e8 48 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c8a6:	5a                   	pop    edx
c000c8a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8a9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c8ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8af:	51                   	push   ecx
c000c8b0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c8b4:	6a 00                	push   0x0
c000c8b6:	6a 2b                	push   0x2b
c000c8b8:	50                   	push   eax
c000c8b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c8bc:	83 c4 20             	add    esp,0x20
c000c8bf:	83 c4 18             	add    esp,0x18
c000c8c2:	5b                   	pop    ebx
c000c8c3:	c3                   	ret    

c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>:
c000c8c4:	55                   	push   ebp
c000c8c5:	57                   	push   edi
c000c8c6:	56                   	push   esi
c000c8c7:	53                   	push   ebx
c000c8c8:	31 db                	xor    ebx,ebx
c000c8ca:	83 ec 70             	sub    esp,0x70
c000c8cd:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c8d4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c8d8:	50                   	push   eax
c000c8d9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c8e0:	55                   	push   ebp
c000c8e1:	e8 a2 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c8ee:	c1 e0 08             	shl    eax,0x8
c000c8f1:	89 c2                	mov    edx,eax
c000c8f3:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c8f8:	09 d0                	or     eax,edx
c000c8fa:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c8ff:	c1 e0 08             	shl    eax,0x8
c000c902:	09 d0                	or     eax,edx
c000c904:	74 25                	je     c000c92b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c906:	6b fb 0d             	imul   edi,ebx,0xd
c000c909:	52                   	push   edx
c000c90a:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c90e:	52                   	push   edx
c000c90f:	50                   	push   eax
c000c910:	55                   	push   ebp
c000c911:	e8 72 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c916:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c91a:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c921:	b9 27 00 00 00       	mov    ecx,0x27
c000c926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	83 c3 03             	add    ebx,0x3
c000c92e:	83 fb 15             	cmp    ebx,0x15
c000c931:	75 b6                	jne    c000c8e9 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c933:	83 c4 6c             	add    esp,0x6c
c000c936:	5b                   	pop    ebx
c000c937:	5e                   	pop    esi
c000c938:	5f                   	pop    edi
c000c939:	5d                   	pop    ebp
c000c93a:	c3                   	ret    

c000c93b <CmEnterDirectory(Reghive_Tag*, int)>:
c000c93b:	83 ec 40             	sub    esp,0x40
c000c93e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c942:	50                   	push   eax
c000c943:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c947:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c94b:	e8 38 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	83 c8 ff             	or     eax,0xffffffff
c000c956:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c95b:	75 19                	jne    c000c976 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c95d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c962:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c967:	c1 e0 08             	shl    eax,0x8
c000c96a:	09 c2                	or     edx,eax
c000c96c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c971:	c1 e0 10             	shl    eax,0x10
c000c974:	09 d0                	or     eax,edx
c000c976:	83 c4 3c             	add    esp,0x3c
c000c979:	c3                   	ret    

c000c97a <CmGetNext(Reghive_Tag*, int)>:
c000c97a:	83 ec 40             	sub    esp,0x40
c000c97d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c981:	50                   	push   eax
c000c982:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c986:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c98a:	e8 f9 fe ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c98f:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c994:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c999:	c1 e0 08             	shl    eax,0x8
c000c99c:	09 c2                	or     edx,eax
c000c99e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c9a3:	83 c4 4c             	add    esp,0x4c
c000c9a6:	c1 e0 10             	shl    eax,0x10
c000c9a9:	09 d0                	or     eax,edx
c000c9ab:	c3                   	ret    

c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	83 ec 18             	sub    esp,0x18
c000c9b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9b4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9b8:	74 29                	je     c000c9e3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c9ba:	50                   	push   eax
c000c9bb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c9c0:	99                   	cdq    
c000c9c1:	52                   	push   edx
c000c9c2:	50                   	push   eax
c000c9c3:	ff 33                	push   DWORD PTR [ebx]
c000c9c5:	e8 24 b8 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c9ca:	5a                   	pop    edx
c000c9cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9cd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c9d1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9d3:	51                   	push   ecx
c000c9d4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c9d8:	6a 00                	push   0x0
c000c9da:	6a 2b                	push   0x2b
c000c9dc:	50                   	push   eax
c000c9dd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e0:	83 c4 20             	add    esp,0x20
c000c9e3:	83 c4 18             	add    esp,0x18
c000c9e6:	5b                   	pop    ebx
c000c9e7:	c3                   	ret    

c000c9e8 <CmFreeExtent(Reghive_Tag*, int)>:
c000c9e8:	53                   	push   ebx
c000c9e9:	83 ec 3c             	sub    esp,0x3c
c000c9ec:	6a 2b                	push   0x2b
c000c9ee:	6a 00                	push   0x0
c000c9f0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c9f4:	53                   	push   ebx
c000c9f5:	e8 f6 3a ff ff       	call   c00004f0 <memset>
c000c9fa:	83 c4 0c             	add    esp,0xc
c000c9fd:	53                   	push   ebx
c000c9fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca06:	e8 a1 ff ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca0b:	83 c4 48             	add    esp,0x48
c000ca0e:	5b                   	pop    ebx
c000ca0f:	c3                   	ret    

c000ca10 <CmUpdateHeader(Reghive_Tag*)>:
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca17:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca1b:	74 10                	je     c000ca2d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ca1d:	52                   	push   edx
c000ca1e:	8d 50 05             	lea    edx,[eax+0x5]
c000ca21:	52                   	push   edx
c000ca22:	6a 00                	push   0x0
c000ca24:	50                   	push   eax
c000ca25:	e8 82 ff ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	83 c4 0c             	add    esp,0xc
c000ca30:	c3                   	ret    

c000ca31 <CmExpand(Reghive_Tag*, int)>:
c000ca31:	57                   	push   edi
c000ca32:	56                   	push   esi
c000ca33:	83 ce ff             	or     esi,0xffffffff
c000ca36:	53                   	push   ebx
c000ca37:	83 ec 30             	sub    esp,0x30
c000ca3a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca3e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca42:	74 5f                	je     c000caa3 <CmExpand(Reghive_Tag*, int)+0x72>
c000ca44:	31 d2                	xor    edx,edx
c000ca46:	31 f6                	xor    esi,esi
c000ca48:	50                   	push   eax
c000ca49:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ca4d:	52                   	push   edx
c000ca4e:	50                   	push   eax
c000ca4f:	ff 33                	push   DWORD PTR [ebx]
c000ca51:	e8 98 b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000ca56:	83 c4 0c             	add    esp,0xc
c000ca59:	6a 2b                	push   0x2b
c000ca5b:	6a 00                	push   0x0
c000ca5d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000ca61:	57                   	push   edi
c000ca62:	e8 89 3a ff ff       	call   c00004f0 <memset>
c000ca67:	83 c4 10             	add    esp,0x10
c000ca6a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ca6e:	7d 1b                	jge    c000ca8b <CmExpand(Reghive_Tag*, int)+0x5a>
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca75:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca79:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca7b:	46                   	inc    esi
c000ca7c:	51                   	push   ecx
c000ca7d:	57                   	push   edi
c000ca7e:	6a 00                	push   0x0
c000ca80:	6a 2b                	push   0x2b
c000ca82:	50                   	push   eax
c000ca83:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca86:	83 c4 20             	add    esp,0x20
c000ca89:	eb df                	jmp    c000ca6a <CmExpand(Reghive_Tag*, int)+0x39>
c000ca8b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ca8f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	01 f2                	add    edx,esi
c000ca97:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000ca9a:	53                   	push   ebx
c000ca9b:	e8 70 ff ff ff       	call   c000ca10 <CmUpdateHeader(Reghive_Tag*)>
c000caa0:	83 c4 10             	add    esp,0x10
c000caa3:	83 c4 30             	add    esp,0x30
c000caa6:	89 f0                	mov    eax,esi
c000caa8:	5b                   	pop    ebx
c000caa9:	5e                   	pop    esi
c000caaa:	5f                   	pop    edi
c000caab:	c3                   	ret    

c000caac <CmFindUnusedExtent(Reghive_Tag*)>:
c000caac:	55                   	push   ebp
c000caad:	57                   	push   edi
c000caae:	56                   	push   esi
c000caaf:	53                   	push   ebx
c000cab0:	83 cb ff             	or     ebx,0xffffffff
c000cab3:	83 ec 1c             	sub    esp,0x1c
c000cab6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000caba:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cabe:	74 68                	je     c000cb28 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cac0:	be 2b 00 00 00       	mov    esi,0x2b
c000cac5:	51                   	push   ecx
c000cac6:	31 ff                	xor    edi,edi
c000cac8:	6a 00                	push   0x0
c000caca:	31 db                	xor    ebx,ebx
c000cacc:	6a 00                	push   0x0
c000cace:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cad1:	e8 18 b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cadc:	76 3b                	jbe    c000cb19 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cade:	83 ec 0c             	sub    esp,0xc
c000cae1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cae4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cae8:	8b 10                	mov    edx,DWORD PTR [eax]
c000caea:	51                   	push   ecx
c000caeb:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000caef:	51                   	push   ecx
c000caf0:	6a 00                	push   0x0
c000caf2:	6a 01                	push   0x1
c000caf4:	50                   	push   eax
c000caf5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caf8:	83 c4 20             	add    esp,0x20
c000cafb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cb00:	74 26                	je     c000cb28 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb02:	43                   	inc    ebx
c000cb03:	52                   	push   edx
c000cb04:	57                   	push   edi
c000cb05:	56                   	push   esi
c000cb06:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb09:	e8 e0 b6 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cb0e:	83 c6 2b             	add    esi,0x2b
c000cb11:	83 d7 00             	adc    edi,0x0
c000cb14:	83 c4 10             	add    esp,0x10
c000cb17:	eb c0                	jmp    c000cad9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cb19:	50                   	push   eax
c000cb1a:	50                   	push   eax
c000cb1b:	6a 40                	push   0x40
c000cb1d:	55                   	push   ebp
c000cb1e:	e8 0e ff ff ff       	call   c000ca31 <CmExpand(Reghive_Tag*, int)>
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	89 c3                	mov    ebx,eax
c000cb28:	83 c4 1c             	add    esp,0x1c
c000cb2b:	89 d8                	mov    eax,ebx
c000cb2d:	5b                   	pop    ebx
c000cb2e:	5e                   	pop    esi
c000cb2f:	5f                   	pop    edi
c000cb30:	5d                   	pop    ebp
c000cb31:	c3                   	ret    

c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cb32:	55                   	push   ebp
c000cb33:	57                   	push   edi
c000cb34:	56                   	push   esi
c000cb35:	53                   	push   ebx
c000cb36:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb3c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb43:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb4a:	e8 5d ff ff ff       	call   c000caac <CmFindUnusedExtent(Reghive_Tag*)>
c000cb4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb53:	83 c4 0c             	add    esp,0xc
c000cb56:	6a 2b                	push   0x2b
c000cb58:	6a 00                	push   0x0
c000cb5a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb5e:	55                   	push   ebp
c000cb5f:	e8 8c 39 ff ff       	call   c00004f0 <memset>
c000cb64:	83 c4 10             	add    esp,0x10
c000cb67:	85 db                	test   ebx,ebx
c000cb69:	74 12                	je     c000cb7d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb6b:	51                   	push   ecx
c000cb6c:	55                   	push   ebp
c000cb6d:	53                   	push   ebx
c000cb6e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb75:	e8 0e fd ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb81:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb88:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb8f:	85 db                	test   ebx,ebx
c000cb91:	74 49                	je     c000cbdc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb93:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb98:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cba1:	c1 e0 08             	shl    eax,0x8
c000cba4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cbaa:	09 c8                	or     eax,ecx
c000cbac:	74 11                	je     c000cbbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cbae:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cbb2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cbb6:	c1 e8 10             	shr    eax,0x10
c000cbb9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cbbd:	eb 0f                	jmp    c000cbce <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cbbf:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbc4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbc9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbce:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cbd2:	c1 ea 08             	shr    edx,0x8
c000cbd5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cbda:	eb 0f                	jmp    c000cbeb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cbdc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbe1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbe6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbeb:	52                   	push   edx
c000cbec:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cbf0:	50                   	push   eax
c000cbf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbfc:	e8 ab fd ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	85 db                	test   ebx,ebx
c000cc06:	74 12                	je     c000cc1a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cc08:	50                   	push   eax
c000cc09:	55                   	push   ebp
c000cc0a:	53                   	push   ebx
c000cc0b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc12:	e8 95 fd ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc17:	83 c4 10             	add    esp,0x10
c000cc1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc1e:	83 c4 7c             	add    esp,0x7c
c000cc21:	5b                   	pop    ebx
c000cc22:	5e                   	pop    esi
c000cc23:	5f                   	pop    edi
c000cc24:	5d                   	pop    ebp
c000cc25:	c3                   	ret    

c000cc26 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cc26:	55                   	push   ebp
c000cc27:	57                   	push   edi
c000cc28:	56                   	push   esi
c000cc29:	53                   	push   ebx
c000cc2a:	bb 27 00 00 00       	mov    ebx,0x27
c000cc2f:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc35:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc3c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc43:	e8 28 39 ff ff       	call   c0000570 <strlen>
c000cc48:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc4b:	89 c8                	mov    eax,ecx
c000cc4d:	99                   	cdq    
c000cc4e:	f7 fb                	idiv   ebx
c000cc50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc5d:	7e 10                	jle    c000cc6f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc5f:	83 ec 0c             	sub    esp,0xc
c000cc62:	68 d2 1f 02 c0       	push   0xc0021fd2
c000cc67:	e8 56 20 00 00       	call   c000ecc2 <KePanic(char const*)>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	31 ff                	xor    edi,edi
c000cc71:	50                   	push   eax
c000cc72:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc76:	53                   	push   ebx
c000cc77:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc7e:	56                   	push   esi
c000cc7f:	e8 04 fc ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cc8b:	89 d0                	mov    eax,edx
c000cc8d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cc91:	c1 e0 08             	shl    eax,0x8
c000cc94:	09 c2                	or     edx,eax
c000cc96:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc9a:	c1 e2 08             	shl    edx,0x8
c000cc9d:	09 c2                	or     edx,eax
c000cc9f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000cca3:	7e 76                	jle    c000cd1b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000cca5:	85 d2                	test   edx,edx
c000cca7:	75 25                	jne    c000ccce <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cca9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000ccae:	8d 44 24 45          	lea    eax,[esp+0x45]
c000ccb2:	50                   	push   eax
c000ccb3:	6a 00                	push   0x0
c000ccb5:	6a 00                	push   0x0
c000ccb7:	56                   	push   esi
c000ccb8:	e8 75 fe ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ccbd:	83 c4 10             	add    esp,0x10
c000ccc0:	89 c2                	mov    edx,eax
c000ccc2:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ccc5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000ccc8:	c1 f8 10             	sar    eax,0x10
c000cccb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000ccce:	55                   	push   ebp
c000cccf:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000ccd3:	55                   	push   ebp
c000ccd4:	52                   	push   edx
c000ccd5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ccd9:	56                   	push   esi
c000ccda:	e8 a9 fb ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ccdf:	83 c4 0c             	add    esp,0xc
c000cce2:	6a 27                	push   0x27
c000cce4:	6a 00                	push   0x0
c000cce6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccea:	51                   	push   ecx
c000cceb:	e8 00 38 ff ff       	call   c00004f0 <memset>
c000ccf0:	83 c4 0c             	add    esp,0xc
c000ccf3:	6b c7 27             	imul   eax,edi,0x27
c000ccf6:	6a 27                	push   0x27
c000ccf8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ccff:	50                   	push   eax
c000cd00:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd04:	51                   	push   ecx
c000cd05:	e8 76 39 ff ff       	call   c0000680 <strncpy>
c000cd0a:	83 c4 0c             	add    esp,0xc
c000cd0d:	55                   	push   ebp
c000cd0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd12:	52                   	push   edx
c000cd13:	56                   	push   esi
c000cd14:	e8 93 fc ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd19:	eb 19                	jmp    c000cd34 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cd1b:	85 d2                	test   edx,edx
c000cd1d:	74 18                	je     c000cd37 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cd1f:	51                   	push   ecx
c000cd20:	51                   	push   ecx
c000cd21:	52                   	push   edx
c000cd22:	56                   	push   esi
c000cd23:	e8 c0 fc ff ff       	call   c000c9e8 <CmFreeExtent(Reghive_Tag*, int)>
c000cd28:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cd2c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cd30:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cd34:	83 c4 10             	add    esp,0x10
c000cd37:	47                   	inc    edi
c000cd38:	83 c3 03             	add    ebx,0x3
c000cd3b:	83 ff 07             	cmp    edi,0x7
c000cd3e:	0f 85 43 ff ff ff    	jne    c000cc87 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd44:	50                   	push   eax
c000cd45:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd49:	50                   	push   eax
c000cd4a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd51:	56                   	push   esi
c000cd52:	e8 55 fc ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd57:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd5d:	5b                   	pop    ebx
c000cd5e:	5e                   	pop    esi
c000cd5f:	5f                   	pop    edi
c000cd60:	5d                   	pop    ebp
c000cd61:	c3                   	ret    

c000cd62 <CmGetMatch(char*, char*, bool, bool*)>:
c000cd62:	56                   	push   esi
c000cd63:	53                   	push   ebx
c000cd64:	50                   	push   eax
c000cd65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd69:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd6e:	74 25                	je     c000cd95 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd70:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd73:	31 db                	xor    ebx,ebx
c000cd75:	50                   	push   eax
c000cd76:	50                   	push   eax
c000cd77:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c000cd7e:	50                   	push   eax
c000cd7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd83:	e8 c8 39 ff ff       	call   c0000750 <strcmp>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	85 c0                	test   eax,eax
c000cd8d:	74 2e                	je     c000cdbd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd8f:	43                   	inc    ebx
c000cd90:	83 fb 3f             	cmp    ebx,0x3f
c000cd93:	75 e0                	jne    c000cd75 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cd95:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd98:	31 db                	xor    ebx,ebx
c000cd9a:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c000cda1:	51                   	push   ecx
c000cda2:	51                   	push   ecx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cda8:	e8 a3 39 ff ff       	call   c0000750 <strcmp>
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	85 c0                	test   eax,eax
c000cdb2:	74 09                	je     c000cdbd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cdb4:	43                   	inc    ebx
c000cdb5:	83 fb 3f             	cmp    ebx,0x3f
c000cdb8:	75 e0                	jne    c000cd9a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cdba:	83 cb ff             	or     ebx,0xffffffff
c000cdbd:	89 d8                	mov    eax,ebx
c000cdbf:	5a                   	pop    edx
c000cdc0:	5b                   	pop    ebx
c000cdc1:	5e                   	pop    esi
c000cdc2:	c3                   	ret    

c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cdc3:	55                   	push   ebp
c000cdc4:	31 c0                	xor    eax,eax
c000cdc6:	57                   	push   edi
c000cdc7:	56                   	push   esi
c000cdc8:	53                   	push   ebx
c000cdc9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdcd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cdd1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cdd3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cdd7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cdda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdde:	83 fd 1f             	cmp    ebp,0x1f
c000cde1:	7f 0b                	jg     c000cdee <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cde3:	0f b6 c2             	movzx  eax,dl
c000cde6:	d3 e0                	shl    eax,cl
c000cde8:	09 07                	or     DWORD PTR [edi],eax
c000cdea:	b0 01                	mov    al,0x1
c000cdec:	01 33                	add    DWORD PTR [ebx],esi
c000cdee:	5b                   	pop    ebx
c000cdef:	5e                   	pop    esi
c000cdf0:	5f                   	pop    edi
c000cdf1:	5d                   	pop    ebp
c000cdf2:	c3                   	ret    

c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cdf3:	57                   	push   edi
c000cdf4:	56                   	push   esi
c000cdf5:	53                   	push   ebx
c000cdf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cdfa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cdfe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ce02:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce06:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000ce08:	7c 17                	jl     c000ce21 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000ce0a:	8b 17                	mov    edx,DWORD PTR [edi]
c000ce0c:	b8 01 00 00 00       	mov    eax,0x1
c000ce11:	d3 e0                	shl    eax,cl
c000ce13:	48                   	dec    eax
c000ce14:	21 d0                	and    eax,edx
c000ce16:	d3 ea                	shr    edx,cl
c000ce18:	89 17                	mov    DWORD PTR [edi],edx
c000ce1a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000ce1c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce1f:	eb 05                	jmp    c000ce26 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000ce21:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce24:	31 c0                	xor    eax,eax
c000ce26:	5b                   	pop    ebx
c000ce27:	5e                   	pop    esi
c000ce28:	5f                   	pop    edi
c000ce29:	c3                   	ret    

c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000ce2a:	83 ec 40             	sub    esp,0x40
c000ce2d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce31:	50                   	push   eax
c000ce32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce3a:	e8 49 fa ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce3f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce43:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce47:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce4b:	89 10                	mov    DWORD PTR [eax],edx
c000ce4d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ce50:	83 c4 4c             	add    esp,0x4c
c000ce53:	c3                   	ret    

c000ce54 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000ce54:	55                   	push   ebp
c000ce55:	57                   	push   edi
c000ce56:	56                   	push   esi
c000ce57:	53                   	push   ebx
c000ce58:	83 ec 40             	sub    esp,0x40
c000ce5b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce5f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce63:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce67:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce6b:	53                   	push   ebx
c000ce6c:	56                   	push   esi
c000ce6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce71:	e8 12 fa ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce76:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce7a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce7e:	83 c4 0c             	add    esp,0xc
c000ce81:	53                   	push   ebx
c000ce82:	56                   	push   esi
c000ce83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce87:	e8 20 fb ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce8c:	83 c4 4c             	add    esp,0x4c
c000ce8f:	5b                   	pop    ebx
c000ce90:	5e                   	pop    esi
c000ce91:	5f                   	pop    edi
c000ce92:	5d                   	pop    ebp
c000ce93:	c3                   	ret    

c000ce94 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000ce94:	55                   	push   ebp
c000ce95:	57                   	push   edi
c000ce96:	56                   	push   esi
c000ce97:	31 f6                	xor    esi,esi
c000ce99:	53                   	push   ebx
c000ce9a:	31 db                	xor    ebx,ebx
c000ce9c:	83 ec 40             	sub    esp,0x40
c000ce9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cea7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ceaf:	6a 12                	push   0x12
c000ceb1:	68 ee 00 00 00       	push   0xee
c000ceb6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ceba:	e8 31 36 ff ff       	call   c00004f0 <memset>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000cec6:	6a 08                	push   0x8
c000cec8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cecc:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ced0:	50                   	push   eax
c000ced1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ced5:	55                   	push   ebp
c000ced6:	57                   	push   edi
c000ced7:	e8 e7 fe ff ff       	call   c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cedc:	83 c4 10             	add    esp,0x10
c000cedf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cee3:	50                   	push   eax
c000cee4:	6a 06                	push   0x6
c000cee6:	55                   	push   ebp
c000cee7:	57                   	push   edi
c000cee8:	e8 06 ff ff ff       	call   c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000ceed:	83 c4 10             	add    esp,0x10
c000cef0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cef5:	74 07                	je     c000cefe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cef7:	46                   	inc    esi
c000cef8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cefc:	eb e1                	jmp    c000cedf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cefe:	43                   	inc    ebx
c000ceff:	83 fb 12             	cmp    ebx,0x12
c000cf02:	75 c2                	jne    c000cec6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cf04:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf08:	31 db                	xor    ebx,ebx
c000cf0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000cf0d:	50                   	push   eax
c000cf0e:	50                   	push   eax
c000cf0f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000cf14:	43                   	inc    ebx
c000cf15:	8d 04 85 a0 3e 02 c0 	lea    eax,[eax*4-0x3ffdc160]
c000cf1c:	50                   	push   eax
c000cf1d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf21:	e8 1a 39 ff ff       	call   c0000840 <strcat>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	83 fb 18             	cmp    ebx,0x18
c000cf2c:	75 df                	jne    c000cf0d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cf2e:	83 c4 3c             	add    esp,0x3c
c000cf31:	31 c0                	xor    eax,eax
c000cf33:	5b                   	pop    ebx
c000cf34:	5e                   	pop    esi
c000cf35:	5f                   	pop    edi
c000cf36:	5d                   	pop    ebp
c000cf37:	c3                   	ret    

c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cf38:	83 ec 40             	sub    esp,0x40
c000cf3b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf3f:	50                   	push   eax
c000cf40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf48:	e8 3b f9 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf4d:	58                   	pop    eax
c000cf4e:	5a                   	pop    edx
c000cf4f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cf53:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cf57:	50                   	push   eax
c000cf58:	e8 37 ff ff ff       	call   c000ce94 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf5d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf62:	83 c4 4c             	add    esp,0x4c
c000cf65:	c3                   	ret    

c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf66:	55                   	push   ebp
c000cf67:	57                   	push   edi
c000cf68:	56                   	push   esi
c000cf69:	53                   	push   ebx
c000cf6a:	31 db                	xor    ebx,ebx
c000cf6c:	83 ec 70             	sub    esp,0x70
c000cf6f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf76:	6a 30                	push   0x30
c000cf78:	6a 00                	push   0x0
c000cf7a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf7e:	56                   	push   esi
c000cf7f:	e8 6c 35 ff ff       	call   c00004f0 <memset>
c000cf84:	83 c4 10             	add    esp,0x10
c000cf87:	83 ec 0c             	sub    esp,0xc
c000cf8a:	57                   	push   edi
c000cf8b:	e8 e0 35 ff ff       	call   c0000570 <strlen>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	39 d8                	cmp    eax,ebx
c000cf95:	76 16                	jbe    c000cfad <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cf97:	83 ec 0c             	sub    esp,0xc
c000cf9a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cf9e:	50                   	push   eax
c000cf9f:	e8 8c 39 ff ff       	call   c0000930 <toupper>
c000cfa4:	83 c4 10             	add    esp,0x10
c000cfa7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cfaa:	43                   	inc    ebx
c000cfab:	eb da                	jmp    c000cf87 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cfad:	31 f6                	xor    esi,esi
c000cfaf:	52                   	push   edx
c000cfb0:	31 ff                	xor    edi,edi
c000cfb2:	6a 18                	push   0x18
c000cfb4:	6a 3f                	push   0x3f
c000cfb6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfba:	50                   	push   eax
c000cfbb:	e8 30 35 ff ff       	call   c00004f0 <memset>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000cfc7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000cfcb:	84 c0                	test   al,al
c000cfcd:	0f 84 b0 00 00 00    	je     c000d083 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000cfd3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cfd7:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000cfdc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000cfe0:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000cfe5:	8d 6e 01             	lea    ebp,[esi+0x1]
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cfef:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cff3:	53                   	push   ebx
c000cff4:	e8 77 35 ff ff       	call   c0000570 <strlen>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	85 c0                	test   eax,eax
c000cffe:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d002:	74 0b                	je     c000d00f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d004:	50                   	push   eax
c000d005:	6a 01                	push   0x1
c000d007:	53                   	push   ebx
c000d008:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d00c:	50                   	push   eax
c000d00d:	eb 0a                	jmp    c000d019 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d00f:	50                   	push   eax
c000d010:	6a 00                	push   0x0
c000d012:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d016:	50                   	push   eax
c000d017:	6a 00                	push   0x0
c000d019:	e8 44 fd ff ff       	call   c000cd62 <CmGetMatch(char*, char*, bool, bool*)>
c000d01e:	83 c4 10             	add    esp,0x10
c000d021:	83 f8 ff             	cmp    eax,0xffffffff
c000d024:	75 1a                	jne    c000d040 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d026:	83 ec 0c             	sub    esp,0xc
c000d029:	68 e7 1f 02 c0       	push   0xc0021fe7
c000d02e:	e8 8f 1c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	b8 02 00 00 00       	mov    eax,0x2
c000d03b:	e9 bc 00 00 00       	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d040:	83 ff 18             	cmp    edi,0x18
c000d043:	75 1a                	jne    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d045:	83 ec 0c             	sub    esp,0xc
c000d048:	68 fc 1f 02 c0       	push   0xc0021ffc
c000d04d:	e8 70 1c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	b8 01 00 00 00       	mov    eax,0x1
c000d05a:	e9 9d 00 00 00       	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d05f:	47                   	inc    edi
c000d060:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d065:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d069:	74 02                	je     c000d06d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d06b:	89 ee                	mov    esi,ebp
c000d06d:	83 ec 0c             	sub    esp,0xc
c000d070:	53                   	push   ebx
c000d071:	e8 fa 34 ff ff       	call   c0000570 <strlen>
c000d076:	83 c4 10             	add    esp,0x10
c000d079:	85 c0                	test   eax,eax
c000d07b:	74 06                	je     c000d083 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d07d:	46                   	inc    esi
c000d07e:	e9 40 ff ff ff       	jmp    c000cfc3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d083:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d08b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d093:	31 f6                	xor    esi,esi
c000d095:	50                   	push   eax
c000d096:	31 ff                	xor    edi,edi
c000d098:	6a 12                	push   0x12
c000d09a:	68 ee 00 00 00       	push   0xee
c000d09f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d0a6:	e8 45 34 ff ff       	call   c00004f0 <memset>
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	83 fe 17             	cmp    esi,0x17
c000d0b1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d0b5:	7e 26                	jle    c000d0dd <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d0b7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d0bb:	50                   	push   eax
c000d0bc:	6a 08                	push   0x8
c000d0be:	55                   	push   ebp
c000d0bf:	53                   	push   ebx
c000d0c0:	e8 2e fd ff ff       	call   c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d0c5:	83 c4 10             	add    esp,0x10
c000d0c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0cd:	74 26                	je     c000d0f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d0cf:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d0d6:	4e                   	dec    esi
c000d0d7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d0da:	47                   	inc    edi
c000d0db:	eb 1c                	jmp    c000d0f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0dd:	6a 06                	push   0x6
c000d0df:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d0e4:	50                   	push   eax
c000d0e5:	55                   	push   ebp
c000d0e6:	53                   	push   ebx
c000d0e7:	e8 d7 fc ff ff       	call   c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	84 c0                	test   al,al
c000d0f1:	75 06                	jne    c000d0f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0f3:	eb c2                	jmp    c000d0b7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d0f5:	31 c0                	xor    eax,eax
c000d0f7:	eb 03                	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d0f9:	46                   	inc    esi
c000d0fa:	eb b2                	jmp    c000d0ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d0fc:	83 c4 6c             	add    esp,0x6c
c000d0ff:	5b                   	pop    ebx
c000d100:	5e                   	pop    esi
c000d101:	5f                   	pop    edi
c000d102:	5d                   	pop    ebp
c000d103:	c3                   	ret    

c000d104 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d104:	53                   	push   ebx
c000d105:	83 ec 3c             	sub    esp,0x3c
c000d108:	6a 2b                	push   0x2b
c000d10a:	6a 00                	push   0x0
c000d10c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d110:	53                   	push   ebx
c000d111:	e8 da 33 ff ff       	call   c00004f0 <memset>
c000d116:	58                   	pop    eax
c000d117:	5a                   	pop    edx
c000d118:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d11c:	50                   	push   eax
c000d11d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d121:	e8 40 fe ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d126:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d12b:	83 c4 0c             	add    esp,0xc
c000d12e:	6a 15                	push   0x15
c000d130:	6a 00                	push   0x0
c000d132:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d136:	50                   	push   eax
c000d137:	e8 b4 33 ff ff       	call   c00004f0 <memset>
c000d13c:	53                   	push   ebx
c000d13d:	6a 00                	push   0x0
c000d13f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d143:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d147:	e8 e6 f9 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d14c:	83 c4 58             	add    esp,0x58
c000d14f:	5b                   	pop    ebx
c000d150:	c3                   	ret    

c000d151 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d151:	56                   	push   esi
c000d152:	53                   	push   ebx
c000d153:	83 ec 48             	sub    esp,0x48
c000d156:	6a 12                	push   0x12
c000d158:	68 ff 00 00 00       	push   0xff
c000d15d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d161:	56                   	push   esi
c000d162:	e8 89 33 ff ff       	call   c00004f0 <memset>
c000d167:	5a                   	pop    edx
c000d168:	59                   	pop    ecx
c000d169:	56                   	push   esi
c000d16a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d16e:	e8 f3 fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d173:	83 c4 10             	add    esp,0x10
c000d176:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d17a:	85 db                	test   ebx,ebx
c000d17c:	74 42                	je     c000d1c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d17e:	50                   	push   eax
c000d17f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d183:	50                   	push   eax
c000d184:	53                   	push   ebx
c000d185:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d189:	e8 fa f6 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d18e:	83 c4 0c             	add    esp,0xc
c000d191:	6a 12                	push   0x12
c000d193:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	e8 e2 31 ff ff       	call   c0000380 <memcmp>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	85 c0                	test   eax,eax
c000d1a3:	74 1e                	je     c000d1c3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d1a5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d1aa:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d1af:	c1 e3 08             	shl    ebx,0x8
c000d1b2:	09 d8                	or     eax,ebx
c000d1b4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d1b9:	c1 e3 10             	shl    ebx,0x10
c000d1bc:	09 c3                	or     ebx,eax
c000d1be:	eb ba                	jmp    c000d17a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d1c0:	83 cb ff             	or     ebx,0xffffffff
c000d1c3:	89 d8                	mov    eax,ebx
c000d1c5:	83 c4 44             	add    esp,0x44
c000d1c8:	5b                   	pop    ebx
c000d1c9:	5e                   	pop    esi
c000d1ca:	c3                   	ret    

c000d1cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d1cb:	57                   	push   edi
c000d1cc:	56                   	push   esi
c000d1cd:	53                   	push   ebx
c000d1ce:	83 ec 34             	sub    esp,0x34
c000d1d1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d1d5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d1d9:	6a 2b                	push   0x2b
c000d1db:	6a 00                	push   0x0
c000d1dd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d1e1:	53                   	push   ebx
c000d1e2:	e8 09 33 ff ff       	call   c00004f0 <memset>
c000d1e7:	58                   	pop    eax
c000d1e8:	5a                   	pop    edx
c000d1e9:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1ed:	50                   	push   eax
c000d1ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1f2:	e8 6f fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1f7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d1fb:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d1ff:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d203:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d207:	53                   	push   ebx
c000d208:	6a 00                	push   0x0
c000d20a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d20e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d212:	e8 1b f9 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d217:	83 c4 50             	add    esp,0x50
c000d21a:	5b                   	pop    ebx
c000d21b:	5e                   	pop    esi
c000d21c:	5f                   	pop    edi
c000d21d:	c3                   	ret    

c000d21e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d21e:	55                   	push   ebp
c000d21f:	57                   	push   edi
c000d220:	56                   	push   esi
c000d221:	53                   	push   ebx
c000d222:	83 ec 40             	sub    esp,0x40
c000d225:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d229:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d22d:	6a 2b                	push   0x2b
c000d22f:	6a 00                	push   0x0
c000d231:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d235:	56                   	push   esi
c000d236:	e8 b5 32 ff ff       	call   c00004f0 <memset>
c000d23b:	5f                   	pop    edi
c000d23c:	89 ef                	mov    edi,ebp
c000d23e:	58                   	pop    eax
c000d23f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d243:	50                   	push   eax
c000d244:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d248:	e8 19 fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d24d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d252:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d257:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d25c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d261:	83 c4 10             	add    esp,0x10
c000d264:	85 ed                	test   ebp,ebp
c000d266:	74 14                	je     c000d27c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d268:	51                   	push   ecx
c000d269:	51                   	push   ecx
c000d26a:	57                   	push   edi
c000d26b:	53                   	push   ebx
c000d26c:	e8 09 f7 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	85 c0                	test   eax,eax
c000d276:	74 04                	je     c000d27c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d278:	89 c7                	mov    edi,eax
c000d27a:	eb e8                	jmp    c000d264 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d27c:	56                   	push   esi
c000d27d:	6a 00                	push   0x0
c000d27f:	57                   	push   edi
c000d280:	53                   	push   ebx
c000d281:	e8 ac f8 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d286:	83 c4 0c             	add    esp,0xc
c000d289:	89 c7                	mov    edi,eax
c000d28b:	56                   	push   esi
c000d28c:	50                   	push   eax
c000d28d:	53                   	push   ebx
c000d28e:	e8 f5 f5 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d293:	58                   	pop    eax
c000d294:	5a                   	pop    edx
c000d295:	6a 6c                	push   0x6c
c000d297:	6a 00                	push   0x0
c000d299:	6a 00                	push   0x0
c000d29b:	68 0d 20 02 c0       	push   0xc002200d
c000d2a0:	57                   	push   edi
c000d2a1:	53                   	push   ebx
c000d2a2:	e8 24 ff ff ff       	call   c000d1cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d2a7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d2ab:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d2af:	c1 e8 10             	shr    eax,0x10
c000d2b2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d2b6:	83 c4 1c             	add    esp,0x1c
c000d2b9:	56                   	push   esi
c000d2ba:	57                   	push   edi
c000d2bb:	53                   	push   ebx
c000d2bc:	e8 eb f6 ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d2c1:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d2c6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d2cb:	c1 e0 08             	shl    eax,0x8
c000d2ce:	09 c2                	or     edx,eax
c000d2d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d2d5:	83 c4 4c             	add    esp,0x4c
c000d2d8:	c1 e0 10             	shl    eax,0x10
c000d2db:	5b                   	pop    ebx
c000d2dc:	09 d0                	or     eax,edx
c000d2de:	5e                   	pop    esi
c000d2df:	5f                   	pop    edi
c000d2e0:	5d                   	pop    ebp
c000d2e1:	c3                   	ret    

c000d2e2 <zStrtok(char*, char const*)>:
c000d2e2:	55                   	push   ebp
c000d2e3:	57                   	push   edi
c000d2e4:	56                   	push   esi
c000d2e5:	53                   	push   ebx
c000d2e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2ee:	85 db                	test   ebx,ebx
c000d2f0:	74 2f                	je     c000d321 <zStrtok(char*, char const*)+0x3f>
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	75 09                	jne    c000d2ff <zStrtok(char*, char const*)+0x1d>
c000d2f6:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d2fb:	85 c0                	test   eax,eax
c000d2fd:	74 50                	je     c000d34f <zStrtok(char*, char const*)+0x6d>
c000d2ff:	31 c9                	xor    ecx,ecx
c000d301:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d305:	74 03                	je     c000d30a <zStrtok(char*, char const*)+0x28>
c000d307:	41                   	inc    ecx
c000d308:	eb f7                	jmp    c000d301 <zStrtok(char*, char const*)+0x1f>
c000d30a:	31 d2                	xor    edx,edx
c000d30c:	39 ca                	cmp    edx,ecx
c000d30e:	74 15                	je     c000d325 <zStrtok(char*, char const*)+0x43>
c000d310:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d314:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d317:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d31a:	39 ee                	cmp    esi,ebp
c000d31c:	74 13                	je     c000d331 <zStrtok(char*, char const*)+0x4f>
c000d31e:	42                   	inc    edx
c000d31f:	eb eb                	jmp    c000d30c <zStrtok(char*, char const*)+0x2a>
c000d321:	31 c0                	xor    eax,eax
c000d323:	eb 2a                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d325:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d32f:	eb 1e                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d331:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d334:	39 ce                	cmp    esi,ecx
c000d336:	75 0a                	jne    c000d342 <zStrtok(char*, char const*)+0x60>
c000d338:	40                   	inc    eax
c000d339:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d33e:	89 d8                	mov    eax,ebx
c000d340:	eb 0d                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d342:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d346:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d349:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d34f:	5b                   	pop    ebx
c000d350:	5e                   	pop    esi
c000d351:	5f                   	pop    edi
c000d352:	5d                   	pop    ebp
c000d353:	c3                   	ret    

c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d354:	57                   	push   edi
c000d355:	56                   	push   esi
c000d356:	53                   	push   ebx
c000d357:	81 ec 08 01 00 00    	sub    esp,0x108
c000d35d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d364:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d36b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d36f:	53                   	push   ebx
c000d370:	e8 cb 32 ff ff       	call   c0000640 <strcpy>
c000d375:	59                   	pop    ecx
c000d376:	5e                   	pop    esi
c000d377:	68 94 2d 02 c0       	push   0xc0022d94
c000d37c:	53                   	push   ebx
c000d37d:	bb 01 00 00 00       	mov    ebx,0x1
c000d382:	e8 5b ff ff ff       	call   c000d2e2 <zStrtok(char*, char const*)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	85 c0                	test   eax,eax
c000d38c:	74 3b                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d38e:	52                   	push   edx
c000d38f:	50                   	push   eax
c000d390:	6a 01                	push   0x1
c000d392:	57                   	push   edi
c000d393:	e8 b9 fd ff ff       	call   c000d151 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d398:	59                   	pop    ecx
c000d399:	89 c3                	mov    ebx,eax
c000d39b:	5e                   	pop    esi
c000d39c:	68 94 2d 02 c0       	push   0xc0022d94
c000d3a1:	6a 00                	push   0x0
c000d3a3:	e8 3a ff ff ff       	call   c000d2e2 <zStrtok(char*, char const*)>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	89 c6                	mov    esi,eax
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	74 18                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3b1:	52                   	push   edx
c000d3b2:	52                   	push   edx
c000d3b3:	53                   	push   ebx
c000d3b4:	57                   	push   edi
c000d3b5:	e8 81 f5 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c000d3ba:	83 c4 10             	add    esp,0x10
c000d3bd:	89 c3                	mov    ebx,eax
c000d3bf:	83 f8 ff             	cmp    eax,0xffffffff
c000d3c2:	74 05                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3c4:	50                   	push   eax
c000d3c5:	56                   	push   esi
c000d3c6:	53                   	push   ebx
c000d3c7:	eb c9                	jmp    c000d392 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d3c9:	81 c4 00 01 00 00    	add    esp,0x100
c000d3cf:	89 d8                	mov    eax,ebx
c000d3d1:	5b                   	pop    ebx
c000d3d2:	5e                   	pop    esi
c000d3d3:	5f                   	pop    edi
c000d3d4:	c3                   	ret    

c000d3d5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d3d5:	55                   	push   ebp
c000d3d6:	57                   	push   edi
c000d3d7:	56                   	push   esi
c000d3d8:	53                   	push   ebx
c000d3d9:	83 ec 5c             	sub    esp,0x5c
c000d3dc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d3e0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d3e4:	85 db                	test   ebx,ebx
c000d3e6:	0f 8e 84 00 00 00    	jle    c000d470 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d3ec:	31 ed                	xor    ebp,ebp
c000d3ee:	57                   	push   edi
c000d3ef:	6a 32                	push   0x32
c000d3f1:	6a 00                	push   0x0
c000d3f3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d3f7:	57                   	push   edi
c000d3f8:	e8 f3 30 ff ff       	call   c00004f0 <memset>
c000d3fd:	83 c4 0c             	add    esp,0xc
c000d400:	57                   	push   edi
c000d401:	53                   	push   ebx
c000d402:	56                   	push   esi
c000d403:	e8 30 fb ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d408:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d413:	7d 13                	jge    c000d428 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d415:	83 ec 0c             	sub    esp,0xc
c000d418:	45                   	inc    ebp
c000d419:	68 30 32 02 c0       	push   0xc0023230
c000d41e:	e8 41 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	eb e7                	jmp    c000d40f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d428:	51                   	push   ecx
c000d429:	57                   	push   edi
c000d42a:	53                   	push   ebx
c000d42b:	68 13 20 02 c0       	push   0xc0022013
c000d430:	e8 2f 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d435:	83 c4 10             	add    esp,0x10
c000d438:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d43d:	75 1e                	jne    c000d45d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d43f:	52                   	push   edx
c000d440:	52                   	push   edx
c000d441:	53                   	push   ebx
c000d442:	56                   	push   esi
c000d443:	e8 f3 f4 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c000d448:	83 c4 0c             	add    esp,0xc
c000d44b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d44f:	8d 51 04             	lea    edx,[ecx+0x4]
c000d452:	52                   	push   edx
c000d453:	50                   	push   eax
c000d454:	56                   	push   esi
c000d455:	e8 7b ff ff ff       	call   c000d3d5 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	50                   	push   eax
c000d45e:	50                   	push   eax
c000d45f:	53                   	push   ebx
c000d460:	56                   	push   esi
c000d461:	e8 14 f5 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	89 c3                	mov    ebx,eax
c000d46b:	e9 74 ff ff ff       	jmp    c000d3e4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d470:	83 c4 5c             	add    esp,0x5c
c000d473:	5b                   	pop    ebx
c000d474:	5e                   	pop    esi
c000d475:	5f                   	pop    edi
c000d476:	5d                   	pop    ebp
c000d477:	c3                   	ret    

c000d478 <CmSplitFinalSlashInPlace(char*)>:
c000d478:	53                   	push   ebx
c000d479:	83 ec 14             	sub    esp,0x14
c000d47c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d480:	53                   	push   ebx
c000d481:	e8 ea 30 ff ff       	call   c0000570 <strlen>
c000d486:	83 c4 10             	add    esp,0x10
c000d489:	48                   	dec    eax
c000d48a:	85 c0                	test   eax,eax
c000d48c:	74 15                	je     c000d4a3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d48e:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d491:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d495:	75 09                	jne    c000d4a0 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d497:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d49a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d49e:	eb 05                	jmp    c000d4a5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d4a0:	48                   	dec    eax
c000d4a1:	eb e7                	jmp    c000d48a <CmSplitFinalSlashInPlace(char*)+0x12>
c000d4a3:	31 c0                	xor    eax,eax
c000d4a5:	83 c4 08             	add    esp,0x8
c000d4a8:	5b                   	pop    ebx
c000d4a9:	c3                   	ret    
c000d4aa:	66 90                	xchg   ax,ax

c000d4ac <Krnl::handlePowerButton()>:
c000d4ac:	83 ec 0c             	sub    esp,0xc
c000d4af:	e8 39 21 00 00       	call   c000f5ed <KeHandlePowerButton()>
c000d4b4:	90                   	nop
c000d4b5:	83 c4 0c             	add    esp,0xc
c000d4b8:	c3                   	ret    
c000d4b9:	8d 76 00             	lea    esi,[esi+0x0]

c000d4bc <Krnl::handleSleepButton()>:
c000d4bc:	83 ec 0c             	sub    esp,0xc
c000d4bf:	e8 41 21 00 00       	call   c000f605 <KeHandleSleepButton()>
c000d4c4:	90                   	nop
c000d4c5:	83 c4 0c             	add    esp,0xc
c000d4c8:	c3                   	ret    
c000d4c9:	90                   	nop

c000d4ca <Computer::close(int, int, void*)>:
c000d4ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d4cf:	c3                   	ret    

c000d4d0 <Computer::open(int, int, void*)>:
c000d4d0:	56                   	push   esi
c000d4d1:	53                   	push   ebx
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d4dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4e0:	0f 94 05 80 45 02 c0 	sete   BYTE PTR ds:0xc0024580
c000d4e7:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d4ed:	74 10                	je     c000d4ff <Computer::open(int, int, void*)+0x2f>
c000d4ef:	83 ec 0c             	sub    esp,0xc
c000d4f2:	68 20 20 02 c0       	push   0xc0022020
c000d4f7:	e8 c6 17 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	83 ec 0c             	sub    esp,0xc
c000d502:	68 d8 20 02 c0       	push   0xc00220d8
c000d507:	e8 34 f1 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d50c:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d513:	e8 63 14 00 00       	call   c000e97b <malloc>
c000d518:	89 04 24             	mov    DWORD PTR [esp],eax
c000d51b:	89 c6                	mov    esi,eax
c000d51d:	e8 6a e7 ff ff       	call   c000bc8c <ACPI::ACPI()>
c000d522:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d528:	58                   	pop    eax
c000d529:	5a                   	pop    edx
c000d52a:	56                   	push   esi
c000d52b:	53                   	push   ebx
c000d52c:	e8 11 bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d531:	c7 04 24 f0 20 02 c0 	mov    DWORD PTR [esp],0xc00220f0
c000d538:	e8 03 f1 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d53d:	e8 e1 a6 00 00       	call   c0017c23 <HalEnableNMI()>
c000d542:	e8 11 99 00 00       	call   c0016e58 <HalDetectFeatures()>
c000d547:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d54e:	e8 28 14 00 00       	call   c000e97b <malloc>
c000d553:	89 04 24             	mov    DWORD PTR [esp],eax
c000d556:	89 c6                	mov    esi,eax
c000d558:	e8 83 b1 00 00       	call   c00186e0 <CPU::CPU()>
c000d55d:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d563:	59                   	pop    ecx
c000d564:	58                   	pop    eax
c000d565:	56                   	push   esi
c000d566:	53                   	push   ebx
c000d567:	e8 d6 ba ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d56c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d570:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d576:	8b 10                	mov    edx,DWORD PTR [eax]
c000d578:	51                   	push   ecx
c000d579:	6a 00                	push   0x0
c000d57b:	6a 00                	push   0x0
c000d57d:	50                   	push   eax
c000d57e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d581:	83 c4 14             	add    esp,0x14
c000d584:	68 4c 20 02 c0       	push   0xc002204c
c000d589:	e8 b2 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d58e:	e8 a8 ad 00 00       	call   c001833b <HalInitialiseCoprocessor()>
c000d593:	c7 04 24 0a 21 02 c0 	mov    DWORD PTR [esp],0xc002210a
c000d59a:	e8 a1 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d59f:	c7 04 24 b6 d5 00 c0 	mov    DWORD PTR [esp],0xc000d5b6
c000d5a6:	e8 e1 7d 00 00       	call   c001538c <setupMultitasking(void (*)())>
c000d5ab:	83 c4 14             	add    esp,0x14
c000d5ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5b3:	5b                   	pop    ebx
c000d5b4:	5e                   	pop    esi
c000d5b5:	c3                   	ret    

c000d5b6 <KeFirstTask()>:
c000d5b6:	53                   	push   ebx
c000d5b7:	83 ec 14             	sub    esp,0x14
c000d5ba:	fb                   	sti    
c000d5bb:	68 25 21 02 c0       	push   0xc0022125
c000d5c0:	e8 7b f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d5c5:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d5cc:	e8 aa 13 00 00       	call   c000e97b <malloc>
c000d5d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5d8:	89 c3                	mov    ebx,eax
c000d5da:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d5df:	50                   	push   eax
c000d5e0:	68 3e 21 02 c0       	push   0xc002213e
c000d5e5:	6a 01                	push   0x1
c000d5e7:	53                   	push   ebx
c000d5e8:	e8 4b 7a 00 00       	call   c0015038 <Process::Process(bool, char const*, Process*, char**)>
c000d5ed:	83 c4 20             	add    esp,0x20
c000d5f0:	68 ff 00 00 00       	push   0xff
c000d5f5:	6a 00                	push   0x0
c000d5f7:	68 a5 e2 00 c0       	push   0xc000e2a5
c000d5fc:	53                   	push   ebx
c000d5fd:	e8 5e 7c 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c000d602:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d608:	6a 7a                	push   0x7a
c000d60a:	6a 00                	push   0x0
c000d60c:	68 48 5b 01 c0       	push   0xc0015b48
c000d611:	52                   	push   edx
c000d612:	e8 49 7c 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c000d617:	83 c4 14             	add    esp,0x14
c000d61a:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d61f:	68 70 20 02 c0       	push   0xc0022070
c000d624:	e8 17 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d629:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d630:	e8 dc 20 00 00       	call   c000f711 <KeInitRand()>
c000d635:	e8 dc 88 00 00       	call   c0015f16 <Vm::initialise8086()>
c000d63a:	e8 b1 a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d63f:	c7 04 24 f4 1d 02 c0 	mov    DWORD PTR [esp],0xc0021df4
c000d646:	e8 f5 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d64b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d650:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d656:	8b 10                	mov    edx,DWORD PTR [eax]
c000d658:	6a 00                	push   0x0
c000d65a:	6a 00                	push   0x0
c000d65c:	6a 00                	push   0x0
c000d65e:	50                   	push   eax
c000d65f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d662:	83 c4 14             	add    esp,0x14
c000d665:	68 70 20 02 c0       	push   0xc0022070
c000d66a:	e8 d1 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d66f:	e8 61 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d674:	e8 f5 05 00 00       	call   c000dc6e <KeLoadSystemEnv()>
c000d679:	e8 9f 1f 00 00       	call   c000f61d <KeSetupPowerManager()>
c000d67e:	c7 04 24 94 20 02 c0 	mov    DWORD PTR [esp],0xc0022094
c000d685:	e8 b6 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d68a:	59                   	pop    ecx
c000d68b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d690:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d696:	53                   	push   ebx
c000d697:	e8 c2 ba ff ff       	call   c000915e <Device::loadDriversForAll()>
c000d69c:	c7 04 24 4b 21 02 c0 	mov    DWORD PTR [esp],0xc002214b
c000d6a3:	e8 98 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d6a8:	58                   	pop    eax
c000d6a9:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d6af:	5a                   	pop    edx
c000d6b0:	6a 01                	push   0x1
c000d6b2:	68 5c 21 02 c0       	push   0xc002215c
c000d6b7:	e8 10 73 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c000d6bc:	59                   	pop    ecx
c000d6bd:	5a                   	pop    edx
c000d6be:	53                   	push   ebx
c000d6bf:	50                   	push   eax
c000d6c0:	e8 59 75 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	6a 02                	push   0x2
c000d6cd:	e8 9e 7e 00 00       	call   c0015570 <blockTask(TaskState)>
c000d6d2:	83 c4 10             	add    esp,0x10
c000d6d5:	eb f1                	jmp    c000d6c8 <KeFirstTask()+0x112>
c000d6d7:	90                   	nop

c000d6d8 <Computer::Computer()>:
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6df:	83 ec 08             	sub    esp,0x8
c000d6e2:	68 78 21 02 c0       	push   0xc0022178
c000d6e7:	50                   	push   eax
c000d6e8:	e8 b7 ba ff ff       	call   c00091a4 <Device::Device(char const*)>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c000d6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f9:	89 10                	mov    DWORD PTR [eax],edx
c000d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ff:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d717:	90                   	nop
c000d718:	83 c4 0c             	add    esp,0xc
c000d71b:	c3                   	ret    

c000d71c <KePrepareShutdown()>:
c000d71c:	83 ec 0c             	sub    esp,0xc
c000d71f:	e8 8a ee ff ff       	call   c000c5ae <KeExecuteAtexit()>
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d72c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d732:	50                   	push   eax
c000d733:	e8 72 bb ff ff       	call   c00092aa <Device::closeAll()>
c000d738:	83 c4 1c             	add    esp,0x1c
c000d73b:	c3                   	ret    

c000d73c <KeShutdown()>:
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	e8 d8 ff ff ff       	call   c000d71c <KePrepareShutdown()>
c000d744:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d749:	85 c0                	test   eax,eax
c000d74b:	74 02                	je     c000d74f <KeShutdown()+0x13>
c000d74d:	ff d0                	call   eax
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	68 b4 20 02 c0       	push   0xc00220b4
c000d757:	e8 66 15 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d75c:	83 c4 1c             	add    esp,0x1c
c000d75f:	c3                   	ret    

c000d760 <KeSleep()>:
c000d760:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d765:	85 c0                	test   eax,eax
c000d767:	74 02                	je     c000d76b <KeSleep()+0xb>
c000d769:	ff e0                	jmp    eax
c000d76b:	c3                   	ret    

c000d76c <KeRestart()>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	e8 a8 ff ff ff       	call   c000d71c <KePrepareShutdown()>
c000d774:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d779:	85 c0                	test   eax,eax
c000d77b:	74 02                	je     c000d77f <KeRestart()+0x13>
c000d77d:	ff d0                	call   eax
c000d77f:	e4 64                	in     al,0x64
c000d781:	a8 02                	test   al,0x2
c000d783:	75 fa                	jne    c000d77f <KeRestart()+0x13>
c000d785:	b0 fe                	mov    al,0xfe
c000d787:	e6 64                	out    0x64,al
c000d789:	83 c4 0c             	add    esp,0xc
c000d78c:	c3                   	ret    

c000d78d <KeCalculateCRC32(unsigned char*, int)>:
c000d78d:	53                   	push   ebx
c000d78e:	83 c8 ff             	or     eax,0xffffffff
c000d791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d795:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d799:	01 cb                	add    ebx,ecx
c000d79b:	39 d9                	cmp    ecx,ebx
c000d79d:	74 15                	je     c000d7b4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d79f:	41                   	inc    ecx
c000d7a0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d7a3:	31 c2                	xor    edx,eax
c000d7a5:	c1 e8 08             	shr    eax,0x8
c000d7a8:	0f b6 d2             	movzx  edx,dl
c000d7ab:	33 04 95 a0 3f 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc060]
c000d7b2:	eb e7                	jmp    c000d79b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d7b4:	f7 d0                	not    eax
c000d7b6:	5b                   	pop    ebx
c000d7b7:	c3                   	ret    

c000d7b8 <EnvVarContainer::getEnv(char const*)>:
c000d7b8:	57                   	push   edi
c000d7b9:	56                   	push   esi
c000d7ba:	53                   	push   ebx
c000d7bb:	31 db                	xor    ebx,ebx
c000d7bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7c1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d7c3:	7e 2b                	jle    c000d7f0 <EnvVarContainer::getEnv(char const*)+0x38>
c000d7c5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d7cc:	50                   	push   eax
c000d7cd:	50                   	push   eax
c000d7ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7d1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d7d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d7d8:	e8 73 2f ff ff       	call   c0000750 <strcmp>
c000d7dd:	83 c4 10             	add    esp,0x10
c000d7e0:	85 c0                	test   eax,eax
c000d7e2:	75 09                	jne    c000d7ed <EnvVarContainer::getEnv(char const*)+0x35>
c000d7e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7e7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d7eb:	eb 05                	jmp    c000d7f2 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d7ed:	43                   	inc    ebx
c000d7ee:	eb d1                	jmp    c000d7c1 <EnvVarContainer::getEnv(char const*)+0x9>
c000d7f0:	31 c0                	xor    eax,eax
c000d7f2:	5b                   	pop    ebx
c000d7f3:	5e                   	pop    esi
c000d7f4:	5f                   	pop    edi
c000d7f5:	c3                   	ret    

c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d7f6:	55                   	push   ebp
c000d7f7:	57                   	push   edi
c000d7f8:	56                   	push   esi
c000d7f9:	53                   	push   ebx
c000d7fa:	83 ec 28             	sub    esp,0x28
c000d7fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d801:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d805:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d809:	56                   	push   esi
c000d80a:	e8 61 2d ff ff       	call   c0000570 <strlen>
c000d80f:	40                   	inc    eax
c000d810:	89 04 24             	mov    DWORD PTR [esp],eax
c000d813:	e8 63 11 00 00       	call   c000e97b <malloc>
c000d818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d81b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d81f:	e8 4c 2d ff ff       	call   c0000570 <strlen>
c000d824:	40                   	inc    eax
c000d825:	89 04 24             	mov    DWORD PTR [esp],eax
c000d828:	e8 4e 11 00 00       	call   c000e97b <malloc>
c000d82d:	89 34 24             	mov    DWORD PTR [esp],esi
c000d830:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d834:	e8 37 2d ff ff       	call   c0000570 <strlen>
c000d839:	83 c4 0c             	add    esp,0xc
c000d83c:	40                   	inc    eax
c000d83d:	50                   	push   eax
c000d83e:	6a 00                	push   0x0
c000d840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d844:	e8 a7 2c ff ff       	call   c00004f0 <memset>
c000d849:	89 34 24             	mov    DWORD PTR [esp],esi
c000d84c:	e8 1f 2d ff ff       	call   c0000570 <strlen>
c000d851:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d855:	8d 48 01             	lea    ecx,[eax+0x1]
c000d858:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d85a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d85d:	89 de                	mov    esi,ebx
c000d85f:	e8 0c 2d ff ff       	call   c0000570 <strlen>
c000d864:	83 c4 0c             	add    esp,0xc
c000d867:	40                   	inc    eax
c000d868:	50                   	push   eax
c000d869:	6a 00                	push   0x0
c000d86b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d86f:	e8 7c 2c ff ff       	call   c00004f0 <memset>
c000d874:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d877:	e8 f4 2c ff ff       	call   c0000570 <strlen>
c000d87c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d880:	8d 48 01             	lea    ecx,[eax+0x1]
c000d883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d885:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d888:	40                   	inc    eax
c000d889:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d88c:	c1 e0 03             	shl    eax,0x3
c000d88f:	5a                   	pop    edx
c000d890:	59                   	pop    ecx
c000d891:	50                   	push   eax
c000d892:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d895:	e8 cd 10 00 00       	call   c000e967 <realloc>
c000d89a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d89e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d8a1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d8a4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d8a8:	b9 08 00 00 00       	mov    ecx,0x8
c000d8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8af:	83 c4 2c             	add    esp,0x2c
c000d8b2:	5b                   	pop    ebx
c000d8b3:	5e                   	pop    esi
c000d8b4:	5f                   	pop    edi
c000d8b5:	5d                   	pop    ebp
c000d8b6:	c3                   	ret    
c000d8b7:	90                   	nop

c000d8b8 <EnvVarContainer::deleteEnv(char const*)>:
c000d8b8:	c3                   	ret    
c000d8b9:	90                   	nop

c000d8ba <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d8ba:	55                   	push   ebp
c000d8bb:	57                   	push   edi
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	81 ec 38 01 00 00    	sub    esp,0x138
c000d8c4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d8cb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d8d2:	68 14 01 00 00       	push   0x114
c000d8d7:	e8 9f 10 00 00       	call   c000e97b <malloc>
c000d8dc:	83 c4 0c             	add    esp,0xc
c000d8df:	89 c3                	mov    ebx,eax
c000d8e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d8e4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d8eb:	50                   	push   eax
c000d8ec:	e8 21 a8 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000d8f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8f4:	e8 fb aa ff ff       	call   c00083f4 <File::exists()>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	84 c0                	test   al,al
c000d8fe:	75 31                	jne    c000d931 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d900:	50                   	push   eax
c000d901:	50                   	push   eax
c000d902:	6a 12                	push   0x12
c000d904:	53                   	push   ebx
c000d905:	e8 26 a8 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d90a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d90c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d90f:	89 34 24             	mov    DWORD PTR [esp],esi
c000d912:	e8 59 2c ff ff       	call   c0000570 <strlen>
c000d917:	5a                   	pop    edx
c000d918:	31 d2                	xor    edx,edx
c000d91a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d91e:	51                   	push   ecx
c000d91f:	56                   	push   esi
c000d920:	52                   	push   edx
c000d921:	50                   	push   eax
c000d922:	53                   	push   ebx
c000d923:	ff d7                	call   edi
c000d925:	83 c4 14             	add    esp,0x14
c000d928:	53                   	push   ebx
c000d929:	e8 60 a8 ff ff       	call   c000818e <File::close()>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	56                   	push   esi
c000d932:	31 f6                	xor    esi,esi
c000d934:	68 00 01 00 00       	push   0x100
c000d939:	6a 00                	push   0x0
c000d93b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d93f:	50                   	push   eax
c000d940:	e8 ab 2b ff ff       	call   c00004f0 <memset>
c000d945:	5f                   	pop    edi
c000d946:	58                   	pop    eax
c000d947:	6a 01                	push   0x1
c000d949:	53                   	push   ebx
c000d94a:	e8 e1 a7 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d94f:	83 c4 10             	add    esp,0x10
c000d952:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d95a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d962:	83 ec 0c             	sub    esp,0xc
c000d965:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d967:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d96b:	51                   	push   ecx
c000d96c:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d970:	52                   	push   edx
c000d971:	6a 00                	push   0x0
c000d973:	6a 01                	push   0x1
c000d975:	53                   	push   ebx
c000d976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d979:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d97e:	83 c4 20             	add    esp,0x20
c000d981:	89 c2                	mov    edx,eax
c000d983:	85 c0                	test   eax,eax
c000d985:	0f 84 36 01 00 00    	je     c000dac1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d98b:	83 f8 0d             	cmp    eax,0xd
c000d98e:	0f 84 22 01 00 00    	je     c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d994:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d999:	0f 84 f0 00 00 00    	je     c000da8f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d99f:	83 f8 0a             	cmp    eax,0xa
c000d9a2:	74 13                	je     c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9a4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9a9:	74 0c                	je     c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9ab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9b1:	0f 8e f6 00 00 00    	jle    c000daad <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9bb:	83 ec 0c             	sub    esp,0xc
c000d9be:	8d 78 01             	lea    edi,[eax+0x1]
c000d9c1:	57                   	push   edi
c000d9c2:	e8 b4 0f 00 00       	call   c000e97b <malloc>
c000d9c7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d9cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9cf:	8d 56 04             	lea    edx,[esi+0x4]
c000d9d2:	89 14 24             	mov    DWORD PTR [esp],edx
c000d9d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d9:	e8 9d 0f 00 00       	call   c000e97b <malloc>
c000d9de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d9e2:	83 c4 0c             	add    esp,0xc
c000d9e5:	57                   	push   edi
c000d9e6:	6a 00                	push   0x0
c000d9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9ec:	e8 ff 2a ff ff       	call   c00004f0 <memset>
c000d9f1:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d9f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d9f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da06:	52                   	push   edx
c000da07:	6a 00                	push   0x0
c000da09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da0d:	e8 de 2a ff ff       	call   c00004f0 <memset>
c000da12:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da16:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000da1a:	89 34 24             	mov    DWORD PTR [esp],esi
c000da1d:	e8 4e 2b ff ff       	call   c0000570 <strlen>
c000da22:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000da26:	89 c1                	mov    ecx,eax
c000da28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da2d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da30:	40                   	inc    eax
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da37:	85 d2                	test   edx,edx
c000da39:	75 0c                	jne    c000da47 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000da3b:	83 ec 0c             	sub    esp,0xc
c000da3e:	6a 08                	push   0x8
c000da40:	e8 36 0f 00 00       	call   c000e97b <malloc>
c000da45:	eb 0c                	jmp    c000da53 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da47:	c1 e0 03             	shl    eax,0x3
c000da4a:	51                   	push   ecx
c000da4b:	51                   	push   ecx
c000da4c:	50                   	push   eax
c000da4d:	52                   	push   edx
c000da4e:	e8 14 0f 00 00       	call   c000e967 <realloc>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da59:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da5c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da5f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da63:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da67:	b9 08 00 00 00       	mov    ecx,0x8
c000da6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da6e:	31 f6                	xor    esi,esi
c000da70:	50                   	push   eax
c000da71:	68 00 01 00 00       	push   0x100
c000da76:	6a 00                	push   0x0
c000da78:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da7c:	50                   	push   eax
c000da7d:	e8 6e 2a ff ff       	call   c00004f0 <memset>
c000da82:	83 c4 10             	add    esp,0x10
c000da85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da8d:	eb 27                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da8f:	83 f8 3d             	cmp    eax,0x3d
c000da92:	74 1e                	je     c000dab2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000da94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000da9a:	7f 07                	jg     c000daa3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da9c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000daa0:	46                   	inc    esi
c000daa1:	eb 13                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daa3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000daab:	eb 09                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daad:	83 f8 3d             	cmp    eax,0x3d
c000dab0:	75 ea                	jne    c000da9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dab2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dab6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dabb:	0f 85 99 fe ff ff    	jne    c000d95a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	53                   	push   ebx
c000dac5:	e8 c4 a6 ff ff       	call   c000818e <File::close()>
c000daca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dacc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dacf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dad8:	5b                   	pop    ebx
c000dad9:	5e                   	pop    esi
c000dada:	5f                   	pop    edi
c000dadb:	5d                   	pop    ebp
c000dadc:	c3                   	ret    
c000dadd:	90                   	nop

c000dade <EnvVarContainer::__loadSystem()>:
c000dade:	83 ec 10             	sub    esp,0x10
c000dae1:	68 a0 43 02 c0       	push   0xc00243a0
c000dae6:	68 b0 21 02 c0       	push   0xc00221b0
c000daeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daef:	e8 c6 fd ff ff       	call   c000d8ba <EnvVarContainer::loadFrom(char const*, char const*)>
c000daf4:	83 c4 1c             	add    esp,0x1c
c000daf7:	c3                   	ret    

c000daf8 <EnvVarContainer::__loadUser()>:
c000daf8:	c3                   	ret    
c000daf9:	90                   	nop

c000dafa <EnvVarContainer::EnvVarContainer(Process*)>:
c000dafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db0c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db1a:	90                   	nop
c000db1b:	c3                   	ret    

c000db1c <EnvVarContainer::~EnvVarContainer()>:
c000db1c:	83 ec 0c             	sub    esp,0xc
c000db1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db26:	85 c0                	test   eax,eax
c000db28:	74 1d                	je     c000db47 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000db30:	85 c0                	test   eax,eax
c000db32:	74 13                	je     c000db47 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3b:	83 ec 0c             	sub    esp,0xc
c000db3e:	50                   	push   eax
c000db3f:	e8 47 0e 00 00       	call   c000e98b <free>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	90                   	nop
c000db48:	83 c4 0c             	add    esp,0xc
c000db4b:	c3                   	ret    

c000db4c <KeGetEnv(Process*, char const*)>:
c000db4c:	53                   	push   ebx
c000db4d:	83 ec 08             	sub    esp,0x8
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db58:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000db5e:	74 04                	je     c000db64 <KeGetEnv(Process*, char const*)+0x18>
c000db60:	85 c0                	test   eax,eax
c000db62:	75 0b                	jne    c000db6f <KeGetEnv(Process*, char const*)+0x23>
c000db64:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db69:	85 c0                	test   eax,eax
c000db6b:	75 19                	jne    c000db86 <KeGetEnv(Process*, char const*)+0x3a>
c000db6d:	eb 27                	jmp    c000db96 <KeGetEnv(Process*, char const*)+0x4a>
c000db6f:	52                   	push   edx
c000db70:	52                   	push   edx
c000db71:	53                   	push   ebx
c000db72:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db78:	e8 3b fc ff ff       	call   c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	85 c0                	test   eax,eax
c000db82:	75 28                	jne    c000dbac <KeGetEnv(Process*, char const*)+0x60>
c000db84:	eb de                	jmp    c000db64 <KeGetEnv(Process*, char const*)+0x18>
c000db86:	52                   	push   edx
c000db87:	52                   	push   edx
c000db88:	53                   	push   ebx
c000db89:	50                   	push   eax
c000db8a:	e8 29 fc ff ff       	call   c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000db8f:	83 c4 10             	add    esp,0x10
c000db92:	85 c0                	test   eax,eax
c000db94:	75 16                	jne    c000dbac <KeGetEnv(Process*, char const*)+0x60>
c000db96:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db9a:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000db9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dba3:	83 c4 08             	add    esp,0x8
c000dba6:	5b                   	pop    ebx
c000dba7:	e9 0c fc ff ff       	jmp    c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000dbac:	83 c4 08             	add    esp,0x8
c000dbaf:	5b                   	pop    ebx
c000dbb0:	c3                   	ret    

c000dbb1 <KeSetEnvSystem(char const*, char const*)>:
c000dbb1:	83 ec 10             	sub    esp,0x10
c000dbb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbbc:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000dbc2:	e8 2f fc ff ff       	call   c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbc7:	83 c4 1c             	add    esp,0x1c
c000dbca:	c3                   	ret    

c000dbcb <KeSetEnvUser(char const*, char const*)>:
c000dbcb:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dbd0:	85 c0                	test   eax,eax
c000dbd2:	74 15                	je     c000dbe9 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dbd4:	83 ec 10             	sub    esp,0x10
c000dbd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbdf:	50                   	push   eax
c000dbe0:	e8 11 fc ff ff       	call   c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbe5:	83 c4 1c             	add    esp,0x1c
c000dbe8:	c3                   	ret    
c000dbe9:	c3                   	ret    

c000dbea <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dbea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dbf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbf8:	e9 f9 fb ff ff       	jmp    c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>

c000dbfd <KeDeleteEnvSystem(char const*)>:
c000dbfd:	c3                   	ret    

c000dbfe <KeDeleteEnvUser(char const*)>:
c000dbfe:	c3                   	ret    

c000dbff <KeDeleteEnvProcess(Process*, char const*)>:
c000dbff:	c3                   	ret    

c000dc00 <KeNewProcessEnv(Process*)>:
c000dc00:	83 ec 28             	sub    esp,0x28
c000dc03:	6a 0c                	push   0xc
c000dc05:	e8 71 0d 00 00       	call   c000e97b <malloc>
c000dc0a:	5a                   	pop    edx
c000dc0b:	59                   	pop    ecx
c000dc0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc10:	50                   	push   eax
c000dc11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc15:	e8 e0 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc1e:	83 c4 2c             	add    esp,0x2c
c000dc21:	c3                   	ret    

c000dc22 <KeCopyProcessEnv(Process*, Process*)>:
c000dc22:	57                   	push   edi
c000dc23:	56                   	push   esi
c000dc24:	53                   	push   ebx
c000dc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dc32:	6a 0c                	push   0xc
c000dc34:	e8 42 0d 00 00       	call   c000e97b <malloc>
c000dc39:	89 c3                	mov    ebx,eax
c000dc3b:	58                   	pop    eax
c000dc3c:	5a                   	pop    edx
c000dc3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc41:	53                   	push   ebx
c000dc42:	e8 b3 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc47:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc49:	89 03                	mov    DWORD PTR [ebx],eax
c000dc4b:	c1 e0 03             	shl    eax,0x3
c000dc4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc51:	e8 25 0d 00 00       	call   c000e97b <malloc>
c000dc56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc59:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc5b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc5e:	c1 e1 03             	shl    ecx,0x3
c000dc61:	89 c7                	mov    edi,eax
c000dc63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 d8                	mov    eax,ebx
c000dc6a:	5b                   	pop    ebx
c000dc6b:	5e                   	pop    esi
c000dc6c:	5f                   	pop    edi
c000dc6d:	c3                   	ret    

c000dc6e <KeLoadSystemEnv()>:
c000dc6e:	53                   	push   ebx
c000dc6f:	83 ec 14             	sub    esp,0x14
c000dc72:	6a 0c                	push   0xc
c000dc74:	e8 02 0d 00 00       	call   c000e97b <malloc>
c000dc79:	89 c3                	mov    ebx,eax
c000dc7b:	58                   	pop    eax
c000dc7c:	5a                   	pop    edx
c000dc7d:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc83:	53                   	push   ebx
c000dc84:	e8 71 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc8c:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dc92:	e8 47 fe ff ff       	call   c000dade <EnvVarContainer::__loadSystem()>
c000dc97:	83 c4 18             	add    esp,0x18
c000dc9a:	5b                   	pop    ebx
c000dc9b:	c3                   	ret    

c000dc9c <KeLoadUserEnv()>:
c000dc9c:	53                   	push   ebx
c000dc9d:	83 ec 14             	sub    esp,0x14
c000dca0:	6a 0c                	push   0xc
c000dca2:	e8 d4 0c 00 00       	call   c000e97b <malloc>
c000dca7:	89 c3                	mov    ebx,eax
c000dca9:	58                   	pop    eax
c000dcaa:	5a                   	pop    edx
c000dcab:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dcb1:	53                   	push   ebx
c000dcb2:	e8 43 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dcb7:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dcbd:	83 c4 18             	add    esp,0x18
c000dcc0:	5b                   	pop    ebx
c000dcc1:	c3                   	ret    

c000dcc2 <KeFlushEnv()>:
c000dcc2:	c3                   	ret    

c000dcc3 <KeGetProcessTotalEnvCount(Process*)>:
c000dcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcc7:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dccd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcd3:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dcd8:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcda:	03 01                	add    eax,DWORD PTR [ecx]
c000dcdc:	85 d2                	test   edx,edx
c000dcde:	74 02                	je     c000dce2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dce0:	03 02                	add    eax,DWORD PTR [edx]
c000dce2:	c3                   	ret    

c000dce3 <KeGetProcessEnvPair(Process*, int)>:
c000dce3:	57                   	push   edi
c000dce4:	56                   	push   esi
c000dce5:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dceb:	53                   	push   ebx
c000dcec:	85 f6                	test   esi,esi
c000dcee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcf6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd00:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd02:	75 16                	jne    c000dd1a <KeGetProcessEnvPair(Process*, int)+0x37>
c000dd04:	39 c2                	cmp    edx,eax
c000dd06:	7c 16                	jl     c000dd1e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd08:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dd0e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd10:	01 c6                	add    esi,eax
c000dd12:	39 d6                	cmp    esi,edx
c000dd14:	7e 3c                	jle    c000dd52 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd16:	29 c2                	sub    edx,eax
c000dd18:	eb 04                	jmp    c000dd1e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd1a:	39 c2                	cmp    edx,eax
c000dd1c:	7d 05                	jge    c000dd23 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dd1e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dd21:	eb 20                	jmp    c000dd43 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dd23:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dd25:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dd28:	39 d1                	cmp    ecx,edx
c000dd2a:	7e 04                	jle    c000dd30 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dd2c:	29 c2                	sub    edx,eax
c000dd2e:	eb 10                	jmp    c000dd40 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dd30:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dd36:	03 0e                	add    ecx,DWORD PTR [esi]
c000dd38:	39 d1                	cmp    ecx,edx
c000dd3a:	7e 16                	jle    c000dd52 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd3c:	29 c2                	sub    edx,eax
c000dd3e:	29 fa                	sub    edx,edi
c000dd40:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd43:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd46:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd48:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd4b:	89 03                	mov    DWORD PTR [ebx],eax
c000dd4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dd50:	eb 1d                	jmp    c000dd6f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dd52:	83 ec 0c             	sub    esp,0xc
c000dd55:	68 d2 21 02 c0       	push   0xc00221d2
c000dd5a:	e8 63 0f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000dd5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	89 d8                	mov    eax,ebx
c000dd71:	5b                   	pop    ebx
c000dd72:	5e                   	pop    esi
c000dd73:	5f                   	pop    edi
c000dd74:	c2 04 00             	ret    0x4
c000dd77:	90                   	nop

c000dd78 <KeSetupInterrupts()>:
c000dd78:	83 ec 10             	sub    esp,0x10
c000dd7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd83:	90                   	nop
c000dd84:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd8c:	7f 5a                	jg     c000dde8 <KeSetupInterrupts()+0x70>
c000dd8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd96:	66 90                	xchg   ax,ax
c000dd98:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd9d:	7f 41                	jg     c000dde0 <KeSetupInterrupts()+0x68>
c000dd9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dda3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddae:	01 d0                	add    eax,edx
c000ddb0:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000ddbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddca:	01 d0                	add    eax,edx
c000ddcc:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000ddd7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dddc:	eb ba                	jmp    c000dd98 <KeSetupInterrupts()+0x20>
c000ddde:	66 90                	xchg   ax,ax
c000dde0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dde5:	eb 9d                	jmp    c000dd84 <KeSetupInterrupts()+0xc>
c000dde7:	90                   	nop
c000dde8:	90                   	nop
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	c3                   	ret    
c000dded:	8d 76 00             	lea    esi,[esi+0x0]

c000ddf0 <int_handler>:
c000ddf0:	83 ec 2c             	sub    esp,0x2c
c000ddf3:	90                   	nop
c000ddf4:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000ddf9:	0f b6 c0             	movzx  eax,al
c000ddfc:	85 c0                	test   eax,eax
c000ddfe:	74 04                	je     c000de04 <int_handler+0x14>
c000de00:	fa                   	cli    
c000de01:	f4                   	hlt    
c000de02:	eb f0                	jmp    c000ddf4 <int_handler+0x4>
c000de04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de08:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de0f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000de14:	7e 1a                	jle    c000de30 <int_handler+0x40>
c000de16:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000de1b:	7f 13                	jg     c000de30 <int_handler+0x40>
c000de1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de21:	83 e8 20             	sub    eax,0x20
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	50                   	push   eax
c000de28:	e8 85 a8 00 00       	call   c00186b2 <HalEndOfInterrupt(int)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de34:	c1 e0 04             	shl    eax,0x4
c000de37:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000de3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de44:	c1 e0 04             	shl    eax,0x4
c000de47:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000de4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de50:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de58:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de5d:	0f 8f ad 00 00 00    	jg     c000df10 <int_handler+0x120>
c000de63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de72:	01 d0                	add    eax,edx
c000de74:	8b 00                	mov    eax,DWORD PTR [eax]
c000de76:	85 c0                	test   eax,eax
c000de78:	0f 84 86 00 00 00    	je     c000df04 <int_handler+0x114>
c000de7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de82:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de85:	83 f8 60             	cmp    eax,0x60
c000de88:	75 46                	jne    c000ded0 <int_handler+0xe0>
c000de8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de8e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de99:	01 d0                	add    eax,edx
c000de9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dea1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000dea8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deac:	01 ca                	add    edx,ecx
c000deae:	8b 12                	mov    edx,DWORD PTR [edx]
c000deb0:	83 ec 08             	sub    esp,0x8
c000deb3:	52                   	push   edx
c000deb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000deb8:	ff d0                	call   eax
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000decd:	eb 4d                	jmp    c000df1c <int_handler+0x12c>
c000decf:	90                   	nop
c000ded0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ded4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dedb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dedf:	01 d0                	add    eax,edx
c000dee1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dee3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dee7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000deee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000def2:	01 ca                	add    edx,ecx
c000def4:	8b 12                	mov    edx,DWORD PTR [edx]
c000def6:	83 ec 08             	sub    esp,0x8
c000def9:	52                   	push   edx
c000defa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000defe:	ff d0                	call   eax
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	90                   	nop
c000df04:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000df09:	e9 4a ff ff ff       	jmp    c000de58 <int_handler+0x68>
c000df0e:	66 90                	xchg   ax,ax
c000df10:	b8 00 00 00 00       	mov    eax,0x0
c000df15:	ba 00 00 00 00       	mov    edx,0x0
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	83 c4 2c             	add    esp,0x2c
c000df1f:	c3                   	ret    

c000df20 <KeDisplayProgramFault(char const*)>:
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	83 ec 0c             	sub    esp,0xc
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 35 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df37:	8b 00                	mov    eax,DWORD PTR [eax]
c000df39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df42:	85 c0                	test   eax,eax
c000df44:	74 22                	je     c000df68 <KeDisplayProgramFault(char const*)+0x48>
c000df46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df56:	6a 04                	push   0x4
c000df58:	6a 0f                	push   0xf
c000df5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df5e:	50                   	push   eax
c000df5f:	e8 64 35 00 00       	call   c00114c8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df64:	83 c4 10             	add    esp,0x10
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	83 c4 0c             	add    esp,0xc
c000df6c:	c3                   	ret    
c000df6d:	8d 76 00             	lea    esi,[esi+0x0]

c000df70 <KeGeneralProtectionFault(void*, void*)>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	83 ec 08             	sub    esp,0x8
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7e:	e8 4f 9d 00 00       	call   c0017cd2 <HalHandleGeneralProtectionFault(void*, void*)>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	0f b6 c0             	movzx  eax,al
c000df89:	85 c0                	test   eax,eax
c000df8b:	75 2f                	jne    c000dfbc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000df8d:	83 ec 0c             	sub    esp,0xc
c000df90:	68 ec 21 02 c0       	push   0xc00221ec
c000df95:	e8 86 ff ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000df9a:	83 c4 10             	add    esp,0x10
c000df9d:	83 ec 0c             	sub    esp,0xc
c000dfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa4:	e8 45 9e 00 00       	call   c0017dee <HalDisplayDebugInfo(void*)>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	6a 00                	push   0x0
c000dfb1:	e8 ba 7d 00 00       	call   c0015d70 <Thr::terminateFromIRQ(int)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	eb 05                	jmp    c000dfc0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000dfbb:	90                   	nop
c000dfbc:	90                   	nop
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	83 c4 0c             	add    esp,0xc
c000dfc3:	c3                   	ret    

c000dfc4 <KePageFault(void*, void*)>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	83 ec 08             	sub    esp,0x8
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	e8 a6 9d 00 00       	call   c0017d7d <HalHandlePageFault(void*, void*)>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	0f b6 c0             	movzx  eax,al
c000dfdd:	85 c0                	test   eax,eax
c000dfdf:	75 2f                	jne    c000e010 <KePageFault(void*, void*)+0x4c>
c000dfe1:	83 ec 0c             	sub    esp,0xc
c000dfe4:	68 05 22 02 c0       	push   0xc0022205
c000dfe9:	e8 32 ff ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000dfee:	83 c4 10             	add    esp,0x10
c000dff1:	83 ec 0c             	sub    esp,0xc
c000dff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff8:	e8 f1 9d 00 00       	call   c0017dee <HalDisplayDebugInfo(void*)>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	83 ec 0c             	sub    esp,0xc
c000e003:	6a 00                	push   0x0
c000e005:	e8 66 7d 00 00       	call   c0015d70 <Thr::terminateFromIRQ(int)>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	eb 05                	jmp    c000e014 <KePageFault(void*, void*)+0x50>
c000e00f:	90                   	nop
c000e010:	90                   	nop
c000e011:	8d 76 00             	lea    esi,[esi+0x0]
c000e014:	83 c4 0c             	add    esp,0xc
c000e017:	c3                   	ret    

c000e018 <KeNonMaskableInterrupt(void*, void*)>:
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	e8 5c a1 00 00       	call   c001817c <HalReceivedNMI()>
c000e020:	90                   	nop
c000e021:	83 c4 0c             	add    esp,0xc
c000e024:	c3                   	ret    
c000e025:	8d 76 00             	lea    esi,[esi+0x0]

c000e028 <KeOtherFault(void*, void*)>:
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	83 ec 0c             	sub    esp,0xc
c000e02e:	68 10 22 02 c0       	push   0xc0022210
c000e033:	e8 e8 fe ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	83 ec 0c             	sub    esp,0xc
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 a7 9d 00 00       	call   c0017dee <HalDisplayDebugInfo(void*)>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	83 ec 0c             	sub    esp,0xc
c000e04d:	6a 00                	push   0x0
c000e04f:	e8 1c 7d 00 00       	call   c0015d70 <Thr::terminateFromIRQ(int)>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	90                   	nop
c000e058:	83 c4 0c             	add    esp,0xc
c000e05b:	c3                   	ret    

c000e05c <KeOpcodeFault(void*, void*)>:
c000e05c:	55                   	push   ebp
c000e05d:	89 e5                	mov    ebp,esp
c000e05f:	83 ec 08             	sub    esp,0x8
c000e062:	83 ec 08             	sub    esp,0x8
c000e065:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e068:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e06b:	e8 3c 9d 00 00       	call   c0017dac <HalHandleOpcodeFault(void*, void*)>
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	0f b6 c0             	movzx  eax,al
c000e076:	85 c0                	test   eax,eax
c000e078:	75 2e                	jne    c000e0a8 <KeOpcodeFault(void*, void*)+0x4c>
c000e07a:	83 ec 0c             	sub    esp,0xc
c000e07d:	68 38 22 02 c0       	push   0xc0022238
c000e082:	e8 99 fe ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000e087:	83 c4 10             	add    esp,0x10
c000e08a:	83 ec 0c             	sub    esp,0xc
c000e08d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e090:	e8 59 9d 00 00       	call   c0017dee <HalDisplayDebugInfo(void*)>
c000e095:	83 c4 10             	add    esp,0x10
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	6a 00                	push   0x0
c000e09d:	e8 ce 7c 00 00       	call   c0015d70 <Thr::terminateFromIRQ(int)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	eb 05                	jmp    c000e0ac <KeOpcodeFault(void*, void*)+0x50>
c000e0a7:	90                   	nop
c000e0a8:	90                   	nop
c000e0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0ac:	c9                   	leave  
c000e0ad:	c3                   	ret    
c000e0ae:	66 90                	xchg   ax,ax

c000e0b0 <KeDoubleFault(void*, void*)>:
c000e0b0:	55                   	push   ebp
c000e0b1:	89 e5                	mov    ebp,esp
c000e0b3:	83 ec 08             	sub    esp,0x8
c000e0b6:	83 ec 0c             	sub    esp,0xc
c000e0b9:	68 45 22 02 c0       	push   0xc0022245
c000e0be:	e8 ff 0b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	90                   	nop
c000e0c7:	c9                   	leave  
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop

c000e0ca <GDTEntry::setBase(unsigned int)>:
c000e0ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0d2:	89 c1                	mov    ecx,eax
c000e0d4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e0d8:	c1 e9 10             	shr    ecx,0x10
c000e0db:	c1 e8 18             	shr    eax,0x18
c000e0de:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e0e1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e0e4:	c3                   	ret    
c000e0e5:	90                   	nop

c000e0e6 <GDTEntry::setLimit(unsigned int)>:
c000e0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e0f1:	66 89 01             	mov    WORD PTR [ecx],ax
c000e0f4:	83 e2 f0             	and    edx,0xfffffff0
c000e0f7:	c1 e8 10             	shr    eax,0x10
c000e0fa:	83 e0 0f             	and    eax,0xf
c000e0fd:	09 d0                	or     eax,edx
c000e0ff:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e102:	c3                   	ret    
c000e103:	90                   	nop

c000e104 <GDT::GDT()>:
c000e104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e118:	90                   	nop
c000e119:	c3                   	ret    

c000e11a <GDT::addEntry(GDTEntry)>:
c000e11a:	53                   	push   ebx
c000e11b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e11f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e123:	8b 02                	mov    eax,DWORD PTR [edx]
c000e125:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e129:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e12d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e131:	8d 48 01             	lea    ecx,[eax+0x1]
c000e134:	c1 e0 03             	shl    eax,0x3
c000e137:	89 0a                	mov    DWORD PTR [edx],ecx
c000e139:	5b                   	pop    ebx
c000e13a:	c3                   	ret    
c000e13b:	90                   	nop

c000e13c <GDT::getNumberOfEntries()>:
c000e13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e140:	8b 00                	mov    eax,DWORD PTR [eax]
c000e142:	c3                   	ret    
c000e143:	90                   	nop

c000e144 <GDT::flush()>:
c000e144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e148:	8b 10                	mov    edx,DWORD PTR [eax]
c000e14a:	83 c0 04             	add    eax,0x4
c000e14d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e154:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e159:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e160:	e9 f5 21 ff ff       	jmp    c000035a <loadGDT>
c000e165:	90                   	nop

c000e166 <GDT::setup()>:
c000e166:	57                   	push   edi
c000e167:	56                   	push   esi
c000e168:	53                   	push   ebx
c000e169:	83 ec 30             	sub    esp,0x30
c000e16c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e170:	6a 00                	push   0x0
c000e172:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e176:	56                   	push   esi
c000e177:	e8 4e ff ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e17c:	6a 00                	push   0x0
c000e17e:	56                   	push   esi
c000e17f:	e8 62 ff ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c000e184:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e18c:	6a 00                	push   0x0
c000e18e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e192:	56                   	push   esi
c000e193:	e8 32 ff ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e198:	68 ff ff ff 00       	push   0xffffff
c000e19d:	56                   	push   esi
c000e19e:	e8 43 ff ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c000e1a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e1a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e1af:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e1b3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e1b8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1c1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1c5:	89 f8                	mov    eax,edi
c000e1c7:	89 fa                	mov    edx,edi
c000e1c9:	80 e4 f7             	and    ah,0xf7
c000e1cc:	80 ce 60             	or     dh,0x60
c000e1cf:	89 c7                	mov    edi,eax
c000e1d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1d5:	80 cc 60             	or     ah,0x60
c000e1d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e1dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e1e0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e1e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1ec:	83 c4 20             	add    esp,0x20
c000e1ef:	6a 00                	push   0x0
c000e1f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e1f5:	50                   	push   eax
c000e1f6:	e8 cf fe ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e1fb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e1ff:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e203:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e207:	83 e0 3f             	and    eax,0x3f
c000e20a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e20e:	6a 00                	push   0x0
c000e210:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e214:	50                   	push   eax
c000e215:	e8 b0 fe ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e21a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e21e:	83 e0 3f             	and    eax,0x3f
c000e221:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e225:	83 c4 0c             	add    esp,0xc
c000e228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e22c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e230:	53                   	push   ebx
c000e231:	e8 e4 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e236:	83 c4 0c             	add    esp,0xc
c000e239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e23d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e241:	53                   	push   ebx
c000e242:	e8 d3 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e247:	83 c4 0c             	add    esp,0xc
c000e24a:	57                   	push   edi
c000e24b:	56                   	push   esi
c000e24c:	53                   	push   ebx
c000e24d:	e8 c8 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e252:	83 c4 0c             	add    esp,0xc
c000e255:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e259:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e25d:	53                   	push   ebx
c000e25e:	e8 b7 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e263:	83 c4 0c             	add    esp,0xc
c000e266:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e26a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e26e:	53                   	push   ebx
c000e26f:	e8 a6 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e274:	83 c4 0c             	add    esp,0xc
c000e277:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e27b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e27f:	53                   	push   ebx
c000e280:	e8 95 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e285:	83 c4 0c             	add    esp,0xc
c000e288:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e28c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e290:	53                   	push   ebx
c000e291:	e8 84 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e299:	e8 a6 fe ff ff       	call   c000e144 <GDT::flush()>
c000e29e:	83 c4 40             	add    esp,0x40
c000e2a1:	5b                   	pop    ebx
c000e2a2:	5e                   	pop    esi
c000e2a3:	5f                   	pop    edi
c000e2a4:	c3                   	ret    

c000e2a5 <idleFunction(void*)>:
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e2af:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e2b6:	75 01                	jne    c000e2b9 <idleFunction(void*)+0x14>
c000e2b8:	fb                   	sti    
c000e2b9:	e8 59 9f 00 00       	call   c0018217 <HalSystemIdle()>
c000e2be:	e8 73 21 01 00       	call   c0020436 <idleCommon()>
c000e2c3:	eb f4                	jmp    c000e2b9 <idleFunction(void*)+0x14>
c000e2c5:	66 90                	xchg   ax,ax
c000e2c7:	90                   	nop

c000e2c8 <IDTEntry::IDTEntry(bool)>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 04             	sub    esp,0x4
c000e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d0:	88 04 24             	mov    BYTE PTR [esp],al
c000e2d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2d7:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2ec:	83 e2 f0             	and    edx,0xfffffff0
c000e2ef:	83 ca 0e             	or     edx,0xe
c000e2f2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2fc:	83 e2 ef             	and    edx,0xffffffef
c000e2ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e302:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e306:	85 c0                	test   eax,eax
c000e308:	74 06                	je     c000e310 <IDTEntry::IDTEntry(bool)+0x48>
c000e30a:	b2 03                	mov    dl,0x3
c000e30c:	eb 06                	jmp    c000e314 <IDTEntry::IDTEntry(bool)+0x4c>
c000e30e:	66 90                	xchg   ax,ax
c000e310:	b2 00                	mov    dl,0x0
c000e312:	66 90                	xchg   ax,ax
c000e314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e318:	83 e2 03             	and    edx,0x3
c000e31b:	89 d3                	mov    ebx,edx
c000e31d:	c1 e3 05             	shl    ebx,0x5
c000e320:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e323:	83 e2 9f             	and    edx,0xffffff9f
c000e326:	88 d1                	mov    cl,dl
c000e328:	88 da                	mov    dl,bl
c000e32a:	09 ca                	or     edx,ecx
c000e32c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e333:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e336:	83 ca 80             	or     edx,0xffffff80
c000e339:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e33c:	90                   	nop
c000e33d:	83 c4 04             	add    esp,0x4
c000e340:	5b                   	pop    ebx
c000e341:	c3                   	ret    

c000e342 <IDTEntry::setOffset(unsigned int)>:
c000e342:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e34a:	66 89 02             	mov    WORD PTR [edx],ax
c000e34d:	c1 e8 10             	shr    eax,0x10
c000e350:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e354:	c3                   	ret    
c000e355:	90                   	nop
c000e356:	66 90                	xchg   ax,ax

c000e358 <IDT::IDT()>:
c000e358:	90                   	nop
c000e359:	c3                   	ret    

c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e35e:	83 c0 30             	add    eax,0x30
c000e361:	c3                   	ret    

c000e362 <IDT::addEntry(IDTEntry, int)>:
c000e362:	53                   	push   ebx
c000e363:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e36b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e373:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e376:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e37a:	5b                   	pop    ebx
c000e37b:	c3                   	ret    

c000e37c <IDT::addEntry(int, void (*)(), bool)>:
c000e37c:	53                   	push   ebx
c000e37d:	83 ec 10             	sub    esp,0x10
c000e380:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e385:	50                   	push   eax
c000e386:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e38a:	53                   	push   ebx
c000e38b:	e8 38 ff ff ff       	call   c000e2c8 <IDTEntry::IDTEntry(bool)>
c000e390:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e394:	53                   	push   ebx
c000e395:	e8 a8 ff ff ff       	call   c000e342 <IDTEntry::setOffset(unsigned int)>
c000e39a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e39e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e3aa:	e8 b3 ff ff ff       	call   c000e362 <IDT::addEntry(IDTEntry, int)>
c000e3af:	83 c4 30             	add    esp,0x30
c000e3b2:	5b                   	pop    ebx
c000e3b3:	c3                   	ret    

c000e3b4 <IDT::flush()>:
c000e3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b8:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e3c1:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e3c6:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e3cd:	c3                   	ret    

c000e3ce <IDT::setup()>:
c000e3ce:	57                   	push   edi
c000e3cf:	56                   	push   esi
c000e3d0:	53                   	push   ebx
c000e3d1:	83 ec 10             	sub    esp,0x10
c000e3d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3d8:	6a 00                	push   0x0
c000e3da:	68 e0 f6 01 c0       	push   0xc001f6e0
c000e3df:	6a 00                	push   0x0
c000e3e1:	53                   	push   ebx
c000e3e2:	e8 95 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e3e7:	6a 00                	push   0x0
c000e3e9:	68 f0 f6 01 c0       	push   0xc001f6f0
c000e3ee:	6a 01                	push   0x1
c000e3f0:	53                   	push   ebx
c000e3f1:	e8 86 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e3f6:	83 c4 20             	add    esp,0x20
c000e3f9:	6a 00                	push   0x0
c000e3fb:	68 fa f6 01 c0       	push   0xc001f6fa
c000e400:	6a 02                	push   0x2
c000e402:	53                   	push   ebx
c000e403:	e8 74 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e408:	6a 00                	push   0x0
c000e40a:	68 04 f7 01 c0       	push   0xc001f704
c000e40f:	6a 03                	push   0x3
c000e411:	53                   	push   ebx
c000e412:	e8 65 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e417:	83 c4 20             	add    esp,0x20
c000e41a:	6a 00                	push   0x0
c000e41c:	68 0e f7 01 c0       	push   0xc001f70e
c000e421:	6a 04                	push   0x4
c000e423:	53                   	push   ebx
c000e424:	e8 53 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e429:	6a 00                	push   0x0
c000e42b:	68 18 f7 01 c0       	push   0xc001f718
c000e430:	6a 05                	push   0x5
c000e432:	53                   	push   ebx
c000e433:	e8 44 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e438:	83 c4 20             	add    esp,0x20
c000e43b:	6a 00                	push   0x0
c000e43d:	68 22 f7 01 c0       	push   0xc001f722
c000e442:	6a 06                	push   0x6
c000e444:	53                   	push   ebx
c000e445:	e8 32 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e44a:	6a 00                	push   0x0
c000e44c:	68 2c f7 01 c0       	push   0xc001f72c
c000e451:	6a 07                	push   0x7
c000e453:	53                   	push   ebx
c000e454:	e8 23 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e459:	83 c4 20             	add    esp,0x20
c000e45c:	6a 00                	push   0x0
c000e45e:	68 36 f7 01 c0       	push   0xc001f736
c000e463:	6a 08                	push   0x8
c000e465:	53                   	push   ebx
c000e466:	e8 11 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e46b:	6a 00                	push   0x0
c000e46d:	68 3e f7 01 c0       	push   0xc001f73e
c000e472:	6a 09                	push   0x9
c000e474:	53                   	push   ebx
c000e475:	e8 02 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e47a:	83 c4 20             	add    esp,0x20
c000e47d:	6a 00                	push   0x0
c000e47f:	68 48 f7 01 c0       	push   0xc001f748
c000e484:	6a 0a                	push   0xa
c000e486:	53                   	push   ebx
c000e487:	e8 f0 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e48c:	6a 00                	push   0x0
c000e48e:	68 50 f7 01 c0       	push   0xc001f750
c000e493:	6a 0b                	push   0xb
c000e495:	53                   	push   ebx
c000e496:	e8 e1 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e49b:	83 c4 20             	add    esp,0x20
c000e49e:	6a 00                	push   0x0
c000e4a0:	68 58 f7 01 c0       	push   0xc001f758
c000e4a5:	6a 0c                	push   0xc
c000e4a7:	53                   	push   ebx
c000e4a8:	e8 cf fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ad:	6a 00                	push   0x0
c000e4af:	68 60 f7 01 c0       	push   0xc001f760
c000e4b4:	6a 0d                	push   0xd
c000e4b6:	53                   	push   ebx
c000e4b7:	e8 c0 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4bc:	83 c4 20             	add    esp,0x20
c000e4bf:	6a 00                	push   0x0
c000e4c1:	68 7a f7 01 c0       	push   0xc001f77a
c000e4c6:	6a 0e                	push   0xe
c000e4c8:	53                   	push   ebx
c000e4c9:	e8 ae fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ce:	6a 00                	push   0x0
c000e4d0:	68 82 f7 01 c0       	push   0xc001f782
c000e4d5:	6a 0f                	push   0xf
c000e4d7:	53                   	push   ebx
c000e4d8:	e8 9f fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4dd:	83 c4 20             	add    esp,0x20
c000e4e0:	6a 00                	push   0x0
c000e4e2:	68 8c f7 01 c0       	push   0xc001f78c
c000e4e7:	6a 10                	push   0x10
c000e4e9:	53                   	push   ebx
c000e4ea:	e8 8d fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ef:	6a 00                	push   0x0
c000e4f1:	68 96 f7 01 c0       	push   0xc001f796
c000e4f6:	6a 11                	push   0x11
c000e4f8:	53                   	push   ebx
c000e4f9:	e8 7e fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4fe:	83 c4 20             	add    esp,0x20
c000e501:	6a 00                	push   0x0
c000e503:	68 a0 f7 01 c0       	push   0xc001f7a0
c000e508:	6a 12                	push   0x12
c000e50a:	53                   	push   ebx
c000e50b:	e8 6c fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e510:	6a 01                	push   0x1
c000e512:	68 3a f8 01 c0       	push   0xc001f83a
c000e517:	6a 60                	push   0x60
c000e519:	53                   	push   ebx
c000e51a:	e8 5d fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e51f:	83 c4 20             	add    esp,0x20
c000e522:	6a 00                	push   0x0
c000e524:	68 41 f8 01 c0       	push   0xc001f841
c000e529:	6a 20                	push   0x20
c000e52b:	53                   	push   ebx
c000e52c:	e8 4b fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e531:	6a 00                	push   0x0
c000e533:	68 2c f8 01 c0       	push   0xc001f82c
c000e538:	6a 21                	push   0x21
c000e53a:	53                   	push   ebx
c000e53b:	e8 3c fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e540:	83 c4 20             	add    esp,0x20
c000e543:	6a 00                	push   0x0
c000e545:	68 33 f8 01 c0       	push   0xc001f833
c000e54a:	6a 22                	push   0x22
c000e54c:	53                   	push   ebx
c000e54d:	e8 2a fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e552:	6a 00                	push   0x0
c000e554:	68 aa f7 01 c0       	push   0xc001f7aa
c000e559:	6a 23                	push   0x23
c000e55b:	53                   	push   ebx
c000e55c:	e8 1b fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e561:	83 c4 20             	add    esp,0x20
c000e564:	6a 00                	push   0x0
c000e566:	68 b4 f7 01 c0       	push   0xc001f7b4
c000e56b:	6a 24                	push   0x24
c000e56d:	53                   	push   ebx
c000e56e:	e8 09 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e573:	6a 00                	push   0x0
c000e575:	68 be f7 01 c0       	push   0xc001f7be
c000e57a:	6a 25                	push   0x25
c000e57c:	53                   	push   ebx
c000e57d:	e8 fa fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e582:	83 c4 20             	add    esp,0x20
c000e585:	6a 00                	push   0x0
c000e587:	68 c8 f7 01 c0       	push   0xc001f7c8
c000e58c:	6a 26                	push   0x26
c000e58e:	53                   	push   ebx
c000e58f:	e8 e8 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e594:	6a 00                	push   0x0
c000e596:	68 d2 f7 01 c0       	push   0xc001f7d2
c000e59b:	6a 27                	push   0x27
c000e59d:	53                   	push   ebx
c000e59e:	e8 d9 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5a3:	83 c4 20             	add    esp,0x20
c000e5a6:	6a 00                	push   0x0
c000e5a8:	68 dc f7 01 c0       	push   0xc001f7dc
c000e5ad:	6a 28                	push   0x28
c000e5af:	53                   	push   ebx
c000e5b0:	e8 c7 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5b5:	6a 00                	push   0x0
c000e5b7:	68 e6 f7 01 c0       	push   0xc001f7e6
c000e5bc:	6a 29                	push   0x29
c000e5be:	53                   	push   ebx
c000e5bf:	e8 b8 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5c4:	83 c4 20             	add    esp,0x20
c000e5c7:	6a 00                	push   0x0
c000e5c9:	68 f0 f7 01 c0       	push   0xc001f7f0
c000e5ce:	6a 2a                	push   0x2a
c000e5d0:	53                   	push   ebx
c000e5d1:	e8 a6 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5d6:	6a 00                	push   0x0
c000e5d8:	68 fa f7 01 c0       	push   0xc001f7fa
c000e5dd:	6a 2b                	push   0x2b
c000e5df:	53                   	push   ebx
c000e5e0:	e8 97 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5e5:	83 c4 20             	add    esp,0x20
c000e5e8:	6a 00                	push   0x0
c000e5ea:	68 04 f8 01 c0       	push   0xc001f804
c000e5ef:	6a 2c                	push   0x2c
c000e5f1:	53                   	push   ebx
c000e5f2:	e8 85 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5f7:	6a 00                	push   0x0
c000e5f9:	68 0e f8 01 c0       	push   0xc001f80e
c000e5fe:	6a 2d                	push   0x2d
c000e600:	53                   	push   ebx
c000e601:	e8 76 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e606:	83 c4 20             	add    esp,0x20
c000e609:	6a 00                	push   0x0
c000e60b:	68 18 f8 01 c0       	push   0xc001f818
c000e610:	6a 2e                	push   0x2e
c000e612:	53                   	push   ebx
c000e613:	e8 64 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e618:	6a 00                	push   0x0
c000e61a:	68 22 f8 01 c0       	push   0xc001f822
c000e61f:	6a 2f                	push   0x2f
c000e621:	53                   	push   ebx
c000e622:	e8 55 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e627:	83 c4 20             	add    esp,0x20
c000e62a:	6a 00                	push   0x0
c000e62c:	68 7c f9 01 c0       	push   0xc001f97c
c000e631:	6a 30                	push   0x30
c000e633:	53                   	push   ebx
c000e634:	e8 43 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e639:	6a 00                	push   0x0
c000e63b:	68 86 f9 01 c0       	push   0xc001f986
c000e640:	6a 31                	push   0x31
c000e642:	53                   	push   ebx
c000e643:	e8 34 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e648:	83 c4 20             	add    esp,0x20
c000e64b:	6a 00                	push   0x0
c000e64d:	68 90 f9 01 c0       	push   0xc001f990
c000e652:	6a 32                	push   0x32
c000e654:	53                   	push   ebx
c000e655:	e8 22 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e65a:	6a 00                	push   0x0
c000e65c:	68 9a f9 01 c0       	push   0xc001f99a
c000e661:	6a 33                	push   0x33
c000e663:	53                   	push   ebx
c000e664:	e8 13 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e669:	83 c4 20             	add    esp,0x20
c000e66c:	6a 00                	push   0x0
c000e66e:	68 a4 f9 01 c0       	push   0xc001f9a4
c000e673:	6a 34                	push   0x34
c000e675:	53                   	push   ebx
c000e676:	e8 01 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e67b:	6a 00                	push   0x0
c000e67d:	68 ae f9 01 c0       	push   0xc001f9ae
c000e682:	6a 35                	push   0x35
c000e684:	53                   	push   ebx
c000e685:	e8 f2 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e68a:	83 c4 20             	add    esp,0x20
c000e68d:	6a 00                	push   0x0
c000e68f:	68 b8 f9 01 c0       	push   0xc001f9b8
c000e694:	6a 36                	push   0x36
c000e696:	53                   	push   ebx
c000e697:	e8 e0 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e69c:	6a 00                	push   0x0
c000e69e:	68 c2 f9 01 c0       	push   0xc001f9c2
c000e6a3:	6a 37                	push   0x37
c000e6a5:	53                   	push   ebx
c000e6a6:	e8 d1 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e6ab:	83 c4 1c             	add    esp,0x1c
c000e6ae:	6a 03                	push   0x3
c000e6b0:	6a 02                	push   0x2
c000e6b2:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e6b8:	e8 69 41 00 00       	call   c0012826 <VAS::allocatePages(int, int)>
c000e6bd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6c4:	89 c6                	mov    esi,eax
c000e6c6:	e8 b0 02 00 00       	call   c000e97b <malloc>
c000e6cb:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6d4:	89 c7                	mov    edi,eax
c000e6d6:	e8 19 32 00 00       	call   c00118f4 <TSS::TSS()>
c000e6db:	83 c4 0c             	add    esp,0xc
c000e6de:	68 36 f7 01 c0       	push   0xc001f736
c000e6e3:	56                   	push   esi
c000e6e4:	57                   	push   edi
c000e6e5:	e8 4e 32 00 00       	call   c0011938 <TSS::setup(unsigned long, unsigned long)>
c000e6ea:	89 c6                	mov    esi,eax
c000e6ec:	58                   	pop    eax
c000e6ed:	5a                   	pop    edx
c000e6ee:	6a 00                	push   0x0
c000e6f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e6f4:	50                   	push   eax
c000e6f5:	e8 ce fb ff ff       	call   c000e2c8 <IDTEntry::IDTEntry(bool)>
c000e6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6fe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e703:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e70a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e710:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e714:	80 ce 05             	or     dh,0x5
c000e717:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e71a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e71e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e722:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e728:	e8 87 fc ff ff       	call   c000e3b4 <IDT::flush()>
c000e72d:	83 c4 20             	add    esp,0x20
c000e730:	5b                   	pop    ebx
c000e731:	5e                   	pop    esi
c000e732:	5f                   	pop    edi
c000e733:	c3                   	ret    

c000e734 <CPU::current()>:
c000e734:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e739:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e73f:	c3                   	ret    

c000e740 <operator new(unsigned long)>:
c000e740:	e9 36 02 00 00       	jmp    c000e97b <malloc>

c000e745 <operator delete(void*)>:
c000e745:	e9 51 02 00 00       	jmp    c000e99b <rfree>

c000e74a <disableIRQs()>:
c000e74a:	fa                   	cli    
c000e74b:	c3                   	ret    

c000e74c <enableIRQs()>:
c000e74c:	fb                   	sti    
c000e74d:	c3                   	ret    

c000e74e <lockScheduler()>:
c000e74e:	fa                   	cli    
c000e74f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e755:	c3                   	ret    

c000e756 <unlockScheduler()>:
c000e756:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e75d:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e764:	75 01                	jne    c000e767 <unlockScheduler()+0x11>
c000e766:	fb                   	sti    
c000e767:	c3                   	ret    

c000e768 <lockStuff()>:
c000e768:	fa                   	cli    
c000e769:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e76f:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e775:	c3                   	ret    

c000e776 <unlockStuff()>:
c000e776:	83 ec 0c             	sub    esp,0xc
c000e779:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e77e:	48                   	dec    eax
c000e77f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e784:	75 18                	jne    c000e79e <unlockStuff()+0x28>
c000e786:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e78d:	74 0f                	je     c000e79e <unlockStuff()+0x28>
c000e78f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e799:	e8 12 6d 00 00       	call   c00154b0 <schedule()>
c000e79e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e7a5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e7ac:	75 01                	jne    c000e7af <unlockStuff()+0x39>
c000e7ae:	fb                   	sti    
c000e7af:	83 c4 0c             	add    esp,0xc
c000e7b2:	c3                   	ret    

c000e7b3 <Virt::getAKernelVAS()>:
c000e7b3:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e7b8:	c3                   	ret    

c000e7b9 <__not_memcpy>:
c000e7b9:	57                   	push   edi
c000e7ba:	56                   	push   esi
c000e7bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7c7:	89 c7                	mov    edi,eax
c000e7c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7cb:	5e                   	pop    esi
c000e7cc:	5f                   	pop    edi
c000e7cd:	c3                   	ret    

c000e7ce <sbrk>:
c000e7ce:	55                   	push   ebp
c000e7cf:	57                   	push   edi
c000e7d0:	56                   	push   esi
c000e7d1:	53                   	push   ebx
c000e7d2:	83 ec 1c             	sub    esp,0x1c
c000e7d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d9:	85 c0                	test   eax,eax
c000e7db:	74 61                	je     c000e83e <sbrk+0x70>
c000e7dd:	78 66                	js     c000e845 <sbrk+0x77>
c000e7df:	8b 15 f0 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243f0
c000e7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e7e9:	05 ff 0f 00 00       	add    eax,0xfff
c000e7ee:	89 c5                	mov    ebp,eax
c000e7f0:	78 6b                	js     c000e85d <sbrk+0x8f>
c000e7f2:	c1 fd 0c             	sar    ebp,0xc
c000e7f5:	bb 00 00 00 00       	mov    ebx,0x0
c000e7fa:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e800:	8b 3d f0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243f0
c000e806:	e8 ab 06 00 00       	call   c000eeb6 <Phys::allocatePage()>
c000e80b:	68 01 04 00 00       	push   0x401
c000e810:	57                   	push   edi
c000e811:	50                   	push   eax
c000e812:	56                   	push   esi
c000e813:	e8 0a 3f 00 00       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e818:	81 05 f0 43 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00243f0,0x1000
c000e822:	83 c3 01             	add    ebx,0x1
c000e825:	83 c4 10             	add    esp,0x10
c000e828:	39 dd                	cmp    ebp,ebx
c000e82a:	75 ce                	jne    c000e7fa <sbrk+0x2c>
c000e82c:	0f 20 d8             	mov    eax,cr3
c000e82f:	0f 22 d8             	mov    cr3,eax
c000e832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e836:	83 c4 1c             	add    esp,0x1c
c000e839:	5b                   	pop    ebx
c000e83a:	5e                   	pop    esi
c000e83b:	5f                   	pop    edi
c000e83c:	5d                   	pop    ebp
c000e83d:	c3                   	ret    
c000e83e:	a1 f0 43 02 c0       	mov    eax,ds:0xc00243f0
c000e843:	eb f1                	jmp    c000e836 <sbrk+0x68>
c000e845:	83 ec 08             	sub    esp,0x8
c000e848:	50                   	push   eax
c000e849:	68 54 22 02 c0       	push   0xc0022254
c000e84e:	e8 11 87 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85b:	eb d9                	jmp    c000e836 <sbrk+0x68>
c000e85d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e863:	eb 8d                	jmp    c000e7f2 <sbrk+0x24>

c000e865 <sbrk_thunk>:
c000e865:	83 ec 0c             	sub    esp,0xc
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e871:	7f 10                	jg     c000e883 <sbrk_thunk+0x1e>
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	50                   	push   eax
c000e877:	e8 52 ff ff ff       	call   c000e7ce <sbrk>
c000e87c:	83 c4 10             	add    esp,0x10
c000e87f:	83 c4 0c             	add    esp,0xc
c000e882:	c3                   	ret    
c000e883:	83 ec 08             	sub    esp,0x8
c000e886:	50                   	push   eax
c000e887:	68 84 22 02 c0       	push   0xc0022284
c000e88c:	e8 d3 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e899:	eb e4                	jmp    c000e87f <sbrk_thunk+0x1a>

c000e89b <mmap>:
c000e89b:	55                   	push   ebp
c000e89c:	57                   	push   edi
c000e89d:	56                   	push   esi
c000e89e:	53                   	push   ebx
c000e89f:	83 ec 18             	sub    esp,0x18
c000e8a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a6:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e8ac:	89 fb                	mov    ebx,edi
c000e8ae:	c1 eb 0c             	shr    ebx,0xc
c000e8b1:	53                   	push   ebx
c000e8b2:	e8 88 37 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c000e8b7:	89 c5                	mov    ebp,eax
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	85 db                	test   ebx,ebx
c000e8be:	7e 2f                	jle    c000e8ef <mmap+0x54>
c000e8c0:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8c6:	01 c7                	add    edi,eax
c000e8c8:	89 c3                	mov    ebx,eax
c000e8ca:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e8d0:	e8 e1 05 00 00       	call   c000eeb6 <Phys::allocatePage()>
c000e8d5:	68 01 04 00 00       	push   0x401
c000e8da:	53                   	push   ebx
c000e8db:	50                   	push   eax
c000e8dc:	56                   	push   esi
c000e8dd:	e8 40 3e 00 00       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	39 fb                	cmp    ebx,edi
c000e8ed:	75 db                	jne    c000e8ca <mmap+0x2f>
c000e8ef:	89 e8                	mov    eax,ebp
c000e8f1:	83 c4 0c             	add    esp,0xc
c000e8f4:	5b                   	pop    ebx
c000e8f5:	5e                   	pop    esi
c000e8f6:	5f                   	pop    edi
c000e8f7:	5d                   	pop    ebp
c000e8f8:	c3                   	ret    

c000e8f9 <munmap>:
c000e8f9:	83 ec 18             	sub    esp,0x18
c000e8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e900:	e8 42 3a 00 00       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c000e905:	b8 00 00 00 00       	mov    eax,0x0
c000e90a:	83 c4 1c             	add    esp,0x1c
c000e90d:	c3                   	ret    

c000e90e <liballoc_lock()>:
c000e90e:	fa                   	cli    
c000e90f:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e916:	b8 00 00 00 00       	mov    eax,0x0
c000e91b:	c3                   	ret    

c000e91c <liballoc_unlock()>:
c000e91c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e924:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e92b:	75 01                	jne    c000e92e <liballoc_unlock()+0x12>
c000e92d:	fb                   	sti    
c000e92e:	b8 00 00 00 00       	mov    eax,0x0
c000e933:	c3                   	ret    

c000e934 <liballoc_alloc(int)>:
c000e934:	83 ec 10             	sub    esp,0x10
c000e937:	6a 01                	push   0x1
c000e939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e93d:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e943:	e8 de 3e 00 00       	call   c0012826 <VAS::allocatePages(int, int)>
c000e948:	83 c4 1c             	add    esp,0x1c
c000e94b:	c3                   	ret    

c000e94c <liballoc_free(void*, int)>:
c000e94c:	83 ec 14             	sub    esp,0x14
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e959:	e8 26 3b 00 00       	call   c0012484 <VAS::freeAllocatedPages(unsigned long)>
c000e95e:	b8 00 00 00 00       	mov    eax,0x0
c000e963:	83 c4 1c             	add    esp,0x1c
c000e966:	c3                   	ret    

c000e967 <realloc>:
c000e967:	83 ec 14             	sub    esp,0x14
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e972:	e8 e0 2d ff ff       	call   c0001757 <dlrealloc>
c000e977:	83 c4 1c             	add    esp,0x1c
c000e97a:	c3                   	ret    

c000e97b <malloc>:
c000e97b:	83 ec 18             	sub    esp,0x18
c000e97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e982:	e8 93 28 ff ff       	call   c000121a <dlmalloc>
c000e987:	83 c4 1c             	add    esp,0x1c
c000e98a:	c3                   	ret    

c000e98b <free>:
c000e98b:	83 ec 18             	sub    esp,0x18
c000e98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e992:	e8 bc 23 ff ff       	call   c0000d53 <dlfree>
c000e997:	83 c4 1c             	add    esp,0x1c
c000e99a:	c3                   	ret    

c000e99b <rfree>:
c000e99b:	83 ec 18             	sub    esp,0x18
c000e99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a2:	e8 ac 23 ff ff       	call   c0000d53 <dlfree>
c000e9a7:	83 c4 1c             	add    esp,0x1c
c000e9aa:	c3                   	ret    

c000e9ab <calloc>:
c000e9ab:	56                   	push   esi
c000e9ac:	53                   	push   ebx
c000e9ad:	83 ec 10             	sub    esp,0x10
c000e9b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e9b4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e9b9:	53                   	push   ebx
c000e9ba:	e8 bc ff ff ff       	call   c000e97b <malloc>
c000e9bf:	89 c6                	mov    esi,eax
c000e9c1:	83 c4 0c             	add    esp,0xc
c000e9c4:	53                   	push   ebx
c000e9c5:	6a 00                	push   0x0
c000e9c7:	50                   	push   eax
c000e9c8:	e8 23 1b ff ff       	call   c00004f0 <memset>
c000e9cd:	89 f0                	mov    eax,esi
c000e9cf:	83 c4 14             	add    esp,0x14
c000e9d2:	5b                   	pop    ebx
c000e9d3:	5e                   	pop    esi
c000e9d4:	c3                   	ret    
c000e9d5:	66 90                	xchg   ax,ax
c000e9d7:	90                   	nop

c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>:
c000e9d8:	83 ec 10             	sub    esp,0x10
c000e9db:	fa                   	cli    
c000e9dc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9e1:	83 c0 01             	add    eax,0x1
c000e9e4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9e9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9f5:	85 c0                	test   eax,eax
c000e9f7:	75 23                	jne    c000ea1c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea01:	89 10                	mov    DWORD PTR [eax],edx
c000ea03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea0a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea14:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea19:	8d 76 00             	lea    esi,[esi+0x0]
c000ea1c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea24:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea29:	85 c0                	test   eax,eax
c000ea2b:	75 03                	jne    c000ea30 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ea2d:	fb                   	sti    
c000ea2e:	66 90                	xchg   ax,ax
c000ea30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea34:	83 c4 10             	add    esp,0x10
c000ea37:	c3                   	ret    

c000ea38 <KeMailboxTryGet(Mailbox*, void**)>:
c000ea38:	83 ec 10             	sub    esp,0x10
c000ea3b:	fa                   	cli    
c000ea3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea41:	83 c0 01             	add    eax,0x1
c000ea44:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea49:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea55:	83 f8 01             	cmp    eax,0x1
c000ea58:	75 22                	jne    c000ea7c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea5e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea64:	89 10                	mov    DWORD PTR [eax],edx
c000ea66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea6d:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea77:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea7c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea84:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea89:	85 c0                	test   eax,eax
c000ea8b:	75 03                	jne    c000ea90 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000ea8d:	fb                   	sti    
c000ea8e:	66 90                	xchg   ax,ax
c000ea90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	c3                   	ret    

c000ea98 <KeMailboxCreate()>:
c000ea98:	83 ec 1c             	sub    esp,0x1c
c000ea9b:	83 ec 0c             	sub    esp,0xc
c000ea9e:	6a 08                	push   0x8
c000eaa0:	e8 d6 fe ff ff       	call   c000e97b <malloc>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eaac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac5:	83 c4 1c             	add    esp,0x1c
c000eac8:	c3                   	ret    
c000eac9:	8d 76 00             	lea    esi,[esi+0x0]

c000eacc <KeMailboxPost(Mailbox*, void*)>:
c000eacc:	83 ec 1c             	sub    esp,0x1c
c000eacf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ead4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ead8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eadc:	e8 f7 fe ff ff       	call   c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>
c000eae1:	83 c4 08             	add    esp,0x8
c000eae4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eae8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaec:	83 f0 01             	xor    eax,0x1
c000eaef:	0f b6 c0             	movzx  eax,al
c000eaf2:	85 c0                	test   eax,eax
c000eaf4:	74 26                	je     c000eb1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000eaf6:	fa                   	cli    
c000eaf7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eafc:	83 c0 01             	add    eax,0x1
c000eaff:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb04:	e8 a7 69 00 00       	call   c00154b0 <schedule()>
c000eb09:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eb11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb16:	85 c0                	test   eax,eax
c000eb18:	75 02                	jne    c000eb1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000eb1a:	fb                   	sti    
c000eb1b:	90                   	nop
c000eb1c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb21:	85 c0                	test   eax,eax
c000eb23:	75 03                	jne    c000eb28 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000eb25:	eb ad                	jmp    c000ead4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb27:	90                   	nop
c000eb28:	90                   	nop
c000eb29:	83 c4 1c             	add    esp,0x1c
c000eb2c:	c3                   	ret    
c000eb2d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb30 <KeMailboxGet(Mailbox*, void**)>:
c000eb30:	83 ec 1c             	sub    esp,0x1c
c000eb33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb40:	e8 f3 fe ff ff       	call   c000ea38 <KeMailboxTryGet(Mailbox*, void**)>
c000eb45:	83 c4 08             	add    esp,0x8
c000eb48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb50:	83 f0 01             	xor    eax,0x1
c000eb53:	0f b6 c0             	movzx  eax,al
c000eb56:	85 c0                	test   eax,eax
c000eb58:	74 26                	je     c000eb80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb5a:	fa                   	cli    
c000eb5b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb60:	83 c0 01             	add    eax,0x1
c000eb63:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb68:	e8 43 69 00 00       	call   c00154b0 <schedule()>
c000eb6d:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eb75:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb7a:	85 c0                	test   eax,eax
c000eb7c:	75 02                	jne    c000eb80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb7e:	fb                   	sti    
c000eb7f:	90                   	nop
c000eb80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb85:	85 c0                	test   eax,eax
c000eb87:	75 03                	jne    c000eb8c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eb89:	eb ad                	jmp    c000eb38 <KeMailboxGet(Mailbox*, void**)+0x8>
c000eb8b:	90                   	nop
c000eb8c:	90                   	nop
c000eb8d:	83 c4 1c             	add    esp,0x1c
c000eb90:	c3                   	ret    
c000eb91:	8d 76 00             	lea    esi,[esi+0x0]

c000eb94 <KeMailboxDestroy(Mailbox*)>:
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	83 ec 0c             	sub    esp,0xc
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 e8 fd ff ff       	call   c000e98b <free>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	90                   	nop
c000eba7:	83 c4 0c             	add    esp,0xc
c000ebaa:	c3                   	ret    

c000ebab <KeEntryPoint>:
c000ebab:	57                   	push   edi
c000ebac:	bf f9 03 00 00       	mov    edi,0x3f9
c000ebb1:	56                   	push   esi
c000ebb2:	89 fa                	mov    edx,edi
c000ebb4:	53                   	push   ebx
c000ebb5:	31 f6                	xor    esi,esi
c000ebb7:	83 ec 2c             	sub    esp,0x2c
c000ebba:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ebbf:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000ebc4:	89 f0                	mov    eax,esi
c000ebc6:	ee                   	out    dx,al
c000ebc7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebcc:	b0 80                	mov    al,0x80
c000ebce:	89 da                	mov    edx,ebx
c000ebd0:	ee                   	out    dx,al
c000ebd1:	b1 03                	mov    cl,0x3
c000ebd3:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebd8:	88 c8                	mov    al,cl
c000ebda:	ee                   	out    dx,al
c000ebdb:	89 f0                	mov    eax,esi
c000ebdd:	89 fa                	mov    edx,edi
c000ebdf:	ee                   	out    dx,al
c000ebe0:	88 c8                	mov    al,cl
c000ebe2:	89 da                	mov    edx,ebx
c000ebe4:	ee                   	out    dx,al
c000ebe5:	b0 c7                	mov    al,0xc7
c000ebe7:	ba fa 03 00 00       	mov    edx,0x3fa
c000ebec:	ee                   	out    dx,al
c000ebed:	b0 0b                	mov    al,0xb
c000ebef:	ba fc 03 00 00       	mov    edx,0x3fc
c000ebf4:	ee                   	out    dx,al
c000ebf5:	68 93 22 02 c0       	push   0xc0022293
c000ebfa:	e8 65 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebff:	e8 0d da ff ff       	call   c000c611 <KeDisplaySplashScreen()>
c000ec04:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ec09:	05 ff 0f 00 00       	add    eax,0xfff
c000ec0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec16:	e8 1d 04 00 00       	call   c000f038 <Phys::physicalMemorySetup(unsigned int)>
c000ec1b:	e8 fd 35 00 00       	call   c001221d <Virt::virtualMemorySetup()>
c000ec20:	e8 36 d9 ff ff       	call   c000c55b <KeInitialiseAtexit()>
c000ec25:	c7 04 24 aa 22 02 c0 	mov    DWORD PTR [esp],0xc00222aa
c000ec2c:	e8 33 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec31:	58                   	pop    eax
c000ec32:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec36:	53                   	push   ebx
c000ec37:	e8 c8 38 00 00       	call   c0012504 <VAS::VAS()>
c000ec3c:	c7 04 24 ba 22 02 c0 	mov    DWORD PTR [esp],0xc00222ba
c000ec43:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ec49:	e8 16 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec4e:	e8 2b 13 01 00       	call   c001ff7e <_init>
c000ec53:	c7 04 24 ce 22 02 c0 	mov    DWORD PTR [esp],0xc00222ce
c000ec5a:	e8 05 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec5f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec66:	e8 10 fd ff ff       	call   c000e97b <malloc>
c000ec6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec6e:	89 c6                	mov    esi,eax
c000ec70:	e8 63 ea ff ff       	call   c000d6d8 <Computer::Computer()>
c000ec75:	5a                   	pop    edx
c000ec76:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ec7c:	59                   	pop    ecx
c000ec7d:	56                   	push   esi
c000ec7e:	68 dd 22 02 c0       	push   0xc00222dd
c000ec83:	e8 dc 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec88:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ec8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec8f:	53                   	push   ebx
c000ec90:	6a 00                	push   0x0
c000ec92:	6a 00                	push   0x0
c000ec94:	50                   	push   eax
c000ec95:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec98:	83 c4 14             	add    esp,0x14
c000ec9b:	53                   	push   ebx
c000ec9c:	e8 19 39 00 00       	call   c00125ba <VAS::~VAS()>
c000eca1:	83 c4 30             	add    esp,0x30
c000eca4:	5b                   	pop    ebx
c000eca5:	5e                   	pop    esi
c000eca6:	5f                   	pop    edi
c000eca7:	c3                   	ret    

c000eca8 <Mutex::Mutex()>:
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecaf:	83 ec 08             	sub    esp,0x8
c000ecb2:	6a 01                	push   0x1
c000ecb4:	50                   	push   eax
c000ecb5:	e8 46 0c 00 00       	call   c000f900 <Semaphore::Semaphore(int)>
c000ecba:	83 c4 10             	add    esp,0x10
c000ecbd:	90                   	nop
c000ecbe:	83 c4 0c             	add    esp,0xc
c000ecc1:	c3                   	ret    

c000ecc2 <KePanic(char const*)>:
c000ecc2:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ecc9:	e9 f1 96 00 00       	jmp    c00183bf <HalPanic(char const*)>

c000ecce <Phys::allocateDMA(unsigned long)>:
c000ecce:	55                   	push   ebp
c000eccf:	31 ed                	xor    ebp,ebp
c000ecd1:	57                   	push   edi
c000ecd2:	56                   	push   esi
c000ecd3:	53                   	push   ebx
c000ecd4:	31 db                	xor    ebx,ebx
c000ecd6:	83 ec 1c             	sub    esp,0x1c
c000ecd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ece5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000eceb:	31 c0                	xor    eax,eax
c000eced:	c1 ef 0c             	shr    edi,0xc
c000ecf0:	eb 1b                	jmp    c000ed0d <Phys::allocateDMA(unsigned long)+0x3f>
c000ecf2:	85 c0                	test   eax,eax
c000ecf4:	75 06                	jne    c000ecfc <Phys::allocateDMA(unsigned long)+0x2e>
c000ecf6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ecfa:	89 dd                	mov    ebp,ebx
c000ecfc:	8d 70 01             	lea    esi,[eax+0x1]
c000ecff:	39 f7                	cmp    edi,esi
c000ed01:	74 37                	je     c000ed3a <Phys::allocateDMA(unsigned long)+0x6c>
c000ed03:	89 f0                	mov    eax,esi
c000ed05:	83 c3 01             	add    ebx,0x1
c000ed08:	83 fb 0f             	cmp    ebx,0xf
c000ed0b:	7f 13                	jg     c000ed20 <Phys::allocateDMA(unsigned long)+0x52>
c000ed0d:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ed14:	74 dc                	je     c000ecf2 <Phys::allocateDMA(unsigned long)+0x24>
c000ed16:	31 c0                	xor    eax,eax
c000ed18:	83 c3 01             	add    ebx,0x1
c000ed1b:	83 fb 0f             	cmp    ebx,0xf
c000ed1e:	7e ed                	jle    c000ed0d <Phys::allocateDMA(unsigned long)+0x3f>
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	68 f4 22 02 c0       	push   0xc00222f4
c000ed28:	e8 95 ff ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ed2d:	83 c4 10             	add    esp,0x10
c000ed30:	31 c0                	xor    eax,eax
c000ed32:	83 c4 1c             	add    esp,0x1c
c000ed35:	5b                   	pop    ebx
c000ed36:	5e                   	pop    esi
c000ed37:	5f                   	pop    edi
c000ed38:	5d                   	pop    ebp
c000ed39:	c3                   	ret    
c000ed3a:	89 e9                	mov    ecx,ebp
c000ed3c:	c1 f9 04             	sar    ecx,0x4
c000ed3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed43:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ed47:	89 ca                	mov    edx,ecx
c000ed49:	83 ea 01             	sub    edx,0x1
c000ed4c:	79 03                	jns    c000ed51 <Phys::allocateDMA(unsigned long)+0x83>
c000ed4e:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed51:	c1 fa 04             	sar    edx,0x4
c000ed54:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ed58:	74 08                	je     c000ed62 <Phys::allocateDMA(unsigned long)+0x94>
c000ed5a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed5e:	31 c0                	xor    eax,eax
c000ed60:	eb b6                	jmp    c000ed18 <Phys::allocateDMA(unsigned long)+0x4a>
c000ed62:	85 f6                	test   esi,esi
c000ed64:	74 17                	je     c000ed7d <Phys::allocateDMA(unsigned long)+0xaf>
c000ed66:	8d 95 b0 bd 02 c0    	lea    edx,[ebp-0x3ffd4250]
c000ed6c:	8d 84 05 b1 bd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd424f]
c000ed73:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed76:	83 c2 01             	add    edx,0x1
c000ed79:	39 d0                	cmp    eax,edx
c000ed7b:	75 f6                	jne    c000ed73 <Phys::allocateDMA(unsigned long)+0xa5>
c000ed7d:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed86:	01 f8                	add    eax,edi
c000ed88:	85 d2                	test   edx,edx
c000ed8a:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed8f:	74 17                	je     c000eda8 <Phys::allocateDMA(unsigned long)+0xda>
c000ed91:	83 ec 0c             	sub    esp,0xc
c000ed94:	68 f4 22 02 c0       	push   0xc00222f4
c000ed99:	e8 24 ff ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	89 f0                	mov    eax,esi
c000eda3:	e9 5d ff ff ff       	jmp    c000ed05 <Phys::allocateDMA(unsigned long)+0x37>
c000eda8:	c1 e5 0c             	shl    ebp,0xc
c000edab:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000edb1:	e9 7c ff ff ff       	jmp    c000ed32 <Phys::allocateDMA(unsigned long)+0x64>

c000edb6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000edb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edba:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000edc0:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edc5:	c1 ea 0c             	shr    edx,0xc
c000edc8:	29 d0                	sub    eax,edx
c000edca:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000edcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000edd8:	c1 e8 0c             	shr    eax,0xc
c000eddb:	85 d2                	test   edx,edx
c000eddd:	74 11                	je     c000edf0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000eddf:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ede4:	01 c2                	add    edx,eax
c000ede6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ede9:	83 c0 01             	add    eax,0x1
c000edec:	39 d0                	cmp    eax,edx
c000edee:	75 f6                	jne    c000ede6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000edf0:	c3                   	ret    

c000edf1 <Phys::setPageState(unsigned long, bool)>:
c000edf1:	57                   	push   edi
c000edf2:	56                   	push   esi
c000edf3:	8b 35 f4 43 02 c0    	mov    esi,DWORD PTR ds:0xc00243f4
c000edf9:	53                   	push   ebx
c000edfa:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000edff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee07:	0f b6 c0             	movzx  eax,al
c000ee0a:	89 ca                	mov    edx,ecx
c000ee0c:	83 e1 07             	and    ecx,0x7
c000ee0f:	c1 ea 03             	shr    edx,0x3
c000ee12:	d3 c3                	rol    ebx,cl
c000ee14:	01 d6                	add    esi,edx
c000ee16:	d3 e0                	shl    eax,cl
c000ee18:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ee1b:	21 fb                	and    ebx,edi
c000ee1d:	88 1e                	mov    BYTE PTR [esi],bl
c000ee1f:	8b 1d f4 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243f4
c000ee25:	01 da                	add    edx,ebx
c000ee27:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee29:	09 c8                	or     eax,ecx
c000ee2b:	88 02                	mov    BYTE PTR [edx],al
c000ee2d:	5b                   	pop    ebx
c000ee2e:	5e                   	pop    esi
c000ee2f:	5f                   	pop    edi
c000ee30:	c3                   	ret    

c000ee31 <Phys::getPageState(unsigned long)>:
c000ee31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee35:	8b 15 f4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243f4
c000ee3b:	89 c8                	mov    eax,ecx
c000ee3d:	83 e1 07             	and    ecx,0x7
c000ee40:	c1 e8 03             	shr    eax,0x3
c000ee43:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee47:	d3 f8                	sar    eax,cl
c000ee49:	83 e0 01             	and    eax,0x1
c000ee4c:	c3                   	ret    

c000ee4d <Phys::freePage(unsigned long)>:
c000ee4d:	53                   	push   ebx
c000ee4e:	83 ec 08             	sub    esp,0x8
c000ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee55:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee5b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee61:	76 41                	jbe    c000eea4 <Phys::freePage(unsigned long)+0x57>
c000ee63:	c1 e8 0c             	shr    eax,0xc
c000ee66:	50                   	push   eax
c000ee67:	89 c3                	mov    ebx,eax
c000ee69:	e8 c3 ff ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000ee6e:	5a                   	pop    edx
c000ee6f:	84 c0                	test   al,al
c000ee71:	74 20                	je     c000ee93 <Phys::freePage(unsigned long)+0x46>
c000ee73:	83 ec 08             	sub    esp,0x8
c000ee76:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ee7b:	6a 00                	push   0x0
c000ee7d:	83 e8 01             	sub    eax,0x1
c000ee80:	53                   	push   ebx
c000ee81:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ee86:	e8 66 ff ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	83 c4 08             	add    esp,0x8
c000ee91:	5b                   	pop    ebx
c000ee92:	c3                   	ret    
c000ee93:	c7 44 24 10 f9 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223f9
c000ee9b:	83 c4 08             	add    esp,0x8
c000ee9e:	5b                   	pop    ebx
c000ee9f:	e9 1e fe ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c000eea4:	68 00 10 00 00       	push   0x1000
c000eea9:	50                   	push   eax
c000eeaa:	e8 07 ff ff ff       	call   c000edb6 <Phys::freeDMA(unsigned long, unsigned long)>
c000eeaf:	59                   	pop    ecx
c000eeb0:	5b                   	pop    ebx
c000eeb1:	83 c4 08             	add    esp,0x8
c000eeb4:	5b                   	pop    ebx
c000eeb5:	c3                   	ret    

c000eeb6 <Phys::allocatePage()>:
c000eeb6:	56                   	push   esi
c000eeb7:	53                   	push   ebx
c000eeb8:	83 ec 14             	sub    esp,0x14
c000eebb:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000eec1:	89 f3                	mov    ebx,esi
c000eec3:	eb 0a                	jmp    c000eecf <Phys::allocatePage()+0x19>
c000eec5:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000eecb:	39 de                	cmp    esi,ebx
c000eecd:	74 26                	je     c000eef5 <Phys::allocatePage()+0x3f>
c000eecf:	53                   	push   ebx
c000eed0:	e8 5c ff ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000eed5:	5a                   	pop    edx
c000eed6:	84 c0                	test   al,al
c000eed8:	74 67                	je     c000ef41 <Phys::allocatePage()+0x8b>
c000eeda:	83 c3 01             	add    ebx,0x1
c000eedd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eee3:	75 e0                	jne    c000eec5 <Phys::allocatePage()+0xf>
c000eee5:	31 db                	xor    ebx,ebx
c000eee7:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000eef1:	39 de                	cmp    esi,ebx
c000eef3:	75 da                	jne    c000eecf <Phys::allocatePage()+0x19>
c000eef5:	83 ec 0c             	sub    esp,0xc
c000eef8:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000eefd:	83 f0 01             	xor    eax,0x1
c000ef00:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ef05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef0d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ef13:	50                   	push   eax
c000ef14:	e8 4f 40 00 00       	call   c0012f68 <VAS::scanForEviction()>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	85 c0                	test   eax,eax
c000ef1e:	75 48                	jne    c000ef68 <Phys::allocatePage()+0xb2>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 1c 23 02 c0       	push   0xc002231c
c000ef28:	e8 95 fd ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ef2d:	83 c4 10             	add    esp,0x10
c000ef30:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ef36:	53                   	push   ebx
c000ef37:	e8 f5 fe ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000ef3c:	5a                   	pop    edx
c000ef3d:	84 c0                	test   al,al
c000ef3f:	75 99                	jne    c000eeda <Phys::allocatePage()+0x24>
c000ef41:	6a 01                	push   0x1
c000ef43:	53                   	push   ebx
c000ef44:	e8 a8 fe ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ef49:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ef4f:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000ef54:	83 c2 01             	add    edx,0x1
c000ef57:	59                   	pop    ecx
c000ef58:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ef5e:	c1 e0 0c             	shl    eax,0xc
c000ef61:	5b                   	pop    ebx
c000ef62:	83 c4 14             	add    esp,0x14
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    
c000ef68:	83 ec 08             	sub    esp,0x8
c000ef6b:	89 c2                	mov    edx,eax
c000ef6d:	6a 01                	push   0x1
c000ef6f:	c1 ea 0c             	shr    edx,0xc
c000ef72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef76:	52                   	push   edx
c000ef77:	e8 75 fe ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ef7c:	83 c4 10             	add    esp,0x10
c000ef7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef83:	eb dd                	jmp    c000ef62 <Phys::allocatePage()+0xac>

c000ef85 <Phys::allocateContiguousPages(int)>:
c000ef85:	57                   	push   edi
c000ef86:	56                   	push   esi
c000ef87:	53                   	push   ebx
c000ef88:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ef8c:	fa                   	cli    
c000ef8d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c000ef93:	83 ec 0c             	sub    esp,0xc
c000ef96:	83 c2 01             	add    edx,0x1
c000ef99:	68 4c 23 02 c0       	push   0xc002234c
c000ef9e:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c000efa4:	31 db                	xor    ebx,ebx
c000efa6:	e8 b9 7f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	85 db                	test   ebx,ebx
c000efb0:	75 11                	jne    c000efc3 <Phys::allocateContiguousPages(int)+0x3e>
c000efb2:	e8 ff fe ff ff       	call   c000eeb6 <Phys::allocatePage()>
c000efb7:	83 ff 01             	cmp    edi,0x1
c000efba:	89 c6                	mov    esi,eax
c000efbc:	74 21                	je     c000efdf <Phys::allocateContiguousPages(int)+0x5a>
c000efbe:	bb 01 00 00 00       	mov    ebx,0x1
c000efc3:	e8 ee fe ff ff       	call   c000eeb6 <Phys::allocatePage()>
c000efc8:	89 da                	mov    edx,ebx
c000efca:	c1 e2 0c             	shl    edx,0xc
c000efcd:	01 f2                	add    edx,esi
c000efcf:	39 c2                	cmp    edx,eax
c000efd1:	74 24                	je     c000eff7 <Phys::allocateContiguousPages(int)+0x72>
c000efd3:	bb 01 00 00 00       	mov    ebx,0x1
c000efd8:	89 c6                	mov    esi,eax
c000efda:	83 ff 01             	cmp    edi,0x1
c000efdd:	75 e4                	jne    c000efc3 <Phys::allocateContiguousPages(int)+0x3e>
c000efdf:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000efe7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000efec:	85 c0                	test   eax,eax
c000efee:	75 01                	jne    c000eff1 <Phys::allocateContiguousPages(int)+0x6c>
c000eff0:	fb                   	sti    
c000eff1:	89 f0                	mov    eax,esi
c000eff3:	5b                   	pop    ebx
c000eff4:	5e                   	pop    esi
c000eff5:	5f                   	pop    edi
c000eff6:	c3                   	ret    
c000eff7:	83 c3 01             	add    ebx,0x1
c000effa:	39 fb                	cmp    ebx,edi
c000effc:	75 b0                	jne    c000efae <Phys::allocateContiguousPages(int)+0x29>
c000effe:	eb df                	jmp    c000efdf <Phys::allocateContiguousPages(int)+0x5a>

c000f000 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f000:	56                   	push   esi
c000f001:	53                   	push   ebx
c000f002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f006:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000f00c:	73 06                	jae    c000f014 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f00e:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000f014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f018:	c1 eb 0c             	shr    ebx,0xc
c000f01b:	c1 e8 0c             	shr    eax,0xc
c000f01e:	39 d8                	cmp    eax,ebx
c000f020:	73 13                	jae    c000f035 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f022:	6a 00                	push   0x0
c000f024:	8d 70 01             	lea    esi,[eax+0x1]
c000f027:	50                   	push   eax
c000f028:	e8 c4 fd ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f02d:	5a                   	pop    edx
c000f02e:	89 f0                	mov    eax,esi
c000f030:	59                   	pop    ecx
c000f031:	39 f3                	cmp    ebx,esi
c000f033:	75 ed                	jne    c000f022 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f035:	5b                   	pop    ebx
c000f036:	5e                   	pop    esi
c000f037:	c3                   	ret    

c000f038 <Phys::physicalMemorySetup(unsigned int)>:
c000f038:	55                   	push   ebp
c000f039:	57                   	push   edi
c000f03a:	56                   	push   esi
c000f03b:	53                   	push   ebx
c000f03c:	83 ec 40             	sub    esp,0x40
c000f03f:	6a 10                	push   0x10
c000f041:	6a 00                	push   0x0
c000f043:	68 b0 bd 02 c0       	push   0xc002bdb0
c000f048:	e8 a3 14 ff ff       	call   c00004f0 <memset>
c000f04d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f051:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f056:	05 00 10 00 00       	add    eax,0x1000
c000f05b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f05f:	5b                   	pop    ebx
c000f060:	31 db                	xor    ebx,ebx
c000f062:	5e                   	pop    esi
c000f063:	50                   	push   eax
c000f064:	68 0f 24 02 c0       	push   0xc002240f
c000f069:	e8 f6 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f06e:	83 c4 10             	add    esp,0x10
c000f071:	83 ec 08             	sub    esp,0x8
c000f074:	6a 01                	push   0x1
c000f076:	53                   	push   ebx
c000f077:	83 c3 01             	add    ebx,0x1
c000f07a:	e8 72 fd ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f07f:	83 c4 10             	add    esp,0x10
c000f082:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f088:	75 e7                	jne    c000f071 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f08a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f091:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f098:	c1 e0 08             	shl    eax,0x8
c000f09b:	09 c2                	or     edx,eax
c000f09d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f0a1:	0f 84 98 01 00 00    	je     c000f23f <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f0a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0b3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f0c4:	eb 1c                	jmp    c000f0e2 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f0c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0ca:	83 c3 18             	add    ebx,0x18
c000f0cd:	83 c6 01             	add    esi,0x1
c000f0d0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f0d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f0dc:	0f 84 6d 01 00 00    	je     c000f24f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f0e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0e8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0f3:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0f5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0f8:	01 f0                	add    eax,esi
c000f0fa:	55                   	push   ebp
c000f0fb:	11 fa                	adc    edx,edi
c000f0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f101:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f105:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f109:	51                   	push   ecx
c000f10a:	56                   	push   esi
c000f10b:	68 ac 23 02 c0       	push   0xc00223ac
c000f110:	e8 4f 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f119:	83 c4 10             	add    esp,0x10
c000f11c:	09 f8                	or     eax,edi
c000f11e:	0f 85 2b 01 00 00    	jne    c000f24f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f124:	83 fd 01             	cmp    ebp,0x1
c000f127:	75 9d                	jne    c000f0c6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f129:	ba 00 00 08 00       	mov    edx,0x80000
c000f12e:	89 c1                	mov    ecx,eax
c000f130:	39 f2                	cmp    edx,esi
c000f132:	19 f9                	sbb    ecx,edi
c000f134:	0f 82 ab 00 00 00    	jb     c000f1e5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f13a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f13e:	89 c1                	mov    ecx,eax
c000f140:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f144:	0f 83 9b 00 00 00    	jae    c000f1e5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f14a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f14f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f153:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f157:	39 fa                	cmp    edx,edi
c000f159:	19 e8                	sbb    eax,ebp
c000f15b:	0f 82 b0 01 00 00    	jb     c000f311 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f161:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f165:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f169:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f16f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f174:	83 d5 ff             	adc    ebp,0xffffffff
c000f177:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f17b:	31 c0                	xor    eax,eax
c000f17d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f181:	39 fa                	cmp    edx,edi
c000f183:	89 c1                	mov    ecx,eax
c000f185:	19 e9                	sbb    ecx,ebp
c000f187:	0f 83 39 ff ff ff    	jae    c000f0c6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f18d:	be 00 00 08 00       	mov    esi,0x80000
c000f192:	83 ec 04             	sub    esp,0x4
c000f195:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f199:	57                   	push   edi
c000f19a:	56                   	push   esi
c000f19b:	68 d0 23 02 c0       	push   0xc00223d0
c000f1a0:	e8 bf 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1a5:	5d                   	pop    ebp
c000f1a6:	58                   	pop    eax
c000f1a7:	57                   	push   edi
c000f1a8:	56                   	push   esi
c000f1a9:	e8 52 fe ff ff       	call   c000f000 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f1ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1b6:	83 c4 0c             	add    esp,0xc
c000f1b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f1bd:	8b 15 ac bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bdac
c000f1c3:	01 d0                	add    eax,edx
c000f1c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1cc:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1d1:	52                   	push   edx
c000f1d2:	50                   	push   eax
c000f1d3:	68 35 24 02 c0       	push   0xc0022435
c000f1d8:	e8 87 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1dd:	83 c4 10             	add    esp,0x10
c000f1e0:	e9 e1 fe ff ff       	jmp    c000f0c6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1e5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f1e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f1:	39 ea                	cmp    edx,ebp
c000f1f3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f1f7:	0f 82 c9 fe ff ff    	jb     c000f0c6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1fd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f202:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f206:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f20a:	0f 83 b6 fe ff ff    	jae    c000f0c6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f210:	39 ee                	cmp    esi,ebp
c000f212:	89 f8                	mov    eax,edi
c000f214:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f218:	0f 83 74 ff ff ff    	jae    c000f192 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f21e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f222:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f226:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f22a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f22e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f232:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f236:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f23a:	e9 53 ff ff ff       	jmp    c000f192 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f23f:	83 ec 0c             	sub    esp,0xc
c000f242:	68 27 24 02 c0       	push   0xc0022427
c000f247:	e8 76 fa ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f24c:	83 c4 10             	add    esp,0x10
c000f24f:	83 ec 08             	sub    esp,0x8
c000f252:	bb 60 00 00 00       	mov    ebx,0x60
c000f257:	6a 00                	push   0x0
c000f259:	6a 06                	push   0x6
c000f25b:	e8 91 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f260:	58                   	pop    eax
c000f261:	5a                   	pop    edx
c000f262:	6a 00                	push   0x0
c000f264:	6a 07                	push   0x7
c000f266:	e8 86 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f26b:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f271:	83 c4 10             	add    esp,0x10
c000f274:	83 c1 02             	add    ecx,0x2
c000f277:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f27d:	83 ec 08             	sub    esp,0x8
c000f280:	6a 00                	push   0x0
c000f282:	53                   	push   ebx
c000f283:	83 c3 01             	add    ebx,0x1
c000f286:	e8 66 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f28b:	83 c4 10             	add    esp,0x10
c000f28e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f294:	75 e7                	jne    c000f27d <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f296:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f29b:	bb 40 01 00 00       	mov    ebx,0x140
c000f2a0:	83 c0 20             	add    eax,0x20
c000f2a3:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2a8:	eb 26                	jmp    c000f2d0 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f2aa:	83 ec 08             	sub    esp,0x8
c000f2ad:	6a 00                	push   0x0
c000f2af:	53                   	push   ebx
c000f2b0:	83 c3 01             	add    ebx,0x1
c000f2b3:	e8 39 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f2b8:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2bd:	83 c4 10             	add    esp,0x10
c000f2c0:	83 c0 01             	add    eax,0x1
c000f2c3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2c9:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2ce:	74 07                	je     c000f2d7 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f2d0:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2d5:	7e d3                	jle    c000f2aa <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f2d7:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2e1:	7f 26                	jg     c000f309 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f2e3:	83 ec 08             	sub    esp,0x8
c000f2e6:	6a 00                	push   0x0
c000f2e8:	53                   	push   ebx
c000f2e9:	83 c3 01             	add    ebx,0x1
c000f2ec:	e8 00 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f2f1:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2f6:	83 c4 10             	add    esp,0x10
c000f2f9:	83 c0 01             	add    eax,0x1
c000f2fc:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f302:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f307:	75 d3                	jne    c000f2dc <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f309:	83 c4 3c             	add    esp,0x3c
c000f30c:	5b                   	pop    ebx
c000f30d:	5e                   	pop    esi
c000f30e:	5f                   	pop    edi
c000f30f:	5d                   	pop    ebp
c000f310:	c3                   	ret    
c000f311:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f319:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f321:	e9 3b fe ff ff       	jmp    c000f161 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000f326 <Pipe::isAtty()>:
c000f326:	31 c0                	xor    eax,eax
c000f328:	c3                   	ret    
c000f329:	90                   	nop

c000f32a <Pipe::~Pipe()>:
c000f32a:	83 ec 0c             	sub    esp,0xc
c000f32d:	ba 94 24 02 c0       	mov    edx,0xc0022494
c000f332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f336:	89 10                	mov    DWORD PTR [eax],edx
c000f338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33c:	83 ec 0c             	sub    esp,0xc
c000f33f:	50                   	push   eax
c000f340:	e8 91 2a 00 00       	call   c0011dd6 <UnixFile::~UnixFile()>
c000f345:	83 c4 10             	add    esp,0x10
c000f348:	90                   	nop
c000f349:	83 c4 0c             	add    esp,0xc
c000f34c:	c3                   	ret    
c000f34d:	90                   	nop

c000f34e <Pipe::~Pipe()>:
c000f34e:	83 ec 0c             	sub    esp,0xc
c000f351:	83 ec 0c             	sub    esp,0xc
c000f354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f358:	e8 cd ff ff ff       	call   c000f32a <Pipe::~Pipe()>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	83 ec 08             	sub    esp,0x8
c000f363:	6a 20                	push   0x20
c000f365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f369:	e8 92 d3 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	83 c4 0c             	add    esp,0xc
c000f374:	c3                   	ret    
c000f375:	90                   	nop

c000f376 <Pipe::write(unsigned long long, void*, int*)>:
c000f376:	55                   	push   ebp
c000f377:	57                   	push   edi
c000f378:	56                   	push   esi
c000f379:	53                   	push   ebx
c000f37a:	83 ec 1c             	sub    esp,0x1c
c000f37d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f385:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f388:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f38c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f38f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f393:	89 d8                	mov    eax,ebx
c000f395:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f398:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f39c:	89 d6                	mov    esi,edx
c000f39e:	89 d7                	mov    edi,edx
c000f3a0:	c1 ff 1f             	sar    edi,0x1f
c000f3a3:	03 34 24             	add    esi,DWORD PTR [esp]
c000f3a6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f3aa:	c1 f8 1f             	sar    eax,0x1f
c000f3ad:	39 f3                	cmp    ebx,esi
c000f3af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3b7:	19 f8                	sbb    eax,edi
c000f3b9:	b8 01 00 00 00       	mov    eax,0x1
c000f3be:	72 6e                	jb     c000f42e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f3c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3c3:	01 d0                	add    eax,edx
c000f3c5:	99                   	cdq    
c000f3c6:	f7 fb                	idiv   ebx
c000f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3cc:	29 d3                	sub    ebx,edx
c000f3ce:	89 d7                	mov    edi,edx
c000f3d0:	89 de                	mov    esi,ebx
c000f3d2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f3d5:	c1 fb 1f             	sar    ebx,0x1f
c000f3d8:	39 f2                	cmp    edx,esi
c000f3da:	19 d8                	sbb    eax,ebx
c000f3dc:	b8 00 00 00 00       	mov    eax,0x0
c000f3e1:	72 04                	jb     c000f3e7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f3e3:	89 d0                	mov    eax,edx
c000f3e5:	29 f0                	sub    eax,esi
c000f3e7:	89 d3                	mov    ebx,edx
c000f3e9:	29 c3                	sub    ebx,eax
c000f3eb:	74 0b                	je     c000f3f8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f3ed:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f3f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f3f4:	89 d9                	mov    ecx,ebx
c000f3f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f8:	85 c0                	test   eax,eax
c000f3fa:	74 0d                	je     c000f409 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f3fc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f400:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f403:	89 de                	mov    esi,ebx
c000f405:	89 c1                	mov    ecx,eax
c000f407:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f409:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f40c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f411:	75 10                	jne    c000f423 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f413:	83 ec 0c             	sub    esp,0xc
c000f416:	68 51 24 02 c0       	push   0xc0022451
c000f41b:	e8 a2 f8 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f427:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f42a:	89 08                	mov    DWORD PTR [eax],ecx
c000f42c:	31 c0                	xor    eax,eax
c000f42e:	83 c4 1c             	add    esp,0x1c
c000f431:	5b                   	pop    ebx
c000f432:	5e                   	pop    esi
c000f433:	5f                   	pop    edi
c000f434:	5d                   	pop    ebp
c000f435:	c3                   	ret    

c000f436 <Pipe::read(unsigned long long, void*, int*)>:
c000f436:	55                   	push   ebp
c000f437:	57                   	push   edi
c000f438:	56                   	push   esi
c000f439:	53                   	push   ebx
c000f43a:	83 ec 1c             	sub    esp,0x1c
c000f43d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f441:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f445:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f449:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f44c:	89 c8                	mov    eax,ecx
c000f44e:	99                   	cdq    
c000f44f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f453:	74 27                	je     c000f47c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f455:	39 f9                	cmp    ecx,edi
c000f457:	89 d1                	mov    ecx,edx
c000f459:	19 f1                	sbb    ecx,esi
c000f45b:	73 1f                	jae    c000f47c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f45d:	fa                   	cli    
c000f45e:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f464:	e8 47 60 00 00       	call   c00154b0 <schedule()>
c000f469:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f470:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f477:	75 d0                	jne    c000f449 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f479:	fb                   	sti    
c000f47a:	eb cd                	jmp    c000f449 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f47c:	39 f8                	cmp    eax,edi
c000f47e:	89 d1                	mov    ecx,edx
c000f480:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f483:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f487:	19 f1                	sbb    ecx,esi
c000f489:	73 07                	jae    c000f492 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000f48b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f48e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f492:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f495:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f498:	29 f7                	sub    edi,esi
c000f49a:	89 f8                	mov    eax,edi
c000f49c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f4a0:	99                   	cdq    
c000f4a1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4a8:	19 d0                	sbb    eax,edx
c000f4aa:	73 07                	jae    c000f4b3 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000f4ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f4af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4b3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f4b6:	89 ea                	mov    edx,ebp
c000f4b8:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f4bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f4c1:	74 0d                	je     c000f4d0 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000f4c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4c6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4d0:	85 d2                	test   edx,edx
c000f4d2:	74 11                	je     c000f4e5 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000f4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f4db:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f4df:	89 d1                	mov    ecx,edx
c000f4e1:	89 c7                	mov    edi,eax
c000f4e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f4e8:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f4eb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f4ee:	99                   	cdq    
c000f4ef:	89 f7                	mov    edi,esi
c000f4f1:	03 04 24             	add    eax,DWORD PTR [esp]
c000f4f4:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f4f8:	c1 ff 1f             	sar    edi,0x1f
c000f4fb:	57                   	push   edi
c000f4fc:	56                   	push   esi
c000f4fd:	52                   	push   edx
c000f4fe:	50                   	push   eax
c000f4ff:	e8 60 09 01 00       	call   c001fe64 <__umoddi3>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f50a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f50f:	75 10                	jne    c000f521 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	68 6e 24 02 c0       	push   0xc002246e
c000f519:	e8 a4 f7 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f525:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f528:	89 10                	mov    DWORD PTR [eax],edx
c000f52a:	83 c4 1c             	add    esp,0x1c
c000f52d:	31 c0                	xor    eax,eax
c000f52f:	5b                   	pop    ebx
c000f530:	5e                   	pop    esi
c000f531:	5f                   	pop    edi
c000f532:	5d                   	pop    ebp
c000f533:	c3                   	ret    

c000f534 <Pipe::Pipe(int)>:
c000f534:	83 ec 0c             	sub    esp,0xc
c000f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f53b:	83 ec 08             	sub    esp,0x8
c000f53e:	6a 00                	push   0x0
c000f540:	50                   	push   eax
c000f541:	e8 aa 26 00 00       	call   c0011bf0 <UnixFile::UnixFile(int)>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	ba 94 24 02 c0       	mov    edx,0xc0022494
c000f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f552:	89 10                	mov    DWORD PTR [eax],edx
c000f554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f558:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f55c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f563:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f56e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	50                   	push   eax
c000f57d:	e8 f9 f3 ff ff       	call   c000e97b <malloc>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	89 c2                	mov    edx,eax
c000f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f592:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f596:	90                   	nop
c000f597:	83 c4 0c             	add    esp,0xc
c000f59a:	c3                   	ret    

c000f59b <KePowerThread(void*)>:
c000f59b:	83 ec 0c             	sub    esp,0xc
c000f59e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f5a5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f5ac:	75 01                	jne    c000f5af <KePowerThread(void*)+0x14>
c000f5ae:	fb                   	sti    
c000f5af:	83 ec 0c             	sub    esp,0xc
c000f5b2:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f5b9:	6a 0a                	push   0xa
c000f5bb:	e8 ec 60 00 00       	call   c00156ac <sleep(unsigned int)>
c000f5c0:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f5c7:	83 c4 10             	add    esp,0x10
c000f5ca:	eb e3                	jmp    c000f5af <KePowerThread(void*)+0x14>

c000f5cc <KeChangePowerSettings(PowerSettings)>:
c000f5cc:	57                   	push   edi
c000f5cd:	b9 09 00 00 00       	mov    ecx,0x9
c000f5d2:	56                   	push   esi
c000f5d3:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f5d8:	fc                   	cld    
c000f5d9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5df:	5e                   	pop    esi
c000f5e0:	5f                   	pop    edi
c000f5e1:	c3                   	ret    

c000f5e2 <KeUserIOReceived()>:
c000f5e2:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f5ec:	c3                   	ret    

c000f5ed <KeHandlePowerButton()>:
c000f5ed:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f5f2:	83 f8 02             	cmp    eax,0x2
c000f5f5:	75 05                	jne    c000f5fc <KeHandlePowerButton()+0xf>
c000f5f7:	e9 40 e1 ff ff       	jmp    c000d73c <KeShutdown()>
c000f5fc:	48                   	dec    eax
c000f5fd:	75 05                	jne    c000f604 <KeHandlePowerButton()+0x17>
c000f5ff:	e9 5c e1 ff ff       	jmp    c000d760 <KeSleep()>
c000f604:	c3                   	ret    

c000f605 <KeHandleSleepButton()>:
c000f605:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f60a:	83 f8 02             	cmp    eax,0x2
c000f60d:	75 05                	jne    c000f614 <KeHandleSleepButton()+0xf>
c000f60f:	e9 28 e1 ff ff       	jmp    c000d73c <KeShutdown()>
c000f614:	48                   	dec    eax
c000f615:	75 05                	jne    c000f61c <KeHandleSleepButton()+0x17>
c000f617:	e9 44 e1 ff ff       	jmp    c000d760 <KeSleep()>
c000f61c:	c3                   	ret    

c000f61d <KeSetupPowerManager()>:
c000f61d:	83 ec 0c             	sub    esp,0xc
c000f620:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f62a:	68 f0 00 00 00       	push   0xf0
c000f62f:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f636:	6a 00                	push   0x0
c000f638:	68 9b f5 00 c0       	push   0xc000f59b
c000f63d:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f643:	e8 18 5c 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c000f648:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f652:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f65c:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f666:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f670:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f67a:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f684:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f68e:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f698:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f6a2:	83 c4 1c             	add    esp,0x1c
c000f6a5:	c3                   	ret    

c000f6a6 <KeRand()>:
c000f6a6:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f6b0:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f6ba:	53                   	push   ebx
c000f6bb:	01 c1                	add    ecx,eax
c000f6bd:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6c2:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f6c8:	01 ca                	add    edx,ecx
c000f6ca:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6cf:	83 d2 00             	adc    edx,0x0
c000f6d2:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6d7:	0f b7 da             	movzx  ebx,dx
c000f6da:	89 da                	mov    edx,ebx
c000f6dc:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f6e2:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f6e6:	5b                   	pop    ebx
c000f6e7:	c3                   	ret    

c000f6e8 <KeSeedRand(unsigned int)>:
c000f6e8:	53                   	push   ebx
c000f6e9:	83 ec 08             	sub    esp,0x8
c000f6ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6f0:	e8 ba 8f 00 00       	call   c00186af <HalGetRand()>
c000f6f5:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f6ff:	31 d8                	xor    eax,ebx
c000f701:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f706:	e8 9b ff ff ff       	call   c000f6a6 <KeRand()>
c000f70b:	83 c4 08             	add    esp,0x8
c000f70e:	5b                   	pop    ebx
c000f70f:	eb 95                	jmp    c000f6a6 <KeRand()>

c000f711 <KeInitRand()>:
c000f711:	83 ec 0c             	sub    esp,0xc
c000f714:	e8 ba 8d 00 00       	call   c00184d3 <HalQueryPerformanceCounter()>
c000f719:	0f 20 da             	mov    edx,cr3
c000f71c:	0f 22 da             	mov    cr3,edx
c000f71f:	0f 20 da             	mov    edx,cr3
c000f722:	0f 22 da             	mov    cr3,edx
c000f725:	0f 20 da             	mov    edx,cr3
c000f728:	0f 22 da             	mov    cr3,edx
c000f72b:	0f 20 da             	mov    edx,cr3
c000f72e:	0f 22 da             	mov    cr3,edx
c000f731:	83 ec 0c             	sub    esp,0xc
c000f734:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f739:	50                   	push   eax
c000f73a:	e8 a9 ff ff ff       	call   c000f6e8 <KeSeedRand(unsigned int)>
c000f73f:	83 c4 1c             	add    esp,0x1c
c000f742:	c3                   	ret    
c000f743:	90                   	nop

c000f744 <KeResolveCompatibilitySymbol(char*)>:
c000f744:	83 ec 0c             	sub    esp,0xc
c000f747:	83 ec 08             	sub    esp,0x8
c000f74a:	68 a8 24 02 c0       	push   0xc00224a8
c000f74f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f753:	e8 f8 0f ff ff       	call   c0000750 <strcmp>
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	85 c0                	test   eax,eax
c000f75d:	0f 94 c0             	sete   al
c000f760:	0f b6 c0             	movzx  eax,al
c000f763:	85 c0                	test   eax,eax
c000f765:	74 0d                	je     c000f774 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f767:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f76c:	e9 8b 01 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f771:	8d 76 00             	lea    esi,[esi+0x0]
c000f774:	83 ec 08             	sub    esp,0x8
c000f777:	68 b1 24 02 c0       	push   0xc00224b1
c000f77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f780:	e8 cb 0f ff ff       	call   c0000750 <strcmp>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	85 c0                	test   eax,eax
c000f78a:	0f 94 c0             	sete   al
c000f78d:	0f b6 c0             	movzx  eax,al
c000f790:	85 c0                	test   eax,eax
c000f792:	74 0c                	je     c000f7a0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f794:	b8 64 fd 01 c0       	mov    eax,0xc001fd64
c000f799:	e9 5e 01 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f79e:	66 90                	xchg   ax,ax
c000f7a0:	83 ec 08             	sub    esp,0x8
c000f7a3:	68 bb 24 02 c0       	push   0xc00224bb
c000f7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7ac:	e8 9f 0f ff ff       	call   c0000750 <strcmp>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	85 c0                	test   eax,eax
c000f7b6:	0f 94 c0             	sete   al
c000f7b9:	0f b6 c0             	movzx  eax,al
c000f7bc:	85 c0                	test   eax,eax
c000f7be:	74 0c                	je     c000f7cc <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7c0:	b8 98 fa 01 c0       	mov    eax,0xc001fa98
c000f7c5:	e9 32 01 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 c4 24 02 c0       	push   0xc00224c4
c000f7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d8:	e8 73 0f ff ff       	call   c0000750 <strcmp>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	85 c0                	test   eax,eax
c000f7e2:	0f 94 c0             	sete   al
c000f7e5:	0f b6 c0             	movzx  eax,al
c000f7e8:	85 c0                	test   eax,eax
c000f7ea:	74 0c                	je     c000f7f8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f7ec:	b8 c2 ec 00 c0       	mov    eax,0xc000ecc2
c000f7f1:	e9 06 01 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	83 ec 08             	sub    esp,0x8
c000f7fb:	68 d7 24 02 c0       	push   0xc00224d7
c000f800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f804:	e8 47 0f ff ff       	call   c0000750 <strcmp>
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	85 c0                	test   eax,eax
c000f80e:	0f 94 c0             	sete   al
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	85 c0                	test   eax,eax
c000f816:	74 0c                	je     c000f824 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f818:	b8 40 c6 00 c0       	mov    eax,0xc000c640
c000f81d:	e9 da 00 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f822:	66 90                	xchg   ax,ax
c000f824:	83 ec 08             	sub    esp,0x8
c000f827:	68 f4 24 02 c0       	push   0xc00224f4
c000f82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f830:	e8 1b 0f ff ff       	call   c0000750 <strcmp>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	85 c0                	test   eax,eax
c000f83a:	0f 94 c0             	sete   al
c000f83d:	0f b6 c0             	movzx  eax,al
c000f840:	85 c0                	test   eax,eax
c000f842:	74 0c                	je     c000f850 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f844:	b8 64 fe 01 c0       	mov    eax,0xc001fe64
c000f849:	e9 ae 00 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f84e:	66 90                	xchg   ax,ax
c000f850:	83 ec 08             	sub    esp,0x8
c000f853:	68 fe 24 02 c0       	push   0xc00224fe
c000f858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85c:	e8 ef 0e ff ff       	call   c0000750 <strcmp>
c000f861:	83 c4 10             	add    esp,0x10
c000f864:	85 c0                	test   eax,eax
c000f866:	0f 94 c0             	sete   al
c000f869:	0f b6 c0             	movzx  eax,al
c000f86c:	85 c0                	test   eax,eax
c000f86e:	74 0c                	je     c000f87c <KeResolveCompatibilitySymbol(char*)+0x138>
c000f870:	b8 e4 fb 01 c0       	mov    eax,0xc001fbe4
c000f875:	e9 82 00 00 00       	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f87a:	66 90                	xchg   ax,ax
c000f87c:	83 ec 08             	sub    esp,0x8
c000f87f:	68 07 25 02 c0       	push   0xc0022507
c000f884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f888:	e8 c3 0e ff ff       	call   c0000750 <strcmp>
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	85 c0                	test   eax,eax
c000f892:	0f 94 c0             	sete   al
c000f895:	0f b6 c0             	movzx  eax,al
c000f898:	85 c0                	test   eax,eax
c000f89a:	74 08                	je     c000f8a4 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f89c:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8a1:	eb 59                	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8a3:	90                   	nop
c000f8a4:	83 ec 08             	sub    esp,0x8
c000f8a7:	68 1f 25 02 c0       	push   0xc002251f
c000f8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b0:	e8 9b 0e ff ff       	call   c0000750 <strcmp>
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	85 c0                	test   eax,eax
c000f8ba:	0f 94 c0             	sete   al
c000f8bd:	0f b6 c0             	movzx  eax,al
c000f8c0:	85 c0                	test   eax,eax
c000f8c2:	74 08                	je     c000f8cc <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8c4:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8c9:	eb 31                	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8cb:	90                   	nop
c000f8cc:	83 ec 08             	sub    esp,0x8
c000f8cf:	68 2c 25 02 c0       	push   0xc002252c
c000f8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d8:	e8 73 0e ff ff       	call   c0000750 <strcmp>
c000f8dd:	83 c4 10             	add    esp,0x10
c000f8e0:	85 c0                	test   eax,eax
c000f8e2:	0f 94 c0             	sete   al
c000f8e5:	0f b6 c0             	movzx  eax,al
c000f8e8:	85 c0                	test   eax,eax
c000f8ea:	74 08                	je     c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f8ec:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f8f1:	eb 09                	jmp    c000f8fc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8f3:	90                   	nop
c000f8f4:	b8 00 00 00 00       	mov    eax,0x0
c000f8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8fc:	83 c4 0c             	add    esp,0xc
c000f8ff:	c3                   	ret    

c000f900 <Semaphore::Semaphore(int)>:
c000f900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f908:	89 10                	mov    DWORD PTR [eax],edx
c000f90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f90e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f919:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f924:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f92b:	90                   	nop
c000f92c:	c3                   	ret    
c000f92d:	90                   	nop
c000f92e:	66 90                	xchg   ax,ax

c000f930 <Semaphore::tryAcquire()>:
c000f930:	83 ec 0c             	sub    esp,0xc
c000f933:	fa                   	cli    
c000f934:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f939:	83 c0 01             	add    eax,0x1
c000f93c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f941:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f946:	83 c0 01             	add    eax,0x1
c000f949:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f952:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f959:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95b:	39 c2                	cmp    edx,eax
c000f95d:	7d 59                	jge    c000f9b8 <Semaphore::tryAcquire()+0x88>
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f966:	8d 50 01             	lea    edx,[eax+0x1]
c000f969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f970:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f975:	83 e8 01             	sub    eax,0x1
c000f978:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f97d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f982:	85 c0                	test   eax,eax
c000f984:	75 1a                	jne    c000f9a0 <Semaphore::tryAcquire()+0x70>
c000f986:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f98b:	85 c0                	test   eax,eax
c000f98d:	74 11                	je     c000f9a0 <Semaphore::tryAcquire()+0x70>
c000f98f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f999:	e8 12 5b 00 00       	call   c00154b0 <schedule()>
c000f99e:	66 90                	xchg   ax,ax
c000f9a0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9a8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9ad:	85 c0                	test   eax,eax
c000f9af:	75 03                	jne    c000f9b4 <Semaphore::tryAcquire()+0x84>
c000f9b1:	fb                   	sti    
c000f9b2:	66 90                	xchg   ax,ax
c000f9b4:	b0 01                	mov    al,0x1
c000f9b6:	eb 48                	jmp    c000fa00 <Semaphore::tryAcquire()+0xd0>
c000f9b8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9bd:	83 e8 01             	sub    eax,0x1
c000f9c0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9c5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9ca:	85 c0                	test   eax,eax
c000f9cc:	75 1a                	jne    c000f9e8 <Semaphore::tryAcquire()+0xb8>
c000f9ce:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9d3:	85 c0                	test   eax,eax
c000f9d5:	74 11                	je     c000f9e8 <Semaphore::tryAcquire()+0xb8>
c000f9d7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9e1:	e8 ca 5a 00 00       	call   c00154b0 <schedule()>
c000f9e6:	66 90                	xchg   ax,ax
c000f9e8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9f0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9f5:	85 c0                	test   eax,eax
c000f9f7:	75 03                	jne    c000f9fc <Semaphore::tryAcquire()+0xcc>
c000f9f9:	fb                   	sti    
c000f9fa:	66 90                	xchg   ax,ax
c000f9fc:	b0 00                	mov    al,0x0
c000f9fe:	66 90                	xchg   ax,ax
c000fa00:	83 c4 0c             	add    esp,0xc
c000fa03:	c3                   	ret    

c000fa04 <Semaphore::assertLocked(char const*)>:
c000fa04:	83 ec 0c             	sub    esp,0xc
c000fa07:	fa                   	cli    
c000fa08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa0d:	83 c0 01             	add    eax,0x1
c000fa10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa15:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa1a:	83 c0 01             	add    eax,0x1
c000fa1d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa26:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa2f:	39 c2                	cmp    edx,eax
c000fa31:	7d 11                	jge    c000fa44 <Semaphore::assertLocked(char const*)+0x40>
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa3a:	e8 83 f2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000fa3f:	83 c4 10             	add    esp,0x10
c000fa42:	66 90                	xchg   ax,ax
c000fa44:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa49:	83 e8 01             	sub    eax,0x1
c000fa4c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa51:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa56:	85 c0                	test   eax,eax
c000fa58:	75 1a                	jne    c000fa74 <Semaphore::assertLocked(char const*)+0x70>
c000fa5a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fa5f:	85 c0                	test   eax,eax
c000fa61:	74 11                	je     c000fa74 <Semaphore::assertLocked(char const*)+0x70>
c000fa63:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fa6d:	e8 3e 5a 00 00       	call   c00154b0 <schedule()>
c000fa72:	66 90                	xchg   ax,ax
c000fa74:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fa7c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa81:	85 c0                	test   eax,eax
c000fa83:	75 03                	jne    c000fa88 <Semaphore::assertLocked(char const*)+0x84>
c000fa85:	fb                   	sti    
c000fa86:	66 90                	xchg   ax,ax
c000fa88:	90                   	nop
c000fa89:	83 c4 0c             	add    esp,0xc
c000fa8c:	c3                   	ret    
c000fa8d:	90                   	nop
c000fa8e:	66 90                	xchg   ax,ax

c000fa90 <Semaphore::acquire(int)>:
c000fa90:	83 ec 1c             	sub    esp,0x1c
c000fa93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fa98:	0f 84 9a 00 00 00    	je     c000fb38 <Semaphore::acquire(int)+0xa8>
c000fa9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000faa6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000faab:	90                   	nop
c000faac:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fab1:	85 c0                	test   eax,eax
c000fab3:	74 77                	je     c000fb2c <Semaphore::acquire(int)+0x9c>
c000fab5:	83 ec 0c             	sub    esp,0xc
c000fab8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fabc:	e8 6f fe ff ff       	call   c000f930 <Semaphore::tryAcquire()>
c000fac1:	83 c4 10             	add    esp,0x10
c000fac4:	83 f0 01             	xor    eax,0x1
c000fac7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000facb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000facf:	83 f0 01             	xor    eax,0x1
c000fad2:	0f b6 c0             	movzx  eax,al
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 4f                	jne    c000fb28 <Semaphore::acquire(int)+0x98>
c000fad9:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fade:	7f 2c                	jg     c000fb0c <Semaphore::acquire(int)+0x7c>
c000fae0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fae4:	89 d0                	mov    eax,edx
c000fae6:	c1 e0 02             	shl    eax,0x2
c000fae9:	01 d0                	add    eax,edx
c000faeb:	01 c0                	add    eax,eax
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	50                   	push   eax
c000faf1:	e8 a2 5b 00 00       	call   c0015698 <milliTenthSleep(unsigned int)>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fafd:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fb01:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fb09:	eb a1                	jmp    c000faac <Semaphore::acquire(int)+0x1c>
c000fb0b:	90                   	nop
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	68 90 01 00 00       	push   0x190
c000fb14:	e8 7f 5b 00 00       	call   c0015698 <milliTenthSleep(unsigned int)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb21:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb26:	eb 84                	jmp    c000faac <Semaphore::acquire(int)+0x1c>
c000fb28:	90                   	nop
c000fb29:	8d 76 00             	lea    esi,[esi+0x0]
c000fb2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb30:	e9 fb 00 00 00       	jmp    c000fc30 <Semaphore::acquire(int)+0x1a0>
c000fb35:	8d 76 00             	lea    esi,[esi+0x0]
c000fb38:	fa                   	cli    
c000fb39:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb3e:	83 c0 01             	add    eax,0x1
c000fb41:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb46:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb4b:	83 c0 01             	add    eax,0x1
c000fb4e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb57:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb60:	39 c2                	cmp    edx,eax
c000fb62:	7d 14                	jge    c000fb78 <Semaphore::acquire(int)+0xe8>
c000fb64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb6b:	8d 50 01             	lea    edx,[eax+0x1]
c000fb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb72:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb75:	eb 6d                	jmp    c000fbe4 <Semaphore::acquire(int)+0x154>
c000fb77:	90                   	nop
c000fb78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb7f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb8d:	85 c0                	test   eax,eax
c000fb8f:	75 13                	jne    c000fba4 <Semaphore::acquire(int)+0x114>
c000fb91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb96:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb9f:	eb 17                	jmp    c000fbb8 <Semaphore::acquire(int)+0x128>
c000fba1:	8d 76 00             	lea    esi,[esi+0x0]
c000fba4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbb0:	8b 12                	mov    edx,DWORD PTR [edx]
c000fbb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fbb5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbb8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbbd:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbc6:	83 ec 0c             	sub    esp,0xc
c000fbc9:	68 3c 25 02 c0       	push   0xc002253c
c000fbce:	e8 91 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbd3:	83 c4 10             	add    esp,0x10
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	6a 05                	push   0x5
c000fbdb:	e8 90 59 00 00       	call   c0015570 <blockTask(TaskState)>
c000fbe0:	83 c4 10             	add    esp,0x10
c000fbe3:	90                   	nop
c000fbe4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbe9:	83 e8 01             	sub    eax,0x1
c000fbec:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbf1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbf6:	85 c0                	test   eax,eax
c000fbf8:	75 1a                	jne    c000fc14 <Semaphore::acquire(int)+0x184>
c000fbfa:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fbff:	85 c0                	test   eax,eax
c000fc01:	74 11                	je     c000fc14 <Semaphore::acquire(int)+0x184>
c000fc03:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc0d:	e8 9e 58 00 00       	call   c00154b0 <schedule()>
c000fc12:	66 90                	xchg   ax,ax
c000fc14:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fc1c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc21:	85 c0                	test   eax,eax
c000fc23:	75 03                	jne    c000fc28 <Semaphore::acquire(int)+0x198>
c000fc25:	fb                   	sti    
c000fc26:	66 90                	xchg   ax,ax
c000fc28:	b8 00 00 00 00       	mov    eax,0x0
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc30:	83 c4 1c             	add    esp,0x1c
c000fc33:	c3                   	ret    

c000fc34 <Semaphore::acquire()>:
c000fc34:	83 ec 0c             	sub    esp,0xc
c000fc37:	83 ec 08             	sub    esp,0x8
c000fc3a:	6a 00                	push   0x0
c000fc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc40:	e8 4b fe ff ff       	call   c000fa90 <Semaphore::acquire(int)>
c000fc45:	83 c4 10             	add    esp,0x10
c000fc48:	90                   	nop
c000fc49:	83 c4 0c             	add    esp,0xc
c000fc4c:	c3                   	ret    
c000fc4d:	90                   	nop
c000fc4e:	66 90                	xchg   ax,ax

c000fc50 <Semaphore::release()>:
c000fc50:	83 ec 1c             	sub    esp,0x1c
c000fc53:	fa                   	cli    
c000fc54:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc59:	83 c0 01             	add    eax,0x1
c000fc5c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc61:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc66:	83 c0 01             	add    eax,0x1
c000fc69:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc75:	85 c0                	test   eax,eax
c000fc77:	74 2b                	je     c000fca4 <Semaphore::release()+0x54>
c000fc79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc99:	e8 22 5b 00 00       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	eb 15                	jmp    c000fcb8 <Semaphore::release()+0x68>
c000fca3:	90                   	nop
c000fca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcab:	8d 50 ff             	lea    edx,[eax-0x1]
c000fcae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcb8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcbd:	83 e8 01             	sub    eax,0x1
c000fcc0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fcc5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcca:	85 c0                	test   eax,eax
c000fccc:	75 1a                	jne    c000fce8 <Semaphore::release()+0x98>
c000fcce:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fcd3:	85 c0                	test   eax,eax
c000fcd5:	74 11                	je     c000fce8 <Semaphore::release()+0x98>
c000fcd7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fce1:	e8 ca 57 00 00       	call   c00154b0 <schedule()>
c000fce6:	66 90                	xchg   ax,ax
c000fce8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fcf0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fcf5:	85 c0                	test   eax,eax
c000fcf7:	75 03                	jne    c000fcfc <Semaphore::release()+0xac>
c000fcf9:	fb                   	sti    
c000fcfa:	66 90                	xchg   ax,ax
c000fcfc:	90                   	nop
c000fcfd:	83 c4 1c             	add    esp,0x1c
c000fd00:	c3                   	ret    

c000fd01 <KiSigKill(int)>:
c000fd01:	83 ec 0c             	sub    esp,0xc
c000fd04:	6a 00                	push   0x0
c000fd06:	6a 00                	push   0x0
c000fd08:	6a ff                	push   0xffffffff
c000fd0a:	6a 01                	push   0x1
c000fd0c:	e8 41 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd11:	83 c4 1c             	add    esp,0x1c
c000fd14:	c3                   	ret    

c000fd15 <KiDefaultSignalHandlerIgnore(int)>:
c000fd15:	c3                   	ret    

c000fd16 <KiDefaultSignalHandlerPause(int)>:
c000fd16:	57                   	push   edi
c000fd17:	b9 07 00 00 00       	mov    ecx,0x7
c000fd1c:	56                   	push   esi
c000fd1d:	be 97 25 02 c0       	mov    esi,0xc0022597
c000fd22:	83 ec 24             	sub    esp,0x24
c000fd25:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd29:	fc                   	cld    
c000fd2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd2c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd30:	50                   	push   eax
c000fd31:	6a 00                	push   0x0
c000fd33:	6a 00                	push   0x0
c000fd35:	6a 27                	push   0x27
c000fd37:	e8 16 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd3c:	83 c4 34             	add    esp,0x34
c000fd3f:	5e                   	pop    esi
c000fd40:	5f                   	pop    edi
c000fd41:	c3                   	ret    

c000fd42 <KiDefaultSignalHandlerResume(int)>:
c000fd42:	57                   	push   edi
c000fd43:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd48:	56                   	push   esi
c000fd49:	be b3 25 02 c0       	mov    esi,0xc00225b3
c000fd4e:	83 ec 24             	sub    esp,0x24
c000fd51:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd55:	fc                   	cld    
c000fd56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd58:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd5c:	50                   	push   eax
c000fd5d:	6a 00                	push   0x0
c000fd5f:	6a 00                	push   0x0
c000fd61:	6a 27                	push   0x27
c000fd63:	e8 ea 52 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd68:	83 c4 34             	add    esp,0x34
c000fd6b:	5e                   	pop    esi
c000fd6c:	5f                   	pop    edi
c000fd6d:	c3                   	ret    

c000fd6e <KeDeinitSignals(SigHandlerBlock*)>:
c000fd6e:	e9 18 ec ff ff       	jmp    c000e98b <free>

c000fd73 <KeInitSignals()>:
c000fd73:	53                   	push   ebx
c000fd74:	83 ec 14             	sub    esp,0x14
c000fd77:	68 c8 00 00 00       	push   0xc8
c000fd7c:	e8 fa eb ff ff       	call   c000e97b <malloc>
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fd8e:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fd98:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fd9f:	89 c3                	mov    ebx,eax
c000fda1:	6a 20                	push   0x20
c000fda3:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fda9:	6a 00                	push   0x0
c000fdab:	50                   	push   eax
c000fdac:	e8 3f 07 ff ff       	call   c00004f0 <memset>
c000fdb1:	83 c4 0c             	add    esp,0xc
c000fdb4:	6a 44                	push   0x44
c000fdb6:	6a 00                	push   0x0
c000fdb8:	53                   	push   ebx
c000fdb9:	e8 32 07 ff ff       	call   c00004f0 <memset>
c000fdbe:	89 d8                	mov    eax,ebx
c000fdc0:	83 c4 18             	add    esp,0x18
c000fdc3:	5b                   	pop    ebx
c000fdc4:	c3                   	ret    

c000fdc5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fdc5:	53                   	push   ebx
c000fdc6:	b8 01 00 00 00       	mov    eax,0x1
c000fdcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdd3:	83 f9 10             	cmp    ecx,0x10
c000fdd6:	7f 21                	jg     c000fdf9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fdd8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fddf:	89 03                	mov    DWORD PTR [ebx],eax
c000fde1:	b8 01 00 00 00       	mov    eax,0x1
c000fde6:	d3 e0                	shl    eax,cl
c000fde8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fdec:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fdef:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fdf7:	31 c0                	xor    eax,eax
c000fdf9:	5b                   	pop    ebx
c000fdfa:	c3                   	ret    

c000fdfb <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fdfb:	55                   	push   ebp
c000fdfc:	57                   	push   edi
c000fdfd:	bf 08 00 00 00       	mov    edi,0x8
c000fe02:	56                   	push   esi
c000fe03:	53                   	push   ebx
c000fe04:	83 ec 18             	sub    esp,0x18
c000fe07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe0b:	68 d0 25 02 c0       	push   0xc00225d0
c000fe10:	e8 4f 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe15:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe1c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	31 c9                	xor    ecx,ecx
c000fe27:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe2b:	99                   	cdq    
c000fe2c:	f7 ff                	idiv   edi
c000fe2e:	8d 42 24             	lea    eax,[edx+0x24]
c000fe31:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe35:	85 f6                	test   esi,esi
c000fe37:	75 1a                	jne    c000fe53 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe39:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe3d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe41:	50                   	push   eax
c000fe42:	50                   	push   eax
c000fe43:	52                   	push   edx
c000fe44:	68 e1 25 02 c0       	push   0xc00225e1
c000fe49:	e8 16 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe4e:	83 c4 10             	add    esp,0x10
c000fe51:	eb 1b                	jmp    c000fe6e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe53:	41                   	inc    ecx
c000fe54:	83 f9 08             	cmp    ecx,0x8
c000fe57:	75 ce                	jne    c000fe27 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe59:	83 ec 0c             	sub    esp,0xc
c000fe5c:	be 01 00 00 00       	mov    esi,0x1
c000fe61:	68 02 26 02 c0       	push   0xc0022602
c000fe66:	e8 f9 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	83 c4 0c             	add    esp,0xc
c000fe71:	89 f0                	mov    eax,esi
c000fe73:	5b                   	pop    ebx
c000fe74:	5e                   	pop    esi
c000fe75:	5f                   	pop    edi
c000fe76:	5d                   	pop    ebp
c000fe77:	c3                   	ret    

c000fe78 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fe78:	55                   	push   ebp
c000fe79:	57                   	push   edi
c000fe7a:	56                   	push   esi
c000fe7b:	53                   	push   ebx
c000fe7c:	51                   	push   ecx
c000fe7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe81:	85 db                	test   ebx,ebx
c000fe83:	0f 84 bc 00 00 00    	je     c000ff45 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe89:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fe90:	0f 84 af 00 00 00    	je     c000ff45 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe96:	31 c9                	xor    ecx,ecx
c000fe98:	bf 08 00 00 00       	mov    edi,0x8
c000fe9d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fea3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fea6:	99                   	cdq    
c000fea7:	f7 ff                	idiv   edi
c000fea9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000feb0:	85 ed                	test   ebp,ebp
c000feb2:	0f 84 9e 00 00 00    	je     c000ff56 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000feb8:	89 e9                	mov    ecx,ebp
c000feba:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fec0:	bf 01 00 00 00       	mov    edi,0x1
c000fec5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec8:	d3 e7                	shl    edi,cl
c000feca:	31 c9                	xor    ecx,ecx
c000fecc:	b8 01 00 00 00       	mov    eax,0x1
c000fed1:	d3 e0                	shl    eax,cl
c000fed3:	85 04 24             	test   DWORD PTR [esp],eax
c000fed6:	74 06                	je     c000fede <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fed8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fedc:	75 67                	jne    c000ff45 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fede:	41                   	inc    ecx
c000fedf:	83 f9 11             	cmp    ecx,0x11
c000fee2:	75 e8                	jne    c000fecc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fee4:	46                   	inc    esi
c000fee5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fee8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000feee:	09 f8                	or     eax,edi
c000fef0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fefb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000ff01:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000ff08:	31 c0                	xor    eax,eax
c000ff0a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff12:	74 09                	je     c000ff1d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff14:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff1b:	eb 06                	jmp    c000ff23 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff1d:	40                   	inc    eax
c000ff1e:	83 f8 08             	cmp    eax,0x8
c000ff21:	75 e7                	jne    c000ff0a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff23:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff2a:	83 fd 09             	cmp    ebp,0x9
c000ff2d:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff2f:	75 07                	jne    c000ff38 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff31:	b8 01 fd 00 c0       	mov    eax,0xc000fd01
c000ff36:	eb 31                	jmp    c000ff69 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff38:	83 f8 01             	cmp    eax,0x1
c000ff3b:	75 0c                	jne    c000ff49 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff3d:	f7 d7                	not    edi
c000ff3f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff45:	31 c0                	xor    eax,eax
c000ff47:	eb 20                	jmp    c000ff69 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff49:	85 c0                	test   eax,eax
c000ff4b:	75 1c                	jne    c000ff69 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff4d:	8b 04 ad 00 44 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbc00]
c000ff54:	eb 13                	jmp    c000ff69 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff56:	46                   	inc    esi
c000ff57:	41                   	inc    ecx
c000ff58:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff5e:	83 f9 08             	cmp    ecx,0x8
c000ff61:	0f 85 36 ff ff ff    	jne    c000fe9d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff67:	eb dc                	jmp    c000ff45 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff69:	5a                   	pop    edx
c000ff6a:	5b                   	pop    ebx
c000ff6b:	5e                   	pop    esi
c000ff6c:	5f                   	pop    edi
c000ff6d:	5d                   	pop    ebp
c000ff6e:	c3                   	ret    

c000ff6f <KiCheckSignalZ>:
c000ff6f:	83 ec 10             	sub    esp,0x10
c000ff72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff76:	50                   	push   eax
c000ff77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff7f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff85:	e8 ee fe ff ff       	call   c000fe78 <KeCheckSignal(SigHandlerBlock*, int*)>
c000ff8a:	5a                   	pop    edx
c000ff8b:	31 d2                	xor    edx,edx
c000ff8d:	59                   	pop    ecx
c000ff8e:	85 c0                	test   eax,eax
c000ff90:	74 19                	je     c000ffab <KiCheckSignalZ+0x3c>
c000ff92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff98:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ff9b:	89 02                	mov    DWORD PTR [edx],eax
c000ff9d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ffa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffa8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ffab:	89 d0                	mov    eax,edx
c000ffad:	83 c4 10             	add    esp,0x10
c000ffb0:	c3                   	ret    

c000ffb1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffb1:	56                   	push   esi
c000ffb2:	53                   	push   ebx
c000ffb3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffb8:	52                   	push   edx
c000ffb9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffc1:	d3 e3                	shl    ebx,cl
c000ffc3:	83 f9 10             	cmp    ecx,0x10
c000ffc6:	7f 08                	jg     c000ffd0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ffc8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ffce:	75 10                	jne    c000ffe0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	68 13 26 02 c0       	push   0xc0022613
c000ffd8:	e8 e5 ec ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	f7 d3                	not    ebx
c000ffe2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ffe8:	58                   	pop    eax
c000ffe9:	5b                   	pop    ebx
c000ffea:	5e                   	pop    esi
c000ffeb:	c3                   	ret    

c000ffec <KiFinishSignalZ>:
c000ffec:	53                   	push   ebx
c000ffed:	83 ec 10             	sub    esp,0x10
c000fff0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fff4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000fff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fffc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffff:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010005:	e8 a7 ff ff ff       	call   c000ffb1 <KeCompleteSignal(SigHandlerBlock*, int)>
c001000a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010010:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010017:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001001e:	83 c4 18             	add    esp,0x18
c0010021:	5b                   	pop    ebx
c0010022:	c3                   	ret    

c0010023 <SysSeekDir(regs*)>:
c0010023:	31 c0                	xor    eax,eax
c0010025:	31 d2                	xor    edx,edx
c0010027:	c3                   	ret    

c0010028 <SysTellDir(regs*)>:
c0010028:	31 c0                	xor    eax,eax
c001002a:	31 d2                	xor    edx,edx
c001002c:	c3                   	ret    

c001002d <SysVerify(regs*)>:
c001002d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010031:	31 d2                	xor    edx,edx
c0010033:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010036:	c3                   	ret    

c0010037 <SysGetArgc(regs*)>:
c0010037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001003c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001003f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010045:	89 c2                	mov    edx,eax
c0010047:	c1 fa 1f             	sar    edx,0x1f
c001004a:	c3                   	ret    

c001004b <SysTTYName(regs*)>:
c001004b:	b8 01 00 00 00       	mov    eax,0x1
c0010050:	31 d2                	xor    edx,edx
c0010052:	c3                   	ret    

c0010053 <SysFormatDisk(regs*)>:
c0010053:	56                   	push   esi
c0010054:	53                   	push   ebx
c0010055:	83 ec 04             	sub    esp,0x4
c0010058:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001005c:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c0010062:	eb 28                	jmp    c001008c <SysFormatDisk(regs*)+0x39>
c0010064:	83 ec 0c             	sub    esp,0xc
c0010067:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001006a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001006d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001006f:	51                   	push   ecx
c0010070:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010073:	51                   	push   ecx
c0010074:	50                   	push   eax
c0010075:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001007c:	50                   	push   eax
c001007d:	53                   	push   ebx
c001007e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010081:	83 c4 20             	add    esp,0x20
c0010084:	83 f8 08             	cmp    eax,0x8
c0010087:	75 14                	jne    c001009d <SysFormatDisk(regs*)+0x4a>
c0010089:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001008c:	85 db                	test   ebx,ebx
c001008e:	75 d4                	jne    c0010064 <SysFormatDisk(regs*)+0x11>
c0010090:	83 c4 04             	add    esp,0x4
c0010093:	b8 03 00 00 00       	mov    eax,0x3
c0010098:	31 d2                	xor    edx,edx
c001009a:	5b                   	pop    ebx
c001009b:	5e                   	pop    esi
c001009c:	c3                   	ret    
c001009d:	85 c0                	test   eax,eax
c001009f:	74 1f                	je     c00100c0 <SysFormatDisk(regs*)+0x6d>
c00100a1:	83 f8 09             	cmp    eax,0x9
c00100a4:	74 0d                	je     c00100b3 <SysFormatDisk(regs*)+0x60>
c00100a6:	83 c4 04             	add    esp,0x4
c00100a9:	b8 02 00 00 00       	mov    eax,0x2
c00100ae:	31 d2                	xor    edx,edx
c00100b0:	5b                   	pop    ebx
c00100b1:	5e                   	pop    esi
c00100b2:	c3                   	ret    
c00100b3:	83 c4 04             	add    esp,0x4
c00100b6:	b8 01 00 00 00       	mov    eax,0x1
c00100bb:	31 d2                	xor    edx,edx
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	c3                   	ret    
c00100c0:	83 c4 04             	add    esp,0x4
c00100c3:	31 c0                	xor    eax,eax
c00100c5:	31 d2                	xor    edx,edx
c00100c7:	5b                   	pop    ebx
c00100c8:	5e                   	pop    esi
c00100c9:	c3                   	ret    

c00100ca <SysSetDiskVolumeLabel(regs*)>:
c00100ca:	56                   	push   esi
c00100cb:	53                   	push   ebx
c00100cc:	83 ec 04             	sub    esp,0x4
c00100cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100d3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100d6:	83 f8 19             	cmp    eax,0x19
c00100d9:	77 33                	ja     c001010e <SysSetDiskVolumeLabel(regs*)+0x44>
c00100db:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c00100e2:	85 c9                	test   ecx,ecx
c00100e4:	74 28                	je     c001010e <SysSetDiskVolumeLabel(regs*)+0x44>
c00100e6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00100e9:	85 db                	test   ebx,ebx
c00100eb:	74 21                	je     c001010e <SysSetDiskVolumeLabel(regs*)+0x44>
c00100ed:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00100f3:	85 d2                	test   edx,edx
c00100f5:	74 17                	je     c001010e <SysSetDiskVolumeLabel(regs*)+0x44>
c00100f7:	8b 32                	mov    esi,DWORD PTR [edx]
c00100f9:	53                   	push   ebx
c00100fa:	50                   	push   eax
c00100fb:	51                   	push   ecx
c00100fc:	52                   	push   edx
c00100fd:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	89 c2                	mov    edx,eax
c0010105:	83 c4 04             	add    esp,0x4
c0010108:	c1 fa 1f             	sar    edx,0x1f
c001010b:	5b                   	pop    ebx
c001010c:	5e                   	pop    esi
c001010d:	c3                   	ret    
c001010e:	83 c4 04             	add    esp,0x4
c0010111:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010116:	ba ff ff ff ff       	mov    edx,0xffffffff
c001011b:	5b                   	pop    ebx
c001011c:	5e                   	pop    esi
c001011d:	c3                   	ret    

c001011e <SysGetDiskVolumeLabel(regs*)>:
c001011e:	57                   	push   edi
c001011f:	56                   	push   esi
c0010120:	53                   	push   ebx
c0010121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010125:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010128:	83 fa 19             	cmp    edx,0x19
c001012b:	77 3c                	ja     c0010169 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001012d:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010134:	85 c9                	test   ecx,ecx
c0010136:	74 31                	je     c0010169 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010138:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001013b:	85 db                	test   ebx,ebx
c001013d:	74 2a                	je     c0010169 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001013f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010142:	85 f6                	test   esi,esi
c0010144:	74 23                	je     c0010169 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010146:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001014c:	85 c0                	test   eax,eax
c001014e:	74 19                	je     c0010169 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010150:	83 ec 0c             	sub    esp,0xc
c0010153:	8b 38                	mov    edi,DWORD PTR [eax]
c0010155:	56                   	push   esi
c0010156:	53                   	push   ebx
c0010157:	52                   	push   edx
c0010158:	51                   	push   ecx
c0010159:	50                   	push   eax
c001015a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001015d:	83 c4 20             	add    esp,0x20
c0010160:	89 c2                	mov    edx,eax
c0010162:	5b                   	pop    ebx
c0010163:	c1 fa 1f             	sar    edx,0x1f
c0010166:	5e                   	pop    esi
c0010167:	5f                   	pop    edi
c0010168:	c3                   	ret    
c0010169:	5b                   	pop    ebx
c001016a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001016f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010174:	5e                   	pop    esi
c0010175:	5f                   	pop    edi
c0010176:	c3                   	ret    

c0010177 <SysRealpath(regs*)>:
c0010177:	83 ec 0c             	sub    esp,0xc
c001017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010181:	85 d2                	test   edx,edx
c0010183:	74 07                	je     c001018c <SysRealpath(regs*)+0x15>
c0010185:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010188:	85 c0                	test   eax,eax
c001018a:	75 0b                	jne    c0010197 <SysRealpath(regs*)+0x20>
c001018c:	b8 01 00 00 00       	mov    eax,0x1
c0010191:	31 d2                	xor    edx,edx
c0010193:	83 c4 0c             	add    esp,0xc
c0010196:	c3                   	ret    
c0010197:	6a 00                	push   0x0
c0010199:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001019f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00101a2:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00101a8:	51                   	push   ecx
c00101a9:	52                   	push   edx
c00101aa:	50                   	push   eax
c00101ab:	e8 6a 7c ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	31 c0                	xor    eax,eax
c00101b5:	31 d2                	xor    edx,edx
c00101b7:	83 c4 0c             	add    esp,0xc
c00101ba:	c3                   	ret    

c00101bb <SysReadDir(regs*)>:
c00101bb:	53                   	push   ebx
c00101bc:	83 ec 18             	sub    esp,0x18
c00101bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101c3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101c6:	83 f8 02             	cmp    eax,0x2
c00101c9:	76 61                	jbe    c001022c <SysReadDir(regs*)+0x71>
c00101cb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101d2:	77 49                	ja     c001021d <SysReadDir(regs*)+0x62>
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	50                   	push   eax
c00101d8:	e8 08 1d 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	85 c0                	test   eax,eax
c00101e2:	74 39                	je     c001021d <SysReadDir(regs*)+0x62>
c00101e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101ec:	83 ec 0c             	sub    esp,0xc
c00101ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00101f1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101f5:	51                   	push   ecx
c00101f6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101f9:	51                   	push   ecx
c00101fa:	6a 00                	push   0x0
c00101fc:	68 10 01 00 00       	push   0x110
c0010201:	50                   	push   eax
c0010202:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010205:	83 c4 20             	add    esp,0x20
c0010208:	85 c0                	test   eax,eax
c001020a:	74 29                	je     c0010235 <SysReadDir(regs*)+0x7a>
c001020c:	83 f8 07             	cmp    eax,0x7
c001020f:	74 1b                	je     c001022c <SysReadDir(regs*)+0x71>
c0010211:	b8 02 00 00 00       	mov    eax,0x2
c0010216:	31 d2                	xor    edx,edx
c0010218:	83 c4 18             	add    esp,0x18
c001021b:	5b                   	pop    ebx
c001021c:	c3                   	ret    
c001021d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010222:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010227:	83 c4 18             	add    esp,0x18
c001022a:	5b                   	pop    ebx
c001022b:	c3                   	ret    
c001022c:	b8 01 00 00 00       	mov    eax,0x1
c0010231:	31 d2                	xor    edx,edx
c0010233:	eb e3                	jmp    c0010218 <SysReadDir(regs*)+0x5d>
c0010235:	31 c0                	xor    eax,eax
c0010237:	31 d2                	xor    edx,edx
c0010239:	eb dd                	jmp    c0010218 <SysReadDir(regs*)+0x5d>

c001023b <SysIsATTY(regs*)>:
c001023b:	83 ec 0c             	sub    esp,0xc
c001023e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010242:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010245:	83 f8 02             	cmp    eax,0x2
c0010248:	76 07                	jbe    c0010251 <SysIsATTY(regs*)+0x16>
c001024a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001024f:	75 26                	jne    c0010277 <SysIsATTY(regs*)+0x3c>
c0010251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010256:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010259:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001025f:	85 c0                	test   eax,eax
c0010261:	74 24                	je     c0010287 <SysIsATTY(regs*)+0x4c>
c0010263:	83 ec 0c             	sub    esp,0xc
c0010266:	8b 10                	mov    edx,DWORD PTR [eax]
c0010268:	50                   	push   eax
c0010269:	ff 12                	call   DWORD PTR [edx]
c001026b:	31 d2                	xor    edx,edx
c001026d:	0f b6 c0             	movzx  eax,al
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	83 c4 0c             	add    esp,0xc
c0010276:	c3                   	ret    
c0010277:	83 ec 0c             	sub    esp,0xc
c001027a:	50                   	push   eax
c001027b:	e8 65 1c 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0010280:	83 c4 10             	add    esp,0x10
c0010283:	85 c0                	test   eax,eax
c0010285:	75 dc                	jne    c0010263 <SysIsATTY(regs*)+0x28>
c0010287:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001028c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    

c0010295 <SysSeek(regs*)>:
c0010295:	53                   	push   ebx
c0010296:	83 ec 08             	sub    esp,0x8
c0010299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001029d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102a0:	8d 50 fd             	lea    edx,[eax-0x3]
c00102a3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00102a9:	77 32                	ja     c00102dd <SysSeek(regs*)+0x48>
c00102ab:	83 ec 0c             	sub    esp,0xc
c00102ae:	50                   	push   eax
c00102af:	e8 31 1c 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c00102b4:	83 c4 0c             	add    esp,0xc
c00102b7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102ba:	31 db                	xor    ebx,ebx
c00102bc:	53                   	push   ebx
c00102bd:	51                   	push   ecx
c00102be:	50                   	push   eax
c00102bf:	e8 2a 7f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00102c4:	83 c4 10             	add    esp,0x10
c00102c7:	85 c0                	test   eax,eax
c00102c9:	0f 95 c0             	setne  al
c00102cc:	31 d2                	xor    edx,edx
c00102ce:	0f b6 c0             	movzx  eax,al
c00102d1:	f7 d8                	neg    eax
c00102d3:	83 d2 00             	adc    edx,0x0
c00102d6:	83 c4 08             	add    esp,0x8
c00102d9:	f7 da                	neg    edx
c00102db:	5b                   	pop    ebx
c00102dc:	c3                   	ret    
c00102dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102e7:	83 c4 08             	add    esp,0x8
c00102ea:	5b                   	pop    ebx
c00102eb:	c3                   	ret    

c00102ec <SysTell(regs*)>:
c00102ec:	53                   	push   ebx
c00102ed:	83 ec 08             	sub    esp,0x8
c00102f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102f7:	83 f8 02             	cmp    eax,0x2
c00102fa:	76 4e                	jbe    c001034a <SysTell(regs*)+0x5e>
c00102fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010301:	76 19                	jbe    c001031c <SysTell(regs*)+0x30>
c0010303:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010306:	31 d2                	xor    edx,edx
c0010308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001030e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010315:	31 c0                	xor    eax,eax
c0010317:	83 c4 08             	add    esp,0x8
c001031a:	5b                   	pop    ebx
c001031b:	c3                   	ret    
c001031c:	83 ec 0c             	sub    esp,0xc
c001031f:	50                   	push   eax
c0010320:	e8 c0 1b 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0010325:	5a                   	pop    edx
c0010326:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010329:	59                   	pop    ecx
c001032a:	53                   	push   ebx
c001032b:	50                   	push   eax
c001032c:	e8 69 7f ff ff       	call   c000829a <File::tell(unsigned long long*)>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	85 c0                	test   eax,eax
c0010336:	0f 95 c0             	setne  al
c0010339:	31 d2                	xor    edx,edx
c001033b:	0f b6 c0             	movzx  eax,al
c001033e:	f7 d8                	neg    eax
c0010340:	83 d2 00             	adc    edx,0x0
c0010343:	83 c4 08             	add    esp,0x8
c0010346:	f7 da                	neg    edx
c0010348:	5b                   	pop    ebx
c0010349:	c3                   	ret    
c001034a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001034f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010354:	83 c4 08             	add    esp,0x8
c0010357:	5b                   	pop    ebx
c0010358:	c3                   	ret    

c0010359 <SysSize(regs*)>:
c0010359:	53                   	push   ebx
c001035a:	83 ec 18             	sub    esp,0x18
c001035d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010361:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010364:	83 f8 02             	cmp    eax,0x2
c0010367:	76 54                	jbe    c00103bd <SysSize(regs*)+0x64>
c0010369:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001036e:	76 19                	jbe    c0010389 <SysSize(regs*)+0x30>
c0010370:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010373:	31 d2                	xor    edx,edx
c0010375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001037b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010382:	31 c0                	xor    eax,eax
c0010384:	83 c4 18             	add    esp,0x18
c0010387:	5b                   	pop    ebx
c0010388:	c3                   	ret    
c0010389:	83 ec 0c             	sub    esp,0xc
c001038c:	50                   	push   eax
c001038d:	e8 53 1b 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0010392:	83 c4 0c             	add    esp,0xc
c0010395:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010399:	52                   	push   edx
c001039a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001039d:	52                   	push   edx
c001039e:	50                   	push   eax
c001039f:	e8 8e 80 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	85 c0                	test   eax,eax
c00103a9:	0f 95 c0             	setne  al
c00103ac:	31 d2                	xor    edx,edx
c00103ae:	0f b6 c0             	movzx  eax,al
c00103b1:	f7 d8                	neg    eax
c00103b3:	83 d2 00             	adc    edx,0x0
c00103b6:	83 c4 18             	add    esp,0x18
c00103b9:	f7 da                	neg    edx
c00103bb:	5b                   	pop    ebx
c00103bc:	c3                   	ret    
c00103bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103c7:	83 c4 18             	add    esp,0x18
c00103ca:	5b                   	pop    ebx
c00103cb:	c3                   	ret    

c00103cc <SysSizeFromFilename(regs*)>:
c00103cc:	55                   	push   ebp
c00103cd:	57                   	push   edi
c00103ce:	56                   	push   esi
c00103cf:	53                   	push   ebx
c00103d0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103d6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103dd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00103e0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00103e3:	85 f6                	test   esi,esi
c00103e5:	74 34                	je     c001041b <SysSizeFromFilename(regs*)+0x4f>
c00103e7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00103ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103f0:	83 f8 02             	cmp    eax,0x2
c00103f3:	76 2d                	jbe    c0010422 <SysSizeFromFilename(regs*)+0x56>
c00103f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103fa:	76 3b                	jbe    c0010437 <SysSizeFromFilename(regs*)+0x6b>
c00103fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010405:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001040c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010412:	31 c0                	xor    eax,eax
c0010414:	5b                   	pop    ebx
c0010415:	31 d2                	xor    edx,edx
c0010417:	5e                   	pop    esi
c0010418:	5f                   	pop    edi
c0010419:	5d                   	pop    ebp
c001041a:	c3                   	ret    
c001041b:	89 f8                	mov    eax,edi
c001041d:	83 f8 02             	cmp    eax,0x2
c0010420:	77 d3                	ja     c00103f5 <SysSizeFromFilename(regs*)+0x29>
c0010422:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001042d:	5b                   	pop    ebx
c001042e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010433:	5e                   	pop    esi
c0010434:	5f                   	pop    edi
c0010435:	5d                   	pop    ebp
c0010436:	c3                   	ret    
c0010437:	83 ec 0c             	sub    esp,0xc
c001043a:	68 14 01 00 00       	push   0x114
c001043f:	e8 37 e5 ff ff       	call   c000e97b <malloc>
c0010444:	6a 01                	push   0x1
c0010446:	89 c5                	mov    ebp,eax
c0010448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001044d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010450:	51                   	push   ecx
c0010451:	57                   	push   edi
c0010452:	55                   	push   ebp
c0010453:	e8 dc 7b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010458:	83 c4 1c             	add    esp,0x1c
c001045b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001045f:	50                   	push   eax
c0010460:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010463:	53                   	push   ebx
c0010464:	55                   	push   ebp
c0010465:	e8 c8 7f ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001046a:	83 c4 10             	add    esp,0x10
c001046d:	85 ed                	test   ebp,ebp
c001046f:	74 15                	je     c0010486 <SysSizeFromFilename(regs*)+0xba>
c0010471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010475:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010478:	83 ec 0c             	sub    esp,0xc
c001047b:	55                   	push   ebp
c001047c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001047f:	83 c4 10             	add    esp,0x10
c0010482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010486:	85 c0                	test   eax,eax
c0010488:	75 98                	jne    c0010422 <SysSizeFromFilename(regs*)+0x56>
c001048a:	6a 00                	push   0x0
c001048c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010491:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010494:	05 0c 01 00 00       	add    eax,0x10c
c0010499:	50                   	push   eax
c001049a:	57                   	push   edi
c001049b:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00104a2:	53                   	push   ebx
c00104a3:	e8 72 79 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104a8:	58                   	pop    eax
c00104a9:	5a                   	pop    edx
c00104aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104ae:	50                   	push   eax
c00104af:	53                   	push   ebx
c00104b0:	e8 ec 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	83 f8 01             	cmp    eax,0x1
c00104bb:	74 1a                	je     c00104d7 <SysSizeFromFilename(regs*)+0x10b>
c00104bd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00104c2:	74 26                	je     c00104ea <SysSizeFromFilename(regs*)+0x11e>
c00104c4:	85 f6                	test   esi,esi
c00104c6:	0f 84 40 ff ff ff    	je     c001040c <SysSizeFromFilename(regs*)+0x40>
c00104cc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00104d2:	e9 35 ff ff ff       	jmp    c001040c <SysSizeFromFilename(regs*)+0x40>
c00104d7:	85 f6                	test   esi,esi
c00104d9:	0f 84 2d ff ff ff    	je     c001040c <SysSizeFromFilename(regs*)+0x40>
c00104df:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00104e5:	e9 22 ff ff ff       	jmp    c001040c <SysSizeFromFilename(regs*)+0x40>
c00104ea:	85 f6                	test   esi,esi
c00104ec:	0f 84 1a ff ff ff    	je     c001040c <SysSizeFromFilename(regs*)+0x40>
c00104f2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104f8:	e9 0f ff ff ff       	jmp    c001040c <SysSizeFromFilename(regs*)+0x40>

c00104fd <SysSizeFromFilenameNoSymlink(regs*)>:
c00104fd:	55                   	push   ebp
c00104fe:	57                   	push   edi
c00104ff:	56                   	push   esi
c0010500:	53                   	push   ebx
c0010501:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010507:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001050e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010511:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010514:	85 f6                	test   esi,esi
c0010516:	74 34                	je     c001054c <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010518:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001051e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010521:	83 f8 02             	cmp    eax,0x2
c0010524:	76 2d                	jbe    c0010553 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010526:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001052b:	76 3b                	jbe    c0010568 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001052d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001053d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010543:	31 c0                	xor    eax,eax
c0010545:	5b                   	pop    ebx
c0010546:	31 d2                	xor    edx,edx
c0010548:	5e                   	pop    esi
c0010549:	5f                   	pop    edi
c001054a:	5d                   	pop    ebp
c001054b:	c3                   	ret    
c001054c:	89 f8                	mov    eax,edi
c001054e:	83 f8 02             	cmp    eax,0x2
c0010551:	77 d3                	ja     c0010526 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0010553:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001055e:	5b                   	pop    ebx
c001055f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010564:	5e                   	pop    esi
c0010565:	5f                   	pop    edi
c0010566:	5d                   	pop    ebp
c0010567:	c3                   	ret    
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	68 14 01 00 00       	push   0x114
c0010570:	e8 06 e4 ff ff       	call   c000e97b <malloc>
c0010575:	6a 00                	push   0x0
c0010577:	89 c5                	mov    ebp,eax
c0010579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001057e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010581:	51                   	push   ecx
c0010582:	57                   	push   edi
c0010583:	55                   	push   ebp
c0010584:	e8 ab 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010589:	83 c4 1c             	add    esp,0x1c
c001058c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010590:	50                   	push   eax
c0010591:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010594:	53                   	push   ebx
c0010595:	55                   	push   ebp
c0010596:	e8 97 7e ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001059b:	83 c4 10             	add    esp,0x10
c001059e:	85 ed                	test   ebp,ebp
c00105a0:	74 15                	je     c00105b7 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00105a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	55                   	push   ebp
c00105ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00105b0:	83 c4 10             	add    esp,0x10
c00105b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b7:	85 c0                	test   eax,eax
c00105b9:	75 98                	jne    c0010553 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00105bb:	6a 00                	push   0x0
c00105bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105c5:	05 0c 01 00 00       	add    eax,0x10c
c00105ca:	50                   	push   eax
c00105cb:	57                   	push   edi
c00105cc:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00105d3:	53                   	push   ebx
c00105d4:	e8 41 78 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105d9:	58                   	pop    eax
c00105da:	5a                   	pop    edx
c00105db:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105df:	50                   	push   eax
c00105e0:	53                   	push   ebx
c00105e1:	e8 bb 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00105e6:	83 c4 10             	add    esp,0x10
c00105e9:	83 f8 01             	cmp    eax,0x1
c00105ec:	74 1a                	je     c0010608 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00105ee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00105f3:	74 26                	je     c001061b <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00105f5:	85 f6                	test   esi,esi
c00105f7:	0f 84 40 ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00105fd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010603:	e9 35 ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010608:	85 f6                	test   esi,esi
c001060a:	0f 84 2d ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010610:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010616:	e9 22 ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001061b:	85 f6                	test   esi,esi
c001061d:	0f 84 1a ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010623:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010629:	e9 0f ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001062e <SysClose(regs*)>:
c001062e:	53                   	push   ebx
c001062f:	83 ec 08             	sub    esp,0x8
c0010632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010636:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010639:	83 f8 02             	cmp    eax,0x2
c001063c:	76 41                	jbe    c001067f <SysClose(regs*)+0x51>
c001063e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010644:	83 fa 01             	cmp    edx,0x1
c0010647:	76 2d                	jbe    c0010676 <SysClose(regs*)+0x48>
c0010649:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001064e:	77 2f                	ja     c001067f <SysClose(regs*)+0x51>
c0010650:	83 ec 0c             	sub    esp,0xc
c0010653:	50                   	push   eax
c0010654:	e8 8c 18 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0010659:	89 c3                	mov    ebx,eax
c001065b:	89 04 24             	mov    DWORD PTR [esp],eax
c001065e:	e8 2b 7b ff ff       	call   c000818e <File::close()>
c0010663:	83 c4 10             	add    esp,0x10
c0010666:	85 db                	test   ebx,ebx
c0010668:	74 0c                	je     c0010676 <SysClose(regs*)+0x48>
c001066a:	83 ec 0c             	sub    esp,0xc
c001066d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001066f:	53                   	push   ebx
c0010670:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	31 c0                	xor    eax,eax
c0010678:	31 d2                	xor    edx,edx
c001067a:	83 c4 08             	add    esp,0x8
c001067d:	5b                   	pop    ebx
c001067e:	c3                   	ret    
c001067f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010684:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010689:	83 c4 08             	add    esp,0x8
c001068c:	5b                   	pop    ebx
c001068d:	c3                   	ret    

c001068e <SysOpenDir(regs*)>:
c001068e:	56                   	push   esi
c001068f:	53                   	push   ebx
c0010690:	83 ec 04             	sub    esp,0x4
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001069a:	85 c9                	test   ecx,ecx
c001069c:	74 5d                	je     c00106fb <SysOpenDir(regs*)+0x6d>
c001069e:	83 ec 0c             	sub    esp,0xc
c00106a1:	68 14 01 00 00       	push   0x114
c00106a6:	e8 d0 e2 ff ff       	call   c000e97b <malloc>
c00106ab:	83 c4 0c             	add    esp,0xc
c00106ae:	89 c6                	mov    esi,eax
c00106b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106b8:	50                   	push   eax
c00106b9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00106bc:	52                   	push   edx
c00106bd:	56                   	push   esi
c00106be:	e8 2f 7f ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 f6                	test   esi,esi
c00106c8:	74 31                	je     c00106fb <SysOpenDir(regs*)+0x6d>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	56                   	push   esi
c00106ce:	e8 e7 7f ff ff       	call   c00086ba <Directory::open()>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	85 c0                	test   eax,eax
c00106d8:	75 21                	jne    c00106fb <SysOpenDir(regs*)+0x6d>
c00106da:	83 ec 0c             	sub    esp,0xc
c00106dd:	56                   	push   esi
c00106de:	e8 05 15 00 00       	call   c0011be8 <UnixFile::getFileDescriptor()>
c00106e3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	89 02                	mov    DWORD PTR [edx],eax
c00106eb:	c1 f8 1f             	sar    eax,0x1f
c00106ee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00106f1:	83 c4 04             	add    esp,0x4
c00106f4:	31 c0                	xor    eax,eax
c00106f6:	31 d2                	xor    edx,edx
c00106f8:	5b                   	pop    ebx
c00106f9:	5e                   	pop    esi
c00106fa:	c3                   	ret    
c00106fb:	83 c4 04             	add    esp,0x4
c00106fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010703:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010708:	5b                   	pop    ebx
c0010709:	5e                   	pop    esi
c001070a:	c3                   	ret    

c001070b <SysMakeDir(regs*)>:
c001070b:	56                   	push   esi
c001070c:	53                   	push   ebx
c001070d:	83 ec 10             	sub    esp,0x10
c0010710:	68 14 01 00 00       	push   0x114
c0010715:	e8 61 e2 ff ff       	call   c000e97b <malloc>
c001071a:	83 c4 0c             	add    esp,0xc
c001071d:	89 c3                	mov    ebx,eax
c001071f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010724:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010727:	50                   	push   eax
c0010728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001072c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001072f:	52                   	push   edx
c0010730:	53                   	push   ebx
c0010731:	e8 bc 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c0010736:	83 c4 10             	add    esp,0x10
c0010739:	85 db                	test   ebx,ebx
c001073b:	74 2c                	je     c0010769 <SysMakeDir(regs*)+0x5e>
c001073d:	83 ec 0c             	sub    esp,0xc
c0010740:	53                   	push   ebx
c0010741:	e8 54 81 ff ff       	call   c000889a <Directory::create()>
c0010746:	89 c6                	mov    esi,eax
c0010748:	8b 03                	mov    eax,DWORD PTR [ebx]
c001074a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001074d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010750:	83 c4 10             	add    esp,0x10
c0010753:	31 c0                	xor    eax,eax
c0010755:	85 f6                	test   esi,esi
c0010757:	0f 95 c0             	setne  al
c001075a:	31 d2                	xor    edx,edx
c001075c:	f7 d8                	neg    eax
c001075e:	83 d2 00             	adc    edx,0x0
c0010761:	83 c4 04             	add    esp,0x4
c0010764:	f7 da                	neg    edx
c0010766:	5b                   	pop    ebx
c0010767:	5e                   	pop    esi
c0010768:	c3                   	ret    
c0010769:	83 c4 04             	add    esp,0x4
c001076c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010771:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010776:	5b                   	pop    ebx
c0010777:	5e                   	pop    esi
c0010778:	c3                   	ret    

c0010779 <SysCloseDir(regs*)>:
c0010779:	53                   	push   ebx
c001077a:	83 ec 08             	sub    esp,0x8
c001077d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010781:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010784:	8d 50 fd             	lea    edx,[eax-0x3]
c0010787:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001078d:	77 2f                	ja     c00107be <SysCloseDir(regs*)+0x45>
c001078f:	83 ec 0c             	sub    esp,0xc
c0010792:	50                   	push   eax
c0010793:	e8 4d 17 00 00       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0010798:	89 c3                	mov    ebx,eax
c001079a:	89 04 24             	mov    DWORD PTR [esp],eax
c001079d:	e8 74 7f ff ff       	call   c0008716 <Directory::close()>
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	85 db                	test   ebx,ebx
c00107a7:	74 0c                	je     c00107b5 <SysCloseDir(regs*)+0x3c>
c00107a9:	83 ec 0c             	sub    esp,0xc
c00107ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107ae:	53                   	push   ebx
c00107af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	31 c0                	xor    eax,eax
c00107b7:	31 d2                	xor    edx,edx
c00107b9:	83 c4 08             	add    esp,0x8
c00107bc:	5b                   	pop    ebx
c00107bd:	c3                   	ret    
c00107be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107c8:	83 c4 08             	add    esp,0x8
c00107cb:	5b                   	pop    ebx
c00107cc:	c3                   	ret    

c00107cd <SysWait(regs*)>:
c00107cd:	83 ec 10             	sub    esp,0x10
c00107d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107d4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00107d7:	52                   	push   edx
c00107d8:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00107db:	51                   	push   ecx
c00107dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107df:	50                   	push   eax
c00107e0:	e8 c7 4d 00 00       	call   c00155ac <waitTask(int, int*, int)>
c00107e5:	83 c4 1c             	add    esp,0x1c
c00107e8:	89 c2                	mov    edx,eax
c00107ea:	c1 fa 1f             	sar    edx,0x1f
c00107ed:	c3                   	ret    

c00107ee <SysNotImpl(regs*)>:
c00107ee:	83 ec 18             	sub    esp,0x18
c00107f1:	68 24 26 02 c0       	push   0xc0022624
c00107f6:	e8 c7 e4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00107fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010800:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010805:	83 c4 1c             	add    esp,0x1c
c0010808:	c3                   	ret    

c0010809 <SysPanic(regs*)>:
c0010809:	83 ec 18             	sub    esp,0x18
c001080c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010810:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010813:	50                   	push   eax
c0010814:	e8 a9 e4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0010819:	b8 01 00 00 00       	mov    eax,0x1
c001081e:	31 d2                	xor    edx,edx
c0010820:	83 c4 1c             	add    esp,0x1c
c0010823:	c3                   	ret    

c0010824 <SysRmdir(regs*)>:
c0010824:	56                   	push   esi
c0010825:	53                   	push   ebx
c0010826:	83 ec 20             	sub    esp,0x20
c0010829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001082d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010830:	68 14 01 00 00       	push   0x114
c0010835:	e8 41 e1 ff ff       	call   c000e97b <malloc>
c001083a:	6a 00                	push   0x0
c001083c:	89 c3                	mov    ebx,eax
c001083e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010843:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010846:	50                   	push   eax
c0010847:	56                   	push   esi
c0010848:	53                   	push   ebx
c0010849:	e8 e6 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001084e:	83 c4 14             	add    esp,0x14
c0010851:	53                   	push   ebx
c0010852:	e8 a7 7a ff ff       	call   c00082fe <File::unlink()>
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	85 db                	test   ebx,ebx
c001085c:	74 14                	je     c0010872 <SysRmdir(regs*)+0x4e>
c001085e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010862:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010864:	83 ec 0c             	sub    esp,0xc
c0010867:	53                   	push   ebx
c0010868:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001086b:	83 c4 10             	add    esp,0x10
c001086e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010872:	85 c0                	test   eax,eax
c0010874:	0f 95 c0             	setne  al
c0010877:	31 d2                	xor    edx,edx
c0010879:	0f b6 c0             	movzx  eax,al
c001087c:	f7 d8                	neg    eax
c001087e:	83 d2 00             	adc    edx,0x0
c0010881:	83 c4 14             	add    esp,0x14
c0010884:	f7 da                	neg    edx
c0010886:	5b                   	pop    ebx
c0010887:	5e                   	pop    esi
c0010888:	c3                   	ret    

c0010889 <SysUnlink(regs*)>:
c0010889:	56                   	push   esi
c001088a:	53                   	push   ebx
c001088b:	83 ec 20             	sub    esp,0x20
c001088e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010892:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010895:	68 14 01 00 00       	push   0x114
c001089a:	e8 dc e0 ff ff       	call   c000e97b <malloc>
c001089f:	6a 00                	push   0x0
c00108a1:	89 c3                	mov    ebx,eax
c00108a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108ab:	50                   	push   eax
c00108ac:	56                   	push   esi
c00108ad:	53                   	push   ebx
c00108ae:	e8 81 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00108b3:	83 c4 14             	add    esp,0x14
c00108b6:	53                   	push   ebx
c00108b7:	e8 42 7a ff ff       	call   c00082fe <File::unlink()>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	85 db                	test   ebx,ebx
c00108c1:	74 14                	je     c00108d7 <SysUnlink(regs*)+0x4e>
c00108c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108c9:	83 ec 0c             	sub    esp,0xc
c00108cc:	53                   	push   ebx
c00108cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108d7:	85 c0                	test   eax,eax
c00108d9:	0f 95 c0             	setne  al
c00108dc:	31 d2                	xor    edx,edx
c00108de:	0f b6 c0             	movzx  eax,al
c00108e1:	f7 d8                	neg    eax
c00108e3:	83 d2 00             	adc    edx,0x0
c00108e6:	83 c4 14             	add    esp,0x14
c00108e9:	f7 da                	neg    edx
c00108eb:	5b                   	pop    ebx
c00108ec:	5e                   	pop    esi
c00108ed:	c3                   	ret    

c00108ee <SysGetArgv(regs*)>:
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108f5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108f8:	85 c0                	test   eax,eax
c00108fa:	78 2c                	js     c0010928 <SysGetArgv(regs*)+0x3a>
c00108fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010902:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010905:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001090b:	7d 1b                	jge    c0010928 <SysGetArgv(regs*)+0x3a>
c001090d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010914:	85 c0                	test   eax,eax
c0010916:	74 18                	je     c0010930 <SysGetArgv(regs*)+0x42>
c0010918:	83 ec 08             	sub    esp,0x8
c001091b:	50                   	push   eax
c001091c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001091f:	50                   	push   eax
c0010920:	e8 1b fd fe ff       	call   c0000640 <strcpy>
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	31 c0                	xor    eax,eax
c001092a:	31 d2                	xor    edx,edx
c001092c:	83 c4 0c             	add    esp,0xc
c001092f:	c3                   	ret    
c0010930:	b8 01 00 00 00       	mov    eax,0x1
c0010935:	31 d2                	xor    edx,edx
c0010937:	83 c4 0c             	add    esp,0xc
c001093a:	c3                   	ret    

c001093b <SysUSleep(regs*)>:
c001093b:	83 ec 1c             	sub    esp,0x1c
c001093e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010942:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010945:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010948:	6a 00                	push   0x0
c001094a:	6a 64                	push   0x64
c001094c:	52                   	push   edx
c001094d:	50                   	push   eax
c001094e:	e8 11 f4 00 00       	call   c001fd64 <__udivdi3>
c0010953:	83 c4 14             	add    esp,0x14
c0010956:	50                   	push   eax
c0010957:	e8 3c 4d 00 00       	call   c0015698 <milliTenthSleep(unsigned int)>
c001095c:	31 c0                	xor    eax,eax
c001095e:	31 d2                	xor    edx,edx
c0010960:	83 c4 1c             	add    esp,0x1c
c0010963:	c3                   	ret    

c0010964 <SysSpawn(regs*)>:
c0010964:	56                   	push   esi
c0010965:	53                   	push   ebx
c0010966:	83 ec 04             	sub    esp,0x4
c0010969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001096d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010970:	85 f6                	test   esi,esi
c0010972:	75 0a                	jne    c001097e <SysSpawn(regs*)+0x1a>
c0010974:	83 c4 04             	add    esp,0x4
c0010977:	31 c0                	xor    eax,eax
c0010979:	31 d2                	xor    edx,edx
c001097b:	5b                   	pop    ebx
c001097c:	5e                   	pop    esi
c001097d:	c3                   	ret    
c001097e:	83 ec 0c             	sub    esp,0xc
c0010981:	68 24 07 00 00       	push   0x724
c0010986:	e8 f0 df ff ff       	call   c000e97b <malloc>
c001098b:	83 c4 10             	add    esp,0x10
c001098e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010991:	89 c6                	mov    esi,eax
c0010993:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010996:	85 c9                	test   ecx,ecx
c0010998:	75 39                	jne    c00109d3 <SysSpawn(regs*)+0x6f>
c001099a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001099f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109a2:	52                   	push   edx
c00109a3:	50                   	push   eax
c00109a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00109a7:	50                   	push   eax
c00109a8:	56                   	push   esi
c00109a9:	e8 7e 44 00 00       	call   c0014e2c <Process::Process(char const*, Process*, char**)>
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00109b8:	75 ba                	jne    c0010974 <SysSpawn(regs*)+0x10>
c00109ba:	83 ec 0c             	sub    esp,0xc
c00109bd:	56                   	push   esi
c00109be:	e8 a9 49 00 00       	call   c001536c <Process::createUserThread()>
c00109c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00109c5:	83 c4 10             	add    esp,0x10
c00109c8:	89 c2                	mov    edx,eax
c00109ca:	83 c4 04             	add    esp,0x4
c00109cd:	c1 fa 1f             	sar    edx,0x1f
c00109d0:	5b                   	pop    ebx
c00109d1:	5e                   	pop    esi
c00109d2:	c3                   	ret    
c00109d3:	31 c0                	xor    eax,eax
c00109d5:	eb cb                	jmp    c00109a2 <SysSpawn(regs*)+0x3e>

c00109d7 <SysGetEnv(regs*)>:
c00109d7:	57                   	push   edi
c00109d8:	56                   	push   esi
c00109d9:	53                   	push   ebx
c00109da:	83 ec 1c             	sub    esp,0x1c
c00109dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00109e9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109ec:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00109ef:	51                   	push   ecx
c00109f0:	e8 ce d2 ff ff       	call   c000dcc3 <KeGetProcessTotalEnvCount(Process*)>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	39 c7                	cmp    edi,eax
c00109fa:	7c 14                	jl     c0010a10 <SysGetEnv(regs*)+0x39>
c00109fc:	85 f6                	test   esi,esi
c00109fe:	75 0b                	jne    c0010a0b <SysGetEnv(regs*)+0x34>
c0010a00:	83 c4 10             	add    esp,0x10
c0010a03:	31 c0                	xor    eax,eax
c0010a05:	5b                   	pop    ebx
c0010a06:	31 d2                	xor    edx,edx
c0010a08:	5e                   	pop    esi
c0010a09:	5f                   	pop    edi
c0010a0a:	c3                   	ret    
c0010a0b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a0e:	eb f0                	jmp    c0010a00 <SysGetEnv(regs*)+0x29>
c0010a10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a14:	83 ec 04             	sub    esp,0x4
c0010a17:	57                   	push   edi
c0010a18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a1e:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a21:	57                   	push   edi
c0010a22:	50                   	push   eax
c0010a23:	e8 bb d2 ff ff       	call   c000dce3 <KeGetProcessEnvPair(Process*, int)>
c0010a28:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a33:	83 c4 0c             	add    esp,0xc
c0010a36:	85 d2                	test   edx,edx
c0010a38:	75 23                	jne    c0010a5d <SysGetEnv(regs*)+0x86>
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	50                   	push   eax
c0010a3e:	e8 2d fb fe ff       	call   c0000570 <strlen>
c0010a43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a46:	89 c3                	mov    ebx,eax
c0010a48:	e8 23 fb fe ff       	call   c0000570 <strlen>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	31 d2                	xor    edx,edx
c0010a59:	5b                   	pop    ebx
c0010a5a:	5e                   	pop    esi
c0010a5b:	5f                   	pop    edi
c0010a5c:	c3                   	ret    
c0010a5d:	83 ec 08             	sub    esp,0x8
c0010a60:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a63:	50                   	push   eax
c0010a64:	56                   	push   esi
c0010a65:	e8 d6 fb fe ff       	call   c0000640 <strcpy>
c0010a6a:	58                   	pop    eax
c0010a6b:	5a                   	pop    edx
c0010a6c:	68 3e 26 02 c0       	push   0xc002263e
c0010a71:	56                   	push   esi
c0010a72:	e8 c9 fd fe ff       	call   c0000840 <strcat>
c0010a77:	59                   	pop    ecx
c0010a78:	5b                   	pop    ebx
c0010a79:	57                   	push   edi
c0010a7a:	56                   	push   esi
c0010a7b:	e8 c0 fd fe ff       	call   c0000840 <strcat>
c0010a80:	83 c4 10             	add    esp,0x10
c0010a83:	e9 78 ff ff ff       	jmp    c0010a00 <SysGetEnv(regs*)+0x29>

c0010a88 <SysSetFatAttrib(regs*)>:
c0010a88:	57                   	push   edi
c0010a89:	56                   	push   esi
c0010a8a:	53                   	push   ebx
c0010a8b:	83 ec 1c             	sub    esp,0x1c
c0010a8e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010a92:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a95:	68 14 01 00 00       	push   0x114
c0010a9a:	e8 dc de ff ff       	call   c000e97b <malloc>
c0010a9f:	83 c4 0c             	add    esp,0xc
c0010aa2:	89 c3                	mov    ebx,eax
c0010aa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010aac:	50                   	push   eax
c0010aad:	57                   	push   edi
c0010aae:	53                   	push   ebx
c0010aaf:	e8 5e 76 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010ab4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010ab7:	83 c4 0c             	add    esp,0xc
c0010aba:	0f b6 d4             	movzx  edx,ah
c0010abd:	0f b6 c0             	movzx  eax,al
c0010ac0:	52                   	push   edx
c0010ac1:	50                   	push   eax
c0010ac2:	53                   	push   ebx
c0010ac3:	e8 d0 78 ff ff       	call   c0008398 <File::chfatattr(unsigned char, unsigned char)>
c0010ac8:	83 c4 10             	add    esp,0x10
c0010acb:	85 db                	test   ebx,ebx
c0010acd:	74 14                	je     c0010ae3 <SysSetFatAttrib(regs*)+0x5b>
c0010acf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ad3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	53                   	push   ebx
c0010ad9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ae3:	85 c0                	test   eax,eax
c0010ae5:	0f 95 c0             	setne  al
c0010ae8:	31 d2                	xor    edx,edx
c0010aea:	0f b6 c0             	movzx  eax,al
c0010aed:	f7 d8                	neg    eax
c0010aef:	83 d2 00             	adc    edx,0x0
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	f7 da                	neg    edx
c0010af7:	5b                   	pop    ebx
c0010af8:	5e                   	pop    esi
c0010af9:	5f                   	pop    edi
c0010afa:	c3                   	ret    

c0010afb <SysShutdown(regs*)>:
c0010afb:	83 ec 1c             	sub    esp,0x1c
c0010afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b02:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010b05:	85 c9                	test   ecx,ecx
c0010b07:	74 18                	je     c0010b21 <SysShutdown(regs*)+0x26>
c0010b09:	83 f9 01             	cmp    ecx,0x1
c0010b0c:	74 26                	je     c0010b34 <SysShutdown(regs*)+0x39>
c0010b0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b18:	83 f9 02             	cmp    ecx,0x2
c0010b1b:	74 24                	je     c0010b41 <SysShutdown(regs*)+0x46>
c0010b1d:	83 c4 1c             	add    esp,0x1c
c0010b20:	c3                   	ret    
c0010b21:	e8 16 cc ff ff       	call   c000d73c <KeShutdown()>
c0010b26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b30:	83 c4 1c             	add    esp,0x1c
c0010b33:	c3                   	ret    
c0010b34:	e8 27 cc ff ff       	call   c000d760 <KeSleep()>
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	31 d2                	xor    edx,edx
c0010b3d:	83 c4 1c             	add    esp,0x1c
c0010b40:	c3                   	ret    
c0010b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010b49:	e8 1e cc ff ff       	call   c000d76c <KeRestart()>
c0010b4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b56:	eb c5                	jmp    c0010b1d <SysShutdown(regs*)+0x22>

c0010b58 <SysPipe(regs*)>:
c0010b58:	57                   	push   edi
c0010b59:	56                   	push   esi
c0010b5a:	53                   	push   ebx
c0010b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5f:	83 ec 0c             	sub    esp,0xc
c0010b62:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b65:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b68:	6a 20                	push   0x20
c0010b6a:	e8 0c de ff ff       	call   c000e97b <malloc>
c0010b6f:	89 c3                	mov    ebx,eax
c0010b71:	58                   	pop    eax
c0010b72:	5a                   	pop    edx
c0010b73:	68 00 50 00 00       	push   0x5000
c0010b78:	53                   	push   ebx
c0010b79:	e8 b6 e9 ff ff       	call   c000f534 <Pipe::Pipe(int)>
c0010b7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b81:	e8 62 10 00 00       	call   c0011be8 <UnixFile::getFileDescriptor()>
c0010b86:	89 07                	mov    DWORD PTR [edi],eax
c0010b88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b8b:	e8 58 10 00 00       	call   c0011be8 <UnixFile::getFileDescriptor()>
c0010b90:	83 c4 10             	add    esp,0x10
c0010b93:	89 06                	mov    DWORD PTR [esi],eax
c0010b95:	31 d2                	xor    edx,edx
c0010b97:	5b                   	pop    ebx
c0010b98:	31 c0                	xor    eax,eax
c0010b9a:	5e                   	pop    esi
c0010b9b:	5f                   	pop    edi
c0010b9c:	c3                   	ret    

c0010b9d <SysGetUnixTime(regs*)>:
c0010b9d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010ba2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010bac:	e9 e5 7f ff ff       	jmp    c0008b96 <Clock::timeInSecondsLocal()>

c0010bb1 <string_ends_with(char const*, char const*)>:
c0010bb1:	57                   	push   edi
c0010bb2:	56                   	push   esi
c0010bb3:	53                   	push   ebx
c0010bb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bb8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010bbc:	83 ec 0c             	sub    esp,0xc
c0010bbf:	53                   	push   ebx
c0010bc0:	e8 ab f9 fe ff       	call   c0000570 <strlen>
c0010bc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010bc8:	89 c6                	mov    esi,eax
c0010bca:	e8 a1 f9 fe ff       	call   c0000570 <strlen>
c0010bcf:	83 c4 10             	add    esp,0x10
c0010bd2:	39 c6                	cmp    esi,eax
c0010bd4:	7d 06                	jge    c0010bdc <string_ends_with(char const*, char const*)+0x2b>
c0010bd6:	5b                   	pop    ebx
c0010bd7:	31 c0                	xor    eax,eax
c0010bd9:	5e                   	pop    esi
c0010bda:	5f                   	pop    edi
c0010bdb:	c3                   	ret    
c0010bdc:	83 ec 08             	sub    esp,0x8
c0010bdf:	29 c6                	sub    esi,eax
c0010be1:	57                   	push   edi
c0010be2:	01 f3                	add    ebx,esi
c0010be4:	53                   	push   ebx
c0010be5:	e8 66 fb fe ff       	call   c0000750 <strcmp>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	85 c0                	test   eax,eax
c0010bef:	5b                   	pop    ebx
c0010bf0:	0f 94 c0             	sete   al
c0010bf3:	5e                   	pop    esi
c0010bf4:	0f b6 c0             	movzx  eax,al
c0010bf7:	5f                   	pop    edi
c0010bf8:	c3                   	ret    

c0010bf9 <SysOpen(regs*)>:
c0010bf9:	56                   	push   esi
c0010bfa:	53                   	push   ebx
c0010bfb:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c01:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c0b:	85 c0                	test   eax,eax
c0010c0d:	0f 84 bc 01 00 00    	je     c0010dcf <SysOpen(regs*)+0x1d6>
c0010c13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c16:	85 c0                	test   eax,eax
c0010c18:	0f 84 b1 01 00 00    	je     c0010dcf <SysOpen(regs*)+0x1d6>
c0010c1e:	6a 00                	push   0x0
c0010c20:	68 40 26 02 c0       	push   0xc0022640
c0010c25:	50                   	push   eax
c0010c26:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c2a:	56                   	push   esi
c0010c2b:	e8 ea 71 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010c30:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c33:	e8 38 f9 fe ff       	call   c0000570 <strlen>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	83 e8 01             	sub    eax,0x1
c0010c3e:	74 21                	je     c0010c61 <SysOpen(regs*)+0x68>
c0010c40:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010c44:	eb 12                	jmp    c0010c58 <SysOpen(regs*)+0x5f>
c0010c46:	83 fa 3a             	cmp    edx,0x3a
c0010c49:	74 12                	je     c0010c5d <SysOpen(regs*)+0x64>
c0010c4b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c4f:	83 e8 01             	sub    eax,0x1
c0010c52:	74 0d                	je     c0010c61 <SysOpen(regs*)+0x68>
c0010c54:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010c58:	83 fa 2e             	cmp    edx,0x2e
c0010c5b:	75 e9                	jne    c0010c46 <SysOpen(regs*)+0x4d>
c0010c5d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c61:	83 ec 08             	sub    esp,0x8
c0010c64:	68 44 26 02 c0       	push   0xc0022644
c0010c69:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c6c:	50                   	push   eax
c0010c6d:	e8 3f ff ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	85 c0                	test   eax,eax
c0010c77:	74 1d                	je     c0010c96 <SysOpen(regs*)+0x9d>
c0010c79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c89:	81 c4 04 01 00 00    	add    esp,0x104
c0010c8f:	31 c0                	xor    eax,eax
c0010c91:	31 d2                	xor    edx,edx
c0010c93:	5b                   	pop    ebx
c0010c94:	5e                   	pop    esi
c0010c95:	c3                   	ret    
c0010c96:	83 ec 08             	sub    esp,0x8
c0010c99:	68 49 26 02 c0       	push   0xc0022649
c0010c9e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca1:	50                   	push   eax
c0010ca2:	e8 0a ff ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010ca7:	83 c4 10             	add    esp,0x10
c0010caa:	85 c0                	test   eax,eax
c0010cac:	75 cb                	jne    c0010c79 <SysOpen(regs*)+0x80>
c0010cae:	83 ec 08             	sub    esp,0x8
c0010cb1:	68 45 26 02 c0       	push   0xc0022645
c0010cb6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cb9:	50                   	push   eax
c0010cba:	e8 91 fa fe ff       	call   c0000750 <strcmp>
c0010cbf:	83 c4 10             	add    esp,0x10
c0010cc2:	85 c0                	test   eax,eax
c0010cc4:	74 b3                	je     c0010c79 <SysOpen(regs*)+0x80>
c0010cc6:	83 ec 08             	sub    esp,0x8
c0010cc9:	68 44 26 02 c0       	push   0xc0022644
c0010cce:	56                   	push   esi
c0010ccf:	e8 dd fe ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	85 c0                	test   eax,eax
c0010cd9:	75 9e                	jne    c0010c79 <SysOpen(regs*)+0x80>
c0010cdb:	83 ec 08             	sub    esp,0x8
c0010cde:	68 4e 26 02 c0       	push   0xc002264e
c0010ce3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ce6:	50                   	push   eax
c0010ce7:	e8 c5 fe ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	85 c0                	test   eax,eax
c0010cf1:	0f 85 eb 00 00 00    	jne    c0010de2 <SysOpen(regs*)+0x1e9>
c0010cf7:	83 ec 08             	sub    esp,0x8
c0010cfa:	68 53 26 02 c0       	push   0xc0022653
c0010cff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d02:	50                   	push   eax
c0010d03:	e8 a9 fe ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010d08:	83 c4 10             	add    esp,0x10
c0010d0b:	85 c0                	test   eax,eax
c0010d0d:	0f 85 cf 00 00 00    	jne    c0010de2 <SysOpen(regs*)+0x1e9>
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	68 4f 26 02 c0       	push   0xc002264f
c0010d1b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d1e:	51                   	push   ecx
c0010d1f:	e8 2c fa fe ff       	call   c0000750 <strcmp>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	85 c0                	test   eax,eax
c0010d29:	0f 84 b3 00 00 00    	je     c0010de2 <SysOpen(regs*)+0x1e9>
c0010d2f:	83 ec 08             	sub    esp,0x8
c0010d32:	68 4e 26 02 c0       	push   0xc002264e
c0010d37:	56                   	push   esi
c0010d38:	e8 74 fe ff ff       	call   c0010bb1 <string_ends_with(char const*, char const*)>
c0010d3d:	83 c4 10             	add    esp,0x10
c0010d40:	85 c0                	test   eax,eax
c0010d42:	0f 85 9a 00 00 00    	jne    c0010de2 <SysOpen(regs*)+0x1e9>
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	68 14 01 00 00       	push   0x114
c0010d50:	e8 26 dc ff ff       	call   c000e97b <malloc>
c0010d55:	83 c4 0c             	add    esp,0xc
c0010d58:	89 c6                	mov    esi,eax
c0010d5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d62:	50                   	push   eax
c0010d63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d66:	52                   	push   edx
c0010d67:	56                   	push   esi
c0010d68:	e8 a5 73 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	85 f6                	test   esi,esi
c0010d72:	74 5b                	je     c0010dcf <SysOpen(regs*)+0x1d6>
c0010d74:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d77:	0f b6 c2             	movzx  eax,dl
c0010d7a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d7d:	89 d0                	mov    eax,edx
c0010d7f:	83 e0 01             	and    eax,0x1
c0010d82:	f6 c2 02             	test   dl,0x2
c0010d85:	74 03                	je     c0010d8a <SysOpen(regs*)+0x191>
c0010d87:	83 c8 02             	or     eax,0x2
c0010d8a:	f6 c2 04             	test   dl,0x4
c0010d8d:	74 03                	je     c0010d92 <SysOpen(regs*)+0x199>
c0010d8f:	83 c8 04             	or     eax,0x4
c0010d92:	f6 c2 08             	test   dl,0x8
c0010d95:	74 03                	je     c0010d9a <SysOpen(regs*)+0x1a1>
c0010d97:	83 c8 0a             	or     eax,0xa
c0010d9a:	80 e2 10             	and    dl,0x10
c0010d9d:	74 03                	je     c0010da2 <SysOpen(regs*)+0x1a9>
c0010d9f:	83 c8 12             	or     eax,0x12
c0010da2:	83 ec 08             	sub    esp,0x8
c0010da5:	50                   	push   eax
c0010da6:	56                   	push   esi
c0010da7:	e8 84 73 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0010dac:	83 c4 10             	add    esp,0x10
c0010daf:	85 c0                	test   eax,eax
c0010db1:	75 1c                	jne    c0010dcf <SysOpen(regs*)+0x1d6>
c0010db3:	83 ec 0c             	sub    esp,0xc
c0010db6:	56                   	push   esi
c0010db7:	e8 2c 0e 00 00       	call   c0011be8 <UnixFile::getFileDescriptor()>
c0010dbc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010dbf:	83 c4 10             	add    esp,0x10
c0010dc2:	89 02                	mov    DWORD PTR [edx],eax
c0010dc4:	c1 f8 1f             	sar    eax,0x1f
c0010dc7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dca:	e9 ba fe ff ff       	jmp    c0010c89 <SysOpen(regs*)+0x90>
c0010dcf:	81 c4 04 01 00 00    	add    esp,0x104
c0010dd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dda:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ddf:	5b                   	pop    ebx
c0010de0:	5e                   	pop    esi
c0010de1:	c3                   	ret    
c0010de2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010de5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010deb:	e9 92 fe ff ff       	jmp    c0010c82 <SysOpen(regs*)+0x89>

c0010df0 <KeSystemCall(regs*, void*)>:
c0010df0:	56                   	push   esi
c0010df1:	53                   	push   ebx
c0010df2:	50                   	push   eax
c0010df3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010df7:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010dfa:	83 fb 40             	cmp    ebx,0x40
c0010dfd:	77 25                	ja     c0010e24 <KeSystemCall(regs*, void*)+0x34>
c0010dff:	8b 04 9d 60 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbba0]
c0010e06:	85 c0                	test   eax,eax
c0010e08:	74 1a                	je     c0010e24 <KeSystemCall(regs*, void*)+0x34>
c0010e0a:	83 ec 0c             	sub    esp,0xc
c0010e0d:	56                   	push   esi
c0010e0e:	ff d0                	call   eax
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010e16:	83 fb 2f             	cmp    ebx,0x2f
c0010e19:	75 19                	jne    c0010e34 <KeSystemCall(regs*, void*)+0x44>
c0010e1b:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010e22:	eb 10                	jmp    c0010e34 <KeSystemCall(regs*, void*)+0x44>
c0010e24:	56                   	push   esi
c0010e25:	56                   	push   esi
c0010e26:	53                   	push   ebx
c0010e27:	68 58 26 02 c0       	push   0xc0022658
c0010e2c:	e8 33 61 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	59                   	pop    ecx
c0010e35:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e3a:	31 d2                	xor    edx,edx
c0010e3c:	5b                   	pop    ebx
c0010e3d:	5e                   	pop    esi
c0010e3e:	c3                   	ret    
c0010e3f:	90                   	nop

c0010e40 <VgaText::isAtty()>:
c0010e40:	b0 01                	mov    al,0x1
c0010e42:	c3                   	ret    
c0010e43:	90                   	nop

c0010e44 <VgaText::~VgaText()>:
c0010e44:	83 ec 0c             	sub    esp,0xc
c0010e47:	ba 90 26 02 c0       	mov    edx,0xc0022690
c0010e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e50:	89 10                	mov    DWORD PTR [eax],edx
c0010e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	50                   	push   eax
c0010e5a:	e8 77 0f 00 00       	call   c0011dd6 <UnixFile::~UnixFile()>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	90                   	nop
c0010e63:	83 c4 0c             	add    esp,0xc
c0010e66:	c3                   	ret    
c0010e67:	90                   	nop

c0010e68 <VgaText::~VgaText()>:
c0010e68:	83 ec 0c             	sub    esp,0xc
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e72:	e8 cd ff ff ff       	call   c0010e44 <VgaText::~VgaText()>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	83 ec 08             	sub    esp,0x8
c0010e7d:	68 84 01 00 00       	push   0x184
c0010e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e86:	e8 75 b8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	83 c4 0c             	add    esp,0xc
c0010e91:	c3                   	ret    

c0010e92 <VgaText::read(unsigned long long, void*, int*)>:
c0010e92:	83 ec 10             	sub    esp,0x10
c0010e95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea1:	e8 ef 8c ff ff       	call   c0009b95 <readKeyboard(VgaText*, char*, unsigned long)>
c0010ea6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010eaa:	89 02                	mov    DWORD PTR [edx],eax
c0010eac:	31 c0                	xor    eax,eax
c0010eae:	83 c4 1c             	add    esp,0x1c
c0010eb1:	c3                   	ret    

c0010eb2 <setTerminalScrollLock(bool)>:
c0010eb2:	c3                   	ret    

c0010eb3 <doTerminalCycle()>:
c0010eb3:	c3                   	ret    

c0010eb4 <addToTerminalCycle(VgaText*)>:
c0010eb4:	c3                   	ret    

c0010eb5 <scrollTerminalScrollLock(int)>:
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::updateTitle()>:
c0010eb6:	c3                   	ret    
c0010eb7:	90                   	nop

c0010eb8 <VgaText::load()>:
c0010eb8:	c3                   	ret    
c0010eb9:	90                   	nop

c0010eba <VgaText::updateCursor()>:
c0010eba:	83 ec 14             	sub    esp,0x14
c0010ebd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ec1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010ec4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010ec7:	e8 88 87 00 00       	call   c0019654 <HalConsoleCursorUpdate(int, int)>
c0010ecc:	83 c4 1c             	add    esp,0x1c
c0010ecf:	c3                   	ret    

c0010ed0 <VgaText::doANSI_SGR(int)>:
c0010ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed8:	85 d2                	test   edx,edx
c0010eda:	75 0b                	jne    c0010ee7 <VgaText::doANSI_SGR(int)+0x17>
c0010edc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010edf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ee2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ee5:	eb 59                	jmp    c0010f40 <VgaText::doANSI_SGR(int)+0x70>
c0010ee7:	83 fa 07             	cmp    edx,0x7
c0010eea:	75 0b                	jne    c0010ef7 <VgaText::doANSI_SGR(int)+0x27>
c0010eec:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010eef:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010ef2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010ef5:	eb 49                	jmp    c0010f40 <VgaText::doANSI_SGR(int)+0x70>
c0010ef7:	83 fa 1b             	cmp    edx,0x1b
c0010efa:	74 e0                	je     c0010edc <VgaText::doANSI_SGR(int)+0xc>
c0010efc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010eff:	83 f9 07             	cmp    ecx,0x7
c0010f02:	77 09                	ja     c0010f0d <VgaText::doANSI_SGR(int)+0x3d>
c0010f04:	8b 14 8d a0 45 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdba60]
c0010f0b:	eb 20                	jmp    c0010f2d <VgaText::doANSI_SGR(int)+0x5d>
c0010f0d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f10:	83 f9 07             	cmp    ecx,0x7
c0010f13:	77 09                	ja     c0010f1e <VgaText::doANSI_SGR(int)+0x4e>
c0010f15:	8b 14 8d a0 45 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdba60]
c0010f1c:	eb 22                	jmp    c0010f40 <VgaText::doANSI_SGR(int)+0x70>
c0010f1e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010f21:	83 f9 07             	cmp    ecx,0x7
c0010f24:	77 0b                	ja     c0010f31 <VgaText::doANSI_SGR(int)+0x61>
c0010f26:	8b 14 95 58 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbba8]
c0010f2d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f30:	c3                   	ret    
c0010f31:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010f34:	83 f9 07             	cmp    ecx,0x7
c0010f37:	77 0a                	ja     c0010f43 <VgaText::doANSI_SGR(int)+0x73>
c0010f39:	8b 14 95 30 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbd0]
c0010f40:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f43:	c3                   	ret    

c0010f44 <VgaText::setDefaultBgColour(VgaColour)>:
c0010f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f4c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f4f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f52:	c3                   	ret    
c0010f53:	90                   	nop

c0010f54 <VgaText::setDefaultFgColour(VgaColour)>:
c0010f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f5c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010f5f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010f64:	53                   	push   ebx
c0010f65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f71:	51                   	push   ecx
c0010f72:	e8 cd ff ff ff       	call   c0010f44 <VgaText::setDefaultBgColour(VgaColour)>
c0010f77:	58                   	pop    eax
c0010f78:	5a                   	pop    edx
c0010f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f81:	5b                   	pop    ebx
c0010f82:	eb d0                	jmp    c0010f54 <VgaText::setDefaultFgColour(VgaColour)>

c0010f84 <VgaText::setTitleTextColour(VgaColour)>:
c0010f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f8c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f8f:	c3                   	ret    

c0010f90 <VgaText::setTitleColour(VgaColour)>:
c0010f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f98:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f9b:	c3                   	ret    

c0010f9c <VgaText::setTitle(char*)>:
c0010f9c:	c3                   	ret    
c0010f9d:	90                   	nop

c0010f9e <VgaText::combineColours(unsigned char, unsigned char)>:
c0010f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010fa7:	83 e0 0f             	and    eax,0xf
c0010faa:	c1 e2 04             	shl    edx,0x4
c0010fad:	09 d0                	or     eax,edx
c0010faf:	c3                   	ret    

c0010fb0 <VgaText::scrollScreen()>:
c0010fb0:	55                   	push   ebp
c0010fb1:	57                   	push   edi
c0010fb2:	56                   	push   esi
c0010fb3:	be 01 00 00 00       	mov    esi,0x1
c0010fb8:	53                   	push   ebx
c0010fb9:	83 ec 0c             	sub    esp,0xc
c0010fbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fc0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010fc3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010fc9:	31 ff                	xor    edi,edi
c0010fcb:	01 e9                	add    ecx,ebp
c0010fcd:	8a 01                	mov    al,BYTE PTR [ecx]
c0010fcf:	83 fe 18             	cmp    esi,0x18
c0010fd2:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010fd8:	75 20                	jne    c0010ffa <VgaText::scrollScreen()+0x4a>
c0010fda:	f7 c7 01 00 00 00    	test   edi,0x1
c0010fe0:	74 15                	je     c0010ff7 <VgaText::scrollScreen()+0x47>
c0010fe2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010fe6:	50                   	push   eax
c0010fe7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010feb:	50                   	push   eax
c0010fec:	e8 ad ff ff ff       	call   c0010f9e <VgaText::combineColours(unsigned char, unsigned char)>
c0010ff1:	5a                   	pop    edx
c0010ff2:	5a                   	pop    edx
c0010ff3:	88 01                	mov    BYTE PTR [ecx],al
c0010ff5:	eb 03                	jmp    c0010ffa <VgaText::scrollScreen()+0x4a>
c0010ff7:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010ffa:	47                   	inc    edi
c0010ffb:	41                   	inc    ecx
c0010ffc:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011002:	75 c9                	jne    c0010fcd <VgaText::scrollScreen()+0x1d>
c0011004:	46                   	inc    esi
c0011005:	83 fe 19             	cmp    esi,0x19
c0011008:	75 b9                	jne    c0010fc3 <VgaText::scrollScreen()+0x13>
c001100a:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0011010:	75 1f                	jne    c0011031 <VgaText::scrollScreen()+0x81>
c0011012:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011016:	74 05                	je     c001101d <VgaText::scrollScreen()+0x6d>
c0011018:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001101b:	eb 14                	jmp    c0011031 <VgaText::scrollScreen()+0x81>
c001101d:	50                   	push   eax
c001101e:	50                   	push   eax
c001101f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011023:	50                   	push   eax
c0011024:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011028:	50                   	push   eax
c0011029:	e8 ba 84 00 00       	call   c00194e8 <HalConsoleScroll(int, int)>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	5b                   	pop    ebx
c0011039:	5e                   	pop    esi
c001103a:	5f                   	pop    edi
c001103b:	5d                   	pop    ebp
c001103c:	e9 79 fe ff ff       	jmp    c0010eba <VgaText::updateCursor()>
c0011041:	90                   	nop

c0011042 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011042:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011047:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001104c:	c1 e0 08             	shl    eax,0x8
c001104f:	09 d0                	or     eax,edx
c0011051:	c3                   	ret    

c0011052 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011052:	55                   	push   ebp
c0011053:	57                   	push   edi
c0011054:	56                   	push   esi
c0011055:	53                   	push   ebx
c0011056:	83 ec 1c             	sub    esp,0x1c
c0011059:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001105d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011061:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011069:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001106d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011071:	0f b6 c3             	movzx  eax,bl
c0011074:	50                   	push   eax
c0011075:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001107a:	50                   	push   eax
c001107b:	e8 1e ff ff ff       	call   c0010f9e <VgaText::combineColours(unsigned char, unsigned char)>
c0011080:	5a                   	pop    edx
c0011081:	0f b6 c0             	movzx  eax,al
c0011084:	59                   	pop    ecx
c0011085:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c001108a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001108e:	50                   	push   eax
c001108f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011093:	e8 aa ff ff ff       	call   c0011042 <VgaText::combineCharAndColour(char, unsigned char)>
c0011098:	5a                   	pop    edx
c0011099:	6b d7 50             	imul   edx,edi,0x50
c001109c:	59                   	pop    ecx
c001109d:	01 f2                	add    edx,esi
c001109f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00110a2:	0f b7 d2             	movzx  edx,dx
c00110a5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00110a9:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00110af:	75 28                	jne    c00110d9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00110b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110b5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00110b9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00110bd:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00110c1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00110c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00110cd:	83 c4 1c             	add    esp,0x1c
c00110d0:	5b                   	pop    ebx
c00110d1:	5e                   	pop    esi
c00110d2:	5f                   	pop    edi
c00110d3:	5d                   	pop    ebp
c00110d4:	e9 17 85 00 00       	jmp    c00195f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00110d9:	83 c4 1c             	add    esp,0x1c
c00110dc:	5b                   	pop    ebx
c00110dd:	5e                   	pop    esi
c00110de:	5f                   	pop    edi
c00110df:	5d                   	pop    ebp
c00110e0:	c3                   	ret    
c00110e1:	90                   	nop

c00110e2 <VgaText::getCursorX()>:
c00110e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110e6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00110e9:	c3                   	ret    

c00110ea <VgaText::getCursorY()>:
c00110ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110f1:	c3                   	ret    

c00110f2 <VgaText::setCursor(int, int)>:
c00110f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110fa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00110fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011101:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011104:	e9 b1 fd ff ff       	jmp    c0010eba <VgaText::updateCursor()>

c0011109 <setActiveTerminal(VgaText*)>:
c0011109:	53                   	push   ebx
c001110a:	83 ec 08             	sub    esp,0x8
c001110d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011111:	85 db                	test   ebx,ebx
c0011113:	75 11                	jne    c0011126 <setActiveTerminal(VgaText*)+0x1d>
c0011115:	c7 44 24 10 6c 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc002266c
c001111d:	83 c4 08             	add    esp,0x8
c0011120:	5b                   	pop    ebx
c0011121:	e9 9c db ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0011126:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001112b:	85 c0                	test   eax,eax
c001112d:	74 0c                	je     c001113b <setActiveTerminal(VgaText*)+0x32>
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	50                   	push   eax
c0011133:	e8 82 fd ff ff       	call   c0010eba <VgaText::updateCursor()>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011141:	50                   	push   eax
c0011142:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011145:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011148:	53                   	push   ebx
c0011149:	e8 a4 ff ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c001114e:	83 c4 18             	add    esp,0x18
c0011151:	5b                   	pop    ebx
c0011152:	c3                   	ret    
c0011153:	90                   	nop

c0011154 <VgaText::clearScreen()>:
c0011154:	57                   	push   edi
c0011155:	56                   	push   esi
c0011156:	31 f6                	xor    esi,esi
c0011158:	53                   	push   ebx
c0011159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001115d:	52                   	push   edx
c001115e:	6a 00                	push   0x0
c0011160:	6a 00                	push   0x0
c0011162:	53                   	push   ebx
c0011163:	e8 8a ff ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c0011168:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011175:	7e 20                	jle    c0011197 <VgaText::clearScreen()+0x43>
c0011177:	31 ff                	xor    edi,edi
c0011179:	50                   	push   eax
c001117a:	50                   	push   eax
c001117b:	56                   	push   esi
c001117c:	57                   	push   edi
c001117d:	47                   	inc    edi
c001117e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011181:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011184:	6a 20                	push   0x20
c0011186:	53                   	push   ebx
c0011187:	e8 c6 fe ff ff       	call   c0011052 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001118c:	83 c4 20             	add    esp,0x20
c001118f:	83 ff 50             	cmp    edi,0x50
c0011192:	75 e5                	jne    c0011179 <VgaText::clearScreen()+0x25>
c0011194:	46                   	inc    esi
c0011195:	eb db                	jmp    c0011172 <VgaText::clearScreen()+0x1e>
c0011197:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001119e:	5b                   	pop    ebx
c001119f:	5e                   	pop    esi
c00111a0:	5f                   	pop    edi
c00111a1:	c3                   	ret    

c00111a2 <VgaText::setCursorX(int)>:
c00111a2:	83 ec 10             	sub    esp,0x10
c00111a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111a9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00111ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b0:	50                   	push   eax
c00111b1:	e8 3c ff ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c00111b6:	83 c4 1c             	add    esp,0x1c
c00111b9:	c3                   	ret    

c00111ba <VgaText::setCursorY(int)>:
c00111ba:	83 ec 10             	sub    esp,0x10
c00111bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00111c5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00111c8:	50                   	push   eax
c00111c9:	e8 24 ff ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c00111ce:	83 c4 1c             	add    esp,0x1c
c00111d1:	c3                   	ret    

c00111d2 <VgaText::incrementCursor(bool)>:
c00111d2:	56                   	push   esi
c00111d3:	53                   	push   ebx
c00111d4:	51                   	push   ecx
c00111d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00111dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00111e0:	40                   	inc    eax
c00111e1:	83 f8 50             	cmp    eax,0x50
c00111e4:	74 05                	je     c00111eb <VgaText::incrementCursor(bool)+0x19>
c00111e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00111e9:	eb 24                	jmp    c001120f <VgaText::incrementCursor(bool)+0x3d>
c00111eb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111f5:	8d 50 01             	lea    edx,[eax+0x1]
c00111f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00111fb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00111fe:	75 0f                	jne    c001120f <VgaText::incrementCursor(bool)+0x3d>
c0011200:	83 ec 0c             	sub    esp,0xc
c0011203:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011206:	53                   	push   ebx
c0011207:	e8 a4 fd ff ff       	call   c0010fb0 <VgaText::scrollScreen()>
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	89 f0                	mov    eax,esi
c0011211:	84 c0                	test   al,al
c0011213:	74 0c                	je     c0011221 <VgaText::incrementCursor(bool)+0x4f>
c0011215:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011219:	5a                   	pop    edx
c001121a:	5b                   	pop    ebx
c001121b:	5e                   	pop    esi
c001121c:	e9 99 fc ff ff       	jmp    c0010eba <VgaText::updateCursor()>
c0011221:	58                   	pop    eax
c0011222:	5b                   	pop    ebx
c0011223:	5e                   	pop    esi
c0011224:	c3                   	ret    
c0011225:	90                   	nop

c0011226 <VgaText::decrementCursor(bool)>:
c0011226:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001122a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001122e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011231:	85 c0                	test   eax,eax
c0011233:	74 04                	je     c0011239 <VgaText::decrementCursor(bool)+0x13>
c0011235:	48                   	dec    eax
c0011236:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011239:	84 c9                	test   cl,cl
c001123b:	74 09                	je     c0011246 <VgaText::decrementCursor(bool)+0x20>
c001123d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011241:	e9 74 fc ff ff       	jmp    c0010eba <VgaText::updateCursor()>
c0011246:	c3                   	ret    
c0011247:	90                   	nop

c0011248 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011248:	53                   	push   ebx
c0011249:	83 ec 08             	sub    esp,0x8
c001124c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011251:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011255:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011259:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001125d:	83 f8 07             	cmp    eax,0x7
c0011260:	75 21                	jne    c0011283 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011262:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001126a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011272:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001127a:	83 c4 08             	add    esp,0x8
c001127d:	5b                   	pop    ebx
c001127e:	e9 2f 77 ff ff       	jmp    c00089b2 <KeBeep(int, int, bool)>
c0011283:	83 f8 0d             	cmp    eax,0xd
c0011286:	75 09                	jne    c0011291 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011288:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001128f:	eb 2d                	jmp    c00112be <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011291:	83 f8 0a             	cmp    eax,0xa
c0011294:	75 31                	jne    c00112c7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011296:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011299:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112a0:	8d 50 01             	lea    edx,[eax+0x1]
c00112a3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00112a6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00112a9:	75 0f                	jne    c00112ba <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00112ab:	83 ec 0c             	sub    esp,0xc
c00112ae:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00112b1:	53                   	push   ebx
c00112b2:	e8 f9 fc ff ff       	call   c0010fb0 <VgaText::scrollScreen()>
c00112b7:	83 c4 10             	add    esp,0x10
c00112ba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00112be:	83 c4 08             	add    esp,0x8
c00112c1:	5b                   	pop    ebx
c00112c2:	e9 f3 fb ff ff       	jmp    c0010eba <VgaText::updateCursor()>
c00112c7:	83 f8 08             	cmp    eax,0x8
c00112ca:	75 25                	jne    c00112f1 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00112cc:	50                   	push   eax
c00112cd:	50                   	push   eax
c00112ce:	6a 01                	push   0x1
c00112d0:	53                   	push   ebx
c00112d1:	e8 50 ff ff ff       	call   c0011226 <VgaText::decrementCursor(bool)>
c00112d6:	5a                   	pop    edx
c00112d7:	59                   	pop    ecx
c00112d8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112db:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00112e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00112e4:	6a 20                	push   0x20
c00112e6:	53                   	push   ebx
c00112e7:	e8 66 fd ff ff       	call   c0011052 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112ec:	83 c4 28             	add    esp,0x28
c00112ef:	5b                   	pop    ebx
c00112f0:	c3                   	ret    
c00112f1:	83 ec 08             	sub    esp,0x8
c00112f4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112f7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112fa:	51                   	push   ecx
c00112fb:	52                   	push   edx
c00112fc:	50                   	push   eax
c00112fd:	53                   	push   ebx
c00112fe:	e8 4f fd ff ff       	call   c0011052 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011303:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011307:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001130f:	83 c4 28             	add    esp,0x28
c0011312:	5b                   	pop    ebx
c0011313:	e9 ba fe ff ff       	jmp    c00111d2 <VgaText::incrementCursor(bool)>

c0011318 <VgaText::putchar(char)>:
c0011318:	57                   	push   edi
c0011319:	56                   	push   esi
c001131a:	53                   	push   ebx
c001131b:	83 ec 10             	sub    esp,0x10
c001131e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011322:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011326:	89 f8                	mov    eax,edi
c0011328:	0f be c0             	movsx  eax,al
c001132b:	83 f8 5b             	cmp    eax,0x5b
c001132e:	75 18                	jne    c0011348 <VgaText::putchar(char)+0x30>
c0011330:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011334:	74 20                	je     c0011356 <VgaText::putchar(char)+0x3e>
c0011336:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001133c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011343:	e9 c1 00 00 00       	jmp    c0011409 <VgaText::putchar(char)+0xf1>
c0011348:	83 f8 1b             	cmp    eax,0x1b
c001134b:	75 09                	jne    c0011356 <VgaText::putchar(char)+0x3e>
c001134d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011351:	e9 b3 00 00 00       	jmp    c0011409 <VgaText::putchar(char)+0xf1>
c0011356:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011359:	84 c9                	test   cl,cl
c001135b:	0f 84 98 00 00 00    	je     c00113f9 <VgaText::putchar(char)+0xe1>
c0011361:	8d 77 c0             	lea    esi,[edi-0x40]
c0011364:	89 f2                	mov    edx,esi
c0011366:	80 fa 3e             	cmp    dl,0x3e
c0011369:	77 78                	ja     c00113e3 <VgaText::putchar(char)+0xcb>
c001136b:	83 f8 6d             	cmp    eax,0x6d
c001136e:	75 47                	jne    c00113b7 <VgaText::putchar(char)+0x9f>
c0011370:	31 f6                	xor    esi,esi
c0011372:	31 d2                	xor    edx,edx
c0011374:	31 c0                	xor    eax,eax
c0011376:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011379:	7e 2d                	jle    c00113a8 <VgaText::putchar(char)+0x90>
c001137b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011380:	83 fa 3b             	cmp    edx,0x3b
c0011383:	75 17                	jne    c001139c <VgaText::putchar(char)+0x84>
c0011385:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011389:	50                   	push   eax
c001138a:	53                   	push   ebx
c001138b:	e8 40 fb ff ff       	call   c0010ed0 <VgaText::doANSI_SGR(int)>
c0011390:	59                   	pop    ecx
c0011391:	31 d2                	xor    edx,edx
c0011393:	5f                   	pop    edi
c0011394:	31 c0                	xor    eax,eax
c0011396:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001139a:	eb 09                	jmp    c00113a5 <VgaText::putchar(char)+0x8d>
c001139c:	6b c0 0a             	imul   eax,eax,0xa
c001139f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00113a3:	88 ca                	mov    dl,cl
c00113a5:	46                   	inc    esi
c00113a6:	eb ce                	jmp    c0011376 <VgaText::putchar(char)+0x5e>
c00113a8:	84 d2                	test   dl,dl
c00113aa:	74 2f                	je     c00113db <VgaText::putchar(char)+0xc3>
c00113ac:	50                   	push   eax
c00113ad:	53                   	push   ebx
c00113ae:	e8 1d fb ff ff       	call   c0010ed0 <VgaText::doANSI_SGR(int)>
c00113b3:	58                   	pop    eax
c00113b4:	5a                   	pop    edx
c00113b5:	eb 24                	jmp    c00113db <VgaText::putchar(char)+0xc3>
c00113b7:	83 f8 4a             	cmp    eax,0x4a
c00113ba:	75 1f                	jne    c00113db <VgaText::putchar(char)+0xc3>
c00113bc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00113c0:	75 19                	jne    c00113db <VgaText::putchar(char)+0xc3>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	53                   	push   ebx
c00113c6:	e8 89 fd ff ff       	call   c0011154 <VgaText::clearScreen()>
c00113cb:	83 c4 0c             	add    esp,0xc
c00113ce:	6a 00                	push   0x0
c00113d0:	6a 00                	push   0x0
c00113d2:	53                   	push   ebx
c00113d3:	e8 1a fd ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00113e1:	eb 26                	jmp    c0011409 <VgaText::putchar(char)+0xf1>
c00113e3:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00113e6:	83 f8 0e             	cmp    eax,0xe
c00113e9:	7f 1e                	jg     c0011409 <VgaText::putchar(char)+0xf1>
c00113eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00113ee:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00113f1:	89 f9                	mov    ecx,edi
c00113f3:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00113f7:	eb 10                	jmp    c0011409 <VgaText::putchar(char)+0xf1>
c00113f9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00113fc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00113ff:	50                   	push   eax
c0011400:	53                   	push   ebx
c0011401:	e8 42 fe ff ff       	call   c0011248 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	5b                   	pop    ebx
c001140d:	5e                   	pop    esi
c001140e:	5f                   	pop    edi
c001140f:	c3                   	ret    

c0011410 <VgaText::putx(unsigned int)>:
c0011410:	57                   	push   edi
c0011411:	b9 11 00 00 00       	mov    ecx,0x11
c0011416:	56                   	push   esi
c0011417:	be 2f 11 02 c0       	mov    esi,0xc002112f
c001141c:	53                   	push   ebx
c001141d:	83 ec 20             	sub    esp,0x20
c0011420:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011424:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011428:	fc                   	cld    
c0011429:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001142b:	be 08 00 00 00       	mov    esi,0x8
c0011430:	50                   	push   eax
c0011431:	50                   	push   eax
c0011432:	89 d8                	mov    eax,ebx
c0011434:	c1 e3 04             	shl    ebx,0x4
c0011437:	c1 e8 1c             	shr    eax,0x1c
c001143a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001143f:	50                   	push   eax
c0011440:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011444:	e8 cf fe ff ff       	call   c0011318 <VgaText::putchar(char)>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	4e                   	dec    esi
c001144d:	75 e1                	jne    c0011430 <VgaText::putx(unsigned int)+0x20>
c001144f:	83 c4 20             	add    esp,0x20
c0011452:	5b                   	pop    ebx
c0011453:	5e                   	pop    esi
c0011454:	5f                   	pop    edi
c0011455:	c3                   	ret    

c0011456 <VgaText::puts(char const*)>:
c0011456:	53                   	push   ebx
c0011457:	83 ec 08             	sub    esp,0x8
c001145a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001145e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011461:	85 c0                	test   eax,eax
c0011463:	74 12                	je     c0011477 <VgaText::puts(char const*)+0x21>
c0011465:	43                   	inc    ebx
c0011466:	51                   	push   ecx
c0011467:	51                   	push   ecx
c0011468:	50                   	push   eax
c0011469:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001146d:	e8 a6 fe ff ff       	call   c0011318 <VgaText::putchar(char)>
c0011472:	83 c4 10             	add    esp,0x10
c0011475:	eb e7                	jmp    c001145e <VgaText::puts(char const*)+0x8>
c0011477:	83 c4 08             	add    esp,0x8
c001147a:	5b                   	pop    ebx
c001147b:	c3                   	ret    

c001147c <VgaText::write(unsigned long long, void*, int*)>:
c001147c:	55                   	push   ebp
c001147d:	57                   	push   edi
c001147e:	56                   	push   esi
c001147f:	53                   	push   ebx
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011487:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001148b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001148f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011496:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011499:	39 eb                	cmp    ebx,ebp
c001149b:	74 13                	je     c00114b0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001149d:	43                   	inc    ebx
c001149e:	50                   	push   eax
c001149f:	50                   	push   eax
c00114a0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114a4:	50                   	push   eax
c00114a5:	56                   	push   esi
c00114a6:	e8 6d fe ff ff       	call   c0011318 <VgaText::putchar(char)>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	eb e9                	jmp    c0011499 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114b0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00114b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114bb:	89 38                	mov    DWORD PTR [eax],edi
c00114bd:	83 c4 0c             	add    esp,0xc
c00114c0:	31 c0                	xor    eax,eax
c00114c2:	5b                   	pop    ebx
c00114c3:	5e                   	pop    esi
c00114c4:	5f                   	pop    edi
c00114c5:	5d                   	pop    ebp
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00114c8:	55                   	push   ebp
c00114c9:	57                   	push   edi
c00114ca:	56                   	push   esi
c00114cb:	53                   	push   ebx
c00114cc:	83 ec 0c             	sub    esp,0xc
c00114cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114d8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00114df:	50                   	push   eax
c00114e0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114e5:	50                   	push   eax
c00114e6:	e8 b3 fa ff ff       	call   c0010f9e <VgaText::combineColours(unsigned char, unsigned char)>
c00114eb:	5a                   	pop    edx
c00114ec:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00114f0:	59                   	pop    ecx
c00114f1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00114f4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114f8:	0f b7 f6             	movzx  esi,si
c00114fb:	0f b6 e8             	movzx  ebp,al
c00114fe:	01 f6                	add    esi,esi
c0011500:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011503:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0011506:	85 c0                	test   eax,eax
c0011508:	0f 84 ef 00 00 00    	je     c00115fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001150e:	83 f8 0d             	cmp    eax,0xd
c0011511:	75 0c                	jne    c001151f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011513:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001151a:	e9 d8 00 00 00       	jmp    c00115f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001151f:	83 f8 0a             	cmp    eax,0xa
c0011522:	75 44                	jne    c0011568 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011524:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011527:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001152e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011531:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0011534:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0011537:	75 0f                	jne    c0011548 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011539:	83 ec 0c             	sub    esp,0xc
c001153c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001153f:	53                   	push   ebx
c0011540:	e8 6b fa ff ff       	call   c0010fb0 <VgaText::scrollScreen()>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	83 ec 0c             	sub    esp,0xc
c001154b:	53                   	push   ebx
c001154c:	e8 69 f9 ff ff       	call   c0010eba <VgaText::updateCursor()>
c0011551:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001155b:	0f b7 f6             	movzx  esi,si
c001155e:	01 f6                	add    esi,esi
c0011560:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011563:	e9 8f 00 00 00       	jmp    c00115f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011568:	83 f8 08             	cmp    eax,0x8
c001156b:	75 34                	jne    c00115a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001156d:	51                   	push   ecx
c001156e:	51                   	push   ecx
c001156f:	6a 01                	push   0x1
c0011571:	53                   	push   ebx
c0011572:	e8 af fc ff ff       	call   c0011226 <VgaText::decrementCursor(bool)>
c0011577:	5e                   	pop    esi
c0011578:	58                   	pop    eax
c0011579:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001157c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001157f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011582:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011585:	6a 20                	push   0x20
c0011587:	53                   	push   ebx
c0011588:	e8 c5 fa ff ff       	call   c0011052 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001158d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011591:	83 c4 20             	add    esp,0x20
c0011594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011597:	0f b7 f6             	movzx  esi,si
c001159a:	01 f6                	add    esi,esi
c001159c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001159f:	eb 56                	jmp    c00115f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115a1:	52                   	push   edx
c00115a2:	52                   	push   edx
c00115a3:	55                   	push   ebp
c00115a4:	50                   	push   eax
c00115a5:	e8 98 fa ff ff       	call   c0011042 <VgaText::combineCharAndColour(char, unsigned char)>
c00115aa:	83 c4 10             	add    esp,0x10
c00115ad:	66 89 06             	mov    WORD PTR [esi],ax
c00115b0:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c00115b6:	75 1d                	jne    c00115d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00115be:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00115c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115c5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115c9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00115cc:	50                   	push   eax
c00115cd:	e8 1e 80 00 00       	call   c00195f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00115d2:	83 c4 20             	add    esp,0x20
c00115d5:	83 c6 02             	add    esi,0x2
c00115d8:	50                   	push   eax
c00115d9:	50                   	push   eax
c00115da:	6a 00                	push   0x0
c00115dc:	53                   	push   ebx
c00115dd:	e8 f0 fb ff ff       	call   c00111d2 <VgaText::incrementCursor(bool)>
c00115e2:	83 c4 10             	add    esp,0x10
c00115e5:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00115e9:	75 0c                	jne    c00115f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115eb:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115ef:	0f b7 f6             	movzx  esi,si
c00115f2:	01 f6                	add    esi,esi
c00115f4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115f7:	47                   	inc    edi
c00115f8:	e9 06 ff ff ff       	jmp    c0011503 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	53                   	push   ebx
c0011601:	e8 b4 f8 ff ff       	call   c0010eba <VgaText::updateCursor()>
c0011606:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001160d:	83 c4 1c             	add    esp,0x1c
c0011610:	5b                   	pop    ebx
c0011611:	5e                   	pop    esi
c0011612:	5f                   	pop    edi
c0011613:	5d                   	pop    ebp
c0011614:	c3                   	ret    
c0011615:	90                   	nop

c0011616 <VgaText::VgaText(char const*)>:
c0011616:	56                   	push   esi
c0011617:	53                   	push   ebx
c0011618:	83 ec 04             	sub    esp,0x4
c001161b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001161f:	83 ec 08             	sub    esp,0x8
c0011622:	6a 00                	push   0x0
c0011624:	50                   	push   eax
c0011625:	e8 c6 05 00 00       	call   c0011bf0 <UnixFile::UnixFile(int)>
c001162a:	83 c4 10             	add    esp,0x10
c001162d:	ba 90 26 02 c0       	mov    edx,0xc0022690
c0011632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011636:	89 10                	mov    DWORD PTR [eax],edx
c0011638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001163c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011647:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001164e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011652:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001165e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011662:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011678:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001167f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011683:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0011695:	83 ec 0c             	sub    esp,0xc
c0011698:	6a 01                	push   0x1
c001169a:	e8 a0 09 00 00       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	89 c2                	mov    edx,eax
c00116a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116ab:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00116b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116b8:	89 c6                	mov    esi,eax
c00116ba:	e8 f7 d7 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00116bf:	68 05 0c 00 00       	push   0xc05
c00116c4:	56                   	push   esi
c00116c5:	50                   	push   eax
c00116c6:	53                   	push   ebx
c00116c7:	e8 56 10 00 00       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116d6:	83 ec 04             	sub    esp,0x4
c00116d9:	68 a0 0f 00 00       	push   0xfa0
c00116de:	6a 00                	push   0x0
c00116e0:	50                   	push   eax
c00116e1:	e8 0a ee fe ff       	call   c00004f0 <memset>
c00116e6:	83 c4 10             	add    esp,0x10
c00116e9:	83 ec 04             	sub    esp,0x4
c00116ec:	6a 00                	push   0x0
c00116ee:	6a 07                	push   0x7
c00116f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f4:	e8 6b f8 ff ff       	call   c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	83 ec 04             	sub    esp,0x4
c00116ff:	6a 00                	push   0x0
c0011701:	6a 00                	push   0x0
c0011703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011707:	e8 e6 f9 ff ff       	call   c00110f2 <VgaText::setCursor(int, int)>
c001170c:	83 c4 10             	add    esp,0x10
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011716:	e8 39 fa ff ff       	call   c0011154 <VgaText::clearScreen()>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011722:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001172a:	05 82 00 00 00       	add    eax,0x82
c001172f:	83 ec 04             	sub    esp,0x4
c0011732:	68 80 00 00 00       	push   0x80
c0011737:	6a 00                	push   0x0
c0011739:	50                   	push   eax
c001173a:	e8 b1 ed fe ff       	call   c00004f0 <memset>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011746:	05 02 01 00 00       	add    eax,0x102
c001174b:	83 ec 04             	sub    esp,0x4
c001174e:	68 80 00 00 00       	push   0x80
c0011753:	6a 00                	push   0x0
c0011755:	50                   	push   eax
c0011756:	e8 95 ed fe ff       	call   c00004f0 <memset>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	90                   	nop
c001175f:	83 c4 04             	add    esp,0x4
c0011762:	5b                   	pop    ebx
c0011763:	5e                   	pop    esi
c0011764:	c3                   	ret    
c0011765:	90                   	nop

c0011766 <VgaText::receiveKey(unsigned char)>:
c0011766:	55                   	push   ebp
c0011767:	57                   	push   edi
c0011768:	56                   	push   esi
c0011769:	53                   	push   ebx
c001176a:	83 ec 2c             	sub    esp,0x2c
c001176d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0011771:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011775:	89 ef                	mov    edi,ebp
c0011777:	81 e7 ff 00 00 00    	and    edi,0xff
c001177d:	0f 84 66 01 00 00    	je     c00118e9 <VgaText::receiveKey(unsigned char)+0x183>
c0011783:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011789:	83 ff 08             	cmp    edi,0x8
c001178c:	75 73                	jne    c0011801 <VgaText::receiveKey(unsigned char)+0x9b>
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	56                   	push   esi
c0011792:	e8 d9 ed fe ff       	call   c0000570 <strlen>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	85 c0                	test   eax,eax
c001179c:	0f 84 02 01 00 00    	je     c00118a4 <VgaText::receiveKey(unsigned char)+0x13e>
c00117a2:	50                   	push   eax
c00117a3:	50                   	push   eax
c00117a4:	6a 08                	push   0x8
c00117a6:	53                   	push   ebx
c00117a7:	e8 6c fb ff ff       	call   c0011318 <VgaText::putchar(char)>
c00117ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00117af:	e8 bc ed fe ff       	call   c0000570 <strlen>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00117bf:	83 fa 0d             	cmp    edx,0xd
c00117c2:	89 d0                	mov    eax,edx
c00117c4:	0f 95 c1             	setne  cl
c00117c7:	83 fa 1f             	cmp    edx,0x1f
c00117ca:	0f 9e c2             	setle  dl
c00117cd:	0f b6 d2             	movzx  edx,dl
c00117d0:	85 ca                	test   edx,ecx
c00117d2:	74 17                	je     c00117eb <VgaText::receiveKey(unsigned char)+0x85>
c00117d4:	83 e8 08             	sub    eax,0x8
c00117d7:	3c 02                	cmp    al,0x2
c00117d9:	76 10                	jbe    c00117eb <VgaText::receiveKey(unsigned char)+0x85>
c00117db:	55                   	push   ebp
c00117dc:	55                   	push   ebp
c00117dd:	68 7a 26 02 c0       	push   0xc002267a
c00117e2:	53                   	push   ebx
c00117e3:	e8 6e fc ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	83 ec 0c             	sub    esp,0xc
c00117ee:	56                   	push   esi
c00117ef:	e8 7c ed fe ff       	call   c0000570 <strlen>
c00117f4:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00117fc:	e9 a0 00 00 00       	jmp    c00118a1 <VgaText::receiveKey(unsigned char)+0x13b>
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001180a:	50                   	push   eax
c001180b:	e8 60 ed fe ff       	call   c0000570 <strlen>
c0011810:	89 34 24             	mov    DWORD PTR [esp],esi
c0011813:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011817:	e8 54 ed fe ff       	call   c0000570 <strlen>
c001181c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011827:	3d 80 00 00 00       	cmp    eax,0x80
c001182c:	0f 87 b7 00 00 00    	ja     c00118e9 <VgaText::receiveKey(unsigned char)+0x183>
c0011832:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011835:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011838:	3c 1e                	cmp    al,0x1e
c001183a:	0f 96 c0             	setbe  al
c001183d:	80 fa 01             	cmp    dl,0x1
c0011840:	0f 97 c2             	seta   dl
c0011843:	0f b6 d2             	movzx  edx,dl
c0011846:	85 c2                	test   edx,eax
c0011848:	74 2e                	je     c0011878 <VgaText::receiveKey(unsigned char)+0x112>
c001184a:	83 ff 0d             	cmp    edi,0xd
c001184d:	74 29                	je     c0011878 <VgaText::receiveKey(unsigned char)+0x112>
c001184f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011852:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011855:	68 80 26 02 c0       	push   0xc0022680
c001185a:	53                   	push   ebx
c001185b:	e8 68 fc ff ff       	call   c00114c8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011863:	8d 45 40             	lea    eax,[ebp+0x40]
c0011866:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011869:	0f b6 c0             	movzx  eax,al
c001186c:	50                   	push   eax
c001186d:	53                   	push   ebx
c001186e:	e8 d5 f9 ff ff       	call   c0011248 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011873:	83 c4 20             	add    esp,0x20
c0011876:	eb 11                	jmp    c0011889 <VgaText::receiveKey(unsigned char)+0x123>
c0011878:	89 e8                	mov    eax,ebp
c001187a:	51                   	push   ecx
c001187b:	0f be c0             	movsx  eax,al
c001187e:	51                   	push   ecx
c001187f:	50                   	push   eax
c0011880:	53                   	push   ebx
c0011881:	e8 92 fa ff ff       	call   c0011318 <VgaText::putchar(char)>
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001188e:	89 e8                	mov    eax,ebp
c0011890:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011894:	52                   	push   edx
c0011895:	52                   	push   edx
c0011896:	8d 44 24 26          	lea    eax,[esp+0x26]
c001189a:	50                   	push   eax
c001189b:	56                   	push   esi
c001189c:	e8 9f ef fe ff       	call   c0000840 <strcat>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00118aa:	b0 01                	mov    al,0x1
c00118ac:	83 ff 1c             	cmp    edi,0x1c
c00118af:	77 0e                	ja     c00118bf <VgaText::receiveKey(unsigned char)+0x159>
c00118b1:	b8 08 04 00 10       	mov    eax,0x10000408
c00118b6:	89 f9                	mov    ecx,edi
c00118b8:	d3 e8                	shr    eax,cl
c00118ba:	f7 d0                	not    eax
c00118bc:	83 e0 01             	and    eax,0x1
c00118bf:	84 c0                	test   al,al
c00118c1:	74 04                	je     c00118c7 <VgaText::receiveKey(unsigned char)+0x161>
c00118c3:	84 d2                	test   dl,dl
c00118c5:	74 22                	je     c00118e9 <VgaText::receiveKey(unsigned char)+0x183>
c00118c7:	81 c3 02 01 00 00    	add    ebx,0x102
c00118cd:	50                   	push   eax
c00118ce:	50                   	push   eax
c00118cf:	56                   	push   esi
c00118d0:	53                   	push   ebx
c00118d1:	e8 6a ef fe ff       	call   c0000840 <strcat>
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	68 80 00 00 00       	push   0x80
c00118de:	6a 00                	push   0x0
c00118e0:	56                   	push   esi
c00118e1:	e8 0a ec fe ff       	call   c00004f0 <memset>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	83 c4 2c             	add    esp,0x2c
c00118ec:	5b                   	pop    ebx
c00118ed:	5e                   	pop    esi
c00118ee:	5f                   	pop    edi
c00118ef:	5d                   	pop    ebp
c00118f0:	c3                   	ret    
c00118f1:	90                   	nop

c00118f2 <VgaText::doUpdate()>:
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <TSS::TSS()>:
c00118f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118ff:	90                   	nop
c0011900:	c3                   	ret    
c0011901:	90                   	nop
c0011902:	66 90                	xchg   ax,ax

c0011904 <TSS::setESP(unsigned long)>:
c0011904:	55                   	push   ebp
c0011905:	89 e5                	mov    ebp,esp
c0011907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011910:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011913:	90                   	nop
c0011914:	5d                   	pop    ebp
c0011915:	c3                   	ret    
c0011916:	66 90                	xchg   ax,ax

c0011918 <TSS::flush()>:
c0011918:	55                   	push   ebp
c0011919:	89 e5                	mov    ebp,esp
c001191b:	83 ec 10             	sub    esp,0x10
c001191e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011921:	8b 00                	mov    eax,DWORD PTR [eax]
c0011923:	83 c8 03             	or     eax,0x3
c0011926:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001192a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001192e:	66 89 d0             	mov    ax,dx
c0011931:	0f 00 d8             	ltr    ax
c0011934:	90                   	nop
c0011935:	c9                   	leave  
c0011936:	c3                   	ret    
c0011937:	90                   	nop

c0011938 <TSS::setup(unsigned long, unsigned long)>:
c0011938:	55                   	push   ebp
c0011939:	89 e5                	mov    ebp,esp
c001193b:	83 ec 18             	sub    esp,0x18
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	6a 68                	push   0x68
c0011943:	e8 33 d0 ff ff       	call   c000e97b <malloc>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	89 c2                	mov    edx,eax
c001194d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011950:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011959:	83 ec 08             	sub    esp,0x8
c001195c:	50                   	push   eax
c001195d:	68 a4 26 02 c0       	push   0xc00226a4
c0011962:	e8 fd 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011970:	83 ec 04             	sub    esp,0x4
c0011973:	6a 68                	push   0x68
c0011975:	6a 00                	push   0x0
c0011977:	50                   	push   eax
c0011978:	e8 73 eb fe ff       	call   c00004f0 <memset>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011983:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011986:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001198c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011992:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001199e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119aa:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00119b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00119bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119c2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00119c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ce:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00119d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119da:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00119e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00119ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119f2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00119f5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00119f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a01:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a0a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	68 bb 26 02 c0       	push   0xc00226bb
c0011a19:	e8 46 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a27:	0f 20 da             	mov    edx,cr3
c0011a2a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a2d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a30:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a33:	83 ec 0c             	sub    esp,0xc
c0011a36:	68 be 26 02 c0       	push   0xc00226be
c0011a3b:	e8 24 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a40:	83 c4 10             	add    esp,0x10
c0011a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a49:	83 ec 08             	sub    esp,0x8
c0011a4c:	50                   	push   eax
c0011a4d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a50:	50                   	push   eax
c0011a51:	e8 74 c6 ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	83 ec 08             	sub    esp,0x8
c0011a5c:	6a 68                	push   0x68
c0011a5e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a61:	50                   	push   eax
c0011a62:	e8 7f c6 ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011a6e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a71:	83 e0 0f             	and    eax,0xf
c0011a74:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a77:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a7a:	83 c8 40             	or     eax,0x40
c0011a7d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	68 c1 26 02 c0       	push   0xc00226c1
c0011a88:	e8 d7 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a9b:	83 ec 08             	sub    esp,0x8
c0011a9e:	50                   	push   eax
c0011a9f:	68 c4 26 02 c0       	push   0xc00226c4
c0011aa4:	e8 bb 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011ab1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ab7:	05 64 01 00 00       	add    eax,0x164
c0011abc:	83 ec 04             	sub    esp,0x4
c0011abf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ac2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011ac5:	50                   	push   eax
c0011ac6:	e8 4f c6 ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	89 c2                	mov    edx,eax
c0011ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad3:	89 10                	mov    DWORD PTR [eax],edx
c0011ad5:	83 ec 0c             	sub    esp,0xc
c0011ad8:	68 d9 26 02 c0       	push   0xc00226d9
c0011add:	e8 82 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011aea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af0:	05 64 01 00 00       	add    eax,0x164
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	50                   	push   eax
c0011af9:	e8 46 c6 ff ff       	call   c000e144 <GDT::flush()>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	68 dc 26 02 c0       	push   0xc00226dc
c0011b09:	e8 56 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b16:	c9                   	leave  
c0011b17:	c3                   	ret    

c0011b18 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b23:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b28:	75 08                	jne    c0011b32 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b2a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b30:	eb 38                	jmp    c0011b6a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b32:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b37:	75 17                	jne    c0011b50 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b47:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b4d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011b50:	89 c1                	mov    ecx,eax
c0011b52:	83 e1 fd             	and    ecx,0xfffffffd
c0011b55:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011b5b:	74 cd                	je     c0011b2a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b5d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b62:	83 e0 ef             	and    eax,0xffffffef
c0011b65:	83 f8 08             	cmp    eax,0x8
c0011b68:	76 c0                	jbe    c0011b2a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b6a:	31 c0                	xor    eax,eax
c0011b6c:	c3                   	ret    
c0011b6d:	90                   	nop

c0011b6e <ReservedFilename::isAtty()>:
c0011b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b72:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011b75:	31 c0                	xor    eax,eax
c0011b77:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011b7d:	74 09                	je     c0011b88 <ReservedFilename::isAtty()+0x1a>
c0011b7f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011b85:	0f 94 c0             	sete   al
c0011b88:	c3                   	ret    
c0011b89:	90                   	nop

c0011b8a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b99:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b9e:	75 08                	jne    c0011ba8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011ba0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011ba6:	eb 3d                	jmp    c0011be5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ba8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bad:	75 17                	jne    c0011bc6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011baf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bc3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011bc6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bcb:	75 04                	jne    c0011bd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011bcd:	89 0a                	mov    DWORD PTR [edx],ecx
c0011bcf:	eb 14                	jmp    c0011be5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011bd1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011bd6:	74 c8                	je     c0011ba0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011bd8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011bdd:	83 e0 ef             	and    eax,0xffffffef
c0011be0:	83 f8 08             	cmp    eax,0x8
c0011be3:	76 bb                	jbe    c0011ba0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011be5:	31 c0                	xor    eax,eax
c0011be7:	c3                   	ret    

c0011be8 <UnixFile::getFileDescriptor()>:
c0011be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bef:	c3                   	ret    

c0011bf0 <UnixFile::UnixFile(int)>:
c0011bf0:	53                   	push   ebx
c0011bf1:	83 ec 28             	sub    esp,0x28
c0011bf4:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0011bf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bfd:	89 10                	mov    DWORD PTR [eax],edx
c0011bff:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011c07:	0f 8f 90 01 00 00    	jg     c0011d9d <UnixFile::UnixFile(int)+0x1ad>
c0011c0d:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0011c12:	8d 50 01             	lea    edx,[eax+0x1]
c0011c15:	89 15 e0 45 02 c0    	mov    DWORD PTR ds:0xc00245e0,edx
c0011c1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c1f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c22:	83 ec 08             	sub    esp,0x8
c0011c25:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c29:	68 b8 be 02 c0       	push   0xc002beb8
c0011c2e:	e8 6b e8 00 00       	call   c002049e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c33:	83 c4 10             	add    esp,0x10
c0011c36:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011c3b:	83 f0 01             	xor    eax,0x1
c0011c3e:	0f b6 c0             	movzx  eax,al
c0011c41:	85 c0                	test   eax,eax
c0011c43:	0f 84 55 01 00 00    	je     c0011d9e <UnixFile::UnixFile(int)+0x1ae>
c0011c49:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011c50:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011c58:	83 ec 0c             	sub    esp,0xc
c0011c5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c5f:	e8 17 cd ff ff       	call   c000e97b <malloc>
c0011c64:	83 c4 10             	add    esp,0x10
c0011c67:	89 c3                	mov    ebx,eax
c0011c69:	83 ec 08             	sub    esp,0x8
c0011c6c:	68 03 ff ff 0f       	push   0xfffff03
c0011c71:	53                   	push   ebx
c0011c72:	e8 2d 01 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011c80:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011c88:	83 ec 0c             	sub    esp,0xc
c0011c8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c8f:	e8 e7 cc ff ff       	call   c000e97b <malloc>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	89 c3                	mov    ebx,eax
c0011c99:	83 ec 08             	sub    esp,0x8
c0011c9c:	68 01 ff ff 0f       	push   0xfffff01
c0011ca1:	53                   	push   ebx
c0011ca2:	e8 fd 00 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011cb0:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cbf:	e8 b7 cc ff ff       	call   c000e97b <malloc>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	89 c3                	mov    ebx,eax
c0011cc9:	83 ec 08             	sub    esp,0x8
c0011ccc:	68 00 ff ff 0f       	push   0xfffff00
c0011cd1:	53                   	push   ebx
c0011cd2:	e8 cd 00 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011ce0:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011cef:	e8 87 cc ff ff       	call   c000e97b <malloc>
c0011cf4:	83 c4 10             	add    esp,0x10
c0011cf7:	89 c3                	mov    ebx,eax
c0011cf9:	83 ec 08             	sub    esp,0x8
c0011cfc:	68 02 ff ff 0f       	push   0xfffff02
c0011d01:	53                   	push   ebx
c0011d02:	e8 9d 00 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011d10:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d18:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d1d:	7f 7f                	jg     c0011d9e <UnixFile::UnixFile(int)+0x1ae>
c0011d1f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d2e:	e8 48 cc ff ff       	call   c000e97b <malloc>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	89 c3                	mov    ebx,eax
c0011d38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d3c:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	50                   	push   eax
c0011d45:	53                   	push   ebx
c0011d46:	e8 59 00 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011d4b:	83 c4 10             	add    esp,0x10
c0011d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d52:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011d59:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011d61:	83 ec 0c             	sub    esp,0xc
c0011d64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d68:	e8 0e cc ff ff       	call   c000e97b <malloc>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	89 c3                	mov    ebx,eax
c0011d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d76:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011d7b:	83 ec 08             	sub    esp,0x8
c0011d7e:	50                   	push   eax
c0011d7f:	53                   	push   ebx
c0011d80:	e8 1f 00 00 00       	call   c0011da4 <ReservedFilename::ReservedFilename(int)>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d8c:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011d93:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011d98:	e9 7b ff ff ff       	jmp    c0011d18 <UnixFile::UnixFile(int)+0x128>
c0011d9d:	90                   	nop
c0011d9e:	83 c4 28             	add    esp,0x28
c0011da1:	5b                   	pop    ebx
c0011da2:	c3                   	ret    
c0011da3:	90                   	nop

c0011da4 <ReservedFilename::ReservedFilename(int)>:
c0011da4:	83 ec 0c             	sub    esp,0xc
c0011da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dab:	83 ec 08             	sub    esp,0x8
c0011dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011db2:	50                   	push   eax
c0011db3:	e8 38 fe ff ff       	call   c0011bf0 <UnixFile::UnixFile(int)>
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	ba 24 27 02 c0       	mov    edx,0xc0022724
c0011dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc4:	89 10                	mov    DWORD PTR [eax],edx
c0011dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011dce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011dd1:	90                   	nop
c0011dd2:	83 c4 0c             	add    esp,0xc
c0011dd5:	c3                   	ret    

c0011dd6 <UnixFile::~UnixFile()>:
c0011dd6:	83 ec 1c             	sub    esp,0x1c
c0011dd9:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0011dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011de2:	89 10                	mov    DWORD PTR [eax],edx
c0011de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011de8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011deb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011df0:	7f 76                	jg     c0011e68 <UnixFile::~UnixFile()+0x92>
c0011df2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011dfa:	83 ec 0c             	sub    esp,0xc
c0011dfd:	68 b8 be 02 c0       	push   0xc002beb8
c0011e02:	e8 6b e7 00 00       	call   c0020572 <LinkedList<UnixFile>::getFirstElement()>
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e0e:	83 ec 0c             	sub    esp,0xc
c0011e11:	68 b8 be 02 c0       	push   0xc002beb8
c0011e16:	e8 5f e7 00 00       	call   c002057a <LinkedList<UnixFile>::removeFirst()>
c0011e1b:	83 c4 10             	add    esp,0x10
c0011e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e22:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e26:	74 43                	je     c0011e6b <UnixFile::~UnixFile()+0x95>
c0011e28:	83 ec 08             	sub    esp,0x8
c0011e2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e2f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e34:	e8 65 e6 00 00       	call   c002049e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e40:	8d 50 01             	lea    edx,[eax+0x1]
c0011e43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e47:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011e4c:	0f 94 c0             	sete   al
c0011e4f:	0f b6 c0             	movzx  eax,al
c0011e52:	85 c0                	test   eax,eax
c0011e54:	74 a4                	je     c0011dfa <UnixFile::~UnixFile()+0x24>
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	68 e0 26 02 c0       	push   0xc00226e0
c0011e5e:	e8 5f ce ff ff       	call   c000ecc2 <KePanic(char const*)>
c0011e63:	83 c4 10             	add    esp,0x10
c0011e66:	eb 92                	jmp    c0011dfa <UnixFile::~UnixFile()+0x24>
c0011e68:	90                   	nop
c0011e69:	eb 01                	jmp    c0011e6c <UnixFile::~UnixFile()+0x96>
c0011e6b:	90                   	nop
c0011e6c:	90                   	nop
c0011e6d:	83 c4 1c             	add    esp,0x1c
c0011e70:	c3                   	ret    
c0011e71:	90                   	nop

c0011e72 <UnixFile::~UnixFile()>:
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	83 ec 0c             	sub    esp,0xc
c0011e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e7c:	e8 55 ff ff ff       	call   c0011dd6 <UnixFile::~UnixFile()>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	83 ec 08             	sub    esp,0x8
c0011e87:	6a 0c                	push   0xc
c0011e89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e8d:	e8 6e a8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0011e92:	83 c4 10             	add    esp,0x10
c0011e95:	83 c4 0c             	add    esp,0xc
c0011e98:	c3                   	ret    
c0011e99:	90                   	nop

c0011e9a <ReservedFilename::~ReservedFilename()>:
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	ba 24 27 02 c0       	mov    edx,0xc0022724
c0011ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea6:	89 10                	mov    DWORD PTR [eax],edx
c0011ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	50                   	push   eax
c0011eb0:	e8 21 ff ff ff       	call   c0011dd6 <UnixFile::~UnixFile()>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	90                   	nop
c0011eb9:	83 c4 0c             	add    esp,0xc
c0011ebc:	c3                   	ret    
c0011ebd:	90                   	nop

c0011ebe <ReservedFilename::~ReservedFilename()>:
c0011ebe:	83 ec 0c             	sub    esp,0xc
c0011ec1:	83 ec 0c             	sub    esp,0xc
c0011ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ec8:	e8 cd ff ff ff       	call   c0011e9a <ReservedFilename::~ReservedFilename()>
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	83 ec 08             	sub    esp,0x8
c0011ed3:	6a 0c                	push   0xc
c0011ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ed9:	e8 22 a8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0011ede:	83 c4 10             	add    esp,0x10
c0011ee1:	83 c4 0c             	add    esp,0xc
c0011ee4:	c3                   	ret    

c0011ee5 <KeGetFileFromDescriptor(int)>:
c0011ee5:	53                   	push   ebx
c0011ee6:	83 ec 08             	sub    esp,0x8
c0011ee9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011ef3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011ef9:	7f 2c                	jg     c0011f27 <KeGetFileFromDescriptor(int)+0x42>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	68 b8 be 02 c0       	push   0xc002beb8
c0011f03:	e8 6a e6 00 00       	call   c0020572 <LinkedList<UnixFile>::getFirstElement()>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	85 c0                	test   eax,eax
c0011f0d:	75 04                	jne    c0011f13 <KeGetFileFromDescriptor(int)+0x2e>
c0011f0f:	31 c0                	xor    eax,eax
c0011f11:	eb 6e                	jmp    c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f13:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011f16:	74 69                	je     c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f18:	52                   	push   edx
c0011f19:	52                   	push   edx
c0011f1a:	50                   	push   eax
c0011f1b:	68 b8 be 02 c0       	push   0xc002beb8
c0011f20:	e8 f7 e6 00 00       	call   c002061c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011f25:	eb e1                	jmp    c0011f08 <KeGetFileFromDescriptor(int)+0x23>
c0011f27:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011f2c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011f32:	74 4d                	je     c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f34:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011f39:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011f3f:	74 40                	je     c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f41:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011f46:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011f4c:	74 33                	je     c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f4e:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011f53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011f59:	74 26                	je     c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f5b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011f61:	83 f8 08             	cmp    eax,0x8
c0011f64:	77 09                	ja     c0011f6f <KeGetFileFromDescriptor(int)+0x8a>
c0011f66:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011f6d:	eb 12                	jmp    c0011f81 <KeGetFileFromDescriptor(int)+0x9c>
c0011f6f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011f75:	83 fb 08             	cmp    ebx,0x8
c0011f78:	77 95                	ja     c0011f0f <KeGetFileFromDescriptor(int)+0x2a>
c0011f7a:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011f81:	83 c4 08             	add    esp,0x8
c0011f84:	5b                   	pop    ebx
c0011f85:	c3                   	ret    

c0011f86 <__static_initialization_and_destruction_0(int, int)>:
c0011f86:	83 ec 0c             	sub    esp,0xc
c0011f89:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011f8e:	75 34                	jne    c0011fc4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f90:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011f98:	75 2a                	jne    c0011fc4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 b8 be 02 c0       	push   0xc002beb8
c0011fa2:	e8 b5 e4 00 00       	call   c002045c <LinkedList<UnixFile>::LinkedList()>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	83 ec 04             	sub    esp,0x4
c0011fad:	68 4c 3e 02 c0       	push   0xc0023e4c
c0011fb2:	68 b8 be 02 c0       	push   0xc002beb8
c0011fb7:	68 5a 04 02 c0       	push   0xc002045a
c0011fbc:	e8 ef a6 ff ff       	call   c000c6b0 <__cxa_atexit>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	90                   	nop
c0011fc5:	83 c4 0c             	add    esp,0xc
c0011fc8:	c3                   	ret    

c0011fc9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011fc9:	83 ec 0c             	sub    esp,0xc
c0011fcc:	83 ec 08             	sub    esp,0x8
c0011fcf:	68 ff ff 00 00       	push   0xffff
c0011fd4:	6a 01                	push   0x1
c0011fd6:	e8 ab ff ff ff       	call   c0011f86 <__static_initialization_and_destruction_0(int, int)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	83 c4 0c             	add    esp,0xc
c0011fe1:	c3                   	ret    

c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011fe2:	53                   	push   ebx
c0011fe3:	8b 15 e8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e8
c0011fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ff1:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011ff7:	89 d8                	mov    eax,ebx
c0011ff9:	d1 e8                	shr    eax,1
c0011ffb:	01 d0                	add    eax,edx
c0011ffd:	80 e3 01             	and    bl,0x1
c0012000:	8a 10                	mov    dl,BYTE PTR [eax]
c0012002:	75 09                	jne    c001200d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012004:	83 e2 f0             	and    edx,0xfffffff0
c0012007:	09 ca                	or     edx,ecx
c0012009:	88 10                	mov    BYTE PTR [eax],dl
c001200b:	5b                   	pop    ebx
c001200c:	c3                   	ret    
c001200d:	83 e2 0f             	and    edx,0xf
c0012010:	0f b6 c9             	movzx  ecx,cl
c0012013:	c1 e1 04             	shl    ecx,0x4
c0012016:	09 ca                	or     edx,ecx
c0012018:	88 10                	mov    BYTE PTR [eax],dl
c001201a:	5b                   	pop    ebx
c001201b:	c3                   	ret    

c001201c <Virt::getPageState(unsigned long)>:
c001201c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012020:	8b 0d e8 45 02 c0    	mov    ecx,DWORD PTR ds:0xc00245e8
c0012026:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001202c:	89 d0                	mov    eax,edx
c001202e:	d1 e8                	shr    eax,1
c0012030:	80 e2 01             	and    dl,0x1
c0012033:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012036:	74 03                	je     c001203b <Virt::getPageState(unsigned long)+0x1f>
c0012038:	c1 e8 04             	shr    eax,0x4
c001203b:	83 e0 0f             	and    eax,0xf
c001203e:	c3                   	ret    

c001203f <Virt::allocateKernelVirtualPages(int)>:
c001203f:	55                   	push   ebp
c0012040:	31 ed                	xor    ebp,ebp
c0012042:	57                   	push   edi
c0012043:	31 ff                	xor    edi,edi
c0012045:	56                   	push   esi
c0012046:	53                   	push   ebx
c0012047:	31 db                	xor    ebx,ebx
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	8b 35 e4 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245e4
c0012052:	56                   	push   esi
c0012053:	e8 c4 ff ff ff       	call   c001201c <Virt::getPageState(unsigned long)>
c0012058:	5a                   	pop    edx
c0012059:	84 c0                	test   al,al
c001205b:	75 41                	jne    c001209e <Virt::allocateKernelVirtualPages(int)+0x5f>
c001205d:	85 db                	test   ebx,ebx
c001205f:	75 02                	jne    c0012063 <Virt::allocateKernelVirtualPages(int)+0x24>
c0012061:	89 f5                	mov    ebp,esi
c0012063:	83 c3 01             	add    ebx,0x1
c0012066:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001206a:	74 5f                	je     c00120cb <Virt::allocateKernelVirtualPages(int)+0x8c>
c001206c:	83 c6 01             	add    esi,0x1
c001206f:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012075:	76 34                	jbe    c00120ab <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012077:	c7 05 e4 45 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00245e4,0xc8000
c0012081:	f7 c7 01 00 00 00    	test   edi,0x1
c0012087:	75 2a                	jne    c00120b3 <Virt::allocateKernelVirtualPages(int)+0x74>
c0012089:	be 00 80 0c 00       	mov    esi,0xc8000
c001208e:	bf 01 00 00 00       	mov    edi,0x1
c0012093:	56                   	push   esi
c0012094:	e8 83 ff ff ff       	call   c001201c <Virt::getPageState(unsigned long)>
c0012099:	5a                   	pop    edx
c001209a:	84 c0                	test   al,al
c001209c:	74 bf                	je     c001205d <Virt::allocateKernelVirtualPages(int)+0x1e>
c001209e:	31 db                	xor    ebx,ebx
c00120a0:	83 c6 01             	add    esi,0x1
c00120a3:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00120a9:	77 cc                	ja     c0012077 <Virt::allocateKernelVirtualPages(int)+0x38>
c00120ab:	89 35 e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,esi
c00120b1:	eb 9f                	jmp    c0012052 <Virt::allocateKernelVirtualPages(int)+0x13>
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	68 38 27 02 c0       	push   0xc0022738
c00120bb:	e8 02 cc ff ff       	call   c000ecc2 <KePanic(char const*)>
c00120c0:	8b 35 e4 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245e4
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	eb 87                	jmp    c0012052 <Virt::allocateKernelVirtualPages(int)+0x13>
c00120cb:	89 2d e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,ebp
c00120d1:	83 fb 01             	cmp    ebx,0x1
c00120d4:	74 6f                	je     c0012145 <Virt::allocateKernelVirtualPages(int)+0x106>
c00120d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120da:	85 c9                	test   ecx,ecx
c00120dc:	74 49                	je     c0012127 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00120de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120e2:	89 e8                	mov    eax,ebp
c00120e4:	31 db                	xor    ebx,ebx
c00120e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00120e9:	eb 18                	jmp    c0012103 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00120eb:	6a 01                	push   0x1
c00120ed:	83 c3 01             	add    ebx,0x1
c00120f0:	50                   	push   eax
c00120f1:	e8 ec fe ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f6:	58                   	pop    eax
c00120f7:	5a                   	pop    edx
c00120f8:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00120fc:	74 29                	je     c0012127 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00120fe:	a1 e4 45 02 c0       	mov    eax,ds:0xc00245e4
c0012103:	8d 50 01             	lea    edx,[eax+0x1]
c0012106:	85 db                	test   ebx,ebx
c0012108:	89 15 e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,edx
c001210e:	74 24                	je     c0012134 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012110:	39 df                	cmp    edi,ebx
c0012112:	75 d7                	jne    c00120eb <Virt::allocateKernelVirtualPages(int)+0xac>
c0012114:	6a 03                	push   0x3
c0012116:	83 c3 01             	add    ebx,0x1
c0012119:	50                   	push   eax
c001211a:	e8 c3 fe ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001211f:	59                   	pop    ecx
c0012120:	5e                   	pop    esi
c0012121:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012125:	75 d7                	jne    c00120fe <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012127:	83 c4 0c             	add    esp,0xc
c001212a:	89 e8                	mov    eax,ebp
c001212c:	5b                   	pop    ebx
c001212d:	c1 e0 0c             	shl    eax,0xc
c0012130:	5e                   	pop    esi
c0012131:	5f                   	pop    edi
c0012132:	5d                   	pop    ebp
c0012133:	c3                   	ret    
c0012134:	6a 02                	push   0x2
c0012136:	bb 01 00 00 00       	mov    ebx,0x1
c001213b:	50                   	push   eax
c001213c:	e8 a1 fe ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012141:	58                   	pop    eax
c0012142:	5a                   	pop    edx
c0012143:	eb b9                	jmp    c00120fe <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012145:	6a 04                	push   0x4
c0012147:	8d 45 01             	lea    eax,[ebp+0x1]
c001214a:	55                   	push   ebp
c001214b:	a3 e4 45 02 c0       	mov    ds:0xc00245e4,eax
c0012150:	e8 8d fe ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012155:	5b                   	pop    ebx
c0012156:	89 e8                	mov    eax,ebp
c0012158:	5e                   	pop    esi
c0012159:	c1 e0 0c             	shl    eax,0xc
c001215c:	83 c4 0c             	add    esp,0xc
c001215f:	5b                   	pop    ebx
c0012160:	5e                   	pop    esi
c0012161:	5f                   	pop    edi
c0012162:	5d                   	pop    ebp
c0012163:	c3                   	ret    

c0012164 <Virt::freeSwapfilePage(unsigned long)>:
c0012164:	53                   	push   ebx
c0012165:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c001216b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001216f:	b8 01 00 00 00       	mov    eax,0x1
c0012174:	89 cb                	mov    ebx,ecx
c0012176:	d3 e0                	shl    eax,cl
c0012178:	c1 eb 05             	shr    ebx,0x5
c001217b:	f7 d0                	not    eax
c001217d:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012180:	21 c1                	and    ecx,eax
c0012182:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012185:	5b                   	pop    ebx
c0012186:	c3                   	ret    

c0012187 <Virt::swapIDToSector(unsigned long)>:
c0012187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001218b:	8b 15 ec 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245ec
c0012191:	8b 0d f4 45 02 c0    	mov    ecx,DWORD PTR ds:0xc00245f4
c0012197:	0f af c2             	imul   eax,edx
c001219a:	01 c8                	add    eax,ecx
c001219c:	c3                   	ret    

c001219d <Virt::allocateSwapfilePage()>:
c001219d:	55                   	push   ebp
c001219e:	31 d2                	xor    edx,edx
c00121a0:	57                   	push   edi
c00121a1:	56                   	push   esi
c00121a2:	53                   	push   ebx
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	8b 0d ec 45 02 c0    	mov    ecx,DWORD PTR ds:0xc00245ec
c00121ac:	a1 f0 45 02 c0       	mov    eax,ds:0xc00245f0
c00121b1:	f7 f1                	div    ecx
c00121b3:	39 0d f0 45 02 c0    	cmp    DWORD PTR ds:0xc00245f0,ecx
c00121b9:	72 2f                	jb     c00121ea <Virt::allocateSwapfilePage()+0x4d>
c00121bb:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00121c1:	8b 16                	mov    edx,DWORD PTR [esi]
c00121c3:	f6 c2 01             	test   dl,0x1
c00121c6:	74 3e                	je     c0012206 <Virt::allocateSwapfilePage()+0x69>
c00121c8:	31 c9                	xor    ecx,ecx
c00121ca:	bf 01 00 00 00       	mov    edi,0x1
c00121cf:	eb 12                	jmp    c00121e3 <Virt::allocateSwapfilePage()+0x46>
c00121d1:	89 fd                	mov    ebp,edi
c00121d3:	89 ca                	mov    edx,ecx
c00121d5:	d3 e5                	shl    ebp,cl
c00121d7:	c1 ea 05             	shr    edx,0x5
c00121da:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00121dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121df:	85 ea                	test   edx,ebp
c00121e1:	74 2c                	je     c001220f <Virt::allocateSwapfilePage()+0x72>
c00121e3:	83 c1 01             	add    ecx,0x1
c00121e6:	39 c8                	cmp    eax,ecx
c00121e8:	77 e7                	ja     c00121d1 <Virt::allocateSwapfilePage()+0x34>
c00121ea:	83 ec 0c             	sub    esp,0xc
c00121ed:	68 a8 29 02 c0       	push   0xc00229a8
c00121f2:	e8 cb ca ff ff       	call   c000ecc2 <KePanic(char const*)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	31 c9                	xor    ecx,ecx
c00121fc:	83 c4 0c             	add    esp,0xc
c00121ff:	89 c8                	mov    eax,ecx
c0012201:	5b                   	pop    ebx
c0012202:	5e                   	pop    esi
c0012203:	5f                   	pop    edi
c0012204:	5d                   	pop    ebp
c0012205:	c3                   	ret    
c0012206:	89 f3                	mov    ebx,esi
c0012208:	bd 01 00 00 00       	mov    ebp,0x1
c001220d:	31 c9                	xor    ecx,ecx
c001220f:	09 ea                	or     edx,ebp
c0012211:	89 c8                	mov    eax,ecx
c0012213:	89 13                	mov    DWORD PTR [ebx],edx
c0012215:	83 c4 0c             	add    esp,0xc
c0012218:	5b                   	pop    ebx
c0012219:	5e                   	pop    esi
c001221a:	5f                   	pop    edi
c001221b:	5d                   	pop    ebp
c001221c:	c3                   	ret    

c001221d <Virt::virtualMemorySetup()>:
c001221d:	53                   	push   ebx
c001221e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012223:	6a 0f                	push   0xf
c0012225:	53                   	push   ebx
c0012226:	83 c3 01             	add    ebx,0x1
c0012229:	e8 b4 fd ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001222e:	58                   	pop    eax
c001222f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012235:	5a                   	pop    edx
c0012236:	75 eb                	jne    c0012223 <Virt::virtualMemorySetup()+0x6>
c0012238:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001223d:	6a 00                	push   0x0
c001223f:	53                   	push   ebx
c0012240:	83 c3 01             	add    ebx,0x1
c0012243:	e8 9a fd ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012248:	59                   	pop    ecx
c0012249:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001224f:	58                   	pop    eax
c0012250:	75 eb                	jne    c001223d <Virt::virtualMemorySetup()+0x20>
c0012252:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012257:	6a 0f                	push   0xf
c0012259:	53                   	push   ebx
c001225a:	83 c3 01             	add    ebx,0x1
c001225d:	e8 80 fd ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012262:	58                   	pop    eax
c0012263:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012269:	5a                   	pop    edx
c001226a:	75 eb                	jne    c0012257 <Virt::virtualMemorySetup()+0x3a>
c001226c:	5b                   	pop    ebx
c001226d:	c3                   	ret    

c001226e <Virt::setupPageSwapping(int)>:
c001226e:	53                   	push   ebx
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012276:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001227b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012281:	8b 10                	mov    edx,DWORD PTR [eax]
c0012283:	53                   	push   ebx
c0012284:	c1 e3 0b             	shl    ebx,0xb
c0012287:	68 bf 29 02 c0       	push   0xc00229bf
c001228c:	50                   	push   eax
c001228d:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012290:	89 1d f0 45 02 c0    	mov    DWORD PTR ds:0xc00245f0,ebx
c0012296:	c6 05 f8 45 02 c0 43 	mov    BYTE PTR ds:0xc00245f8,0x43
c001229d:	c1 eb 08             	shr    ebx,0x8
c00122a0:	a3 f4 45 02 c0       	mov    ds:0xc00245f4,eax
c00122a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122a8:	c7 05 ec 45 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00245ec,0x8
c00122b2:	e8 c4 c6 ff ff       	call   c000e97b <malloc>
c00122b7:	83 c4 0c             	add    esp,0xc
c00122ba:	89 c1                	mov    ecx,eax
c00122bc:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00122c1:	31 d2                	xor    edx,edx
c00122c3:	a1 f0 45 02 c0       	mov    eax,ds:0xc00245f0
c00122c8:	f7 35 ec 45 02 c0    	div    DWORD PTR ds:0xc00245ec
c00122ce:	c1 e8 05             	shr    eax,0x5
c00122d1:	50                   	push   eax
c00122d2:	6a 00                	push   0x0
c00122d4:	51                   	push   ecx
c00122d5:	e8 16 e2 fe ff       	call   c00004f0 <memset>
c00122da:	83 c4 18             	add    esp,0x18
c00122dd:	5b                   	pop    ebx
c00122de:	c3                   	ret    
c00122df:	90                   	nop

c00122e0 <VAS::setCPUSpecific(unsigned long)>:
c00122e0:	c3                   	ret    
c00122e1:	90                   	nop

c00122e2 <VAS::VAS(VAS*)>:
c00122e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00122f8:	90                   	nop
c00122f9:	c3                   	ret    

c00122fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00122fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122fe:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012303:	89 c2                	mov    edx,eax
c0012305:	c1 e8 0a             	shr    eax,0xa
c0012308:	c1 ea 16             	shr    edx,0x16
c001230b:	83 f9 01             	cmp    ecx,0x1
c001230e:	19 c9                	sbb    ecx,ecx
c0012310:	c1 e2 0c             	shl    edx,0xc
c0012313:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012319:	25 fc 0f 00 00       	and    eax,0xffc
c001231e:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012325:	01 d0                	add    eax,edx
c0012327:	c3                   	ret    

c0012328 <VAS::getPageTableEntry(unsigned long)>:
c0012328:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001232c:	89 ca                	mov    edx,ecx
c001232e:	c1 e9 0a             	shr    ecx,0xa
c0012331:	c1 ea 16             	shr    edx,0x16
c0012334:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001233a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012340:	c1 e0 0c             	shl    eax,0xc
c0012343:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012346:	c3                   	ret    

c0012347 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012347:	55                   	push   ebp
c0012348:	57                   	push   edi
c0012349:	bf 01 00 00 00       	mov    edi,0x1
c001234e:	56                   	push   esi
c001234f:	53                   	push   ebx
c0012350:	83 ec 1c             	sub    esp,0x1c
c0012353:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012357:	c1 ee 0c             	shr    esi,0xc
c001235a:	eb 48                	jmp    c00123a4 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001235c:	83 ec 08             	sub    esp,0x8
c001235f:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0012364:	55                   	push   ebp
c0012365:	50                   	push   eax
c0012366:	e8 bd ff ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012370:	f6 c6 04             	test   dh,0x4
c0012373:	75 70                	jne    c00123e5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001237b:	83 fb 04             	cmp    ebx,0x4
c001237e:	0f 84 8a 00 00 00    	je     c001240e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012384:	83 fb 02             	cmp    ebx,0x2
c0012387:	0f 84 9a 00 00 00    	je     c0012427 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001238d:	83 fb 03             	cmp    ebx,0x3
c0012390:	0f 84 be 00 00 00    	je     c0012454 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012396:	83 fb 01             	cmp    ebx,0x1
c0012399:	0f 84 a2 00 00 00    	je     c0012441 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001239f:	83 c6 01             	add    esi,0x1
c00123a2:	31 ff                	xor    edi,edi
c00123a4:	56                   	push   esi
c00123a5:	89 f5                	mov    ebp,esi
c00123a7:	e8 70 fc ff ff       	call   c001201c <Virt::getPageState(unsigned long)>
c00123ac:	c1 e5 0c             	shl    ebp,0xc
c00123af:	0f b6 d8             	movzx  ebx,al
c00123b2:	5a                   	pop    edx
c00123b3:	85 db                	test   ebx,ebx
c00123b5:	75 a5                	jne    c001235c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00123b7:	83 ec 0c             	sub    esp,0xc
c00123ba:	68 d6 29 02 c0       	push   0xc00229d6
c00123bf:	e8 fe c8 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00123c4:	5a                   	pop    edx
c00123c5:	59                   	pop    ecx
c00123c6:	55                   	push   ebp
c00123c7:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00123cd:	55                   	push   ebp
c00123ce:	e8 55 ff ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00123d8:	f6 c6 04             	test   dh,0x4
c00123db:	75 08                	jne    c00123e5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00123dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123e3:	eb ba                	jmp    c001239f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	52                   	push   edx
c00123f3:	e8 55 ca ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	83 fb 04             	cmp    ebx,0x4
c00123fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012402:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012408:	0f 85 76 ff ff ff    	jne    c0012384 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001240e:	83 e7 01             	and    edi,0x1
c0012411:	75 46                	jne    c0012459 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012413:	c7 44 24 30 58 27 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022758
c001241b:	83 c4 1c             	add    esp,0x1c
c001241e:	5b                   	pop    ebx
c001241f:	5e                   	pop    esi
c0012420:	5f                   	pop    edi
c0012421:	5d                   	pop    ebp
c0012422:	e9 9b c8 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0012427:	83 e7 01             	and    edi,0x1
c001242a:	75 15                	jne    c0012441 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	68 f2 29 02 c0       	push   0xc00229f2
c0012434:	e8 89 c8 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0012439:	83 c4 10             	add    esp,0x10
c001243c:	e9 5e ff ff ff       	jmp    c001239f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012441:	83 ec 08             	sub    esp,0x8
c0012444:	6a 00                	push   0x0
c0012446:	56                   	push   esi
c0012447:	e8 96 fb ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001244c:	83 c4 10             	add    esp,0x10
c001244f:	e9 4b ff ff ff       	jmp    c001239f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012454:	83 e7 01             	and    edi,0x1
c0012457:	75 16                	jne    c001246f <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012459:	83 ec 08             	sub    esp,0x8
c001245c:	6a 00                	push   0x0
c001245e:	56                   	push   esi
c001245f:	e8 7e fb ff ff       	call   c0011fe2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	83 c4 1c             	add    esp,0x1c
c001246a:	5b                   	pop    ebx
c001246b:	5e                   	pop    esi
c001246c:	5f                   	pop    edi
c001246d:	5d                   	pop    ebp
c001246e:	c3                   	ret    
c001246f:	c7 44 24 30 0e 2a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022a0e
c0012477:	83 c4 1c             	add    esp,0x1c
c001247a:	5b                   	pop    ebx
c001247b:	5e                   	pop    esi
c001247c:	5f                   	pop    edi
c001247d:	5d                   	pop    ebp
c001247e:	e9 3f c8 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0012483:	90                   	nop

c0012484 <VAS::freeAllocatedPages(unsigned long)>:
c0012484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001248c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012490:	74 09                	je     c001249b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012492:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012496:	e9 ac fe ff ff       	jmp    c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c001249b:	c7 44 24 04 7c 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc002277c
c00124a3:	e9 bc 4a ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00124a8 <VAS::virtualToPhysical(unsigned long)>:
c00124a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124ac:	50                   	push   eax
c00124ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124b1:	52                   	push   edx
c00124b2:	e8 71 fe ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c00124b7:	59                   	pop    ecx
c00124b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00124ba:	5a                   	pop    edx
c00124bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124c0:	c3                   	ret    
c00124c1:	90                   	nop

c00124c2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00124c2:	55                   	push   ebp
c00124c3:	57                   	push   edi
c00124c4:	56                   	push   esi
c00124c5:	53                   	push   ebx
c00124c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00124ca:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00124ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00124d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00124d6:	85 db                	test   ebx,ebx
c00124d8:	7e 24                	jle    c00124fe <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00124da:	c1 e3 0c             	shl    ebx,0xc
c00124dd:	01 f3                	add    ebx,esi
c00124df:	56                   	push   esi
c00124e0:	81 c6 00 10 00 00    	add    esi,0x1000
c00124e6:	55                   	push   ebp
c00124e7:	e8 3c fe ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c00124ec:	5a                   	pop    edx
c00124ed:	59                   	pop    ecx
c00124ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00124f4:	21 f9                	and    ecx,edi
c00124f6:	09 d1                	or     ecx,edx
c00124f8:	39 f3                	cmp    ebx,esi
c00124fa:	89 08                	mov    DWORD PTR [eax],ecx
c00124fc:	75 e1                	jne    c00124df <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00124fe:	5b                   	pop    ebx
c00124ff:	5e                   	pop    esi
c0012500:	5f                   	pop    edi
c0012501:	5d                   	pop    ebp
c0012502:	c3                   	ret    
c0012503:	90                   	nop

c0012504 <VAS::VAS()>:
c0012504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012508:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001250f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012513:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001251a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251e:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c0012523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012527:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001252b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012536:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001253d:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0012542:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012547:	29 c2                	sub    edx,eax
c0012549:	89 d0                	mov    eax,edx
c001254b:	05 ff 0f 00 00       	add    eax,0xfff
c0012550:	c1 e8 0c             	shr    eax,0xc
c0012553:	89 c2                	mov    edx,eax
c0012555:	b8 00 50 02 c0       	mov    eax,0xc0025000
c001255a:	6a 04                	push   0x4
c001255c:	6a ff                	push   0xffffffff
c001255e:	52                   	push   edx
c001255f:	50                   	push   eax
c0012560:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012564:	e8 59 ff ff ff       	call   c00124c2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012569:	83 c4 14             	add    esp,0x14
c001256c:	90                   	nop
c001256d:	c3                   	ret    

c001256e <VAS::setToWriteCombining(unsigned long, int)>:
c001256e:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0012573:	50                   	push   eax
c0012574:	6a ff                	push   0xffffffff
c0012576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001257a:	52                   	push   edx
c001257b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001257f:	51                   	push   ecx
c0012580:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012584:	50                   	push   eax
c0012585:	e8 38 ff ff ff       	call   c00124c2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001258a:	83 c4 14             	add    esp,0x14
c001258d:	c3                   	ret    

c001258e <VAS::mapOtherVASIn(bool, VAS*)>:
c001258e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012592:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012599:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001259c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00125a1:	83 f8 01             	cmp    eax,0x1
c00125a4:	19 c0                	sbb    eax,eax
c00125a6:	83 ca 03             	or     edx,0x3
c00125a9:	83 e0 fc             	and    eax,0xfffffffc
c00125ac:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00125b3:	0f 20 d8             	mov    eax,cr3
c00125b6:	0f 22 d8             	mov    cr3,eax
c00125b9:	c3                   	ret    

c00125ba <VAS::~VAS()>:
c00125ba:	83 ec 2c             	sub    esp,0x2c
c00125bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00125c5:	fa                   	cli    
c00125c6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00125cb:	83 c0 01             	add    eax,0x1
c00125ce:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00125d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00125d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00125da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125dd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00125e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00125e7:	6a 01                	push   0x1
c00125e9:	50                   	push   eax
c00125ea:	e8 9f ff ff ff       	call   c001258e <VAS::mapOtherVASIn(bool, VAS*)>
c00125ef:	83 c4 0c             	add    esp,0xc
c00125f2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125fa:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012602:	0f 8f d8 00 00 00    	jg     c00126e0 <VAS::~VAS()+0x126>
c0012608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001260c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001260f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012613:	c1 e2 02             	shl    edx,0x2
c0012616:	01 d0                	add    eax,edx
c0012618:	8b 00                	mov    eax,DWORD PTR [eax]
c001261a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001261e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012622:	83 e0 01             	and    eax,0x1
c0012625:	0f 84 ab 00 00 00    	je     c00126d6 <VAS::~VAS()+0x11c>
c001262b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012633:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001263b:	7f 74                	jg     c00126b1 <VAS::~VAS()+0xf7>
c001263d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012641:	c1 e0 0a             	shl    eax,0xa
c0012644:	89 c2                	mov    edx,eax
c0012646:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001264a:	01 d0                	add    eax,edx
c001264c:	c1 e0 0c             	shl    eax,0xc
c001264f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012653:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012658:	8b 00                	mov    eax,DWORD PTR [eax]
c001265a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001265d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012663:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012667:	6a 01                	push   0x1
c0012669:	50                   	push   eax
c001266a:	e8 8b fc ff ff       	call   c00122fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001266f:	83 c4 0c             	add    esp,0xc
c0012672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001267a:	8b 00                	mov    eax,DWORD PTR [eax]
c001267c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012684:	25 01 04 00 00       	and    eax,0x401
c0012689:	3d 01 04 00 00       	cmp    eax,0x401
c001268e:	75 1a                	jne    c00126aa <VAS::~VAS()+0xf0>
c0012690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012694:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	50                   	push   eax
c001269d:	e8 ab c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00126a2:	83 c4 10             	add    esp,0x10
c00126a5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126aa:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00126af:	eb 82                	jmp    c0012633 <VAS::~VAS()+0x79>
c00126b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b5:	25 00 04 00 00       	and    eax,0x400
c00126ba:	74 1a                	je     c00126d6 <VAS::~VAS()+0x11c>
c00126bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126c5:	83 ec 0c             	sub    esp,0xc
c00126c8:	50                   	push   eax
c00126c9:	e8 7f c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126d6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00126db:	e9 1a ff ff ff       	jmp    c00125fa <VAS::~VAS()+0x40>
c00126e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126e7:	83 ec 0c             	sub    esp,0xc
c00126ea:	50                   	push   eax
c00126eb:	e8 57 fc ff ff       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	50                   	push   eax
c00126fe:	e8 4a c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001270b:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012713:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012718:	85 c0                	test   eax,eax
c001271a:	75 01                	jne    c001271d <VAS::~VAS()+0x163>
c001271c:	fb                   	sti    
c001271d:	90                   	nop
c001271e:	83 c4 2c             	add    esp,0x2c
c0012721:	c3                   	ret    

c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012722:	55                   	push   ebp
c0012723:	57                   	push   edi
c0012724:	56                   	push   esi
c0012725:	53                   	push   ebx
c0012726:	83 ec 1c             	sub    esp,0x1c
c0012729:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001272d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012731:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012737:	77 08                	ja     c0012741 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012739:	0f 20 d8             	mov    eax,cr3
c001273c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001273f:	75 49                	jne    c001278a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0012741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012745:	09 d8                	or     eax,ebx
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 59                	jne    c00127a7 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001274e:	89 de                	mov    esi,ebx
c0012750:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012753:	c1 ee 16             	shr    esi,0x16
c0012756:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001275d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012761:	74 56                	je     c00127b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0012763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012767:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001276b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012771:	c1 eb 0a             	shr    ebx,0xa
c0012774:	c1 e6 0c             	shl    esi,0xc
c0012777:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001277d:	09 d0                	or     eax,edx
c001277f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012782:	83 c4 1c             	add    esp,0x1c
c0012785:	5b                   	pop    ebx
c0012786:	5e                   	pop    esi
c0012787:	5f                   	pop    edi
c0012788:	5d                   	pop    ebp
c0012789:	c3                   	ret    
c001278a:	83 ec 0c             	sub    esp,0xc
c001278d:	68 a0 27 02 c0       	push   0xc00227a0
c0012792:	e8 cd 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012797:	83 c4 10             	add    esp,0x10
c001279a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001279e:	09 d8                	or     eax,ebx
c00127a0:	a9 ff 0f 00 00       	test   eax,0xfff
c00127a5:	74 a7                	je     c001274e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00127a7:	83 ec 0c             	sub    esp,0xc
c00127aa:	68 08 28 02 c0       	push   0xc0022808
c00127af:	e8 0e c5 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	eb 95                	jmp    c001274e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00127b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127bd:	e8 f4 c6 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 c5                	mov    ebp,eax
c00127c7:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00127cd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127d1:	6a 01                	push   0x1
c00127d3:	e8 67 f8 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c00127d8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127df:	6a 01                	push   0x1
c00127e1:	50                   	push   eax
c00127e2:	55                   	push   ebp
c00127e3:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127ed:	51                   	push   ecx
c00127ee:	e8 19 01 00 00       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127f3:	83 c4 1c             	add    esp,0x1c
c00127f6:	68 00 10 00 00       	push   0x1000
c00127fb:	6a 00                	push   0x0
c00127fd:	50                   	push   eax
c00127fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012802:	e8 e9 dc fe ff       	call   c00004f0 <memset>
c0012807:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001280b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280e:	e8 34 fb ff ff       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c0012813:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012817:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012820:	e9 3e ff ff ff       	jmp    c0012763 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012825:	90                   	nop

c0012826 <VAS::allocatePages(int, int)>:
c0012826:	55                   	push   ebp
c0012827:	57                   	push   edi
c0012828:	56                   	push   esi
c0012829:	53                   	push   ebx
c001282a:	83 ec 1c             	sub    esp,0x1c
c001282d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012831:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012835:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012839:	75 71                	jne    c00128ac <VAS::allocatePages(int, int)+0x86>
c001283b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001283e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012842:	85 c0                	test   eax,eax
c0012844:	74 4d                	je     c0012893 <VAS::allocatePages(int, int)+0x6d>
c0012846:	89 dd                	mov    ebp,ebx
c0012848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001284c:	c1 e5 0c             	shl    ebp,0xc
c001284f:	01 c5                	add    ebp,eax
c0012851:	85 db                	test   ebx,ebx
c0012853:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012856:	7e 29                	jle    c0012881 <VAS::allocatePages(int, int)+0x5b>
c0012858:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001285c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012860:	81 cf 00 04 00 00    	or     edi,0x400
c0012866:	e8 4b c6 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001286b:	57                   	push   edi
c001286c:	53                   	push   ebx
c001286d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012873:	50                   	push   eax
c0012874:	56                   	push   esi
c0012875:	e8 a8 fe ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	39 dd                	cmp    ebp,ebx
c001287f:	75 e5                	jne    c0012866 <VAS::allocatePages(int, int)+0x40>
c0012881:	0f 20 d8             	mov    eax,cr3
c0012884:	0f 22 d8             	mov    cr3,eax
c0012887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001288b:	83 c4 1c             	add    esp,0x1c
c001288e:	5b                   	pop    ebx
c001288f:	5e                   	pop    esi
c0012890:	5f                   	pop    edi
c0012891:	5d                   	pop    ebp
c0012892:	c3                   	ret    
c0012893:	83 ec 0c             	sub    esp,0xc
c0012896:	68 2c 28 02 c0       	push   0xc002282c
c001289b:	e8 22 c4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00128a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00128a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128a7:	83 c4 10             	add    esp,0x10
c00128aa:	eb 9a                	jmp    c0012846 <VAS::allocatePages(int, int)+0x20>
c00128ac:	83 ec 0c             	sub    esp,0xc
c00128af:	53                   	push   ebx
c00128b0:	e8 8a f7 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c00128b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00128c1:	77 37                	ja     c00128fa <VAS::allocatePages(int, int)+0xd4>
c00128c3:	85 db                	test   ebx,ebx
c00128c5:	7e ba                	jle    c0012881 <VAS::allocatePages(int, int)+0x5b>
c00128c7:	c1 e3 0c             	shl    ebx,0xc
c00128ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128ce:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128d2:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00128d5:	81 cf 00 04 00 00    	or     edi,0x400
c00128db:	89 c3                	mov    ebx,eax
c00128dd:	e8 d4 c5 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00128e2:	57                   	push   edi
c00128e3:	53                   	push   ebx
c00128e4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128ea:	50                   	push   eax
c00128eb:	56                   	push   esi
c00128ec:	e8 31 fe ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	39 dd                	cmp    ebp,ebx
c00128f6:	75 e5                	jne    c00128dd <VAS::allocatePages(int, int)+0xb7>
c00128f8:	eb 87                	jmp    c0012881 <VAS::allocatePages(int, int)+0x5b>
c00128fa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00128fe:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012903:	09 c2                	or     edx,eax
c0012905:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0012909:	eb b8                	jmp    c00128c3 <VAS::allocatePages(int, int)+0x9d>
c001290b:	90                   	nop

c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001290c:	55                   	push   ebp
c001290d:	57                   	push   edi
c001290e:	56                   	push   esi
c001290f:	53                   	push   ebx
c0012910:	83 ec 0c             	sub    esp,0xc
c0012913:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012917:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001291b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001291f:	85 db                	test   ebx,ebx
c0012921:	7e 2f                	jle    c0012952 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0012923:	c1 e3 0c             	shl    ebx,0xc
c0012926:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001292a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001292e:	01 d3                	add    ebx,edx
c0012930:	55                   	push   ebp
c0012931:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012935:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012939:	29 c2                	sub    edx,eax
c001293b:	01 f2                	add    edx,esi
c001293d:	52                   	push   edx
c001293e:	56                   	push   esi
c001293f:	81 c6 00 10 00 00    	add    esi,0x1000
c0012945:	57                   	push   edi
c0012946:	e8 d7 fd ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001294b:	83 c4 10             	add    esp,0x10
c001294e:	39 de                	cmp    esi,ebx
c0012950:	75 de                	jne    c0012930 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0012952:	0f 20 d8             	mov    eax,cr3
c0012955:	0f 22 d8             	mov    cr3,eax
c0012958:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001295c:	83 c4 0c             	add    esp,0xc
c001295f:	5b                   	pop    ebx
c0012960:	5e                   	pop    esi
c0012961:	5f                   	pop    edi
c0012962:	5d                   	pop    ebp
c0012963:	c3                   	ret    

c0012964 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012964:	55                   	push   ebp
c0012965:	57                   	push   edi
c0012966:	56                   	push   esi
c0012967:	53                   	push   ebx
c0012968:	83 ec 1c             	sub    esp,0x1c
c001296b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001296f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012973:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012977:	09 f8                	or     eax,edi
c0012979:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001297d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012982:	75 4f                	jne    c00129d3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012984:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012988:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001298b:	c1 eb 16             	shr    ebx,0x16
c001298e:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012995:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012999:	74 52                	je     c00129ed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c001299b:	0f b6 f2             	movzx  esi,dl
c001299e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00129a2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00129a6:	c1 e8 0a             	shr    eax,0xa
c00129a9:	83 fe 01             	cmp    esi,0x1
c00129ac:	19 d2                	sbb    edx,edx
c00129ae:	c1 e3 0c             	shl    ebx,0xc
c00129b1:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00129b7:	25 fc 0f 00 00       	and    eax,0xffc
c00129bc:	01 d8                	add    eax,ebx
c00129be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129c2:	09 d9                	or     ecx,ebx
c00129c4:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00129cb:	83 c4 1c             	add    esp,0x1c
c00129ce:	5b                   	pop    ebx
c00129cf:	5e                   	pop    esi
c00129d0:	5f                   	pop    edi
c00129d1:	5d                   	pop    ebp
c00129d2:	c3                   	ret    
c00129d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00129d7:	83 ec 0c             	sub    esp,0xc
c00129da:	68 58 28 02 c0       	push   0xc0022858
c00129df:	e8 de c2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00129e4:	83 c4 10             	add    esp,0x10
c00129e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129eb:	eb 97                	jmp    c0012984 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00129ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129f1:	e8 c0 c4 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00129f6:	83 ec 0c             	sub    esp,0xc
c00129f9:	89 c5                	mov    ebp,eax
c00129fb:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c0012a01:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012a05:	6a 01                	push   0x1
c0012a07:	e8 33 f6 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c0012a0c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a13:	6a 01                	push   0x1
c0012a15:	50                   	push   eax
c0012a16:	55                   	push   ebp
c0012a17:	81 cd 07 04 00 00    	or     ebp,0x407
c0012a1d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012a21:	51                   	push   ecx
c0012a22:	e8 e5 fe ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a27:	83 c4 1c             	add    esp,0x1c
c0012a2a:	68 00 10 00 00       	push   0x1000
c0012a2f:	6a 00                	push   0x0
c0012a31:	50                   	push   eax
c0012a32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012a36:	e8 b5 da fe ff       	call   c00004f0 <memset>
c0012a3b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012a42:	e8 00 f9 ff ff       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c0012a47:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012a50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a54:	e9 42 ff ff ff       	jmp    c001299b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012a59:	90                   	nop

c0012a5a <VAS::VAS(bool)>:
c0012a5a:	53                   	push   ebx
c0012a5b:	83 ec 28             	sub    esp,0x28
c0012a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a62:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a80:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a84:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a87:	e8 2a c4 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012a8c:	89 c2                	mov    edx,eax
c0012a8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012a95:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0012a9b:	83 ec 0c             	sub    esp,0xc
c0012a9e:	6a 01                	push   0x1
c0012aa0:	e8 9a f5 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	89 c2                	mov    edx,eax
c0012aaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012ab1:	83 ec 0c             	sub    esp,0xc
c0012ab4:	6a 03                	push   0x3
c0012ab6:	6a 01                	push   0x1
c0012ab8:	52                   	push   edx
c0012ab9:	50                   	push   eax
c0012aba:	53                   	push   ebx
c0012abb:	e8 4c fe ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ac0:	83 c4 20             	add    esp,0x20
c0012ac3:	89 c2                	mov    edx,eax
c0012ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012acc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ad4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012adc:	7f 1d                	jg     c0012afb <VAS::VAS(bool)+0xa1>
c0012ade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ae2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ae5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ae9:	c1 e2 02             	shl    edx,0x2
c0012aec:	01 d0                	add    eax,edx
c0012aee:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012af4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012af9:	eb d9                	jmp    c0012ad4 <VAS::VAS(bool)+0x7a>
c0012afb:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012b03:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012b0b:	7f 59                	jg     c0012b66 <VAS::VAS(bool)+0x10c>
c0012b0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b11:	2d 00 02 00 00       	sub    eax,0x200
c0012b16:	c1 e0 0c             	shl    eax,0xc
c0012b19:	89 c2                	mov    edx,eax
c0012b1b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b20:	89 d1                	mov    ecx,edx
c0012b22:	09 c1                	or     ecx,eax
c0012b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b2f:	c1 e2 02             	shl    edx,0x2
c0012b32:	01 d0                	add    eax,edx
c0012b34:	83 c9 05             	or     ecx,0x5
c0012b37:	89 ca                	mov    edx,ecx
c0012b39:	89 10                	mov    DWORD PTR [eax],edx
c0012b3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b3f:	2d 40 03 00 00       	sub    eax,0x340
c0012b44:	83 f8 7f             	cmp    eax,0x7f
c0012b47:	77 16                	ja     c0012b5f <VAS::VAS(bool)+0x105>
c0012b49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b54:	c1 e2 02             	shl    edx,0x2
c0012b57:	01 d0                	add    eax,edx
c0012b59:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b5f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012b64:	eb 9d                	jmp    c0012b03 <VAS::VAS(bool)+0xa9>
c0012b66:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b73:	05 20 0c 00 00       	add    eax,0xc20
c0012b78:	81 ca 03 40 00 00    	or     edx,0x4003
c0012b7e:	89 10                	mov    DWORD PTR [eax],edx
c0012b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b84:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012b87:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b8c:	09 c2                	or     edx,eax
c0012b8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b95:	05 fc 0f 00 00       	add    eax,0xffc
c0012b9a:	83 ca 03             	or     edx,0x3
c0012b9d:	89 10                	mov    DWORD PTR [eax],edx
c0012b9f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012ba4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	50                   	push   eax
c0012bae:	e8 ed 66 ff ff       	call   c00092a0 <Device::getName()>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	83 ec 08             	sub    esp,0x8
c0012bb9:	68 28 2a 02 c0       	push   0xc0022a28
c0012bbe:	50                   	push   eax
c0012bbf:	e8 8c db fe ff       	call   c0000750 <strcmp>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	85 c0                	test   eax,eax
c0012bc9:	0f 94 c0             	sete   al
c0012bcc:	0f b6 c0             	movzx  eax,al
c0012bcf:	85 c0                	test   eax,eax
c0012bd1:	74 68                	je     c0012c3b <VAS::VAS(bool)+0x1e1>
c0012bd3:	fa                   	cli    
c0012bd4:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bdf:	05 68 09 00 00       	add    eax,0x968
c0012be4:	83 ec 0c             	sub    esp,0xc
c0012be7:	50                   	push   eax
c0012be8:	e8 6d b7 ff ff       	call   c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012bed:	83 c4 10             	add    esp,0x10
c0012bf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012bf5:	89 c3                	mov    ebx,eax
c0012bf7:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c02:	05 68 09 00 00       	add    eax,0x968
c0012c07:	83 ec 0c             	sub    esp,0xc
c0012c0a:	50                   	push   eax
c0012c0b:	e8 4a b7 ff ff       	call   c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	83 ec 08             	sub    esp,0x8
c0012c16:	50                   	push   eax
c0012c17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c1b:	e8 08 f7 ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c0012c20:	83 c4 10             	add    esp,0x10
c0012c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c2a:	6a 11                	push   0x11
c0012c2c:	53                   	push   ebx
c0012c2d:	50                   	push   eax
c0012c2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c32:	e8 eb fa ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	fb                   	sti    
c0012c3b:	90                   	nop
c0012c3c:	83 c4 28             	add    esp,0x28
c0012c3f:	5b                   	pop    ebx
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <VAS::evict(unsigned long)>:
c0012c42:	55                   	push   ebp
c0012c43:	57                   	push   edi
c0012c44:	56                   	push   esi
c0012c45:	53                   	push   ebx
c0012c46:	83 ec 1c             	sub    esp,0x1c
c0012c49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c55:	e8 43 f5 ff ff       	call   c001219d <Virt::allocateSwapfilePage()>
c0012c5a:	89 c7                	mov    edi,eax
c0012c5c:	a1 ec 45 02 c0       	mov    eax,ds:0xc00245ec
c0012c61:	85 c0                	test   eax,eax
c0012c63:	7e 40                	jle    c0012ca5 <VAS::evict(unsigned long)+0x63>
c0012c65:	89 ee                	mov    esi,ebp
c0012c67:	31 db                	xor    ebx,ebx
c0012c69:	83 ec 0c             	sub    esp,0xc
c0012c6c:	57                   	push   edi
c0012c6d:	e8 15 f5 ff ff       	call   c0012187 <Virt::swapIDToSector(unsigned long)>
c0012c72:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c75:	01 d8                	add    eax,ebx
c0012c77:	6a 01                	push   0x1
c0012c79:	31 d2                	xor    edx,edx
c0012c7b:	83 c3 01             	add    ebx,0x1
c0012c7e:	52                   	push   edx
c0012c7f:	81 c6 00 02 00 00    	add    esi,0x200
c0012c85:	50                   	push   eax
c0012c86:	0f be 05 f8 45 02 c0 	movsx  eax,BYTE PTR ds:0xc00245f8
c0012c8d:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012c94:	50                   	push   eax
c0012c95:	e8 9e 74 ff ff       	call   c000a138 <LogicalDisk::write(unsigned long long, int, void*)>
c0012c9a:	83 c4 20             	add    esp,0x20
c0012c9d:	39 1d ec 45 02 c0    	cmp    DWORD PTR ds:0xc00245ec,ebx
c0012ca3:	7f c4                	jg     c0012c69 <VAS::evict(unsigned long)+0x27>
c0012ca5:	83 ec 08             	sub    esp,0x8
c0012ca8:	c1 e7 0c             	shl    edi,0xc
c0012cab:	55                   	push   ebp
c0012cac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cb0:	50                   	push   eax
c0012cb1:	e8 72 f6 ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c0012cb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cb8:	89 d3                	mov    ebx,edx
c0012cba:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012cc0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012cc6:	09 d7                	or     edi,edx
c0012cc8:	89 38                	mov    DWORD PTR [eax],edi
c0012cca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ccd:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012cd3:	83 c2 01             	add    edx,0x1
c0012cd6:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012cdc:	e8 6c c1 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0012ce1:	0f 20 d8             	mov    eax,cr3
c0012ce4:	0f 22 d8             	mov    cr3,eax
c0012ce7:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012ced:	51                   	push   ecx
c0012cee:	55                   	push   ebp
c0012cef:	53                   	push   ebx
c0012cf0:	68 7c 28 02 c0       	push   0xc002287c
c0012cf5:	e8 6a 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012cfa:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012cff:	c7 44 24 50 36 2a 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022a36
c0012d07:	8d 50 01             	lea    edx,[eax+0x1]
c0012d0a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012d0e:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012d14:	83 c4 3c             	add    esp,0x3c
c0012d17:	5b                   	pop    ebx
c0012d18:	5e                   	pop    esi
c0012d19:	5f                   	pop    edi
c0012d1a:	5d                   	pop    ebp
c0012d1b:	e9 44 42 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012d20 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012d20:	55                   	push   ebp
c0012d21:	57                   	push   edi
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012d2a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0012d31:	89 f3                	mov    ebx,esi
c0012d33:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d39:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012d3f:	77 22                	ja     c0012d63 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012d41:	83 ec 08             	sub    esp,0x8
c0012d44:	56                   	push   esi
c0012d45:	68 59 2a 02 c0       	push   0xc0022a59
c0012d4a:	e8 15 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	85 db                	test   ebx,ebx
c0012d54:	75 2a                	jne    c0012d80 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012d56:	31 c0                	xor    eax,eax
c0012d58:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012d5e:	5b                   	pop    ebx
c0012d5f:	5e                   	pop    esi
c0012d60:	5f                   	pop    edi
c0012d61:	5d                   	pop    ebp
c0012d62:	c3                   	ret    
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	68 47 2a 02 c0       	push   0xc0022a47
c0012d6b:	e8 52 bf ff ff       	call   c000ecc2 <KePanic(char const*)>
c0012d70:	5d                   	pop    ebp
c0012d71:	58                   	pop    eax
c0012d72:	56                   	push   esi
c0012d73:	68 59 2a 02 c0       	push   0xc0022a59
c0012d78:	e8 e7 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 ec 08             	sub    esp,0x8
c0012d83:	53                   	push   ebx
c0012d84:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012d8b:	57                   	push   edi
c0012d8c:	e8 97 f5 ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	89 c2                	mov    edx,eax
c0012d96:	85 c0                	test   eax,eax
c0012d98:	74 bc                	je     c0012d56 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012d9a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0012d9c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0012da2:	0f 85 c1 00 00 00    	jne    c0012e69 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012da8:	89 e8                	mov    eax,ebp
c0012daa:	25 01 04 00 00       	and    eax,0x401
c0012daf:	3d 00 04 00 00       	cmp    eax,0x400
c0012db4:	75 a0                	jne    c0012d56 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012dba:	c1 ed 0c             	shr    ebp,0xc
c0012dbd:	e8 f4 c0 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012dc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012dc8:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0012dce:	09 c1                	or     ecx,eax
c0012dd0:	81 c9 01 08 00 00    	or     ecx,0x801
c0012dd6:	89 0a                	mov    DWORD PTR [edx],ecx
c0012dd8:	8b 0d ec 45 02 c0    	mov    ecx,DWORD PTR ds:0xc00245ec
c0012dde:	85 c9                	test   ecx,ecx
c0012de0:	7e 40                	jle    c0012e22 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012de2:	89 df                	mov    edi,ebx
c0012de4:	31 f6                	xor    esi,esi
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	55                   	push   ebp
c0012dea:	e8 98 f3 ff ff       	call   c0012187 <Virt::swapIDToSector(unsigned long)>
c0012def:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012df2:	01 f0                	add    eax,esi
c0012df4:	6a 01                	push   0x1
c0012df6:	31 d2                	xor    edx,edx
c0012df8:	83 c6 01             	add    esi,0x1
c0012dfb:	52                   	push   edx
c0012dfc:	81 c7 00 02 00 00    	add    edi,0x200
c0012e02:	50                   	push   eax
c0012e03:	0f be 05 f8 45 02 c0 	movsx  eax,BYTE PTR ds:0xc00245f8
c0012e0a:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012e11:	50                   	push   eax
c0012e12:	e8 b5 72 ff ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c0012e17:	83 c4 20             	add    esp,0x20
c0012e1a:	39 35 ec 45 02 c0    	cmp    DWORD PTR ds:0xc00245ec,esi
c0012e20:	7f c4                	jg     c0012de6 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0012e22:	83 ec 04             	sub    esp,0x4
c0012e25:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012e2a:	83 e8 01             	sub    eax,0x1
c0012e2d:	50                   	push   eax
c0012e2e:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012e33:	53                   	push   ebx
c0012e34:	68 6c 2a 02 c0       	push   0xc0022a6c
c0012e39:	e8 26 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e3e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e41:	e8 1e f3 ff ff       	call   c0012164 <Virt::freeSwapfilePage(unsigned long)>
c0012e46:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012e4e:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	85 d2                	test   edx,edx
c0012e59:	75 01                	jne    c0012e5c <VAS::tryLoadBackOffDisk(unsigned long)+0x13c>
c0012e5b:	fb                   	sti    
c0012e5c:	0f 20 d8             	mov    eax,cr3
c0012e5f:	0f 22 d8             	mov    cr3,eax
c0012e62:	b0 01                	mov    al,0x1
c0012e64:	e9 ef fe ff ff       	jmp    c0012d58 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012e69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e6d:	83 ec 0c             	sub    esp,0xc
c0012e70:	68 ac 28 02 c0       	push   0xc00228ac
c0012e75:	e8 ea 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e7a:	e8 37 c0 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012e7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e83:	8b 32                	mov    esi,DWORD PTR [edx]
c0012e85:	83 ce 01             	or     esi,0x1
c0012e88:	89 32                	mov    DWORD PTR [edx],esi
c0012e8a:	0f 20 d9             	mov    ecx,cr3
c0012e8d:	0f 22 d9             	mov    cr3,ecx
c0012e90:	bd 00 10 00 00       	mov    ebp,0x1000
c0012e95:	89 de                	mov    esi,ebx
c0012e97:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012e9b:	89 e9                	mov    ecx,ebp
c0012e9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e9f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012ea1:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012ea7:	09 c8                	or     eax,ecx
c0012ea9:	83 c8 02             	or     eax,0x2
c0012eac:	89 02                	mov    DWORD PTR [edx],eax
c0012eae:	0f 20 d8             	mov    eax,cr3
c0012eb1:	0f 22 d8             	mov    cr3,eax
c0012eb4:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012eb8:	89 df                	mov    edi,ebx
c0012eba:	89 e9                	mov    ecx,ebp
c0012ebc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ebe:	b0 01                	mov    al,0x1
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	e9 90 fe ff ff       	jmp    c0012d58 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0012ec8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012ec8:	55                   	push   ebp
c0012ec9:	57                   	push   edi
c0012eca:	56                   	push   esi
c0012ecb:	53                   	push   ebx
c0012ecc:	83 ec 28             	sub    esp,0x28
c0012ecf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0012ed3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012ed7:	50                   	push   eax
c0012ed8:	e8 62 f1 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c0012edd:	83 c4 0c             	add    esp,0xc
c0012ee0:	89 c5                	mov    ebp,eax
c0012ee2:	6a 07                	push   0x7
c0012ee4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012ee8:	52                   	push   edx
c0012ee9:	56                   	push   esi
c0012eea:	e8 37 f9 ff ff       	call   c0012826 <VAS::allocatePages(int, int)>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	89 c7                	mov    edi,eax
c0012ef4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012ef8:	85 c9                	test   ecx,ecx
c0012efa:	74 2f                	je     c0012f2b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012efc:	31 db                	xor    ebx,ebx
c0012efe:	e8 b3 bf ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012f03:	83 c3 01             	add    ebx,0x1
c0012f06:	6a 03                	push   0x3
c0012f08:	55                   	push   ebp
c0012f09:	50                   	push   eax
c0012f0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f0e:	56                   	push   esi
c0012f0f:	e8 0e f8 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f14:	6a 07                	push   0x7
c0012f16:	57                   	push   edi
c0012f17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f1b:	50                   	push   eax
c0012f1c:	56                   	push   esi
c0012f1d:	e8 00 f8 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f22:	83 c4 20             	add    esp,0x20
c0012f25:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0012f29:	75 d3                	jne    c0012efe <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012f2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f2f:	89 28                	mov    DWORD PTR [eax],ebp
c0012f31:	83 c4 1c             	add    esp,0x1c
c0012f34:	89 f8                	mov    eax,edi
c0012f36:	5b                   	pop    ebx
c0012f37:	5e                   	pop    esi
c0012f38:	5f                   	pop    edi
c0012f39:	5d                   	pop    ebp
c0012f3a:	c3                   	ret    
c0012f3b:	90                   	nop

c0012f3c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012f3c:	53                   	push   ebx
c0012f3d:	83 ec 14             	sub    esp,0x14
c0012f40:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012f44:	68 cc 28 02 c0       	push   0xc00228cc
c0012f49:	e8 16 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f4e:	c7 04 24 2c 29 02 c0 	mov    DWORD PTR [esp],0xc002292c
c0012f55:	e8 0a 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f5a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012f5e:	83 c4 18             	add    esp,0x18
c0012f61:	5b                   	pop    ebx
c0012f62:	e9 e0 f3 ff ff       	jmp    c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f67:	90                   	nop

c0012f68 <VAS::scanForEviction()>:
c0012f68:	57                   	push   edi
c0012f69:	56                   	push   esi
c0012f6a:	31 f6                	xor    esi,esi
c0012f6c:	53                   	push   ebx
c0012f6d:	83 ec 10             	sub    esp,0x10
c0012f70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f74:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f77:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012f7d:	75 0e                	jne    c0012f8d <VAS::scanForEviction()+0x25>
c0012f7f:	89 da                	mov    edx,ebx
c0012f81:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012f84:	c1 ea 16             	shr    edx,0x16
c0012f87:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012f8b:	74 57                	je     c0012fe4 <VAS::scanForEviction()+0x7c>
c0012f8d:	53                   	push   ebx
c0012f8e:	57                   	push   edi
c0012f8f:	e8 94 f3 ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c0012f94:	5a                   	pop    edx
c0012f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f97:	59                   	pop    ecx
c0012f98:	89 d1                	mov    ecx,edx
c0012f9a:	c1 e9 0c             	shr    ecx,0xc
c0012f9d:	74 10                	je     c0012faf <VAS::scanForEviction()+0x47>
c0012f9f:	89 d1                	mov    ecx,edx
c0012fa1:	81 e1 01 08 00 00    	and    ecx,0x801
c0012fa7:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012fad:	74 40                	je     c0012fef <VAS::scanForEviction()+0x87>
c0012faf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012fb5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012fbb:	76 2d                	jbe    c0012fea <VAS::scanForEviction()+0x82>
c0012fbd:	83 c6 01             	add    esi,0x1
c0012fc0:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012fc7:	83 fe 03             	cmp    esi,0x3
c0012fca:	74 32                	je     c0012ffe <VAS::scanForEviction()+0x96>
c0012fcc:	31 db                	xor    ebx,ebx
c0012fce:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012fd4:	75 b7                	jne    c0012f8d <VAS::scanForEviction()+0x25>
c0012fd6:	89 da                	mov    edx,ebx
c0012fd8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012fdb:	c1 ea 16             	shr    edx,0x16
c0012fde:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012fe2:	75 a9                	jne    c0012f8d <VAS::scanForEviction()+0x25>
c0012fe4:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012fea:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012fed:	eb 88                	jmp    c0012f77 <VAS::scanForEviction()+0xf>
c0012fef:	f6 c2 20             	test   dl,0x20
c0012ff2:	74 13                	je     c0013007 <VAS::scanForEviction()+0x9f>
c0012ff4:	83 e2 df             	and    edx,0xffffffdf
c0012ff7:	89 10                	mov    DWORD PTR [eax],edx
c0012ff9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012ffc:	eb b1                	jmp    c0012faf <VAS::scanForEviction()+0x47>
c0012ffe:	83 c4 10             	add    esp,0x10
c0013001:	31 c0                	xor    eax,eax
c0013003:	5b                   	pop    ebx
c0013004:	5e                   	pop    esi
c0013005:	5f                   	pop    edi
c0013006:	c3                   	ret    
c0013007:	83 ec 08             	sub    esp,0x8
c001300a:	89 d0                	mov    eax,edx
c001300c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013011:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013015:	53                   	push   ebx
c0013016:	68 81 2a 02 c0       	push   0xc0022a81
c001301b:	e8 44 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013020:	58                   	pop    eax
c0013021:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013024:	5a                   	pop    edx
c0013025:	51                   	push   ecx
c0013026:	57                   	push   edi
c0013027:	e8 16 fc ff ff       	call   c0012c42 <VAS::evict(unsigned long)>
c001302c:	5b                   	pop    ebx
c001302d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013030:	5e                   	pop    esi
c0013031:	50                   	push   eax
c0013032:	68 95 2a 02 c0       	push   0xc0022a95
c0013037:	e8 28 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001303c:	58                   	pop    eax
c001303d:	5a                   	pop    edx
c001303e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013042:	50                   	push   eax
c0013043:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013047:	68 a8 2a 02 c0       	push   0xc0022aa8
c001304c:	e8 13 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013051:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	81 c1 00 10 00 00    	add    ecx,0x1000
c001305d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013061:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	5b                   	pop    ebx
c0013068:	5e                   	pop    esi
c0013069:	5f                   	pop    edi
c001306a:	c3                   	ret    

c001306b <mapVASFirstTime>:
c001306b:	55                   	push   ebp
c001306c:	57                   	push   edi
c001306d:	56                   	push   esi
c001306e:	53                   	push   ebx
c001306f:	83 ec 0c             	sub    esp,0xc
c0013072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013077:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001307a:	83 fa 01             	cmp    edx,0x1
c001307d:	0f 84 cb 00 00 00    	je     c001314e <mapVASFirstTime+0xe3>
c0013083:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013086:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013089:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001308e:	c1 e5 15             	shl    ebp,0x15
c0013091:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013096:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001309c:	29 eb                	sub    ebx,ebp
c001309e:	29 ef                	sub    edi,ebp
c00130a0:	e8 11 be ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00130a5:	83 ec 0c             	sub    esp,0xc
c00130a8:	68 03 04 00 00       	push   0x403
c00130ad:	6a 01                	push   0x1
c00130af:	53                   	push   ebx
c00130b0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130b6:	50                   	push   eax
c00130b7:	56                   	push   esi
c00130b8:	e8 4f f8 ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130bd:	83 c4 20             	add    esp,0x20
c00130c0:	39 fb                	cmp    ebx,edi
c00130c2:	75 dc                	jne    c00130a0 <mapVASFirstTime+0x35>
c00130c4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00130c9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00130ce:	29 eb                	sub    ebx,ebp
c00130d0:	29 ef                	sub    edi,ebp
c00130d2:	e8 df bd ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00130d7:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00130db:	83 fa 01             	cmp    edx,0x1
c00130de:	19 d2                	sbb    edx,edx
c00130e0:	83 ec 0c             	sub    esp,0xc
c00130e3:	83 e2 04             	and    edx,0x4
c00130e6:	81 c2 03 04 00 00    	add    edx,0x403
c00130ec:	52                   	push   edx
c00130ed:	6a 01                	push   0x1
c00130ef:	53                   	push   ebx
c00130f0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130f6:	50                   	push   eax
c00130f7:	56                   	push   esi
c00130f8:	e8 0f f8 ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130fd:	83 c4 20             	add    esp,0x20
c0013100:	39 df                	cmp    edi,ebx
c0013102:	75 ce                	jne    c00130d2 <mapVASFirstTime+0x67>
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c001310c:	6a 04                	push   0x4
c001310e:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c0013114:	6a ff                	push   0xffffffff
c0013116:	c1 eb 0c             	shr    ebx,0xc
c0013119:	53                   	push   ebx
c001311a:	68 00 50 02 c0       	push   0xc0025000
c001311f:	56                   	push   esi
c0013120:	e8 9d f3 ff ff       	call   c00124c2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013125:	83 c4 14             	add    esp,0x14
c0013128:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001312d:	6a 04                	push   0x4
c001312f:	6a ff                	push   0xffffffff
c0013131:	53                   	push   ebx
c0013132:	68 00 50 02 c0       	push   0xc0025000
c0013137:	50                   	push   eax
c0013138:	e8 85 f3 ff ff       	call   c00124c2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001313d:	0f 20 d8             	mov    eax,cr3
c0013140:	0f 22 d8             	mov    cr3,eax
c0013143:	83 c4 20             	add    esp,0x20
c0013146:	83 c4 0c             	add    esp,0xc
c0013149:	5b                   	pop    ebx
c001314a:	5e                   	pop    esi
c001314b:	5f                   	pop    edi
c001314c:	5d                   	pop    ebp
c001314d:	c3                   	ret    
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	68 b5 2a 02 c0       	push   0xc0022ab5
c0013156:	e8 09 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	83 c4 0c             	add    esp,0xc
c0013161:	5b                   	pop    ebx
c0013162:	5e                   	pop    esi
c0013163:	5f                   	pop    edi
c0013164:	5d                   	pop    ebp
c0013165:	c3                   	ret    

c0013166 <SysEject(regs*)>:
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	83 ca ff             	or     edx,0xffffffff
c001316c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013170:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013173:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013178:	83 e9 41             	sub    ecx,0x41
c001317b:	83 f9 19             	cmp    ecx,0x19
c001317e:	77 18                	ja     c0013198 <SysEject(regs*)+0x32>
c0013180:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0013187:	85 c9                	test   ecx,ecx
c0013189:	74 0d                	je     c0013198 <SysEject(regs*)+0x32>
c001318b:	83 ec 0c             	sub    esp,0xc
c001318e:	51                   	push   ecx
c001318f:	e8 ce 6e ff ff       	call   c000a062 <LogicalDisk::eject()>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	99                   	cdq    
c0013198:	83 c4 0c             	add    esp,0xc
c001319b:	c3                   	ret    

c001319c <SysExit(regs*)>:
c001319c:	83 ec 18             	sub    esp,0x18
c001319f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131a6:	e8 b5 2a 00 00       	call   c0015c60 <terminateTask(int)>
c00131ab:	83 c8 ff             	or     eax,0xffffffff
c00131ae:	83 c4 1c             	add    esp,0x1c
c00131b1:	89 c2                	mov    edx,eax
c00131b3:	c3                   	ret    

c00131b4 <SysGetCwd(regs*)>:
c00131b4:	83 ec 10             	sub    esp,0x10
c00131b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131bb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00131be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131c6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131c9:	e8 f8 4b ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00131ce:	83 c4 1c             	add    esp,0x1c
c00131d1:	99                   	cdq    
c00131d2:	c3                   	ret    

c00131d3 <SysGetPID(regs*)>:
c00131d3:	83 ec 14             	sub    esp,0x14
c00131d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131de:	ff 30                	push   DWORD PTR [eax]
c00131e0:	68 ce 2a 02 c0       	push   0xc0022ace
c00131e5:	e8 7a 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00131f4:	83 c4 1c             	add    esp,0x1c
c00131f7:	99                   	cdq    
c00131f8:	c3                   	ret    

c00131f9 <SysGetRAMData(regs*)>:
c00131f9:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c00131ff:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c0013209:	99                   	cdq    
c001320a:	f7 f9                	idiv   ecx
c001320c:	c1 e0 18             	shl    eax,0x18
c001320f:	09 c8                	or     eax,ecx
c0013211:	99                   	cdq    
c0013212:	c3                   	ret    

c0013213 <SysGetVGAPtr(regs*)>:
c0013213:	55                   	push   ebp
c0013214:	57                   	push   edi
c0013215:	56                   	push   esi
c0013216:	53                   	push   ebx
c0013217:	83 ec 0c             	sub    esp,0xc
c001321a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001321e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013221:	83 f8 ff             	cmp    eax,0xffffffff
c0013224:	74 1b                	je     c0013241 <SysGetVGAPtr(regs*)+0x2e>
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	50                   	push   eax
c001322a:	e8 e1 24 00 00       	call   c0015710 <Thr::processFromPID(int)>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	89 c1                	mov    ecx,eax
c0013234:	31 d2                	xor    edx,edx
c0013236:	b8 01 00 00 00       	mov    eax,0x1
c001323b:	85 c9                	test   ecx,ecx
c001323d:	75 0a                	jne    c0013249 <SysGetVGAPtr(regs*)+0x36>
c001323f:	eb 61                	jmp    c00132a2 <SysGetVGAPtr(regs*)+0x8f>
c0013241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013246:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013249:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001324f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013253:	74 0c                	je     c0013261 <SysGetVGAPtr(regs*)+0x4e>
c0013255:	83 ec 0c             	sub    esp,0xc
c0013258:	55                   	push   ebp
c0013259:	e8 ab de ff ff       	call   c0011109 <setActiveTerminal(VgaText*)>
c001325e:	83 c4 10             	add    esp,0x10
c0013261:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013264:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013267:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001326c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001326e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013271:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013274:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001327a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001327d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013280:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013286:	50                   	push   eax
c0013287:	50                   	push   eax
c0013288:	68 dd 2a 02 c0       	push   0xc0022add
c001328d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013290:	05 a8 0f 00 00       	add    eax,0xfa8
c0013295:	50                   	push   eax
c0013296:	e8 a5 d3 fe ff       	call   c0000640 <strcpy>
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	31 c0                	xor    eax,eax
c00132a0:	31 d2                	xor    edx,edx
c00132a2:	83 c4 0c             	add    esp,0xc
c00132a5:	5b                   	pop    ebx
c00132a6:	5e                   	pop    esi
c00132a7:	5f                   	pop    edi
c00132a8:	5d                   	pop    ebp
c00132a9:	c3                   	ret    
c00132aa:	66 90                	xchg   ax,ax

c00132ac <SysKill(regs*)>:
c00132ac:	53                   	push   ebx
c00132ad:	83 ec 08             	sub    esp,0x8
c00132b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132b4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00132b8:	75 16                	jne    c00132d0 <SysKill(regs*)+0x24>
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	68 e7 2a 02 c0       	push   0xc0022ae7
c00132c2:	e8 fb b9 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	e9 89 00 00 00       	jmp    c0013358 <SysKill(regs*)+0xac>
c00132cf:	90                   	nop
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	68 cc c6 02 c0       	push   0xc002c6cc
c00132d8:	e8 3b ce 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132dd:	8d 76 00             	lea    esi,[esi+0x0]
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	85 c0                	test   eax,eax
c00132e5:	74 19                	je     c0013300 <SysKill(regs*)+0x54>
c00132e7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00132ed:	39 0a                	cmp    DWORD PTR [edx],ecx
c00132ef:	74 33                	je     c0013324 <SysKill(regs*)+0x78>
c00132f1:	52                   	push   edx
c00132f2:	52                   	push   edx
c00132f3:	50                   	push   eax
c00132f4:	68 cc c6 02 c0       	push   0xc002c6cc
c00132f9:	e8 26 d3 00 00       	call   c0020624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00132fe:	eb e0                	jmp    c00132e0 <SysKill(regs*)+0x34>
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013308:	e8 0b ce 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001330d:	8d 76 00             	lea    esi,[esi+0x0]
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	85 c0                	test   eax,eax
c0013315:	74 41                	je     c0013358 <SysKill(regs*)+0xac>
c0013317:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001331a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001331d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001331f:	75 27                	jne    c0013348 <SysKill(regs*)+0x9c>
c0013321:	8d 76 00             	lea    esi,[esi+0x0]
c0013324:	51                   	push   ecx
c0013325:	51                   	push   ecx
c0013326:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001332e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013331:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013337:	e8 bf ca ff ff       	call   c000fdfb <KeRaiseSignal(SigHandlerBlock*, int)>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	31 c0                	xor    eax,eax
c0013341:	31 d2                	xor    edx,edx
c0013343:	eb 1b                	jmp    c0013360 <SysKill(regs*)+0xb4>
c0013345:	8d 76 00             	lea    esi,[esi+0x0]
c0013348:	52                   	push   edx
c0013349:	52                   	push   edx
c001334a:	50                   	push   eax
c001334b:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013350:	e8 cf d2 00 00       	call   c0020624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013355:	eb b9                	jmp    c0013310 <SysKill(regs*)+0x64>
c0013357:	90                   	nop
c0013358:	83 c8 ff             	or     eax,0xffffffff
c001335b:	89 c2                	mov    edx,eax
c001335d:	8d 76 00             	lea    esi,[esi+0x0]
c0013360:	83 c4 08             	add    esp,0x8
c0013363:	5b                   	pop    ebx
c0013364:	c3                   	ret    

c0013365 <SysLoadDLL(regs*)>:
c0013365:	56                   	push   esi
c0013366:	53                   	push   ebx
c0013367:	31 d2                	xor    edx,edx
c0013369:	51                   	push   ecx
c001336a:	b8 01 00 00 00       	mov    eax,0x1
c001336f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013373:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013377:	0f 84 8c 00 00 00    	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c001337d:	83 ec 0c             	sub    esp,0xc
c0013380:	68 14 01 00 00       	push   0x114
c0013385:	e8 f1 b5 ff ff       	call   c000e97b <malloc>
c001338a:	83 c4 0c             	add    esp,0xc
c001338d:	89 c3                	mov    ebx,eax
c001338f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013394:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013397:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001339a:	53                   	push   ebx
c001339b:	e8 72 4d ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00133a0:	83 c4 10             	add    esp,0x10
c00133a3:	31 d2                	xor    edx,edx
c00133a5:	b8 02 00 00 00       	mov    eax,0x2
c00133aa:	85 db                	test   ebx,ebx
c00133ac:	74 5b                	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	53                   	push   ebx
c00133b2:	e8 3d 50 ff ff       	call   c00083f4 <File::exists()>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	84 c0                	test   al,al
c00133bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133be:	75 11                	jne    c00133d1 <SysLoadDLL(regs*)+0x6c>
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	53                   	push   ebx
c00133c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133c7:	83 c4 10             	add    esp,0x10
c00133ca:	b8 03 00 00 00       	mov    eax,0x3
c00133cf:	eb 36                	jmp    c0013407 <SysLoadDLL(regs*)+0xa2>
c00133d1:	83 ec 0c             	sub    esp,0xc
c00133d4:	53                   	push   ebx
c00133d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133d8:	58                   	pop    eax
c00133d9:	5a                   	pop    edx
c00133da:	6a 00                	push   0x0
c00133dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133df:	e8 e8 15 00 00       	call   c00149cc <Thr::loadDLL(char const*, bool)>
c00133e4:	83 c4 10             	add    esp,0x10
c00133e7:	89 c1                	mov    ecx,eax
c00133e9:	31 d2                	xor    edx,edx
c00133eb:	b8 04 00 00 00       	mov    eax,0x4
c00133f0:	85 c9                	test   ecx,ecx
c00133f2:	74 15                	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c00133f4:	53                   	push   ebx
c00133f5:	53                   	push   ebx
c00133f6:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00133fc:	51                   	push   ecx
c00133fd:	e8 1c 18 00 00       	call   c0014c1e <Thr::executeDLL(unsigned long, void*)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	31 c0                	xor    eax,eax
c0013407:	31 d2                	xor    edx,edx
c0013409:	59                   	pop    ecx
c001340a:	5b                   	pop    ebx
c001340b:	5e                   	pop    esi
c001340c:	c3                   	ret    

c001340d <SysRead(regs*)>:
c001340d:	57                   	push   edi
c001340e:	56                   	push   esi
c001340f:	53                   	push   ebx
c0013410:	83 ec 10             	sub    esp,0x10
c0013413:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013417:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001341a:	83 f8 02             	cmp    eax,0x2
c001341d:	77 10                	ja     c001342f <SysRead(regs*)+0x22>
c001341f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013424:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013427:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001342d:	eb 0e                	jmp    c001343d <SysRead(regs*)+0x30>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	50                   	push   eax
c0013433:	e8 ad ea ff ff       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	89 c1                	mov    ecx,eax
c001343d:	83 c8 ff             	or     eax,0xffffffff
c0013440:	85 c9                	test   ecx,ecx
c0013442:	89 c2                	mov    edx,eax
c0013444:	74 28                	je     c001346e <SysRead(regs*)+0x61>
c0013446:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001344e:	31 ff                	xor    edi,edi
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013455:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013459:	52                   	push   edx
c001345a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001345d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013460:	57                   	push   edi
c0013461:	56                   	push   esi
c0013462:	51                   	push   ecx
c0013463:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013466:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001346a:	83 c4 20             	add    esp,0x20
c001346d:	99                   	cdq    
c001346e:	83 c4 10             	add    esp,0x10
c0013471:	5b                   	pop    ebx
c0013472:	5e                   	pop    esi
c0013473:	5f                   	pop    edi
c0013474:	c3                   	ret    

c0013475 <SysRegisterSignal(regs*)>:
c0013475:	83 ec 18             	sub    esp,0x18
c0013478:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001347c:	6a 00                	push   0x0
c001347e:	6a 00                	push   0x0
c0013480:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013483:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001348b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001348e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013494:	e8 2c c9 ff ff       	call   c000fdc5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013499:	83 c4 2c             	add    esp,0x2c
c001349c:	99                   	cdq    
c001349d:	c3                   	ret    

c001349e <SysRegistryGetTypeFromPath(regs*)>:
c001349e:	53                   	push   ebx
c001349f:	81 ec 40 01 00 00    	sub    esp,0x140
c00134a5:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00134ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00134af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134b2:	e8 9d 9e ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	89 c1                	mov    ecx,eax
c00134bc:	85 c0                	test   eax,eax
c00134be:	74 15                	je     c00134d5 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00134c0:	50                   	push   eax
c00134c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00134c5:	50                   	push   eax
c00134c6:	51                   	push   ecx
c00134c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134ca:	e8 69 9a ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	99                   	cdq    
c00134d3:	eb 05                	jmp    c00134da <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00134d5:	83 c8 ff             	or     eax,0xffffffff
c00134d8:	89 c2                	mov    edx,eax
c00134da:	81 c4 38 01 00 00    	add    esp,0x138
c00134e0:	5b                   	pop    ebx
c00134e1:	c3                   	ret    

c00134e2 <SysRegistryReadExtent(regs*)>:
c00134e2:	83 ec 1c             	sub    esp,0x1c
c00134e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134e9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134ec:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00134ef:	85 c0                	test   eax,eax
c00134f1:	79 1f                	jns    c0013512 <SysRegistryReadExtent(regs*)+0x30>
c00134f3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00134f8:	52                   	push   edx
c00134f9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00134fd:	52                   	push   edx
c00134fe:	50                   	push   eax
c00134ff:	51                   	push   ecx
c0013500:	e8 25 99 ff ff       	call   c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013509:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	eb 14                	jmp    c0013526 <SysRegistryReadExtent(regs*)+0x44>
c0013512:	83 ec 04             	sub    esp,0x4
c0013515:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013518:	50                   	push   eax
c0013519:	51                   	push   ecx
c001351a:	e8 a5 93 ff ff       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	31 c0                	xor    eax,eax
c0013524:	31 d2                	xor    edx,edx
c0013526:	83 c4 1c             	add    esp,0x1c
c0013529:	c3                   	ret    

c001352a <SysRegistryPathToExtentLookup(regs*)>:
c001352a:	83 ec 14             	sub    esp,0x14
c001352d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013531:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013534:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013537:	e8 18 9e ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001353c:	83 c4 1c             	add    esp,0x1c
c001353f:	99                   	cdq    
c0013540:	c3                   	ret    

c0013541 <SysRegistryEnterDirectory(regs*)>:
c0013541:	83 ec 14             	sub    esp,0x14
c0013544:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013548:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001354b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001354e:	e8 e8 93 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c0013553:	83 c4 1c             	add    esp,0x1c
c0013556:	99                   	cdq    
c0013557:	c3                   	ret    

c0013558 <SysRegistryGetNext(regs*)>:
c0013558:	83 ec 14             	sub    esp,0x14
c001355b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013562:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013565:	e8 10 94 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c001356a:	83 c4 1c             	add    esp,0x1c
c001356d:	99                   	cdq    
c001356e:	c3                   	ret    

c001356f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001356f:	57                   	push   edi
c0013570:	56                   	push   esi
c0013571:	53                   	push   ebx
c0013572:	81 ec 34 01 00 00    	sub    esp,0x134
c0013578:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001357f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013583:	57                   	push   edi
c0013584:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013587:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001358a:	e8 a9 99 ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001358f:	89 c3                	mov    ebx,eax
c0013591:	58                   	pop    eax
c0013592:	5a                   	pop    edx
c0013593:	57                   	push   edi
c0013594:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013597:	e8 a4 d0 fe ff       	call   c0000640 <strcpy>
c001359c:	89 d8                	mov    eax,ebx
c001359e:	81 c4 40 01 00 00    	add    esp,0x140
c00135a4:	99                   	cdq    
c00135a5:	5b                   	pop    ebx
c00135a6:	5e                   	pop    esi
c00135a7:	5f                   	pop    edi
c00135a8:	c3                   	ret    

c00135a9 <SysRegistryOpen(regs*)>:
c00135a9:	83 ec 18             	sub    esp,0x18
c00135ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135b3:	e8 9c 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c00135b8:	83 c4 1c             	add    esp,0x1c
c00135bb:	99                   	cdq    
c00135bc:	c3                   	ret    

c00135bd <SysRegistryClose(regs*)>:
c00135bd:	83 ec 18             	sub    esp,0x18
c00135c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135c7:	e8 a6 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c00135cc:	31 c0                	xor    eax,eax
c00135ce:	31 d2                	xor    edx,edx
c00135d0:	83 c4 1c             	add    esp,0x1c
c00135d3:	c3                   	ret    

c00135d4 <SysRegistryEasyReadString(regs*)>:
c00135d4:	57                   	push   edi
c00135d5:	56                   	push   esi
c00135d6:	53                   	push   ebx
c00135d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00135e1:	e8 6e 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c00135e6:	5a                   	pop    edx
c00135e7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00135ea:	59                   	pop    ecx
c00135eb:	89 c3                	mov    ebx,eax
c00135ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00135f0:	50                   	push   eax
c00135f1:	e8 5e 9d ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	89 c1                	mov    ecx,eax
c00135fb:	b8 01 00 00 00       	mov    eax,0x1
c0013600:	85 c9                	test   ecx,ecx
c0013602:	7e 16                	jle    c001361a <SysRegistryEasyReadString(regs*)+0x46>
c0013604:	50                   	push   eax
c0013605:	57                   	push   edi
c0013606:	51                   	push   ecx
c0013607:	53                   	push   ebx
c0013608:	e8 b7 92 ff ff       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c001360d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013610:	e8 5d 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	31 c0                	xor    eax,eax
c001361a:	5b                   	pop    ebx
c001361b:	31 d2                	xor    edx,edx
c001361d:	5e                   	pop    esi
c001361e:	5f                   	pop    edi
c001361f:	c3                   	ret    

c0013620 <SysRegistryEasyReadInteger(regs*)>:
c0013620:	56                   	push   esi
c0013621:	53                   	push   ebx
c0013622:	83 ec 10             	sub    esp,0x10
c0013625:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013629:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001362c:	e8 23 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c0013631:	5a                   	pop    edx
c0013632:	89 c3                	mov    ebx,eax
c0013634:	59                   	pop    ecx
c0013635:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013638:	50                   	push   eax
c0013639:	e8 16 9d ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001363e:	83 c4 10             	add    esp,0x10
c0013641:	89 c1                	mov    ecx,eax
c0013643:	b8 01 00 00 00       	mov    eax,0x1
c0013648:	85 c9                	test   ecx,ecx
c001364a:	7e 18                	jle    c0013664 <SysRegistryEasyReadInteger(regs*)+0x44>
c001364c:	50                   	push   eax
c001364d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013650:	51                   	push   ecx
c0013651:	53                   	push   ebx
c0013652:	e8 d3 97 ff ff       	call   c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001365a:	e8 13 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	31 c0                	xor    eax,eax
c0013664:	59                   	pop    ecx
c0013665:	31 d2                	xor    edx,edx
c0013667:	5b                   	pop    ebx
c0013668:	5e                   	pop    esi
c0013669:	c3                   	ret    

c001366a <SysSbrk(regs*)>:
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	50                   	push   eax
c001366d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013676:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013679:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001367c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013682:	85 db                	test   ebx,ebx
c0013684:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013687:	74 02                	je     c001368b <SysSbrk(regs*)+0x21>
c0013689:	79 06                	jns    c0013691 <SysSbrk(regs*)+0x27>
c001368b:	89 f0                	mov    eax,esi
c001368d:	31 d2                	xor    edx,edx
c001368f:	eb 2a                	jmp    c00136bb <SysSbrk(regs*)+0x51>
c0013691:	83 c8 ff             	or     eax,0xffffffff
c0013694:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001369a:	89 c2                	mov    edx,eax
c001369c:	77 1d                	ja     c00136bb <SysSbrk(regs*)+0x51>
c001369e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00136a4:	50                   	push   eax
c00136a5:	c1 ea 0c             	shr    edx,0xc
c00136a8:	68 07 0c 00 00       	push   0xc07
c00136ad:	52                   	push   edx
c00136ae:	51                   	push   ecx
c00136af:	e8 72 f1 ff ff       	call   c0012826 <VAS::allocatePages(int, int)>
c00136b4:	89 f0                	mov    eax,esi
c00136b6:	31 d2                	xor    edx,edx
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	59                   	pop    ecx
c00136bc:	5b                   	pop    ebx
c00136bd:	5e                   	pop    esi
c00136be:	c3                   	ret    

c00136bf <SysSetCwd(regs*)>:
c00136bf:	83 ec 14             	sub    esp,0x14
c00136c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136d1:	e8 bd 4d ff ff       	call   c0008493 <Fs::setcwd(Process*, char*)>
c00136d6:	83 c4 1c             	add    esp,0x1c
c00136d9:	99                   	cdq    
c00136da:	c3                   	ret    

c00136db <SysSetTime(regs*)>:
c00136db:	55                   	push   ebp
c00136dc:	31 c9                	xor    ecx,ecx
c00136de:	57                   	push   edi
c00136df:	bd 0c 00 00 00       	mov    ebp,0xc
c00136e4:	56                   	push   esi
c00136e5:	53                   	push   ebx
c00136e6:	31 db                	xor    ebx,ebx
c00136e8:	83 ec 10             	sub    esp,0x10
c00136eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136ef:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00136f2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136f5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00136f8:	89 c2                	mov    edx,eax
c00136fa:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013700:	83 e2 1f             	and    edx,0x1f
c0013703:	c1 e7 10             	shl    edi,0x10
c0013706:	42                   	inc    edx
c0013707:	c1 e8 05             	shr    eax,0x5
c001370a:	88 d1                	mov    cl,dl
c001370c:	31 d2                	xor    edx,edx
c001370e:	f7 f5                	div    ebp
c0013710:	89 dd                	mov    ebp,ebx
c0013712:	88 d5                	mov    ch,dl
c0013714:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001371a:	0f b7 c1             	movzx  eax,cx
c001371d:	31 d2                	xor    edx,edx
c001371f:	09 f8                	or     eax,edi
c0013721:	bf 3c 00 00 00       	mov    edi,0x3c
c0013726:	89 c1                	mov    ecx,eax
c0013728:	89 f0                	mov    eax,esi
c001372a:	f7 f7                	div    edi
c001372c:	c1 e2 10             	shl    edx,0x10
c001372f:	09 d5                	or     ebp,edx
c0013731:	31 d2                	xor    edx,edx
c0013733:	89 eb                	mov    ebx,ebp
c0013735:	f7 f7                	div    edi
c0013737:	bf 10 0e 00 00       	mov    edi,0xe10
c001373c:	88 d7                	mov    bh,dl
c001373e:	89 f0                	mov    eax,esi
c0013740:	31 d2                	xor    edx,edx
c0013742:	f7 f7                	div    edi
c0013744:	bf 18 00 00 00       	mov    edi,0x18
c0013749:	31 d2                	xor    edx,edx
c001374b:	f7 f7                	div    edi
c001374d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013752:	88 d3                	mov    bl,dl
c0013754:	53                   	push   ebx
c0013755:	51                   	push   ecx
c0013756:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001375c:	e8 f5 55 ff ff       	call   c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013761:	83 c4 1c             	add    esp,0x1c
c0013764:	83 f0 01             	xor    eax,0x1
c0013767:	5b                   	pop    ebx
c0013768:	0f b6 c0             	movzx  eax,al
c001376b:	5e                   	pop    esi
c001376c:	31 d2                	xor    edx,edx
c001376e:	5f                   	pop    edi
c001376f:	5d                   	pop    ebp
c0013770:	c3                   	ret    

c0013771 <SysSymlink(regs*)>:
c0013771:	56                   	push   esi
c0013772:	83 c8 ff             	or     eax,0xffffffff
c0013775:	53                   	push   ebx
c0013776:	89 c2                	mov    edx,eax
c0013778:	81 ec 34 02 00 00    	sub    esp,0x234
c001377e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013785:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013789:	74 50                	je     c00137db <SysSymlink(regs*)+0x6a>
c001378b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001378e:	85 c9                	test   ecx,ecx
c0013790:	74 49                	je     c00137db <SysSymlink(regs*)+0x6a>
c0013792:	6a 01                	push   0x1
c0013794:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013799:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001379c:	05 0c 01 00 00       	add    eax,0x10c
c00137a1:	50                   	push   eax
c00137a2:	51                   	push   ecx
c00137a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00137a7:	56                   	push   esi
c00137a8:	e8 6d 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137ad:	6a 01                	push   0x1
c00137af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137b7:	05 0c 01 00 00       	add    eax,0x10c
c00137bc:	50                   	push   eax
c00137bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00137c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00137c7:	53                   	push   ebx
c00137c8:	e8 4d 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137cd:	83 c4 18             	add    esp,0x18
c00137d0:	56                   	push   esi
c00137d1:	53                   	push   ebx
c00137d2:	e8 71 42 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	99                   	cdq    
c00137db:	81 c4 34 02 00 00    	add    esp,0x234
c00137e1:	5b                   	pop    ebx
c00137e2:	5e                   	pop    esi
c00137e3:	c3                   	ret    

c00137e4 <SysTimezone(regs*)>:
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137eb:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00137ef:	75 17                	jne    c0013808 <SysTimezone(regs*)+0x24>
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	68 08 2b 02 c0       	push   0xc0022b08
c00137f9:	e8 66 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00137fe:	83 c8 ff             	or     eax,0xffffffff
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	89 c2                	mov    edx,eax
c0013806:	eb 17                	jmp    c001381f <SysTimezone(regs*)+0x3b>
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	68 1d 2b 02 c0       	push   0xc0022b1d
c0013810:	e8 4f 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	b8 01 00 00 00       	mov    eax,0x1
c001381d:	31 d2                	xor    edx,edx
c001381f:	83 c4 0c             	add    esp,0xc
c0013822:	c3                   	ret    

c0013823 <SysTruncate(regs*)>:
c0013823:	55                   	push   ebp
c0013824:	57                   	push   edi
c0013825:	31 ff                	xor    edi,edi
c0013827:	56                   	push   esi
c0013828:	53                   	push   ebx
c0013829:	83 ec 0c             	sub    esp,0xc
c001382c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013830:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013833:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013836:	89 ce                	mov    esi,ecx
c0013838:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001383c:	0f 84 9a 00 00 00    	je     c00138dc <SysTruncate(regs*)+0xb9>
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	68 14 01 00 00       	push   0x114
c001384a:	e8 2c b1 ff ff       	call   c000e97b <malloc>
c001384f:	83 c4 0c             	add    esp,0xc
c0013852:	89 c3                	mov    ebx,eax
c0013854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013859:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001385c:	55                   	push   ebp
c001385d:	53                   	push   ebx
c001385e:	e8 af 48 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	31 d2                	xor    edx,edx
c0013868:	b8 03 00 00 00       	mov    eax,0x3
c001386d:	85 db                	test   ebx,ebx
c001386f:	0f 84 a2 00 00 00    	je     c0013917 <SysTruncate(regs*)+0xf4>
c0013875:	51                   	push   ecx
c0013876:	51                   	push   ecx
c0013877:	6a 02                	push   0x2
c0013879:	53                   	push   ebx
c001387a:	e8 b1 48 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	85 c0                	test   eax,eax
c0013884:	74 13                	je     c0013899 <SysTruncate(regs*)+0x76>
c0013886:	83 ec 0c             	sub    esp,0xc
c0013889:	8b 03                	mov    eax,DWORD PTR [ebx]
c001388b:	53                   	push   ebx
c001388c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	b8 04 00 00 00       	mov    eax,0x4
c0013897:	eb 7c                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c0013899:	52                   	push   edx
c001389a:	57                   	push   edi
c001389b:	56                   	push   esi
c001389c:	53                   	push   ebx
c001389d:	e8 a2 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	85 c0                	test   eax,eax
c00138a7:	74 1b                	je     c00138c4 <SysTruncate(regs*)+0xa1>
c00138a9:	83 ec 0c             	sub    esp,0xc
c00138ac:	53                   	push   ebx
c00138ad:	e8 dc 48 ff ff       	call   c000818e <File::close()>
c00138b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	b8 05 00 00 00       	mov    eax,0x5
c00138c2:	eb 51                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	53                   	push   ebx
c00138c8:	e8 c1 48 ff ff       	call   c000818e <File::close()>
c00138cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	31 c0                	xor    eax,eax
c00138da:	eb 39                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c00138dc:	31 d2                	xor    edx,edx
c00138de:	b8 01 00 00 00       	mov    eax,0x1
c00138e3:	83 fd 02             	cmp    ebp,0x2
c00138e6:	7e 2f                	jle    c0013917 <SysTruncate(regs*)+0xf4>
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	51                   	push   ecx
c00138ec:	e8 f4 e5 ff ff       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	89 c1                	mov    ecx,eax
c00138f6:	31 d2                	xor    edx,edx
c00138f8:	b8 02 00 00 00       	mov    eax,0x2
c00138fd:	85 c9                	test   ecx,ecx
c00138ff:	74 16                	je     c0013917 <SysTruncate(regs*)+0xf4>
c0013901:	50                   	push   eax
c0013902:	57                   	push   edi
c0013903:	56                   	push   esi
c0013904:	51                   	push   ecx
c0013905:	e8 3a 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	85 c0                	test   eax,eax
c001390f:	0f 95 c0             	setne  al
c0013912:	0f b6 c0             	movzx  eax,al
c0013915:	31 d2                	xor    edx,edx
c0013917:	83 c4 0c             	add    esp,0xc
c001391a:	5b                   	pop    ebx
c001391b:	5e                   	pop    esi
c001391c:	5f                   	pop    edi
c001391d:	5d                   	pop    ebp
c001391e:	c3                   	ret    

c001391f <SysWrite(regs*)>:
c001391f:	57                   	push   edi
c0013920:	56                   	push   esi
c0013921:	53                   	push   ebx
c0013922:	83 ec 10             	sub    esp,0x10
c0013925:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013929:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001392c:	83 f8 02             	cmp    eax,0x2
c001392f:	77 10                	ja     c0013941 <SysWrite(regs*)+0x22>
c0013931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013939:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001393f:	eb 0e                	jmp    c001394f <SysWrite(regs*)+0x30>
c0013941:	83 ec 0c             	sub    esp,0xc
c0013944:	50                   	push   eax
c0013945:	e8 9b e5 ff ff       	call   c0011ee5 <KeGetFileFromDescriptor(int)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	89 c1                	mov    ecx,eax
c001394f:	83 c8 ff             	or     eax,0xffffffff
c0013952:	85 c9                	test   ecx,ecx
c0013954:	89 c2                	mov    edx,eax
c0013956:	74 28                	je     c0013980 <SysWrite(regs*)+0x61>
c0013958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013960:	31 ff                	xor    edi,edi
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013967:	8d 54 24 18          	lea    edx,[esp+0x18]
c001396b:	52                   	push   edx
c001396c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001396f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013972:	57                   	push   edi
c0013973:	56                   	push   esi
c0013974:	51                   	push   ecx
c0013975:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013978:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001397c:	83 c4 20             	add    esp,0x20
c001397f:	99                   	cdq    
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	5b                   	pop    ebx
c0013984:	5e                   	pop    esi
c0013985:	5f                   	pop    edi
c0013986:	c3                   	ret    

c0013987 <SysWsbe(regs*)>:
c0013987:	55                   	push   ebp
c0013988:	57                   	push   edi
c0013989:	56                   	push   esi
c001398a:	53                   	push   ebx
c001398b:	83 ec 3c             	sub    esp,0x3c
c001398e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013992:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013999:	75 2d                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c001399b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00139a2:	75 24                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c00139a4:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00139ab:	75 1b                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c00139ad:	6a 01                	push   0x1
c00139af:	6a 00                	push   0x0
c00139b1:	68 69 95 00 c0       	push   0xc0009569
c00139b6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00139bc:	e8 9f 18 00 00       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	31 c0                	xor    eax,eax
c00139c6:	eb 52                	jmp    c0013a1a <SysWsbe(regs*)+0x93>
c00139c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00139cc:	be 5c 2b 02 c0       	mov    esi,0xc0022b5c
c00139d1:	b9 0b 00 00 00       	mov    ecx,0xb
c00139d6:	fc                   	cld    
c00139d7:	83 ec 0c             	sub    esp,0xc
c00139da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00139e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139e8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00139ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00139f0:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00139f3:	57                   	push   edi
c00139f4:	e8 77 cb fe ff       	call   c0000570 <strlen>
c00139f9:	5a                   	pop    edx
c00139fa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00139fe:	52                   	push   edx
c00139ff:	31 d2                	xor    edx,edx
c0013a01:	57                   	push   edi
c0013a02:	52                   	push   edx
c0013a03:	50                   	push   eax
c0013a04:	56                   	push   esi
c0013a05:	ff d5                	call   ebp
c0013a07:	83 c4 14             	add    esp,0x14
c0013a0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a0d:	e8 4e 22 00 00       	call   c0015c60 <terminateTask(int)>
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013a1a:	83 c4 3c             	add    esp,0x3c
c0013a1d:	31 d2                	xor    edx,edx
c0013a1f:	5b                   	pop    ebx
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	5d                   	pop    ebp
c0013a23:	c3                   	ret    

c0013a24 <SysYield(regs*)>:
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	fa                   	cli    
c0013a28:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a2e:	e8 7d 1a 00 00       	call   c00154b0 <schedule()>
c0013a33:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013a3a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013a41:	75 01                	jne    c0013a44 <SysYield(regs*)+0x20>
c0013a43:	fb                   	sti    
c0013a44:	31 c0                	xor    eax,eax
c0013a46:	31 d2                	xor    edx,edx
c0013a48:	83 c4 0c             	add    esp,0xc
c0013a4b:	c3                   	ret    

c0013a4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013a4c:	55                   	push   ebp
c0013a4d:	57                   	push   edi
c0013a4e:	56                   	push   esi
c0013a4f:	53                   	push   ebx
c0013a50:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013a56:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013a5e:	0f 95 c0             	setne  al
c0013a61:	31 d2                	xor    edx,edx
c0013a63:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013a6b:	0f 94 c2             	sete   dl
c0013a6e:	85 c2                	test   edx,eax
c0013a70:	74 34                	je     c0013aa6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a72:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013a7d:	74 27                	je     c0013aa6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a7f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013a86:	05 00 10 00 00       	add    eax,0x1000
c0013a8b:	89 c1                	mov    ecx,eax
c0013a8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a92:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013a98:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013a9f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013aa6:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013aad:	83 ec 0c             	sub    esp,0xc
c0013ab0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013ab6:	6a 01                	push   0x1
c0013ab8:	e8 82 e5 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c0013abd:	83 c4 10             	add    esp,0x10
c0013ac0:	89 c3                	mov    ebx,eax
c0013ac2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013ac8:	0f 86 26 01 00 00    	jbe    c0013bf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013ace:	c1 ee 0c             	shr    esi,0xc
c0013ad1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ad8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013adc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ae4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013aeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013aef:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013af6:	29 ef                	sub    edi,ebp
c0013af8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013afc:	0f 83 f9 00 00 00    	jae    c0013bfb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0013b02:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013b08:	76 05                	jbe    c0013b0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013b0a:	bf 00 10 00 00       	mov    edi,0x1000
c0013b0f:	83 ec 0c             	sub    esp,0xc
c0013b12:	31 d2                	xor    edx,edx
c0013b14:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b1b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b1d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b21:	50                   	push   eax
c0013b22:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013b26:	56                   	push   esi
c0013b27:	52                   	push   edx
c0013b28:	57                   	push   edi
c0013b29:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013b30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b33:	83 c4 20             	add    esp,0x20
c0013b36:	85 c0                	test   eax,eax
c0013b38:	75 06                	jne    c0013b40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013b3a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013b3e:	74 13                	je     c0013b53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	53                   	push   ebx
c0013b44:	e8 fe e7 ff ff       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b49:	83 c4 10             	add    esp,0x10
c0013b4c:	31 c0                	xor    eax,eax
c0013b4e:	e9 80 01 00 00       	jmp    c0013cd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0013b53:	fa                   	cli    
c0013b54:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b5a:	e8 57 b3 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0013b5f:	6a 07                	push   0x7
c0013b61:	89 c7                	mov    edi,eax
c0013b63:	53                   	push   ebx
c0013b64:	50                   	push   eax
c0013b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b6d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b73:	e8 aa eb ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b78:	83 c4 0c             	add    esp,0xc
c0013b7b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b88:	6a 00                	push   0x0
c0013b8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b98:	e8 f1 e9 ff ff       	call   c001258e <VAS::mapOtherVASIn(bool, VAS*)>
c0013b9d:	58                   	pop    eax
c0013b9e:	5a                   	pop    edx
c0013b9f:	68 07 0c 00 00       	push   0xc07
c0013ba4:	55                   	push   ebp
c0013ba5:	57                   	push   edi
c0013ba6:	89 df                	mov    edi,ebx
c0013ba8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013baf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb5:	6a 00                	push   0x0
c0013bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bbf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bc5:	e8 9a ed ff ff       	call   c0012964 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bca:	b9 00 10 00 00       	mov    ecx,0x1000
c0013bcf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bd1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013bd8:	83 c4 20             	add    esp,0x20
c0013bdb:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013be2:	75 01                	jne    c0013be5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0013be4:	fb                   	sti    
c0013be5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013beb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013bef:	e9 f0 fe ff ff       	jmp    c0013ae4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013bf4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013bfb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013c02:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013c08:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013c0e:	0f 86 b1 00 00 00    	jbe    c0013cc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013c14:	fa                   	cli    
c0013c15:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013c1b:	c1 ee 0c             	shr    esi,0xc
c0013c1e:	51                   	push   ecx
c0013c1f:	31 ff                	xor    edi,edi
c0013c21:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c2e:	6a 00                	push   0x0
c0013c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c38:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c3e:	e8 4b e9 ff ff       	call   c001258e <VAS::mapOtherVASIn(bool, VAS*)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	e8 6b b2 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0013c4b:	47                   	inc    edi
c0013c4c:	6a 07                	push   0x7
c0013c4e:	53                   	push   ebx
c0013c4f:	50                   	push   eax
c0013c50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c5a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013c5d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013c63:	e8 ba ea ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c68:	58                   	pop    eax
c0013c69:	5a                   	pop    edx
c0013c6a:	68 07 0c 00 00       	push   0xc07
c0013c6f:	55                   	push   ebp
c0013c70:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c7a:	50                   	push   eax
c0013c7b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c88:	6a 00                	push   0x0
c0013c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c98:	e8 c7 ec ff ff       	call   c0012964 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c9d:	83 c4 1c             	add    esp,0x1c
c0013ca0:	68 00 10 00 00       	push   0x1000
c0013ca5:	6a 00                	push   0x0
c0013ca7:	53                   	push   ebx
c0013ca8:	e8 43 c8 fe ff       	call   c00004f0 <memset>
c0013cad:	83 c4 10             	add    esp,0x10
c0013cb0:	39 fe                	cmp    esi,edi
c0013cb2:	77 92                	ja     c0013c46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0013cb4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013cbb:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013cc2:	75 01                	jne    c0013cc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013cc4:	fb                   	sti    
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	53                   	push   ebx
c0013cc9:	e8 79 e6 ff ff       	call   c0012347 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	b0 01                	mov    al,0x1
c0013cd3:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013cd9:	5b                   	pop    ebx
c0013cda:	5e                   	pop    esi
c0013cdb:	5f                   	pop    edi
c0013cdc:	5d                   	pop    ebp
c0013cdd:	c3                   	ret    

c0013cde <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013cde:	55                   	push   ebp
c0013cdf:	57                   	push   edi
c0013ce0:	56                   	push   esi
c0013ce1:	53                   	push   ebx
c0013ce2:	83 ec 48             	sub    esp,0x48
c0013ce5:	68 14 01 00 00       	push   0x114
c0013cea:	e8 8c ac ff ff       	call   c000e97b <malloc>
c0013cef:	83 c4 0c             	add    esp,0xc
c0013cf2:	89 c6                	mov    esi,eax
c0013cf4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013cfc:	50                   	push   eax
c0013cfd:	e8 10 44 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013d02:	58                   	pop    eax
c0013d03:	5a                   	pop    edx
c0013d04:	6a 01                	push   0x1
c0013d06:	56                   	push   esi
c0013d07:	e8 24 44 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	85 c0                	test   eax,eax
c0013d11:	0f 85 43 01 00 00    	jne    c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d17:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013d1f:	83 ec 0c             	sub    esp,0xc
c0013d22:	6a 34                	push   0x34
c0013d24:	e8 52 ac ff ff       	call   c000e97b <malloc>
c0013d29:	89 c3                	mov    ebx,eax
c0013d2b:	58                   	pop    eax
c0013d2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d2e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013d32:	57                   	push   edi
c0013d33:	53                   	push   ebx
c0013d34:	6a 00                	push   0x0
c0013d36:	6a 34                	push   0x34
c0013d38:	56                   	push   esi
c0013d39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d3c:	83 c4 20             	add    esp,0x20
c0013d3f:	85 c0                	test   eax,eax
c0013d41:	0f 85 13 01 00 00    	jne    c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d47:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013d4d:	0f 85 07 01 00 00    	jne    c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d56:	85 c0                	test   eax,eax
c0013d58:	0f 84 fc 00 00 00    	je     c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d5e:	31 d2                	xor    edx,edx
c0013d60:	55                   	push   ebp
c0013d61:	52                   	push   edx
c0013d62:	50                   	push   eax
c0013d63:	56                   	push   esi
c0013d64:	e8 85 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013d69:	83 c4 10             	add    esp,0x10
c0013d6c:	85 c0                	test   eax,eax
c0013d6e:	0f 85 e6 00 00 00    	jne    c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d7a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013d82:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d86:	0f af c2             	imul   eax,edx
c0013d89:	50                   	push   eax
c0013d8a:	e8 ec ab ff ff       	call   c000e97b <malloc>
c0013d8f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013d95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d9c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013da0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013da4:	0f af c2             	imul   eax,edx
c0013da7:	99                   	cdq    
c0013da8:	52                   	push   edx
c0013da9:	50                   	push   eax
c0013daa:	56                   	push   esi
c0013dab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013db1:	83 c4 20             	add    esp,0x20
c0013db4:	85 c0                	test   eax,eax
c0013db6:	0f 84 9e 00 00 00    	je     c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dbc:	31 d2                	xor    edx,edx
c0013dbe:	51                   	push   ecx
c0013dbf:	52                   	push   edx
c0013dc0:	50                   	push   eax
c0013dc1:	56                   	push   esi
c0013dc2:	e8 27 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013dc7:	83 c4 10             	add    esp,0x10
c0013dca:	85 c0                	test   eax,eax
c0013dcc:	0f 85 88 00 00 00    	jne    c0013e5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dd2:	83 ec 0c             	sub    esp,0xc
c0013dd5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013dd9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ddd:	31 ed                	xor    ebp,ebp
c0013ddf:	0f af c2             	imul   eax,edx
c0013de2:	50                   	push   eax
c0013de3:	e8 93 ab ff ff       	call   c000e97b <malloc>
c0013de8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013dea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013df1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013df9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013dfd:	0f af c2             	imul   eax,edx
c0013e00:	99                   	cdq    
c0013e01:	52                   	push   edx
c0013e02:	50                   	push   eax
c0013e03:	56                   	push   esi
c0013e04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e07:	83 c4 20             	add    esp,0x20
c0013e0a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e12:	0f b7 fd             	movzx  edi,bp
c0013e15:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013e19:	73 7d                	jae    c0013e98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013e1b:	c1 e7 05             	shl    edi,0x5
c0013e1e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013e22:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013e25:	75 6b                	jne    c0013e92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e27:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013e2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e2e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e35:	52                   	push   edx
c0013e36:	31 d2                	xor    edx,edx
c0013e38:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013e3b:	52                   	push   edx
c0013e3c:	50                   	push   eax
c0013e3d:	56                   	push   esi
c0013e3e:	e8 ab 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013e43:	83 c4 10             	add    esp,0x10
c0013e46:	85 c0                	test   eax,eax
c0013e48:	74 17                	je     c0013e61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	68 88 2b 02 c0       	push   0xc0022b88
c0013e52:	e8 0d 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	31 c0                	xor    eax,eax
c0013e5c:	e9 87 00 00 00       	jmp    c0013ee8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013e67:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013e6a:	50                   	push   eax
c0013e6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013e6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e73:	56                   	push   esi
c0013e74:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013e78:	e8 cf fb ff ff       	call   c0013a4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013e7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e81:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013e85:	83 c4 20             	add    esp,0x20
c0013e88:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013e8c:	73 04                	jae    c0013e92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e92:	45                   	inc    ebp
c0013e93:	e9 7a ff ff ff       	jmp    c0013e12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013e98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013e9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ea0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ea4:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013eb3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eb8:	05 00 10 00 00       	add    eax,0x1000
c0013ebd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec4:	e8 c2 aa ff ff       	call   c000e98b <free>
c0013ec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ecc:	e8 ba aa ff ff       	call   c000e98b <free>
c0013ed1:	58                   	pop    eax
c0013ed2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed6:	e8 b0 aa ff ff       	call   c000e98b <free>
c0013edb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ede:	e8 ab 42 ff ff       	call   c000818e <File::close()>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	b0 01                	mov    al,0x1
c0013ee8:	83 c4 3c             	add    esp,0x3c
c0013eeb:	5b                   	pop    ebx
c0013eec:	5e                   	pop    esi
c0013eed:	5f                   	pop    edi
c0013eee:	5d                   	pop    ebp
c0013eef:	c3                   	ret    

c0013ef0 <Thr::runtimeReferenceHelper()>:
c0013ef0:	83 ec 18             	sub    esp,0x18
c0013ef3:	68 90 2b 02 c0       	push   0xc0022b90
c0013ef8:	e8 67 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013efd:	fa                   	cli    
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	eb fe                	jmp    c0013f01 <Thr::runtimeReferenceHelper()+0x11>

c0013f03 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013f03:	57                   	push   edi
c0013f04:	56                   	push   esi
c0013f05:	53                   	push   ebx
c0013f06:	31 db                	xor    ebx,ebx
c0013f08:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013f0e:	7e 3c                	jle    c0013f4c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013f10:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013f17:	31 ff                	xor    edi,edi
c0013f19:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013f20:	7e 27                	jle    c0013f49 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013f22:	50                   	push   eax
c0013f23:	50                   	push   eax
c0013f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f28:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f2a:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013f31:	50                   	push   eax
c0013f32:	e8 19 c8 fe ff       	call   c0000750 <strcmp>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	85 c0                	test   eax,eax
c0013f3c:	75 05                	jne    c0013f43 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013f3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f41:	eb 0b                	jmp    c0013f4e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013f43:	83 c6 10             	add    esi,0x10
c0013f46:	47                   	inc    edi
c0013f47:	eb d0                	jmp    c0013f19 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013f49:	43                   	inc    ebx
c0013f4a:	eb bc                	jmp    c0013f08 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013f4c:	31 c0                	xor    eax,eax
c0013f4e:	5b                   	pop    ebx
c0013f4f:	5e                   	pop    esi
c0013f50:	5f                   	pop    edi
c0013f51:	c3                   	ret    

c0013f52 <Thr::loadKernelSymbolTable(char const*)>:
c0013f52:	55                   	push   ebp
c0013f53:	57                   	push   edi
c0013f54:	56                   	push   esi
c0013f55:	53                   	push   ebx
c0013f56:	83 ec 68             	sub    esp,0x68
c0013f59:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013f5f:	68 14 01 00 00       	push   0x114
c0013f64:	e8 12 aa ff ff       	call   c000e97b <malloc>
c0013f69:	83 c4 0c             	add    esp,0xc
c0013f6c:	89 c3                	mov    ebx,eax
c0013f6e:	56                   	push   esi
c0013f6f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013f73:	50                   	push   eax
c0013f74:	e8 99 41 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013f79:	5e                   	pop    esi
c0013f7a:	5f                   	pop    edi
c0013f7b:	6a 01                	push   0x1
c0013f7d:	53                   	push   ebx
c0013f7e:	e8 ad 41 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	85 c0                	test   eax,eax
c0013f88:	74 0a                	je     c0013f94 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013f8a:	83 ec 0c             	sub    esp,0xc
c0013f8d:	68 b2 2b 02 c0       	push   0xc0022bb2
c0013f92:	eb 34                	jmp    c0013fc8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013f94:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013f9c:	83 ec 0c             	sub    esp,0xc
c0013f9f:	6a 34                	push   0x34
c0013fa1:	e8 d5 a9 ff ff       	call   c000e97b <malloc>
c0013fa6:	59                   	pop    ecx
c0013fa7:	89 c7                	mov    edi,eax
c0013fa9:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013fad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013faf:	56                   	push   esi
c0013fb0:	57                   	push   edi
c0013fb1:	6a 00                	push   0x0
c0013fb3:	6a 34                	push   0x34
c0013fb5:	53                   	push   ebx
c0013fb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fb9:	83 c4 20             	add    esp,0x20
c0013fbc:	85 c0                	test   eax,eax
c0013fbe:	74 17                	je     c0013fd7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	68 c9 2b 02 c0       	push   0xc0022bc9
c0013fc8:	e8 f5 ac ff ff       	call   c000ecc2 <KePanic(char const*)>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	31 c0                	xor    eax,eax
c0013fd2:	e9 31 02 00 00       	jmp    c0014208 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013fd7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013fdd:	75 e1                	jne    c0013fc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fdf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013fe2:	85 c0                	test   eax,eax
c0013fe4:	74 da                	je     c0013fc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fe6:	52                   	push   edx
c0013fe7:	31 d2                	xor    edx,edx
c0013fe9:	52                   	push   edx
c0013fea:	50                   	push   eax
c0013feb:	53                   	push   ebx
c0013fec:	e8 fd 41 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	85 c0                	test   eax,eax
c0013ff6:	75 c8                	jne    c0013fc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013fff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014003:	31 ed                	xor    ebp,ebp
c0014005:	0f af c2             	imul   eax,edx
c0014008:	50                   	push   eax
c0014009:	e8 6d a9 ff ff       	call   c000e97b <malloc>
c001400e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014014:	89 34 24             	mov    DWORD PTR [esp],esi
c0014017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001401b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001401f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014023:	0f af c2             	imul   eax,edx
c0014026:	99                   	cdq    
c0014027:	52                   	push   edx
c0014028:	50                   	push   eax
c0014029:	53                   	push   ebx
c001402a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001402d:	83 c4 20             	add    esp,0x20
c0014030:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014038:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014040:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014048:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014050:	0f b7 f5             	movzx  esi,bp
c0014053:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014057:	0f 83 a7 00 00 00    	jae    c0014104 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001405d:	6b f6 28             	imul   esi,esi,0x28
c0014060:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014064:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001406b:	50                   	push   eax
c001406c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014070:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014074:	8b 16                	mov    edx,DWORD PTR [esi]
c0014076:	6b c0 28             	imul   eax,eax,0x28
c0014079:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001407d:	89 d0                	mov    eax,edx
c001407f:	31 d2                	xor    edx,edx
c0014081:	52                   	push   edx
c0014082:	50                   	push   eax
c0014083:	53                   	push   ebx
c0014084:	e8 65 41 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	6a 20                	push   0x20
c001408e:	6a 00                	push   0x0
c0014090:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014094:	52                   	push   edx
c0014095:	e8 56 c4 fe ff       	call   c00004f0 <memset>
c001409a:	58                   	pop    eax
c001409b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001409d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00140a1:	51                   	push   ecx
c00140a2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00140a6:	52                   	push   edx
c00140a7:	6a 00                	push   0x0
c00140a9:	6a 1f                	push   0x1f
c00140ab:	53                   	push   ebx
c00140ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140af:	83 c4 18             	add    esp,0x18
c00140b2:	68 e0 2b 02 c0       	push   0xc0022be0
c00140b7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00140bb:	52                   	push   edx
c00140bc:	e8 8f c6 fe ff       	call   c0000750 <strcmp>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	85 c0                	test   eax,eax
c00140c6:	75 0f                	jne    c00140d7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00140c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140d7:	50                   	push   eax
c00140d8:	50                   	push   eax
c00140d9:	68 e8 2b 02 c0       	push   0xc0022be8
c00140de:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00140e2:	50                   	push   eax
c00140e3:	e8 68 c6 fe ff       	call   c0000750 <strcmp>
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	85 c0                	test   eax,eax
c00140ed:	75 0f                	jne    c00140fe <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00140ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140fe:	45                   	inc    ebp
c00140ff:	e9 4c ff ff ff       	jmp    c0014050 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014104:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014109:	75 10                	jne    c001411b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001410b:	83 ec 0c             	sub    esp,0xc
c001410e:	68 f0 2b 02 c0       	push   0xc0022bf0
c0014113:	e8 aa ab ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014118:	83 c4 10             	add    esp,0x10
c001411b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014120:	75 10                	jne    c0014132 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014122:	83 ec 0c             	sub    esp,0xc
c0014125:	68 f0 2b 02 c0       	push   0xc0022bf0
c001412a:	e8 93 ab ff ff       	call   c000ecc2 <KePanic(char const*)>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	31 d2                	xor    edx,edx
c0014134:	50                   	push   eax
c0014135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014139:	52                   	push   edx
c001413a:	50                   	push   eax
c001413b:	53                   	push   ebx
c001413c:	e8 ad 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014141:	5a                   	pop    edx
c0014142:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014146:	e8 30 a8 ff ff       	call   c000e97b <malloc>
c001414b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001414f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014153:	31 c9                	xor    ecx,ecx
c0014155:	5e                   	pop    esi
c0014156:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014158:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001415c:	55                   	push   ebp
c001415d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014161:	51                   	push   ecx
c0014162:	52                   	push   edx
c0014163:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014167:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001416b:	53                   	push   ebx
c001416c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001416f:	83 c4 14             	add    esp,0x14
c0014172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014176:	e8 00 a8 ff ff       	call   c000e97b <malloc>
c001417b:	89 c6                	mov    esi,eax
c001417d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001417f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014182:	56                   	push   esi
c0014183:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014187:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001418b:	51                   	push   ecx
c001418c:	52                   	push   edx
c001418d:	53                   	push   ebx
c001418e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014191:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014195:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c001419b:	83 c4 1c             	add    esp,0x1c
c001419e:	c1 e8 04             	shr    eax,0x4
c00141a1:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c00141a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ac:	31 d2                	xor    edx,edx
c00141ae:	52                   	push   edx
c00141af:	50                   	push   eax
c00141b0:	53                   	push   ebx
c00141b1:	e8 38 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00141b6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141b8:	31 d2                	xor    edx,edx
c00141ba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141bd:	56                   	push   esi
c00141be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141c2:	52                   	push   edx
c00141c3:	50                   	push   eax
c00141c4:	53                   	push   ebx
c00141c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c8:	83 c4 14             	add    esp,0x14
c00141cb:	53                   	push   ebx
c00141cc:	e8 bd 3f ff ff       	call   c000818e <File::close()>
c00141d1:	5d                   	pop    ebp
c00141d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141d6:	e8 b0 a7 ff ff       	call   c000e98b <free>
c00141db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141de:	e8 a8 a7 ff ff       	call   c000e98b <free>
c00141e3:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c00141e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141ec:	8d 50 01             	lea    edx,[eax+0x1]
c00141ef:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c00141f6:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00141fd:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c0014203:	83 c4 10             	add    esp,0x10
c0014206:	b0 01                	mov    al,0x1
c0014208:	83 c4 5c             	add    esp,0x5c
c001420b:	5b                   	pop    ebx
c001420c:	5e                   	pop    esi
c001420d:	5f                   	pop    edi
c001420e:	5d                   	pop    ebp
c001420f:	c3                   	ret    

c0014210 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014210:	55                   	push   ebp
c0014211:	57                   	push   edi
c0014212:	56                   	push   esi
c0014213:	53                   	push   ebx
c0014214:	81 ec 68 03 00 00    	sub    esp,0x368
c001421a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014221:	8b 1d d8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6d8
c0014227:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001422b:	68 14 01 00 00       	push   0x114
c0014230:	e8 46 a7 ff ff       	call   c000e97b <malloc>
c0014235:	83 c4 0c             	add    esp,0xc
c0014238:	89 c5                	mov    ebp,eax
c001423a:	53                   	push   ebx
c001423b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014242:	50                   	push   eax
c0014243:	e8 ca 3e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014248:	5e                   	pop    esi
c0014249:	5f                   	pop    edi
c001424a:	6a 01                	push   0x1
c001424c:	55                   	push   ebp
c001424d:	e8 de 3e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	85 c0                	test   eax,eax
c0014257:	0f 85 aa 06 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001425d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014265:	83 ec 0c             	sub    esp,0xc
c0014268:	6a 34                	push   0x34
c001426a:	e8 0c a7 ff ff       	call   c000e97b <malloc>
c001426f:	5b                   	pop    ebx
c0014270:	89 c7                	mov    edi,eax
c0014272:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014276:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014279:	53                   	push   ebx
c001427a:	57                   	push   edi
c001427b:	6a 00                	push   0x0
c001427d:	6a 34                	push   0x34
c001427f:	55                   	push   ebp
c0014280:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014283:	83 c4 20             	add    esp,0x20
c0014286:	85 c0                	test   eax,eax
c0014288:	0f 85 79 06 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001428e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014294:	0f 85 6d 06 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001429a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001429d:	85 c0                	test   eax,eax
c001429f:	0f 84 62 06 00 00    	je     c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142a5:	31 d2                	xor    edx,edx
c00142a7:	51                   	push   ecx
c00142a8:	52                   	push   edx
c00142a9:	50                   	push   eax
c00142aa:	55                   	push   ebp
c00142ab:	e8 3e 3f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00142b0:	83 c4 10             	add    esp,0x10
c00142b3:	85 c0                	test   eax,eax
c00142b5:	0f 85 4c 06 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142bb:	83 ec 0c             	sub    esp,0xc
c00142be:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00142c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00142c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142cd:	0f af c2             	imul   eax,edx
c00142d0:	50                   	push   eax
c00142d1:	e8 a5 a6 ff ff       	call   c000e97b <malloc>
c00142d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142e4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142ec:	0f af c2             	imul   eax,edx
c00142ef:	99                   	cdq    
c00142f0:	52                   	push   edx
c00142f1:	50                   	push   eax
c00142f2:	55                   	push   ebp
c00142f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142f6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00142f9:	83 c4 20             	add    esp,0x20
c00142fc:	85 c0                	test   eax,eax
c00142fe:	0f 84 03 06 00 00    	je     c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014304:	52                   	push   edx
c0014305:	31 d2                	xor    edx,edx
c0014307:	52                   	push   edx
c0014308:	50                   	push   eax
c0014309:	55                   	push   ebp
c001430a:	e8 df 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	85 c0                	test   eax,eax
c0014314:	0f 85 ed 05 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001431a:	83 ec 0c             	sub    esp,0xc
c001431d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014321:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014325:	31 f6                	xor    esi,esi
c0014327:	0f af c2             	imul   eax,edx
c001432a:	50                   	push   eax
c001432b:	e8 4b a6 ff ff       	call   c000e97b <malloc>
c0014330:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014333:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014337:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001433a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001433e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014342:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014346:	0f af c2             	imul   eax,edx
c0014349:	99                   	cdq    
c001434a:	52                   	push   edx
c001434b:	50                   	push   eax
c001434c:	55                   	push   ebp
c001434d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014350:	83 c4 20             	add    esp,0x20
c0014353:	0f b7 de             	movzx  ebx,si
c0014356:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001435a:	0f 83 87 00 00 00    	jae    c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014360:	c1 e3 05             	shl    ebx,0x5
c0014363:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014367:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001436a:	75 75                	jne    c00143e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001436c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001436f:	31 d2                	xor    edx,edx
c0014371:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014375:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001437c:	50                   	push   eax
c001437d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014380:	52                   	push   edx
c0014381:	50                   	push   eax
c0014382:	55                   	push   ebp
c0014383:	e8 66 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	85 c0                	test   eax,eax
c001438d:	0f 85 74 05 00 00    	jne    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014393:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001439a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001439d:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00143a1:	31 d2                	xor    edx,edx
c00143a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00143a7:	83 ec 0c             	sub    esp,0xc
c00143aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143ae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143b5:	50                   	push   eax
c00143b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143be:	52                   	push   edx
c00143bf:	50                   	push   eax
c00143c0:	55                   	push   ebp
c00143c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143c4:	83 c4 1c             	add    esp,0x1c
c00143c7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00143ca:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00143cd:	50                   	push   eax
c00143ce:	6a 00                	push   0x0
c00143d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00143d8:	50                   	push   eax
c00143d9:	e8 12 c1 fe ff       	call   c00004f0 <memset>
c00143de:	83 c4 10             	add    esp,0x10
c00143e1:	46                   	inc    esi
c00143e2:	e9 6c ff ff ff       	jmp    c0014353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00143e7:	53                   	push   ebx
c00143e8:	31 db                	xor    ebx,ebx
c00143ea:	68 00 01 00 00       	push   0x100
c00143ef:	6a 00                	push   0x0
c00143f1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00143f5:	50                   	push   eax
c00143f6:	e8 f5 c0 fe ff       	call   c00004f0 <memset>
c00143fb:	83 c4 0c             	add    esp,0xc
c00143fe:	68 00 01 00 00       	push   0x100
c0014403:	6a 00                	push   0x0
c0014405:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001440c:	50                   	push   eax
c001440d:	e8 de c0 fe ff       	call   c00004f0 <memset>
c0014412:	83 c4 10             	add    esp,0x10
c0014415:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001441d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014425:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001442d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014435:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001443d:	0f b7 f3             	movzx  esi,bx
c0014440:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014444:	0f 83 2d 01 00 00    	jae    c0014577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001444a:	6b f6 28             	imul   esi,esi,0x28
c001444d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014451:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014454:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014458:	52                   	push   edx
c0014459:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001445d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014461:	8b 06                	mov    eax,DWORD PTR [esi]
c0014463:	6b d2 28             	imul   edx,edx,0x28
c0014466:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001446a:	31 d2                	xor    edx,edx
c001446c:	52                   	push   edx
c001446d:	50                   	push   eax
c001446e:	55                   	push   ebp
c001446f:	e8 7a 3d ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014474:	83 c4 0c             	add    esp,0xc
c0014477:	6a 20                	push   0x20
c0014479:	6a 00                	push   0x0
c001447b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014482:	51                   	push   ecx
c0014483:	e8 68 c0 fe ff       	call   c00004f0 <memset>
c0014488:	59                   	pop    ecx
c0014489:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001448c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014490:	52                   	push   edx
c0014491:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014498:	51                   	push   ecx
c0014499:	6a 00                	push   0x0
c001449b:	6a 1f                	push   0x1f
c001449d:	55                   	push   ebp
c001449e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144a1:	83 c4 1c             	add    esp,0x1c
c00144a4:	6a 09                	push   0x9
c00144a6:	68 0a 2c 02 c0       	push   0xc0022c0a
c00144ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00144b2:	51                   	push   ecx
c00144b3:	e8 c8 be fe ff       	call   c0000380 <memcmp>
c00144b8:	83 c4 10             	add    esp,0x10
c00144bb:	85 c0                	test   eax,eax
c00144bd:	75 21                	jne    c00144e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00144bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144c7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00144cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00144cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144d2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144d9:	89 d0                	mov    eax,edx
c00144db:	40                   	inc    eax
c00144dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144e0:	50                   	push   eax
c00144e1:	6a 09                	push   0x9
c00144e3:	68 14 2c 02 c0       	push   0xc0022c14
c00144e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144ef:	50                   	push   eax
c00144f0:	e8 8b be fe ff       	call   c0000380 <memcmp>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	85 c0                	test   eax,eax
c00144fa:	75 21                	jne    c001451d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00144fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014500:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014508:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001450c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001450f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014516:	89 d0                	mov    eax,edx
c0014518:	40                   	inc    eax
c0014519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001451d:	50                   	push   eax
c001451e:	50                   	push   eax
c001451f:	68 e0 2b 02 c0       	push   0xc0022be0
c0014524:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001452b:	50                   	push   eax
c001452c:	e8 1f c2 fe ff       	call   c0000750 <strcmp>
c0014531:	83 c4 10             	add    esp,0x10
c0014534:	85 c0                	test   eax,eax
c0014536:	75 0f                	jne    c0014547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014538:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001453b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001453f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014543:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014547:	50                   	push   eax
c0014548:	50                   	push   eax
c0014549:	68 e8 2b 02 c0       	push   0xc0022be8
c001454e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014555:	50                   	push   eax
c0014556:	e8 f5 c1 fe ff       	call   c0000750 <strcmp>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	85 c0                	test   eax,eax
c0014560:	75 0f                	jne    c0014571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014562:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014565:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001456d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014571:	43                   	inc    ebx
c0014572:	e9 c6 fe ff ff       	jmp    c001443d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014577:	31 d2                	xor    edx,edx
c0014579:	50                   	push   eax
c001457a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457e:	52                   	push   edx
c001457f:	50                   	push   eax
c0014580:	55                   	push   ebp
c0014581:	e8 68 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014586:	58                   	pop    eax
c0014587:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001458b:	e8 eb a3 ff ff       	call   c000e97b <malloc>
c0014590:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014593:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014597:	31 d2                	xor    edx,edx
c0014599:	58                   	pop    eax
c001459a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001459e:	53                   	push   ebx
c001459f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00145a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00145a7:	52                   	push   edx
c00145a8:	50                   	push   eax
c00145a9:	55                   	push   ebp
c00145aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145ad:	83 c4 14             	add    esp,0x14
c00145b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145b4:	e8 c2 a3 ff ff       	call   c000e97b <malloc>
c00145b9:	31 d2                	xor    edx,edx
c00145bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00145bf:	83 c4 0c             	add    esp,0xc
c00145c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145c6:	52                   	push   edx
c00145c7:	50                   	push   eax
c00145c8:	55                   	push   ebp
c00145c9:	e8 20 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00145ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00145d1:	31 d2                	xor    edx,edx
c00145d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145de:	52                   	push   edx
c00145df:	50                   	push   eax
c00145e0:	55                   	push   ebp
c00145e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145e4:	83 c4 20             	add    esp,0x20
c00145e7:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00145ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00145f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145fc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014600:	0f 84 05 03 00 00    	je     c001490b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014606:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001460d:	31 d2                	xor    edx,edx
c001460f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014613:	c1 e8 03             	shr    eax,0x3
c0014616:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001461a:	51                   	push   ecx
c001461b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001461f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014623:	52                   	push   edx
c0014624:	50                   	push   eax
c0014625:	55                   	push   ebp
c0014626:	e8 c3 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001462b:	5b                   	pop    ebx
c001462c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014630:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014637:	e8 3f a3 ff ff       	call   c000e97b <malloc>
c001463c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001463f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014643:	31 d2                	xor    edx,edx
c0014645:	5e                   	pop    esi
c0014646:	8d 44 24 58          	lea    eax,[esp+0x58]
c001464a:	50                   	push   eax
c001464b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014653:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001465a:	52                   	push   edx
c001465b:	50                   	push   eax
c001465c:	55                   	push   ebp
c001465d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014660:	83 c4 20             	add    esp,0x20
c0014663:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001466b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001466f:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014673:	0f 8d 76 02 00 00    	jge    c00148ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014679:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001467d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014681:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014686:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001468d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014691:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014699:	c1 e8 08             	shr    eax,0x8
c001469c:	89 c6                	mov    esi,eax
c001469e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00146a2:	c1 e6 04             	shl    esi,0x4
c00146a5:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00146a9:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00146ac:	85 db                	test   ebx,ebx
c00146ae:	0f 85 b3 00 00 00    	jne    c0014767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146bb:	03 06                	add    eax,DWORD PTR [esi]
c00146bd:	50                   	push   eax
c00146be:	e8 40 f8 ff ff       	call   c0013f03 <Thr::getAddressOfKernelSymbol(char const*)>
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	89 c3                	mov    ebx,eax
c00146c8:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00146cd:	85 c0                	test   eax,eax
c00146cf:	0f 85 92 00 00 00    	jne    c0014767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146dc:	03 06                	add    eax,DWORD PTR [esi]
c00146de:	50                   	push   eax
c00146df:	e8 60 b0 ff ff       	call   c000f744 <KeResolveCompatibilitySymbol(char*)>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	89 c3                	mov    ebx,eax
c00146e9:	85 c0                	test   eax,eax
c00146eb:	75 7a                	jne    c0014767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146ed:	51                   	push   ecx
c00146ee:	51                   	push   ecx
c00146ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146f3:	03 06                	add    eax,DWORD PTR [esi]
c00146f5:	50                   	push   eax
c00146f6:	68 1e 2c 02 c0       	push   0xc0022c1e
c00146fb:	e8 64 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014700:	58                   	pop    eax
c0014701:	5a                   	pop    edx
c0014702:	68 38 2c 02 c0       	push   0xc0022c38
c0014707:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001470e:	50                   	push   eax
c001470f:	e8 2c bf fe ff       	call   c0000640 <strcpy>
c0014714:	59                   	pop    ecx
c0014715:	58                   	pop    eax
c0014716:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001471a:	03 06                	add    eax,DWORD PTR [esi]
c001471c:	50                   	push   eax
c001471d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014724:	50                   	push   eax
c0014725:	e8 16 c1 fe ff       	call   c0000840 <strcat>
c001472a:	58                   	pop    eax
c001472b:	5a                   	pop    edx
c001472c:	68 d2 2c 02 c0       	push   0xc0022cd2
c0014731:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014738:	50                   	push   eax
c0014739:	e8 02 c1 fe ff       	call   c0000840 <strcat>
c001473e:	83 c4 10             	add    esp,0x10
c0014741:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014746:	0f 84 5d 01 00 00    	je     c00148a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014756:	50                   	push   eax
c0014757:	e8 66 a5 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014763:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014767:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001476c:	83 f8 01             	cmp    eax,0x1
c001476f:	0f 85 8f 00 00 00    	jne    c0014804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014775:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001477c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014780:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014784:	01 ce                	add    esi,ecx
c0014786:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001478e:	0f 94 c0             	sete   al
c0014791:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014799:	0f 94 c2             	sete   dl
c001479c:	09 c2                	or     edx,eax
c001479e:	8b 06                	mov    eax,DWORD PTR [esi]
c00147a0:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00147a5:	0f b6 d2             	movzx  edx,dl
c00147a8:	74 41                	je     c00147eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00147aa:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00147ad:	85 d2                	test   edx,edx
c00147af:	75 15                	jne    c00147c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00147b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147b5:	66 83 f8 0c          	cmp    ax,0xc
c00147b9:	76 05                	jbe    c00147c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00147bb:	b8 0c 00 00 00       	mov    eax,0xc
c00147c0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147c4:	76 37                	jbe    c00147fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00147ca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147cf:	0f 84 d4 00 00 00    	je     c00148a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147d5:	83 ec 0c             	sub    esp,0xc
c00147d8:	68 4f 2c 02 c0       	push   0xc0022c4f
c00147dd:	e8 e0 a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00147e2:	83 c4 10             	add    esp,0x10
c00147e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00147e9:	eb 12                	jmp    c00147fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147eb:	01 c1                	add    ecx,eax
c00147ed:	85 d2                	test   edx,edx
c00147ef:	75 0c                	jne    c00147fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147f5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147f9:	77 02                	ja     c00147fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147fb:	01 d9                	add    ecx,ebx
c00147fd:	89 0e                	mov    DWORD PTR [esi],ecx
c00147ff:	e9 e2 00 00 00       	jmp    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014804:	83 f8 02             	cmp    eax,0x2
c0014807:	75 77                	jne    c0014880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014809:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014810:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014814:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014818:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014820:	74 21                	je     c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014822:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001482a:	74 17                	je     c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001482c:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014830:	b8 0a 00 00 00       	mov    eax,0xa
c0014835:	83 fa 0e             	cmp    edx,0xe
c0014838:	77 03                	ja     c001483d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001483a:	8d 42 fc             	lea    eax,[edx-0x4]
c001483d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014841:	76 17                	jbe    c001485a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014843:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014848:	74 5f                	je     c00148a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001484a:	83 ec 0c             	sub    esp,0xc
c001484d:	68 6b 2c 02 c0       	push   0xc0022c6b
c0014852:	e8 6b a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	8b 06                	mov    eax,DWORD PTR [esi]
c001485c:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014861:	74 13                	je     c0014876 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014863:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014867:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001486e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014872:	01 d0                	add    eax,edx
c0014874:	eb 04                	jmp    c001487a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014876:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001487a:	01 c3                	add    ebx,eax
c001487c:	89 1e                	mov    DWORD PTR [esi],ebx
c001487e:	eb 66                	jmp    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014880:	52                   	push   edx
c0014881:	52                   	push   edx
c0014882:	50                   	push   eax
c0014883:	68 87 2c 02 c0       	push   0xc0022c87
c0014888:	e8 d7 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001488d:	83 c4 10             	add    esp,0x10
c0014890:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014895:	74 12                	je     c00148a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	68 92 2c 02 c0       	push   0xc0022c92
c001489f:	e8 1e a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	eb 3d                	jmp    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00148a9:	83 ec 0c             	sub    esp,0xc
c00148ac:	55                   	push   ebp
c00148ad:	e8 dc 38 ff ff       	call   c000818e <File::close()>
c00148b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148bb:	59                   	pop    ecx
c00148bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148c0:	e8 c6 a0 ff ff       	call   c000e98b <free>
c00148c5:	5b                   	pop    ebx
c00148c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148ca:	e8 bc a0 ff ff       	call   c000e98b <free>
c00148cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148d2:	e8 b4 a0 ff ff       	call   c000e98b <free>
c00148d7:	5e                   	pop    esi
c00148d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148dc:	e8 aa a0 ff ff       	call   c000e98b <free>
c00148e1:	83 c4 10             	add    esp,0x10
c00148e4:	eb 21                	jmp    c0014907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148e6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00148ea:	e9 7c fd ff ff       	jmp    c001466b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00148ef:	83 ec 0c             	sub    esp,0xc
c00148f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148f6:	e8 90 a0 ff ff       	call   c000e98b <free>
c00148fb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00148ff:	83 c4 10             	add    esp,0x10
c0014902:	e9 f1 fc ff ff       	jmp    c00145f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014907:	31 c0                	xor    eax,eax
c0014909:	eb 33                	jmp    c001493e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001490b:	83 ec 0c             	sub    esp,0xc
c001490e:	55                   	push   ebp
c001490f:	e8 7a 38 ff ff       	call   c000818e <File::close()>
c0014914:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014917:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001491a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001491d:	58                   	pop    eax
c001491e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014922:	e8 64 a0 ff ff       	call   c000e98b <free>
c0014927:	89 3c 24             	mov    DWORD PTR [esp],edi
c001492a:	e8 5c a0 ff ff       	call   c000e98b <free>
c001492f:	5a                   	pop    edx
c0014930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014934:	e8 52 a0 ff ff       	call   c000e98b <free>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	b0 01                	mov    al,0x1
c001493e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014944:	5b                   	pop    ebx
c0014945:	5e                   	pop    esi
c0014946:	5f                   	pop    edi
c0014947:	5d                   	pop    ebp
c0014948:	c3                   	ret    

c0014949 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014949:	56                   	push   esi
c001494a:	31 d2                	xor    edx,edx
c001494c:	53                   	push   ebx
c001494d:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014957:	39 d3                	cmp    ebx,edx
c0014959:	7e 1b                	jle    c0014976 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001495b:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014962:	39 c8                	cmp    eax,ecx
c0014964:	77 0d                	ja     c0014973 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014966:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c001496d:	01 c6                	add    esi,eax
c001496f:	39 ce                	cmp    esi,ecx
c0014971:	77 05                	ja     c0014978 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014973:	42                   	inc    edx
c0014974:	eb e1                	jmp    c0014957 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014976:	31 c0                	xor    eax,eax
c0014978:	5b                   	pop    ebx
c0014979:	5e                   	pop    esi
c001497a:	c3                   	ret    

c001497b <Thr::getDriverNameFromAddress(unsigned long)>:
c001497b:	53                   	push   ebx
c001497c:	31 c0                	xor    eax,eax
c001497e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014982:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014988:	39 c3                	cmp    ebx,eax
c001498a:	7e 22                	jle    c00149ae <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001498c:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c0014993:	39 ca                	cmp    edx,ecx
c0014995:	77 14                	ja     c00149ab <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014997:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c001499e:	39 ca                	cmp    edx,ecx
c00149a0:	76 09                	jbe    c00149ab <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00149a2:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c00149a9:	eb 05                	jmp    c00149b0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00149ab:	40                   	inc    eax
c00149ac:	eb da                	jmp    c0014988 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00149ae:	31 c0                	xor    eax,eax
c00149b0:	5b                   	pop    ebx
c00149b1:	c3                   	ret    

c00149b2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00149b2:	53                   	push   ebx
c00149b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00149b7:	53                   	push   ebx
c00149b8:	e8 8c ff ff ff       	call   c0014949 <Thr::getDriverBaseFromAddress(unsigned long)>
c00149bd:	5a                   	pop    edx
c00149be:	31 d2                	xor    edx,edx
c00149c0:	85 c0                	test   eax,eax
c00149c2:	74 04                	je     c00149c8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00149c4:	89 da                	mov    edx,ebx
c00149c6:	29 c2                	sub    edx,eax
c00149c8:	89 d0                	mov    eax,edx
c00149ca:	5b                   	pop    ebx
c00149cb:	c3                   	ret    

c00149cc <Thr::loadDLL(char const*, bool)>:
c00149cc:	55                   	push   ebp
c00149cd:	57                   	push   edi
c00149ce:	56                   	push   esi
c00149cf:	53                   	push   ebx
c00149d0:	81 ec 34 01 00 00    	sub    esp,0x134
c00149d6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00149dd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00149e4:	56                   	push   esi
c00149e5:	68 aa 2c 02 c0       	push   0xc0022caa
c00149ea:	e8 75 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00149ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00149f6:	e8 80 9f ff ff       	call   c000e97b <malloc>
c00149fb:	83 c4 0c             	add    esp,0xc
c00149fe:	89 c3                	mov    ebx,eax
c0014a00:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0014a06:	56                   	push   esi
c0014a07:	50                   	push   eax
c0014a08:	e8 05 37 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	85 db                	test   ebx,ebx
c0014a12:	75 3c                	jne    c0014a50 <Thr::loadDLL(char const*, bool)+0x84>
c0014a14:	89 f8                	mov    eax,edi
c0014a16:	84 c0                	test   al,al
c0014a18:	0f 84 f3 01 00 00    	je     c0014c11 <Thr::loadDLL(char const*, bool)+0x245>
c0014a1e:	55                   	push   ebp
c0014a1f:	55                   	push   ebp
c0014a20:	68 bb 2c 02 c0       	push   0xc0022cbb
c0014a25:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014a29:	55                   	push   ebp
c0014a2a:	e8 11 bc fe ff       	call   c0000640 <strcpy>
c0014a2f:	58                   	pop    eax
c0014a30:	5a                   	pop    edx
c0014a31:	56                   	push   esi
c0014a32:	55                   	push   ebp
c0014a33:	e8 08 be fe ff       	call   c0000840 <strcat>
c0014a38:	59                   	pop    ecx
c0014a39:	58                   	pop    eax
c0014a3a:	68 d2 2c 02 c0       	push   0xc0022cd2
c0014a3f:	55                   	push   ebp
c0014a40:	e8 fb bd fe ff       	call   c0000840 <strcat>
c0014a45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a48:	e8 75 a2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014a4d:	83 c4 10             	add    esp,0x10
c0014a50:	51                   	push   ecx
c0014a51:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a55:	50                   	push   eax
c0014a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a5a:	50                   	push   eax
c0014a5b:	53                   	push   ebx
c0014a5c:	e8 d1 39 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0014a61:	83 c4 10             	add    esp,0x10
c0014a64:	89 c5                	mov    ebp,eax
c0014a66:	85 db                	test   ebx,ebx
c0014a68:	74 0c                	je     c0014a76 <Thr::loadDLL(char const*, bool)+0xaa>
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a6f:	53                   	push   ebx
c0014a70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	83 ec 0c             	sub    esp,0xc
c0014a79:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014a7e:	50                   	push   eax
c0014a7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a87:	55                   	push   ebp
c0014a88:	68 d4 2c 02 c0       	push   0xc0022cd4
c0014a8d:	e8 d2 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a92:	83 c4 20             	add    esp,0x20
c0014a95:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014a9a:	75 0a                	jne    c0014aa6 <Thr::loadDLL(char const*, bool)+0xda>
c0014a9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aa0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014aa4:	75 3c                	jne    c0014ae2 <Thr::loadDLL(char const*, bool)+0x116>
c0014aa6:	89 f8                	mov    eax,edi
c0014aa8:	84 c0                	test   al,al
c0014aaa:	0f 84 49 01 00 00    	je     c0014bf9 <Thr::loadDLL(char const*, bool)+0x22d>
c0014ab0:	51                   	push   ecx
c0014ab1:	51                   	push   ecx
c0014ab2:	68 f5 2c 02 c0       	push   0xc0022cf5
c0014ab7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014abb:	53                   	push   ebx
c0014abc:	e8 7f bb fe ff       	call   c0000640 <strcpy>
c0014ac1:	5d                   	pop    ebp
c0014ac2:	58                   	pop    eax
c0014ac3:	56                   	push   esi
c0014ac4:	53                   	push   ebx
c0014ac5:	e8 76 bd fe ff       	call   c0000840 <strcat>
c0014aca:	58                   	pop    eax
c0014acb:	5a                   	pop    edx
c0014acc:	68 d2 2c 02 c0       	push   0xc0022cd2
c0014ad1:	53                   	push   ebx
c0014ad2:	e8 69 bd fe ff       	call   c0000840 <strcat>
c0014ad7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ada:	e8 e3 a1 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014adf:	83 c4 10             	add    esp,0x10
c0014ae2:	52                   	push   edx
c0014ae3:	6a 03                	push   0x3
c0014ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014aed:	05 ff 0f 00 00       	add    eax,0xfff
c0014af2:	83 d2 00             	adc    edx,0x0
c0014af5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014af9:	50                   	push   eax
c0014afa:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b00:	e8 21 dd ff ff       	call   c0012826 <VAS::allocatePages(int, int)>
c0014b05:	59                   	pop    ecx
c0014b06:	89 c3                	mov    ebx,eax
c0014b08:	5d                   	pop    ebp
c0014b09:	50                   	push   eax
c0014b0a:	68 1a 24 02 c0       	push   0xc002241a
c0014b0f:	e8 50 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014b14:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b17:	e8 54 ba fe ff       	call   c0000570 <strlen>
c0014b1c:	8b 2d e0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bee0
c0014b22:	40                   	inc    eax
c0014b23:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b26:	e8 50 9e ff ff       	call   c000e97b <malloc>
c0014b2b:	89 04 ad 00 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3d00],eax
c0014b32:	58                   	pop    eax
c0014b33:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b38:	5a                   	pop    edx
c0014b39:	56                   	push   esi
c0014b3a:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014b41:	e8 fa ba fe ff       	call   c0000640 <strcpy>
c0014b46:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4e:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014b55:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014b5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b5f:	83 c4 0c             	add    esp,0xc
c0014b62:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014b69:	6a 01                	push   0x1
c0014b6b:	53                   	push   ebx
c0014b6c:	56                   	push   esi
c0014b6d:	e8 9e f6 ff ff       	call   c0014210 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b72:	83 c4 10             	add    esp,0x10
c0014b75:	0f b6 c0             	movzx  eax,al
c0014b78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b7c:	85 c0                	test   eax,eax
c0014b7e:	0f 85 89 00 00 00    	jne    c0014c0d <Thr::loadDLL(char const*, bool)+0x241>
c0014b84:	89 f8                	mov    eax,edi
c0014b86:	84 c0                	test   al,al
c0014b88:	74 73                	je     c0014bfd <Thr::loadDLL(char const*, bool)+0x231>
c0014b8a:	83 ec 0c             	sub    esp,0xc
c0014b8d:	68 0e 2d 02 c0       	push   0xc0022d0e
c0014b92:	e8 2b a1 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014b97:	83 c4 10             	add    esp,0x10
c0014b9a:	eb 61                	jmp    c0014bfd <Thr::loadDLL(char const*, bool)+0x231>
c0014b9c:	50                   	push   eax
c0014b9d:	50                   	push   eax
c0014b9e:	89 e8                	mov    eax,ebp
c0014ba0:	c1 e0 0c             	shl    eax,0xc
c0014ba3:	01 d8                	add    eax,ebx
c0014ba5:	50                   	push   eax
c0014ba6:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014bac:	e8 77 d7 ff ff       	call   c0012328 <VAS::getPageTableEntry(unsigned long)>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb6:	a8 60                	test   al,0x60
c0014bb8:	75 11                	jne    c0014bcb <Thr::loadDLL(char const*, bool)+0x1ff>
c0014bba:	83 ec 0c             	sub    esp,0xc
c0014bbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bc2:	50                   	push   eax
c0014bc3:	e8 85 a2 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	45                   	inc    ebp
c0014bcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bd4:	05 ff 0f 00 00       	add    eax,0xfff
c0014bd9:	bf 00 00 00 00       	mov    edi,0x0
c0014bde:	83 d2 00             	adc    edx,0x0
c0014be1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014be5:	c1 ea 0c             	shr    edx,0xc
c0014be8:	39 c5                	cmp    ebp,eax
c0014bea:	89 d1                	mov    ecx,edx
c0014bec:	89 f8                	mov    eax,edi
c0014bee:	19 c8                	sbb    eax,ecx
c0014bf0:	72 aa                	jb     c0014b9c <Thr::loadDLL(char const*, bool)+0x1d0>
c0014bf2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014bf7:	75 18                	jne    c0014c11 <Thr::loadDLL(char const*, bool)+0x245>
c0014bf9:	31 db                	xor    ebx,ebx
c0014bfb:	eb 14                	jmp    c0014c11 <Thr::loadDLL(char const*, bool)+0x245>
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	68 2d 2d 02 c0       	push   0xc0022d2d
c0014c05:	e8 b8 a0 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014c0a:	83 c4 10             	add    esp,0x10
c0014c0d:	31 ed                	xor    ebp,ebp
c0014c0f:	eb bb                	jmp    c0014bcc <Thr::loadDLL(char const*, bool)+0x200>
c0014c11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014c17:	89 d8                	mov    eax,ebx
c0014c19:	5b                   	pop    ebx
c0014c1a:	5e                   	pop    esi
c0014c1b:	5f                   	pop    edi
c0014c1c:	5d                   	pop    ebp
c0014c1d:	c3                   	ret    

c0014c1e <Thr::executeDLL(unsigned long, void*)>:
c0014c1e:	56                   	push   esi
c0014c1f:	53                   	push   ebx
c0014c20:	52                   	push   edx
c0014c21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c29:	85 db                	test   ebx,ebx
c0014c2b:	75 10                	jne    c0014c3d <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014c2d:	83 ec 0c             	sub    esp,0xc
c0014c30:	68 49 2d 02 c0       	push   0xc0022d49
c0014c35:	e8 88 a0 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	50                   	push   eax
c0014c3e:	50                   	push   eax
c0014c3f:	53                   	push   ebx
c0014c40:	68 73 2d 02 c0       	push   0xc0022d73
c0014c45:	e8 1a 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014c4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c4e:	89 d8                	mov    eax,ebx
c0014c50:	83 c4 14             	add    esp,0x14
c0014c53:	5b                   	pop    ebx
c0014c54:	5e                   	pop    esi
c0014c55:	ff e0                	jmp    eax

c0014c57 <KeProcessExec(Process*, char const*)>:
c0014c57:	56                   	push   esi
c0014c58:	53                   	push   ebx
c0014c59:	83 ec 04             	sub    esp,0x4
c0014c5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c60:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014c66:	85 f6                	test   esi,esi
c0014c68:	74 16                	je     c0014c80 <KeProcessExec(Process*, char const*)+0x29>
c0014c6a:	83 ec 0c             	sub    esp,0xc
c0014c6d:	56                   	push   esi
c0014c6e:	e8 47 d9 ff ff       	call   c00125ba <VAS::~VAS()>
c0014c73:	58                   	pop    eax
c0014c74:	5a                   	pop    edx
c0014c75:	6a 14                	push   0x14
c0014c77:	56                   	push   esi
c0014c78:	e8 83 7a ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0014c7d:	83 c4 10             	add    esp,0x10
c0014c80:	83 ec 0c             	sub    esp,0xc
c0014c83:	6a 14                	push   0x14
c0014c85:	e8 f1 9c ff ff       	call   c000e97b <malloc>
c0014c8a:	89 c6                	mov    esi,eax
c0014c8c:	58                   	pop    eax
c0014c8d:	5a                   	pop    edx
c0014c8e:	6a 00                	push   0x0
c0014c90:	56                   	push   esi
c0014c91:	e8 c4 dd ff ff       	call   c0012a5a <VAS::VAS(bool)>
c0014c96:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014c9c:	59                   	pop    ecx
c0014c9d:	5e                   	pop    esi
c0014c9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ca2:	50                   	push   eax
c0014ca3:	53                   	push   ebx
c0014ca4:	e8 35 f0 ff ff       	call   c0013cde <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014ca9:	83 c4 14             	add    esp,0x14
c0014cac:	31 c0                	xor    eax,eax
c0014cae:	5b                   	pop    ebx
c0014caf:	5e                   	pop    esi
c0014cb0:	c3                   	ret    
c0014cb1:	66 90                	xchg   ax,ax
c0014cb3:	90                   	nop

c0014cb4 <userModeEntryPoint(void*)>:
c0014cb4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0014cbc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014cc1:	85 c0                	test   eax,eax
c0014cc3:	75 03                	jne    c0014cc8 <userModeEntryPoint(void*)+0x14>
c0014cc5:	fb                   	sti    
c0014cc6:	66 90                	xchg   ax,ax
c0014cc8:	fb                   	sti    
c0014cc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014cd1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014cd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cdb:	e9 5f b5 fe ff       	jmp    c000023f <goToUsermode>

c0014ce0 <changeTSS>:
c0014ce0:	83 ec 14             	sub    esp,0x14
c0014ce3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ce8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ceb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014cf0:	c1 e2 15             	shl    edx,0x15
c0014cf3:	29 d0                	sub    eax,edx
c0014cf5:	50                   	push   eax
c0014cf6:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014cfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d01:	05 68 11 00 00       	add    eax,0x1168
c0014d06:	50                   	push   eax
c0014d07:	e8 f8 cb ff ff       	call   c0011904 <TSS::setESP(unsigned long)>
c0014d0c:	83 c4 1c             	add    esp,0x1c
c0014d0f:	c3                   	ret    

c0014d10 <switchToThread(ThreadControlBlock*)>:
c0014d10:	57                   	push   edi
c0014d11:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014d17:	56                   	push   esi
c0014d18:	85 c9                	test   ecx,ecx
c0014d1a:	53                   	push   ebx
c0014d1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d1f:	0f 85 8b 00 00 00    	jne    c0014db0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014d25:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014d29:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014d2f:	74 7b                	je     c0014dac <switchToThread(ThreadControlBlock*)+0x9c>
c0014d31:	b8 00 04 00 00       	mov    eax,0x400
c0014d36:	29 d0                	sub    eax,edx
c0014d38:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d3b:	d1 f8                	sar    eax,1
c0014d3d:	01 d0                	add    eax,edx
c0014d3f:	90                   	nop
c0014d40:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d43:	e8 8b 37 00 00       	call   c00184d3 <HalQueryPerformanceCounter()>
c0014d48:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014d4d:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014d53:	89 c6                	mov    esi,eax
c0014d55:	89 d7                	mov    edi,edx
c0014d57:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014d5d:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014d62:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014d68:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014d6e:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014d74:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d7a:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014d80:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014d83:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014d86:	01 c6                	add    esi,eax
c0014d88:	11 d7                	adc    edi,edx
c0014d8a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014d93:	53                   	push   ebx
c0014d94:	e8 de b4 fe ff       	call   c0000277 <switchToThreadASM>
c0014d99:	0f 20 c0             	mov    eax,cr0
c0014d9c:	83 c8 08             	or     eax,0x8
c0014d9f:	0f 22 c0             	mov    cr0,eax
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	5b                   	pop    ebx
c0014da6:	5e                   	pop    esi
c0014da7:	5f                   	pop    edi
c0014da8:	c3                   	ret    
c0014da9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dac:	31 c0                	xor    eax,eax
c0014dae:	eb 90                	jmp    c0014d40 <switchToThread(ThreadControlBlock*)+0x30>
c0014db0:	5b                   	pop    ebx
c0014db1:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014dbb:	5e                   	pop    esi
c0014dbc:	5f                   	pop    edi
c0014dbd:	c3                   	ret    
c0014dbe:	66 90                	xchg   ax,ax

c0014dc0 <Process::addArgs(char**)>:
c0014dc0:	57                   	push   edi
c0014dc1:	56                   	push   esi
c0014dc2:	53                   	push   ebx
c0014dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014dc7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014dcb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014dd5:	85 ff                	test   edi,edi
c0014dd7:	74 4f                	je     c0014e28 <Process::addArgs(char**)+0x68>
c0014dd9:	8b 07                	mov    eax,DWORD PTR [edi]
c0014ddb:	85 c0                	test   eax,eax
c0014ddd:	74 49                	je     c0014e28 <Process::addArgs(char**)+0x68>
c0014ddf:	31 db                	xor    ebx,ebx
c0014de1:	8d 76 00             	lea    esi,[esi+0x0]
c0014de4:	83 ec 0c             	sub    esp,0xc
c0014de7:	50                   	push   eax
c0014de8:	e8 83 b7 fe ff       	call   c0000570 <strlen>
c0014ded:	83 c0 01             	add    eax,0x1
c0014df0:	89 04 24             	mov    DWORD PTR [esp],eax
c0014df3:	e8 83 9b ff ff       	call   c000e97b <malloc>
c0014df8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014dff:	5a                   	pop    edx
c0014e00:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014e03:	59                   	pop    ecx
c0014e04:	83 c3 01             	add    ebx,0x1
c0014e07:	52                   	push   edx
c0014e08:	50                   	push   eax
c0014e09:	e8 32 b8 fe ff       	call   c0000640 <strcpy>
c0014e0e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	83 c1 01             	add    ecx,0x1
c0014e1a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014e20:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014e23:	85 c0                	test   eax,eax
c0014e25:	75 bd                	jne    c0014de4 <Process::addArgs(char**)+0x24>
c0014e27:	90                   	nop
c0014e28:	5b                   	pop    ebx
c0014e29:	5e                   	pop    esi
c0014e2a:	5f                   	pop    edi
c0014e2b:	c3                   	ret    

c0014e2c <Process::Process(char const*, Process*, char**)>:
c0014e2c:	56                   	push   esi
c0014e2d:	53                   	push   ebx
c0014e2e:	83 ec 14             	sub    esp,0x14
c0014e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e35:	05 0c 02 00 00       	add    eax,0x20c
c0014e3a:	bb 07 00 00 00       	mov    ebx,0x7
c0014e3f:	89 c6                	mov    esi,eax
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	85 db                	test   ebx,ebx
c0014e46:	78 14                	js     c0014e5c <Process::Process(char const*, Process*, char**)+0x30>
c0014e48:	83 ec 0c             	sub    esp,0xc
c0014e4b:	56                   	push   esi
c0014e4c:	e8 df b7 00 00       	call   c0020630 <ThreadControlBlock::ThreadControlBlock()>
c0014e51:	83 c4 10             	add    esp,0x10
c0014e54:	83 c6 5f             	add    esi,0x5f
c0014e57:	83 eb 01             	sub    ebx,0x1
c0014e5a:	eb e8                	jmp    c0014e44 <Process::Process(char const*, Process*, char**)+0x18>
c0014e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e60:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e6b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e72:	83 ec 0c             	sub    esp,0xc
c0014e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e79:	e8 82 8d ff ff       	call   c000dc00 <KeNewProcessEnv(Process*)>
c0014e7e:	83 c4 10             	add    esp,0x10
c0014e81:	89 c2                	mov    edx,eax
c0014e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e87:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e91:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014e9a:	a1 fc 45 02 c0       	mov    eax,ds:0xc00245fc
c0014e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea2:	89 15 fc 45 02 c0    	mov    DWORD PTR ds:0xc00245fc,edx
c0014ea8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014eac:	89 02                	mov    DWORD PTR [edx],eax
c0014eae:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014eb6:	83 ec 0c             	sub    esp,0xc
c0014eb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ebd:	e8 b9 9a ff ff       	call   c000e97b <malloc>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	89 c3                	mov    ebx,eax
c0014ec7:	83 ec 08             	sub    esp,0x8
c0014eca:	6a 00                	push   0x0
c0014ecc:	53                   	push   ebx
c0014ecd:	e8 88 db ff ff       	call   c0012a5a <VAS::VAS(bool)>
c0014ed2:	83 c4 10             	add    esp,0x10
c0014ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ef5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014efb:	e8 73 ae ff ff       	call   c000fd73 <KeInitSignals()>
c0014f00:	89 c2                	mov    edx,eax
c0014f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f06:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f16:	85 c0                	test   eax,eax
c0014f18:	74 42                	je     c0014f5c <Process::Process(char const*, Process*, char**)+0x130>
c0014f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f24:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f48:	05 0c 01 00 00       	add    eax,0x10c
c0014f4d:	83 ec 08             	sub    esp,0x8
c0014f50:	52                   	push   edx
c0014f51:	50                   	push   eax
c0014f52:	e8 e9 b6 fe ff       	call   c0000640 <strcpy>
c0014f57:	83 c4 10             	add    esp,0x10
c0014f5a:	eb 64                	jmp    c0014fc0 <Process::Process(char const*, Process*, char**)+0x194>
c0014f5c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f6b:	e8 0b 9a ff ff       	call   c000e97b <malloc>
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	89 c3                	mov    ebx,eax
c0014f75:	83 ec 08             	sub    esp,0x8
c0014f78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f7c:	53                   	push   ebx
c0014f7d:	e8 94 c6 ff ff       	call   c0011616 <VgaText::VgaText(char const*)>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f89:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f99:	83 ec 0c             	sub    esp,0xc
c0014f9c:	50                   	push   eax
c0014f9d:	e8 12 bf ff ff       	call   c0010eb4 <addToTerminalCycle(VgaText*)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa9:	05 0c 01 00 00       	add    eax,0x10c
c0014fae:	83 ec 08             	sub    esp,0x8
c0014fb1:	68 92 2d 02 c0       	push   0xc0022d92
c0014fb6:	50                   	push   eax
c0014fb7:	e8 84 b6 fe ff       	call   c0000640 <strcpy>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	90                   	nop
c0014fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc4:	83 c0 0c             	add    eax,0xc
c0014fc7:	83 ec 08             	sub    esp,0x8
c0014fca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fce:	50                   	push   eax
c0014fcf:	e8 6c b6 fe ff       	call   c0000640 <strcpy>
c0014fd4:	83 c4 10             	add    esp,0x10
c0014fd7:	83 ec 08             	sub    esp,0x8
c0014fda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014fde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fe2:	e8 d9 fd ff ff       	call   c0014dc0 <Process::addArgs(char**)>
c0014fe7:	83 c4 10             	add    esp,0x10
c0014fea:	83 ec 08             	sub    esp,0x8
c0014fed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff5:	e8 e4 ec ff ff       	call   c0013cde <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015001:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015005:	83 f0 01             	xor    eax,0x1
c0015008:	88 c2                	mov    dl,al
c001500a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001500e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015014:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015019:	83 ec 04             	sub    esp,0x4
c001501c:	50                   	push   eax
c001501d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015021:	68 ec 2d 02 c0       	push   0xc0022dec
c0015026:	e8 39 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001502b:	83 c4 10             	add    esp,0x10
c001502e:	90                   	nop
c001502f:	83 c4 14             	add    esp,0x14
c0015032:	5b                   	pop    ebx
c0015033:	5e                   	pop    esi
c0015034:	c3                   	ret    
c0015035:	90                   	nop
c0015036:	66 90                	xchg   ax,ax

c0015038 <Process::Process(bool, char const*, Process*, char**)>:
c0015038:	56                   	push   esi
c0015039:	53                   	push   ebx
c001503a:	83 ec 24             	sub    esp,0x24
c001503d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015041:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015049:	05 0c 02 00 00       	add    eax,0x20c
c001504e:	bb 07 00 00 00       	mov    ebx,0x7
c0015053:	89 c6                	mov    esi,eax
c0015055:	8d 76 00             	lea    esi,[esi+0x0]
c0015058:	85 db                	test   ebx,ebx
c001505a:	78 14                	js     c0015070 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001505c:	83 ec 0c             	sub    esp,0xc
c001505f:	56                   	push   esi
c0015060:	e8 cb b5 00 00       	call   c0020630 <ThreadControlBlock::ThreadControlBlock()>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	83 c6 5f             	add    esi,0x5f
c001506b:	83 eb 01             	sub    ebx,0x1
c001506e:	eb e8                	jmp    c0015058 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015074:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001507b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001507f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001508d:	e8 6e 8b ff ff       	call   c000dc00 <KeNewProcessEnv(Process*)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	89 c2                	mov    edx,eax
c0015097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001509b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00150a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00150ae:	a1 fc 45 02 c0       	mov    eax,ds:0xc00245fc
c00150b3:	8d 50 01             	lea    edx,[eax+0x1]
c00150b6:	89 15 fc 45 02 c0    	mov    DWORD PTR ds:0xc00245fc,edx
c00150bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00150c0:	89 02                	mov    DWORD PTR [edx],eax
c00150c2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00150ca:	83 ec 0c             	sub    esp,0xc
c00150cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150d1:	e8 a5 98 ff ff       	call   c000e97b <malloc>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	89 c3                	mov    ebx,eax
c00150db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00150e0:	83 ec 08             	sub    esp,0x8
c00150e3:	50                   	push   eax
c00150e4:	53                   	push   ebx
c00150e5:	e8 70 d9 ff ff       	call   c0012a5a <VAS::VAS(bool)>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150f1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00150f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150fb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015105:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015109:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001510d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015113:	e8 5b ac ff ff       	call   c000fd73 <KeInitSignals()>
c0015118:	89 c2                	mov    edx,eax
c001511a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015124:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015128:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001512e:	85 c0                	test   eax,eax
c0015130:	74 42                	je     c0015174 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015136:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001513c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015146:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001514c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015150:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015156:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001515c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015160:	05 0c 01 00 00       	add    eax,0x10c
c0015165:	83 ec 08             	sub    esp,0x8
c0015168:	52                   	push   edx
c0015169:	50                   	push   eax
c001516a:	e8 d1 b4 fe ff       	call   c0000640 <strcpy>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	eb 64                	jmp    c00151d8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015174:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015183:	e8 f3 97 ff ff       	call   c000e97b <malloc>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	89 c3                	mov    ebx,eax
c001518d:	83 ec 08             	sub    esp,0x8
c0015190:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015194:	53                   	push   ebx
c0015195:	e8 7c c4 ff ff       	call   c0011616 <VgaText::VgaText(char const*)>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151a1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00151a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b1:	83 ec 0c             	sub    esp,0xc
c00151b4:	50                   	push   eax
c00151b5:	e8 fa bc ff ff       	call   c0010eb4 <addToTerminalCycle(VgaText*)>
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151c1:	05 0c 01 00 00       	add    eax,0x10c
c00151c6:	83 ec 08             	sub    esp,0x8
c00151c9:	68 92 2d 02 c0       	push   0xc0022d92
c00151ce:	50                   	push   eax
c00151cf:	e8 6c b4 fe ff       	call   c0000640 <strcpy>
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	90                   	nop
c00151d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151dc:	83 c0 0c             	add    eax,0xc
c00151df:	83 ec 08             	sub    esp,0x8
c00151e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151e6:	50                   	push   eax
c00151e7:	e8 54 b4 fe ff       	call   c0000640 <strcpy>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	83 ec 08             	sub    esp,0x8
c00151f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00151f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151fa:	e8 c1 fb ff ff       	call   c0014dc0 <Process::addArgs(char**)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	90                   	nop
c0015203:	83 c4 24             	add    esp,0x24
c0015206:	5b                   	pop    ebx
c0015207:	5e                   	pop    esi
c0015208:	c3                   	ret    
c0015209:	8d 76 00             	lea    esi,[esi+0x0]

c001520c <taskStartupFunction>:
c001520c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015211:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015214:	c3                   	ret    
c0015215:	8d 76 00             	lea    esi,[esi+0x0]

c0015218 <KeDisablePreemption()>:
c0015218:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c001521d:	85 c0                	test   eax,eax
c001521f:	75 13                	jne    c0015234 <KeDisablePreemption()+0x1c>
c0015221:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c0015227:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c001522e:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015234:	83 c0 01             	add    eax,0x1
c0015237:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001523c:	c3                   	ret    
c001523d:	8d 76 00             	lea    esi,[esi+0x0]

c0015240 <KeRestorePreemption()>:
c0015240:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015245:	83 e8 01             	sub    eax,0x1
c0015248:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001524d:	75 0d                	jne    c001525c <KeRestorePreemption()+0x1c>
c001524f:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015254:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015259:	8d 76 00             	lea    esi,[esi+0x0]
c001525c:	c3                   	ret    
c001525d:	90                   	nop
c001525e:	66 90                	xchg   ax,ax

c0015260 <Process::createThread(void (*)(void*), void*, int)>:
c0015260:	57                   	push   edi
c0015261:	31 c9                	xor    ecx,ecx
c0015263:	56                   	push   esi
c0015264:	53                   	push   ebx
c0015265:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015269:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015270:	89 f2                	mov    edx,esi
c0015272:	66 90                	xchg   ax,ax
c0015274:	0f b7 c2             	movzx  eax,dx
c0015277:	80 e2 01             	and    dl,0x1
c001527a:	74 14                	je     c0015290 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001527c:	d1 f8                	sar    eax,1
c001527e:	83 c1 01             	add    ecx,0x1
c0015281:	89 c2                	mov    edx,eax
c0015283:	83 f9 10             	cmp    ecx,0x10
c0015286:	75 ec                	jne    c0015274 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015288:	31 db                	xor    ebx,ebx
c001528a:	89 d8                	mov    eax,ebx
c001528c:	5b                   	pop    ebx
c001528d:	5e                   	pop    esi
c001528e:	5f                   	pop    edi
c001528f:	c3                   	ret    
c0015290:	b8 01 00 00 00       	mov    eax,0x1
c0015295:	d3 e0                	shl    eax,cl
c0015297:	09 c6                	or     esi,eax
c0015299:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001529c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00152a3:	01 c0                	add    eax,eax
c00152a5:	01 c8                	add    eax,ecx
c00152a7:	8d 04 80             	lea    eax,[eax+eax*4]
c00152aa:	01 d8                	add    eax,ebx
c00152ac:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00152b3:	75 0b                	jne    c00152c0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00152b5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00152bf:	90                   	nop
c00152c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00152cc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00152cf:	01 c0                	add    eax,eax
c00152d1:	01 c8                	add    eax,ecx
c00152d3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00152d6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00152d9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00152df:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00152e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152e9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00152ef:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00152f5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00152fb:	89 ca                	mov    edx,ecx
c00152fd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015304:	f7 da                	neg    edx
c0015306:	c1 e2 15             	shl    edx,0x15
c0015309:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001530f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015315:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015319:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015323:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015329:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001532d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015333:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001533d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015347:	68 00 01 00 00       	push   0x100
c001534c:	e8 2a 96 ff ff       	call   c000e97b <malloc>
c0015351:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015354:	58                   	pop    eax
c0015355:	5a                   	pop    edx
c0015356:	53                   	push   ebx
c0015357:	68 cc c6 02 c0       	push   0xc002c6cc
c001535c:	e8 7b ae 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	89 d8                	mov    eax,ebx
c0015366:	5b                   	pop    ebx
c0015367:	5e                   	pop    esi
c0015368:	5f                   	pop    edi
c0015369:	c3                   	ret    
c001536a:	66 90                	xchg   ax,ax

c001536c <Process::createUserThread()>:
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	68 80 00 00 00       	push   0x80
c0015374:	6a 00                	push   0x0
c0015376:	68 b4 4c 01 c0       	push   0xc0014cb4
c001537b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001537f:	50                   	push   eax
c0015380:	e8 db fe ff ff       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c0015385:	83 c4 1c             	add    esp,0x1c
c0015388:	c3                   	ret    
c0015389:	8d 76 00             	lea    esi,[esi+0x0]

c001538c <setupMultitasking(void (*)())>:
c001538c:	56                   	push   esi
c001538d:	53                   	push   ebx
c001538e:	83 ec 04             	sub    esp,0x4
c0015391:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015395:	eb 11                	jmp    c00153a8 <setupMultitasking(void (*)())+0x1c>
c0015397:	90                   	nop
c0015398:	83 ec 0c             	sub    esp,0xc
c001539b:	68 cc c6 02 c0       	push   0xc002c6cc
c00153a0:	e8 7b ad 00 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	68 cc c6 02 c0       	push   0xc002c6cc
c00153b0:	e8 47 ad 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	84 c0                	test   al,al
c00153ba:	74 dc                	je     c0015398 <setupMultitasking(void (*)())+0xc>
c00153bc:	83 ec 0c             	sub    esp,0xc
c00153bf:	68 24 07 00 00       	push   0x724
c00153c4:	e8 b2 95 ff ff       	call   c000e97b <malloc>
c00153c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153d0:	89 c3                	mov    ebx,eax
c00153d2:	6a 00                	push   0x0
c00153d4:	68 96 2d 02 c0       	push   0xc0022d96
c00153d9:	6a 01                	push   0x1
c00153db:	50                   	push   eax
c00153dc:	e8 57 fc ff ff       	call   c0015038 <Process::Process(bool, char const*, Process*, char**)>
c00153e1:	83 c4 14             	add    esp,0x14
c00153e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00153ea:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c00153f0:	50                   	push   eax
c00153f1:	e8 13 bd ff ff       	call   c0011109 <setActiveTerminal(VgaText*)>
c00153f6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00153fd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015407:	83 c8 01             	or     eax,0x1
c001540a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015411:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015417:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001541a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015424:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001542a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015430:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001543a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015444:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001544e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015454:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001545e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015464:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001546e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015475:	e8 01 95 ff ff       	call   c000e97b <malloc>
c001547a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015480:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015486:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001548c:	5a                   	pop    edx
c001548d:	59                   	pop    ecx
c001548e:	68 92 2d 02 c0       	push   0xc0022d92
c0015493:	50                   	push   eax
c0015494:	e8 a7 b1 fe ff       	call   c0000640 <strcpy>
c0015499:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00154a0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00154a4:	83 c4 14             	add    esp,0x14
c00154a7:	5b                   	pop    ebx
c00154a8:	5e                   	pop    esi
c00154a9:	e9 bb ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00154ae:	66 90                	xchg   ax,ax

c00154b0 <schedule()>:
c00154b0:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00154b6:	85 d2                	test   edx,edx
c00154b8:	74 0e                	je     c00154c8 <schedule()+0x18>
c00154ba:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c00154c4:	c3                   	ret    
c00154c5:	8d 76 00             	lea    esi,[esi+0x0]
c00154c8:	53                   	push   ebx
c00154c9:	83 ec 14             	sub    esp,0x14
c00154cc:	68 cc c6 02 c0       	push   0xc002c6cc
c00154d1:	e8 26 ac 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	84 c0                	test   al,al
c00154db:	75 3f                	jne    c001551c <schedule()+0x6c>
c00154dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00154e5:	83 fa 01             	cmp    edx,0x1
c00154e8:	74 3a                	je     c0015524 <schedule()+0x74>
c00154ea:	66 90                	xchg   ax,ax
c00154ec:	83 ec 0c             	sub    esp,0xc
c00154ef:	68 cc c6 02 c0       	push   0xc002c6cc
c00154f4:	e8 1f ac 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154f9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015500:	89 c3                	mov    ebx,eax
c0015502:	e8 19 ac 00 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015507:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001550e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015511:	e8 fa f7 ff ff       	call   c0014d10 <switchToThread(ThreadControlBlock*)>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	83 c4 08             	add    esp,0x8
c001551f:	5b                   	pop    ebx
c0015520:	c3                   	ret    
c0015521:	8d 76 00             	lea    esi,[esi+0x0]
c0015524:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001552b:	83 ec 08             	sub    esp,0x8
c001552e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015533:	50                   	push   eax
c0015534:	68 cc c6 02 c0       	push   0xc002c6cc
c0015539:	e8 9e ac 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	eb a9                	jmp    c00154ec <schedule()+0x3c>
c0015543:	90                   	nop

c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001554c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015550:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015553:	e8 58 ff ff ff       	call   c00154b0 <schedule()>
c0015558:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015560:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015565:	85 c0                	test   eax,eax
c0015567:	75 03                	jne    c001556c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015569:	fb                   	sti    
c001556a:	66 90                	xchg   ax,ax
c001556c:	83 c4 0c             	add    esp,0xc
c001556f:	c3                   	ret    

c0015570 <blockTask(TaskState)>:
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	fa                   	cli    
c0015574:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015579:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001557d:	83 c0 01             	add    eax,0x1
c0015580:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001558a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001558d:	e8 1e ff ff ff       	call   c00154b0 <schedule()>
c0015592:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001559a:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00155a0:	85 d2                	test   edx,edx
c00155a2:	75 04                	jne    c00155a8 <blockTask(TaskState)+0x38>
c00155a4:	fb                   	sti    
c00155a5:	8d 76 00             	lea    esi,[esi+0x0]
c00155a8:	83 c4 0c             	add    esp,0xc
c00155ab:	c3                   	ret    

c00155ac <waitTask(int, int*, int)>:
c00155ac:	83 ec 18             	sub    esp,0x18
c00155af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00155b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00155bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00155c7:	6a 07                	push   0x7
c00155c9:	e8 a2 ff ff ff       	call   c0015570 <blockTask(TaskState)>
c00155ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155d9:	85 d2                	test   edx,edx
c00155db:	74 0b                	je     c00155e8 <waitTask(int, int*, int)+0x3c>
c00155dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155e0:	89 02                	mov    DWORD PTR [edx],eax
c00155e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e7:	90                   	nop
c00155e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00155eb:	83 c4 0c             	add    esp,0xc
c00155ee:	c3                   	ret    
c00155ef:	90                   	nop

c00155f0 <milliTenthSleepUntil(unsigned int)>:
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155f7:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c00155fd:	76 05                	jbe    c0015604 <milliTenthSleepUntil(unsigned int)+0x14>
c00155ff:	90                   	nop
c0015600:	83 c4 0c             	add    esp,0xc
c0015603:	c3                   	ret    
c0015604:	fa                   	cli    
c0015605:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001560b:	83 ec 08             	sub    esp,0x8
c001560e:	83 c1 01             	add    ecx,0x1
c0015611:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c0015617:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001561d:	83 c2 01             	add    edx,0x1
c0015620:	89 15 ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,edx
c0015626:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001562c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001562f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015635:	51                   	push   ecx
c0015636:	68 c0 c6 02 c0       	push   0xc002c6c0
c001563b:	e8 9c ab 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015640:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015647:	e8 24 ff ff ff       	call   c0015570 <blockTask(TaskState)>
c001564c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	83 e8 01             	sub    eax,0x1
c0015657:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c001565c:	85 c0                	test   eax,eax
c001565e:	75 0c                	jne    c001566c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015660:	8b 15 a8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a8
c0015666:	85 d2                	test   edx,edx
c0015668:	75 1a                	jne    c0015684 <milliTenthSleepUntil(unsigned int)+0x94>
c001566a:	66 90                	xchg   ax,ax
c001566c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015679:	85 c0                	test   eax,eax
c001567b:	75 83                	jne    c0015600 <milliTenthSleepUntil(unsigned int)+0x10>
c001567d:	fb                   	sti    
c001567e:	83 c4 0c             	add    esp,0xc
c0015681:	c3                   	ret    
c0015682:	66 90                	xchg   ax,ax
c0015684:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c001568e:	e8 1d fe ff ff       	call   c00154b0 <schedule()>
c0015693:	eb d7                	jmp    c001566c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015695:	8d 76 00             	lea    esi,[esi+0x0]

c0015698 <milliTenthSleep(unsigned int)>:
c0015698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001569c:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00156a1:	01 c2                	add    edx,eax
c00156a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00156a7:	e9 44 ff ff ff       	jmp    c00155f0 <milliTenthSleepUntil(unsigned int)>

c00156ac <sleep(unsigned int)>:
c00156ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156b0:	8d 04 80             	lea    eax,[eax+eax*4]
c00156b3:	8d 04 80             	lea    eax,[eax+eax*4]
c00156b6:	8d 04 80             	lea    eax,[eax+eax*4]
c00156b9:	8d 04 80             	lea    eax,[eax+eax*4]
c00156bc:	c1 e0 04             	shl    eax,0x4
c00156bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156c3:	eb d3                	jmp    c0015698 <milliTenthSleep(unsigned int)>
c00156c5:	8d 76 00             	lea    esi,[esi+0x0]

c00156c8 <taskReturned>:
c00156c8:	83 ec 18             	sub    esp,0x18
c00156cb:	68 18 2e 02 c0       	push   0xc0022e18
c00156d0:	e8 ed 95 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	83 ec 0c             	sub    esp,0xc
c00156db:	6a 02                	push   0x2
c00156dd:	e8 8e fe ff ff       	call   c0015570 <blockTask(TaskState)>
c00156e2:	fa                   	cli    
c00156e3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156e8:	83 c0 01             	add    eax,0x1
c00156eb:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156f0:	e8 bb fd ff ff       	call   c00154b0 <schedule()>
c00156f5:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156fd:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	85 d2                	test   edx,edx
c0015708:	75 ce                	jne    c00156d8 <taskReturned+0x10>
c001570a:	fb                   	sti    
c001570b:	eb cb                	jmp    c00156d8 <taskReturned+0x10>
c001570d:	8d 76 00             	lea    esi,[esi+0x0]

c0015710 <Thr::processFromPID(int)>:
c0015710:	57                   	push   edi
c0015711:	56                   	push   esi
c0015712:	53                   	push   ebx
c0015713:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015717:	fa                   	cli    
c0015718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001571d:	83 ec 0c             	sub    esp,0xc
c0015720:	83 c0 01             	add    eax,0x1
c0015723:	68 cc c6 02 c0       	push   0xc002c6cc
c0015728:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001572d:	e8 e6 a9 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	89 c7                	mov    edi,eax
c0015737:	eb 17                	jmp    c0015750 <Thr::processFromPID(int)+0x40>
c0015739:	8d 76 00             	lea    esi,[esi+0x0]
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015744:	e8 cf a9 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	39 f8                	cmp    eax,edi
c001574e:	74 50                	je     c00157a0 <Thr::processFromPID(int)+0x90>
c0015750:	83 ec 0c             	sub    esp,0xc
c0015753:	68 cc c6 02 c0       	push   0xc002c6cc
c0015758:	e8 bb a9 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001575d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015764:	89 c3                	mov    ebx,eax
c0015766:	e8 b5 a9 00 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001576b:	59                   	pop    ecx
c001576c:	58                   	pop    eax
c001576d:	53                   	push   ebx
c001576e:	68 cc c6 02 c0       	push   0xc002c6cc
c0015773:	e8 64 aa 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015778:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	39 30                	cmp    DWORD PTR [eax],esi
c0015780:	75 ba                	jne    c001573c <Thr::processFromPID(int)+0x2c>
c0015782:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001578a:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015790:	85 d2                	test   edx,edx
c0015792:	74 08                	je     c001579c <Thr::processFromPID(int)+0x8c>
c0015794:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015797:	5b                   	pop    ebx
c0015798:	5e                   	pop    esi
c0015799:	5f                   	pop    edi
c001579a:	c3                   	ret    
c001579b:	90                   	nop
c001579c:	fb                   	sti    
c001579d:	eb f5                	jmp    c0015794 <Thr::processFromPID(int)+0x84>
c001579f:	90                   	nop
c00157a0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00157a8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00157ad:	85 c0                	test   eax,eax
c00157af:	75 07                	jne    c00157b8 <Thr::processFromPID(int)+0xa8>
c00157b1:	fb                   	sti    
c00157b2:	31 c0                	xor    eax,eax
c00157b4:	5b                   	pop    ebx
c00157b5:	5e                   	pop    esi
c00157b6:	5f                   	pop    edi
c00157b7:	c3                   	ret    
c00157b8:	5b                   	pop    ebx
c00157b9:	31 c0                	xor    eax,eax
c00157bb:	5e                   	pop    esi
c00157bc:	5f                   	pop    edi
c00157bd:	c3                   	ret    
c00157be:	66 90                	xchg   ax,ax

c00157c0 <unblockTask(ThreadControlBlock*)>:
c00157c0:	53                   	push   ebx
c00157c1:	83 ec 08             	sub    esp,0x8
c00157c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157c8:	fa                   	cli    
c00157c9:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00157cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157d2:	83 c2 01             	add    edx,0x1
c00157d5:	85 c0                	test   eax,eax
c00157d7:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00157dd:	74 6d                	je     c001584c <unblockTask(ThreadControlBlock*)+0x8c>
c00157df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157e2:	83 f8 01             	cmp    eax,0x1
c00157e5:	74 39                	je     c0015820 <unblockTask(ThreadControlBlock*)+0x60>
c00157e7:	83 ec 0c             	sub    esp,0xc
c00157ea:	68 cc c6 02 c0       	push   0xc002c6cc
c00157ef:	e8 24 a9 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	85 c0                	test   eax,eax
c00157f9:	75 1d                	jne    c0015818 <unblockTask(ThreadControlBlock*)+0x58>
c00157fb:	eb 63                	jmp    c0015860 <unblockTask(ThreadControlBlock*)+0xa0>
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015800:	83 ec 08             	sub    esp,0x8
c0015803:	50                   	push   eax
c0015804:	68 cc c6 02 c0       	push   0xc002c6cc
c0015809:	e8 16 ae 00 00       	call   c0020624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	85 c0                	test   eax,eax
c0015813:	74 4b                	je     c0015860 <unblockTask(ThreadControlBlock*)+0xa0>
c0015815:	8d 76 00             	lea    esi,[esi+0x0]
c0015818:	39 c3                	cmp    ebx,eax
c001581a:	75 e4                	jne    c0015800 <unblockTask(ThreadControlBlock*)+0x40>
c001581c:	eb 12                	jmp    c0015830 <unblockTask(ThreadControlBlock*)+0x70>
c001581e:	66 90                	xchg   ax,ax
c0015820:	83 ec 0c             	sub    esp,0xc
c0015823:	68 b4 2d 02 c0       	push   0xc0022db4
c0015828:	e8 37 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015838:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001583d:	85 c0                	test   eax,eax
c001583f:	75 03                	jne    c0015844 <unblockTask(ThreadControlBlock*)+0x84>
c0015841:	fb                   	sti    
c0015842:	66 90                	xchg   ax,ax
c0015844:	83 c4 08             	add    esp,0x8
c0015847:	5b                   	pop    ebx
c0015848:	c3                   	ret    
c0015849:	8d 76 00             	lea    esi,[esi+0x0]
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	68 9d 2d 02 c0       	push   0xc0022d9d
c0015854:	e8 0b 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	eb d2                	jmp    c0015830 <unblockTask(ThreadControlBlock*)+0x70>
c001585e:	66 90                	xchg   ax,ax
c0015860:	83 ec 08             	sub    esp,0x8
c0015863:	53                   	push   ebx
c0015864:	68 cc c6 02 c0       	push   0xc002c6cc
c0015869:	e8 6e a9 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001586e:	83 c4 10             	add    esp,0x10
c0015871:	eb bd                	jmp    c0015830 <unblockTask(ThreadControlBlock*)+0x70>
c0015873:	90                   	nop

c0015874 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015874:	55                   	push   ebp
c0015875:	57                   	push   edi
c0015876:	56                   	push   esi
c0015877:	53                   	push   ebx
c0015878:	83 ec 1c             	sub    esp,0x1c
c001587b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001587f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015882:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015888:	85 ed                	test   ebp,ebp
c001588a:	7e 28                	jle    c00158b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001588c:	31 f6                	xor    esi,esi
c001588e:	66 90                	xchg   ax,ax
c0015890:	83 ec 0c             	sub    esp,0xc
c0015893:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001589a:	83 c6 01             	add    esi,0x1
c001589d:	57                   	push   edi
c001589e:	e8 e8 90 ff ff       	call   c000e98b <free>
c00158a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158a6:	83 c4 10             	add    esp,0x10
c00158a9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00158af:	7f df                	jg     c0015890 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00158b1:	8d 76 00             	lea    esi,[esi+0x0]
c00158b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00158c3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00158c6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00158c9:	d3 c0                	rol    eax,cl
c00158cb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00158d2:	21 c8                	and    eax,ecx
c00158d4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00158db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158de:	89 f7                	mov    edi,esi
c00158e0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00158e8:	0f 85 72 01 00 00    	jne    c0015a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00158ee:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00158f4:	85 ed                	test   ebp,ebp
c00158f6:	74 1c                	je     c0015914 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	55                   	push   ebp
c00158fc:	e8 1b 82 ff ff       	call   c000db1c <EnvVarContainer::~EnvVarContainer()>
c0015901:	59                   	pop    ecx
c0015902:	5e                   	pop    esi
c0015903:	6a 0c                	push   0xc
c0015905:	55                   	push   ebp
c0015906:	e8 f5 6d ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001590b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	89 f7                	mov    edi,esi
c0015913:	90                   	nop
c0015914:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001591a:	85 c0                	test   eax,eax
c001591c:	0f 84 b2 00 00 00    	je     c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015922:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015929:	31 c9                	xor    ecx,ecx
c001592b:	eb 17                	jmp    c0015944 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001592d:	8d 76 00             	lea    esi,[esi+0x0]
c0015930:	83 c1 01             	add    ecx,0x1
c0015933:	83 f9 10             	cmp    ecx,0x10
c0015936:	0f 84 98 00 00 00    	je     c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001593c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015942:	66 90                	xchg   ax,ax
c0015944:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001594b:	d3 fa                	sar    edx,cl
c001594d:	80 e2 01             	and    dl,0x1
c0015950:	74 de                	je     c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015952:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015955:	01 d2                	add    edx,edx
c0015957:	01 ca                	add    edx,ecx
c0015959:	8d 14 92             	lea    edx,[edx+edx*4]
c001595c:	01 d0                	add    eax,edx
c001595e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015964:	83 fd 07             	cmp    ebp,0x7
c0015967:	75 c7                	jne    c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015969:	05 40 02 00 00       	add    eax,0x240
c001596e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015971:	83 fd ff             	cmp    ebp,0xffffffff
c0015974:	0f 8c ee 00 00 00    	jl     c0015a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001597a:	0f 84 ac 01 00 00    	je     c0015b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015980:	85 ed                	test   ebp,ebp
c0015982:	0f 84 90 01 00 00    	je     c0015b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015988:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001598a:	75 a4                	jne    c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001598c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015992:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015996:	01 d0                	add    eax,edx
c0015998:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00159a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159ae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00159b5:	50                   	push   eax
c00159b6:	e8 05 fe ff ff       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159c5:	89 f7                	mov    edi,esi
c00159c7:	83 c1 01             	add    ecx,0x1
c00159ca:	83 f9 10             	cmp    ecx,0x10
c00159cd:	0f 85 69 ff ff ff    	jne    c001593c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00159d3:	90                   	nop
c00159d4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00159da:	85 c0                	test   eax,eax
c00159dc:	74 62                	je     c0015a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159de:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00159e4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00159ea:	74 54                	je     c0015a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	68 cc c6 02 c0       	push   0xc002c6cc
c00159f4:	e8 1f a7 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159f9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a00:	89 c7                	mov    edi,eax
c0015a02:	e8 f5 a6 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	84 c0                	test   al,al
c0015a0c:	0f 84 ce 00 00 00    	je     c0015ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015a12:	66 90                	xchg   ax,ax
c0015a14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a17:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a1d:	85 d2                	test   edx,edx
c0015a1f:	74 0f                	je     c0015a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015a21:	83 ec 0c             	sub    esp,0xc
c0015a24:	8b 02                	mov    eax,DWORD PTR [edx]
c0015a26:	52                   	push   edx
c0015a27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a2a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015a3a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a40:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015a46:	85 db                	test   ebx,ebx
c0015a48:	74 16                	je     c0015a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	53                   	push   ebx
c0015a4e:	e8 67 cb ff ff       	call   c00125ba <VAS::~VAS()>
c0015a53:	58                   	pop    eax
c0015a54:	5a                   	pop    edx
c0015a55:	6a 14                	push   0x14
c0015a57:	53                   	push   ebx
c0015a58:	e8 a3 6c ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	83 c4 1c             	add    esp,0x1c
c0015a63:	5b                   	pop    ebx
c0015a64:	5e                   	pop    esi
c0015a65:	5f                   	pop    edi
c0015a66:	5d                   	pop    ebp
c0015a67:	c3                   	ret    
c0015a68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	68 4c 2e 02 c0       	push   0xc0022e4c
c0015a74:	e8 49 92 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0015a79:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	89 f7                	mov    edi,esi
c0015a81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a85:	e9 a6 fe ff ff       	jmp    c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a92:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015a98:	75 1e                	jne    c0015ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a9a:	83 ec 0c             	sub    esp,0xc
c0015a9d:	68 b4 2e 02 c0       	push   0xc0022eb4
c0015aa2:	e8 bd 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015aa7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015aae:	e8 bd fa ff ff       	call   c0015570 <blockTask(TaskState)>
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	66 90                	xchg   ax,ax
c0015ab8:	83 ec 08             	sub    esp,0x8
c0015abb:	56                   	push   esi
c0015abc:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ac1:	e8 16 a7 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ac6:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015acd:	e8 46 a6 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	39 f8                	cmp    eax,edi
c0015ad7:	0f 84 37 ff ff ff    	je     c0015a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015add:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ae8:	e8 2b a6 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015aed:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015af4:	89 c6                	mov    esi,eax
c0015af6:	e8 25 a6 00 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	39 f3                	cmp    ebx,esi
c0015b00:	74 b6                	je     c0015ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b02:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015b05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b08:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015b0e:	75 a8                	jne    c0015ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b10:	e9 77 ff ff ff       	jmp    c0015a8c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015b15:	8d 76 00             	lea    esi,[esi+0x0]
c0015b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b1c:	83 ec 0c             	sub    esp,0xc
c0015b1f:	68 80 2e 02 c0       	push   0xc0022e80
c0015b24:	e9 4b ff ff ff       	jmp    c0015a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015b29:	8d 76 00             	lea    esi,[esi+0x0]
c0015b2c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015b2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b32:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015b35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b38:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015b3e:	01 d7                	add    edi,edx
c0015b40:	89 f8                	mov    eax,edi
c0015b42:	e9 51 fe ff ff       	jmp    c0015998 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015b47:	90                   	nop

c0015b48 <cleanerTaskFunction(void*)>:
c0015b48:	53                   	push   ebx
c0015b49:	83 ec 08             	sub    esp,0x8
c0015b4c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b54:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b59:	85 c0                	test   eax,eax
c0015b5b:	75 03                	jne    c0015b60 <cleanerTaskFunction(void*)+0x18>
c0015b5d:	fb                   	sti    
c0015b5e:	66 90                	xchg   ax,ax
c0015b60:	fa                   	cli    
c0015b61:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b66:	83 c0 01             	add    eax,0x1
c0015b69:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015b70:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b75:	0f 85 c9 00 00 00    	jne    c0015c44 <cleanerTaskFunction(void*)+0xfc>
c0015b7b:	83 ec 0c             	sub    esp,0xc
c0015b7e:	6a 02                	push   0x2
c0015b80:	e8 bf f9 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015b8f:	fa                   	cli    
c0015b90:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015b96:	8b 1d ac c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6ac
c0015b9c:	83 c1 01             	add    ecx,0x1
c0015b9f:	83 c3 01             	add    ebx,0x1
c0015ba2:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015ba8:	89 1d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ebx
c0015bae:	fa                   	cli    
c0015baf:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bb4:	83 c0 01             	add    eax,0x1
c0015bb7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bbc:	eb 2a                	jmp    c0015be8 <cleanerTaskFunction(void*)+0xa0>
c0015bbe:	66 90                	xchg   ax,ax
c0015bc0:	83 ec 0c             	sub    esp,0xc
c0015bc3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bc8:	e8 4b a5 00 00       	call   c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bcd:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015bd4:	89 c3                	mov    ebx,eax
c0015bd6:	e8 45 a5 00 00       	call   c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015bdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bde:	e8 91 fc ff ff       	call   c0015874 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	66 90                	xchg   ax,ax
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bf0:	e8 07 a5 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	84 c0                	test   al,al
c0015bfa:	74 c4                	je     c0015bc0 <cleanerTaskFunction(void*)+0x78>
c0015bfc:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c04:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c0a:	85 d2                	test   edx,edx
c0015c0c:	75 02                	jne    c0015c10 <cleanerTaskFunction(void*)+0xc8>
c0015c0e:	fb                   	sti    
c0015c0f:	90                   	nop
c0015c10:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c15:	83 e8 01             	sub    eax,0x1
c0015c18:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c1d:	0f 85 29 ff ff ff    	jne    c0015b4c <cleanerTaskFunction(void*)+0x4>
c0015c23:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015c28:	85 c0                	test   eax,eax
c0015c2a:	0f 84 1c ff ff ff    	je     c0015b4c <cleanerTaskFunction(void*)+0x4>
c0015c30:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c3a:	e8 71 f8 ff ff       	call   c00154b0 <schedule()>
c0015c3f:	e9 08 ff ff ff       	jmp    c0015b4c <cleanerTaskFunction(void*)+0x4>
c0015c44:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c4c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c51:	85 c0                	test   eax,eax
c0015c53:	0f 85 2f ff ff ff    	jne    c0015b88 <cleanerTaskFunction(void*)+0x40>
c0015c59:	fb                   	sti    
c0015c5a:	e9 29 ff ff ff       	jmp    c0015b88 <cleanerTaskFunction(void*)+0x40>
c0015c5f:	90                   	nop

c0015c60 <terminateTask(int)>:
c0015c60:	83 ec 14             	sub    esp,0x14
c0015c63:	fa                   	cli    
c0015c64:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c69:	83 c0 01             	add    eax,0x1
c0015c6c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c71:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c76:	83 c0 01             	add    eax,0x1
c0015c79:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c7e:	fa                   	cli    
c0015c7f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c88:	83 c0 01             	add    eax,0x1
c0015c8b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c95:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c9d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ca0:	50                   	push   eax
c0015ca1:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ca6:	e8 31 a5 00 00       	call   c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015cba:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015cbf:	85 c0                	test   eax,eax
c0015cc1:	0f 84 81 00 00 00    	je     c0015d48 <terminateTask(int)+0xe8>
c0015cc7:	83 ec 0c             	sub    esp,0xc
c0015cca:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015cd1:	50                   	push   eax
c0015cd2:	e8 e9 fa ff ff       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	66 90                	xchg   ax,ax
c0015cdc:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015ce4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ce9:	85 c0                	test   eax,eax
c0015ceb:	75 03                	jne    c0015cf0 <terminateTask(int)+0x90>
c0015ced:	fb                   	sti    
c0015cee:	66 90                	xchg   ax,ax
c0015cf0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015cf5:	83 e8 01             	sub    eax,0x1
c0015cf8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015cfd:	75 09                	jne    c0015d08 <terminateTask(int)+0xa8>
c0015cff:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015d06:	75 54                	jne    c0015d5c <terminateTask(int)+0xfc>
c0015d08:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015d10:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015d16:	85 c9                	test   ecx,ecx
c0015d18:	75 06                	jne    c0015d20 <terminateTask(int)+0xc0>
c0015d1a:	66 90                	xchg   ax,ax
c0015d1c:	fb                   	sti    
c0015d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d20:	fa                   	cli    
c0015d21:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015d26:	83 c0 01             	add    eax,0x1
c0015d29:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d2e:	e8 7d f7 ff ff       	call   c00154b0 <schedule()>
c0015d33:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015d3b:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015d41:	85 d2                	test   edx,edx
c0015d43:	75 db                	jne    c0015d20 <terminateTask(int)+0xc0>
c0015d45:	eb d5                	jmp    c0015d1c <terminateTask(int)+0xbc>
c0015d47:	90                   	nop
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	68 cb 2d 02 c0       	push   0xc0022dcb
c0015d50:	e8 0f 12 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	eb 82                	jmp    c0015cdc <terminateTask(int)+0x7c>
c0015d5a:	66 90                	xchg   ax,ax
c0015d5c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015d66:	e8 45 f7 ff ff       	call   c00154b0 <schedule()>
c0015d6b:	eb 9b                	jmp    c0015d08 <terminateTask(int)+0xa8>
c0015d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d70 <Thr::terminateFromIRQ(int)>:
c0015d70:	83 ec 18             	sub    esp,0x18
c0015d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d77:	50                   	push   eax
c0015d78:	e8 e3 fe ff ff       	call   c0015c60 <terminateTask(int)>
c0015d7d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d80 <__static_initialization_and_destruction_0(int, int)>:
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015d88:	0f 85 8e 00 00 00    	jne    c0015e1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015d96:	0f 85 80 00 00 00    	jne    c0015e1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015da4:	e8 d3 a8 00 00       	call   c002067c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015da9:	83 c4 10             	add    esp,0x10
c0015dac:	83 ec 04             	sub    esp,0x4
c0015daf:	68 4c 3e 02 c0       	push   0xc0023e4c
c0015db4:	68 cc c6 02 c0       	push   0xc002c6cc
c0015db9:	68 2c 06 02 c0       	push   0xc002062c
c0015dbe:	e8 ed 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	83 ec 0c             	sub    esp,0xc
c0015dc9:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015dce:	e8 a9 a8 00 00       	call   c002067c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	83 ec 04             	sub    esp,0x4
c0015dd9:	68 4c 3e 02 c0       	push   0xc0023e4c
c0015dde:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015de3:	68 2c 06 02 c0       	push   0xc002062c
c0015de8:	e8 c3 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015df8:	e8 7f a8 00 00       	call   c002067c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015dfd:	83 c4 10             	add    esp,0x10
c0015e00:	83 ec 04             	sub    esp,0x4
c0015e03:	68 4c 3e 02 c0       	push   0xc0023e4c
c0015e08:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015e0d:	68 2c 06 02 c0       	push   0xc002062c
c0015e12:	e8 99 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	66 90                	xchg   ax,ax
c0015e1c:	90                   	nop
c0015e1d:	83 c4 0c             	add    esp,0xc
c0015e20:	c3                   	ret    
c0015e21:	8d 76 00             	lea    esi,[esi+0x0]

c0015e24 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015e24:	83 ec 0c             	sub    esp,0xc
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	68 ff ff 00 00       	push   0xffff
c0015e2f:	6a 01                	push   0x1
c0015e31:	e8 4a ff ff ff       	call   c0015d80 <__static_initialization_and_destruction_0(int, int)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	83 c4 0c             	add    esp,0xc
c0015e3c:	c3                   	ret    

c0015e3d <Vm::inbv(unsigned short)>:
c0015e3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e41:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e46:	75 06                	jne    c0015e4e <Vm::inbv(unsigned short)+0x11>
c0015e48:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015e4d:	c3                   	ret    
c0015e4e:	ec                   	in     al,dx
c0015e4f:	c3                   	ret    

c0015e50 <Vm::outbv(unsigned short, unsigned char)>:
c0015e50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e58:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e5d:	75 25                	jne    c0015e84 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015e5f:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015e65:	8d 51 01             	lea    edx,[ecx+0x1]
c0015e68:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015e6e:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015e74:	83 fa 20             	cmp    edx,0x20
c0015e77:	75 0c                	jne    c0015e85 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015e79:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015e83:	c3                   	ret    
c0015e84:	ee                   	out    dx,al
c0015e85:	c3                   	ret    

c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015e86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015e8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015e90:	c1 e0 04             	shl    eax,0x4
c0015e93:	01 d0                	add    eax,edx
c0015e95:	c3                   	ret    

c0015e96 <Vm::getSegment(unsigned int)>:
c0015e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e9a:	c1 e8 10             	shr    eax,0x10
c0015e9d:	c3                   	ret    

c0015e9e <Vm::getOffset(unsigned int)>:
c0015e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea2:	c3                   	ret    

c0015ea3 <Vm::mainloop2()>:
c0015ea3:	83 ec 18             	sub    esp,0x18
c0015ea6:	fa                   	cli    
c0015ea7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015ead:	6a 02                	push   0x2
c0015eaf:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015eb6:	e8 89 f6 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ebb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015ec4:	52                   	push   edx
c0015ec5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015ec9:	52                   	push   edx
c0015eca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015ece:	52                   	push   edx
c0015ecf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ed3:	50                   	push   eax
c0015ed4:	e8 36 a3 fe ff       	call   c000020f <goToVM86>
c0015ed9:	83 c4 2c             	add    esp,0x2c
c0015edc:	c3                   	ret    

c0015edd <Vm::mainVm8086Loop(void*)>:
c0015edd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015ee4:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015eeb:	75 01                	jne    c0015eee <Vm::mainVm8086Loop(void*)+0x11>
c0015eed:	fb                   	sti    
c0015eee:	eb b3                	jmp    c0015ea3 <Vm::mainloop2()>

c0015ef0 <Vm::mainloop3(unsigned long)>:
c0015ef0:	83 ec 18             	sub    esp,0x18
c0015ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ef7:	fa                   	cli    
c0015ef8:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015efe:	6a 02                	push   0x2
c0015f00:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015f07:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015f0c:	e8 33 f6 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f11:	83 c4 1c             	add    esp,0x1c
c0015f14:	eb 8d                	jmp    c0015ea3 <Vm::mainloop2()>

c0015f16 <Vm::initialise8086()>:
c0015f16:	83 ec 0c             	sub    esp,0xc
c0015f19:	68 80 00 00 00       	push   0x80
c0015f1e:	6a 00                	push   0x0
c0015f20:	68 dd 5e 01 c0       	push   0xc0015edd
c0015f25:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f2b:	e8 30 f3 ff ff       	call   c0015260 <Process::createThread(void (*)(void*), void*, int)>
c0015f30:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015f37:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015f3c:	68 10 01 00 00       	push   0x110
c0015f41:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015f46:	6a 00                	push   0x0
c0015f48:	6a 00                	push   0x0
c0015f4a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f50:	e8 b7 c9 ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f55:	83 c4 2c             	add    esp,0x2c
c0015f58:	c3                   	ret    

c0015f59 <Vm::resetConventionalMemory8086()>:
c0015f59:	c3                   	ret    

c0015f5a <Vm::finish8086()>:
c0015f5a:	53                   	push   ebx
c0015f5b:	83 ec 08             	sub    esp,0x8
c0015f5e:	fa                   	cli    
c0015f5f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f65:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015f6c:	75 18                	jne    c0015f86 <Vm::finish8086()+0x2c>
c0015f6e:	e8 3d f5 ff ff       	call   c00154b0 <schedule()>
c0015f73:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015f7a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015f81:	75 db                	jne    c0015f5e <Vm::finish8086()+0x4>
c0015f83:	fb                   	sti    
c0015f84:	eb d8                	jmp    c0015f5e <Vm::finish8086()+0x4>
c0015f86:	83 ec 0c             	sub    esp,0xc
c0015f89:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015f8f:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015f95:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015f9c:	e8 1f f8 ff ff       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c0015fa1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015fb2:	75 01                	jne    c0015fb5 <Vm::finish8086()+0x5b>
c0015fb4:	fb                   	sti    
c0015fb5:	89 d8                	mov    eax,ebx
c0015fb7:	83 c4 08             	add    esp,0x8
c0015fba:	5b                   	pop    ebx
c0015fbb:	c3                   	ret    

c0015fbc <Vm::getOutput8086(unsigned char*)>:
c0015fbc:	57                   	push   edi
c0015fbd:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015fc3:	56                   	push   esi
c0015fc4:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015fc9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015fcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fcf:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015fd4:	5e                   	pop    esi
c0015fd5:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015fdf:	5f                   	pop    edi
c0015fe0:	c3                   	ret    

c0015fe1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015fe1:	55                   	push   ebp
c0015fe2:	57                   	push   edi
c0015fe3:	56                   	push   esi
c0015fe4:	53                   	push   ebx
c0015fe5:	83 ec 2c             	sub    esp,0x2c
c0015fe8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015fec:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ff0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015ff4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ffc:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0016003:	75 5d                	jne    c0016062 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016005:	83 ec 0c             	sub    esp,0xc
c0016008:	68 14 01 00 00       	push   0x114
c001600d:	e8 69 89 ff ff       	call   c000e97b <malloc>
c0016012:	83 c4 0c             	add    esp,0xc
c0016015:	89 c7                	mov    edi,eax
c0016017:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001601d:	68 dc 2e 02 c0       	push   0xc0022edc
c0016022:	50                   	push   eax
c0016023:	e8 ea 20 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016028:	58                   	pop    eax
c0016029:	5a                   	pop    edx
c001602a:	6a 12                	push   0x12
c001602c:	57                   	push   edi
c001602d:	e8 fe 20 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0016032:	59                   	pop    ecx
c0016033:	8b 07                	mov    eax,DWORD PTR [edi]
c0016035:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016039:	51                   	push   ecx
c001603a:	6a 00                	push   0x0
c001603c:	6a 00                	push   0x0
c001603e:	68 00 00 11 00       	push   0x110000
c0016043:	57                   	push   edi
c0016044:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016047:	83 c4 14             	add    esp,0x14
c001604a:	57                   	push   edi
c001604b:	e8 3e 21 ff ff       	call   c000818e <File::close()>
c0016050:	8b 07                	mov    eax,DWORD PTR [edi]
c0016052:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016055:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016058:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001605f:	83 c4 10             	add    esp,0x10
c0016062:	fa                   	cli    
c0016063:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016069:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0016070:	75 18                	jne    c001608a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016072:	e8 39 f4 ff ff       	call   c00154b0 <schedule()>
c0016077:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001607e:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016085:	75 db                	jne    c0016062 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016087:	fb                   	sti    
c0016088:	eb d8                	jmp    c0016062 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001608a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001608e:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0016093:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c001609d:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00160a1:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c00160a5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00160a9:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00160ad:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00160b1:	0f b7 f6             	movzx  esi,si
c00160b4:	0f b7 db             	movzx  ebx,bx
c00160b7:	50                   	push   eax
c00160b8:	6a 20                	push   0x20
c00160ba:	6a 00                	push   0x0
c00160bc:	68 20 c7 02 c0       	push   0xc002c720
c00160c1:	e8 2a a4 fe ff       	call   c00004f0 <memset>
c00160c6:	5a                   	pop    edx
c00160c7:	59                   	pop    ecx
c00160c8:	56                   	push   esi
c00160c9:	53                   	push   ebx
c00160ca:	e8 b7 fd ff ff       	call   c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>
c00160cf:	83 c4 10             	add    esp,0x10
c00160d2:	89 c7                	mov    edi,eax
c00160d4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00160d8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00160dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160de:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00160e5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00160ec:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00160f3:	75 01                	jne    c00160f6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c00160f5:	fb                   	sti    
c00160f6:	83 ec 0c             	sub    esp,0xc
c00160f9:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00160ff:	e8 bc f6 ff ff       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c0016104:	83 c4 3c             	add    esp,0x3c
c0016107:	b0 01                	mov    al,0x1
c0016109:	5b                   	pop    ebx
c001610a:	5e                   	pop    esi
c001610b:	5f                   	pop    edi
c001610c:	5d                   	pop    ebp
c001610d:	c3                   	ret    

c001610e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001610e:	55                   	push   ebp
c001610f:	57                   	push   edi
c0016110:	56                   	push   esi
c0016111:	53                   	push   ebx
c0016112:	83 ec 2c             	sub    esp,0x2c
c0016115:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016119:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001611d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016121:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016125:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016129:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0016130:	75 5d                	jne    c001618f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016132:	83 ec 0c             	sub    esp,0xc
c0016135:	68 14 01 00 00       	push   0x114
c001613a:	e8 3c 88 ff ff       	call   c000e97b <malloc>
c001613f:	83 c4 0c             	add    esp,0xc
c0016142:	89 c6                	mov    esi,eax
c0016144:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001614a:	68 dc 2e 02 c0       	push   0xc0022edc
c001614f:	50                   	push   eax
c0016150:	e8 bd 1f ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016155:	58                   	pop    eax
c0016156:	5a                   	pop    edx
c0016157:	6a 12                	push   0x12
c0016159:	56                   	push   esi
c001615a:	e8 d1 1f ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001615f:	59                   	pop    ecx
c0016160:	8b 06                	mov    eax,DWORD PTR [esi]
c0016162:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016166:	52                   	push   edx
c0016167:	6a 00                	push   0x0
c0016169:	6a 00                	push   0x0
c001616b:	68 00 00 11 00       	push   0x110000
c0016170:	56                   	push   esi
c0016171:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016174:	83 c4 14             	add    esp,0x14
c0016177:	56                   	push   esi
c0016178:	e8 11 20 ff ff       	call   c000818e <File::close()>
c001617d:	8b 06                	mov    eax,DWORD PTR [esi]
c001617f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016182:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016185:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001618c:	83 c4 10             	add    esp,0x10
c001618f:	50                   	push   eax
c0016190:	50                   	push   eax
c0016191:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016195:	68 f7 2e 02 c0       	push   0xc0022ef7
c001619a:	e8 c5 0d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001619f:	83 c4 10             	add    esp,0x10
c00161a2:	fa                   	cli    
c00161a3:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00161a9:	0f b6 35 09 c7 02 c0 	movzx  esi,BYTE PTR ds:0xc002c709
c00161b0:	89 f0                	mov    eax,esi
c00161b2:	84 c0                	test   al,al
c00161b4:	75 18                	jne    c00161ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c00161b6:	e8 f5 f2 ff ff       	call   c00154b0 <schedule()>
c00161bb:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00161c2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161c9:	75 d7                	jne    c00161a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00161cb:	fb                   	sti    
c00161cc:	eb d4                	jmp    c00161a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00161ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161d2:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00161d7:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00161e1:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c00161e5:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c00161e9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00161ed:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c00161f1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161f5:	50                   	push   eax
c00161f6:	6a 20                	push   0x20
c00161f8:	6a 00                	push   0x0
c00161fa:	68 20 c7 02 c0       	push   0xc002c720
c00161ff:	e8 ec a2 fe ff       	call   c00004f0 <memset>
c0016204:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001620b:	e8 6b 87 ff ff       	call   c000e97b <malloc>
c0016210:	83 c4 0c             	add    esp,0xc
c0016213:	89 c3                	mov    ebx,eax
c0016215:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001621b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001621f:	50                   	push   eax
c0016220:	e8 ed 1e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	85 db                	test   ebx,ebx
c001622a:	75 0a                	jne    c0016236 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c001622c:	83 ec 0c             	sub    esp,0xc
c001622f:	68 19 2f 02 c0       	push   0xc0022f19
c0016234:	eb 2b                	jmp    c0016261 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0016236:	50                   	push   eax
c0016237:	8d 44 24 17          	lea    eax,[esp+0x17]
c001623b:	50                   	push   eax
c001623c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016240:	50                   	push   eax
c0016241:	53                   	push   ebx
c0016242:	e8 eb 21 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0016247:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001624b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016257:	74 28                	je     c0016281 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0016259:	83 ec 0c             	sub    esp,0xc
c001625c:	68 2d 2f 02 c0       	push   0xc0022f2d
c0016261:	e8 5c 8a ff ff       	call   c000ecc2 <KePanic(char const*)>
c0016266:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001626d:	83 c4 10             	add    esp,0x10
c0016270:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016277:	75 01                	jne    c001627a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016279:	fb                   	sti    
c001627a:	31 f6                	xor    esi,esi
c001627c:	e9 91 00 00 00       	jmp    c0016312 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016281:	51                   	push   ecx
c0016282:	51                   	push   ecx
c0016283:	6a 01                	push   0x1
c0016285:	53                   	push   ebx
c0016286:	e8 a5 1e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	85 c0                	test   eax,eax
c0016290:	74 27                	je     c00162b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	68 46 2f 02 c0       	push   0xc0022f46
c001629a:	e8 23 8a ff ff       	call   c000ecc2 <KePanic(char const*)>
c001629f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00162a6:	83 c4 10             	add    esp,0x10
c00162a9:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00162b0:	75 c8                	jne    c001627a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c00162b2:	fb                   	sti    
c00162b3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00162b7:	eb 59                	jmp    c0016312 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c00162b9:	0f b7 ff             	movzx  edi,di
c00162bc:	50                   	push   eax
c00162bd:	50                   	push   eax
c00162be:	0f b7 c5             	movzx  eax,bp
c00162c1:	57                   	push   edi
c00162c2:	50                   	push   eax
c00162c3:	e8 be fb ff ff       	call   c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>
c00162c8:	5a                   	pop    edx
c00162c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162cb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00162cf:	51                   	push   ecx
c00162d0:	50                   	push   eax
c00162d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162d9:	53                   	push   ebx
c00162da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162dd:	83 c4 14             	add    esp,0x14
c00162e0:	53                   	push   ebx
c00162e1:	e8 a8 1e ff ff       	call   c000818e <File::close()>
c00162e6:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00162ed:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00162fe:	75 01                	jne    c0016301 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0016300:	fb                   	sti    
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c001630a:	e8 b1 f4 ff ff       	call   c00157c0 <unblockTask(ThreadControlBlock*)>
c001630f:	83 c4 10             	add    esp,0x10
c0016312:	83 c4 2c             	add    esp,0x2c
c0016315:	89 f0                	mov    eax,esi
c0016317:	5b                   	pop    ebx
c0016318:	5e                   	pop    esi
c0016319:	5f                   	pop    edi
c001631a:	5d                   	pop    ebp
c001631b:	c3                   	ret    

c001631c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001631c:	57                   	push   edi
c001631d:	56                   	push   esi
c001631e:	53                   	push   ebx
c001631f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016327:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001632b:	83 e8 06             	sub    eax,0x6
c001632e:	0f b7 c0             	movzx  eax,ax
c0016331:	50                   	push   eax
c0016332:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016337:	50                   	push   eax
c0016338:	e8 49 fb ff ff       	call   c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>
c001633d:	5a                   	pop    edx
c001633e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016341:	59                   	pop    ecx
c0016342:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016345:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016348:	81 e2 ff ff 00 00    	and    edx,0xffff
c001634e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016351:	8d 56 02             	lea    edx,[esi+0x2]
c0016354:	66 89 10             	mov    WORD PTR [eax],dx
c0016357:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001635b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001635f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016362:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016366:	0f b6 f1             	movzx  esi,cl
c0016369:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001636d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016373:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016377:	0f b6 d5             	movzx  edx,ch
c001637a:	74 0a                	je     c0016386 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001637c:	c1 e2 08             	shl    edx,0x8
c001637f:	09 f2                	or     edx,esi
c0016381:	80 ce 02             	or     dh,0x2
c0016384:	eb 08                	jmp    c001638e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016386:	c1 e2 08             	shl    edx,0x8
c0016389:	09 f2                	or     edx,esi
c001638b:	80 e6 fd             	and    dh,0xfd
c001638e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016392:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016397:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001639b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00163a3:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00163a6:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00163ae:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00163b1:	5b                   	pop    ebx
c00163b2:	5e                   	pop    esi
c00163b3:	5f                   	pop    edi
c00163b4:	c3                   	ret    

c00163b5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00163b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163bf:	c1 e0 04             	shl    eax,0x4
c00163c2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00163c5:	c3                   	ret    

c00163c6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00163c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163d0:	c1 e0 04             	shl    eax,0x4
c00163d3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00163d7:	c3                   	ret    

c00163d8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00163d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163e2:	c1 e0 04             	shl    eax,0x4
c00163e5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00163e8:	c3                   	ret    

c00163e9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00163e9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163ee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163f3:	c1 e0 04             	shl    eax,0x4
c00163f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163fa:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00163fd:	c3                   	ret    

c00163fe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00163fe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016403:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016408:	c1 e0 04             	shl    eax,0x4
c001640b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001640f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016413:	c3                   	ret    

c0016414 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016414:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016419:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001641e:	c1 e0 04             	shl    eax,0x4
c0016421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016425:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016428:	c3                   	ret    

c0016429 <Vm::faultHandler(regs*)>:
c0016429:	55                   	push   ebp
c001642a:	57                   	push   edi
c001642b:	56                   	push   esi
c001642c:	53                   	push   ebx
c001642d:	83 ec 2c             	sub    esp,0x2c
c0016430:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016434:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016437:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001643b:	0f b7 f8             	movzx  edi,ax
c001643e:	52                   	push   edx
c001643f:	0f b7 c0             	movzx  eax,ax
c0016442:	50                   	push   eax
c0016443:	e8 3e fa ff ff       	call   c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>
c0016448:	5a                   	pop    edx
c0016449:	59                   	pop    ecx
c001644a:	89 c1                	mov    ecx,eax
c001644c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001644f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016453:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016458:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001645c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001645f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016463:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016468:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001646c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016470:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016474:	e8 0d fa ff ff       	call   c0015e86 <Vm::realToLinear(unsigned short, unsigned short)>
c0016479:	5e                   	pop    esi
c001647a:	be 06 00 00 00       	mov    esi,0x6
c001647f:	5d                   	pop    ebp
c0016480:	31 ed                	xor    ebp,ebp
c0016482:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016487:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001648a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016490:	0f 84 74 02 00 00    	je     c001670a <Vm::faultHandler(regs*)+0x2e1>
c0016496:	0f 87 94 00 00 00    	ja     c0016530 <Vm::faultHandler(regs*)+0x107>
c001649c:	83 fa 66             	cmp    edx,0x66
c001649f:	0f 84 e2 01 00 00    	je     c0016687 <Vm::faultHandler(regs*)+0x25e>
c00164a5:	77 47                	ja     c00164ee <Vm::faultHandler(regs*)+0xc5>
c00164a7:	83 fa 36             	cmp    edx,0x36
c00164aa:	0f 84 ca 01 00 00    	je     c001667a <Vm::faultHandler(regs*)+0x251>
c00164b0:	77 1a                	ja     c00164cc <Vm::faultHandler(regs*)+0xa3>
c00164b2:	83 fa 26             	cmp    edx,0x26
c00164b5:	0f 84 98 01 00 00    	je     c0016653 <Vm::faultHandler(regs*)+0x22a>
c00164bb:	83 fa 2e             	cmp    edx,0x2e
c00164be:	0f 85 21 06 00 00    	jne    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c00164c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164c7:	31 f6                	xor    esi,esi
c00164c9:	41                   	inc    ecx
c00164ca:	eb bb                	jmp    c0016487 <Vm::faultHandler(regs*)+0x5e>
c00164cc:	83 fa 64             	cmp    edx,0x64
c00164cf:	0f 84 8b 01 00 00    	je     c0016660 <Vm::faultHandler(regs*)+0x237>
c00164d5:	0f 87 92 01 00 00    	ja     c001666d <Vm::faultHandler(regs*)+0x244>
c00164db:	83 fa 3e             	cmp    edx,0x3e
c00164de:	0f 85 01 06 00 00    	jne    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c00164e4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164e7:	be 01 00 00 00       	mov    esi,0x1
c00164ec:	eb db                	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c00164ee:	83 fa 6d             	cmp    edx,0x6d
c00164f1:	0f 84 34 03 00 00    	je     c001682b <Vm::faultHandler(regs*)+0x402>
c00164f7:	77 17                	ja     c0016510 <Vm::faultHandler(regs*)+0xe7>
c00164f9:	83 fa 67             	cmp    edx,0x67
c00164fc:	0f 84 92 01 00 00    	je     c0016694 <Vm::faultHandler(regs*)+0x26b>
c0016502:	83 fa 6c             	cmp    edx,0x6c
c0016505:	0f 84 b1 02 00 00    	je     c00167bc <Vm::faultHandler(regs*)+0x393>
c001650b:	e9 d5 05 00 00       	jmp    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c0016510:	83 fa 6f             	cmp    edx,0x6f
c0016513:	0f 84 3d 04 00 00    	je     c0016956 <Vm::faultHandler(regs*)+0x52d>
c0016519:	0f 82 9f 03 00 00    	jb     c00168be <Vm::faultHandler(regs*)+0x495>
c001651f:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016525:	0f 84 76 01 00 00    	je     c00166a1 <Vm::faultHandler(regs*)+0x278>
c001652b:	e9 b5 05 00 00       	jmp    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c0016530:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016536:	0f 84 51 05 00 00    	je     c0016a8d <Vm::faultHandler(regs*)+0x664>
c001653c:	0f 87 a9 00 00 00    	ja     c00165eb <Vm::faultHandler(regs*)+0x1c2>
c0016542:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016548:	0f 84 d0 04 00 00    	je     c0016a1e <Vm::faultHandler(regs*)+0x5f5>
c001654e:	77 78                	ja     c00165c8 <Vm::faultHandler(regs*)+0x19f>
c0016550:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016556:	0f 84 0e 02 00 00    	je     c001676a <Vm::faultHandler(regs*)+0x341>
c001655c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016562:	0f 85 7d 05 00 00    	jne    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c0016568:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001656c:	89 d1                	mov    ecx,edx
c001656e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016571:	c1 e1 08             	shl    ecx,0x8
c0016574:	09 ca                	or     edx,ecx
c0016576:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016579:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001657d:	89 d1                	mov    ecx,edx
c001657f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016583:	c1 e1 08             	shl    ecx,0x8
c0016586:	09 ca                	or     edx,ecx
c0016588:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001658b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001658f:	89 d1                	mov    ecx,edx
c0016591:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016595:	c1 e1 08             	shl    ecx,0x8
c0016598:	09 ca                	or     edx,ecx
c001659a:	81 ca 00 02 02 00    	or     edx,0x20200
c00165a0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00165a3:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00165a7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165ad:	d1 e8                	shr    eax,1
c00165af:	83 e0 01             	and    eax,0x1
c00165b2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00165b5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165b8:	83 c0 06             	add    eax,0x6
c00165bb:	25 ff ff 00 00       	and    eax,0xffff
c00165c0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00165c3:	e9 19 05 00 00       	jmp    c0016ae1 <Vm::faultHandler(regs*)+0x6b8>
c00165c8:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00165ce:	0f 84 8f 04 00 00    	je     c0016a63 <Vm::faultHandler(regs*)+0x63a>
c00165d4:	0f 82 60 04 00 00    	jb     c0016a3a <Vm::faultHandler(regs*)+0x611>
c00165da:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00165e0:	0f 84 94 04 00 00    	je     c0016a7a <Vm::faultHandler(regs*)+0x651>
c00165e6:	e9 fa 04 00 00       	jmp    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c00165eb:	81 fa ef 00 00 00    	cmp    edx,0xef
c00165f1:	0f 84 d7 04 00 00    	je     c0016ace <Vm::faultHandler(regs*)+0x6a5>
c00165f7:	77 2e                	ja     c0016627 <Vm::faultHandler(regs*)+0x1fe>
c00165f9:	81 fa ed 00 00 00    	cmp    edx,0xed
c00165ff:	0f 84 a4 04 00 00    	je     c0016aa9 <Vm::faultHandler(regs*)+0x680>
c0016605:	81 fa ee 00 00 00    	cmp    edx,0xee
c001660b:	0f 85 d4 04 00 00    	jne    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c0016611:	50                   	push   eax
c0016612:	50                   	push   eax
c0016613:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016617:	50                   	push   eax
c0016618:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001661c:	50                   	push   eax
c001661d:	e8 2e f8 ff ff       	call   c0015e50 <Vm::outbv(unsigned short, unsigned char)>
c0016622:	e9 9f 04 00 00       	jmp    c0016ac6 <Vm::faultHandler(regs*)+0x69d>
c0016627:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001662d:	0f 84 6d 01 00 00    	je     c00167a0 <Vm::faultHandler(regs*)+0x377>
c0016633:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016639:	0f 84 6f 01 00 00    	je     c00167ae <Vm::faultHandler(regs*)+0x385>
c001663f:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016645:	0f 85 9a 04 00 00    	jne    c0016ae5 <Vm::faultHandler(regs*)+0x6bc>
c001664b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001664e:	e9 76 fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c0016653:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016656:	be 02 00 00 00       	mov    esi,0x2
c001665b:	e9 69 fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c0016660:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016663:	be 03 00 00 00       	mov    esi,0x3
c0016668:	e9 5c fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c001666d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016670:	be 04 00 00 00       	mov    esi,0x4
c0016675:	e9 4f fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c001667a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001667d:	be 05 00 00 00       	mov    esi,0x5
c0016682:	e9 42 fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c0016687:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001668a:	bd 01 00 00 00       	mov    ebp,0x1
c001668f:	e9 35 fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c0016694:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016697:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001669c:	e9 28 fe ff ff       	jmp    c00164c9 <Vm::faultHandler(regs*)+0xa0>
c00166a1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00166a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166a8:	83 e5 01             	and    ebp,0x1
c00166ab:	74 30                	je     c00166dd <Vm::faultHandler(regs*)+0x2b4>
c00166ad:	83 e9 04             	sub    ecx,0x4
c00166b0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166b6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166bc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166bf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166c2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166c8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166cc:	0f 84 0c 04 00 00    	je     c0016ade <Vm::faultHandler(regs*)+0x6b5>
c00166d2:	80 ce 02             	or     dh,0x2
c00166d5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166d8:	e9 01 04 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c00166dd:	83 e9 02             	sub    ecx,0x2
c00166e0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166e6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166e9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166ed:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166f3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166f7:	74 05                	je     c00166fe <Vm::faultHandler(regs*)+0x2d5>
c00166f9:	80 ce 02             	or     dh,0x2
c00166fc:	eb 03                	jmp    c0016701 <Vm::faultHandler(regs*)+0x2d8>
c00166fe:	80 e6 fd             	and    dh,0xfd
c0016701:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016705:	e9 d4 03 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c001670a:	83 e5 01             	and    ebp,0x1
c001670d:	74 2a                	je     c0016739 <Vm::faultHandler(regs*)+0x310>
c001670f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016711:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016717:	81 ca 00 02 02 00    	or     edx,0x20200
c001671d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016720:	8b 00                	mov    eax,DWORD PTR [eax]
c0016722:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016728:	c1 e8 09             	shr    eax,0x9
c001672b:	83 e0 01             	and    eax,0x1
c001672e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016731:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016734:	83 c0 04             	add    eax,0x4
c0016737:	eb 24                	jmp    c001675d <Vm::faultHandler(regs*)+0x334>
c0016739:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001673c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016742:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016745:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016748:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001674e:	c1 e8 09             	shr    eax,0x9
c0016751:	83 e0 01             	and    eax,0x1
c0016754:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016757:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001675a:	83 c0 02             	add    eax,0x2
c001675d:	25 ff ff 00 00       	and    eax,0xffff
c0016762:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016765:	e9 74 03 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c001676a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001676e:	3d ee 00 00 00       	cmp    eax,0xee
c0016773:	75 10                	jne    c0016785 <Vm::faultHandler(regs*)+0x35c>
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001677b:	e8 70 f7 ff ff       	call   c0015ef0 <Vm::mainloop3(unsigned long)>
c0016780:	e9 44 03 00 00       	jmp    c0016ac9 <Vm::faultHandler(regs*)+0x6a0>
c0016785:	83 ec 0c             	sub    esp,0xc
c0016788:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001678c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016790:	51                   	push   ecx
c0016791:	50                   	push   eax
c0016792:	53                   	push   ebx
c0016793:	e8 84 fb ff ff       	call   c001631c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016798:	83 c4 20             	add    esp,0x20
c001679b:	e9 41 03 00 00       	jmp    c0016ae1 <Vm::faultHandler(regs*)+0x6b8>
c00167a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00167a9:	e9 30 03 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c00167ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00167b7:	e9 22 03 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c00167bc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167bf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167c4:	74 2b                	je     c00167f1 <Vm::faultHandler(regs*)+0x3c8>
c00167c6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00167cd:	76 22                	jbe    c00167f1 <Vm::faultHandler(regs*)+0x3c8>
c00167cf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167d3:	50                   	push   eax
c00167d4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167d8:	50                   	push   eax
c00167d9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167dd:	50                   	push   eax
c00167de:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167e2:	50                   	push   eax
c00167e3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167e7:	50                   	push   eax
c00167e8:	6a 6c                	push   0x6c
c00167ea:	6a 6c                	push   0x6c
c00167ec:	e9 bd 01 00 00       	jmp    c00169ae <Vm::faultHandler(regs*)+0x585>
c00167f1:	83 ec 0c             	sub    esp,0xc
c00167f4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167f8:	0f b7 f6             	movzx  esi,si
c00167fb:	50                   	push   eax
c00167fc:	e8 3c f6 ff ff       	call   c0015e3d <Vm::inbv(unsigned short)>
c0016801:	83 c4 0c             	add    esp,0xc
c0016804:	0f b6 c0             	movzx  eax,al
c0016807:	50                   	push   eax
c0016808:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001680c:	50                   	push   eax
c001680d:	56                   	push   esi
c001680e:	e8 d6 fb ff ff       	call   c00163e9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016819:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001681d:	74 03                	je     c0016822 <Vm::faultHandler(regs*)+0x3f9>
c001681f:	48                   	dec    eax
c0016820:	eb 01                	jmp    c0016823 <Vm::faultHandler(regs*)+0x3fa>
c0016822:	40                   	inc    eax
c0016823:	0f b7 c0             	movzx  eax,ax
c0016826:	e9 8b 00 00 00       	jmp    c00168b6 <Vm::faultHandler(regs*)+0x48d>
c001682b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001682e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016831:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016836:	74 29                	je     c0016861 <Vm::faultHandler(regs*)+0x438>
c0016838:	3d ff ff 00 00       	cmp    eax,0xffff
c001683d:	76 22                	jbe    c0016861 <Vm::faultHandler(regs*)+0x438>
c001683f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016843:	50                   	push   eax
c0016844:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016848:	50                   	push   eax
c0016849:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001684d:	50                   	push   eax
c001684e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016852:	50                   	push   eax
c0016853:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016857:	50                   	push   eax
c0016858:	6a 6d                	push   0x6d
c001685a:	6a 6d                	push   0x6d
c001685c:	e9 4d 01 00 00       	jmp    c00169ae <Vm::faultHandler(regs*)+0x585>
c0016861:	0f b7 c8             	movzx  ecx,ax
c0016864:	0f b7 f6             	movzx  esi,si
c0016867:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001686a:	83 e5 01             	and    ebp,0x1
c001686d:	74 20                	je     c001688f <Vm::faultHandler(regs*)+0x466>
c001686f:	ed                   	in     eax,dx
c0016870:	55                   	push   ebp
c0016871:	50                   	push   eax
c0016872:	51                   	push   ecx
c0016873:	56                   	push   esi
c0016874:	e8 9b fb ff ff       	call   c0016414 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001687f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016883:	74 05                	je     c001688a <Vm::faultHandler(regs*)+0x461>
c0016885:	83 e8 04             	sub    eax,0x4
c0016888:	eb 27                	jmp    c00168b1 <Vm::faultHandler(regs*)+0x488>
c001688a:	83 c0 04             	add    eax,0x4
c001688d:	eb 22                	jmp    c00168b1 <Vm::faultHandler(regs*)+0x488>
c001688f:	66 ed                	in     ax,dx
c0016891:	0f b7 c0             	movzx  eax,ax
c0016894:	57                   	push   edi
c0016895:	50                   	push   eax
c0016896:	51                   	push   ecx
c0016897:	56                   	push   esi
c0016898:	e8 61 fb ff ff       	call   c00163fe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001689d:	83 c4 10             	add    esp,0x10
c00168a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168a3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168a7:	74 05                	je     c00168ae <Vm::faultHandler(regs*)+0x485>
c00168a9:	83 e8 02             	sub    eax,0x2
c00168ac:	eb 03                	jmp    c00168b1 <Vm::faultHandler(regs*)+0x488>
c00168ae:	83 c0 02             	add    eax,0x2
c00168b1:	25 ff ff 00 00       	and    eax,0xffff
c00168b6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00168b9:	e9 20 02 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c00168be:	8d 46 ff             	lea    eax,[esi-0x1]
c00168c1:	0f b6 f0             	movzx  esi,al
c00168c4:	83 fe 05             	cmp    esi,0x5
c00168c7:	77 23                	ja     c00168ec <Vm::faultHandler(regs*)+0x4c3>
c00168c9:	ff 24 b5 bc 2f 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd044]
c00168d0:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00168d5:	eb 15                	jmp    c00168ec <Vm::faultHandler(regs*)+0x4c3>
c00168d7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00168db:	eb 0f                	jmp    c00168ec <Vm::faultHandler(regs*)+0x4c3>
c00168dd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00168e1:	eb 09                	jmp    c00168ec <Vm::faultHandler(regs*)+0x4c3>
c00168e3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00168e7:	eb 03                	jmp    c00168ec <Vm::faultHandler(regs*)+0x4c3>
c00168e9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00168ec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168ef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168f4:	74 29                	je     c001691f <Vm::faultHandler(regs*)+0x4f6>
c00168f6:	3d ff ff 00 00       	cmp    eax,0xffff
c00168fb:	76 22                	jbe    c001691f <Vm::faultHandler(regs*)+0x4f6>
c00168fd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016901:	50                   	push   eax
c0016902:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016906:	50                   	push   eax
c0016907:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001690b:	50                   	push   eax
c001690c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016910:	50                   	push   eax
c0016911:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016915:	50                   	push   eax
c0016916:	6a 6e                	push   0x6e
c0016918:	6a 6e                	push   0x6e
c001691a:	e9 8f 00 00 00       	jmp    c00169ae <Vm::faultHandler(regs*)+0x585>
c001691f:	0f b7 c0             	movzx  eax,ax
c0016922:	52                   	push   edx
c0016923:	52                   	push   edx
c0016924:	50                   	push   eax
c0016925:	57                   	push   edi
c0016926:	e8 8a fa ff ff       	call   c00163b5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001692b:	59                   	pop    ecx
c001692c:	0f b6 c0             	movzx  eax,al
c001692f:	5e                   	pop    esi
c0016930:	50                   	push   eax
c0016931:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016935:	50                   	push   eax
c0016936:	e8 15 f5 ff ff       	call   c0015e50 <Vm::outbv(unsigned short, unsigned char)>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016941:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016945:	74 03                	je     c001694a <Vm::faultHandler(regs*)+0x521>
c0016947:	48                   	dec    eax
c0016948:	eb 01                	jmp    c001694b <Vm::faultHandler(regs*)+0x522>
c001694a:	40                   	inc    eax
c001694b:	0f b7 c0             	movzx  eax,ax
c001694e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016951:	e9 88 01 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c0016956:	8d 46 ff             	lea    eax,[esi-0x1]
c0016959:	0f b6 f0             	movzx  esi,al
c001695c:	83 fe 05             	cmp    esi,0x5
c001695f:	77 1e                	ja     c001697f <Vm::faultHandler(regs*)+0x556>
c0016961:	ff 24 b5 d4 2f 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd02c]
c0016968:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001696c:	eb 11                	jmp    c001697f <Vm::faultHandler(regs*)+0x556>
c001696e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016971:	eb 0c                	jmp    c001697f <Vm::faultHandler(regs*)+0x556>
c0016973:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016976:	eb 07                	jmp    c001697f <Vm::faultHandler(regs*)+0x556>
c0016978:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001697b:	eb 02                	jmp    c001697f <Vm::faultHandler(regs*)+0x556>
c001697d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001697f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016982:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016987:	74 37                	je     c00169c0 <Vm::faultHandler(regs*)+0x597>
c0016989:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001698f:	76 2f                	jbe    c00169c0 <Vm::faultHandler(regs*)+0x597>
c0016991:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016995:	50                   	push   eax
c0016996:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001699a:	50                   	push   eax
c001699b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001699f:	50                   	push   eax
c00169a0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169a4:	50                   	push   eax
c00169a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169a9:	50                   	push   eax
c00169aa:	6a 6f                	push   0x6f
c00169ac:	6a 6f                	push   0x6f
c00169ae:	68 5f 2f 02 c0       	push   0xc0022f5f
c00169b3:	e8 ac 05 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00169b8:	83 c4 20             	add    esp,0x20
c00169bb:	e9 83 01 00 00       	jmp    c0016b43 <Vm::faultHandler(regs*)+0x71a>
c00169c0:	0f b7 d7             	movzx  edx,di
c00169c3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00169c6:	0f b7 c6             	movzx  eax,si
c00169c9:	81 e1 00 04 00 00    	and    ecx,0x400
c00169cf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00169d2:	83 e5 01             	and    ebp,0x1
c00169d5:	74 1d                	je     c00169f4 <Vm::faultHandler(regs*)+0x5cb>
c00169d7:	55                   	push   ebp
c00169d8:	55                   	push   ebp
c00169d9:	50                   	push   eax
c00169da:	52                   	push   edx
c00169db:	e8 f8 f9 ff ff       	call   c00163d8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	89 fa                	mov    edx,edi
c00169e5:	ef                   	out    dx,eax
c00169e6:	85 c9                	test   ecx,ecx
c00169e8:	74 05                	je     c00169ef <Vm::faultHandler(regs*)+0x5c6>
c00169ea:	83 ee 04             	sub    esi,0x4
c00169ed:	eb 21                	jmp    c0016a10 <Vm::faultHandler(regs*)+0x5e7>
c00169ef:	83 c6 04             	add    esi,0x4
c00169f2:	eb 1c                	jmp    c0016a10 <Vm::faultHandler(regs*)+0x5e7>
c00169f4:	55                   	push   ebp
c00169f5:	55                   	push   ebp
c00169f6:	50                   	push   eax
c00169f7:	52                   	push   edx
c00169f8:	e8 c9 f9 ff ff       	call   c00163c6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	89 fa                	mov    edx,edi
c0016a02:	66 ef                	out    dx,ax
c0016a04:	85 c9                	test   ecx,ecx
c0016a06:	74 05                	je     c0016a0d <Vm::faultHandler(regs*)+0x5e4>
c0016a08:	83 ee 02             	sub    esi,0x2
c0016a0b:	eb 03                	jmp    c0016a10 <Vm::faultHandler(regs*)+0x5e7>
c0016a0d:	83 c6 02             	add    esi,0x2
c0016a10:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016a16:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016a19:	e9 c0 00 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c0016a1e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a25:	83 ec 0c             	sub    esp,0xc
c0016a28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a2c:	50                   	push   eax
c0016a2d:	e8 0b f4 ff ff       	call   c0015e3d <Vm::inbv(unsigned short)>
c0016a32:	0f b6 c0             	movzx  eax,al
c0016a35:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a38:	eb 3a                	jmp    c0016a74 <Vm::faultHandler(regs*)+0x64b>
c0016a3a:	83 e5 01             	and    ebp,0x1
c0016a3d:	74 07                	je     c0016a46 <Vm::faultHandler(regs*)+0x61d>
c0016a3f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a43:	ed                   	in     eax,dx
c0016a44:	eb 14                	jmp    c0016a5a <Vm::faultHandler(regs*)+0x631>
c0016a46:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a49:	66 31 f6             	xor    si,si
c0016a4c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a4f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a53:	66 ed                	in     ax,dx
c0016a55:	0f b7 c0             	movzx  eax,ax
c0016a58:	09 f0                	or     eax,esi
c0016a5a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a5d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a61:	eb 7e                	jmp    c0016ae1 <Vm::faultHandler(regs*)+0x6b8>
c0016a63:	52                   	push   edx
c0016a64:	52                   	push   edx
c0016a65:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016a69:	50                   	push   eax
c0016a6a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a6e:	50                   	push   eax
c0016a6f:	e8 dc f3 ff ff       	call   c0015e50 <Vm::outbv(unsigned short, unsigned char)>
c0016a74:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a78:	eb 4f                	jmp    c0016ac9 <Vm::faultHandler(regs*)+0x6a0>
c0016a7a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a7d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a81:	83 e5 01             	and    ebp,0x1
c0016a84:	74 03                	je     c0016a89 <Vm::faultHandler(regs*)+0x660>
c0016a86:	ef                   	out    dx,eax
c0016a87:	eb d4                	jmp    c0016a5d <Vm::faultHandler(regs*)+0x634>
c0016a89:	66 ef                	out    dx,ax
c0016a8b:	eb d0                	jmp    c0016a5d <Vm::faultHandler(regs*)+0x634>
c0016a8d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a9b:	50                   	push   eax
c0016a9c:	e8 9c f3 ff ff       	call   c0015e3d <Vm::inbv(unsigned short)>
c0016aa1:	0f b6 c0             	movzx  eax,al
c0016aa4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016aa7:	eb 1d                	jmp    c0016ac6 <Vm::faultHandler(regs*)+0x69d>
c0016aa9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016aac:	83 e5 01             	and    ebp,0x1
c0016aaf:	74 03                	je     c0016ab4 <Vm::faultHandler(regs*)+0x68b>
c0016ab1:	ed                   	in     eax,dx
c0016ab2:	eb 0d                	jmp    c0016ac1 <Vm::faultHandler(regs*)+0x698>
c0016ab4:	66 ed                	in     ax,dx
c0016ab6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016ab9:	0f b7 c0             	movzx  eax,ax
c0016abc:	66 31 d2             	xor    dx,dx
c0016abf:	09 d0                	or     eax,edx
c0016ac1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ac4:	eb 18                	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c0016ac6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	eb 13                	jmp    c0016ae1 <Vm::faultHandler(regs*)+0x6b8>
c0016ace:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ad1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ad4:	83 e5 01             	and    ebp,0x1
c0016ad7:	74 03                	je     c0016adc <Vm::faultHandler(regs*)+0x6b3>
c0016ad9:	ef                   	out    dx,eax
c0016ada:	eb 02                	jmp    c0016ade <Vm::faultHandler(regs*)+0x6b5>
c0016adc:	66 ef                	out    dx,ax
c0016ade:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ae1:	b0 01                	mov    al,0x1
c0016ae3:	eb 60                	jmp    c0016b45 <Vm::faultHandler(regs*)+0x71c>
c0016ae5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ae9:	50                   	push   eax
c0016aea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016aee:	50                   	push   eax
c0016aef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016af3:	50                   	push   eax
c0016af4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016af8:	50                   	push   eax
c0016af9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016afd:	50                   	push   eax
c0016afe:	52                   	push   edx
c0016aff:	52                   	push   edx
c0016b00:	68 8c 2f 02 c0       	push   0xc0022f8c
c0016b05:	e8 5a 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016b0a:	83 c4 20             	add    esp,0x20
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	6a 60                	push   0x60
c0016b12:	e8 26 f3 ff ff       	call   c0015e3d <Vm::inbv(unsigned short)>
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	0f b6 d0             	movzx  edx,al
c0016b1d:	83 fa 1c             	cmp    edx,0x1c
c0016b20:	74 05                	je     c0016b27 <Vm::faultHandler(regs*)+0x6fe>
c0016b22:	83 fa 5a             	cmp    edx,0x5a
c0016b25:	75 e6                	jne    c0016b0d <Vm::faultHandler(regs*)+0x6e4>
c0016b27:	0f b6 c0             	movzx  eax,al
c0016b2a:	83 f8 1c             	cmp    eax,0x1c
c0016b2d:	74 05                	je     c0016b34 <Vm::faultHandler(regs*)+0x70b>
c0016b2f:	83 f8 5a             	cmp    eax,0x5a
c0016b32:	75 0f                	jne    c0016b43 <Vm::faultHandler(regs*)+0x71a>
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	6a 60                	push   0x60
c0016b39:	e8 ff f2 ff ff       	call   c0015e3d <Vm::inbv(unsigned short)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	eb e4                	jmp    c0016b27 <Vm::faultHandler(regs*)+0x6fe>
c0016b43:	31 c0                	xor    eax,eax
c0016b45:	83 c4 2c             	add    esp,0x2c
c0016b48:	5b                   	pop    ebx
c0016b49:	5e                   	pop    esi
c0016b4a:	5f                   	pop    edi
c0016b4b:	5d                   	pop    ebp
c0016b4c:	c3                   	ret    
c0016b4d:	90                   	nop

c0016b4e <noCopro(unsigned long)>:
c0016b4e:	c3                   	ret    
c0016b4f:	90                   	nop

c0016b50 <CPU::close(int, int, void*)>:
c0016b50:	31 c0                	xor    eax,eax
c0016b52:	c3                   	ret    

c0016b53 <x86ReadCMOS(unsigned char)>:
c0016b53:	83 ec 14             	sub    esp,0x14
c0016b56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b5a:	88 04 24             	mov    BYTE PTR [esp],al
c0016b5d:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016b62:	0f b6 c0             	movzx  eax,al
c0016b65:	85 c0                	test   eax,eax
c0016b67:	74 04                	je     c0016b6d <x86ReadCMOS(unsigned char)+0x1a>
c0016b69:	b2 00                	mov    dl,0x0
c0016b6b:	eb 02                	jmp    c0016b6f <x86ReadCMOS(unsigned char)+0x1c>
c0016b6d:	b2 80                	mov    dl,0x80
c0016b6f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016b72:	09 d0                	or     eax,edx
c0016b74:	0f b6 c0             	movzx  eax,al
c0016b77:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016b7e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016b82:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016b86:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016b8b:	ee                   	out    dx,al
c0016b8c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016b93:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016b98:	89 c2                	mov    edx,eax
c0016b9a:	ec                   	in     al,dx
c0016b9b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b9f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016ba3:	83 c4 14             	add    esp,0x14
c0016ba6:	c3                   	ret    

c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>:
c0016ba7:	83 ec 18             	sub    esp,0x18
c0016baa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb2:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016bb6:	88 04 24             	mov    BYTE PTR [esp],al
c0016bb9:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016bbe:	0f b6 c0             	movzx  eax,al
c0016bc1:	85 c0                	test   eax,eax
c0016bc3:	74 04                	je     c0016bc9 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016bc5:	b2 00                	mov    dl,0x0
c0016bc7:	eb 02                	jmp    c0016bcb <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016bc9:	b2 80                	mov    dl,0x80
c0016bcb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016bcf:	09 d0                	or     eax,edx
c0016bd1:	0f b6 c0             	movzx  eax,al
c0016bd4:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016bdb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016bdf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016be3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016be8:	ee                   	out    dx,al
c0016be9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016bed:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016bf4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016bf8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016bfc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016c01:	ee                   	out    dx,al
c0016c02:	90                   	nop
c0016c03:	83 c4 18             	add    esp,0x18
c0016c06:	c3                   	ret    

c0016c07 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016c07:	60                   	pusha  
c0016c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c10:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c14:	9c                   	pushf  
c0016c15:	fa                   	cli    
c0016c16:	0f 09                	wbinvd 
c0016c18:	0f 30                	wrmsr  
c0016c1a:	9d                   	popf   
c0016c1b:	89 c2                	mov    edx,eax
c0016c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c21:	89 10                	mov    DWORD PTR [eax],edx
c0016c23:	61                   	popa   
c0016c24:	90                   	nop
c0016c25:	c3                   	ret    

c0016c26 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016c26:	60                   	pusha  
c0016c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c2b:	89 c1                	mov    ecx,eax
c0016c2d:	9c                   	pushf  
c0016c2e:	fa                   	cli    
c0016c2f:	0f 09                	wbinvd 
c0016c31:	31 c0                	xor    eax,eax
c0016c33:	31 d2                	xor    edx,edx
c0016c35:	0f 32                	rdmsr  
c0016c37:	9d                   	popf   
c0016c38:	89 c2                	mov    edx,eax
c0016c3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c3e:	89 10                	mov    DWORD PTR [eax],edx
c0016c40:	61                   	popa   
c0016c41:	90                   	nop
c0016c42:	c3                   	ret    

c0016c43 <AMD_K6_writeback(int, int, int)>:
c0016c43:	83 ec 20             	sub    esp,0x20
c0016c46:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016c4b:	c1 e8 14             	shr    eax,0x14
c0016c4e:	c1 e8 02             	shr    eax,0x2
c0016c51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c55:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016c5a:	0f 85 9e 00 00 00    	jne    c0016cfe <AMD_K6_writeback(int, int, int)+0xbb>
c0016c60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c68:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016c6d:	75 19                	jne    c0016c88 <AMD_K6_writeback(int, int, int)+0x45>
c0016c6f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016c74:	7f 0a                	jg     c0016c80 <AMD_K6_writeback(int, int, int)+0x3d>
c0016c76:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016c7e:	eb 08                	jmp    c0016c88 <AMD_K6_writeback(int, int, int)+0x45>
c0016c80:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016c88:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016c8d:	7c 6e                	jl     c0016cfd <AMD_K6_writeback(int, int, int)+0xba>
c0016c8f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016c94:	7e 09                	jle    c0016c9f <AMD_K6_writeback(int, int, int)+0x5c>
c0016c96:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016c9b:	74 36                	je     c0016cd3 <AMD_K6_writeback(int, int, int)+0x90>
c0016c9d:	eb 5e                	jmp    c0016cfd <AMD_K6_writeback(int, int, int)+0xba>
c0016c9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ca3:	50                   	push   eax
c0016ca4:	68 82 00 00 c0       	push   0xc0000082
c0016ca9:	e8 78 ff ff ff       	call   c0016c26 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016cae:	83 c4 08             	add    esp,0x8
c0016cb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cb5:	01 c0                	add    eax,eax
c0016cb7:	83 e0 7f             	and    eax,0x7f
c0016cba:	89 c2                	mov    edx,eax
c0016cbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cc0:	50                   	push   eax
c0016cc1:	6a 00                	push   0x0
c0016cc3:	52                   	push   edx
c0016cc4:	68 82 00 00 c0       	push   0xc0000082
c0016cc9:	e8 39 ff ff ff       	call   c0016c07 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016cce:	83 c4 10             	add    esp,0x10
c0016cd1:	eb 2b                	jmp    c0016cfe <AMD_K6_writeback(int, int, int)+0xbb>
c0016cd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cd7:	50                   	push   eax
c0016cd8:	68 82 00 00 c0       	push   0xc0000082
c0016cdd:	e8 44 ff ff ff       	call   c0016c26 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016ce2:	83 c4 08             	add    esp,0x8
c0016ce5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ce9:	50                   	push   eax
c0016cea:	6a 00                	push   0x0
c0016cec:	6a 00                	push   0x0
c0016cee:	68 82 00 00 c0       	push   0xc0000082
c0016cf3:	e8 0f ff ff ff       	call   c0016c07 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016cf8:	83 c4 10             	add    esp,0x10
c0016cfb:	eb 01                	jmp    c0016cfe <AMD_K6_writeback(int, int, int)+0xbb>
c0016cfd:	90                   	nop
c0016cfe:	90                   	nop
c0016cff:	83 c4 20             	add    esp,0x20
c0016d02:	c3                   	ret    

c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016d03:	56                   	push   esi
c0016d04:	53                   	push   ebx
c0016d05:	a1 a0 48 02 c0       	mov    eax,ds:0xc00248a0
c0016d0a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016d0e:	75 32                	jne    c0016d42 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016d10:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	89 10                	mov    DWORD PTR [eax],edx
c0016d1c:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d26:	89 10                	mov    DWORD PTR [eax],edx
c0016d28:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016d2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d32:	89 10                	mov    DWORD PTR [eax],edx
c0016d34:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d3e:	89 10                	mov    DWORD PTR [eax],edx
c0016d40:	eb 5c                	jmp    c0016d9e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016d42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d46:	ba 00 00 00 00       	mov    edx,0x0
c0016d4b:	89 d1                	mov    ecx,edx
c0016d4d:	0f a2                	cpuid  
c0016d4f:	89 c6                	mov    esi,eax
c0016d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d55:	89 30                	mov    DWORD PTR [eax],esi
c0016d57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d5b:	89 18                	mov    DWORD PTR [eax],ebx
c0016d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d61:	89 08                	mov    DWORD PTR [eax],ecx
c0016d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d67:	89 10                	mov    DWORD PTR [eax],edx
c0016d69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d6d:	a3 a0 48 02 c0       	mov    ds:0xc00248a0,eax
c0016d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d78:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016d7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d83:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016d88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d8e:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d99:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016d9e:	5b                   	pop    ebx
c0016d9f:	5e                   	pop    esi
c0016da0:	c3                   	ret    

c0016da1 <cpuidCheckEDX(unsigned int)>:
c0016da1:	83 ec 10             	sub    esp,0x10
c0016da4:	89 e0                	mov    eax,esp
c0016da6:	50                   	push   eax
c0016da7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dab:	50                   	push   eax
c0016dac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016db0:	50                   	push   eax
c0016db1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016db5:	50                   	push   eax
c0016db6:	6a 01                	push   0x1
c0016db8:	e8 46 ff ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dbd:	83 c4 14             	add    esp,0x14
c0016dc0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016dc3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016dc7:	0f 95 c0             	setne  al
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	c3                   	ret    

c0016dce <cpuidCheckECX(unsigned int)>:
c0016dce:	83 ec 10             	sub    esp,0x10
c0016dd1:	89 e0                	mov    eax,esp
c0016dd3:	50                   	push   eax
c0016dd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd8:	50                   	push   eax
c0016dd9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016ddd:	50                   	push   eax
c0016dde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016de2:	50                   	push   eax
c0016de3:	6a 01                	push   0x1
c0016de5:	e8 19 ff ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dea:	83 c4 14             	add    esp,0x14
c0016ded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016df5:	0f 95 c0             	setne  al
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	c3                   	ret    

c0016dfc <cpuidCheckExtendedEBX(unsigned int)>:
c0016dfc:	83 ec 10             	sub    esp,0x10
c0016dff:	89 e0                	mov    eax,esp
c0016e01:	50                   	push   eax
c0016e02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e06:	50                   	push   eax
c0016e07:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e0b:	50                   	push   eax
c0016e0c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e10:	50                   	push   eax
c0016e11:	6a 07                	push   0x7
c0016e13:	e8 eb fe ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e18:	83 c4 14             	add    esp,0x14
c0016e1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e1f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e23:	0f 95 c0             	setne  al
c0016e26:	83 c4 10             	add    esp,0x10
c0016e29:	c3                   	ret    

c0016e2a <cpuidCheckExtendedECX(unsigned int)>:
c0016e2a:	83 ec 10             	sub    esp,0x10
c0016e2d:	89 e0                	mov    eax,esp
c0016e2f:	50                   	push   eax
c0016e30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e34:	50                   	push   eax
c0016e35:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e39:	50                   	push   eax
c0016e3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e3e:	50                   	push   eax
c0016e3f:	6a 07                	push   0x7
c0016e41:	e8 bd fe ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e46:	83 c4 14             	add    esp,0x14
c0016e49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e4d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e51:	0f 95 c0             	setne  al
c0016e54:	83 c4 10             	add    esp,0x10
c0016e57:	c3                   	ret    

c0016e58 <HalDetectFeatures()>:
c0016e58:	57                   	push   edi
c0016e59:	56                   	push   esi
c0016e5a:	53                   	push   ebx
c0016e5b:	81 ec 90 00 00 00    	sub    esp,0x90
c0016e61:	83 ec 04             	sub    esp,0x4
c0016e64:	6a 08                	push   0x8
c0016e66:	6a 00                	push   0x0
c0016e68:	68 8c c7 02 c0       	push   0xc002c78c
c0016e6d:	e8 7e 96 fe ff       	call   c00004f0 <memset>
c0016e72:	83 c4 10             	add    esp,0x10
c0016e75:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e7a:	83 c8 04             	or     eax,0x4
c0016e7d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e82:	e8 72 93 fe ff       	call   c00001f9 <detectCPUID>
c0016e87:	85 c0                	test   eax,eax
c0016e89:	0f 95 c0             	setne  al
c0016e8c:	83 e0 01             	and    eax,0x1
c0016e8f:	83 e0 01             	and    eax,0x1
c0016e92:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016e95:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e9a:	83 e0 fd             	and    eax,0xfffffffd
c0016e9d:	88 c2                	mov    dl,al
c0016e9f:	88 c8                	mov    al,cl
c0016ea1:	09 d0                	or     eax,edx
c0016ea3:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ea8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ead:	83 e0 02             	and    eax,0x2
c0016eb0:	0f b6 c0             	movzx  eax,al
c0016eb3:	85 c0                	test   eax,eax
c0016eb5:	0f 84 7f 02 00 00    	je     c001713a <HalDetectFeatures()+0x2e2>
c0016ebb:	83 ec 0c             	sub    esp,0xc
c0016ebe:	6a 20                	push   0x20
c0016ec0:	e8 dc fe ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	83 e0 01             	and    eax,0x1
c0016ecb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016ed2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ed7:	83 e0 f7             	and    eax,0xfffffff7
c0016eda:	88 c2                	mov    dl,al
c0016edc:	88 c8                	mov    al,cl
c0016ede:	09 d0                	or     eax,edx
c0016ee0:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ee5:	83 ec 0c             	sub    esp,0xc
c0016ee8:	68 00 00 00 04       	push   0x4000000
c0016eed:	e8 af fe ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0016ef2:	83 c4 10             	add    esp,0x10
c0016ef5:	89 c1                	mov    ecx,eax
c0016ef7:	83 e1 01             	and    ecx,0x1
c0016efa:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016eff:	83 e0 fe             	and    eax,0xfffffffe
c0016f02:	88 c2                	mov    dl,al
c0016f04:	88 c8                	mov    al,cl
c0016f06:	09 d0                	or     eax,edx
c0016f08:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f0d:	83 ec 0c             	sub    esp,0xc
c0016f10:	68 80 00 00 00       	push   0x80
c0016f15:	e8 87 fe ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	89 c1                	mov    ecx,eax
c0016f1f:	c1 e1 07             	shl    ecx,0x7
c0016f22:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f27:	83 e0 7f             	and    eax,0x7f
c0016f2a:	88 c2                	mov    dl,al
c0016f2c:	88 c8                	mov    al,cl
c0016f2e:	09 d0                	or     eax,edx
c0016f30:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f35:	83 ec 0c             	sub    esp,0xc
c0016f38:	68 00 00 80 00       	push   0x800000
c0016f3d:	e8 5f fe ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	83 e0 01             	and    eax,0x1
c0016f48:	89 c1                	mov    ecx,eax
c0016f4a:	c1 e1 05             	shl    ecx,0x5
c0016f4d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f52:	83 e0 df             	and    eax,0xffffffdf
c0016f55:	88 c2                	mov    dl,al
c0016f57:	88 c8                	mov    al,cl
c0016f59:	09 d0                	or     eax,edx
c0016f5b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f60:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f65:	83 e0 01             	and    eax,0x1
c0016f68:	75 0c                	jne    c0016f76 <HalDetectFeatures()+0x11e>
c0016f6a:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f6f:	25 00 04 00 00       	and    eax,0x400
c0016f74:	74 0f                	je     c0016f85 <HalDetectFeatures()+0x12d>
c0016f76:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f7b:	83 e0 fe             	and    eax,0xfffffffe
c0016f7e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f83:	eb 28                	jmp    c0016fad <HalDetectFeatures()+0x155>
c0016f85:	83 ec 0c             	sub    esp,0xc
c0016f88:	68 00 02 00 00       	push   0x200
c0016f8d:	e8 0f fe ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	89 c1                	mov    ecx,eax
c0016f97:	83 e1 01             	and    ecx,0x1
c0016f9a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f9f:	83 e0 fe             	and    eax,0xfffffffe
c0016fa2:	88 c2                	mov    dl,al
c0016fa4:	88 c8                	mov    al,cl
c0016fa6:	09 d0                	or     eax,edx
c0016fa8:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fad:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fb2:	83 e0 01             	and    eax,0x1
c0016fb5:	0f b6 c0             	movzx  eax,al
c0016fb8:	85 c0                	test   eax,eax
c0016fba:	74 1c                	je     c0016fd8 <HalDetectFeatures()+0x180>
c0016fbc:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fc1:	83 e0 08             	and    eax,0x8
c0016fc4:	0f b6 c0             	movzx  eax,al
c0016fc7:	85 c0                	test   eax,eax
c0016fc9:	75 0d                	jne    c0016fd8 <HalDetectFeatures()+0x180>
c0016fcb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fd0:	83 e0 fe             	and    eax,0xfffffffe
c0016fd3:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	68 ec 2f 02 c0       	push   0xc0022fec
c0016fe0:	e8 7f ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fed:	83 e0 fe             	and    eax,0xfffffffe
c0016ff0:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ff5:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016ffd:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017005:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001700d:	85 c0                	test   eax,eax
c001700f:	0f 84 ab 00 00 00    	je     c00170c0 <HalDetectFeatures()+0x268>
c0017015:	83 ec 0c             	sub    esp,0xc
c0017018:	6a 01                	push   0x1
c001701a:	e8 af fd ff ff       	call   c0016dce <cpuidCheckECX(unsigned int)>
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	83 e0 01             	and    eax,0x1
c0017025:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017028:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c001702d:	83 e0 fd             	and    eax,0xfffffffd
c0017030:	88 c2                	mov    dl,al
c0017032:	88 c8                	mov    al,cl
c0017034:	09 d0                	or     eax,edx
c0017036:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c001703b:	83 ec 0c             	sub    esp,0xc
c001703e:	68 00 02 00 00       	push   0x200
c0017043:	e8 86 fd ff ff       	call   c0016dce <cpuidCheckECX(unsigned int)>
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	83 e0 01             	and    eax,0x1
c001704e:	89 c1                	mov    ecx,eax
c0017050:	c1 e1 04             	shl    ecx,0x4
c0017053:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017058:	83 e0 ef             	and    eax,0xffffffef
c001705b:	88 c2                	mov    dl,al
c001705d:	88 c8                	mov    al,cl
c001705f:	09 d0                	or     eax,edx
c0017061:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	68 00 00 08 00       	push   0x80000
c001706e:	e8 5b fd ff ff       	call   c0016dce <cpuidCheckECX(unsigned int)>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	83 e0 01             	and    eax,0x1
c0017079:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017080:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017085:	83 e0 fb             	and    eax,0xfffffffb
c0017088:	88 c2                	mov    dl,al
c001708a:	88 c8                	mov    al,cl
c001708c:	09 d0                	or     eax,edx
c001708e:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017093:	83 ec 0c             	sub    esp,0xc
c0017096:	68 00 00 10 00       	push   0x100000
c001709b:	e8 2e fd ff ff       	call   c0016dce <cpuidCheckECX(unsigned int)>
c00170a0:	83 c4 10             	add    esp,0x10
c00170a3:	83 e0 01             	and    eax,0x1
c00170a6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170ad:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c00170b2:	83 e0 f7             	and    eax,0xfffffff7
c00170b5:	88 c2                	mov    dl,al
c00170b7:	88 c8                	mov    al,cl
c00170b9:	09 d0                	or     eax,edx
c00170bb:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c00170c0:	83 ec 0c             	sub    esp,0xc
c00170c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170c7:	50                   	push   eax
c00170c8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00170cc:	50                   	push   eax
c00170cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00170d1:	50                   	push   eax
c00170d2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00170d6:	50                   	push   eax
c00170d7:	68 00 00 00 80       	push   0x80000000
c00170dc:	e8 22 fc ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170e1:	83 c4 20             	add    esp,0x20
c00170e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e8:	3d 00 00 00 80       	cmp    eax,0x80000000
c00170ed:	76 4b                	jbe    c001713a <HalDetectFeatures()+0x2e2>
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170f6:	50                   	push   eax
c00170f7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00170fb:	50                   	push   eax
c00170fc:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017100:	50                   	push   eax
c0017101:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017105:	50                   	push   eax
c0017106:	68 01 00 00 80       	push   0x80000001
c001710b:	e8 f3 fb ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017110:	83 c4 20             	add    esp,0x20
c0017113:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017118:	83 e0 bf             	and    eax,0xffffffbf
c001711b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017120:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017125:	83 e0 fd             	and    eax,0xfffffffd
c0017128:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001712d:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017132:	83 e0 fe             	and    eax,0xfffffffe
c0017135:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001713a:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c001713f:	25 00 04 00 00       	and    eax,0x400
c0017144:	74 0d                	je     c0017153 <HalDetectFeatures()+0x2fb>
c0017146:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001714b:	83 e0 fb             	and    eax,0xfffffffb
c001714e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017153:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c001715a:	83 ec 04             	sub    esp,0x4
c001715d:	6a 0d                	push   0xd
c001715f:	6a 00                	push   0x0
c0017161:	68 70 c7 02 c0       	push   0xc002c770
c0017166:	e8 85 93 fe ff       	call   c00004f0 <memset>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017173:	83 e0 02             	and    eax,0x2
c0017176:	0f b6 c0             	movzx  eax,al
c0017179:	85 c0                	test   eax,eax
c001717b:	0f 84 16 08 00 00    	je     c0017997 <HalDetectFeatures()+0xb3f>
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	6a 10                	push   0x10
c0017186:	e8 16 fc ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	83 e0 01             	and    eax,0x1
c0017191:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017198:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001719d:	83 e0 f7             	and    eax,0xfffffff7
c00171a0:	88 c2                	mov    dl,al
c00171a2:	88 c8                	mov    al,cl
c00171a4:	09 d0                	or     eax,edx
c00171a6:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171ab:	83 ec 0c             	sub    esp,0xc
c00171ae:	6a 40                	push   0x40
c00171b0:	e8 ec fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 e0 01             	and    eax,0x1
c00171bb:	89 c1                	mov    ecx,eax
c00171bd:	c1 e1 04             	shl    ecx,0x4
c00171c0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171c5:	83 e0 ef             	and    eax,0xffffffef
c00171c8:	88 c2                	mov    dl,al
c00171ca:	88 c8                	mov    al,cl
c00171cc:	09 d0                	or     eax,edx
c00171ce:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171d3:	83 ec 0c             	sub    esp,0xc
c00171d6:	6a 08                	push   0x8
c00171d8:	e8 c4 fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	83 e0 01             	and    eax,0x1
c00171e3:	89 c1                	mov    ecx,eax
c00171e5:	c1 e1 05             	shl    ecx,0x5
c00171e8:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171ed:	83 e0 df             	and    eax,0xffffffdf
c00171f0:	88 c2                	mov    dl,al
c00171f2:	88 c8                	mov    al,cl
c00171f4:	09 d0                	or     eax,edx
c00171f6:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	68 00 20 00 00       	push   0x2000
c0017203:	e8 99 fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0017208:	83 c4 10             	add    esp,0x10
c001720b:	83 e0 01             	and    eax,0x1
c001720e:	89 c1                	mov    ecx,eax
c0017210:	c1 e1 06             	shl    ecx,0x6
c0017213:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017218:	83 e0 bf             	and    eax,0xffffffbf
c001721b:	88 c2                	mov    dl,al
c001721d:	88 c8                	mov    al,cl
c001721f:	09 d0                	or     eax,edx
c0017221:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017226:	83 ec 0c             	sub    esp,0xc
c0017229:	68 00 00 01 00       	push   0x10000
c001722e:	e8 6e fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0017233:	83 c4 10             	add    esp,0x10
c0017236:	89 c1                	mov    ecx,eax
c0017238:	c1 e1 07             	shl    ecx,0x7
c001723b:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017240:	83 e0 7f             	and    eax,0x7f
c0017243:	88 c2                	mov    dl,al
c0017245:	88 c8                	mov    al,cl
c0017247:	09 d0                	or     eax,edx
c0017249:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001724e:	83 ec 0c             	sub    esp,0xc
c0017251:	6a 01                	push   0x1
c0017253:	e8 49 fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	83 e0 01             	and    eax,0x1
c001725e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017265:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001726a:	83 e0 f7             	and    eax,0xfffffff7
c001726d:	88 c2                	mov    dl,al
c001726f:	88 c8                	mov    al,cl
c0017271:	09 d0                	or     eax,edx
c0017273:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017278:	83 ec 0c             	sub    esp,0xc
c001727b:	68 00 08 00 00       	push   0x800
c0017280:	e8 1c fb ff ff       	call   c0016da1 <cpuidCheckEDX(unsigned int)>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	89 c1                	mov    ecx,eax
c001728a:	83 e1 01             	and    ecx,0x1
c001728d:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017292:	83 e0 fe             	and    eax,0xfffffffe
c0017295:	88 c2                	mov    dl,al
c0017297:	88 c8                	mov    al,cl
c0017299:	09 d0                	or     eax,edx
c001729b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00172a0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172a5:	83 e0 40             	and    eax,0x40
c00172a8:	0f b6 c0             	movzx  eax,al
c00172ab:	85 c0                	test   eax,eax
c00172ad:	74 0a                	je     c00172b9 <HalDetectFeatures()+0x461>
c00172af:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00172b9:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172be:	83 e0 80             	and    eax,0xffffff80
c00172c1:	0f b6 c0             	movzx  eax,al
c00172c4:	85 c0                	test   eax,eax
c00172c6:	74 0a                	je     c00172d2 <HalDetectFeatures()+0x47a>
c00172c8:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172d9:	50                   	push   eax
c00172da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172de:	50                   	push   eax
c00172df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00172e3:	50                   	push   eax
c00172e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00172e8:	50                   	push   eax
c00172e9:	6a 00                	push   0x0
c00172eb:	e8 13 fa ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00172f0:	83 c4 20             	add    esp,0x20
c00172f3:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c00172fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017303:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001730b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001730f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017313:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017317:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001731b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001731f:	89 c6                	mov    esi,eax
c0017321:	89 d7                	mov    edi,edx
c0017323:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017325:	89 c8                	mov    eax,ecx
c0017327:	89 fa                	mov    edx,edi
c0017329:	89 f3                	mov    ebx,esi
c001732b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001732f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017333:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017337:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c001733c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017340:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017344:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0017348:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017350:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017354:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0017358:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001735c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017360:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017364:	89 c6                	mov    esi,eax
c0017366:	89 d7                	mov    edi,edx
c0017368:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001736a:	89 c8                	mov    eax,ecx
c001736c:	89 fa                	mov    edx,edi
c001736e:	89 f3                	mov    ebx,esi
c0017370:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017374:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017378:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001737c:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c0017381:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017388:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001738c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017390:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017398:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001739f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00173a3:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00173a7:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00173ae:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00173b2:	89 c6                	mov    esi,eax
c00173b4:	89 d7                	mov    edi,edx
c00173b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173b8:	89 c8                	mov    eax,ecx
c00173ba:	89 fa                	mov    edx,edi
c00173bc:	89 f3                	mov    ebx,esi
c00173be:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00173c2:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00173c6:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00173ca:	83 ec 08             	sub    esp,0x8
c00173cd:	68 fe 2f 02 c0       	push   0xc0022ffe
c00173d2:	68 70 c7 02 c0       	push   0xc002c770
c00173d7:	e8 74 93 fe ff       	call   c0000750 <strcmp>
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	85 c0                	test   eax,eax
c00173e1:	74 19                	je     c00173fc <HalDetectFeatures()+0x5a4>
c00173e3:	83 ec 08             	sub    esp,0x8
c00173e6:	68 0b 30 02 c0       	push   0xc002300b
c00173eb:	68 70 c7 02 c0       	push   0xc002c770
c00173f0:	e8 5b 93 fe ff       	call   c0000750 <strcmp>
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	85 c0                	test   eax,eax
c00173fa:	75 04                	jne    c0017400 <HalDetectFeatures()+0x5a8>
c00173fc:	b0 01                	mov    al,0x1
c00173fe:	eb 02                	jmp    c0017402 <HalDetectFeatures()+0x5aa>
c0017400:	b0 00                	mov    al,0x0
c0017402:	0f b6 c0             	movzx  eax,al
c0017405:	85 c0                	test   eax,eax
c0017407:	74 0f                	je     c0017418 <HalDetectFeatures()+0x5c0>
c0017409:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c0017413:	e9 0d 03 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017418:	83 ec 08             	sub    esp,0x8
c001741b:	68 18 30 02 c0       	push   0xc0023018
c0017420:	68 70 c7 02 c0       	push   0xc002c770
c0017425:	e8 26 93 fe ff       	call   c0000750 <strcmp>
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	85 c0                	test   eax,eax
c001742f:	74 19                	je     c001744a <HalDetectFeatures()+0x5f2>
c0017431:	83 ec 08             	sub    esp,0x8
c0017434:	68 25 30 02 c0       	push   0xc0023025
c0017439:	68 70 c7 02 c0       	push   0xc002c770
c001743e:	e8 0d 93 fe ff       	call   c0000750 <strcmp>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	85 c0                	test   eax,eax
c0017448:	75 04                	jne    c001744e <HalDetectFeatures()+0x5f6>
c001744a:	b0 01                	mov    al,0x1
c001744c:	eb 02                	jmp    c0017450 <HalDetectFeatures()+0x5f8>
c001744e:	b0 00                	mov    al,0x0
c0017450:	0f b6 c0             	movzx  eax,al
c0017453:	85 c0                	test   eax,eax
c0017455:	74 0f                	je     c0017466 <HalDetectFeatures()+0x60e>
c0017457:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c0017461:	e9 bf 02 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017466:	83 ec 08             	sub    esp,0x8
c0017469:	68 32 30 02 c0       	push   0xc0023032
c001746e:	68 70 c7 02 c0       	push   0xc002c770
c0017473:	e8 d8 92 fe ff       	call   c0000750 <strcmp>
c0017478:	83 c4 10             	add    esp,0x10
c001747b:	85 c0                	test   eax,eax
c001747d:	74 19                	je     c0017498 <HalDetectFeatures()+0x640>
c001747f:	83 ec 08             	sub    esp,0x8
c0017482:	68 3f 30 02 c0       	push   0xc002303f
c0017487:	68 70 c7 02 c0       	push   0xc002c770
c001748c:	e8 bf 92 fe ff       	call   c0000750 <strcmp>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	85 c0                	test   eax,eax
c0017496:	75 04                	jne    c001749c <HalDetectFeatures()+0x644>
c0017498:	b0 01                	mov    al,0x1
c001749a:	eb 02                	jmp    c001749e <HalDetectFeatures()+0x646>
c001749c:	b0 00                	mov    al,0x0
c001749e:	0f b6 c0             	movzx  eax,al
c00174a1:	85 c0                	test   eax,eax
c00174a3:	74 0f                	je     c00174b4 <HalDetectFeatures()+0x65c>
c00174a5:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00174af:	e9 71 02 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00174b4:	83 ec 08             	sub    esp,0x8
c00174b7:	68 4c 30 02 c0       	push   0xc002304c
c00174bc:	68 70 c7 02 c0       	push   0xc002c770
c00174c1:	e8 8a 92 fe ff       	call   c0000750 <strcmp>
c00174c6:	83 c4 10             	add    esp,0x10
c00174c9:	85 c0                	test   eax,eax
c00174cb:	0f 94 c0             	sete   al
c00174ce:	0f b6 c0             	movzx  eax,al
c00174d1:	85 c0                	test   eax,eax
c00174d3:	74 0f                	je     c00174e4 <HalDetectFeatures()+0x68c>
c00174d5:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00174df:	e9 41 02 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	68 59 30 02 c0       	push   0xc0023059
c00174ec:	68 70 c7 02 c0       	push   0xc002c770
c00174f1:	e8 5a 92 fe ff       	call   c0000750 <strcmp>
c00174f6:	83 c4 10             	add    esp,0x10
c00174f9:	85 c0                	test   eax,eax
c00174fb:	0f 94 c0             	sete   al
c00174fe:	0f b6 c0             	movzx  eax,al
c0017501:	85 c0                	test   eax,eax
c0017503:	74 0f                	je     c0017514 <HalDetectFeatures()+0x6bc>
c0017505:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c001750f:	e9 11 02 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017514:	83 ec 08             	sub    esp,0x8
c0017517:	68 18 30 02 c0       	push   0xc0023018
c001751c:	68 70 c7 02 c0       	push   0xc002c770
c0017521:	e8 2a 92 fe ff       	call   c0000750 <strcmp>
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	85 c0                	test   eax,eax
c001752b:	0f 94 c0             	sete   al
c001752e:	0f b6 c0             	movzx  eax,al
c0017531:	85 c0                	test   eax,eax
c0017533:	74 0f                	je     c0017544 <HalDetectFeatures()+0x6ec>
c0017535:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c001753f:	e9 e1 01 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017544:	83 ec 08             	sub    esp,0x8
c0017547:	68 66 30 02 c0       	push   0xc0023066
c001754c:	68 70 c7 02 c0       	push   0xc002c770
c0017551:	e8 fa 91 fe ff       	call   c0000750 <strcmp>
c0017556:	83 c4 10             	add    esp,0x10
c0017559:	85 c0                	test   eax,eax
c001755b:	0f 94 c0             	sete   al
c001755e:	0f b6 c0             	movzx  eax,al
c0017561:	85 c0                	test   eax,eax
c0017563:	74 0f                	je     c0017574 <HalDetectFeatures()+0x71c>
c0017565:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c001756f:	e9 b1 01 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017574:	83 ec 08             	sub    esp,0x8
c0017577:	68 73 30 02 c0       	push   0xc0023073
c001757c:	68 70 c7 02 c0       	push   0xc002c770
c0017581:	e8 ca 91 fe ff       	call   c0000750 <strcmp>
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	85 c0                	test   eax,eax
c001758b:	0f 94 c0             	sete   al
c001758e:	0f b6 c0             	movzx  eax,al
c0017591:	85 c0                	test   eax,eax
c0017593:	74 0f                	je     c00175a4 <HalDetectFeatures()+0x74c>
c0017595:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c001759f:	e9 81 01 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00175a4:	83 ec 08             	sub    esp,0x8
c00175a7:	68 80 30 02 c0       	push   0xc0023080
c00175ac:	68 70 c7 02 c0       	push   0xc002c770
c00175b1:	e8 9a 91 fe ff       	call   c0000750 <strcmp>
c00175b6:	83 c4 10             	add    esp,0x10
c00175b9:	85 c0                	test   eax,eax
c00175bb:	0f 94 c0             	sete   al
c00175be:	0f b6 c0             	movzx  eax,al
c00175c1:	85 c0                	test   eax,eax
c00175c3:	74 0f                	je     c00175d4 <HalDetectFeatures()+0x77c>
c00175c5:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c00175cf:	e9 51 01 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00175d4:	83 ec 08             	sub    esp,0x8
c00175d7:	68 8d 30 02 c0       	push   0xc002308d
c00175dc:	68 70 c7 02 c0       	push   0xc002c770
c00175e1:	e8 6a 91 fe ff       	call   c0000750 <strcmp>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	85 c0                	test   eax,eax
c00175eb:	0f 94 c0             	sete   al
c00175ee:	0f b6 c0             	movzx  eax,al
c00175f1:	85 c0                	test   eax,eax
c00175f3:	74 0f                	je     c0017604 <HalDetectFeatures()+0x7ac>
c00175f5:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c00175ff:	e9 21 01 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017604:	83 ec 08             	sub    esp,0x8
c0017607:	68 9a 30 02 c0       	push   0xc002309a
c001760c:	68 70 c7 02 c0       	push   0xc002c770
c0017611:	e8 3a 91 fe ff       	call   c0000750 <strcmp>
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	85 c0                	test   eax,eax
c001761b:	0f 94 c0             	sete   al
c001761e:	0f b6 c0             	movzx  eax,al
c0017621:	85 c0                	test   eax,eax
c0017623:	74 0f                	je     c0017634 <HalDetectFeatures()+0x7dc>
c0017625:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c001762f:	e9 f1 00 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017634:	83 ec 08             	sub    esp,0x8
c0017637:	68 a7 30 02 c0       	push   0xc00230a7
c001763c:	68 70 c7 02 c0       	push   0xc002c770
c0017641:	e8 0a 91 fe ff       	call   c0000750 <strcmp>
c0017646:	83 c4 10             	add    esp,0x10
c0017649:	85 c0                	test   eax,eax
c001764b:	0f 94 c0             	sete   al
c001764e:	0f b6 c0             	movzx  eax,al
c0017651:	85 c0                	test   eax,eax
c0017653:	74 0f                	je     c0017664 <HalDetectFeatures()+0x80c>
c0017655:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c001765f:	e9 c1 00 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017664:	83 ec 08             	sub    esp,0x8
c0017667:	68 b4 30 02 c0       	push   0xc00230b4
c001766c:	68 70 c7 02 c0       	push   0xc002c770
c0017671:	e8 da 90 fe ff       	call   c0000750 <strcmp>
c0017676:	83 c4 10             	add    esp,0x10
c0017679:	85 c0                	test   eax,eax
c001767b:	0f 94 c0             	sete   al
c001767e:	0f b6 c0             	movzx  eax,al
c0017681:	85 c0                	test   eax,eax
c0017683:	74 0f                	je     c0017694 <HalDetectFeatures()+0x83c>
c0017685:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001768f:	e9 91 00 00 00       	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c0017694:	83 ec 08             	sub    esp,0x8
c0017697:	68 c1 30 02 c0       	push   0xc00230c1
c001769c:	68 70 c7 02 c0       	push   0xc002c770
c00176a1:	e8 aa 90 fe ff       	call   c0000750 <strcmp>
c00176a6:	83 c4 10             	add    esp,0x10
c00176a9:	85 c0                	test   eax,eax
c00176ab:	0f 94 c0             	sete   al
c00176ae:	0f b6 c0             	movzx  eax,al
c00176b1:	85 c0                	test   eax,eax
c00176b3:	74 0c                	je     c00176c1 <HalDetectFeatures()+0x869>
c00176b5:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176bf:	eb 64                	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00176c1:	83 ec 08             	sub    esp,0x8
c00176c4:	68 ce 30 02 c0       	push   0xc00230ce
c00176c9:	68 70 c7 02 c0       	push   0xc002c770
c00176ce:	e8 7d 90 fe ff       	call   c0000750 <strcmp>
c00176d3:	83 c4 10             	add    esp,0x10
c00176d6:	85 c0                	test   eax,eax
c00176d8:	0f 94 c0             	sete   al
c00176db:	0f b6 c0             	movzx  eax,al
c00176de:	85 c0                	test   eax,eax
c00176e0:	74 0c                	je     c00176ee <HalDetectFeatures()+0x896>
c00176e2:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176ec:	eb 37                	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c00176ee:	83 ec 08             	sub    esp,0x8
c00176f1:	68 db 30 02 c0       	push   0xc00230db
c00176f6:	68 70 c7 02 c0       	push   0xc002c770
c00176fb:	e8 50 90 fe ff       	call   c0000750 <strcmp>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	85 c0                	test   eax,eax
c0017705:	0f 94 c0             	sete   al
c0017708:	0f b6 c0             	movzx  eax,al
c001770b:	85 c0                	test   eax,eax
c001770d:	74 0c                	je     c001771b <HalDetectFeatures()+0x8c3>
c001770f:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017719:	eb 0a                	jmp    c0017725 <HalDetectFeatures()+0x8cd>
c001771b:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c0017725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017729:	83 f8 06             	cmp    eax,0x6
c001772c:	0f 86 cc 00 00 00    	jbe    c00177fe <HalDetectFeatures()+0x9a6>
c0017732:	83 ec 0c             	sub    esp,0xc
c0017735:	68 80 00 00 00       	push   0x80
c001773a:	e8 bd f6 ff ff       	call   c0016dfc <cpuidCheckExtendedEBX(unsigned int)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	89 c1                	mov    ecx,eax
c0017744:	83 e1 01             	and    ecx,0x1
c0017747:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001774c:	83 e0 fe             	and    eax,0xfffffffe
c001774f:	88 c2                	mov    dl,al
c0017751:	88 c8                	mov    al,cl
c0017753:	09 d0                	or     eax,edx
c0017755:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 00 00 10 00       	push   0x100000
c0017762:	e8 95 f6 ff ff       	call   c0016dfc <cpuidCheckExtendedEBX(unsigned int)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	83 e0 01             	and    eax,0x1
c001776d:	89 c1                	mov    ecx,eax
c001776f:	c1 e1 06             	shl    ecx,0x6
c0017772:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017777:	83 e0 bf             	and    eax,0xffffffbf
c001777a:	88 c2                	mov    dl,al
c001777c:	88 c8                	mov    al,cl
c001777e:	09 d0                	or     eax,edx
c0017780:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017785:	83 ec 0c             	sub    esp,0xc
c0017788:	68 00 00 04 00       	push   0x40000
c001778d:	e8 6a f6 ff ff       	call   c0016dfc <cpuidCheckExtendedEBX(unsigned int)>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	83 e0 01             	and    eax,0x1
c0017798:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001779b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177a0:	83 e0 fd             	and    eax,0xfffffffd
c00177a3:	88 c2                	mov    dl,al
c00177a5:	88 c8                	mov    al,cl
c00177a7:	09 d0                	or     eax,edx
c00177a9:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	6a 04                	push   0x4
c00177b3:	e8 72 f6 ff ff       	call   c0016e2a <cpuidCheckExtendedECX(unsigned int)>
c00177b8:	83 c4 10             	add    esp,0x10
c00177bb:	83 e0 01             	and    eax,0x1
c00177be:	89 c1                	mov    ecx,eax
c00177c0:	c1 e1 05             	shl    ecx,0x5
c00177c3:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177c8:	83 e0 df             	and    eax,0xffffffdf
c00177cb:	88 c2                	mov    dl,al
c00177cd:	88 c8                	mov    al,cl
c00177cf:	09 d0                	or     eax,edx
c00177d1:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177d6:	83 ec 0c             	sub    esp,0xc
c00177d9:	6a 20                	push   0x20
c00177db:	e8 4a f6 ff ff       	call   c0016e2a <cpuidCheckExtendedECX(unsigned int)>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	83 e0 01             	and    eax,0x1
c00177e6:	89 c1                	mov    ecx,eax
c00177e8:	c1 e1 04             	shl    ecx,0x4
c00177eb:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00177f0:	83 e0 ef             	and    eax,0xffffffef
c00177f3:	88 c2                	mov    dl,al
c00177f5:	88 c8                	mov    al,cl
c00177f7:	09 d0                	or     eax,edx
c00177f9:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00177fe:	83 ec 0c             	sub    esp,0xc
c0017801:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017805:	50                   	push   eax
c0017806:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001780a:	50                   	push   eax
c001780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001780f:	50                   	push   eax
c0017810:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017814:	50                   	push   eax
c0017815:	6a 01                	push   0x1
c0017817:	e8 e7 f4 ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001781c:	83 c4 20             	add    esp,0x20
c001781f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017823:	83 e0 0f             	and    eax,0xf
c0017826:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c001782b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001782f:	c1 e8 04             	shr    eax,0x4
c0017832:	83 e0 0f             	and    eax,0xf
c0017835:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c001783a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001783e:	c1 e8 08             	shr    eax,0x8
c0017841:	83 e0 0f             	and    eax,0xf
c0017844:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001784d:	c1 e8 0c             	shr    eax,0xc
c0017850:	83 e0 03             	and    eax,0x3
c0017853:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c0017858:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001785d:	0f b6 c0             	movzx  eax,al
c0017860:	83 f8 06             	cmp    eax,0x6
c0017863:	74 0d                	je     c0017872 <HalDetectFeatures()+0xa1a>
c0017865:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001786a:	0f b6 c0             	movzx  eax,al
c001786d:	83 f8 0f             	cmp    eax,0xf
c0017870:	75 18                	jne    c001788a <HalDetectFeatures()+0xa32>
c0017872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017876:	c1 e8 10             	shr    eax,0x10
c0017879:	c1 e0 04             	shl    eax,0x4
c001787c:	88 c2                	mov    dl,al
c001787e:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c0017883:	09 d0                	or     eax,edx
c0017885:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c001788a:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001788f:	0f b6 c0             	movzx  eax,al
c0017892:	83 f8 0f             	cmp    eax,0xf
c0017895:	75 15                	jne    c00178ac <HalDetectFeatures()+0xa54>
c0017897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001789b:	c1 e8 14             	shr    eax,0x14
c001789e:	88 c2                	mov    dl,al
c00178a0:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00178a5:	01 d0                	add    eax,edx
c00178a7:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00178ac:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00178b4:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00178bc:	85 c0                	test   eax,eax
c00178be:	74 2d                	je     c00178ed <HalDetectFeatures()+0xa95>
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	68 00 00 00 40       	push   0x40000000
c00178c8:	e8 01 f5 ff ff       	call   c0016dce <cpuidCheckECX(unsigned int)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	83 e0 01             	and    eax,0x1
c00178d3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00178da:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00178df:	83 e0 fb             	and    eax,0xfffffffb
c00178e2:	88 c2                	mov    dl,al
c00178e4:	88 c8                	mov    al,cl
c00178e6:	09 d0                	or     eax,edx
c00178e8:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00178ed:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178f2:	83 c8 04             	or     eax,0x4
c00178f5:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178fa:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178ff:	83 c8 08             	or     eax,0x8
c0017902:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017907:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001790c:	83 c8 10             	or     eax,0x10
c001790f:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017914:	83 ec 0c             	sub    esp,0xc
c0017917:	8d 44 24 14          	lea    eax,[esp+0x14]
c001791b:	50                   	push   eax
c001791c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017920:	50                   	push   eax
c0017921:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017925:	50                   	push   eax
c0017926:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001792a:	50                   	push   eax
c001792b:	68 00 00 00 80       	push   0x80000000
c0017930:	e8 ce f3 ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017935:	83 c4 20             	add    esp,0x20
c0017938:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001793c:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017941:	0f 86 96 01 00 00    	jbe    c0017add <HalDetectFeatures()+0xc85>
c0017947:	83 ec 0c             	sub    esp,0xc
c001794a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001794e:	50                   	push   eax
c001794f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017953:	50                   	push   eax
c0017954:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017958:	50                   	push   eax
c0017959:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001795d:	50                   	push   eax
c001795e:	68 01 00 00 80       	push   0x80000001
c0017963:	e8 9b f3 ff ff       	call   c0016d03 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017968:	83 c4 20             	add    esp,0x20
c001796b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017970:	83 e0 7f             	and    eax,0x7f
c0017973:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017978:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001797d:	83 e0 fb             	and    eax,0xfffffffb
c0017980:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017985:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001798a:	83 e0 fd             	and    eax,0xfffffffd
c001798d:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017992:	e9 46 01 00 00       	jmp    c0017add <HalDetectFeatures()+0xc85>
c0017997:	83 ec 08             	sub    esp,0x8
c001799a:	68 4c 30 02 c0       	push   0xc002304c
c001799f:	68 70 c7 02 c0       	push   0xc002c770
c00179a4:	e8 97 8c fe ff       	call   c0000640 <strcpy>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00179b6:	e8 08 88 fe ff       	call   c00001c3 <is486>
c00179bb:	85 c0                	test   eax,eax
c00179bd:	0f 95 c0             	setne  al
c00179c0:	0f b6 c0             	movzx  eax,al
c00179c3:	85 c0                	test   eax,eax
c00179c5:	0f 84 8d 00 00 00    	je     c0017a58 <HalDetectFeatures()+0xc00>
c00179cb:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179d0:	83 c8 04             	or     eax,0x4
c00179d3:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179d8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179dd:	83 c8 08             	or     eax,0x8
c00179e0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179e5:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ea:	83 c8 10             	or     eax,0x10
c00179ed:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179f2:	0f 20 c0             	mov    eax,cr0
c00179f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179fd:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017a04:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a0b:	83 e0 04             	and    eax,0x4
c0017a0e:	74 1e                	je     c0017a2e <HalDetectFeatures()+0xbd6>
c0017a10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a17:	83 e0 10             	and    eax,0x10
c0017a1a:	75 12                	jne    c0017a2e <HalDetectFeatures()+0xbd6>
c0017a1c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a21:	83 e0 f7             	and    eax,0xfffffff7
c0017a24:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a29:	e9 af 00 00 00       	jmp    c0017add <HalDetectFeatures()+0xc85>
c0017a2e:	e8 6b 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a33:	83 e0 01             	and    eax,0x1
c0017a36:	83 e0 01             	and    eax,0x1
c0017a39:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a40:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a45:	83 e0 f7             	and    eax,0xfffffff7
c0017a48:	88 c2                	mov    dl,al
c0017a4a:	88 c8                	mov    al,cl
c0017a4c:	09 d0                	or     eax,edx
c0017a4e:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a53:	e9 85 00 00 00       	jmp    c0017add <HalDetectFeatures()+0xc85>
c0017a58:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a5d:	83 e0 fb             	and    eax,0xfffffffb
c0017a60:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a65:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a6a:	83 e0 f7             	and    eax,0xfffffff7
c0017a6d:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a72:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a77:	83 e0 ef             	and    eax,0xffffffef
c0017a7a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a7f:	0f 20 c0             	mov    eax,cr0
c0017a82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a8a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017a91:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017a98:	83 e0 04             	and    eax,0x4
c0017a9b:	74 1b                	je     c0017ab8 <HalDetectFeatures()+0xc60>
c0017a9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017aa4:	83 e0 10             	and    eax,0x10
c0017aa7:	75 0f                	jne    c0017ab8 <HalDetectFeatures()+0xc60>
c0017aa9:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017aae:	83 e0 f7             	and    eax,0xfffffff7
c0017ab1:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017ab6:	eb 25                	jmp    c0017add <HalDetectFeatures()+0xc85>
c0017ab8:	e8 e1 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017abd:	83 e0 01             	and    eax,0x1
c0017ac0:	83 e0 01             	and    eax,0x1
c0017ac3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017aca:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017acf:	83 e0 f7             	and    eax,0xfffffff7
c0017ad2:	88 c2                	mov    dl,al
c0017ad4:	88 c8                	mov    al,cl
c0017ad6:	09 d0                	or     eax,edx
c0017ad8:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017add:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017ae2:	83 e0 08             	and    eax,0x8
c0017ae5:	0f b6 c0             	movzx  eax,al
c0017ae8:	85 c0                	test   eax,eax
c0017aea:	75 25                	jne    c0017b11 <HalDetectFeatures()+0xcb9>
c0017aec:	e8 ad 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017af1:	83 e0 01             	and    eax,0x1
c0017af4:	83 e0 01             	and    eax,0x1
c0017af7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017afe:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b03:	83 e0 f7             	and    eax,0xfffffff7
c0017b06:	88 c2                	mov    dl,al
c0017b08:	88 c8                	mov    al,cl
c0017b0a:	09 d0                	or     eax,edx
c0017b0c:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017b11:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b16:	83 e0 08             	and    eax,0x8
c0017b19:	0f b6 c0             	movzx  eax,al
c0017b1c:	85 c0                	test   eax,eax
c0017b1e:	74 0d                	je     c0017b2d <HalDetectFeatures()+0xcd5>
c0017b20:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b25:	83 c8 10             	or     eax,0x10
c0017b28:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b2d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b32:	83 e0 10             	and    eax,0x10
c0017b35:	0f b6 c0             	movzx  eax,al
c0017b38:	85 c0                	test   eax,eax
c0017b3a:	75 23                	jne    c0017b5f <HalDetectFeatures()+0xd07>
c0017b3c:	e8 e5 7e 00 00       	call   c001fa26 <x87Detect>
c0017b41:	83 e0 01             	and    eax,0x1
c0017b44:	83 e0 01             	and    eax,0x1
c0017b47:	89 c1                	mov    ecx,eax
c0017b49:	c1 e1 04             	shl    ecx,0x4
c0017b4c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b51:	83 e0 ef             	and    eax,0xffffffef
c0017b54:	88 c2                	mov    dl,al
c0017b56:	88 c8                	mov    al,cl
c0017b58:	09 d0                	or     eax,edx
c0017b5a:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b5f:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b64:	83 e0 01             	and    eax,0x1
c0017b67:	0f b6 c0             	movzx  eax,al
c0017b6a:	85 c0                	test   eax,eax
c0017b6c:	75 2d                	jne    c0017b9b <HalDetectFeatures()+0xd43>
c0017b6e:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b73:	83 e0 02             	and    eax,0x2
c0017b76:	0f b6 c0             	movzx  eax,al
c0017b79:	85 c0                	test   eax,eax
c0017b7b:	75 1e                	jne    c0017b9b <HalDetectFeatures()+0xd43>
c0017b7d:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b82:	83 e0 04             	and    eax,0x4
c0017b85:	0f b6 c0             	movzx  eax,al
c0017b88:	85 c0                	test   eax,eax
c0017b8a:	75 0f                	jne    c0017b9b <HalDetectFeatures()+0xd43>
c0017b8c:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b91:	83 e0 08             	and    eax,0x8
c0017b94:	0f b6 c0             	movzx  eax,al
c0017b97:	85 c0                	test   eax,eax
c0017b99:	74 0d                	je     c0017ba8 <HalDetectFeatures()+0xd50>
c0017b9b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ba0:	83 c8 80             	or     eax,0xffffff80
c0017ba3:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017ba8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bad:	83 e0 10             	and    eax,0x10
c0017bb0:	0f b6 c0             	movzx  eax,al
c0017bb3:	85 c0                	test   eax,eax
c0017bb5:	74 2f                	je     c0017be6 <HalDetectFeatures()+0xd8e>
c0017bb7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bbc:	83 e0 80             	and    eax,0xffffff80
c0017bbf:	0f b6 c0             	movzx  eax,al
c0017bc2:	85 c0                	test   eax,eax
c0017bc4:	75 20                	jne    c0017be6 <HalDetectFeatures()+0xd8e>
c0017bc6:	e8 15 7e 00 00       	call   c001f9e0 <sseDetect>
c0017bcb:	83 e0 01             	and    eax,0x1
c0017bce:	89 c1                	mov    ecx,eax
c0017bd0:	c1 e1 07             	shl    ecx,0x7
c0017bd3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bd8:	83 e0 7f             	and    eax,0x7f
c0017bdb:	88 c2                	mov    dl,al
c0017bdd:	88 c8                	mov    al,cl
c0017bdf:	09 d0                	or     eax,edx
c0017be1:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017be6:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017beb:	83 e0 80             	and    eax,0xffffff80
c0017bee:	0f b6 c0             	movzx  eax,al
c0017bf1:	85 c0                	test   eax,eax
c0017bf3:	74 1c                	je     c0017c11 <HalDetectFeatures()+0xdb9>
c0017bf5:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017bfa:	83 e0 20             	and    eax,0x20
c0017bfd:	0f b6 c0             	movzx  eax,al
c0017c00:	85 c0                	test   eax,eax
c0017c02:	75 0d                	jne    c0017c11 <HalDetectFeatures()+0xdb9>
c0017c04:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017c09:	83 e0 df             	and    eax,0xffffffdf
c0017c0c:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017c11:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017c18:	90                   	nop
c0017c19:	81 c4 90 00 00 00    	add    esp,0x90
c0017c1f:	5b                   	pop    ebx
c0017c20:	5e                   	pop    esi
c0017c21:	5f                   	pop    edi
c0017c22:	c3                   	ret    

c0017c23 <HalEnableNMI()>:
c0017c23:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017c2a:	6a 10                	push   0x10
c0017c2c:	e8 22 ef ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c0017c31:	83 c4 04             	add    esp,0x4
c0017c34:	90                   	nop
c0017c35:	c3                   	ret    

c0017c36 <HalDisableNMI()>:
c0017c36:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017c3d:	6a 10                	push   0x10
c0017c3f:	e8 0f ef ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c0017c44:	83 c4 04             	add    esp,0x4
c0017c47:	90                   	nop
c0017c48:	c3                   	ret    

c0017c49 <HalGetNMIState()>:
c0017c49:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017c4e:	c3                   	ret    

c0017c4f <x86rdmsr(unsigned int)>:
c0017c4f:	83 ec 1c             	sub    esp,0x1c
c0017c52:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c57:	83 e0 08             	and    eax,0x8
c0017c5a:	0f b6 c0             	movzx  eax,al
c0017c5d:	85 c0                	test   eax,eax
c0017c5f:	75 10                	jne    c0017c71 <x86rdmsr(unsigned int)+0x22>
c0017c61:	83 ec 0c             	sub    esp,0xc
c0017c64:	68 e7 30 02 c0       	push   0xc00230e7
c0017c69:	e8 54 70 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c75:	89 c1                	mov    ecx,eax
c0017c77:	0f 32                	rdmsr  
c0017c79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c89:	83 c4 1c             	add    esp,0x1c
c0017c8c:	c3                   	ret    

c0017c8d <x86wrmsr(unsigned int, unsigned long long)>:
c0017c8d:	83 ec 1c             	sub    esp,0x1c
c0017c90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ca0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ca5:	83 e0 08             	and    eax,0x8
c0017ca8:	0f b6 c0             	movzx  eax,al
c0017cab:	85 c0                	test   eax,eax
c0017cad:	75 10                	jne    c0017cbf <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017caf:	83 ec 0c             	sub    esp,0xc
c0017cb2:	68 ed 30 02 c0       	push   0xc00230ed
c0017cb7:	e8 06 70 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017cc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ccb:	0f 30                	wrmsr  
c0017ccd:	90                   	nop
c0017cce:	83 c4 1c             	add    esp,0x1c
c0017cd1:	c3                   	ret    

c0017cd2 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017cd2:	83 ec 0c             	sub    esp,0xc
c0017cd5:	83 ec 0c             	sub    esp,0xc
c0017cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cdc:	e8 48 e7 ff ff       	call   c0016429 <Vm::faultHandler(regs*)>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	83 c4 0c             	add    esp,0xc
c0017ce7:	c3                   	ret    

c0017ce8 <HalFindRSDP()>:
c0017ce8:	83 ec 1c             	sub    esp,0x1c
c0017ceb:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017cf0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017cf5:	7e 0c                	jle    c0017d03 <HalFindRSDP()+0x1b>
c0017cf7:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017cfc:	25 00 04 00 00       	and    eax,0x400
c0017d01:	74 0d                	je     c0017d10 <HalFindRSDP()+0x28>
c0017d03:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d08:	83 e0 fb             	and    eax,0xfffffffb
c0017d0b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d10:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d15:	83 e0 04             	and    eax,0x4
c0017d18:	0f b6 c0             	movzx  eax,al
c0017d1b:	85 c0                	test   eax,eax
c0017d1d:	75 07                	jne    c0017d26 <HalFindRSDP()+0x3e>
c0017d1f:	b8 00 00 00 00       	mov    eax,0x0
c0017d24:	eb 53                	jmp    c0017d79 <HalFindRSDP()+0x91>
c0017d26:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017d2e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017d36:	77 2f                	ja     c0017d67 <HalFindRSDP()+0x7f>
c0017d38:	83 ec 04             	sub    esp,0x4
c0017d3b:	6a 08                	push   0x8
c0017d3d:	68 f3 30 02 c0       	push   0xc00230f3
c0017d42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d46:	e8 35 86 fe ff       	call   c0000380 <memcmp>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	0f 94 c0             	sete   al
c0017d53:	0f b6 c0             	movzx  eax,al
c0017d56:	85 c0                	test   eax,eax
c0017d58:	74 06                	je     c0017d60 <HalFindRSDP()+0x78>
c0017d5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d5e:	eb 19                	jmp    c0017d79 <HalFindRSDP()+0x91>
c0017d60:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017d65:	eb c7                	jmp    c0017d2e <HalFindRSDP()+0x46>
c0017d67:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d6c:	83 e0 fb             	and    eax,0xfffffffb
c0017d6f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d74:	b8 00 00 00 00       	mov    eax,0x0
c0017d79:	83 c4 1c             	add    esp,0x1c
c0017d7c:	c3                   	ret    

c0017d7d <HalHandlePageFault(void*, void*)>:
c0017d7d:	83 ec 1c             	sub    esp,0x1c
c0017d80:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d8a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d90:	0f 20 d2             	mov    edx,cr2
c0017d93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d9b:	83 ec 08             	sub    esp,0x8
c0017d9e:	52                   	push   edx
c0017d9f:	50                   	push   eax
c0017da0:	e8 7b af ff ff       	call   c0012d20 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	83 c4 1c             	add    esp,0x1c
c0017dab:	c3                   	ret    

c0017dac <HalHandleOpcodeFault(void*, void*)>:
c0017dac:	83 ec 1c             	sub    esp,0x1c
c0017daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017db7:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017dbc:	0f b6 c0             	movzx  eax,al
c0017dbf:	85 c0                	test   eax,eax
c0017dc1:	74 25                	je     c0017de8 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017dc3:	83 ec 0c             	sub    esp,0xc
c0017dc6:	68 e8 32 02 c0       	push   0xc00232e8
c0017dcb:	e8 94 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dda:	8d 50 19             	lea    edx,[eax+0x19]
c0017ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017de4:	b0 01                	mov    al,0x1
c0017de6:	eb 02                	jmp    c0017dea <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017de8:	b0 00                	mov    al,0x0
c0017dea:	83 c4 1c             	add    esp,0x1c
c0017ded:	c3                   	ret    

c0017dee <HalDisplayDebugInfo(void*)>:
c0017dee:	83 ec 2c             	sub    esp,0x2c
c0017df1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017df9:	0f 20 c0             	mov    eax,cr0
c0017dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e00:	0f 20 d0             	mov    eax,cr2
c0017e03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e07:	0f 20 d8             	mov    eax,cr3
c0017e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e0e:	0f 20 e0             	mov    eax,cr4
c0017e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e19:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017e1c:	83 ec 08             	sub    esp,0x8
c0017e1f:	50                   	push   eax
c0017e20:	68 0b 31 02 c0       	push   0xc002310b
c0017e25:	e8 3a f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e31:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017e34:	83 ec 08             	sub    esp,0x8
c0017e37:	50                   	push   eax
c0017e38:	68 fc 30 02 c0       	push   0xc00230fc
c0017e3d:	e8 22 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e42:	83 c4 10             	add    esp,0x10
c0017e45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e49:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e4c:	83 ec 08             	sub    esp,0x8
c0017e4f:	50                   	push   eax
c0017e50:	68 07 31 02 c0       	push   0xc0023107
c0017e55:	e8 0a f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e64:	83 ec 08             	sub    esp,0x8
c0017e67:	50                   	push   eax
c0017e68:	68 16 31 02 c0       	push   0xc0023116
c0017e6d:	e8 f2 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e79:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017e7c:	83 ec 08             	sub    esp,0x8
c0017e7f:	50                   	push   eax
c0017e80:	68 21 31 02 c0       	push   0xc0023121
c0017e85:	e8 da f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	83 ec 08             	sub    esp,0x8
c0017e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e94:	68 2c 31 02 c0       	push   0xc002312c
c0017e99:	e8 c6 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	83 ec 08             	sub    esp,0x8
c0017ea4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ea8:	68 37 31 02 c0       	push   0xc0023137
c0017ead:	e8 b2 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017eb2:	83 c4 10             	add    esp,0x10
c0017eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eb9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ebc:	c1 e0 05             	shl    eax,0x5
c0017ebf:	8d 90 00 46 02 c0    	lea    edx,[eax-0x3ffdba00]
c0017ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ec9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ecc:	83 ec 04             	sub    esp,0x4
c0017ecf:	52                   	push   edx
c0017ed0:	50                   	push   eax
c0017ed1:	68 42 31 02 c0       	push   0xc0023142
c0017ed6:	e8 89 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017edb:	83 c4 10             	add    esp,0x10
c0017ede:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ee3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	50                   	push   eax
c0017eed:	e8 17 92 ff ff       	call   c0011109 <setActiveTerminal(VgaText*)>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017efa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f00:	83 ec 08             	sub    esp,0x8
c0017f03:	68 51 31 02 c0       	push   0xc0023151
c0017f08:	50                   	push   eax
c0017f09:	e8 48 95 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f20:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017f23:	83 ec 08             	sub    esp,0x8
c0017f26:	52                   	push   edx
c0017f27:	50                   	push   eax
c0017f28:	e8 e3 94 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f3b:	83 ec 08             	sub    esp,0x8
c0017f3e:	68 5f 31 02 c0       	push   0xc002315f
c0017f43:	50                   	push   eax
c0017f44:	e8 0d 95 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f57:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017f5c:	8b 12                	mov    edx,DWORD PTR [edx]
c0017f5e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f61:	83 c2 0c             	add    edx,0xc
c0017f64:	83 ec 08             	sub    esp,0x8
c0017f67:	52                   	push   edx
c0017f68:	50                   	push   eax
c0017f69:	e8 e8 94 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f7c:	83 ec 08             	sub    esp,0x8
c0017f7f:	68 68 31 02 c0       	push   0xc0023168
c0017f84:	50                   	push   eax
c0017f85:	e8 cc 94 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f9c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017f9f:	83 ec 08             	sub    esp,0x8
c0017fa2:	52                   	push   edx
c0017fa3:	50                   	push   eax
c0017fa4:	e8 67 94 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fb1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fb7:	83 ec 08             	sub    esp,0x8
c0017fba:	68 70 31 02 c0       	push   0xc0023170
c0017fbf:	50                   	push   eax
c0017fc0:	e8 91 94 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fcd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fd7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017fda:	83 ec 08             	sub    esp,0x8
c0017fdd:	52                   	push   edx
c0017fde:	50                   	push   eax
c0017fdf:	e8 2c 94 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff2:	83 ec 08             	sub    esp,0x8
c0017ff5:	68 78 31 02 c0       	push   0xc0023178
c0017ffa:	50                   	push   eax
c0017ffb:	e8 56 94 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018008:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001800e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018012:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018015:	83 ec 08             	sub    esp,0x8
c0018018:	52                   	push   edx
c0018019:	50                   	push   eax
c001801a:	e8 f1 93 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c001801f:	83 c4 10             	add    esp,0x10
c0018022:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018027:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001802d:	83 ec 08             	sub    esp,0x8
c0018030:	68 80 31 02 c0       	push   0xc0023180
c0018035:	50                   	push   eax
c0018036:	e8 1b 94 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001803b:	83 c4 10             	add    esp,0x10
c001803e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018043:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018049:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001804d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018050:	83 ec 08             	sub    esp,0x8
c0018053:	52                   	push   edx
c0018054:	50                   	push   eax
c0018055:	e8 b6 93 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018062:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018068:	83 ec 08             	sub    esp,0x8
c001806b:	68 88 31 02 c0       	push   0xc0023188
c0018070:	50                   	push   eax
c0018071:	e8 e0 93 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0018076:	83 c4 10             	add    esp,0x10
c0018079:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001807e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018084:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018088:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001808b:	83 ec 08             	sub    esp,0x8
c001808e:	52                   	push   edx
c001808f:	50                   	push   eax
c0018090:	e8 7b 93 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0018095:	83 c4 10             	add    esp,0x10
c0018098:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001809d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180a3:	83 ec 08             	sub    esp,0x8
c00180a6:	68 90 31 02 c0       	push   0xc0023190
c00180ab:	50                   	push   eax
c00180ac:	e8 a5 93 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180c3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00180c6:	83 ec 08             	sub    esp,0x8
c00180c9:	52                   	push   edx
c00180ca:	50                   	push   eax
c00180cb:	e8 40 93 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180de:	83 ec 08             	sub    esp,0x8
c00180e1:	68 98 31 02 c0       	push   0xc0023198
c00180e6:	50                   	push   eax
c00180e7:	e8 6a 93 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00180ec:	83 c4 10             	add    esp,0x10
c00180ef:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180fa:	83 ec 08             	sub    esp,0x8
c00180fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018101:	50                   	push   eax
c0018102:	e8 09 93 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001810f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018115:	83 ec 08             	sub    esp,0x8
c0018118:	68 a1 31 02 c0       	push   0xc00231a1
c001811d:	50                   	push   eax
c001811e:	e8 33 93 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001812b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018131:	83 ec 08             	sub    esp,0x8
c0018134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018138:	50                   	push   eax
c0018139:	e8 d2 92 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c001813e:	83 c4 10             	add    esp,0x10
c0018141:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018146:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001814c:	83 ec 08             	sub    esp,0x8
c001814f:	68 a9 31 02 c0       	push   0xc00231a9
c0018154:	50                   	push   eax
c0018155:	e8 fc 92 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001815a:	83 c4 10             	add    esp,0x10
c001815d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018162:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018168:	83 ec 08             	sub    esp,0x8
c001816b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001816f:	50                   	push   eax
c0018170:	e8 9b 92 ff ff       	call   c0011410 <VgaText::putx(unsigned int)>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	fa                   	cli    
c0018179:	f4                   	hlt    
c001817a:	eb fe                	jmp    c001817a <HalDisplayDebugInfo(void*)+0x38c>

c001817c <HalReceivedNMI()>:
c001817c:	83 ec 1c             	sub    esp,0x1c
c001817f:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001818a:	89 c2                	mov    edx,eax
c001818c:	ec                   	in     al,dx
c001818d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018191:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018195:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018199:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00181a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181a4:	89 c2                	mov    edx,eax
c00181a6:	ec                   	in     al,dx
c00181a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00181ab:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00181af:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	68 b1 31 02 c0       	push   0xc00231b1
c00181bb:	e8 a4 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00181c8:	83 e0 10             	and    eax,0x10
c00181cb:	74 10                	je     c00181dd <HalReceivedNMI()+0x61>
c00181cd:	83 ec 0c             	sub    esp,0xc
c00181d0:	68 c2 31 02 c0       	push   0xc00231c2
c00181d5:	e8 e8 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00181e2:	83 e0 40             	and    eax,0x40
c00181e5:	74 10                	je     c00181f7 <HalReceivedNMI()+0x7b>
c00181e7:	83 ec 0c             	sub    esp,0xc
c00181ea:	68 cf 31 02 c0       	push   0xc00231cf
c00181ef:	e8 ce 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c00181f4:	83 c4 10             	add    esp,0x10
c00181f7:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00181fb:	0f be c0             	movsx  eax,al
c00181fe:	85 c0                	test   eax,eax
c0018200:	79 10                	jns    c0018212 <HalReceivedNMI()+0x96>
c0018202:	83 ec 0c             	sub    esp,0xc
c0018205:	68 d9 31 02 c0       	push   0xc00231d9
c001820a:	e8 b3 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c001820f:	83 c4 10             	add    esp,0x10
c0018212:	90                   	nop
c0018213:	83 c4 1c             	add    esp,0x1c
c0018216:	c3                   	ret    

c0018217 <HalSystemIdle()>:
c0018217:	56                   	push   esi
c0018218:	53                   	push   ebx
c0018219:	83 ec 14             	sub    esp,0x14
c001821c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018221:	83 e0 10             	and    eax,0x10
c0018224:	0f b6 c0             	movzx  eax,al
c0018227:	85 c0                	test   eax,eax
c0018229:	74 43                	je     c001826e <HalSystemIdle()+0x57>
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	68 e1 00 00 00       	push   0xe1
c0018233:	e8 17 fa ff ff       	call   c0017c4f <x86rdmsr(unsigned int)>
c0018238:	83 c4 10             	add    esp,0x10
c001823b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001823f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018243:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018247:	83 e0 02             	and    eax,0x2
c001824a:	89 c3                	mov    ebx,eax
c001824c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018250:	83 e0 00             	and    eax,0x0
c0018253:	89 c6                	mov    esi,eax
c0018255:	83 ec 04             	sub    esp,0x4
c0018258:	56                   	push   esi
c0018259:	53                   	push   ebx
c001825a:	68 e1 00 00 00       	push   0xe1
c001825f:	e8 29 fa ff ff       	call   c0017c8d <x86wrmsr(unsigned int, unsigned long long)>
c0018264:	83 c4 10             	add    esp,0x10
c0018267:	e8 28 7f fe ff       	call   c0000194 <doTPAUSE>
c001826c:	eb 01                	jmp    c001826f <HalSystemIdle()+0x58>
c001826e:	f4                   	hlt    
c001826f:	90                   	nop
c0018270:	83 c4 14             	add    esp,0x14
c0018273:	5b                   	pop    ebx
c0018274:	5e                   	pop    esi
c0018275:	c3                   	ret    

c0018276 <i386SaveCoprocessor(void*)>:
c0018276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001827a:	83 c0 3f             	add    eax,0x3f
c001827d:	83 e0 c0             	and    eax,0xffffffc0
c0018280:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018284:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c001828a <i386LoadCoprocessor(void*)>:
c001828a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001828e:	83 c0 3f             	add    eax,0x3f
c0018291:	83 e0 c0             	and    eax,0xffffffc0
c0018294:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018298:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c001829e <x87EmulHandler(regs*, void*)>:
c001829e:	53                   	push   ebx
c001829f:	83 ec 08             	sub    esp,0x8
c00182a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a7:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00182ab:	74 10                	je     c00182bd <x87EmulHandler(regs*, void*)+0x1f>
c00182ad:	83 ec 0c             	sub    esp,0xc
c00182b0:	68 e6 31 02 c0       	push   0xc00231e6
c00182b5:	e8 08 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c00182ba:	83 c4 10             	add    esp,0x10
c00182bd:	0f 20 c0             	mov    eax,cr0
c00182c0:	a8 08                	test   al,0x8
c00182c2:	74 59                	je     c001831d <x87EmulHandler(regs*, void*)+0x7f>
c00182c4:	0f 06                	clts   
c00182c6:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c00182cb:	85 c0                	test   eax,eax
c00182cd:	74 0e                	je     c00182dd <x87EmulHandler(regs*, void*)+0x3f>
c00182cf:	83 ec 0c             	sub    esp,0xc
c00182d2:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00182d5:	e8 9c ff ff ff       	call   c0018276 <i386SaveCoprocessor(void*)>
c00182da:	83 c4 10             	add    esp,0x10
c00182dd:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00182e3:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00182e7:	75 12                	jne    c00182fb <x87EmulHandler(regs*, void*)+0x5d>
c00182e9:	83 ec 0c             	sub    esp,0xc
c00182ec:	68 40 02 00 00       	push   0x240
c00182f1:	e8 85 66 ff ff       	call   c000e97b <malloc>
c00182f6:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00182f9:	eb 10                	jmp    c001830b <x87EmulHandler(regs*, void*)+0x6d>
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018303:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018306:	e8 7f ff ff ff       	call   c001828a <i386LoadCoprocessor(void*)>
c001830b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c0018318:	83 c4 08             	add    esp,0x8
c001831b:	5b                   	pop    ebx
c001831c:	c3                   	ret    
c001831d:	83 ec 0c             	sub    esp,0xc
c0018320:	68 fa 31 02 c0       	push   0xc00231fa
c0018325:	e8 3a ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001832a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018332:	83 c4 18             	add    esp,0x18
c0018335:	5b                   	pop    ebx
c0018336:	e9 35 da ff ff       	jmp    c0015d70 <Thr::terminateFromIRQ(int)>

c001833b <HalInitialiseCoprocessor()>:
c001833b:	83 ec 10             	sub    esp,0x10
c001833e:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018348:	6a 00                	push   0x0
c001834a:	68 9e 82 01 c0       	push   0xc001829e
c001834f:	6a 07                	push   0x7
c0018351:	e8 9d 06 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018356:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	a8 80                	test   al,0x80
c0018360:	74 1c                	je     c001837e <HalInitialiseCoprocessor()+0x43>
c0018362:	c7 05 50 c7 02 c0 f8 f9 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f9f8
c001836c:	c7 05 4c c7 02 c0 00 fa 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001fa00
c0018376:	83 c4 0c             	add    esp,0xc
c0018379:	e9 8a 76 00 00       	jmp    c001fa08 <sseInit>
c001837e:	a8 10                	test   al,0x10
c0018380:	74 1c                	je     c001839e <HalInitialiseCoprocessor()+0x63>
c0018382:	c7 05 50 c7 02 c0 47 fa 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001fa47
c001838c:	c7 05 4c c7 02 c0 4e fa 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001fa4e
c0018396:	83 c4 0c             	add    esp,0xc
c0018399:	e9 b7 76 00 00       	jmp    c001fa55 <x87Init>
c001839e:	c7 05 50 c7 02 c0 4e 6b 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016b4e
c00183a8:	c7 05 4c c7 02 c0 4e 6b 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016b4e
c00183b2:	0f 20 c0             	mov    eax,cr0
c00183b5:	83 c8 04             	or     eax,0x4
c00183b8:	0f 22 c0             	mov    cr0,eax
c00183bb:	83 c4 0c             	add    esp,0xc
c00183be:	c3                   	ret    

c00183bf <HalPanic(char const*)>:
c00183bf:	53                   	push   ebx
c00183c0:	83 ec 10             	sub    esp,0x10
c00183c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183c7:	fa                   	cli    
c00183c8:	53                   	push   ebx
c00183c9:	68 10 32 02 c0       	push   0xc0023210
c00183ce:	e8 91 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183d3:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	85 c0                	test   eax,eax
c00183dd:	74 09                	je     c00183e8 <HalPanic(char const*)+0x29>
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	53                   	push   ebx
c00183e3:	ff d0                	call   eax
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00183ed:	85 c0                	test   eax,eax
c00183ef:	0f 84 dc 00 00 00    	je     c00184d1 <HalPanic(char const*)+0x112>
c00183f5:	52                   	push   edx
c00183f6:	6a 01                	push   0x1
c00183f8:	6a 0f                	push   0xf
c00183fa:	50                   	push   eax
c00183fb:	e8 64 8b ff ff       	call   c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018400:	59                   	pop    ecx
c0018401:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018407:	e8 48 8d ff ff       	call   c0011154 <VgaText::clearScreen()>
c001840c:	58                   	pop    eax
c001840d:	5a                   	pop    edx
c001840e:	68 7f 26 02 c0       	push   0xc002267f
c0018413:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018419:	e8 7e 8b ff ff       	call   c0010f9c <VgaText::setTitle(char*)>
c001841e:	83 c4 0c             	add    esp,0xc
c0018421:	6a 01                	push   0x1
c0018423:	6a 0f                	push   0xf
c0018425:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001842b:	e8 34 8b ff ff       	call   c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018430:	59                   	pop    ecx
c0018431:	58                   	pop    eax
c0018432:	68 29 32 02 c0       	push   0xc0023229
c0018437:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001843d:	e8 14 90 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0018442:	83 c4 0c             	add    esp,0xc
c0018445:	6a 0f                	push   0xf
c0018447:	6a 01                	push   0x1
c0018449:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001844f:	e8 10 8b ff ff       	call   c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018454:	58                   	pop    eax
c0018455:	5a                   	pop    edx
c0018456:	68 32 32 02 c0       	push   0xc0023232
c001845b:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018461:	e8 f0 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c0018466:	83 c4 0c             	add    esp,0xc
c0018469:	6a 01                	push   0x1
c001846b:	6a 0f                	push   0xf
c001846d:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018473:	e8 ec 8a ff ff       	call   c0010f64 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018478:	59                   	pop    ecx
c0018479:	58                   	pop    eax
c001847a:	68 76 32 02 c0       	push   0xc0023276
c001847f:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018485:	e8 cc 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001848a:	58                   	pop    eax
c001848b:	5a                   	pop    edx
c001848c:	68 3f 32 02 c0       	push   0xc002323f
c0018491:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018497:	e8 ba 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001849c:	59                   	pop    ecx
c001849d:	58                   	pop    eax
c001849e:	68 79 32 02 c0       	push   0xc0023279
c00184a3:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184a9:	e8 a8 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00184ae:	58                   	pop    eax
c00184af:	5a                   	pop    edx
c00184b0:	53                   	push   ebx
c00184b1:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184b7:	e8 9a 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00184bc:	59                   	pop    ecx
c00184bd:	5b                   	pop    ebx
c00184be:	68 76 32 02 c0       	push   0xc0023276
c00184c3:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184c9:	e8 88 8f ff ff       	call   c0011456 <VgaText::puts(char const*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	eb fe                	jmp    c00184d1 <HalPanic(char const*)+0x112>

c00184d3 <HalQueryPerformanceCounter()>:
c00184d3:	31 c0                	xor    eax,eax
c00184d5:	31 d2                	xor    edx,edx
c00184d7:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00184de:	75 02                	jne    c00184e2 <HalQueryPerformanceCounter()+0xf>
c00184e0:	0f 31                	rdtsc  
c00184e2:	c3                   	ret    

c00184e3 <HalInitialise()>:
c00184e3:	53                   	push   ebx
c00184e4:	83 ec 08             	sub    esp,0x8
c00184e7:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c00184ee:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00184f3:	83 e0 fe             	and    eax,0xfffffffe
c00184f6:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00184fb:	e8 d0 07 00 00       	call   c0018cd0 <picOpen()>
c0018500:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c0018507:	74 0a                	je     c0018513 <HalInitialise()+0x30>
c0018509:	e8 12 07 00 00       	call   c0018c20 <picDisable()>
c001850e:	e8 bd 6a 00 00       	call   c001efd0 <apicOpen()>
c0018513:	bb 0f 00 00 00       	mov    ebx,0xf
c0018518:	50                   	push   eax
c0018519:	6a 00                	push   0x0
c001851b:	68 28 e0 00 c0       	push   0xc000e028
c0018520:	6a 00                	push   0x0
c0018522:	e8 cc 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018527:	83 c4 0c             	add    esp,0xc
c001852a:	6a 00                	push   0x0
c001852c:	68 28 e0 00 c0       	push   0xc000e028
c0018531:	6a 01                	push   0x1
c0018533:	e8 bb 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018538:	83 c4 0c             	add    esp,0xc
c001853b:	6a 00                	push   0x0
c001853d:	68 18 e0 00 c0       	push   0xc000e018
c0018542:	6a 02                	push   0x2
c0018544:	e8 aa 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018549:	83 c4 0c             	add    esp,0xc
c001854c:	6a 00                	push   0x0
c001854e:	68 28 e0 00 c0       	push   0xc000e028
c0018553:	6a 03                	push   0x3
c0018555:	e8 99 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001855a:	83 c4 0c             	add    esp,0xc
c001855d:	6a 00                	push   0x0
c001855f:	68 28 e0 00 c0       	push   0xc000e028
c0018564:	6a 04                	push   0x4
c0018566:	e8 88 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001856b:	83 c4 0c             	add    esp,0xc
c001856e:	6a 00                	push   0x0
c0018570:	68 28 e0 00 c0       	push   0xc000e028
c0018575:	6a 05                	push   0x5
c0018577:	e8 77 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001857c:	83 c4 0c             	add    esp,0xc
c001857f:	6a 00                	push   0x0
c0018581:	68 5c e0 00 c0       	push   0xc000e05c
c0018586:	6a 06                	push   0x6
c0018588:	e8 66 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001858d:	83 c4 0c             	add    esp,0xc
c0018590:	6a 00                	push   0x0
c0018592:	68 b0 e0 00 c0       	push   0xc000e0b0
c0018597:	6a 08                	push   0x8
c0018599:	e8 55 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001859e:	83 c4 0c             	add    esp,0xc
c00185a1:	6a 00                	push   0x0
c00185a3:	68 28 e0 00 c0       	push   0xc000e028
c00185a8:	6a 09                	push   0x9
c00185aa:	e8 44 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185af:	83 c4 0c             	add    esp,0xc
c00185b2:	6a 00                	push   0x0
c00185b4:	68 28 e0 00 c0       	push   0xc000e028
c00185b9:	6a 0a                	push   0xa
c00185bb:	e8 33 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185c0:	83 c4 0c             	add    esp,0xc
c00185c3:	6a 00                	push   0x0
c00185c5:	68 28 e0 00 c0       	push   0xc000e028
c00185ca:	6a 0b                	push   0xb
c00185cc:	e8 22 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185d1:	83 c4 0c             	add    esp,0xc
c00185d4:	6a 00                	push   0x0
c00185d6:	68 70 df 00 c0       	push   0xc000df70
c00185db:	6a 0d                	push   0xd
c00185dd:	e8 11 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185e2:	83 c4 0c             	add    esp,0xc
c00185e5:	6a 00                	push   0x0
c00185e7:	68 c4 df 00 c0       	push   0xc000dfc4
c00185ec:	6a 0e                	push   0xe
c00185ee:	e8 00 04 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	50                   	push   eax
c00185f7:	6a 00                	push   0x0
c00185f9:	68 28 e0 00 c0       	push   0xc000e028
c00185fe:	53                   	push   ebx
c00185ff:	43                   	inc    ebx
c0018600:	e8 ee 03 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	83 fb 1e             	cmp    ebx,0x1e
c001860b:	75 e9                	jne    c00185f6 <HalInitialise()+0x113>
c001860d:	50                   	push   eax
c001860e:	6a 00                	push   0x0
c0018610:	68 f0 0d 01 c0       	push   0xc0010df0
c0018615:	6a 60                	push   0x60
c0018617:	e8 d7 03 00 00       	call   c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001861c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018621:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001862b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018632:	e8 44 63 ff ff       	call   c000e97b <malloc>
c0018637:	89 04 24             	mov    DWORD PTR [esp],eax
c001863a:	89 c3                	mov    ebx,eax
c001863c:	e8 fd 0d 00 00       	call   c001943e <RTC::RTC()>
c0018641:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001864b:	5a                   	pop    edx
c001864c:	59                   	pop    ecx
c001864d:	53                   	push   ebx
c001864e:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018654:	e8 e9 09 ff ff       	call   c0009042 <Device::addChild(Device*)>
c0018659:	8b 03                	mov    eax,DWORD PTR [ebx]
c001865b:	6a 00                	push   0x0
c001865d:	6a 00                	push   0x0
c001865f:	6a 00                	push   0x0
c0018661:	53                   	push   ebx
c0018662:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018665:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001866a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018670:	83 c4 28             	add    esp,0x28
c0018673:	5b                   	pop    ebx
c0018674:	c3                   	ret    

c0018675 <HalMakeBeep(int)>:
c0018675:	53                   	push   ebx
c0018676:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001867a:	85 db                	test   ebx,ebx
c001867c:	75 07                	jne    c0018685 <HalMakeBeep(int)+0x10>
c001867e:	e4 61                	in     al,0x61
c0018680:	83 e0 fc             	and    eax,0xfffffffc
c0018683:	eb 26                	jmp    c00186ab <HalMakeBeep(int)+0x36>
c0018685:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001868a:	99                   	cdq    
c001868b:	f7 fb                	idiv   ebx
c001868d:	89 c1                	mov    ecx,eax
c001868f:	b0 b6                	mov    al,0xb6
c0018691:	e6 43                	out    0x43,al
c0018693:	88 c8                	mov    al,cl
c0018695:	e6 42                	out    0x42,al
c0018697:	89 c8                	mov    eax,ecx
c0018699:	c1 e8 08             	shr    eax,0x8
c001869c:	e6 42                	out    0x42,al
c001869e:	e4 61                	in     al,0x61
c00186a0:	89 c2                	mov    edx,eax
c00186a2:	83 ca 03             	or     edx,0x3
c00186a5:	38 d0                	cmp    al,dl
c00186a7:	74 04                	je     c00186ad <HalMakeBeep(int)+0x38>
c00186a9:	88 d0                	mov    al,dl
c00186ab:	e6 61                	out    0x61,al
c00186ad:	5b                   	pop    ebx
c00186ae:	c3                   	ret    

c00186af <HalGetRand()>:
c00186af:	31 c0                	xor    eax,eax
c00186b1:	c3                   	ret    

c00186b2 <HalEndOfInterrupt(int)>:
c00186b2:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00186b9:	74 1d                	je     c00186d8 <HalEndOfInterrupt(int)+0x26>
c00186bb:	83 ec 18             	sub    esp,0x18
c00186be:	6a 1b                	push   0x1b
c00186c0:	e8 8a f5 ff ff       	call   c0017c4f <x86rdmsr(unsigned int)>
c00186c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00186ca:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00186d4:	83 c4 1c             	add    esp,0x1c
c00186d7:	c3                   	ret    
c00186d8:	e9 77 07 00 00       	jmp    c0018e54 <picEOI(int)>

c00186dd <HalRestart()>:
c00186dd:	c3                   	ret    

c00186de <HalShutdown()>:
c00186de:	c3                   	ret    

c00186df <HalSleep()>:
c00186df:	c3                   	ret    

c00186e0 <CPU::CPU()>:
c00186e0:	83 ec 0c             	sub    esp,0xc
c00186e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186e7:	83 ec 08             	sub    esp,0x8
c00186ea:	68 3b 30 02 c0       	push   0xc002303b
c00186ef:	50                   	push   eax
c00186f0:	e8 af 0a ff ff       	call   c00091a4 <Device::Device(char const*)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	ba 14 33 02 c0       	mov    edx,0xc0023314
c00186fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018701:	89 10                	mov    DWORD PTR [eax],edx
c0018703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018707:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018715:	05 64 01 00 00       	add    eax,0x164
c001871a:	83 ec 0c             	sub    esp,0xc
c001871d:	50                   	push   eax
c001871e:	e8 e1 59 ff ff       	call   c000e104 <GDT::GDT()>
c0018723:	83 c4 10             	add    esp,0x10
c0018726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001872a:	05 68 09 00 00       	add    eax,0x968
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	50                   	push   eax
c0018733:	e8 20 5c ff ff       	call   c000e358 <IDT::IDT()>
c0018738:	83 c4 10             	add    esp,0x10
c001873b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001873f:	05 68 11 00 00       	add    eax,0x1168
c0018744:	83 ec 0c             	sub    esp,0xc
c0018747:	50                   	push   eax
c0018748:	e8 a7 91 ff ff       	call   c00118f4 <TSS::TSS()>
c001874d:	83 c4 10             	add    esp,0x10
c0018750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018754:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001875e:	90                   	nop
c001875f:	83 c4 0c             	add    esp,0xc
c0018762:	c3                   	ret    
c0018763:	90                   	nop

c0018764 <CPU::setupSMEP()>:
c0018764:	0f 20 e0             	mov    eax,cr4
c0018767:	0d 00 00 10 00       	or     eax,0x100000
c001876c:	0f 22 e0             	mov    cr4,eax
c001876f:	c3                   	ret    

c0018770 <CPU::setupUMIP()>:
c0018770:	0f 20 e0             	mov    eax,cr4
c0018773:	80 cc 08             	or     ah,0x8
c0018776:	0f 22 e0             	mov    cr4,eax
c0018779:	c3                   	ret    

c001877a <CPU::setupTSC()>:
c001877a:	0f 20 e0             	mov    eax,cr4
c001877d:	83 c8 04             	or     eax,0x4
c0018780:	0f 22 e0             	mov    cr4,eax
c0018783:	c3                   	ret    

c0018784 <CPU::setupLargePages()>:
c0018784:	0f 20 e0             	mov    eax,cr4
c0018787:	83 c8 10             	or     eax,0x10
c001878a:	0f 22 e0             	mov    cr4,eax
c001878d:	c3                   	ret    

c001878e <CPU::setupPAT()>:
c001878e:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c0018795:	74 28                	je     c00187bf <CPU::setupPAT()+0x31>
c0018797:	53                   	push   ebx
c0018798:	83 ec 14             	sub    esp,0x14
c001879b:	68 77 02 00 00       	push   0x277
c00187a0:	e8 aa f4 ff ff       	call   c0017c4f <x86rdmsr(unsigned int)>
c00187a5:	83 c4 0c             	add    esp,0xc
c00187a8:	83 e2 f8             	and    edx,0xfffffff8
c00187ab:	83 ca 01             	or     edx,0x1
c00187ae:	52                   	push   edx
c00187af:	50                   	push   eax
c00187b0:	68 77 02 00 00       	push   0x277
c00187b5:	e8 d3 f4 ff ff       	call   c0017c8d <x86wrmsr(unsigned int, unsigned long long)>
c00187ba:	83 c4 18             	add    esp,0x18
c00187bd:	5b                   	pop    ebx
c00187be:	c3                   	ret    
c00187bf:	c3                   	ret    

c00187c0 <CPU::setupMTRR()>:
c00187c0:	c3                   	ret    
c00187c1:	90                   	nop

c00187c2 <CPU::setupGlobalPages()>:
c00187c2:	0f 20 e0             	mov    eax,cr4
c00187c5:	0c 80                	or     al,0x80
c00187c7:	0f 22 e0             	mov    cr4,eax
c00187ca:	c3                   	ret    
c00187cb:	90                   	nop

c00187cc <CPU::allowUsermodeDataAccess()>:
c00187cc:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00187d3:	74 03                	je     c00187d8 <CPU::allowUsermodeDataAccess()+0xc>
c00187d5:	0f 01 cb             	stac   
c00187d8:	c3                   	ret    
c00187d9:	90                   	nop

c00187da <CPU::prohibitUsermodeDataAccess()>:
c00187da:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00187e1:	74 03                	je     c00187e6 <CPU::prohibitUsermodeDataAccess()+0xc>
c00187e3:	0f 01 ca             	clac   
c00187e6:	c3                   	ret    
c00187e7:	90                   	nop

c00187e8 <CPU::setupSMAP()>:
c00187e8:	0f 20 e0             	mov    eax,cr4
c00187eb:	0d 00 00 20 00       	or     eax,0x200000
c00187f0:	0f 22 e0             	mov    cr4,eax
c00187f3:	eb e5                	jmp    c00187da <CPU::prohibitUsermodeDataAccess()>
c00187f5:	90                   	nop

c00187f6 <CPU::setupFeatures()>:
c00187f6:	53                   	push   ebx
c00187f7:	83 ec 08             	sub    esp,0x8
c00187fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187fe:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018805:	74 18                	je     c001881f <CPU::setupFeatures()+0x29>
c0018807:	83 ec 0c             	sub    esp,0xc
c001880a:	68 84 32 02 c0       	push   0xc0023284
c001880f:	e8 50 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018814:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018817:	e8 54 ff ff ff       	call   c0018770 <CPU::setupUMIP()>
c001881c:	83 c4 10             	add    esp,0x10
c001881f:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018826:	74 18                	je     c0018840 <CPU::setupFeatures()+0x4a>
c0018828:	83 ec 0c             	sub    esp,0xc
c001882b:	68 8e 32 02 c0       	push   0xc002328e
c0018830:	e8 2f e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018835:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018838:	e8 3d ff ff ff       	call   c001877a <CPU::setupTSC()>
c001883d:	83 c4 10             	add    esp,0x10
c0018840:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c0018847:	74 18                	je     c0018861 <CPU::setupFeatures()+0x6b>
c0018849:	83 ec 0c             	sub    esp,0xc
c001884c:	68 97 32 02 c0       	push   0xc0023297
c0018851:	e8 0e e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018856:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018859:	e8 26 ff ff ff       	call   c0018784 <CPU::setupLargePages()>
c001885e:	83 c4 10             	add    esp,0x10
c0018861:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c0018868:	74 18                	je     c0018882 <CPU::setupFeatures()+0x8c>
c001886a:	83 ec 0c             	sub    esp,0xc
c001886d:	68 a0 32 02 c0       	push   0xc00232a0
c0018872:	e8 ed e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018877:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001887a:	e8 43 ff ff ff       	call   c00187c2 <CPU::setupGlobalPages()>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c0018889:	74 18                	je     c00188a3 <CPU::setupFeatures()+0xad>
c001888b:	83 ec 0c             	sub    esp,0xc
c001888e:	68 b2 32 02 c0       	push   0xc00232b2
c0018893:	e8 cc e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001889b:	e8 ee fe ff ff       	call   c001878e <CPU::setupPAT()>
c00188a0:	83 c4 10             	add    esp,0x10
c00188a3:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00188aa:	74 11                	je     c00188bd <CPU::setupFeatures()+0xc7>
c00188ac:	c7 44 24 10 bb 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc00232bb
c00188b4:	83 c4 08             	add    esp,0x8
c00188b7:	5b                   	pop    ebx
c00188b8:	e9 a7 e6 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c00188bd:	83 c4 08             	add    esp,0x8
c00188c0:	5b                   	pop    ebx
c00188c1:	c3                   	ret    

c00188c2 <CPU::open(int, int, void*)>:
c00188c2:	55                   	push   ebp
c00188c3:	57                   	push   edi
c00188c4:	56                   	push   esi
c00188c5:	53                   	push   ebx
c00188c6:	83 ec 18             	sub    esp,0x18
c00188c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00188d5:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00188db:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00188e1:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00188e7:	50                   	push   eax
c00188e8:	e8 79 58 ff ff       	call   c000e166 <GDT::setup()>
c00188ed:	83 c4 0c             	add    esp,0xc
c00188f0:	6a 00                	push   0x0
c00188f2:	68 ef be ad de       	push   0xdeadbeef
c00188f7:	55                   	push   ebp
c00188f8:	e8 3b 90 ff ff       	call   c0011938 <TSS::setup(unsigned long, unsigned long)>
c00188fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018900:	e8 13 90 ff ff       	call   c0011918 <TSS::flush()>
c0018905:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001890b:	89 04 24             	mov    DWORD PTR [esp],eax
c001890e:	e8 bb 5a ff ff       	call   c000e3ce <IDT::setup()>
c0018913:	b8 00 04 00 00       	mov    eax,0x400
c0018918:	0f 23 f8             	mov    dr7,eax
c001891b:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018925:	e8 8c 65 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001892a:	83 c4 10             	add    esp,0x10
c001892d:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018933:	85 f6                	test   esi,esi
c0018935:	89 38                	mov    DWORD PTR [eax],edi
c0018937:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001893d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018940:	74 10                	je     c0018952 <CPU::open(int, int, void*)+0x90>
c0018942:	50                   	push   eax
c0018943:	50                   	push   eax
c0018944:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001894a:	56                   	push   esi
c001894b:	e8 90 99 ff ff       	call   c00122e0 <VAS::setCPUSpecific(unsigned long)>
c0018950:	eb 0d                	jmp    c001895f <CPU::open(int, int, void*)+0x9d>
c0018952:	83 ec 0c             	sub    esp,0xc
c0018955:	68 c5 32 02 c0       	push   0xc00232c5
c001895a:	e8 63 63 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001895f:	83 c4 10             	add    esp,0x10
c0018962:	83 ec 0c             	sub    esp,0xc
c0018965:	68 d3 32 02 c0       	push   0xc00232d3
c001896a:	e8 d1 3c ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001896f:	e8 6f fb ff ff       	call   c00184e3 <HalInitialise()>
c0018974:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0018979:	83 e0 10             	and    eax,0x10
c001897c:	83 f8 01             	cmp    eax,0x1
c001897f:	19 c0                	sbb    eax,eax
c0018981:	83 e0 46             	and    eax,0x46
c0018984:	83 c0 1e             	add    eax,0x1e
c0018987:	89 04 24             	mov    DWORD PTR [esp],eax
c001898a:	e8 82 1d ff ff       	call   c000a711 <setupTimer(int)>
c001898f:	83 c4 10             	add    esp,0x10
c0018992:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018998:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c001899f:	74 0c                	je     c00189ad <CPU::open(int, int, void*)+0xeb>
c00189a1:	83 ec 0c             	sub    esp,0xc
c00189a4:	53                   	push   ebx
c00189a5:	e8 4c fe ff ff       	call   c00187f6 <CPU::setupFeatures()>
c00189aa:	83 c4 10             	add    esp,0x10
c00189ad:	83 c4 0c             	add    esp,0xc
c00189b0:	31 c0                	xor    eax,eax
c00189b2:	5b                   	pop    ebx
c00189b3:	5e                   	pop    esi
c00189b4:	5f                   	pop    edi
c00189b5:	5d                   	pop    ebp
c00189b6:	c3                   	ret    

c00189b7 <convertLegacyIRQNumber(int)>:
c00189b7:	83 ec 0c             	sub    esp,0xc
c00189ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189be:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00189c5:	74 0c                	je     c00189d3 <convertLegacyIRQNumber(int)+0x1c>
c00189c7:	83 f8 0f             	cmp    eax,0xf
c00189ca:	7f 0b                	jg     c00189d7 <convertLegacyIRQNumber(int)+0x20>
c00189cc:	0f b6 80 88 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc178]
c00189d3:	83 c4 0c             	add    esp,0xc
c00189d6:	c3                   	ret    
c00189d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00189db:	83 ec 0c             	sub    esp,0xc
c00189de:	68 38 33 02 c0       	push   0xc0023338
c00189e3:	e8 da 62 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00189e8:	83 c4 10             	add    esp,0x10
c00189eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ef:	83 c4 0c             	add    esp,0xc
c00189f2:	c3                   	ret    

c00189f3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c00189f3:	56                   	push   esi
c00189f4:	31 c0                	xor    eax,eax
c00189f6:	53                   	push   ebx
c00189f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189ff:	89 ca                	mov    edx,ecx
c0018a01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018a05:	c1 e2 04             	shl    edx,0x4
c0018a08:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018a10:	74 17                	je     c0018a29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018a12:	83 c0 01             	add    eax,0x1
c0018a15:	83 f8 04             	cmp    eax,0x4
c0018a18:	75 ee                	jne    c0018a08 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018a1a:	c7 44 24 0c 99 33 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023399
c0018a22:	5b                   	pop    ebx
c0018a23:	5e                   	pop    esi
c0018a24:	e9 99 62 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0018a29:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018a2c:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c0018a33:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018a3a:	5b                   	pop    ebx
c0018a3b:	5e                   	pop    esi
c0018a3c:	c3                   	ret    

c0018a3d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018a3d:	57                   	push   edi
c0018a3e:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018a45:	56                   	push   esi
c0018a46:	53                   	push   ebx
c0018a47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a4f:	74 54                	je     c0018aa5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0018a51:	89 c7                	mov    edi,eax
c0018a53:	84 c0                	test   al,al
c0018a55:	74 1d                	je     c0018a74 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018a57:	83 fe 0f             	cmp    esi,0xf
c0018a5a:	0f 8f d5 00 00 00    	jg     c0018b35 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0018a60:	0f b6 b6 88 3e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc178]
c0018a67:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c0018a6f:	d1 ef                	shr    edi,1
c0018a71:	83 e7 01             	and    edi,0x1
c0018a74:	83 ec 08             	sub    esp,0x8
c0018a77:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a7c:	31 db                	xor    ebx,ebx
c0018a7e:	50                   	push   eax
c0018a7f:	68 a6 33 02 c0       	push   0xc00233a6
c0018a84:	e8 db e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a89:	83 c4 10             	add    esp,0x10
c0018a8c:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a91:	85 c0                	test   eax,eax
c0018a93:	7f 55                	jg     c0018aea <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a95:	83 ec 0c             	sub    esp,0xc
c0018a98:	68 bd 33 02 c0       	push   0xc00233bd
c0018a9d:	e8 20 62 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018aa2:	83 c4 10             	add    esp,0x10
c0018aa5:	8d 7e 20             	lea    edi,[esi+0x20]
c0018aa8:	89 f8                	mov    eax,edi
c0018aaa:	31 d2                	xor    edx,edx
c0018aac:	c1 e0 04             	shl    eax,0x4
c0018aaf:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018ab6:	85 c9                	test   ecx,ecx
c0018ab8:	0f 84 8e 00 00 00    	je     c0018b4c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018abe:	83 c2 01             	add    edx,0x1
c0018ac1:	83 fa 04             	cmp    edx,0x4
c0018ac4:	75 e9                	jne    c0018aaf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018ac6:	83 ec 0c             	sub    esp,0xc
c0018ac9:	68 74 33 02 c0       	push   0xc0023374
c0018ace:	e8 ef 61 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018ad3:	83 c4 10             	add    esp,0x10
c0018ad6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018adb:	5b                   	pop    ebx
c0018adc:	5e                   	pop    esi
c0018add:	5f                   	pop    edi
c0018ade:	c3                   	ret    
c0018adf:	83 c3 01             	add    ebx,0x1
c0018ae2:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018ae8:	7e ab                	jle    c0018a95 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018aea:	83 ec 08             	sub    esp,0x8
c0018aed:	8b 04 9d 00 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f00]
c0018af4:	56                   	push   esi
c0018af5:	50                   	push   eax
c0018af6:	e8 61 66 00 00       	call   c001f15c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	84 c0                	test   al,al
c0018b00:	74 dd                	je     c0018adf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018b02:	83 ec 04             	sub    esp,0x4
c0018b05:	89 f8                	mov    eax,edi
c0018b07:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018b0e:	0f b6 f8             	movzx  edi,al
c0018b11:	57                   	push   edi
c0018b12:	8d 7e 20             	lea    edi,[esi+0x20]
c0018b15:	6a 00                	push   0x0
c0018b17:	89 f8                	mov    eax,edi
c0018b19:	0f b6 c0             	movzx  eax,al
c0018b1c:	50                   	push   eax
c0018b1d:	89 f0                	mov    eax,esi
c0018b1f:	6a 00                	push   0x0
c0018b21:	0f b6 c0             	movzx  eax,al
c0018b24:	6a 00                	push   0x0
c0018b26:	50                   	push   eax
c0018b27:	53                   	push   ebx
c0018b28:	e8 9b 67 00 00       	call   c001f2c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018b2d:	83 c4 20             	add    esp,0x20
c0018b30:	e9 73 ff ff ff       	jmp    c0018aa8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018b35:	83 ec 0c             	sub    esp,0xc
c0018b38:	31 ff                	xor    edi,edi
c0018b3a:	68 38 33 02 c0       	push   0xc0023338
c0018b3f:	e8 7e 61 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018b44:	83 c4 10             	add    esp,0x10
c0018b47:	e9 28 ff ff ff       	jmp    c0018a74 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018b4c:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018b4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b53:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018b5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b5e:	5b                   	pop    ebx
c0018b5f:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018b66:	89 f0                	mov    eax,esi
c0018b68:	5e                   	pop    esi
c0018b69:	5f                   	pop    edi
c0018b6a:	c3                   	ret    

c0018b6b <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018b73:	c1 e0 04             	shl    eax,0x4
c0018b76:	8d 50 10             	lea    edx,[eax+0x10]
c0018b79:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018b7f:	74 08                	je     c0018b89 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018b81:	83 c0 04             	add    eax,0x4
c0018b84:	39 d0                	cmp    eax,edx
c0018b86:	75 f1                	jne    c0018b79 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018b88:	c3                   	ret    
c0018b89:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b93:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b9d:	eb e2                	jmp    c0018b81 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018b9f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018b9f:	53                   	push   ebx
c0018ba0:	83 ec 08             	sub    esp,0x8
c0018ba3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018ba7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018bac:	74 09                	je     c0018bb7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018bae:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018bb5:	75 37                	jne    c0018bee <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bbb:	83 c0 20             	add    eax,0x20
c0018bbe:	c1 e0 04             	shl    eax,0x4
c0018bc1:	8d 50 10             	lea    edx,[eax+0x10]
c0018bc4:	39 98 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ebx
c0018bca:	74 0c                	je     c0018bd8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018bcc:	83 c0 04             	add    eax,0x4
c0018bcf:	39 d0                	cmp    eax,edx
c0018bd1:	75 f1                	jne    c0018bc4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018bd3:	83 c4 08             	add    esp,0x8
c0018bd6:	5b                   	pop    ebx
c0018bd7:	c3                   	ret    
c0018bd8:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018be2:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018bec:	eb de                	jmp    c0018bcc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018bee:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018bf3:	7f 11                	jg     c0018c06 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bf9:	0f b6 80 88 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc178]
c0018c00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c04:	eb b1                	jmp    c0018bb7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018c06:	83 ec 0c             	sub    esp,0xc
c0018c09:	68 ca 33 02 c0       	push   0xc00233ca
c0018c0e:	e8 af 60 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	eb 9f                	jmp    c0018bb7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c0018c18 <picIoWait()>:
c0018c18:	eb 00                	jmp    c0018c1a <picIoWait()+0x2>
c0018c1a:	eb 00                	jmp    c0018c1c <picIoWait()+0x4>
c0018c1c:	90                   	nop
c0018c1d:	c3                   	ret    
c0018c1e:	66 90                	xchg   ax,ax

c0018c20 <picDisable()>:
c0018c20:	83 ec 10             	sub    esp,0x10
c0018c23:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018c2a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018c2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018c38:	ee                   	out    dx,al
c0018c39:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018c40:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018c45:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c49:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018c4e:	ee                   	out    dx,al
c0018c4f:	90                   	nop
c0018c50:	83 c4 10             	add    esp,0x10
c0018c53:	c3                   	ret    

c0018c54 <picGetIRQReg(int)>:
c0018c54:	83 ec 10             	sub    esp,0x10
c0018c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c5b:	0f b6 c0             	movzx  eax,al
c0018c5e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018c65:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018c69:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018c6d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018c72:	ee                   	out    dx,al
c0018c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c77:	0f b6 c0             	movzx  eax,al
c0018c7a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018c81:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018c85:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018c89:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018c8e:	ee                   	out    dx,al
c0018c8f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018c96:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018c9b:	89 c2                	mov    edx,eax
c0018c9d:	ec                   	in     al,dx
c0018c9e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ca2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ca6:	0f b6 c0             	movzx  eax,al
c0018ca9:	c1 e0 08             	shl    eax,0x8
c0018cac:	89 c1                	mov    ecx,eax
c0018cae:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018cb5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018cba:	89 c2                	mov    edx,eax
c0018cbc:	ec                   	in     al,dx
c0018cbd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018cc1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018cc5:	0f b6 c0             	movzx  eax,al
c0018cc8:	09 c8                	or     eax,ecx
c0018cca:	83 c4 10             	add    esp,0x10
c0018ccd:	c3                   	ret    
c0018cce:	66 90                	xchg   ax,ax

c0018cd0 <picOpen()>:
c0018cd0:	83 ec 50             	sub    esp,0x50
c0018cd3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018cda:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018cdf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ce3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ce7:	ee                   	out    dx,al
c0018ce8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018cef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018cf4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018cf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cfc:	ee                   	out    dx,al
c0018cfd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018d05:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018d0d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d18:	89 c2                	mov    edx,eax
c0018d1a:	ec                   	in     al,dx
c0018d1b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018d1f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018d23:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018d27:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d32:	89 c2                	mov    edx,eax
c0018d34:	ec                   	in     al,dx
c0018d35:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018d39:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018d3d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018d41:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018d48:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018d4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018d51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d55:	ee                   	out    dx,al
c0018d56:	e8 bd fe ff ff       	call   c0018c18 <picIoWait()>
c0018d5b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018d62:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018d67:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018d6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d6f:	ee                   	out    dx,al
c0018d70:	e8 a3 fe ff ff       	call   c0018c18 <picIoWait()>
c0018d75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018d79:	0f b6 c0             	movzx  eax,al
c0018d7c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018d83:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018d87:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018d8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d8f:	ee                   	out    dx,al
c0018d90:	e8 83 fe ff ff       	call   c0018c18 <picIoWait()>
c0018d95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018d99:	0f b6 c0             	movzx  eax,al
c0018d9c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018da3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018da7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018dab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018daf:	ee                   	out    dx,al
c0018db0:	e8 63 fe ff ff       	call   c0018c18 <picIoWait()>
c0018db5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018dbc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018dc1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018dc5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018dc9:	ee                   	out    dx,al
c0018dca:	e8 49 fe ff ff       	call   c0018c18 <picIoWait()>
c0018dcf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018dd6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018ddb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018ddf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018de3:	ee                   	out    dx,al
c0018de4:	e8 2f fe ff ff       	call   c0018c18 <picIoWait()>
c0018de9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018df0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018df5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018df9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018dfd:	ee                   	out    dx,al
c0018dfe:	e8 15 fe ff ff       	call   c0018c18 <picIoWait()>
c0018e03:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018e0a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018e0f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018e13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e17:	ee                   	out    dx,al
c0018e18:	e8 fb fd ff ff       	call   c0018c18 <picIoWait()>
c0018e1d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018e22:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018e29:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018e2d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018e31:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018e35:	ee                   	out    dx,al
c0018e36:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018e3b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018e42:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e46:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018e4a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018e4e:	ee                   	out    dx,al
c0018e4f:	90                   	nop
c0018e50:	83 c4 50             	add    esp,0x50
c0018e53:	c3                   	ret    

c0018e54 <picEOI(int)>:
c0018e54:	83 ec 10             	sub    esp,0x10
c0018e57:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e5c:	75 1e                	jne    c0018e7c <picEOI(int)+0x28>
c0018e5e:	6a 0b                	push   0xb
c0018e60:	e8 ef fd ff ff       	call   c0018c54 <picGetIRQReg(int)>
c0018e65:	83 c4 04             	add    esp,0x4
c0018e68:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018e6d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018e72:	25 80 00 00 00       	and    eax,0x80
c0018e77:	74 73                	je     c0018eec <picEOI(int)+0x98>
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018e81:	75 31                	jne    c0018eb4 <picEOI(int)+0x60>
c0018e83:	6a 0b                	push   0xb
c0018e85:	e8 ca fd ff ff       	call   c0018c54 <picGetIRQReg(int)>
c0018e8a:	83 c4 04             	add    esp,0x4
c0018e8d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e96:	98                   	cwde   
c0018e97:	85 c0                	test   eax,eax
c0018e99:	78 19                	js     c0018eb4 <picEOI(int)+0x60>
c0018e9b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018ea2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018ea7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018eab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018eb0:	ee                   	out    dx,al
c0018eb1:	eb 3d                	jmp    c0018ef0 <picEOI(int)+0x9c>
c0018eb3:	90                   	nop
c0018eb4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018eb9:	7e 19                	jle    c0018ed4 <picEOI(int)+0x80>
c0018ebb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018ec2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018ec7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018ecb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018ed0:	ee                   	out    dx,al
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018edb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018ee0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018ee4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018ee9:	ee                   	out    dx,al
c0018eea:	eb 04                	jmp    c0018ef0 <picEOI(int)+0x9c>
c0018eec:	90                   	nop
c0018eed:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	c3                   	ret    

c0018ef4 <RTC::open(int, int, void*)>:
c0018ef4:	31 c0                	xor    eax,eax
c0018ef6:	c3                   	ret    
c0018ef7:	90                   	nop

c0018ef8 <RTC::close(int, int, void*)>:
c0018ef8:	31 c0                	xor    eax,eax
c0018efa:	c3                   	ret    
c0018efb:	90                   	nop

c0018efc <RTC::timeInSecondsUTC()>:
c0018efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018f06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018f0c:	c3                   	ret    
c0018f0d:	90                   	nop

c0018f0e <RTC::timeInDatetimeUTC()>:
c0018f0e:	53                   	push   ebx
c0018f0f:	83 ec 14             	sub    esp,0x14
c0018f12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f1c:	50                   	push   eax
c0018f1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018f20:	83 c4 0c             	add    esp,0xc
c0018f23:	52                   	push   edx
c0018f24:	50                   	push   eax
c0018f25:	53                   	push   ebx
c0018f26:	e8 8b fe fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018f2b:	89 d8                	mov    eax,ebx
c0018f2d:	83 c4 14             	add    esp,0x14
c0018f30:	5b                   	pop    ebx
c0018f31:	c2 04 00             	ret    0x4

c0018f34 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018f34:	56                   	push   esi
c0018f35:	53                   	push   ebx
c0018f36:	83 ec 14             	sub    esp,0x14
c0018f39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018f3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f3f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f46:	52                   	push   edx
c0018f47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f4f:	50                   	push   eax
c0018f50:	e8 61 fe fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018f55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018f61:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018f65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018f69:	89 f0                	mov    eax,esi
c0018f6b:	83 c4 20             	add    esp,0x20
c0018f6e:	5b                   	pop    ebx
c0018f6f:	5e                   	pop    esi
c0018f70:	ff e0                	jmp    eax

c0018f72 <RTC::~RTC()>:
c0018f72:	83 ec 0c             	sub    esp,0xc
c0018f75:	ba f4 33 02 c0       	mov    edx,0xc00233f4
c0018f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f7e:	89 10                	mov    DWORD PTR [eax],edx
c0018f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f84:	83 ec 0c             	sub    esp,0xc
c0018f87:	50                   	push   eax
c0018f88:	e8 bb fb fe ff       	call   c0008b48 <Clock::~Clock()>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	90                   	nop
c0018f91:	83 c4 0c             	add    esp,0xc
c0018f94:	c3                   	ret    
c0018f95:	90                   	nop

c0018f96 <RTC::~RTC()>:
c0018f96:	83 ec 0c             	sub    esp,0xc
c0018f99:	83 ec 0c             	sub    esp,0xc
c0018f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fa0:	e8 cd ff ff ff       	call   c0018f72 <RTC::~RTC()>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	83 ec 08             	sub    esp,0x8
c0018fab:	68 60 01 00 00       	push   0x160
c0018fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fb4:	e8 47 37 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	83 c4 0c             	add    esp,0xc
c0018fbf:	c3                   	ret    

c0018fc0 <RTC::get_update_in_progress_flag()>:
c0018fc0:	83 ec 18             	sub    esp,0x18
c0018fc3:	6a 0a                	push   0xa
c0018fc5:	e8 89 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c0018fca:	83 c4 1c             	add    esp,0x1c
c0018fcd:	0f b6 c0             	movzx  eax,al
c0018fd0:	c1 e8 07             	shr    eax,0x7
c0018fd3:	c3                   	ret    

c0018fd4 <RTC::completeRTCRefresh()>:
c0018fd4:	55                   	push   ebp
c0018fd5:	57                   	push   edi
c0018fd6:	56                   	push   esi
c0018fd7:	53                   	push   ebx
c0018fd8:	83 ec 3c             	sub    esp,0x3c
c0018fdb:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018fe1:	83 ec 0c             	sub    esp,0xc
c0018fe4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018fe8:	e8 d3 ff ff ff       	call   c0018fc0 <RTC::get_update_in_progress_flag()>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	84 c0                	test   al,al
c0018ff2:	74 0e                	je     c0019002 <RTC::completeRTCRefresh()+0x2e>
c0018ff4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018ffa:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0019000:	73 df                	jae    c0018fe1 <RTC::completeRTCRefresh()+0xd>
c0019002:	83 ec 0c             	sub    esp,0xc
c0019005:	6a 00                	push   0x0
c0019007:	e8 47 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001900c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019013:	89 c5                	mov    ebp,eax
c0019015:	e8 39 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001901a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019021:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019025:	e8 29 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001902a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019031:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019035:	e8 19 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001903a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019041:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019045:	e8 09 db ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001904a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019051:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019055:	e8 f9 da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001905a:	0f b6 c0             	movzx  eax,al
c001905d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c001906a:	83 ec 0c             	sub    esp,0xc
c001906d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019071:	e8 4a ff ff ff       	call   c0018fc0 <RTC::get_update_in_progress_flag()>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	84 c0                	test   al,al
c001907b:	74 0e                	je     c001908b <RTC::completeRTCRefresh()+0xb7>
c001907d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019083:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0019089:	73 df                	jae    c001906a <RTC::completeRTCRefresh()+0x96>
c001908b:	83 ec 0c             	sub    esp,0xc
c001908e:	6a 00                	push   0x0
c0019090:	e8 be da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c0019095:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001909c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00190a0:	e8 ae da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00190a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00190ac:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00190b0:	e8 9e da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00190b5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00190bc:	88 c3                	mov    bl,al
c00190be:	e8 90 da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00190c3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190ca:	89 c6                	mov    esi,eax
c00190cc:	e8 82 da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00190d1:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00190d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00190dc:	e8 72 da ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00190e1:	89 e9                	mov    ecx,ebp
c00190e3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00190e7:	0f b6 f8             	movzx  edi,al
c00190ea:	83 c4 10             	add    esp,0x10
c00190ed:	0f b6 eb             	movzx  ebp,bl
c00190f0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00190f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190f9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00190fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019102:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019106:	0f 94 c0             	sete   al
c0019109:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001910d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0019111:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019116:	0f 94 c2             	sete   dl
c0019119:	21 d0                	and    eax,edx
c001911b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001911f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019123:	0f 94 c2             	sete   dl
c0019126:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001912a:	21 c2                	and    edx,eax
c001912c:	89 f0                	mov    eax,esi
c001912e:	0f b6 c0             	movzx  eax,al
c0019131:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019135:	89 f0                	mov    eax,esi
c0019137:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001913b:	0f 94 c0             	sete   al
c001913e:	21 d0                	and    eax,edx
c0019140:	31 d2                	xor    edx,edx
c0019142:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019146:	0f 94 c2             	sete   dl
c0019149:	85 c2                	test   edx,eax
c001914b:	75 27                	jne    c0019174 <RTC::completeRTCRefresh()+0x1a0>
c001914d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019151:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019155:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019159:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001915d:	89 f0                	mov    eax,esi
c001915f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0019163:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019167:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001916b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001916f:	e9 f0 fe ff ff       	jmp    c0019064 <RTC::completeRTCRefresh()+0x90>
c0019174:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c0019178:	75 d3                	jne    c001914d <RTC::completeRTCRefresh()+0x179>
c001917a:	83 ec 0c             	sub    esp,0xc
c001917d:	6a 0b                	push   0xb
c001917f:	e8 cf d9 ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c0019184:	83 c4 10             	add    esp,0x10
c0019187:	a8 04                	test   al,0x4
c0019189:	75 7a                	jne    c0019205 <RTC::completeRTCRefresh()+0x231>
c001918b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001918f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019193:	83 e1 0f             	and    ecx,0xf
c0019196:	c1 ea 04             	shr    edx,0x4
c0019199:	83 e6 0f             	and    esi,0xf
c001919c:	6b d2 0a             	imul   edx,edx,0xa
c001919f:	c1 ef 04             	shr    edi,0x4
c00191a2:	01 d1                	add    ecx,edx
c00191a4:	6b ff 0a             	imul   edi,edi,0xa
c00191a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00191ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00191af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00191b3:	c1 ea 04             	shr    edx,0x4
c00191b6:	83 e1 0f             	and    ecx,0xf
c00191b9:	6b d2 0a             	imul   edx,edx,0xa
c00191bc:	01 d1                	add    ecx,edx
c00191be:	89 ea                	mov    edx,ebp
c00191c0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00191c4:	c1 ea 04             	shr    edx,0x4
c00191c7:	89 d9                	mov    ecx,ebx
c00191c9:	83 e2 07             	and    edx,0x7
c00191cc:	83 e1 0f             	and    ecx,0xf
c00191cf:	6b d2 0a             	imul   edx,edx,0xa
c00191d2:	83 e3 80             	and    ebx,0xffffff80
c00191d5:	01 d1                	add    ecx,edx
c00191d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00191db:	09 cb                	or     ebx,ecx
c00191dd:	c1 ea 04             	shr    edx,0x4
c00191e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00191e4:	6b d2 0a             	imul   edx,edx,0xa
c00191e7:	83 e1 0f             	and    ecx,0xf
c00191ea:	01 d6                	add    esi,edx
c00191ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191f0:	c1 ea 04             	shr    edx,0x4
c00191f3:	6b d2 0a             	imul   edx,edx,0xa
c00191f6:	01 d1                	add    ecx,edx
c00191f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00191fc:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019200:	83 e2 0f             	and    edx,0xf
c0019203:	01 d7                	add    edi,edx
c0019205:	a8 02                	test   al,0x2
c0019207:	75 15                	jne    c001921e <RTC::completeRTCRefresh()+0x24a>
c0019209:	f6 c3 80             	test   bl,0x80
c001920c:	74 10                	je     c001921e <RTC::completeRTCRefresh()+0x24a>
c001920e:	83 e3 7f             	and    ebx,0x7f
c0019211:	b9 18 00 00 00       	mov    ecx,0x18
c0019216:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019219:	99                   	cdq    
c001921a:	f7 f9                	idiv   ecx
c001921c:	88 d3                	mov    bl,dl
c001921e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019224:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001922a:	77 06                	ja     c0019232 <RTC::completeRTCRefresh()+0x25e>
c001922c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019232:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019237:	31 c9                	xor    ecx,ecx
c0019239:	c1 e0 10             	shl    eax,0x10
c001923c:	89 cf                	mov    edi,ecx
c001923e:	c1 e5 10             	shl    ebp,0x10
c0019241:	31 d2                	xor    edx,edx
c0019243:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019249:	09 c7                	or     edi,eax
c001924b:	89 f0                	mov    eax,esi
c001924d:	89 f9                	mov    ecx,edi
c001924f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019253:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019257:	88 c2                	mov    dl,al
c0019259:	88 d9                	mov    cl,bl
c001925b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001925f:	0f b7 c2             	movzx  eax,dx
c0019262:	09 e8                	or     eax,ebp
c0019264:	89 c2                	mov    edx,eax
c0019266:	50                   	push   eax
c0019267:	50                   	push   eax
c0019268:	51                   	push   ecx
c0019269:	52                   	push   edx
c001926a:	e8 c8 f9 fe ff       	call   c0008c37 <KeDatetimeToSeconds(datetime_t)>
c001926f:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019273:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019279:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001927f:	83 c4 4c             	add    esp,0x4c
c0019282:	5b                   	pop    ebx
c0019283:	5e                   	pop    esi
c0019284:	5f                   	pop    edi
c0019285:	5d                   	pop    ebp
c0019286:	c3                   	ret    
c0019287:	90                   	nop

c0019288 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019288:	55                   	push   ebp
c0019289:	57                   	push   edi
c001928a:	56                   	push   esi
c001928b:	53                   	push   ebx
c001928c:	83 ec 34             	sub    esp,0x34
c001928f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019293:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0019297:	6a 00                	push   0x0
c0019299:	89 fb                	mov    ebx,edi
c001929b:	6a 00                	push   0x0
c001929d:	e8 05 d9 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00192a2:	5d                   	pop    ebp
c00192a3:	58                   	pop    eax
c00192a4:	6a 00                	push   0x0
c00192a6:	6a 02                	push   0x2
c00192a8:	e8 fa d8 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00192ad:	31 d2                	xor    edx,edx
c00192af:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00192b6:	89 f9                	mov    ecx,edi
c00192b8:	89 f8                	mov    eax,edi
c00192ba:	c1 e9 10             	shr    ecx,0x10
c00192bd:	0f b6 c4             	movzx  eax,ah
c00192c0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00192c4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00192c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192cc:	b9 64 00 00 00       	mov    ecx,0x64
c00192d1:	89 f0                	mov    eax,esi
c00192d3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00192d7:	89 f0                	mov    eax,esi
c00192d9:	0f b6 c4             	movzx  eax,ah
c00192dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192e0:	89 f0                	mov    eax,esi
c00192e2:	c1 e8 10             	shr    eax,0x10
c00192e5:	f7 f1                	div    ecx
c00192e7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00192eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00192ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00192f3:	e8 5b d8 ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	89 c5                	mov    ebp,eax
c00192fd:	a8 04                	test   al,0x4
c00192ff:	75 6e                	jne    c001936f <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019301:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019305:	31 d2                	xor    edx,edx
c0019307:	0f b6 c1             	movzx  eax,cl
c001930a:	b9 0a 00 00 00       	mov    ecx,0xa
c001930f:	f7 f1                	div    ecx
c0019311:	c1 e0 04             	shl    eax,0x4
c0019314:	09 d0                	or     eax,edx
c0019316:	31 d2                	xor    edx,edx
c0019318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001931c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019321:	f7 f1                	div    ecx
c0019323:	c1 e0 04             	shl    eax,0x4
c0019326:	09 d0                	or     eax,edx
c0019328:	31 d2                	xor    edx,edx
c001932a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001932e:	0f b6 c3             	movzx  eax,bl
c0019331:	f7 f1                	div    ecx
c0019333:	c1 e0 04             	shl    eax,0x4
c0019336:	09 d0                	or     eax,edx
c0019338:	31 d2                	xor    edx,edx
c001933a:	89 c3                	mov    ebx,eax
c001933c:	89 f0                	mov    eax,esi
c001933e:	0f b6 c0             	movzx  eax,al
c0019341:	f7 f1                	div    ecx
c0019343:	c1 e0 04             	shl    eax,0x4
c0019346:	09 d0                	or     eax,edx
c0019348:	31 d2                	xor    edx,edx
c001934a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001934e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019353:	f7 f1                	div    ecx
c0019355:	c1 e0 04             	shl    eax,0x4
c0019358:	09 d0                	or     eax,edx
c001935a:	31 d2                	xor    edx,edx
c001935c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019360:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019364:	f7 f1                	div    ecx
c0019366:	c1 e0 04             	shl    eax,0x4
c0019369:	09 d0                	or     eax,edx
c001936b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001936f:	83 e5 02             	and    ebp,0x2
c0019372:	75 1e                	jne    c0019392 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019374:	0f b6 c3             	movzx  eax,bl
c0019377:	83 f8 0b             	cmp    eax,0xb
c001937a:	76 10                	jbe    c001938c <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001937c:	8d 53 f4             	lea    edx,[ebx-0xc]
c001937f:	88 d3                	mov    bl,dl
c0019381:	84 d2                	test   dl,dl
c0019383:	75 02                	jne    c0019387 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c0019385:	b3 0c                	mov    bl,0xc
c0019387:	83 cb 80             	or     ebx,0xffffff80
c001938a:	eb 06                	jmp    c0019392 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001938c:	85 c0                	test   eax,eax
c001938e:	75 02                	jne    c0019392 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019390:	b3 0c                	mov    bl,0xc
c0019392:	0f b6 db             	movzx  ebx,bl
c0019395:	50                   	push   eax
c0019396:	50                   	push   eax
c0019397:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001939c:	52                   	push   edx
c001939d:	6a 00                	push   0x0
c001939f:	e8 03 d8 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193a4:	5a                   	pop    edx
c00193a5:	59                   	pop    ecx
c00193a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193ab:	50                   	push   eax
c00193ac:	6a 02                	push   0x2
c00193ae:	e8 f4 d7 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193b3:	5e                   	pop    esi
c00193b4:	5f                   	pop    edi
c00193b5:	53                   	push   ebx
c00193b6:	6a 04                	push   0x4
c00193b8:	e8 ea d7 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193bd:	5d                   	pop    ebp
c00193be:	58                   	pop    eax
c00193bf:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00193c4:	52                   	push   edx
c00193c5:	6a 07                	push   0x7
c00193c7:	e8 db d7 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193cc:	58                   	pop    eax
c00193cd:	5a                   	pop    edx
c00193ce:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00193d3:	50                   	push   eax
c00193d4:	6a 08                	push   0x8
c00193d6:	e8 cc d7 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193db:	59                   	pop    ecx
c00193dc:	5b                   	pop    ebx
c00193dd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00193e2:	55                   	push   ebp
c00193e3:	6a 09                	push   0x9
c00193e5:	e8 bd d7 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00193ea:	5e                   	pop    esi
c00193eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00193ef:	e8 e0 fb ff ff       	call   c0018fd4 <RTC::completeRTCRefresh()>
c00193f4:	83 c4 3c             	add    esp,0x3c
c00193f7:	b0 01                	mov    al,0x1
c00193f9:	5b                   	pop    ebx
c00193fa:	5e                   	pop    esi
c00193fb:	5f                   	pop    edi
c00193fc:	5d                   	pop    ebp
c00193fd:	c3                   	ret    

c00193fe <rtcIRQHandler(regs*, void*)>:
c00193fe:	53                   	push   ebx
c00193ff:	83 ec 14             	sub    esp,0x14
c0019402:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019406:	6a 0c                	push   0xc
c0019408:	e8 46 d7 ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	a8 80                	test   al,0x80
c0019412:	74 24                	je     c0019438 <rtcIRQHandler(regs*, void*)+0x3a>
c0019414:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001941b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019422:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019429:	75 0d                	jne    c0019438 <rtcIRQHandler(regs*, void*)+0x3a>
c001942b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001942f:	83 c4 08             	add    esp,0x8
c0019432:	5b                   	pop    ebx
c0019433:	e9 9c fb ff ff       	jmp    c0018fd4 <RTC::completeRTCRefresh()>
c0019438:	83 c4 08             	add    esp,0x8
c001943b:	5b                   	pop    ebx
c001943c:	c3                   	ret    
c001943d:	90                   	nop

c001943e <RTC::RTC()>:
c001943e:	83 ec 1c             	sub    esp,0x1c
c0019441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019445:	83 ec 08             	sub    esp,0x8
c0019448:	68 d7 33 02 c0       	push   0xc00233d7
c001944d:	50                   	push   eax
c001944e:	e8 bf f6 fe ff       	call   c0008b12 <Clock::Clock(char const*)>
c0019453:	83 c4 10             	add    esp,0x10
c0019456:	ba f4 33 02 c0       	mov    edx,0xc00233f4
c001945b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001945f:	89 10                	mov    DWORD PTR [eax],edx
c0019461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019465:	83 ec 0c             	sub    esp,0xc
c0019468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001946c:	6a 01                	push   0x1
c001946e:	68 fe 93 01 c0       	push   0xc00193fe
c0019473:	6a 08                	push   0x8
c0019475:	50                   	push   eax
c0019476:	e8 73 fb fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001947b:	83 c4 20             	add    esp,0x20
c001947e:	89 c2                	mov    edx,eax
c0019480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019484:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001948a:	fa                   	cli    
c001948b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019490:	83 c0 01             	add    eax,0x1
c0019493:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	6a 0b                	push   0xb
c001949d:	e8 b1 d6 ff ff       	call   c0016b53 <x86ReadCMOS(unsigned char)>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00194a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00194ad:	83 c8 10             	or     eax,0x10
c00194b0:	0f b6 c0             	movzx  eax,al
c00194b3:	83 ec 08             	sub    esp,0x8
c00194b6:	50                   	push   eax
c00194b7:	6a 0b                	push   0xb
c00194b9:	e8 e9 d6 ff ff       	call   c0016ba7 <x86WriteCMOS(unsigned char, unsigned char)>
c00194be:	83 c4 10             	add    esp,0x10
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194c8:	e8 07 fb ff ff       	call   c0018fd4 <RTC::completeRTCRefresh()>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00194d8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00194dd:	85 c0                	test   eax,eax
c00194df:	75 01                	jne    c00194e2 <RTC::RTC()+0xa4>
c00194e1:	fb                   	sti    
c00194e2:	90                   	nop
c00194e3:	83 c4 1c             	add    esp,0x1c
c00194e6:	c3                   	ret    
c00194e7:	90                   	nop

c00194e8 <HalConsoleScroll(int, int)>:
c00194e8:	83 ec 10             	sub    esp,0x10
c00194eb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00194f3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00194fb:	90                   	nop
c00194fc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019501:	0f 8f e1 00 00 00    	jg     c00195e8 <HalConsoleScroll(int, int)+0x100>
c0019507:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001950f:	90                   	nop
c0019510:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019518:	0f 8f be 00 00 00    	jg     c00195dc <HalConsoleScroll(int, int)+0xf4>
c001951e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019522:	89 d0                	mov    eax,edx
c0019524:	c1 e0 02             	shl    eax,0x2
c0019527:	01 d0                	add    eax,edx
c0019529:	c1 e0 05             	shl    eax,0x5
c001952c:	89 c2                	mov    edx,eax
c001952e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019532:	01 d0                	add    eax,edx
c0019534:	89 c2                	mov    edx,eax
c0019536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001953a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001953d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019541:	89 d0                	mov    eax,edx
c0019543:	c1 e0 02             	shl    eax,0x2
c0019546:	01 d0                	add    eax,edx
c0019548:	c1 e0 05             	shl    eax,0x5
c001954b:	89 c2                	mov    edx,eax
c001954d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019551:	01 d0                	add    eax,edx
c0019553:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001955d:	01 c2                	add    edx,eax
c001955f:	8a 01                	mov    al,BYTE PTR [ecx]
c0019561:	88 02                	mov    BYTE PTR [edx],al
c0019563:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019568:	75 66                	jne    c00195d0 <HalConsoleScroll(int, int)+0xe8>
c001956a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001956e:	83 e0 01             	and    eax,0x1
c0019571:	74 39                	je     c00195ac <HalConsoleScroll(int, int)+0xc4>
c0019573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019577:	83 e0 0f             	and    eax,0xf
c001957a:	88 c2                	mov    dl,al
c001957c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019580:	c1 e0 04             	shl    eax,0x4
c0019583:	09 d0                	or     eax,edx
c0019585:	88 c1                	mov    cl,al
c0019587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001958b:	89 d0                	mov    eax,edx
c001958d:	c1 e0 02             	shl    eax,0x2
c0019590:	01 d0                	add    eax,edx
c0019592:	c1 e0 05             	shl    eax,0x5
c0019595:	89 c2                	mov    edx,eax
c0019597:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001959b:	01 d0                	add    eax,edx
c001959d:	89 c2                	mov    edx,eax
c001959f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195a3:	01 d0                	add    eax,edx
c00195a5:	88 ca                	mov    dl,cl
c00195a7:	88 10                	mov    BYTE PTR [eax],dl
c00195a9:	eb 25                	jmp    c00195d0 <HalConsoleScroll(int, int)+0xe8>
c00195ab:	90                   	nop
c00195ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195b0:	89 d0                	mov    eax,edx
c00195b2:	c1 e0 02             	shl    eax,0x2
c00195b5:	01 d0                	add    eax,edx
c00195b7:	c1 e0 05             	shl    eax,0x5
c00195ba:	89 c2                	mov    edx,eax
c00195bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195c0:	01 d0                	add    eax,edx
c00195c2:	89 c2                	mov    edx,eax
c00195c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c8:	01 d0                	add    eax,edx
c00195ca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00195cd:	8d 76 00             	lea    esi,[esi+0x0]
c00195d0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00195d5:	e9 36 ff ff ff       	jmp    c0019510 <HalConsoleScroll(int, int)+0x28>
c00195da:	66 90                	xchg   ax,ax
c00195dc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00195e1:	e9 16 ff ff ff       	jmp    c00194fc <HalConsoleScroll(int, int)+0x14>
c00195e6:	66 90                	xchg   ax,ax
c00195e8:	90                   	nop
c00195e9:	83 c4 10             	add    esp,0x10
c00195ec:	c3                   	ret    
c00195ed:	8d 76 00             	lea    esi,[esi+0x0]

c00195f0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00195f0:	83 ec 14             	sub    esp,0x14
c00195f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195f7:	88 04 24             	mov    BYTE PTR [esp],al
c00195fa:	8a 04 24             	mov    al,BYTE PTR [esp]
c00195fd:	0f b6 c0             	movzx  eax,al
c0019600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019604:	89 d1                	mov    ecx,edx
c0019606:	83 e1 0f             	and    ecx,0xf
c0019609:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001960d:	c1 e2 04             	shl    edx,0x4
c0019610:	0f b6 d2             	movzx  edx,dl
c0019613:	09 ca                	or     edx,ecx
c0019615:	c1 e2 08             	shl    edx,0x8
c0019618:	09 d0                	or     eax,edx
c001961a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001961f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019627:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001962b:	89 d0                	mov    eax,edx
c001962d:	c1 e0 02             	shl    eax,0x2
c0019630:	01 d0                	add    eax,edx
c0019632:	c1 e0 04             	shl    eax,0x4
c0019635:	89 c2                	mov    edx,eax
c0019637:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001963b:	01 d0                	add    eax,edx
c001963d:	01 c0                	add    eax,eax
c001963f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019647:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001964c:	66 89 02             	mov    WORD PTR [edx],ax
c001964f:	90                   	nop
c0019650:	83 c4 14             	add    esp,0x14
c0019653:	c3                   	ret    

c0019654 <HalConsoleCursorUpdate(int, int)>:
c0019654:	83 ec 20             	sub    esp,0x20
c0019657:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001965b:	89 c2                	mov    edx,eax
c001965d:	c1 e2 02             	shl    edx,0x2
c0019660:	01 d0                	add    eax,edx
c0019662:	c1 e0 04             	shl    eax,0x4
c0019665:	89 c2                	mov    edx,eax
c0019667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001966b:	01 d0                	add    eax,edx
c001966d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019672:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019679:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001967e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019682:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019686:	ee                   	out    dx,al
c0019687:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001968c:	0f b6 c0             	movzx  eax,al
c001968f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019696:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001969a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001969e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196a2:	ee                   	out    dx,al
c00196a3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00196aa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00196af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00196b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00196b7:	ee                   	out    dx,al
c00196b8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00196bd:	c1 e8 08             	shr    eax,0x8
c00196c0:	0f b6 c0             	movzx  eax,al
c00196c3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00196ca:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00196ce:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00196d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196d6:	ee                   	out    dx,al
c00196d7:	90                   	nop
c00196d8:	83 c4 20             	add    esp,0x20
c00196db:	c3                   	ret    

c00196dc <FAT::getName()>:
c00196dc:	b8 28 34 02 c0       	mov    eax,0xc0023428
c00196e1:	c3                   	ret    
c00196e2:	66 90                	xchg   ax,ax

c00196e4 <FAT::tell(void*, unsigned long long*)>:
c00196e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196e9:	75 09                	jne    c00196f4 <FAT::tell(void*, unsigned long long*)+0x10>
c00196eb:	b8 04 00 00 00       	mov    eax,0x4
c00196f0:	c3                   	ret    
c00196f1:	8d 76 00             	lea    esi,[esi+0x0]
c00196f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00196f9:	75 09                	jne    c0019704 <FAT::tell(void*, unsigned long long*)+0x20>
c00196fb:	b8 04 00 00 00       	mov    eax,0x4
c0019700:	c3                   	ret    
c0019701:	8d 76 00             	lea    esi,[esi+0x0]
c0019704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019708:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001970b:	ba 00 00 00 00       	mov    edx,0x0
c0019710:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019714:	89 01                	mov    DWORD PTR [ecx],eax
c0019716:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019719:	b8 00 00 00 00       	mov    eax,0x0
c001971e:	c3                   	ret    
c001971f:	90                   	nop

c0019720 <FAT::stat(void*, unsigned long long*)>:
c0019720:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019725:	75 09                	jne    c0019730 <FAT::stat(void*, unsigned long long*)+0x10>
c0019727:	b8 04 00 00 00       	mov    eax,0x4
c001972c:	c3                   	ret    
c001972d:	8d 76 00             	lea    esi,[esi+0x0]
c0019730:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019735:	75 09                	jne    c0019740 <FAT::stat(void*, unsigned long long*)+0x20>
c0019737:	b8 04 00 00 00       	mov    eax,0x4
c001973c:	c3                   	ret    
c001973d:	8d 76 00             	lea    esi,[esi+0x0]
c0019740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019744:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019747:	ba 00 00 00 00       	mov    edx,0x0
c001974c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019750:	89 01                	mov    DWORD PTR [ecx],eax
c0019752:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019755:	b8 00 00 00 00       	mov    eax,0x0
c001975a:	c3                   	ret    
c001975b:	90                   	nop

c001975c <FAT::~FAT()>:
c001975c:	83 ec 0c             	sub    esp,0xc
c001975f:	ba 74 34 02 c0       	mov    edx,0xc0023474
c0019764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019768:	89 10                	mov    DWORD PTR [eax],edx
c001976a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001976e:	83 ec 0c             	sub    esp,0xc
c0019771:	50                   	push   eax
c0019772:	e8 1d e6 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0019777:	83 c4 10             	add    esp,0x10
c001977a:	90                   	nop
c001977b:	83 c4 0c             	add    esp,0xc
c001977e:	c3                   	ret    
c001977f:	90                   	nop

c0019780 <FAT::~FAT()>:
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	83 ec 0c             	sub    esp,0xc
c0019786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001978a:	e8 cd ff ff ff       	call   c001975c <FAT::~FAT()>
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	83 ec 08             	sub    esp,0x8
c0019795:	6a 08                	push   0x8
c0019797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001979b:	e8 60 2f ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	83 c4 0c             	add    esp,0xc
c00197a6:	c3                   	ret    
c00197a7:	90                   	nop

c00197a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00197a8:	83 ec 1c             	sub    esp,0x1c
c00197ab:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00197b2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00197b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197bb:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197c2:	83 f8 ff             	cmp    eax,0xffffffff
c00197c5:	75 35                	jne    c00197fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00197c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00197cb:	88 c2                	mov    dl,al
c00197cd:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197d2:	01 d0                	add    eax,edx
c00197d4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197d8:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197e2:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197e9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00197f2:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00197f9:	eb 19                	jmp    c0019814 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00197fb:	90                   	nop
c00197fc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019800:	88 c2                	mov    dl,al
c0019802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019806:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001980d:	01 d0                	add    eax,edx
c001980f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019813:	90                   	nop
c0019814:	83 ec 04             	sub    esp,0x4
c0019817:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001981b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001981f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019823:	50                   	push   eax
c0019824:	e8 8f b9 fe ff       	call   c00051b8 <f_getlabel>
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019835:	75 09                	jne    c0019840 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019837:	b8 00 00 00 00       	mov    eax,0x0
c001983c:	eb 0a                	jmp    c0019848 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001983e:	66 90                	xchg   ax,ax
c0019840:	b8 01 00 00 00       	mov    eax,0x1
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	83 c4 1c             	add    esp,0x1c
c001984b:	c3                   	ret    

c001984c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001984c:	57                   	push   edi
c001984d:	83 ec 58             	sub    esp,0x58
c0019850:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019858:	8d 54 24 10          	lea    edx,[esp+0x10]
c001985c:	b8 00 00 00 00       	mov    eax,0x0
c0019861:	b9 0f 00 00 00       	mov    ecx,0xf
c0019866:	fc                   	cld    
c0019867:	89 d7                	mov    edi,edx
c0019869:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001986b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001986f:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019876:	83 f8 ff             	cmp    eax,0xffffffff
c0019879:	75 35                	jne    c00198b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001987b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001987f:	88 c2                	mov    dl,al
c0019881:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019886:	01 d0                	add    eax,edx
c0019888:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001988c:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019892:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019896:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c001989d:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00198a2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00198a6:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00198ad:	eb 19                	jmp    c00198c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00198af:	90                   	nop
c00198b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00198b4:	88 c2                	mov    dl,al
c00198b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198ba:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00198c1:	01 d0                	add    eax,edx
c00198c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198c7:	90                   	nop
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00198cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198d3:	50                   	push   eax
c00198d4:	e8 67 6f fe ff       	call   c0000840 <strcat>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	83 ec 0c             	sub    esp,0xc
c00198df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198e3:	50                   	push   eax
c00198e4:	e8 20 ba fe ff       	call   c0005309 <f_setlabel>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00198f0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00198f5:	75 09                	jne    c0019900 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00198f7:	b8 00 00 00 00       	mov    eax,0x0
c00198fc:	eb 0a                	jmp    c0019908 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00198fe:	66 90                	xchg   ax,ax
c0019900:	b8 01 00 00 00       	mov    eax,0x1
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	83 c4 58             	add    esp,0x58
c001990b:	5f                   	pop    edi
c001990c:	c3                   	ret    
c001990d:	90                   	nop
c001990e:	66 90                	xchg   ax,ax

c0019910 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019910:	83 ec 2c             	sub    esp,0x2c
c0019913:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001991b:	83 ec 08             	sub    esp,0x8
c001991e:	68 4c 34 02 c0       	push   0xc002344c
c0019923:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019927:	e8 24 6e fe ff       	call   c0000750 <strcmp>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	85 c0                	test   eax,eax
c0019931:	0f 94 c0             	sete   al
c0019934:	0f b6 c0             	movzx  eax,al
c0019937:	85 c0                	test   eax,eax
c0019939:	74 0d                	je     c0019948 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001993b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019943:	e9 c0 00 00 00       	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019948:	83 ec 08             	sub    esp,0x8
c001994b:	68 3e 34 02 c0       	push   0xc002343e
c0019950:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019954:	e8 f7 6d fe ff       	call   c0000750 <strcmp>
c0019959:	83 c4 10             	add    esp,0x10
c001995c:	85 c0                	test   eax,eax
c001995e:	0f 94 c0             	sete   al
c0019961:	0f b6 c0             	movzx  eax,al
c0019964:	85 c0                	test   eax,eax
c0019966:	74 10                	je     c0019978 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019968:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019970:	e9 93 00 00 00       	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	83 ec 08             	sub    esp,0x8
c001997b:	68 44 34 02 c0       	push   0xc0023444
c0019980:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019984:	e8 c7 6d fe ff       	call   c0000750 <strcmp>
c0019989:	83 c4 10             	add    esp,0x10
c001998c:	85 c0                	test   eax,eax
c001998e:	0f 94 c0             	sete   al
c0019991:	0f b6 c0             	movzx  eax,al
c0019994:	85 c0                	test   eax,eax
c0019996:	74 0c                	je     c00199a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019998:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00199a0:	eb 66                	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199a2:	66 90                	xchg   ax,ax
c00199a4:	83 ec 08             	sub    esp,0x8
c00199a7:	68 5c 0b 02 c0       	push   0xc0020b5c
c00199ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199b0:	e8 9b 6d fe ff       	call   c0000750 <strcmp>
c00199b5:	83 c4 10             	add    esp,0x10
c00199b8:	85 c0                	test   eax,eax
c00199ba:	0f 94 c0             	sete   al
c00199bd:	0f b6 c0             	movzx  eax,al
c00199c0:	85 c0                	test   eax,eax
c00199c2:	74 0c                	je     c00199d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00199c4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00199cc:	eb 3a                	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199ce:	66 90                	xchg   ax,ax
c00199d0:	83 ec 08             	sub    esp,0x8
c00199d3:	68 4a 34 02 c0       	push   0xc002344a
c00199d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199dc:	e8 6f 6d fe ff       	call   c0000750 <strcmp>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	85 c0                	test   eax,eax
c00199e6:	0f 94 c0             	sete   al
c00199e9:	0f b6 c0             	movzx  eax,al
c00199ec:	85 c0                	test   eax,eax
c00199ee:	74 0c                	je     c00199fc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00199f0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00199f8:	eb 0e                	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199fa:	66 90                	xchg   ax,ax
c00199fc:	b8 08 00 00 00       	mov    eax,0x8
c0019a01:	e9 ea 00 00 00       	jmp    c0019af0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a06:	66 90                	xchg   ax,ax
c0019a08:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019a0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019a14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a18:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a1f:	83 f8 ff             	cmp    eax,0xffffffff
c0019a22:	75 34                	jne    c0019a58 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019a24:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a28:	88 c2                	mov    dl,al
c0019a2a:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a2f:	01 d0                	add    eax,edx
c0019a31:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a35:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019a3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a3f:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019a46:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a4b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019a4f:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019a56:	eb 18                	jmp    c0019a70 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019a58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a5c:	88 c2                	mov    dl,al
c0019a5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a62:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a69:	01 d0                	add    eax,edx
c0019a6b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a6f:	90                   	nop
c0019a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a74:	88 04 24             	mov    BYTE PTR [esp],al
c0019a77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a7f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a87:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019a8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a94:	83 ec 0c             	sub    esp,0xc
c0019a97:	68 00 20 00 00       	push   0x2000
c0019a9c:	e8 da 4e ff ff       	call   c000e97b <malloc>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019aa8:	68 00 20 00 00       	push   0x2000
c0019aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ab1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ab5:	50                   	push   eax
c0019ab6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019aba:	50                   	push   eax
c0019abb:	e8 46 bb fe ff       	call   c0005606 <f_mkfs>
c0019ac0:	83 c4 10             	add    esp,0x10
c0019ac3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ac7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019acc:	75 0a                	jne    c0019ad8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019ace:	b8 00 00 00 00       	mov    eax,0x0
c0019ad3:	eb 1b                	jmp    c0019af0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019add:	75 09                	jne    c0019ae8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019adf:	b8 09 00 00 00       	mov    eax,0x9
c0019ae4:	eb 0a                	jmp    c0019af0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ae6:	66 90                	xchg   ax,ax
c0019ae8:	b8 01 00 00 00       	mov    eax,0x1
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	83 c4 2c             	add    esp,0x2c
c0019af3:	c3                   	ret    

c0019af4 <FAT::tryMount(LogicalDisk*, int)>:
c0019af4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019afa:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019aff:	83 f8 14             	cmp    eax,0x14
c0019b02:	75 18                	jne    c0019b1c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	68 50 34 02 c0       	push   0xc0023450
c0019b0c:	e8 b1 51 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	b0 00                	mov    al,0x0
c0019b16:	e9 ed 01 00 00       	jmp    c0019d08 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b1b:	90                   	nop
c0019b1c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019b23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b2f:	3d 00 02 00 00       	cmp    eax,0x200
c0019b34:	74 0a                	je     c0019b40 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019b36:	b0 00                	mov    al,0x0
c0019b38:	e9 cb 01 00 00       	jmp    c0019d08 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b40:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019b48:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b4f:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019b56:	83 f8 ff             	cmp    eax,0xffffffff
c0019b59:	74 09                	je     c0019b64 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019b5b:	b0 01                	mov    al,0x1
c0019b5d:	e9 a6 01 00 00       	jmp    c0019d08 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b62:	66 90                	xchg   ax,ax
c0019b64:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019b6e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019b76:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019b7d:	88 c2                	mov    dl,al
c0019b7f:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b84:	01 d0                	add    eax,edx
c0019b86:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019b8d:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019b93:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b9a:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019ba1:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019ba6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019bad:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019bb4:	83 ec 0c             	sub    esp,0xc
c0019bb7:	68 34 02 00 00       	push   0x234
c0019bbc:	e8 ba 4d ff ff       	call   c000e97b <malloc>
c0019bc1:	83 c4 10             	add    esp,0x10
c0019bc4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019bcb:	83 ec 04             	sub    esp,0x4
c0019bce:	6a 00                	push   0x0
c0019bd0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019bd7:	50                   	push   eax
c0019bd8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019bdf:	e8 fd a1 fe ff       	call   c0003de1 <f_mount>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019bee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019bf6:	74 1c                	je     c0019c14 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c02:	e8 94 4d ff ff       	call   c000e99b <rfree>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	b0 00                	mov    al,0x0
c0019c0c:	e9 f7 00 00 00       	jmp    c0019d08 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c11:	8d 76 00             	lea    esi,[esi+0x0]
c0019c14:	83 ec 04             	sub    esp,0x4
c0019c17:	68 00 01 00 00       	push   0x100
c0019c1c:	6a 00                	push   0x0
c0019c1e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c25:	50                   	push   eax
c0019c26:	e8 c5 68 fe ff       	call   c00004f0 <memset>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	83 ec 08             	sub    esp,0x8
c0019c31:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c38:	50                   	push   eax
c0019c39:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c40:	50                   	push   eax
c0019c41:	e8 fa 6b fe ff       	call   c0000840 <strcat>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	83 ec 08             	sub    esp,0x8
c0019c4c:	68 5e 34 02 c0       	push   0xc002345e
c0019c51:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c58:	50                   	push   eax
c0019c59:	e8 e2 6b fe ff       	call   c0000840 <strcat>
c0019c5e:	83 c4 10             	add    esp,0x10
c0019c61:	83 ec 04             	sub    esp,0x4
c0019c64:	6a 01                	push   0x1
c0019c66:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019c6d:	50                   	push   eax
c0019c6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c72:	50                   	push   eax
c0019c73:	e8 cb a1 fe ff       	call   c0003e43 <f_open>
c0019c78:	83 c4 10             	add    esp,0x10
c0019c7b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019c82:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019c89:	85 c0                	test   eax,eax
c0019c8b:	74 0b                	je     c0019c98 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019c8d:	78 31                	js     c0019cc0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c8f:	83 e8 04             	sub    eax,0x4
c0019c92:	83 f8 01             	cmp    eax,0x1
c0019c95:	77 29                	ja     c0019cc0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c97:	90                   	nop
c0019c98:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ca7:	50                   	push   eax
c0019ca8:	e8 65 a9 fe ff       	call   c0004612 <f_close>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	90                   	nop
c0019cb1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019cb9:	85 c0                	test   eax,eax
c0019cbb:	74 43                	je     c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019cbd:	eb 31                	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019cbf:	90                   	nop
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019cca:	e8 cc 4c ff ff       	call   c000e99b <rfree>
c0019ccf:	83 c4 10             	add    esp,0x10
c0019cd2:	83 ec 04             	sub    esp,0x4
c0019cd5:	6a 00                	push   0x0
c0019cd7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019cde:	50                   	push   eax
c0019cdf:	6a 00                	push   0x0
c0019ce1:	e8 fb a0 fe ff       	call   c0003de1 <f_mount>
c0019ce6:	83 c4 10             	add    esp,0x10
c0019ce9:	b0 00                	mov    al,0x0
c0019ceb:	eb 1b                	jmp    c0019d08 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ced:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf0:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019cf5:	83 c0 01             	add    eax,0x1
c0019cf8:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019d07:	90                   	nop
c0019d08:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019d0e:	c3                   	ret    
c0019d0f:	90                   	nop

c0019d10 <FAT::allocateSwapfile(char const*, int)>:
c0019d10:	55                   	push   ebp
c0019d11:	57                   	push   edi
c0019d12:	56                   	push   esi
c0019d13:	53                   	push   ebx
c0019d14:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019d1a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019d25:	83 ec 0c             	sub    esp,0xc
c0019d28:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019d2f:	e8 47 4c ff ff       	call   c000e97b <malloc>
c0019d34:	83 c4 10             	add    esp,0x10
c0019d37:	89 c7                	mov    edi,eax
c0019d39:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019d3e:	83 ec 04             	sub    esp,0x4
c0019d41:	50                   	push   eax
c0019d42:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019d49:	57                   	push   edi
c0019d4a:	e8 c3 e3 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c0019d4f:	83 c4 10             	add    esp,0x10
c0019d52:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019d59:	83 ec 04             	sub    esp,0x4
c0019d5c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019d60:	50                   	push   eax
c0019d61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d65:	50                   	push   eax
c0019d66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d6d:	e8 c0 e6 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0019d72:	83 c4 10             	add    esp,0x10
c0019d75:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d7c:	c1 e0 14             	shl    eax,0x14
c0019d7f:	89 c7                	mov    edi,eax
c0019d81:	89 c5                	mov    ebp,eax
c0019d83:	c1 fd 1f             	sar    ebp,0x1f
c0019d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d8e:	89 f9                	mov    ecx,edi
c0019d90:	31 c1                	xor    ecx,eax
c0019d92:	89 cb                	mov    ebx,ecx
c0019d94:	89 e9                	mov    ecx,ebp
c0019d96:	31 d1                	xor    ecx,edx
c0019d98:	89 ce                	mov    esi,ecx
c0019d9a:	89 f0                	mov    eax,esi
c0019d9c:	09 d8                	or     eax,ebx
c0019d9e:	0f 84 9c 00 00 00    	je     c0019e40 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019da4:	83 ec 0c             	sub    esp,0xc
c0019da7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dae:	e8 4b e5 fe ff       	call   c00082fe <File::unlink()>
c0019db3:	83 c4 10             	add    esp,0x10
c0019db6:	83 ec 08             	sub    esp,0x8
c0019db9:	6a 12                	push   0x12
c0019dbb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dc2:	e8 69 e3 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019dc7:	83 c4 10             	add    esp,0x10
c0019dca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dd1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019dd7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019dde:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019de5:	c1 e0 14             	shl    eax,0x14
c0019de8:	83 ec 04             	sub    esp,0x4
c0019deb:	6a 01                	push   0x1
c0019ded:	50                   	push   eax
c0019dee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019df5:	e8 9f b6 fe ff       	call   c0005499 <f_expand>
c0019dfa:	83 c4 10             	add    esp,0x10
c0019dfd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e06:	83 c0 10             	add    eax,0x10
c0019e09:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e12:	52                   	push   edx
c0019e13:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019e17:	52                   	push   edx
c0019e18:	6a 00                	push   0x0
c0019e1a:	68 00 04 00 00       	push   0x400
c0019e1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e26:	ff d0                	call   eax
c0019e28:	83 c4 20             	add    esp,0x20
c0019e2b:	83 ec 0c             	sub    esp,0xc
c0019e2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e35:	e8 54 e3 fe ff       	call   c000818e <File::close()>
c0019e3a:	83 c4 10             	add    esp,0x10
c0019e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e40:	83 ec 08             	sub    esp,0x8
c0019e43:	6a 01                	push   0x1
c0019e45:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e4c:	e8 df e2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e5d:	83 c0 0c             	add    eax,0xc
c0019e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e62:	83 ec 0c             	sub    esp,0xc
c0019e65:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e69:	52                   	push   edx
c0019e6a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019e6e:	52                   	push   edx
c0019e6f:	6a 00                	push   0x0
c0019e71:	6a 04                	push   0x4
c0019e73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e7a:	ff d0                	call   eax
c0019e7c:	83 c4 20             	add    esp,0x20
c0019e7f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e86:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e8c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019e93:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019e9a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019e9d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019eae:	e8 db e2 fe ff       	call   c000818e <File::close()>
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019ebd:	ba 00 00 00 00       	mov    edx,0x0
c0019ec2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019ec8:	5b                   	pop    ebx
c0019ec9:	5e                   	pop    esi
c0019eca:	5f                   	pop    edi
c0019ecb:	5d                   	pop    ebp
c0019ecc:	c3                   	ret    
c0019ecd:	90                   	nop
c0019ece:	66 90                	xchg   ax,ax

c0019ed0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019ed0:	57                   	push   edi
c0019ed1:	56                   	push   esi
c0019ed2:	53                   	push   ebx
c0019ed3:	81 ec 50 02 00 00    	sub    esp,0x250
c0019ed9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019ee1:	74 0d                	je     c0019ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019ee3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019eeb:	75 0f                	jne    c0019efc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019eed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef0:	b8 04 00 00 00       	mov    eax,0x4
c0019ef5:	e9 3a 01 00 00       	jmp    c001a034 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019efa:	66 90                	xchg   ax,ax
c0019efc:	83 ec 08             	sub    esp,0x8
c0019eff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f06:	50                   	push   eax
c0019f07:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019f0e:	e8 cc a9 fe ff       	call   c00048df <f_readdir>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019f1d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f2e:	83 c0 16             	add    eax,0x16
c0019f31:	50                   	push   eax
c0019f32:	e8 39 66 fe ff       	call   c0000570 <strlen>
c0019f37:	83 c4 10             	add    esp,0x10
c0019f3a:	ba 00 00 00 00       	mov    edx,0x0
c0019f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f43:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f47:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019f4e:	0f b6 c0             	movzx  eax,al
c0019f51:	83 e0 10             	and    eax,0x10
c0019f54:	74 0a                	je     c0019f60 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019f56:	b8 02 00 00 00       	mov    eax,0x2
c0019f5b:	eb 0b                	jmp    c0019f68 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f60:	b8 01 00 00 00       	mov    eax,0x1
c0019f65:	8d 76 00             	lea    esi,[esi+0x0]
c0019f68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f6c:	83 ec 08             	sub    esp,0x8
c0019f6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f76:	83 c0 16             	add    eax,0x16
c0019f79:	50                   	push   eax
c0019f7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f7e:	83 c0 10             	add    eax,0x10
c0019f81:	50                   	push   eax
c0019f82:	e8 b9 66 fe ff       	call   c0000640 <strcpy>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019f91:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019f98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f9c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019fa3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019faa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019fb1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019fb8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019fbf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019fc6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019fcd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019fd4:	89 c6                	mov    esi,eax
c0019fd6:	89 d7                	mov    edi,edx
c0019fd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fda:	89 c8                	mov    eax,ecx
c0019fdc:	89 fa                	mov    edx,edi
c0019fde:	89 f3                	mov    ebx,esi
c0019fe0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019fe7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019fee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019ff5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019ffc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a002:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a009:	0f be c0             	movsx  eax,al
c001a00c:	85 c0                	test   eax,eax
c001a00e:	75 08                	jne    c001a018 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a010:	b8 07 00 00 00       	mov    eax,0x7
c001a015:	eb 1d                	jmp    c001a034 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a017:	90                   	nop
c001a018:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a01f:	85 c0                	test   eax,eax
c001a021:	75 09                	jne    c001a02c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a023:	b8 00 00 00 00       	mov    eax,0x0
c001a028:	eb 0a                	jmp    c001a034 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a02a:	66 90                	xchg   ax,ax
c001a02c:	b8 01 00 00 00       	mov    eax,0x1
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	81 c4 50 02 00 00    	add    esp,0x250
c001a03a:	5b                   	pop    ebx
c001a03b:	5e                   	pop    esi
c001a03c:	5f                   	pop    edi
c001a03d:	c3                   	ret    
c001a03e:	66 90                	xchg   ax,ax

c001a040 <FAT::read(void*, unsigned long, void*, int*)>:
c001a040:	83 ec 1c             	sub    esp,0x1c
c001a043:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a048:	74 0a                	je     c001a054 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a04a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a04f:	75 0b                	jne    c001a05c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a051:	8d 76 00             	lea    esi,[esi+0x0]
c001a054:	b8 04 00 00 00       	mov    eax,0x4
c001a059:	eb 41                	jmp    c001a09c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a05b:	90                   	nop
c001a05c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a060:	50                   	push   eax
c001a061:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a065:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a069:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a06d:	e8 94 a0 fe ff       	call   c0004106 <f_read>
c001a072:	83 c4 10             	add    esp,0x10
c001a075:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a07d:	89 c2                	mov    edx,eax
c001a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a083:	89 10                	mov    DWORD PTR [eax],edx
c001a085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a089:	85 c0                	test   eax,eax
c001a08b:	75 07                	jne    c001a094 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a08d:	b8 00 00 00 00       	mov    eax,0x0
c001a092:	eb 08                	jmp    c001a09c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a094:	b8 01 00 00 00       	mov    eax,0x1
c001a099:	8d 76 00             	lea    esi,[esi+0x0]
c001a09c:	83 c4 1c             	add    esp,0x1c
c001a09f:	c3                   	ret    

c001a0a0 <FAT::write(void*, unsigned long, void*, int*)>:
c001a0a0:	83 ec 1c             	sub    esp,0x1c
c001a0a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0a8:	74 0a                	je     c001a0b4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a0aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a0af:	75 0b                	jne    c001a0bc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b4:	b8 04 00 00 00       	mov    eax,0x4
c001a0b9:	eb 41                	jmp    c001a0fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0bb:	90                   	nop
c001a0bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0c0:	50                   	push   eax
c001a0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a0c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0cd:	e8 33 a2 fe ff       	call   c0004305 <f_write>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0dd:	89 c2                	mov    edx,eax
c001a0df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0e3:	89 10                	mov    DWORD PTR [eax],edx
c001a0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0e9:	85 c0                	test   eax,eax
c001a0eb:	75 07                	jne    c001a0f4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a0ed:	b8 00 00 00 00       	mov    eax,0x0
c001a0f2:	eb 08                	jmp    c001a0fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0f4:	b8 01 00 00 00       	mov    eax,0x1
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	83 c4 1c             	add    esp,0x1c
c001a0ff:	c3                   	ret    

c001a100 <FAT::close(void*)>:
c001a100:	83 ec 1c             	sub    esp,0x1c
c001a103:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a108:	75 0a                	jne    c001a114 <FAT::close(void*)+0x14>
c001a10a:	b8 04 00 00 00       	mov    eax,0x4
c001a10f:	eb 3f                	jmp    c001a150 <FAT::close(void*)+0x50>
c001a111:	8d 76 00             	lea    esi,[esi+0x0]
c001a114:	83 ec 0c             	sub    esp,0xc
c001a117:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a11b:	e8 f2 a4 fe ff       	call   c0004612 <f_close>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a127:	83 ec 0c             	sub    esp,0xc
c001a12a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a12e:	e8 58 48 ff ff       	call   c000e98b <free>
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a13a:	85 c0                	test   eax,eax
c001a13c:	75 0a                	jne    c001a148 <FAT::close(void*)+0x48>
c001a13e:	b8 00 00 00 00       	mov    eax,0x0
c001a143:	eb 0b                	jmp    c001a150 <FAT::close(void*)+0x50>
c001a145:	8d 76 00             	lea    esi,[esi+0x0]
c001a148:	b8 01 00 00 00       	mov    eax,0x1
c001a14d:	8d 76 00             	lea    esi,[esi+0x0]
c001a150:	83 c4 1c             	add    esp,0x1c
c001a153:	c3                   	ret    

c001a154 <FAT::closeDir(void*)>:
c001a154:	83 ec 1c             	sub    esp,0x1c
c001a157:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a15c:	75 0a                	jne    c001a168 <FAT::closeDir(void*)+0x14>
c001a15e:	b8 04 00 00 00       	mov    eax,0x4
c001a163:	eb 3f                	jmp    c001a1a4 <FAT::closeDir(void*)+0x50>
c001a165:	8d 76 00             	lea    esi,[esi+0x0]
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a16f:	e8 49 a7 fe ff       	call   c00048bd <f_closedir>
c001a174:	83 c4 10             	add    esp,0x10
c001a177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a17b:	83 ec 0c             	sub    esp,0xc
c001a17e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a182:	e8 04 48 ff ff       	call   c000e98b <free>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a18e:	85 c0                	test   eax,eax
c001a190:	75 0a                	jne    c001a19c <FAT::closeDir(void*)+0x48>
c001a192:	b8 00 00 00 00       	mov    eax,0x0
c001a197:	eb 0b                	jmp    c001a1a4 <FAT::closeDir(void*)+0x50>
c001a199:	8d 76 00             	lea    esi,[esi+0x0]
c001a19c:	b8 01 00 00 00       	mov    eax,0x1
c001a1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a4:	83 c4 1c             	add    esp,0x1c
c001a1a7:	c3                   	ret    

c001a1a8 <FAT::truncate(void*, unsigned long long)>:
c001a1a8:	83 ec 2c             	sub    esp,0x2c
c001a1ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a1c0:	75 0a                	jne    c001a1cc <FAT::truncate(void*, unsigned long long)+0x24>
c001a1c2:	b8 04 00 00 00       	mov    eax,0x4
c001a1c7:	eb 47                	jmp    c001a210 <FAT::truncate(void*, unsigned long long)+0x68>
c001a1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a1d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a1df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1e3:	83 ec 08             	sub    esp,0x8
c001a1e6:	50                   	push   eax
c001a1e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1eb:	e8 51 a4 fe ff       	call   c0004641 <f_lseek>
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1fb:	85 c0                	test   eax,eax
c001a1fd:	75 09                	jne    c001a208 <FAT::truncate(void*, unsigned long long)+0x60>
c001a1ff:	b8 00 00 00 00       	mov    eax,0x0
c001a204:	eb 0a                	jmp    c001a210 <FAT::truncate(void*, unsigned long long)+0x68>
c001a206:	66 90                	xchg   ax,ax
c001a208:	b8 01 00 00 00       	mov    eax,0x1
c001a20d:	8d 76 00             	lea    esi,[esi+0x0]
c001a210:	83 c4 2c             	add    esp,0x2c
c001a213:	c3                   	ret    

c001a214 <FAT::seek(void*, unsigned long long)>:
c001a214:	83 ec 2c             	sub    esp,0x2c
c001a217:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a21b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a21f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a223:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a227:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a22c:	75 0a                	jne    c001a238 <FAT::seek(void*, unsigned long long)+0x24>
c001a22e:	b8 04 00 00 00       	mov    eax,0x4
c001a233:	eb 33                	jmp    c001a268 <FAT::seek(void*, unsigned long long)+0x54>
c001a235:	8d 76 00             	lea    esi,[esi+0x0]
c001a238:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a23c:	83 ec 08             	sub    esp,0x8
c001a23f:	50                   	push   eax
c001a240:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a244:	e8 f8 a3 fe ff       	call   c0004641 <f_lseek>
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a254:	85 c0                	test   eax,eax
c001a256:	75 08                	jne    c001a260 <FAT::seek(void*, unsigned long long)+0x4c>
c001a258:	b8 00 00 00 00       	mov    eax,0x0
c001a25d:	eb 09                	jmp    c001a268 <FAT::seek(void*, unsigned long long)+0x54>
c001a25f:	90                   	nop
c001a260:	b8 01 00 00 00       	mov    eax,0x1
c001a265:	8d 76 00             	lea    esi,[esi+0x0]
c001a268:	83 c4 2c             	add    esp,0x2c
c001a26b:	c3                   	ret    

c001a26c <fatWrapperReadDisk>:
c001a26c:	53                   	push   ebx
c001a26d:	83 ec 18             	sub    esp,0x18
c001a270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a274:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a278:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a27d:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a284:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a288:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a28c:	ba 00 00 00 00       	mov    edx,0x0
c001a291:	83 ec 0c             	sub    esp,0xc
c001a294:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a298:	53                   	push   ebx
c001a299:	52                   	push   edx
c001a29a:	50                   	push   eax
c001a29b:	51                   	push   ecx
c001a29c:	e8 2b fe fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001a2a1:	83 c4 20             	add    esp,0x20
c001a2a4:	83 c4 18             	add    esp,0x18
c001a2a7:	5b                   	pop    ebx
c001a2a8:	c3                   	ret    
c001a2a9:	8d 76 00             	lea    esi,[esi+0x0]

c001a2ac <fatWrapperWriteDisk>:
c001a2ac:	53                   	push   ebx
c001a2ad:	83 ec 18             	sub    esp,0x18
c001a2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2bd:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a2c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2cc:	ba 00 00 00 00       	mov    edx,0x0
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2d8:	53                   	push   ebx
c001a2d9:	52                   	push   edx
c001a2da:	50                   	push   eax
c001a2db:	51                   	push   ecx
c001a2dc:	e8 57 fe fe ff       	call   c000a138 <LogicalDisk::write(unsigned long long, int, void*)>
c001a2e1:	83 c4 20             	add    esp,0x20
c001a2e4:	83 c4 18             	add    esp,0x18
c001a2e7:	5b                   	pop    ebx
c001a2e8:	c3                   	ret    
c001a2e9:	8d 76 00             	lea    esi,[esi+0x0]

c001a2ec <fatWrapperIoctl>:
c001a2ec:	53                   	push   ebx
c001a2ed:	83 ec 28             	sub    esp,0x28
c001a2f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a2f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2f8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a2fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a300:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a305:	83 f8 02             	cmp    eax,0x2
c001a308:	75 32                	jne    c001a33c <fatWrapperIoctl+0x50>
c001a30a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a30e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a312:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a317:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a31e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a324:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a32a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a32e:	66 89 02             	mov    WORD PTR [edx],ax
c001a331:	b8 00 00 00 00       	mov    eax,0x0
c001a336:	e9 c5 00 00 00       	jmp    c001a400 <fatWrapperIoctl+0x114>
c001a33b:	90                   	nop
c001a33c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a341:	83 f8 01             	cmp    eax,0x1
c001a344:	75 6a                	jne    c001a3b0 <fatWrapperIoctl+0xc4>
c001a346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a34a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a34e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a353:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a35a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a360:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a366:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a36c:	89 c8                	mov    eax,ecx
c001a36e:	89 da                	mov    edx,ebx
c001a370:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a374:	c1 e0 0a             	shl    eax,0xa
c001a377:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a37c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a383:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a389:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a38f:	89 cb                	mov    ebx,ecx
c001a391:	c1 fb 1f             	sar    ebx,0x1f
c001a394:	53                   	push   ebx
c001a395:	51                   	push   ecx
c001a396:	52                   	push   edx
c001a397:	50                   	push   eax
c001a398:	e8 c7 59 00 00       	call   c001fd64 <__udivdi3>
c001a39d:	83 c4 10             	add    esp,0x10
c001a3a0:	89 c2                	mov    edx,eax
c001a3a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3a6:	89 10                	mov    DWORD PTR [eax],edx
c001a3a8:	b8 00 00 00 00       	mov    eax,0x0
c001a3ad:	eb 51                	jmp    c001a400 <fatWrapperIoctl+0x114>
c001a3af:	90                   	nop
c001a3b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3b5:	85 c0                	test   eax,eax
c001a3b7:	75 07                	jne    c001a3c0 <fatWrapperIoctl+0xd4>
c001a3b9:	b8 00 00 00 00       	mov    eax,0x0
c001a3be:	eb 40                	jmp    c001a400 <fatWrapperIoctl+0x114>
c001a3c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3c5:	83 f8 03             	cmp    eax,0x3
c001a3c8:	75 1a                	jne    c001a3e4 <fatWrapperIoctl+0xf8>
c001a3ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3d6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a3dc:	b8 00 00 00 00       	mov    eax,0x0
c001a3e1:	eb 1d                	jmp    c001a400 <fatWrapperIoctl+0x114>
c001a3e3:	90                   	nop
c001a3e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3e9:	83 f8 04             	cmp    eax,0x4
c001a3ec:	75 0a                	jne    c001a3f8 <fatWrapperIoctl+0x10c>
c001a3ee:	b8 00 00 00 00       	mov    eax,0x0
c001a3f3:	eb 0b                	jmp    c001a400 <fatWrapperIoctl+0x114>
c001a3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f8:	b8 04 00 00 00       	mov    eax,0x4
c001a3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a400:	83 c4 28             	add    esp,0x28
c001a403:	5b                   	pop    ebx
c001a404:	c3                   	ret    
c001a405:	90                   	nop
c001a406:	66 90                	xchg   ax,ax

c001a408 <FAT::FAT()>:
c001a408:	83 ec 1c             	sub    esp,0x1c
c001a40b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a40f:	83 ec 0c             	sub    esp,0xc
c001a412:	50                   	push   eax
c001a413:	e8 58 d9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a418:	83 c4 10             	add    esp,0x10
c001a41b:	ba 74 34 02 c0       	mov    edx,0xc0023474
c001a420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a424:	89 10                	mov    DWORD PTR [eax],edx
c001a426:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a430:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a438:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a43d:	7f 19                	jg     c001a458 <FAT::FAT()+0x50>
c001a43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a443:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a44e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a453:	eb e3                	jmp    c001a438 <FAT::FAT()+0x30>
c001a455:	8d 76 00             	lea    esi,[esi+0x0]
c001a458:	90                   	nop
c001a459:	83 c4 1c             	add    esp,0x1c
c001a45c:	c3                   	ret    
c001a45d:	90                   	nop
c001a45e:	66 90                	xchg   ax,ax

c001a460 <FAT::fixFilepath(char*)>:
c001a460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a464:	8a 00                	mov    al,BYTE PTR [eax]
c001a466:	0f be c0             	movsx  eax,al
c001a469:	83 f8 40             	cmp    eax,0x40
c001a46c:	7e 2e                	jle    c001a49c <FAT::fixFilepath(char*)+0x3c>
c001a46e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a472:	8a 00                	mov    al,BYTE PTR [eax]
c001a474:	83 e8 41             	sub    eax,0x41
c001a477:	88 c2                	mov    dl,al
c001a479:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a47d:	88 10                	mov    BYTE PTR [eax],dl
c001a47f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a483:	8a 00                	mov    al,BYTE PTR [eax]
c001a485:	0f be c0             	movsx  eax,al
c001a488:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a48f:	83 c0 30             	add    eax,0x30
c001a492:	88 c2                	mov    dl,al
c001a494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a498:	88 10                	mov    BYTE PTR [eax],dl
c001a49a:	66 90                	xchg   ax,ax
c001a49c:	90                   	nop
c001a49d:	c3                   	ret    
c001a49e:	66 90                	xchg   ax,ax

c001a4a0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a4a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a4ae:	74 0c                	je     c001a4bc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a4b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a4b8:	75 0e                	jne    c001a4c8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a4ba:	66 90                	xchg   ax,ax
c001a4bc:	b8 04 00 00 00       	mov    eax,0x4
c001a4c1:	e9 46 01 00 00       	jmp    c001a60c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a4c6:	66 90                	xchg   ax,ax
c001a4c8:	83 ec 08             	sub    esp,0x8
c001a4cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4d6:	50                   	push   eax
c001a4d7:	e8 64 61 fe ff       	call   c0000640 <strcpy>
c001a4dc:	83 c4 10             	add    esp,0x10
c001a4df:	83 ec 08             	sub    esp,0x8
c001a4e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4e6:	50                   	push   eax
c001a4e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4ee:	e8 6d ff ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a4fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a505:	83 e0 01             	and    eax,0x1
c001a508:	74 12                	je     c001a51c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a50a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a511:	83 c8 01             	or     eax,0x1
c001a514:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a51b:	90                   	nop
c001a51c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a523:	83 e0 04             	and    eax,0x4
c001a526:	74 24                	je     c001a54c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a528:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a52f:	83 c8 30             	or     eax,0x30
c001a532:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a539:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a540:	83 c8 02             	or     eax,0x2
c001a543:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a54a:	66 90                	xchg   ax,ax
c001a54c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a553:	83 e0 02             	and    eax,0x2
c001a556:	74 14                	je     c001a56c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a558:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a55f:	83 c8 02             	or     eax,0x2
c001a562:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a569:	8d 76 00             	lea    esi,[esi+0x0]
c001a56c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a573:	83 e0 08             	and    eax,0x8
c001a576:	74 14                	je     c001a58c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a578:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a57f:	83 c8 04             	or     eax,0x4
c001a582:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a589:	8d 76 00             	lea    esi,[esi+0x0]
c001a58c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a593:	83 e0 10             	and    eax,0x10
c001a596:	74 14                	je     c001a5ac <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a598:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a59f:	83 c8 08             	or     eax,0x8
c001a5a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a5a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	68 28 02 00 00       	push   0x228
c001a5b4:	e8 c2 43 ff ff       	call   c000e97b <malloc>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	89 c2                	mov    edx,eax
c001a5be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5c5:	89 10                	mov    DWORD PTR [eax],edx
c001a5c7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a5cf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5d8:	83 ec 04             	sub    esp,0x4
c001a5db:	52                   	push   edx
c001a5dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a5e0:	52                   	push   edx
c001a5e1:	50                   	push   eax
c001a5e2:	e8 5c 98 fe ff       	call   c0003e43 <f_open>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a5f1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a5f9:	74 09                	je     c001a604 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a5fb:	b8 01 00 00 00       	mov    eax,0x1
c001a600:	eb 0a                	jmp    c001a60c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a602:	66 90                	xchg   ax,ax
c001a604:	b8 00 00 00 00       	mov    eax,0x0
c001a609:	8d 76 00             	lea    esi,[esi+0x0]
c001a60c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a612:	c3                   	ret    
c001a613:	90                   	nop

c001a614 <FAT::openDir(char const*, void**)>:
c001a614:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a61a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a622:	74 0c                	je     c001a630 <FAT::openDir(char const*, void**)+0x1c>
c001a624:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a62c:	75 0e                	jne    c001a63c <FAT::openDir(char const*, void**)+0x28>
c001a62e:	66 90                	xchg   ax,ax
c001a630:	b8 04 00 00 00       	mov    eax,0x4
c001a635:	e9 82 00 00 00       	jmp    c001a6bc <FAT::openDir(char const*, void**)+0xa8>
c001a63a:	66 90                	xchg   ax,ax
c001a63c:	83 ec 08             	sub    esp,0x8
c001a63f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a646:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a64a:	50                   	push   eax
c001a64b:	e8 f0 5f fe ff       	call   c0000640 <strcpy>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	83 ec 08             	sub    esp,0x8
c001a656:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a65a:	50                   	push   eax
c001a65b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a662:	e8 f9 fd ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	6a 30                	push   0x30
c001a66f:	e8 07 43 ff ff       	call   c000e97b <malloc>
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	89 c2                	mov    edx,eax
c001a679:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a680:	89 10                	mov    DWORD PTR [eax],edx
c001a682:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a689:	8b 00                	mov    eax,DWORD PTR [eax]
c001a68b:	83 ec 08             	sub    esp,0x8
c001a68e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a692:	52                   	push   edx
c001a693:	50                   	push   eax
c001a694:	e8 59 a1 fe ff       	call   c00047f2 <f_opendir>
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a6a3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a6ab:	74 07                	je     c001a6b4 <FAT::openDir(char const*, void**)+0xa0>
c001a6ad:	b8 01 00 00 00       	mov    eax,0x1
c001a6b2:	eb 08                	jmp    c001a6bc <FAT::openDir(char const*, void**)+0xa8>
c001a6b4:	b8 00 00 00 00       	mov    eax,0x0
c001a6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6c2:	c3                   	ret    
c001a6c3:	90                   	nop

c001a6c4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a6c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a6ca:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a6d2:	75 0c                	jne    c001a6e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a6d4:	b8 04 00 00 00       	mov    eax,0x4
c001a6d9:	e9 d6 00 00 00       	jmp    c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6de:	66 90                	xchg   ax,ax
c001a6e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a6e8:	75 0a                	jne    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	e9 c0 00 00 00       	jmp    c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a6fc:	75 0a                	jne    c001a708 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a6fe:	b8 04 00 00 00       	mov    eax,0x4
c001a703:	e9 ac 00 00 00       	jmp    c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a708:	83 ec 08             	sub    esp,0x8
c001a70b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a712:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a719:	50                   	push   eax
c001a71a:	e8 21 5f fe ff       	call   c0000640 <strcpy>
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	83 ec 08             	sub    esp,0x8
c001a725:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a72c:	50                   	push   eax
c001a72d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a734:	e8 27 fd ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001a739:	83 c4 10             	add    esp,0x10
c001a73c:	83 ec 08             	sub    esp,0x8
c001a73f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a743:	50                   	push   eax
c001a744:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a74b:	50                   	push   eax
c001a74c:	e8 20 a2 fe ff       	call   c0004971 <f_stat>
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a75b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a762:	85 c0                	test   eax,eax
c001a764:	74 0a                	je     c001a770 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a766:	83 f8 04             	cmp    eax,0x4
c001a769:	74 39                	je     c001a7a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a76b:	eb 3f                	jmp    c001a7ac <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a76d:	8d 76 00             	lea    esi,[esi+0x0]
c001a770:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a774:	0f b6 c0             	movzx  eax,al
c001a777:	83 e0 10             	and    eax,0x10
c001a77a:	0f 95 c2             	setne  dl
c001a77d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a784:	88 10                	mov    BYTE PTR [eax],dl
c001a786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78a:	ba 00 00 00 00       	mov    edx,0x0
c001a78f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a796:	89 01                	mov    DWORD PTR [ecx],eax
c001a798:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a79b:	b8 00 00 00 00       	mov    eax,0x0
c001a7a0:	eb 12                	jmp    c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a7a2:	66 90                	xchg   ax,ax
c001a7a4:	b8 02 00 00 00       	mov    eax,0x2
c001a7a9:	eb 09                	jmp    c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a7ab:	90                   	nop
c001a7ac:	b8 01 00 00 00       	mov    eax,0x1
c001a7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7b4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a7ba:	c3                   	ret    
c001a7bb:	90                   	nop

c001a7bc <FAT::unlink(char const*)>:
c001a7bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7ca:	75 08                	jne    c001a7d4 <FAT::unlink(char const*)+0x18>
c001a7cc:	b8 04 00 00 00       	mov    eax,0x4
c001a7d1:	eb 61                	jmp    c001a834 <FAT::unlink(char const*)+0x78>
c001a7d3:	90                   	nop
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7e2:	50                   	push   eax
c001a7e3:	e8 58 5e fe ff       	call   c0000640 <strcpy>
c001a7e8:	83 c4 10             	add    esp,0x10
c001a7eb:	83 ec 08             	sub    esp,0x8
c001a7ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7f2:	50                   	push   eax
c001a7f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7fa:	e8 61 fc ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a809:	50                   	push   eax
c001a80a:	e8 d4 a3 fe ff       	call   c0004be3 <f_unlink>
c001a80f:	83 c4 10             	add    esp,0x10
c001a812:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a819:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a820:	85 c0                	test   eax,eax
c001a822:	75 08                	jne    c001a82c <FAT::unlink(char const*)+0x70>
c001a824:	b8 00 00 00 00       	mov    eax,0x0
c001a829:	eb 09                	jmp    c001a834 <FAT::unlink(char const*)+0x78>
c001a82b:	90                   	nop
c001a82c:	b8 01 00 00 00       	mov    eax,0x1
c001a831:	8d 76 00             	lea    esi,[esi+0x0]
c001a834:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a83a:	c3                   	ret    
c001a83b:	90                   	nop

c001a83c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a83c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a842:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a849:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a850:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a854:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a858:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a860:	75 0a                	jne    c001a86c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a862:	b8 04 00 00 00       	mov    eax,0x4
c001a867:	e9 7c 01 00 00       	jmp    c001a9e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a86c:	83 ec 08             	sub    esp,0x8
c001a86f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a876:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a87a:	50                   	push   eax
c001a87b:	e8 c0 5d fe ff       	call   c0000640 <strcpy>
c001a880:	83 c4 10             	add    esp,0x10
c001a883:	83 ec 08             	sub    esp,0x8
c001a886:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a88a:	50                   	push   eax
c001a88b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a892:	e8 c9 fb ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a8a2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a8aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8af:	83 e0 01             	and    eax,0x1
c001a8b2:	74 14                	je     c001a8c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a8b4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8bb:	83 c8 01             	or     eax,0x1
c001a8be:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8cd:	83 e0 02             	and    eax,0x2
c001a8d0:	74 12                	je     c001a8e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a8d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8d9:	83 c8 20             	or     eax,0x20
c001a8dc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8e3:	90                   	nop
c001a8e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8e9:	83 e0 04             	and    eax,0x4
c001a8ec:	74 12                	je     c001a900 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a8ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8f5:	83 c8 04             	or     eax,0x4
c001a8f8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8ff:	90                   	nop
c001a900:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a905:	83 e0 08             	and    eax,0x8
c001a908:	74 12                	je     c001a91c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a90a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a911:	83 c8 02             	or     eax,0x2
c001a914:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a91b:	90                   	nop
c001a91c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a921:	83 e0 01             	and    eax,0x1
c001a924:	74 12                	je     c001a938 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a926:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a92d:	83 c8 01             	or     eax,0x1
c001a930:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a937:	90                   	nop
c001a938:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a93d:	83 e0 02             	and    eax,0x2
c001a940:	74 12                	je     c001a954 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a942:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a949:	83 c8 20             	or     eax,0x20
c001a94c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a953:	90                   	nop
c001a954:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a959:	83 e0 04             	and    eax,0x4
c001a95c:	74 12                	je     c001a970 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a95e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a965:	83 c8 04             	or     eax,0x4
c001a968:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a96f:	90                   	nop
c001a970:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a975:	83 e0 08             	and    eax,0x8
c001a978:	74 12                	je     c001a98c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a97a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a981:	83 c8 02             	or     eax,0x2
c001a984:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a98b:	90                   	nop
c001a98c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a993:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a99a:	09 d0                	or     eax,edx
c001a99c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a9a3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a9ab:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a9b3:	83 ec 04             	sub    esp,0x4
c001a9b6:	52                   	push   edx
c001a9b7:	50                   	push   eax
c001a9b8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9bc:	50                   	push   eax
c001a9bd:	e8 96 a6 fe ff       	call   c0005058 <f_chmod>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a9cc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a9d3:	85 c0                	test   eax,eax
c001a9d5:	75 09                	jne    c001a9e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a9d7:	b8 00 00 00 00       	mov    eax,0x0
c001a9dc:	eb 0a                	jmp    c001a9e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	b8 01 00 00 00       	mov    eax,0x1
c001a9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9ee:	c3                   	ret    
c001a9ef:	90                   	nop

c001a9f0 <FAT::rename(char const*, char const*)>:
c001a9f0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9f6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a9fe:	74 0c                	je     c001aa0c <FAT::rename(char const*, char const*)+0x1c>
c001aa00:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aa08:	75 0e                	jne    c001aa18 <FAT::rename(char const*, char const*)+0x28>
c001aa0a:	66 90                	xchg   ax,ax
c001aa0c:	b8 04 00 00 00       	mov    eax,0x4
c001aa11:	e9 9e 00 00 00       	jmp    c001aab4 <FAT::rename(char const*, char const*)+0xc4>
c001aa16:	66 90                	xchg   ax,ax
c001aa18:	83 ec 08             	sub    esp,0x8
c001aa1b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa22:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa29:	50                   	push   eax
c001aa2a:	e8 11 5c fe ff       	call   c0000640 <strcpy>
c001aa2f:	83 c4 10             	add    esp,0x10
c001aa32:	83 ec 08             	sub    esp,0x8
c001aa35:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aa3c:	50                   	push   eax
c001aa3d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa44:	e8 17 fa ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001aa49:	83 c4 10             	add    esp,0x10
c001aa4c:	83 ec 08             	sub    esp,0x8
c001aa4f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aa56:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa5a:	50                   	push   eax
c001aa5b:	e8 e0 5b fe ff       	call   c0000640 <strcpy>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	83 ec 08             	sub    esp,0x8
c001aa66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa6a:	50                   	push   eax
c001aa6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa72:	e8 e9 f9 ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	83 ec 08             	sub    esp,0x8
c001aa7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa81:	50                   	push   eax
c001aa82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa89:	50                   	push   eax
c001aa8a:	e8 11 a4 fe ff       	call   c0004ea0 <f_rename>
c001aa8f:	83 c4 10             	add    esp,0x10
c001aa92:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aa99:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aaa0:	85 c0                	test   eax,eax
c001aaa2:	75 08                	jne    c001aaac <FAT::rename(char const*, char const*)+0xbc>
c001aaa4:	b8 00 00 00 00       	mov    eax,0x0
c001aaa9:	eb 09                	jmp    c001aab4 <FAT::rename(char const*, char const*)+0xc4>
c001aaab:	90                   	nop
c001aaac:	b8 01 00 00 00       	mov    eax,0x1
c001aab1:	8d 76 00             	lea    esi,[esi+0x0]
c001aab4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aaba:	c3                   	ret    
c001aabb:	90                   	nop

c001aabc <FAT::mkdir(char const*)>:
c001aabc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aac2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aaca:	75 08                	jne    c001aad4 <FAT::mkdir(char const*)+0x18>
c001aacc:	b8 04 00 00 00       	mov    eax,0x4
c001aad1:	eb 61                	jmp    c001ab34 <FAT::mkdir(char const*)+0x78>
c001aad3:	90                   	nop
c001aad4:	83 ec 08             	sub    esp,0x8
c001aad7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aade:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aae2:	50                   	push   eax
c001aae3:	e8 58 5b fe ff       	call   c0000640 <strcpy>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	83 ec 08             	sub    esp,0x8
c001aaee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaf2:	50                   	push   eax
c001aaf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aafa:	e8 61 f9 ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab09:	50                   	push   eax
c001ab0a:	e8 f6 a1 fe ff       	call   c0004d05 <f_mkdir>
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab20:	85 c0                	test   eax,eax
c001ab22:	75 08                	jne    c001ab2c <FAT::mkdir(char const*)+0x70>
c001ab24:	b8 00 00 00 00       	mov    eax,0x0
c001ab29:	eb 09                	jmp    c001ab34 <FAT::mkdir(char const*)+0x78>
c001ab2b:	90                   	nop
c001ab2c:	b8 01 00 00 00       	mov    eax,0x1
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab3a:	c3                   	ret    
c001ab3b:	90                   	nop

c001ab3c <FAT::exists(char const*)>:
c001ab3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ab42:	83 ec 08             	sub    esp,0x8
c001ab45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab50:	50                   	push   eax
c001ab51:	e8 ea 5a fe ff       	call   c0000640 <strcpy>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	83 ec 08             	sub    esp,0x8
c001ab5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab60:	50                   	push   eax
c001ab61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab68:	e8 f3 f8 ff ff       	call   c001a460 <FAT::fixFilepath(char*)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	83 ec 08             	sub    esp,0x8
c001ab73:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ab7a:	50                   	push   eax
c001ab7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab7f:	50                   	push   eax
c001ab80:	e8 ec 9d fe ff       	call   c0004971 <f_stat>
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab96:	85 c0                	test   eax,eax
c001ab98:	75 06                	jne    c001aba0 <FAT::exists(char const*)+0x64>
c001ab9a:	b0 01                	mov    al,0x1
c001ab9c:	eb 06                	jmp    c001aba4 <FAT::exists(char const*)+0x68>
c001ab9e:	66 90                	xchg   ax,ax
c001aba0:	b0 00                	mov    al,0x0
c001aba2:	66 90                	xchg   ax,ax
c001aba4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001abaa:	c3                   	ret    
c001abab:	90                   	nop

c001abac <isoReadDiscSectorHelper>:
c001abac:	83 ec 2c             	sub    esp,0x2c
c001abaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abb7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001abbc:	83 e8 41             	sub    eax,0x41
c001abbf:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001abc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abca:	ba 00 00 00 00       	mov    edx,0x0
c001abcf:	83 ec 0c             	sub    esp,0xc
c001abd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abd6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001abda:	52                   	push   edx
c001abdb:	50                   	push   eax
c001abdc:	51                   	push   ecx
c001abdd:	e8 ea f4 fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001abe2:	83 c4 20             	add    esp,0x20
c001abe5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abe9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abee:	74 0c                	je     c001abfc <isoReadDiscSectorHelper+0x50>
c001abf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf4:	c1 e0 0b             	shl    eax,0xb
c001abf7:	eb 0b                	jmp    c001ac04 <isoReadDiscSectorHelper+0x58>
c001abf9:	8d 76 00             	lea    esi,[esi+0x0]
c001abfc:	b8 00 00 00 00       	mov    eax,0x0
c001ac01:	8d 76 00             	lea    esi,[esi+0x0]
c001ac04:	83 c4 2c             	add    esp,0x2c
c001ac07:	c3                   	ret    

c001ac08 <iso_kprintf>:
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	83 ec 08             	sub    esp,0x8
c001ac0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac12:	68 4d 31 02 c0       	push   0xc002314d
c001ac17:	e8 48 c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac1c:	83 c4 10             	add    esp,0x10
c001ac1f:	90                   	nop
c001ac20:	83 c4 0c             	add    esp,0xc
c001ac23:	c3                   	ret    

c001ac24 <iso_kprintfd>:
c001ac24:	83 ec 0c             	sub    esp,0xc
c001ac27:	83 ec 08             	sub    esp,0x8
c001ac2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac2e:	68 c1 17 02 c0       	push   0xc00217c1
c001ac33:	e8 2c c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	90                   	nop
c001ac3c:	83 c4 0c             	add    esp,0xc
c001ac3f:	c3                   	ret    

c001ac40 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ac40:	b8 08 00 00 00       	mov    eax,0x8
c001ac45:	c3                   	ret    

c001ac46 <ISO9660::truncate(void*, unsigned long long)>:
c001ac46:	b8 01 00 00 00       	mov    eax,0x1
c001ac4b:	c3                   	ret    

c001ac4c <ISO9660::getName()>:
c001ac4c:	b8 d8 34 02 c0       	mov    eax,0xc00234d8
c001ac51:	c3                   	ret    

c001ac52 <ISO9660::closeDir(void*)>:
c001ac52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac56:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac58:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ac5b:	90                   	nop

c001ac5c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac5c:	b8 01 00 00 00       	mov    eax,0x1
c001ac61:	c3                   	ret    

c001ac62 <ISO9660::unlink(char const*)>:
c001ac62:	b8 01 00 00 00       	mov    eax,0x1
c001ac67:	c3                   	ret    

c001ac68 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ac68:	b8 03 00 00 00       	mov    eax,0x3
c001ac6d:	c3                   	ret    

c001ac6e <ISO9660::rename(char const*, char const*)>:
c001ac6e:	b8 01 00 00 00       	mov    eax,0x1
c001ac73:	c3                   	ret    

c001ac74 <ISO9660::mkdir(char const*)>:
c001ac74:	b8 01 00 00 00       	mov    eax,0x1
c001ac79:	c3                   	ret    

c001ac7a <ISO9660::~ISO9660()>:
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001ac82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac86:	89 10                	mov    DWORD PTR [eax],edx
c001ac88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	50                   	push   eax
c001ac90:	e8 ff d0 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	90                   	nop
c001ac99:	83 c4 0c             	add    esp,0xc
c001ac9c:	c3                   	ret    
c001ac9d:	90                   	nop

c001ac9e <ISO9660::~ISO9660()>:
c001ac9e:	83 ec 0c             	sub    esp,0xc
c001aca1:	83 ec 0c             	sub    esp,0xc
c001aca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca8:	e8 cd ff ff ff       	call   c001ac7a <ISO9660::~ISO9660()>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	83 ec 08             	sub    esp,0x8
c001acb3:	6a 08                	push   0x8
c001acb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acb9:	e8 42 1a ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	83 c4 0c             	add    esp,0xc
c001acc4:	c3                   	ret    
c001acc5:	90                   	nop

c001acc6 <ISO9660::exists(char const*)>:
c001acc6:	83 ec 18             	sub    esp,0x18
c001acc9:	68 f3 34 02 c0       	push   0xc00234f3
c001acce:	e8 ef 3f ff ff       	call   c000ecc2 <KePanic(char const*)>
c001acd3:	31 c0                	xor    eax,eax
c001acd5:	83 c4 1c             	add    esp,0x1c
c001acd8:	c3                   	ret    
c001acd9:	90                   	nop

c001acda <ISO9660::open(char const*, void**, FileOpenMode)>:
c001acda:	56                   	push   esi
c001acdb:	53                   	push   ebx
c001acdc:	53                   	push   ebx
c001acdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ace1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ace5:	85 db                	test   ebx,ebx
c001ace7:	0f 84 ca 00 00 00    	je     c001adb7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001aced:	85 f6                	test   esi,esi
c001acef:	0f 84 c2 00 00 00    	je     c001adb7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001acf5:	b8 03 00 00 00       	mov    eax,0x3
c001acfa:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001acff:	0f 85 b7 00 00 00    	jne    c001adbc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad05:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ad07:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad0e:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ad14:	74 1b                	je     c001ad31 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad16:	85 c0                	test   eax,eax
c001ad18:	74 10                	je     c001ad2a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	68 11 35 02 c0       	push   0xc0023511
c001ad22:	e8 9b 3f ff ff       	call   c000ecc2 <KePanic(char const*)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ad2c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ad31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad34:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad3b:	85 c0                	test   eax,eax
c001ad3d:	74 09                	je     c001ad48 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ad3f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ad46:	74 48                	je     c001ad90 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ad48:	83 ec 0c             	sub    esp,0xc
c001ad4b:	68 21 35 02 c0       	push   0xc0023521
c001ad50:	e8 0f c2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ad55:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad58:	83 c4 10             	add    esp,0x10
c001ad5b:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad62:	85 c0                	test   eax,eax
c001ad64:	74 17                	je     c001ad7d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ad66:	83 ec 0c             	sub    esp,0xc
c001ad69:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ad70:	68 41 35 02 c0       	push   0xc0023541
c001ad75:	e8 ea c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	83 ec 0c             	sub    esp,0xc
c001ad80:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad87:	50                   	push   eax
c001ad88:	e8 a1 be fe ff       	call   c0006c2e <init_percd>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	83 c3 03             	add    ebx,0x3
c001ad93:	51                   	push   ecx
c001ad94:	51                   	push   ecx
c001ad95:	6a 00                	push   0x0
c001ad97:	53                   	push   ebx
c001ad98:	e8 58 b9 fe ff       	call   c00066f5 <iso_open>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	89 c2                	mov    edx,eax
c001ada2:	b8 01 00 00 00       	mov    eax,0x1
c001ada7:	83 fa ff             	cmp    edx,0xffffffff
c001adaa:	74 10                	je     c001adbc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001adac:	83 c2 32             	add    edx,0x32
c001adaf:	31 c0                	xor    eax,eax
c001adb1:	01 d2                	add    edx,edx
c001adb3:	89 16                	mov    DWORD PTR [esi],edx
c001adb5:	eb 05                	jmp    c001adbc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001adb7:	b8 04 00 00 00       	mov    eax,0x4
c001adbc:	5a                   	pop    edx
c001adbd:	5b                   	pop    ebx
c001adbe:	5e                   	pop    esi
c001adbf:	c3                   	ret    

c001adc0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001adc0:	53                   	push   ebx
c001adc1:	83 ec 08             	sub    esp,0x8
c001adc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adcc:	85 c0                	test   eax,eax
c001adce:	74 2d                	je     c001adfd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001add0:	85 db                	test   ebx,ebx
c001add2:	74 29                	je     c001adfd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001add4:	b9 02 00 00 00       	mov    ecx,0x2
c001add9:	52                   	push   edx
c001adda:	99                   	cdq    
c001addb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001addf:	f7 f9                	idiv   ecx
c001ade1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ade5:	83 e8 32             	sub    eax,0x32
c001ade8:	50                   	push   eax
c001ade9:	e8 af b9 fe ff       	call   c000679d <iso_read>
c001adee:	83 c4 10             	add    esp,0x10
c001adf1:	89 03                	mov    DWORD PTR [ebx],eax
c001adf3:	09 d0                	or     eax,edx
c001adf5:	0f 94 c0             	sete   al
c001adf8:	0f b6 c0             	movzx  eax,al
c001adfb:	eb 05                	jmp    c001ae02 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001adfd:	b8 04 00 00 00       	mov    eax,0x4
c001ae02:	83 c4 08             	add    esp,0x8
c001ae05:	5b                   	pop    ebx
c001ae06:	c3                   	ret    
c001ae07:	90                   	nop

c001ae08 <ISO9660::seek(void*, unsigned long long)>:
c001ae08:	57                   	push   edi
c001ae09:	56                   	push   esi
c001ae0a:	b8 04 00 00 00       	mov    eax,0x4
c001ae0f:	51                   	push   ecx
c001ae10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae14:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ae18:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae1c:	85 d2                	test   edx,edx
c001ae1e:	74 26                	je     c001ae46 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ae20:	6a 00                	push   0x0
c001ae22:	b9 02 00 00 00       	mov    ecx,0x2
c001ae27:	57                   	push   edi
c001ae28:	89 d0                	mov    eax,edx
c001ae2a:	56                   	push   esi
c001ae2b:	99                   	cdq    
c001ae2c:	f7 f9                	idiv   ecx
c001ae2e:	83 e8 32             	sub    eax,0x32
c001ae31:	50                   	push   eax
c001ae32:	e8 7c ba fe ff       	call   c00068b3 <iso_seek>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	31 f0                	xor    eax,esi
c001ae3c:	31 fa                	xor    edx,edi
c001ae3e:	09 d0                	or     eax,edx
c001ae40:	0f 95 c0             	setne  al
c001ae43:	0f b6 c0             	movzx  eax,al
c001ae46:	5a                   	pop    edx
c001ae47:	5e                   	pop    esi
c001ae48:	5f                   	pop    edi
c001ae49:	c3                   	ret    

c001ae4a <ISO9660::tell(void*, unsigned long long*)>:
c001ae4a:	53                   	push   ebx
c001ae4b:	83 ec 08             	sub    esp,0x8
c001ae4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae56:	85 c0                	test   eax,eax
c001ae58:	74 24                	je     c001ae7e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae5a:	85 db                	test   ebx,ebx
c001ae5c:	74 20                	je     c001ae7e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae5e:	83 ec 0c             	sub    esp,0xc
c001ae61:	b9 02 00 00 00       	mov    ecx,0x2
c001ae66:	99                   	cdq    
c001ae67:	f7 f9                	idiv   ecx
c001ae69:	83 e8 32             	sub    eax,0x32
c001ae6c:	50                   	push   eax
c001ae6d:	e8 c5 ba fe ff       	call   c0006937 <iso_tell>
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	89 03                	mov    DWORD PTR [ebx],eax
c001ae77:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ae7a:	31 c0                	xor    eax,eax
c001ae7c:	eb 05                	jmp    c001ae83 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ae7e:	b8 04 00 00 00       	mov    eax,0x4
c001ae83:	83 c4 08             	add    esp,0x8
c001ae86:	5b                   	pop    ebx
c001ae87:	c3                   	ret    

c001ae88 <ISO9660::stat(void*, unsigned long long*)>:
c001ae88:	53                   	push   ebx
c001ae89:	83 ec 14             	sub    esp,0x14
c001ae8c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae90:	68 65 35 02 c0       	push   0xc0023565
c001ae95:	e8 ca c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aea2:	74 2c                	je     c001aed0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001aea4:	85 db                	test   ebx,ebx
c001aea6:	74 28                	je     c001aed0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001aea8:	83 ec 0c             	sub    esp,0xc
c001aeab:	b9 02 00 00 00       	mov    ecx,0x2
c001aeb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aeb4:	99                   	cdq    
c001aeb5:	f7 f9                	idiv   ecx
c001aeb7:	83 e8 32             	sub    eax,0x32
c001aeba:	50                   	push   eax
c001aebb:	e8 a8 ba fe ff       	call   c0006968 <iso_total>
c001aec0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aec7:	89 03                	mov    DWORD PTR [ebx],eax
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	31 c0                	xor    eax,eax
c001aece:	eb 05                	jmp    c001aed5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001aed0:	b8 04 00 00 00       	mov    eax,0x4
c001aed5:	83 c4 08             	add    esp,0x8
c001aed8:	5b                   	pop    ebx
c001aed9:	c3                   	ret    

c001aeda <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001aeda:	55                   	push   ebp
c001aedb:	57                   	push   edi
c001aedc:	56                   	push   esi
c001aedd:	53                   	push   ebx
c001aede:	83 ec 18             	sub    esp,0x18
c001aee1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aee5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001aee9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aeed:	68 6d 35 02 c0       	push   0xc002356d
c001aef2:	e8 6d c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	85 ff                	test   edi,edi
c001aefc:	0f 94 c0             	sete   al
c001aeff:	85 f6                	test   esi,esi
c001af01:	0f 94 c2             	sete   dl
c001af04:	09 d0                	or     eax,edx
c001af06:	a8 01                	test   al,0x1
c001af08:	0f 85 dd 00 00 00    	jne    c001afeb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af0e:	85 db                	test   ebx,ebx
c001af10:	0f 84 d5 00 00 00    	je     c001afeb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af16:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af19:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001af1f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af26:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af2d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001af2f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001af35:	74 1b                	je     c001af52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001af37:	85 c0                	test   eax,eax
c001af39:	74 10                	je     c001af4b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001af3b:	83 ec 0c             	sub    esp,0xc
c001af3e:	68 11 35 02 c0       	push   0xc0023511
c001af43:	e8 7a 3d ff ff       	call   c000ecc2 <KePanic(char const*)>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	8a 03                	mov    al,BYTE PTR [ebx]
c001af4d:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001af52:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af55:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af5c:	85 c0                	test   eax,eax
c001af5e:	74 09                	je     c001af69 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001af60:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001af67:	74 51                	je     c001afba <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001af69:	83 ec 0c             	sub    esp,0xc
c001af6c:	68 75 35 02 c0       	push   0xc0023575
c001af71:	e8 ee bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af79:	83 c4 10             	add    esp,0x10
c001af7c:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001af84:	74 21                	je     c001afa7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001af86:	83 ec 0c             	sub    esp,0xc
c001af89:	68 95 35 02 c0       	push   0xc0023595
c001af8e:	e8 d1 bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af93:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001afa0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001afa7:	83 ec 0c             	sub    esp,0xc
c001afaa:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afb1:	50                   	push   eax
c001afb2:	e8 77 bc fe ff       	call   c0006c2e <init_percd>
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	83 c3 03             	add    ebx,0x3
c001afbd:	52                   	push   edx
c001afbe:	52                   	push   edx
c001afbf:	6a 00                	push   0x0
c001afc1:	53                   	push   ebx
c001afc2:	e8 2e b7 fe ff       	call   c00066f5 <iso_open>
c001afc7:	83 c4 10             	add    esp,0x10
c001afca:	89 c5                	mov    ebp,eax
c001afcc:	83 f8 ff             	cmp    eax,0xffffffff
c001afcf:	75 21                	jne    c001aff2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001afd1:	50                   	push   eax
c001afd2:	50                   	push   eax
c001afd3:	6a 01                	push   0x1
c001afd5:	53                   	push   ebx
c001afd6:	e8 1a b7 fe ff       	call   c00066f5 <iso_open>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	ba 02 00 00 00       	mov    edx,0x2
c001afe3:	40                   	inc    eax
c001afe4:	74 2b                	je     c001b011 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001afe6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001afe9:	eb 24                	jmp    c001b00f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001afeb:	ba 04 00 00 00       	mov    edx,0x4
c001aff0:	eb 1f                	jmp    c001b011 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	50                   	push   eax
c001aff6:	e8 6d b9 fe ff       	call   c0006968 <iso_total>
c001affb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b002:	89 07                	mov    DWORD PTR [edi],eax
c001b004:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b007:	e8 73 b7 fe ff       	call   c000677f <iso_close>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	31 d2                	xor    edx,edx
c001b011:	83 c4 0c             	add    esp,0xc
c001b014:	89 d0                	mov    eax,edx
c001b016:	5b                   	pop    ebx
c001b017:	5e                   	pop    esi
c001b018:	5f                   	pop    edi
c001b019:	5d                   	pop    ebp
c001b01a:	c3                   	ret    
c001b01b:	90                   	nop

c001b01c <ISO9660::close(void*)>:
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	b8 04 00 00 00       	mov    eax,0x4
c001b024:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b028:	85 d2                	test   edx,edx
c001b02a:	74 1b                	je     c001b047 <ISO9660::close(void*)+0x2b>
c001b02c:	83 ec 0c             	sub    esp,0xc
c001b02f:	b9 02 00 00 00       	mov    ecx,0x2
c001b034:	89 d0                	mov    eax,edx
c001b036:	99                   	cdq    
c001b037:	f7 f9                	idiv   ecx
c001b039:	83 e8 32             	sub    eax,0x32
c001b03c:	50                   	push   eax
c001b03d:	e8 3d b7 fe ff       	call   c000677f <iso_close>
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	31 c0                	xor    eax,eax
c001b047:	83 c4 0c             	add    esp,0xc
c001b04a:	c3                   	ret    
c001b04b:	90                   	nop

c001b04c <ISO9660::openDir(char const*, void**)>:
c001b04c:	56                   	push   esi
c001b04d:	53                   	push   ebx
c001b04e:	50                   	push   eax
c001b04f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b053:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b057:	85 db                	test   ebx,ebx
c001b059:	0f 84 bd 00 00 00    	je     c001b11c <ISO9660::openDir(char const*, void**)+0xd0>
c001b05f:	85 f6                	test   esi,esi
c001b061:	0f 84 b5 00 00 00    	je     c001b11c <ISO9660::openDir(char const*, void**)+0xd0>
c001b067:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b069:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b070:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001b076:	74 1b                	je     c001b093 <ISO9660::openDir(char const*, void**)+0x47>
c001b078:	85 c0                	test   eax,eax
c001b07a:	74 10                	je     c001b08c <ISO9660::openDir(char const*, void**)+0x40>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	68 11 35 02 c0       	push   0xc0023511
c001b084:	e8 39 3c ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	8a 03                	mov    al,BYTE PTR [ebx]
c001b08e:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001b093:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b096:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b09d:	85 c0                	test   eax,eax
c001b09f:	74 10                	je     c001b0b1 <ISO9660::openDir(char const*, void**)+0x65>
c001b0a1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b0a8:	74 1a                	je     c001b0c4 <ISO9660::openDir(char const*, void**)+0x78>
c001b0aa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b0b1:	83 ec 0c             	sub    esp,0xc
c001b0b4:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b0bb:	50                   	push   eax
c001b0bc:	e8 6d bb fe ff       	call   c0006c2e <init_percd>
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	83 c3 03             	add    ebx,0x3
c001b0c7:	50                   	push   eax
c001b0c8:	50                   	push   eax
c001b0c9:	6a 01                	push   0x1
c001b0cb:	53                   	push   ebx
c001b0cc:	e8 24 b6 fe ff       	call   c00066f5 <iso_open>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	89 c3                	mov    ebx,eax
c001b0d6:	83 f8 ff             	cmp    eax,0xffffffff
c001b0d9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0de:	75 1c                	jne    c001b0fc <ISO9660::openDir(char const*, void**)+0xb0>
c001b0e0:	53                   	push   ebx
c001b0e1:	53                   	push   ebx
c001b0e2:	68 b9 35 02 c0       	push   0xc00235b9
c001b0e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0ed:	e8 64 63 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	b8 01 00 00 00       	mov    eax,0x1
c001b0fa:	eb 25                	jmp    c001b121 <ISO9660::openDir(char const*, void**)+0xd5>
c001b0fc:	01 db                	add    ebx,ebx
c001b0fe:	51                   	push   ecx
c001b0ff:	83 c3 65             	add    ebx,0x65
c001b102:	51                   	push   ecx
c001b103:	68 cc 35 02 c0       	push   0xc00235cc
c001b108:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b10e:	e8 43 63 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001b113:	89 1e                	mov    DWORD PTR [esi],ebx
c001b115:	83 c4 10             	add    esp,0x10
c001b118:	31 c0                	xor    eax,eax
c001b11a:	eb 05                	jmp    c001b121 <ISO9660::openDir(char const*, void**)+0xd5>
c001b11c:	b8 04 00 00 00       	mov    eax,0x4
c001b121:	5a                   	pop    edx
c001b122:	5b                   	pop    ebx
c001b123:	5e                   	pop    esi
c001b124:	c3                   	ret    
c001b125:	90                   	nop

c001b126 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b126:	55                   	push   ebp
c001b127:	57                   	push   edi
c001b128:	56                   	push   esi
c001b129:	53                   	push   ebx
c001b12a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b130:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b137:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b13e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b146:	0f 84 e7 00 00 00    	je     c001b233 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b14c:	85 db                	test   ebx,ebx
c001b14e:	0f 84 df 00 00 00    	je     c001b233 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	68 df 35 02 c0       	push   0xc00235df
c001b15c:	e8 03 be fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b161:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b168:	b9 02 00 00 00       	mov    ecx,0x2
c001b16d:	99                   	cdq    
c001b16e:	f7 f9                	idiv   ecx
c001b170:	83 e8 32             	sub    eax,0x32
c001b173:	89 04 24             	mov    DWORD PTR [esp],eax
c001b176:	e8 3f b8 fe ff       	call   c00069ba <iso_readdir>
c001b17b:	83 c4 10             	add    esp,0x10
c001b17e:	89 c6                	mov    esi,eax
c001b180:	85 c0                	test   eax,eax
c001b182:	75 37                	jne    c001b1bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b184:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b189:	56                   	push   esi
c001b18a:	56                   	push   esi
c001b18b:	68 ea 35 02 c0       	push   0xc00235ea
c001b190:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b196:	e8 bb 62 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001b19b:	83 c4 0c             	add    esp,0xc
c001b19e:	68 10 01 00 00       	push   0x110
c001b1a3:	6a 00                	push   0x0
c001b1a5:	57                   	push   edi
c001b1a6:	e8 45 53 fe ff       	call   c00004f0 <memset>
c001b1ab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b1b1:	83 c4 10             	add    esp,0x10
c001b1b4:	b8 01 00 00 00       	mov    eax,0x1
c001b1b9:	eb 7d                	jmp    c001b238 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b1bb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b1c1:	8d 68 08             	lea    ebp,[eax+0x8]
c001b1c4:	83 ec 0c             	sub    esp,0xc
c001b1c7:	55                   	push   ebp
c001b1c8:	e8 a3 53 fe ff       	call   c0000570 <strlen>
c001b1cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b1d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b1e0:	75 0a                	jne    c001b1ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b1e2:	b8 02 00 00 00       	mov    eax,0x2
c001b1e7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b1ea:	74 05                	je     c001b1f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b1ec:	b8 01 00 00 00       	mov    eax,0x1
c001b1f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1f5:	50                   	push   eax
c001b1f6:	50                   	push   eax
c001b1f7:	55                   	push   ebp
c001b1f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b200:	50                   	push   eax
c001b201:	e8 3a 54 fe ff       	call   c0000640 <strcpy>
c001b206:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b20d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b20f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b215:	5a                   	pop    edx
c001b216:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b21b:	59                   	pop    ecx
c001b21c:	68 fd 35 02 c0       	push   0xc00235fd
c001b221:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b227:	e8 2a 62 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	31 c0                	xor    eax,eax
c001b231:	eb 05                	jmp    c001b238 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b233:	b8 04 00 00 00       	mov    eax,0x4
c001b238:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b23e:	5b                   	pop    ebx
c001b23f:	5e                   	pop    esi
c001b240:	5f                   	pop    edi
c001b241:	5d                   	pop    ebp
c001b242:	c3                   	ret    

c001b243 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b243:	57                   	push   edi
c001b244:	56                   	push   esi
c001b245:	53                   	push   ebx
c001b246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b24a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b24e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b252:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b258:	0f be cb             	movsx  ecx,bl
c001b25b:	75 0b                	jne    c001b268 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b25d:	0f be 05 a4 48 02 c0 	movsx  eax,BYTE PTR ds:0xc00248a4
c001b264:	39 c8                	cmp    eax,ecx
c001b266:	74 47                	je     c001b2af <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	31 d2                	xor    edx,edx
c001b26d:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b272:	6a 01                	push   0x1
c001b274:	52                   	push   edx
c001b275:	56                   	push   esi
c001b276:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b27d:	e8 4a ee fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001b282:	83 c4 20             	add    esp,0x20
c001b285:	85 c0                	test   eax,eax
c001b287:	75 0e                	jne    c001b297 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b289:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b28f:	88 1d a4 48 02 c0    	mov    BYTE PTR ds:0xc00248a4,bl
c001b295:	eb 18                	jmp    c001b2af <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b297:	50                   	push   eax
c001b298:	68 00 08 00 00       	push   0x800
c001b29d:	6a 00                	push   0x0
c001b29f:	57                   	push   edi
c001b2a0:	e8 4b 52 fe ff       	call   c00004f0 <memset>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	b8 01 00 00 00       	mov    eax,0x1
c001b2ad:	eb 0e                	jmp    c001b2bd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b2af:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b2b4:	b9 00 08 00 00       	mov    ecx,0x800
c001b2b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2bb:	31 c0                	xor    eax,eax
c001b2bd:	5b                   	pop    ebx
c001b2be:	5e                   	pop    esi
c001b2bf:	5f                   	pop    edi
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b2c2:	53                   	push   ebx
c001b2c3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b2c9:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b2d3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b2da:	8d 58 41             	lea    ebx,[eax+0x41]
c001b2dd:	0f be db             	movsx  ebx,bl
c001b2e0:	53                   	push   ebx
c001b2e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2e5:	50                   	push   eax
c001b2e6:	6a 10                	push   0x10
c001b2e8:	e8 56 ff ff ff       	call   c001b243 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2ed:	83 c4 10             	add    esp,0x10
c001b2f0:	31 d2                	xor    edx,edx
c001b2f2:	85 c0                	test   eax,eax
c001b2f4:	75 33                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2f6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b2fb:	75 2c                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2fd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b302:	75 25                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b304:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b309:	75 1e                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b30b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b310:	75 17                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b312:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b317:	75 10                	jne    c001b329 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	53                   	push   ebx
c001b31d:	e8 0c b9 fe ff       	call   c0006c2e <init_percd>
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	40                   	inc    eax
c001b326:	0f 95 c2             	setne  dl
c001b329:	88 d0                	mov    al,dl
c001b32b:	81 c4 08 08 00 00    	add    esp,0x808
c001b331:	5b                   	pop    ebx
c001b332:	c3                   	ret    
c001b333:	90                   	nop

c001b334 <ISO9660::ISO9660()>:
c001b334:	83 ec 0c             	sub    esp,0xc
c001b337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	50                   	push   eax
c001b33f:	e8 2c ca fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	ba 18 36 02 c0       	mov    edx,0xc0023618
c001b34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b350:	89 10                	mov    DWORD PTR [eax],edx
c001b352:	e8 e9 b9 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b357:	90                   	nop
c001b358:	83 c4 0c             	add    esp,0xc
c001b35b:	c3                   	ret    

c001b35c <SoundCard::beginPlayback()>:
c001b35c:	c7 44 24 04 7c 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002367c
c001b364:	e9 59 39 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001b369:	90                   	nop

c001b36a <SoundCard::stopPlayback()>:
c001b36a:	c7 44 24 04 7c 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002367c
c001b372:	e9 4b 39 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001b377:	90                   	nop

c001b378 <SoundCard::SoundCard(char const*)>:
c001b378:	83 ec 1c             	sub    esp,0x1c
c001b37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b37f:	83 ec 08             	sub    esp,0x8
c001b382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b386:	50                   	push   eax
c001b387:	e8 18 de fe ff       	call   c00091a4 <Device::Device(char const*)>
c001b38c:	83 c4 10             	add    esp,0x10
c001b38f:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001b394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b398:	89 10                	mov    DWORD PTR [eax],edx
c001b39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b39e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b3b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b3c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3c5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3d3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b3dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3e5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b3ea:	7f 1a                	jg     c001b406 <SoundCard::SoundCard(char const*)+0x8e>
c001b3ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3f4:	83 c2 54             	add    edx,0x54
c001b3f7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b3ff:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b404:	eb df                	jmp    c001b3e5 <SoundCard::SoundCard(char const*)+0x6d>
c001b406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b40a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b411:	90                   	nop
c001b412:	83 c4 1c             	add    esp,0x1c
c001b415:	c3                   	ret    

c001b416 <SoundCard::~SoundCard()>:
c001b416:	83 ec 0c             	sub    esp,0xc
c001b419:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b422:	89 10                	mov    DWORD PTR [eax],edx
c001b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	50                   	push   eax
c001b42c:	e8 13 db fe ff       	call   c0008f44 <Device::~Device()>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	90                   	nop
c001b435:	83 c4 0c             	add    esp,0xc
c001b438:	c3                   	ret    
c001b439:	90                   	nop

c001b43a <SoundCard::~SoundCard()>:
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	83 ec 0c             	sub    esp,0xc
c001b440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b444:	e8 cd ff ff ff       	call   c001b416 <SoundCard::~SoundCard()>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	83 ec 08             	sub    esp,0x8
c001b44f:	68 e8 01 00 00       	push   0x1e8
c001b454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b458:	e8 a3 12 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	83 c4 0c             	add    esp,0xc
c001b463:	c3                   	ret    

c001b464 <SoundCard::configureRates(int, int, int)>:
c001b464:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b468:	31 c0                	xor    eax,eax
c001b46a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b471:	75 20                	jne    c001b493 <SoundCard::configureRates(int, int, int)+0x2f>
c001b473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b477:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b481:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b48b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b491:	b0 01                	mov    al,0x1
c001b493:	c3                   	ret    

c001b494 <SoundCard::getSamples16(int, short*)>:
c001b494:	55                   	push   ebp
c001b495:	57                   	push   edi
c001b496:	31 ff                	xor    edi,edi
c001b498:	56                   	push   esi
c001b499:	53                   	push   ebx
c001b49a:	31 db                	xor    ebx,ebx
c001b49c:	83 ec 10             	sub    esp,0x10
c001b49f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b4a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b4a7:	8d 04 36             	lea    eax,[esi+esi*1]
c001b4aa:	50                   	push   eax
c001b4ab:	6a 00                	push   0x0
c001b4ad:	55                   	push   ebp
c001b4ae:	e8 3d 50 fe ff       	call   c00004f0 <memset>
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ba:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b4c1:	85 c0                	test   eax,eax
c001b4c3:	74 1b                	je     c001b4e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4c5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b4c9:	75 15                	jne    c001b4e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4cf:	55                   	push   ebp
c001b4d0:	56                   	push   esi
c001b4d1:	50                   	push   eax
c001b4d2:	e8 8d 03 00 00       	call   c001b864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b4d7:	83 c4 10             	add    esp,0x10
c001b4da:	39 c7                	cmp    edi,eax
c001b4dc:	7d 02                	jge    c001b4e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4de:	89 c7                	mov    edi,eax
c001b4e0:	43                   	inc    ebx
c001b4e1:	83 fb 20             	cmp    ebx,0x20
c001b4e4:	75 d0                	jne    c001b4b6 <SoundCard::getSamples16(int, short*)+0x22>
c001b4e6:	83 c4 0c             	add    esp,0xc
c001b4e9:	89 f8                	mov    eax,edi
c001b4eb:	5b                   	pop    ebx
c001b4ec:	5e                   	pop    esi
c001b4ed:	5f                   	pop    edi
c001b4ee:	5d                   	pop    ebp
c001b4ef:	c3                   	ret    

c001b4f0 <SoundCard::getSamples32(int, int*)>:
c001b4f0:	55                   	push   ebp
c001b4f1:	57                   	push   edi
c001b4f2:	31 ff                	xor    edi,edi
c001b4f4:	56                   	push   esi
c001b4f5:	31 f6                	xor    esi,esi
c001b4f7:	53                   	push   ebx
c001b4f8:	83 ec 10             	sub    esp,0x10
c001b4fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b503:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b507:	c1 e0 02             	shl    eax,0x2
c001b50a:	50                   	push   eax
c001b50b:	6a 00                	push   0x0
c001b50d:	55                   	push   ebp
c001b50e:	e8 dd 4f fe ff       	call   c00004f0 <memset>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b51d:	85 c0                	test   eax,eax
c001b51f:	74 1b                	je     c001b53c <SoundCard::getSamples32(int, int*)+0x4c>
c001b521:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b525:	75 15                	jne    c001b53c <SoundCard::getSamples32(int, int*)+0x4c>
c001b527:	53                   	push   ebx
c001b528:	55                   	push   ebp
c001b529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b52d:	50                   	push   eax
c001b52e:	e8 fd 03 00 00       	call   c001b930 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	39 c6                	cmp    esi,eax
c001b538:	7d 02                	jge    c001b53c <SoundCard::getSamples32(int, int*)+0x4c>
c001b53a:	89 c6                	mov    esi,eax
c001b53c:	47                   	inc    edi
c001b53d:	83 ff 20             	cmp    edi,0x20
c001b540:	75 d4                	jne    c001b516 <SoundCard::getSamples32(int, int*)+0x26>
c001b542:	85 f6                	test   esi,esi
c001b544:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b54b:	75 0f                	jne    c001b55c <SoundCard::getSamples32(int, int*)+0x6c>
c001b54d:	85 c0                	test   eax,eax
c001b54f:	74 1b                	je     c001b56c <SoundCard::getSamples32(int, int*)+0x7c>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b556:	53                   	push   ebx
c001b557:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b55a:	eb 0d                	jmp    c001b569 <SoundCard::getSamples32(int, int*)+0x79>
c001b55c:	85 c0                	test   eax,eax
c001b55e:	75 0c                	jne    c001b56c <SoundCard::getSamples32(int, int*)+0x7c>
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b565:	53                   	push   ebx
c001b566:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b569:	83 c4 10             	add    esp,0x10
c001b56c:	83 c4 0c             	add    esp,0xc
c001b56f:	89 f0                	mov    eax,esi
c001b571:	5b                   	pop    ebx
c001b572:	5e                   	pop    esi
c001b573:	5f                   	pop    edi
c001b574:	5d                   	pop    ebp
c001b575:	c3                   	ret    

c001b576 <SoundCard::addChannel(SoundPort*)>:
c001b576:	83 ec 0c             	sub    esp,0xc
c001b579:	31 c0                	xor    eax,eax
c001b57b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b57f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b587:	74 1b                	je     c001b5a4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b589:	40                   	inc    eax
c001b58a:	83 f8 20             	cmp    eax,0x20
c001b58d:	75 f0                	jne    c001b57f <SoundCard::addChannel(SoundPort*)+0x9>
c001b58f:	83 ec 0c             	sub    esp,0xc
c001b592:	68 a1 36 02 c0       	push   0xc00236a1
c001b597:	e8 26 37 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b59c:	83 c4 10             	add    esp,0x10
c001b59f:	83 c8 ff             	or     eax,0xffffffff
c001b5a2:	eb 0b                	jmp    c001b5af <SoundCard::addChannel(SoundPort*)+0x39>
c001b5a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b5a8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b5af:	83 c4 0c             	add    esp,0xc
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <SoundCard::removeChannel(int)>:
c001b5b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b5bc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b5c7:	c3                   	ret    

c001b5c8 <SoundPort::SoundPort(int, int, int, int)>:
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5e6:	89 10                	mov    DWORD PTR [eax],edx
c001b5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b5f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b5fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b603:	75 13                	jne    c001b618 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b609:	8b 00                	mov    eax,DWORD PTR [eax]
c001b60b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b610:	01 c0                	add    eax,eax
c001b612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b616:	66 90                	xchg   ax,ax
c001b618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b620:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b627:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b632:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b635:	c1 e0 02             	shl    eax,0x2
c001b638:	83 ec 0c             	sub    esp,0xc
c001b63b:	50                   	push   eax
c001b63c:	e8 3a 33 ff ff       	call   c000e97b <malloc>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	89 c2                	mov    edx,eax
c001b646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b64d:	90                   	nop
c001b64e:	83 c4 0c             	add    esp,0xc
c001b651:	c3                   	ret    
c001b652:	66 90                	xchg   ax,ax

c001b654 <SoundPort::~SoundPort()>:
c001b654:	83 ec 0c             	sub    esp,0xc
c001b657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b65e:	85 c0                	test   eax,eax
c001b660:	74 1e                	je     c001b680 <SoundPort::~SoundPort()+0x2c>
c001b662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b666:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	50                   	push   eax
c001b66d:	e8 19 33 ff ff       	call   c000e98b <free>
c001b672:	83 c4 10             	add    esp,0x10
c001b675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b679:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b680:	90                   	nop
c001b681:	83 c4 0c             	add    esp,0xc
c001b684:	c3                   	ret    
c001b685:	90                   	nop
c001b686:	66 90                	xchg   ax,ax

c001b688 <SoundPort::unpause()>:
c001b688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b68c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b690:	c3                   	ret    
c001b691:	90                   	nop
c001b692:	66 90                	xchg   ax,ax

c001b694 <SoundPort::pause()>:
c001b694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b698:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b69c:	c3                   	ret    
c001b69d:	90                   	nop
c001b69e:	66 90                	xchg   ax,ax

c001b6a0 <SoundPort::getBufferUsed()>:
c001b6a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b6a7:	c3                   	ret    

c001b6a8 <SoundPort::getBufferSize()>:
c001b6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b6af:	c3                   	ret    

c001b6b0 <SoundPort::buffer8(signed char*, int)>:
c001b6b0:	55                   	push   ebp
c001b6b1:	57                   	push   edi
c001b6b2:	56                   	push   esi
c001b6b3:	53                   	push   ebx
c001b6b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b6bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b6bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b6c2:	74 70                	je     c001b734 <SoundPort::buffer8(signed char*, int)+0x84>
c001b6c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6c8:	85 c9                	test   ecx,ecx
c001b6ca:	7e 68                	jle    c001b734 <SoundPort::buffer8(signed char*, int)+0x84>
c001b6cc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001b6d0:	8d 48 01             	lea    ecx,[eax+0x1]
c001b6d3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b6d9:	89 f1                	mov    ecx,esi
c001b6db:	c1 e1 18             	shl    ecx,0x18
c001b6de:	29 f1                	sub    ecx,esi
c001b6e0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b6e3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6e6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6e9:	74 51                	je     c001b73c <SoundPort::buffer8(signed char*, int)+0x8c>
c001b6eb:	31 ff                	xor    edi,edi
c001b6ed:	eb 25                	jmp    c001b714 <SoundPort::buffer8(signed char*, int)+0x64>
c001b6ef:	90                   	nop
c001b6f0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001b6f5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b6f8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b6fb:	89 f3                	mov    ebx,esi
c001b6fd:	c1 e3 18             	shl    ebx,0x18
c001b700:	29 f3                	sub    ebx,esi
c001b702:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b705:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b708:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b70b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b70e:	74 1c                	je     c001b72c <SoundPort::buffer8(signed char*, int)+0x7c>
c001b710:	89 c7                	mov    edi,eax
c001b712:	66 90                	xchg   ax,ax
c001b714:	8d 47 01             	lea    eax,[edi+0x1]
c001b717:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b71b:	75 d3                	jne    c001b6f0 <SoundPort::buffer8(signed char*, int)+0x40>
c001b71d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b721:	8d 76 00             	lea    esi,[esi+0x0]
c001b724:	5b                   	pop    ebx
c001b725:	5e                   	pop    esi
c001b726:	5f                   	pop    edi
c001b727:	5d                   	pop    ebp
c001b728:	c3                   	ret    
c001b729:	8d 76 00             	lea    esi,[esi+0x0]
c001b72c:	5b                   	pop    ebx
c001b72d:	8d 47 02             	lea    eax,[edi+0x2]
c001b730:	5e                   	pop    esi
c001b731:	5f                   	pop    edi
c001b732:	5d                   	pop    ebp
c001b733:	c3                   	ret    
c001b734:	5b                   	pop    ebx
c001b735:	31 c0                	xor    eax,eax
c001b737:	5e                   	pop    esi
c001b738:	5f                   	pop    edi
c001b739:	5d                   	pop    ebp
c001b73a:	c3                   	ret    
c001b73b:	90                   	nop
c001b73c:	b8 01 00 00 00       	mov    eax,0x1
c001b741:	eb e1                	jmp    c001b724 <SoundPort::buffer8(signed char*, int)+0x74>
c001b743:	90                   	nop

c001b744 <SoundPort::buffer16(short*, int)>:
c001b744:	55                   	push   ebp
c001b745:	57                   	push   edi
c001b746:	56                   	push   esi
c001b747:	53                   	push   ebx
c001b748:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b74c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b750:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b753:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b756:	74 70                	je     c001b7c8 <SoundPort::buffer16(short*, int)+0x84>
c001b758:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b75c:	85 c9                	test   ecx,ecx
c001b75e:	7e 68                	jle    c001b7c8 <SoundPort::buffer16(short*, int)+0x84>
c001b760:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001b764:	8d 48 01             	lea    ecx,[eax+0x1]
c001b767:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b76a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b76d:	89 f1                	mov    ecx,esi
c001b76f:	c1 e1 10             	shl    ecx,0x10
c001b772:	29 f1                	sub    ecx,esi
c001b774:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b777:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b77a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b77d:	74 51                	je     c001b7d0 <SoundPort::buffer16(short*, int)+0x8c>
c001b77f:	31 ff                	xor    edi,edi
c001b781:	eb 25                	jmp    c001b7a8 <SoundPort::buffer16(short*, int)+0x64>
c001b783:	90                   	nop
c001b784:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001b789:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b78c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b78f:	89 f3                	mov    ebx,esi
c001b791:	c1 e3 10             	shl    ebx,0x10
c001b794:	29 f3                	sub    ebx,esi
c001b796:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b799:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b79c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b79f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b7a2:	74 1c                	je     c001b7c0 <SoundPort::buffer16(short*, int)+0x7c>
c001b7a4:	89 c7                	mov    edi,eax
c001b7a6:	66 90                	xchg   ax,ax
c001b7a8:	8d 47 01             	lea    eax,[edi+0x1]
c001b7ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b7af:	75 d3                	jne    c001b784 <SoundPort::buffer16(short*, int)+0x40>
c001b7b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	5b                   	pop    ebx
c001b7b9:	5e                   	pop    esi
c001b7ba:	5f                   	pop    edi
c001b7bb:	5d                   	pop    ebp
c001b7bc:	c3                   	ret    
c001b7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c0:	5b                   	pop    ebx
c001b7c1:	8d 47 02             	lea    eax,[edi+0x2]
c001b7c4:	5e                   	pop    esi
c001b7c5:	5f                   	pop    edi
c001b7c6:	5d                   	pop    ebp
c001b7c7:	c3                   	ret    
c001b7c8:	5b                   	pop    ebx
c001b7c9:	31 c0                	xor    eax,eax
c001b7cb:	5e                   	pop    esi
c001b7cc:	5f                   	pop    edi
c001b7cd:	5d                   	pop    ebp
c001b7ce:	c3                   	ret    
c001b7cf:	90                   	nop
c001b7d0:	b8 01 00 00 00       	mov    eax,0x1
c001b7d5:	eb e1                	jmp    c001b7b8 <SoundPort::buffer16(short*, int)+0x74>
c001b7d7:	90                   	nop

c001b7d8 <SoundPort::buffer32(int*, int)>:
c001b7d8:	55                   	push   ebp
c001b7d9:	57                   	push   edi
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	83 ec 04             	sub    esp,0x4
c001b7df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b7ea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b7ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7f1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b7f4:	74 5a                	je     c001b850 <SoundPort::buffer32(int*, int)+0x78>
c001b7f6:	85 c0                	test   eax,eax
c001b7f8:	7e 56                	jle    c001b850 <SoundPort::buffer32(int*, int)+0x78>
c001b7fa:	8d 71 01             	lea    esi,[ecx+0x1]
c001b7fd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b800:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b803:	8b 37                	mov    esi,DWORD PTR [edi]
c001b805:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b808:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b80b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b80e:	74 4c                	je     c001b85c <SoundPort::buffer32(int*, int)+0x84>
c001b810:	31 f6                	xor    esi,esi
c001b812:	eb 1c                	jmp    c001b830 <SoundPort::buffer32(int*, int)+0x58>
c001b814:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b817:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b81a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b81d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b820:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b824:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b827:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b82a:	74 18                	je     c001b844 <SoundPort::buffer32(int*, int)+0x6c>
c001b82c:	89 de                	mov    esi,ebx
c001b82e:	66 90                	xchg   ax,ax
c001b830:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b833:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b836:	75 dc                	jne    c001b814 <SoundPort::buffer32(int*, int)+0x3c>
c001b838:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b83b:	90                   	nop
c001b83c:	83 c4 04             	add    esp,0x4
c001b83f:	5b                   	pop    ebx
c001b840:	5e                   	pop    esi
c001b841:	5f                   	pop    edi
c001b842:	5d                   	pop    ebp
c001b843:	c3                   	ret    
c001b844:	83 c4 04             	add    esp,0x4
c001b847:	8d 46 02             	lea    eax,[esi+0x2]
c001b84a:	5b                   	pop    ebx
c001b84b:	5e                   	pop    esi
c001b84c:	5f                   	pop    edi
c001b84d:	5d                   	pop    ebp
c001b84e:	c3                   	ret    
c001b84f:	90                   	nop
c001b850:	83 c4 04             	add    esp,0x4
c001b853:	31 c0                	xor    eax,eax
c001b855:	5b                   	pop    ebx
c001b856:	5e                   	pop    esi
c001b857:	5f                   	pop    edi
c001b858:	5d                   	pop    ebp
c001b859:	c3                   	ret    
c001b85a:	66 90                	xchg   ax,ax
c001b85c:	b8 01 00 00 00       	mov    eax,0x1
c001b861:	eb d9                	jmp    c001b83c <SoundPort::buffer32(int*, int)+0x64>
c001b863:	90                   	nop

c001b864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b864:	57                   	push   edi
c001b865:	56                   	push   esi
c001b866:	53                   	push   ebx
c001b867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b86b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b86f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b875:	39 03                	cmp    DWORD PTR [ebx],eax
c001b877:	74 13                	je     c001b88c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	68 f4 36 02 c0       	push   0xc00236f4
c001b881:	e8 3c 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	8d 76 00             	lea    esi,[esi+0x0]
c001b88c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b892:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b895:	74 11                	je     c001b8a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b897:	83 ec 0c             	sub    esp,0xc
c001b89a:	68 33 37 02 c0       	push   0xc0023733
c001b89f:	e8 1e 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b8a4:	83 c4 10             	add    esp,0x10
c001b8a7:	90                   	nop
c001b8a8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b8ae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b8b1:	74 11                	je     c001b8c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b8b3:	83 ec 0c             	sub    esp,0xc
c001b8b6:	68 33 37 02 c0       	push   0xc0023733
c001b8bb:	e8 02 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b8c0:	83 c4 10             	add    esp,0x10
c001b8c3:	90                   	nop
c001b8c4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b8c7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b8cb:	7e 07                	jle    c001b8d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b8cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d4:	85 f6                	test   esi,esi
c001b8d6:	7e 2c                	jle    c001b904 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b8d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8dc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b8df:	31 c9                	xor    ecx,ecx
c001b8e1:	01 d7                	add    edi,edx
c001b8e3:	90                   	nop
c001b8e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b8e7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b8ea:	85 c0                	test   eax,eax
c001b8ec:	79 06                	jns    c001b8f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b8ee:	05 ff 7f 00 00       	add    eax,0x7fff
c001b8f3:	90                   	nop
c001b8f4:	c1 f8 0f             	sar    eax,0xf
c001b8f7:	83 c1 04             	add    ecx,0x4
c001b8fa:	66 01 02             	add    WORD PTR [edx],ax
c001b8fd:	83 c2 02             	add    edx,0x2
c001b900:	39 d7                	cmp    edi,edx
c001b902:	75 e0                	jne    c001b8e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b904:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b907:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b90a:	83 ec 04             	sub    esp,0x4
c001b90d:	29 f0                	sub    eax,esi
c001b90f:	c1 e0 02             	shl    eax,0x2
c001b912:	50                   	push   eax
c001b913:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b916:	50                   	push   eax
c001b917:	52                   	push   edx
c001b918:	e8 b3 4a fe ff       	call   c00003d0 <memmove>
c001b91d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	29 f0                	sub    eax,esi
c001b925:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b928:	89 f0                	mov    eax,esi
c001b92a:	5b                   	pop    ebx
c001b92b:	5e                   	pop    esi
c001b92c:	5f                   	pop    edi
c001b92d:	c3                   	ret    
c001b92e:	66 90                	xchg   ax,ax

c001b930 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b930:	57                   	push   edi
c001b931:	56                   	push   esi
c001b932:	53                   	push   ebx
c001b933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b937:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b93b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b93f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b945:	39 06                	cmp    DWORD PTR [esi],eax
c001b947:	74 13                	je     c001b95c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b949:	83 ec 0c             	sub    esp,0xc
c001b94c:	68 14 37 02 c0       	push   0xc0023714
c001b951:	e8 6c 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b956:	83 c4 10             	add    esp,0x10
c001b959:	8d 76 00             	lea    esi,[esi+0x0]
c001b95c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b962:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b965:	74 11                	je     c001b978 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b967:	83 ec 0c             	sub    esp,0xc
c001b96a:	68 4f 37 02 c0       	push   0xc002374f
c001b96f:	e8 4e 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	90                   	nop
c001b978:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b97e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b981:	74 11                	je     c001b994 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b983:	83 ec 0c             	sub    esp,0xc
c001b986:	68 4f 37 02 c0       	push   0xc002374f
c001b98b:	e8 32 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b990:	83 c4 10             	add    esp,0x10
c001b993:	90                   	nop
c001b994:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b997:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b99b:	7e 07                	jle    c001b9a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b99d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a4:	85 ff                	test   edi,edi
c001b9a6:	7e 1c                	jle    c001b9c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b9a8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b9af:	31 c0                	xor    eax,eax
c001b9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b9b7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b9ba:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b9bd:	83 c0 04             	add    eax,0x4
c001b9c0:	39 c1                	cmp    ecx,eax
c001b9c2:	75 f0                	jne    c001b9b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b9c4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b9c7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b9ca:	83 ec 04             	sub    esp,0x4
c001b9cd:	29 f8                	sub    eax,edi
c001b9cf:	c1 e0 02             	shl    eax,0x2
c001b9d2:	50                   	push   eax
c001b9d3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b9d6:	50                   	push   eax
c001b9d7:	52                   	push   edx
c001b9d8:	e8 f3 49 fe ff       	call   c00003d0 <memmove>
c001b9dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	29 f8                	sub    eax,edi
c001b9e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b9e8:	89 f8                	mov    eax,edi
c001b9ea:	5b                   	pop    ebx
c001b9eb:	5e                   	pop    esi
c001b9ec:	5f                   	pop    edi
c001b9ed:	c3                   	ret    

c001b9ee <PCI::open(int, int, void*)>:
c001b9ee:	83 ec 18             	sub    esp,0x18
c001b9f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b9f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9ff:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba01:	50                   	push   eax
c001ba02:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ba05:	31 c0                	xor    eax,eax
c001ba07:	83 c4 1c             	add    esp,0x1c
c001ba0a:	c3                   	ret    
c001ba0b:	90                   	nop

c001ba0c <PCI::close(int, int, void*)>:
c001ba0c:	31 c0                	xor    eax,eax
c001ba0e:	c3                   	ret    
c001ba0f:	90                   	nop

c001ba10 <PCI::PCI()>:
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba17:	83 ec 08             	sub    esp,0x8
c001ba1a:	68 6b 37 02 c0       	push   0xc002376b
c001ba1f:	50                   	push   eax
c001ba20:	e8 c7 ce fe ff       	call   c00088ec <Bus::Bus(char const*)>
c001ba25:	83 c4 10             	add    esp,0x10
c001ba28:	ba 78 38 02 c0       	mov    edx,0xc0023878
c001ba2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba31:	89 10                	mov    DWORD PTR [eax],edx
c001ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba37:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ba41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba45:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ba4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba54:	0f b6 d0             	movzx  edx,al
c001ba57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ba62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba6c:	0f b6 d0             	movzx  edx,al
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ba78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba82:	8d 50 01             	lea    edx,[eax+0x1]
c001ba85:	88 d1                	mov    cl,dl
c001ba87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ba91:	0f b6 d0             	movzx  edx,al
c001ba94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba98:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba9c:	83 c9 c0             	or     ecx,0xffffffc0
c001ba9f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001baa3:	90                   	nop
c001baa4:	83 c4 0c             	add    esp,0xc
c001baa7:	c3                   	ret    

c001baa8 <PCI::readBAR8(unsigned int, int)>:
c001baa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001baac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab0:	f6 c2 01             	test   dl,0x1
c001bab3:	74 07                	je     c001babc <PCI::readBAR8(unsigned int, int)+0x14>
c001bab5:	83 e2 fc             	and    edx,0xfffffffc
c001bab8:	01 c2                	add    edx,eax
c001baba:	ec                   	in     al,dx
c001babb:	c3                   	ret    
c001babc:	83 e2 f0             	and    edx,0xfffffff0
c001babf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001bac2:	c3                   	ret    
c001bac3:	90                   	nop

c001bac4 <PCI::readBAR16(unsigned int, int)>:
c001bac4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bacc:	f6 c2 01             	test   dl,0x1
c001bacf:	74 08                	je     c001bad9 <PCI::readBAR16(unsigned int, int)+0x15>
c001bad1:	83 e2 fc             	and    edx,0xfffffffc
c001bad4:	01 c2                	add    edx,eax
c001bad6:	66 ed                	in     ax,dx
c001bad8:	c3                   	ret    
c001bad9:	83 e2 f0             	and    edx,0xfffffff0
c001badc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001bae0:	c3                   	ret    
c001bae1:	90                   	nop

c001bae2 <PCI::readBAR32(unsigned int, int)>:
c001bae2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baea:	f6 c2 01             	test   dl,0x1
c001baed:	74 07                	je     c001baf6 <PCI::readBAR32(unsigned int, int)+0x14>
c001baef:	83 e2 fc             	and    edx,0xfffffffc
c001baf2:	01 c2                	add    edx,eax
c001baf4:	ed                   	in     eax,dx
c001baf5:	c3                   	ret    
c001baf6:	83 e2 f0             	and    edx,0xfffffff0
c001baf9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bafc:	c3                   	ret    
c001bafd:	90                   	nop

c001bafe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bafe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb0a:	f6 c2 01             	test   dl,0x1
c001bb0d:	74 07                	je     c001bb16 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001bb0f:	83 e2 fc             	and    edx,0xfffffffc
c001bb12:	01 ca                	add    edx,ecx
c001bb14:	ee                   	out    dx,al
c001bb15:	c3                   	ret    
c001bb16:	83 e2 f0             	and    edx,0xfffffff0
c001bb19:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001bb1c:	c3                   	ret    
c001bb1d:	90                   	nop

c001bb1e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001bb1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb2a:	f6 c2 01             	test   dl,0x1
c001bb2d:	74 08                	je     c001bb37 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001bb2f:	83 e2 fc             	and    edx,0xfffffffc
c001bb32:	01 ca                	add    edx,ecx
c001bb34:	66 ef                	out    dx,ax
c001bb36:	c3                   	ret    
c001bb37:	83 e2 f0             	and    edx,0xfffffff0
c001bb3a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001bb3e:	c3                   	ret    
c001bb3f:	90                   	nop

c001bb40 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001bb40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb4c:	f6 c2 01             	test   dl,0x1
c001bb4f:	74 07                	je     c001bb58 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001bb51:	83 e2 fc             	and    edx,0xfffffffc
c001bb54:	01 ca                	add    edx,ecx
c001bb56:	ef                   	out    dx,eax
c001bb57:	c3                   	ret    
c001bb58:	83 e2 f0             	and    edx,0xfffffff0
c001bb5b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bb5e:	c3                   	ret    
c001bb5f:	90                   	nop

c001bb60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb60:	55                   	push   ebp
c001bb61:	57                   	push   edi
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bb6c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bb70:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bb74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb78:	83 fe 07             	cmp    esi,0x7
c001bb7b:	76 10                	jbe    c001bb8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	68 73 37 02 c0       	push   0xc0023773
c001bb85:	e8 38 31 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	0f b6 db             	movzx  ebx,bl
c001bb90:	83 fb 0f             	cmp    ebx,0xf
c001bb93:	76 10                	jbe    c001bba5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bb95:	83 ec 0c             	sub    esp,0xc
c001bb98:	68 a3 37 02 c0       	push   0xc00237a3
c001bb9d:	e8 20 31 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	8d 04 36             	lea    eax,[esi+esi*1]
c001bba8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bbad:	83 c8 f0             	or     eax,0xfffffff0
c001bbb0:	ee                   	out    dx,al
c001bbb1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bbb6:	89 e8                	mov    eax,ebp
c001bbb8:	ee                   	out    dx,al
c001bbb9:	83 c4 0c             	add    esp,0xc
c001bbbc:	89 d8                	mov    eax,ebx
c001bbbe:	89 f9                	mov    ecx,edi
c001bbc0:	c1 e0 08             	shl    eax,0x8
c001bbc3:	0f b6 d9             	movzx  ebx,cl
c001bbc6:	83 e3 fc             	and    ebx,0xfffffffc
c001bbc9:	09 d8                	or     eax,ebx
c001bbcb:	5b                   	pop    ebx
c001bbcc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bbd1:	5e                   	pop    esi
c001bbd2:	5f                   	pop    edi
c001bbd3:	5d                   	pop    ebp
c001bbd4:	c3                   	ret    
c001bbd5:	90                   	nop

c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bbd6:	57                   	push   edi
c001bbd7:	56                   	push   esi
c001bbd8:	53                   	push   ebx
c001bbd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbe1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bbe7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbf3:	83 ff 01             	cmp    edi,0x1
c001bbf6:	75 3f                	jne    c001bc37 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bbf8:	89 de                	mov    esi,ebx
c001bbfa:	0f b6 c0             	movzx  eax,al
c001bbfd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bc03:	c1 e0 10             	shl    eax,0x10
c001bc06:	0f b6 c9             	movzx  ecx,cl
c001bc09:	09 f0                	or     eax,esi
c001bc0b:	c1 e1 08             	shl    ecx,0x8
c001bc0e:	0f b6 d2             	movzx  edx,dl
c001bc11:	09 c8                	or     eax,ecx
c001bc13:	c1 e2 0b             	shl    edx,0xb
c001bc16:	09 d0                	or     eax,edx
c001bc18:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bc1d:	0d 00 00 00 80       	or     eax,0x80000000
c001bc22:	ef                   	out    dx,eax
c001bc23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc28:	ed                   	in     eax,dx
c001bc29:	83 e3 02             	and    ebx,0x2
c001bc2c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bc33:	d3 e8                	shr    eax,cl
c001bc35:	eb 44                	jmp    c001bc7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bc37:	83 ff 02             	cmp    edi,0x2
c001bc3a:	75 2d                	jne    c001bc69 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	0f b6 c9             	movzx  ecx,cl
c001bc42:	0f b6 d2             	movzx  edx,dl
c001bc45:	0f b6 fb             	movzx  edi,bl
c001bc48:	0f b6 c0             	movzx  eax,al
c001bc4b:	57                   	push   edi
c001bc4c:	51                   	push   ecx
c001bc4d:	52                   	push   edx
c001bc4e:	50                   	push   eax
c001bc4f:	56                   	push   esi
c001bc50:	e8 0b ff ff ff       	call   c001bb60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc55:	89 c2                	mov    edx,eax
c001bc57:	ed                   	in     eax,dx
c001bc58:	83 e3 02             	and    ebx,0x2
c001bc5b:	83 c4 20             	add    esp,0x20
c001bc5e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bc65:	d3 e8                	shr    eax,cl
c001bc67:	eb 12                	jmp    c001bc7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bc69:	83 ec 0c             	sub    esp,0xc
c001bc6c:	68 d3 37 02 c0       	push   0xc00237d3
c001bc71:	e8 4c 30 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bc76:	83 c4 10             	add    esp,0x10
c001bc79:	31 c0                	xor    eax,eax
c001bc7b:	5b                   	pop    ebx
c001bc7c:	5e                   	pop    esi
c001bc7d:	5f                   	pop    edi
c001bc7e:	c3                   	ret    
c001bc7f:	90                   	nop

c001bc80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bc80:	83 ec 18             	sub    esp,0x18
c001bc83:	6a 00                	push   0x0
c001bc85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc8a:	50                   	push   eax
c001bc8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc90:	50                   	push   eax
c001bc91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc96:	50                   	push   eax
c001bc97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc9b:	e8 36 ff ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bca0:	83 c4 2c             	add    esp,0x2c
c001bca3:	c3                   	ret    

c001bca4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bca4:	83 ec 18             	sub    esp,0x18
c001bca7:	6a 0e                	push   0xe
c001bca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcae:	50                   	push   eax
c001bcaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcb4:	50                   	push   eax
c001bcb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcba:	50                   	push   eax
c001bcbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcbf:	e8 12 ff ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcc4:	83 c4 2c             	add    esp,0x2c
c001bcc7:	0f b6 c0             	movzx  eax,al
c001bcca:	c3                   	ret    
c001bccb:	90                   	nop

c001bccc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bccc:	55                   	push   ebp
c001bccd:	57                   	push   edi
c001bcce:	56                   	push   esi
c001bccf:	53                   	push   ebx
c001bcd0:	83 ec 18             	sub    esp,0x18
c001bcd3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bcd8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bcdd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bce2:	6a 0a                	push   0xa
c001bce4:	56                   	push   esi
c001bce5:	55                   	push   ebp
c001bce6:	57                   	push   edi
c001bce7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bceb:	e8 e6 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcf0:	83 c4 14             	add    esp,0x14
c001bcf3:	89 c3                	mov    ebx,eax
c001bcf5:	6a 0a                	push   0xa
c001bcf7:	0f b6 db             	movzx  ebx,bl
c001bcfa:	56                   	push   esi
c001bcfb:	55                   	push   ebp
c001bcfc:	57                   	push   edi
c001bcfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bd01:	e8 d0 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd06:	83 c4 2c             	add    esp,0x2c
c001bd09:	25 00 ff 00 00       	and    eax,0xff00
c001bd0e:	09 d8                	or     eax,ebx
c001bd10:	5b                   	pop    ebx
c001bd11:	5e                   	pop    esi
c001bd12:	5f                   	pop    edi
c001bd13:	5d                   	pop    ebp
c001bd14:	c3                   	ret    
c001bd15:	90                   	nop

c001bd16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bd16:	83 ec 18             	sub    esp,0x18
c001bd19:	6a 08                	push   0x8
c001bd1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd20:	50                   	push   eax
c001bd21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd26:	50                   	push   eax
c001bd27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd2c:	50                   	push   eax
c001bd2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd31:	e8 a0 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd36:	83 c4 2c             	add    esp,0x2c
c001bd39:	0f b6 c4             	movzx  eax,ah
c001bd3c:	c3                   	ret    
c001bd3d:	90                   	nop

c001bd3e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bd3e:	83 ec 18             	sub    esp,0x18
c001bd41:	6a 08                	push   0x8
c001bd43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd48:	50                   	push   eax
c001bd49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd4e:	50                   	push   eax
c001bd4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd54:	50                   	push   eax
c001bd55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd59:	e8 78 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd5e:	83 c4 2c             	add    esp,0x2c
c001bd61:	c3                   	ret    

c001bd62 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bd62:	83 ec 18             	sub    esp,0x18
c001bd65:	6a 3c                	push   0x3c
c001bd67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd6c:	50                   	push   eax
c001bd6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd72:	50                   	push   eax
c001bd73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd78:	50                   	push   eax
c001bd79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd7d:	e8 54 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd82:	83 c4 2c             	add    esp,0x2c
c001bd85:	c3                   	ret    

c001bd86 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bd86:	83 ec 18             	sub    esp,0x18
c001bd89:	6a 18                	push   0x18
c001bd8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd90:	50                   	push   eax
c001bd91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd96:	50                   	push   eax
c001bd97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd9c:	50                   	push   eax
c001bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bda1:	e8 30 fe ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bda6:	83 c4 2c             	add    esp,0x2c
c001bda9:	0f b6 c4             	movzx  eax,ah
c001bdac:	c3                   	ret    
c001bdad:	90                   	nop

c001bdae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bdae:	55                   	push   ebp
c001bdaf:	57                   	push   edi
c001bdb0:	56                   	push   esi
c001bdb1:	53                   	push   ebx
c001bdb2:	83 ec 28             	sub    esp,0x28
c001bdb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bdb9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bdbe:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bdc3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bdc8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bdcf:	8d 43 12             	lea    eax,[ebx+0x12]
c001bdd2:	83 c3 10             	add    ebx,0x10
c001bdd5:	0f b6 c0             	movzx  eax,al
c001bdd8:	0f b6 db             	movzx  ebx,bl
c001bddb:	50                   	push   eax
c001bddc:	51                   	push   ecx
c001bddd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bde1:	57                   	push   edi
c001bde2:	55                   	push   ebp
c001bde3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bde7:	e8 ea fd ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdec:	83 c4 14             	add    esp,0x14
c001bdef:	89 c6                	mov    esi,eax
c001bdf1:	53                   	push   ebx
c001bdf2:	c1 e6 10             	shl    esi,0x10
c001bdf5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bdf9:	51                   	push   ecx
c001bdfa:	57                   	push   edi
c001bdfb:	55                   	push   ebp
c001bdfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001be00:	e8 d1 fd ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be05:	83 c4 3c             	add    esp,0x3c
c001be08:	0f b7 c0             	movzx  eax,ax
c001be0b:	5b                   	pop    ebx
c001be0c:	09 f0                	or     eax,esi
c001be0e:	5e                   	pop    esi
c001be0f:	5f                   	pop    edi
c001be10:	5d                   	pop    ebp
c001be11:	c3                   	ret    

c001be12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001be12:	55                   	push   ebp
c001be13:	57                   	push   edi
c001be14:	56                   	push   esi
c001be15:	53                   	push   ebx
c001be16:	83 ec 0c             	sub    esp,0xc
c001be19:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001be1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be21:	89 f5                	mov    ebp,esi
c001be23:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001be29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be39:	83 f9 01             	cmp    ecx,0x1
c001be3c:	75 5d                	jne    c001be9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001be3e:	0f b6 c8             	movzx  ecx,al
c001be41:	0f b6 d2             	movzx  edx,dl
c001be44:	c1 e1 10             	shl    ecx,0x10
c001be47:	c1 e2 0b             	shl    edx,0xb
c001be4a:	89 f0                	mov    eax,esi
c001be4c:	25 fc 00 00 00       	and    eax,0xfc
c001be51:	09 c1                	or     ecx,eax
c001be53:	89 e8                	mov    eax,ebp
c001be55:	0f b6 c0             	movzx  eax,al
c001be58:	c1 e0 08             	shl    eax,0x8
c001be5b:	09 c1                	or     ecx,eax
c001be5d:	09 d1                	or     ecx,edx
c001be5f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be64:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001be6a:	89 c8                	mov    eax,ecx
c001be6c:	ef                   	out    dx,eax
c001be6d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be72:	ed                   	in     eax,dx
c001be73:	0f b7 db             	movzx  ebx,bx
c001be76:	83 e6 02             	and    esi,0x2
c001be79:	74 0a                	je     c001be85 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001be7b:	0f b7 d0             	movzx  edx,ax
c001be7e:	c1 e3 10             	shl    ebx,0x10
c001be81:	09 d3                	or     ebx,edx
c001be83:	eb 05                	jmp    c001be8a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001be85:	66 31 c0             	xor    ax,ax
c001be88:	09 c3                	or     ebx,eax
c001be8a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be8f:	89 c8                	mov    eax,ecx
c001be91:	ef                   	out    dx,eax
c001be92:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be97:	89 d8                	mov    eax,ebx
c001be99:	eb 41                	jmp    c001bedc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001be9b:	83 f9 02             	cmp    ecx,0x2
c001be9e:	75 45                	jne    c001bee5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001bea0:	83 ec 0c             	sub    esp,0xc
c001bea3:	0f b6 d2             	movzx  edx,dl
c001bea6:	89 f1                	mov    ecx,esi
c001bea8:	0f b6 c0             	movzx  eax,al
c001beab:	0f b6 f1             	movzx  esi,cl
c001beae:	89 e9                	mov    ecx,ebp
c001beb0:	56                   	push   esi
c001beb1:	0f b6 c9             	movzx  ecx,cl
c001beb4:	51                   	push   ecx
c001beb5:	52                   	push   edx
c001beb6:	50                   	push   eax
c001beb7:	57                   	push   edi
c001beb8:	e8 a3 fc ff ff       	call   c001bb60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bebd:	89 c2                	mov    edx,eax
c001bebf:	ed                   	in     eax,dx
c001bec0:	83 c4 20             	add    esp,0x20
c001bec3:	0f b7 db             	movzx  ebx,bx
c001bec6:	f6 c2 02             	test   dl,0x2
c001bec9:	74 0c                	je     c001bed7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001becb:	0f b7 c8             	movzx  ecx,ax
c001bece:	89 d8                	mov    eax,ebx
c001bed0:	c1 e0 10             	shl    eax,0x10
c001bed3:	09 c8                	or     eax,ecx
c001bed5:	eb 05                	jmp    c001bedc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001bed7:	66 31 c0             	xor    ax,ax
c001beda:	09 d8                	or     eax,ebx
c001bedc:	ef                   	out    dx,eax
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	5b                   	pop    ebx
c001bee1:	5e                   	pop    esi
c001bee2:	5f                   	pop    edi
c001bee3:	5d                   	pop    ebp
c001bee4:	c3                   	ret    
c001bee5:	c7 44 24 20 d3 37 02 c0 	mov    DWORD PTR [esp+0x20],0xc00237d3
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	5b                   	pop    ebx
c001bef1:	5e                   	pop    esi
c001bef2:	5f                   	pop    edi
c001bef3:	5d                   	pop    ebp
c001bef4:	e9 c9 2d ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001bef9:	90                   	nop

c001befa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001befa:	55                   	push   ebp
c001befb:	57                   	push   edi
c001befc:	56                   	push   esi
c001befd:	53                   	push   ebx
c001befe:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001bf04:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001bf0b:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001bf12:	0f 85 bd 00 00 00    	jne    c001bfd5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001bf18:	83 ec 0c             	sub    esp,0xc
c001bf1b:	68 14 01 00 00       	push   0x114
c001bf20:	e8 56 2a ff ff       	call   c000e97b <malloc>
c001bf25:	83 c4 0c             	add    esp,0xc
c001bf28:	89 c3                	mov    ebx,eax
c001bf2a:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001bf30:	68 d9 37 02 c0       	push   0xc00237d9
c001bf35:	50                   	push   eax
c001bf36:	e8 d7 c1 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	85 db                	test   ebx,ebx
c001bf40:	0f 84 67 02 00 00    	je     c001c1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf46:	56                   	push   esi
c001bf47:	56                   	push   esi
c001bf48:	6a 01                	push   0x1
c001bf4a:	53                   	push   ebx
c001bf4b:	e8 e0 c1 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	85 c0                	test   eax,eax
c001bf55:	0f 85 52 02 00 00    	jne    c001c1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf5b:	52                   	push   edx
c001bf5c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bf60:	50                   	push   eax
c001bf61:	8d 44 24 48          	lea    eax,[esp+0x48]
c001bf65:	50                   	push   eax
c001bf66:	53                   	push   ebx
c001bf67:	e8 c6 c4 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001bf6c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf70:	40                   	inc    eax
c001bf71:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf74:	e8 02 2a ff ff       	call   c000e97b <malloc>
c001bf79:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001bf7d:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001bf82:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001bf86:	59                   	pop    ecx
c001bf87:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf89:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001bf8d:	51                   	push   ecx
c001bf8e:	50                   	push   eax
c001bf8f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf93:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf97:	53                   	push   ebx
c001bf98:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf9b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001bf9f:	83 c4 20             	add    esp,0x20
c001bfa2:	89 c8                	mov    eax,ecx
c001bfa4:	99                   	cdq    
c001bfa5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bfa9:	0f 85 fe 01 00 00    	jne    c001c1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bfaf:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001bfb3:	0f 85 f4 01 00 00    	jne    c001c1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bfb9:	83 ec 0c             	sub    esp,0xc
c001bfbc:	53                   	push   ebx
c001bfbd:	e8 cc c1 fe ff       	call   c000818e <File::close()>
c001bfc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bfc6:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bfcd:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bfd2:	83 c4 10             	add    esp,0x10
c001bfd5:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c001bfda:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c001bfe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfe4:	31 f6                	xor    esi,esi
c001bfe6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bfee:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bff5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bffa:	31 c9                	xor    ecx,ecx
c001bffc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c004:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c009:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c011:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c015:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c01d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c021:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c025:	0f 8e 82 01 00 00    	jle    c001c1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c02b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001c02e:	d4 40                	aam    0x40
c001c030:	d5 39                	aad    0x39
c001c032:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c036:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001c03a:	d4 40                	aam    0x40
c001c03c:	d5 39                	aad    0x39
c001c03e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c042:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001c046:	d4 40                	aam    0x40
c001c048:	d5 39                	aad    0x39
c001c04a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c04e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001c052:	d4 40                	aam    0x40
c001c054:	d5 39                	aad    0x39
c001c056:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c05a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001c05e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c062:	3c 56                	cmp    al,0x56
c001c064:	74 43                	je     c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001c066:	d4 40                	aam    0x40
c001c068:	d5 39                	aad    0x39
c001c06a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c06d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001c071:	0f b6 c9             	movzx  ecx,cl
c001c074:	c1 e1 04             	shl    ecx,0x4
c001c077:	d4 40                	aam    0x40
c001c079:	d5 39                	aad    0x39
c001c07b:	83 e8 30             	sub    eax,0x30
c001c07e:	0f b6 c0             	movzx  eax,al
c001c081:	09 c1                	or     ecx,eax
c001c083:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001c087:	c1 e1 04             	shl    ecx,0x4
c001c08a:	d4 40                	aam    0x40
c001c08c:	d5 39                	aad    0x39
c001c08e:	83 e8 30             	sub    eax,0x30
c001c091:	0f b6 c0             	movzx  eax,al
c001c094:	09 c1                	or     ecx,eax
c001c096:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c09a:	c1 e1 04             	shl    ecx,0x4
c001c09d:	d4 40                	aam    0x40
c001c09f:	d5 39                	aad    0x39
c001c0a1:	83 e8 30             	sub    eax,0x30
c001c0a4:	0f b6 c0             	movzx  eax,al
c001c0a7:	09 c1                	or     ecx,eax
c001c0a9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c0ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c0b1:	3c 58                	cmp    al,0x58
c001c0b3:	74 47                	je     c001c0fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c0b5:	d4 40                	aam    0x40
c001c0b7:	d5 39                	aad    0x39
c001c0b9:	8d 50 d0             	lea    edx,[eax-0x30]
c001c0bc:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c0c0:	0f b6 d2             	movzx  edx,dl
c001c0c3:	c1 e2 04             	shl    edx,0x4
c001c0c6:	d4 40                	aam    0x40
c001c0c8:	d5 39                	aad    0x39
c001c0ca:	83 e8 30             	sub    eax,0x30
c001c0cd:	0f b6 c0             	movzx  eax,al
c001c0d0:	09 c2                	or     edx,eax
c001c0d2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c0d6:	c1 e2 04             	shl    edx,0x4
c001c0d9:	d4 40                	aam    0x40
c001c0db:	d5 39                	aad    0x39
c001c0dd:	83 e8 30             	sub    eax,0x30
c001c0e0:	0f b6 c0             	movzx  eax,al
c001c0e3:	09 c2                	or     edx,eax
c001c0e5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c0e9:	c1 e2 04             	shl    edx,0x4
c001c0ec:	d4 40                	aam    0x40
c001c0ee:	d5 39                	aad    0x39
c001c0f0:	83 e8 30             	sub    eax,0x30
c001c0f3:	0f b6 c0             	movzx  eax,al
c001c0f6:	09 c2                	or     edx,eax
c001c0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c0fc:	83 c6 10             	add    esi,0x10
c001c0ff:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c103:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c107:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c10b:	83 fa 0a             	cmp    edx,0xa
c001c10e:	74 0b                	je     c001c11b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c110:	47                   	inc    edi
c001c111:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c115:	75 19                	jne    c001c130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c117:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c11b:	31 c0                	xor    eax,eax
c001c11d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c122:	0f 94 c0             	sete   al
c001c125:	01 c6                	add    esi,eax
c001c127:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c12c:	75 0b                	jne    c001c139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c12e:	eb 14                	jmp    c001c144 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c130:	46                   	inc    esi
c001c131:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c134:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c137:	eb ca                	jmp    c001c103 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c139:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c13e:	0f 85 dd fe ff ff    	jne    c001c021 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c144:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c149:	74 10                	je     c001c15b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c14b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c150:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c155:	0f 85 c6 fe ff ff    	jne    c001c021 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c15b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c15f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c163:	83 e8 30             	sub    eax,0x30
c001c166:	83 ef 30             	sub    edi,0x30
c001c169:	c1 e0 04             	shl    eax,0x4
c001c16c:	09 f8                	or     eax,edi
c001c16e:	0f b6 c0             	movzx  eax,al
c001c171:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c175:	0f 85 a6 fe ff ff    	jne    c001c021 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c17b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c17f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c183:	83 e8 30             	sub    eax,0x30
c001c186:	83 ef 30             	sub    edi,0x30
c001c189:	c1 e0 04             	shl    eax,0x4
c001c18c:	09 f8                	or     eax,edi
c001c18e:	0f b6 c0             	movzx  eax,al
c001c191:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c195:	0f 85 86 fe ff ff    	jne    c001c021 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c19b:	50                   	push   eax
c001c19c:	50                   	push   eax
c001c19d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c1a1:	50                   	push   eax
c001c1a2:	55                   	push   ebp
c001c1a3:	e8 98 44 fe ff       	call   c0000640 <strcpy>
c001c1a8:	83 c4 10             	add    esp,0x10
c001c1ab:	eb 06                	jmp    c001c1b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c1ad:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c1b1:	31 ed                	xor    ebp,ebp
c001c1b3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c1b9:	89 e8                	mov    eax,ebp
c001c1bb:	5b                   	pop    ebx
c001c1bc:	5e                   	pop    esi
c001c1bd:	5f                   	pop    edi
c001c1be:	5d                   	pop    ebp
c001c1bf:	c3                   	ret    

c001c1c0 <PCI::checkBus(unsigned char)>:
c001c1c0:	56                   	push   esi
c001c1c1:	53                   	push   ebx
c001c1c2:	31 db                	xor    ebx,ebx
c001c1c4:	51                   	push   ecx
c001c1c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c1ca:	52                   	push   edx
c001c1cb:	53                   	push   ebx
c001c1cc:	43                   	inc    ebx
c001c1cd:	56                   	push   esi
c001c1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d2:	e8 6f 03 00 00       	call   c001c546 <PCI::checkDevice(unsigned char, unsigned char)>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	83 fb 20             	cmp    ebx,0x20
c001c1dd:	75 eb                	jne    c001c1ca <PCI::checkBus(unsigned char)+0xa>
c001c1df:	58                   	pop    eax
c001c1e0:	5b                   	pop    ebx
c001c1e1:	5e                   	pop    esi
c001c1e2:	c3                   	ret    
c001c1e3:	90                   	nop

c001c1e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001c1e4:	55                   	push   ebp
c001c1e5:	57                   	push   edi
c001c1e6:	56                   	push   esi
c001c1e7:	53                   	push   ebx
c001c1e8:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c1ee:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c1f6:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c1fd:	3d ff ff 00 00       	cmp    eax,0xffff
c001c202:	0f 84 b7 01 00 00    	je     c001c3bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c208:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c210:	66 81 fb 06 04       	cmp    bx,0x406
c001c215:	75 32                	jne    c001c249 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c217:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c21f:	50                   	push   eax
c001c220:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c228:	50                   	push   eax
c001c229:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c231:	50                   	push   eax
c001c232:	55                   	push   ebp
c001c233:	e8 4e fb ff ff       	call   c001bd86 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c238:	59                   	pop    ecx
c001c239:	0f b6 c0             	movzx  eax,al
c001c23c:	5b                   	pop    ebx
c001c23d:	50                   	push   eax
c001c23e:	55                   	push   ebp
c001c23f:	e8 7c ff ff ff       	call   c001c1c0 <PCI::checkBus(unsigned char)>
c001c244:	e9 16 01 00 00       	jmp    c001c35f <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c249:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c250:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c256:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c25a:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c261:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c269:	85 c0                	test   eax,eax
c001c26b:	74 36                	je     c001c2a3 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c26d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c270:	85 d2                	test   edx,edx
c001c272:	74 2b                	je     c001c29f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c274:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c27a:	31 f9                	xor    ecx,edi
c001c27c:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c282:	75 1b                	jne    c001c29f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c284:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c288:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c28e:	75 0f                	jne    c001c29f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c290:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c297:	39 f2                	cmp    edx,esi
c001c299:	0f 84 20 01 00 00    	je     c001c3bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c29f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2a1:	eb c6                	jmp    c001c269 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c2a3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c2a7:	be 0c 38 02 c0       	mov    esi,0xc002380c
c001c2ac:	b9 07 00 00 00       	mov    ecx,0x7
c001c2b1:	fc                   	cld    
c001c2b2:	31 d2                	xor    edx,edx
c001c2b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2b6:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c2bd:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c2c1:	b9 12 00 00 00       	mov    ecx,0x12
c001c2c6:	83 ec 0c             	sub    esp,0xc
c001c2c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c2cb:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c2d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2d8:	f7 f1                	div    ecx
c001c2da:	83 c0 30             	add    eax,0x30
c001c2dd:	83 c2 30             	add    edx,0x30
c001c2e0:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c2e4:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c2e8:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c2f0:	31 d2                	xor    edx,edx
c001c2f2:	f7 f1                	div    ecx
c001c2f4:	83 c0 30             	add    eax,0x30
c001c2f7:	83 c2 30             	add    edx,0x30
c001c2fa:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c2fe:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c302:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c306:	50                   	push   eax
c001c307:	e8 34 03 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c315:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c31c:	75 46                	jne    c001c364 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c31e:	83 ec 0c             	sub    esp,0xc
c001c321:	68 64 01 00 00       	push   0x164
c001c326:	e8 50 26 ff ff       	call   c000e97b <malloc>
c001c32b:	89 c3                	mov    ebx,eax
c001c32d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c330:	e8 39 11 00 00       	call   c001d46e <SATABus::SATABus()>
c001c335:	58                   	pop    eax
c001c336:	5a                   	pop    edx
c001c337:	53                   	push   ebx
c001c338:	55                   	push   ebp
c001c339:	e8 04 cd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c33e:	83 ec 1c             	sub    esp,0x1c
c001c341:	b9 09 00 00 00       	mov    ecx,0x9
c001c346:	89 e7                	mov    edi,esp
c001c348:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c34a:	53                   	push   ebx
c001c34b:	e8 38 cc fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c350:	83 c4 30             	add    esp,0x30
c001c353:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c355:	6a 00                	push   0x0
c001c357:	6a 00                	push   0x0
c001c359:	6a 00                	push   0x0
c001c35b:	53                   	push   ebx
c001c35c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	eb 5b                	jmp    c001c3bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c364:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c36a:	75 19                	jne    c001c385 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c36c:	83 ec 0c             	sub    esp,0xc
c001c36f:	68 70 02 00 00       	push   0x270
c001c374:	e8 02 26 ff ff       	call   c000e97b <malloc>
c001c379:	89 c3                	mov    ebx,eax
c001c37b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c37e:	e8 93 02 00 00       	call   c001c616 <IDE::IDE()>
c001c383:	eb b0                	jmp    c001c335 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c385:	83 ec 0c             	sub    esp,0xc
c001c388:	68 58 01 00 00       	push   0x158
c001c38d:	e8 e9 25 ff ff       	call   c000e97b <malloc>
c001c392:	89 c3                	mov    ebx,eax
c001c394:	58                   	pop    eax
c001c395:	5a                   	pop    edx
c001c396:	68 f2 37 02 c0       	push   0xc00237f2
c001c39b:	53                   	push   ebx
c001c39c:	e8 55 cf fe ff       	call   c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>
c001c3a1:	59                   	pop    ecx
c001c3a2:	5f                   	pop    edi
c001c3a3:	53                   	push   ebx
c001c3a4:	55                   	push   ebp
c001c3a5:	e8 98 cc fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c3aa:	83 ec 1c             	sub    esp,0x1c
c001c3ad:	b9 09 00 00 00       	mov    ecx,0x9
c001c3b2:	89 e7                	mov    edi,esp
c001c3b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c3b6:	53                   	push   ebx
c001c3b7:	e8 cc cb fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c3bc:	83 c4 30             	add    esp,0x30
c001c3bf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c3c5:	5b                   	pop    ebx
c001c3c6:	5e                   	pop    esi
c001c3c7:	5f                   	pop    edi
c001c3c8:	5d                   	pop    ebp
c001c3c9:	c3                   	ret    

c001c3ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c3ca:	55                   	push   ebp
c001c3cb:	57                   	push   edi
c001c3cc:	56                   	push   esi
c001c3cd:	53                   	push   ebx
c001c3ce:	83 ec 68             	sub    esp,0x68
c001c3d1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c3d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c3dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c3e7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c3ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c3f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c3f7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c3fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c400:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c405:	6a 0c                	push   0xc
c001c407:	57                   	push   edi
c001c408:	53                   	push   ebx
c001c409:	56                   	push   esi
c001c40a:	55                   	push   ebp
c001c40b:	e8 c6 f7 ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c410:	83 c4 20             	add    esp,0x20
c001c413:	57                   	push   edi
c001c414:	53                   	push   ebx
c001c415:	56                   	push   esi
c001c416:	55                   	push   ebp
c001c417:	e8 b0 f8 ff ff       	call   c001bccc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c41c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c421:	57                   	push   edi
c001c422:	53                   	push   ebx
c001c423:	56                   	push   esi
c001c424:	55                   	push   ebp
c001c425:	e8 38 f9 ff ff       	call   c001bd62 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c42a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c42e:	83 c4 14             	add    esp,0x14
c001c431:	6a 3c                	push   0x3c
c001c433:	57                   	push   edi
c001c434:	53                   	push   ebx
c001c435:	56                   	push   esi
c001c436:	55                   	push   ebp
c001c437:	e8 9a f7 ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c43c:	0f b6 c4             	movzx  eax,ah
c001c43f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c443:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c447:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c44b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c450:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c456:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c45c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c460:	83 c4 20             	add    esp,0x20
c001c463:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c468:	74 30                	je     c001c49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c46a:	31 c0                	xor    eax,eax
c001c46c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c470:	7e 28                	jle    c001c49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c472:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c47a:	39 cb                	cmp    ebx,ecx
c001c47c:	75 19                	jne    c001c497 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c47e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c486:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c48a:	75 0b                	jne    c001c497 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c48c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c493:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c497:	40                   	inc    eax
c001c498:	eb d2                	jmp    c001c46c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c49a:	31 d2                	xor    edx,edx
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	57                   	push   edi
c001c4a0:	53                   	push   ebx
c001c4a1:	56                   	push   esi
c001c4a2:	52                   	push   edx
c001c4a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c4a7:	55                   	push   ebp
c001c4a8:	e8 01 f9 ff ff       	call   c001bdae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c4b1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c4b5:	42                   	inc    edx
c001c4b6:	83 c4 20             	add    esp,0x20
c001c4b9:	83 fa 06             	cmp    edx,0x6
c001c4bc:	75 de                	jne    c001c49c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c4be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4c6:	c1 e2 08             	shl    edx,0x8
c001c4c9:	83 ec 0c             	sub    esp,0xc
c001c4cc:	0f b6 c4             	movzx  eax,ah
c001c4cf:	09 d0                	or     eax,edx
c001c4d1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c4d6:	6a 02                	push   0x2
c001c4d8:	57                   	push   edi
c001c4d9:	53                   	push   ebx
c001c4da:	56                   	push   esi
c001c4db:	55                   	push   ebp
c001c4dc:	e8 f5 f6 ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4e1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c4e6:	83 c4 20             	add    esp,0x20
c001c4e9:	57                   	push   edi
c001c4ea:	53                   	push   ebx
c001c4eb:	56                   	push   esi
c001c4ec:	55                   	push   ebp
c001c4ed:	e8 24 f8 ff ff       	call   c001bd16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c4f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c4f6:	57                   	push   edi
c001c4f7:	53                   	push   ebx
c001c4f8:	56                   	push   esi
c001c4f9:	55                   	push   ebp
c001c4fa:	e8 81 f7 ff ff       	call   c001bc80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4ff:	b9 09 00 00 00       	mov    ecx,0x9
c001c504:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c509:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c50d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c511:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c515:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c519:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c51d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c521:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c525:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c529:	83 ec 0c             	sub    esp,0xc
c001c52c:	fc                   	cld    
c001c52d:	89 e7                	mov    edi,esp
c001c52f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c533:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c535:	55                   	push   ebp
c001c536:	e8 a9 fc ff ff       	call   c001c1e4 <PCI::foundDevice(PCIDeviceInfo)>
c001c53b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c541:	5b                   	pop    ebx
c001c542:	5e                   	pop    esi
c001c543:	5f                   	pop    edi
c001c544:	5d                   	pop    ebp
c001c545:	c3                   	ret    

c001c546 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c546:	55                   	push   ebp
c001c547:	57                   	push   edi
c001c548:	56                   	push   esi
c001c549:	53                   	push   ebx
c001c54a:	83 ec 0c             	sub    esp,0xc
c001c54d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c551:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c556:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c55b:	6a 00                	push   0x0
c001c55d:	56                   	push   esi
c001c55e:	57                   	push   edi
c001c55f:	55                   	push   ebp
c001c560:	e8 1b f7 ff ff       	call   c001bc80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c565:	6a 00                	push   0x0
c001c567:	56                   	push   esi
c001c568:	57                   	push   edi
c001c569:	55                   	push   ebp
c001c56a:	e8 5b fe ff ff       	call   c001c3ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c56f:	83 c4 20             	add    esp,0x20
c001c572:	6a 00                	push   0x0
c001c574:	56                   	push   esi
c001c575:	57                   	push   edi
c001c576:	55                   	push   ebp
c001c577:	e8 28 f7 ff ff       	call   c001bca4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	a8 80                	test   al,0x80
c001c581:	74 2d                	je     c001c5b0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c583:	bb 01 00 00 00       	mov    ebx,0x1
c001c588:	53                   	push   ebx
c001c589:	56                   	push   esi
c001c58a:	57                   	push   edi
c001c58b:	55                   	push   ebp
c001c58c:	e8 ef f6 ff ff       	call   c001bc80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	0f b7 c0             	movzx  eax,ax
c001c597:	3d ff ff 00 00       	cmp    eax,0xffff
c001c59c:	74 0c                	je     c001c5aa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c59e:	53                   	push   ebx
c001c59f:	56                   	push   esi
c001c5a0:	57                   	push   edi
c001c5a1:	55                   	push   ebp
c001c5a2:	e8 23 fe ff ff       	call   c001c3ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	43                   	inc    ebx
c001c5ab:	83 fb 08             	cmp    ebx,0x8
c001c5ae:	75 d8                	jne    c001c588 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c5b0:	83 c4 0c             	add    esp,0xc
c001c5b3:	5b                   	pop    ebx
c001c5b4:	5e                   	pop    esi
c001c5b5:	5f                   	pop    edi
c001c5b6:	5d                   	pop    ebp
c001c5b7:	c3                   	ret    

c001c5b8 <PCI::detect()>:
c001c5b8:	56                   	push   esi
c001c5b9:	53                   	push   ebx
c001c5ba:	53                   	push   ebx
c001c5bb:	31 db                	xor    ebx,ebx
c001c5bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5c1:	6a 00                	push   0x0
c001c5c3:	6a 00                	push   0x0
c001c5c5:	6a 00                	push   0x0
c001c5c7:	56                   	push   esi
c001c5c8:	e8 d7 f6 ff ff       	call   c001bca4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	a8 80                	test   al,0x80
c001c5d2:	75 21                	jne    c001c5f5 <PCI::detect()+0x3d>
c001c5d4:	51                   	push   ecx
c001c5d5:	51                   	push   ecx
c001c5d6:	6a 00                	push   0x0
c001c5d8:	56                   	push   esi
c001c5d9:	e8 e2 fb ff ff       	call   c001c1c0 <PCI::checkBus(unsigned char)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	eb 2a                	jmp    c001c60d <PCI::detect()+0x55>
c001c5e3:	52                   	push   edx
c001c5e4:	52                   	push   edx
c001c5e5:	53                   	push   ebx
c001c5e6:	43                   	inc    ebx
c001c5e7:	56                   	push   esi
c001c5e8:	e8 d3 fb ff ff       	call   c001c1c0 <PCI::checkBus(unsigned char)>
c001c5ed:	83 c4 10             	add    esp,0x10
c001c5f0:	83 fb 08             	cmp    ebx,0x8
c001c5f3:	74 18                	je     c001c60d <PCI::detect()+0x55>
c001c5f5:	53                   	push   ebx
c001c5f6:	6a 00                	push   0x0
c001c5f8:	6a 00                	push   0x0
c001c5fa:	56                   	push   esi
c001c5fb:	e8 80 f6 ff ff       	call   c001bc80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c600:	83 c4 10             	add    esp,0x10
c001c603:	0f b7 c0             	movzx  eax,ax
c001c606:	3d ff ff 00 00       	cmp    eax,0xffff
c001c60b:	74 d6                	je     c001c5e3 <PCI::detect()+0x2b>
c001c60d:	58                   	pop    eax
c001c60e:	5b                   	pop    ebx
c001c60f:	5e                   	pop    esi
c001c610:	c3                   	ret    
c001c611:	90                   	nop

c001c612 <IDE::close(int, int, void*)>:
c001c612:	83 c8 ff             	or     eax,0xffffffff
c001c615:	c3                   	ret    

c001c616 <IDE::IDE()>:
c001c616:	83 ec 0c             	sub    esp,0xc
c001c619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61d:	83 ec 08             	sub    esp,0x8
c001c620:	68 9c 38 02 c0       	push   0xc002389c
c001c625:	50                   	push   eax
c001c626:	e8 71 cd fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	ba c8 39 02 c0       	mov    edx,0xc00239c8
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	89 10                	mov    DWORD PTR [eax],edx
c001c639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c644:	90                   	nop
c001c645:	83 c4 0c             	add    esp,0xc
c001c648:	c3                   	ret    
c001c649:	90                   	nop

c001c64a <IDE::prepareInterrupt(unsigned char)>:
c001c64a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c64f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c653:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c65b:	c3                   	ret    

c001c65c <selectDrive(unsigned char, unsigned char)>:
c001c65c:	c3                   	ret    
c001c65d:	90                   	nop

c001c65e <IDE::getBase(unsigned char)>:
c001c65e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c667:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c66f:	c3                   	ret    

c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c670:	55                   	push   ebp
c001c671:	57                   	push   edi
c001c672:	56                   	push   esi
c001c673:	53                   	push   ebx
c001c674:	83 ec 1c             	sub    esp,0x1c
c001c677:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c67b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c67f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c682:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c686:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c68a:	80 f9 03             	cmp    cl,0x3
c001c68d:	77 4f                	ja     c001c6de <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c693:	0f b6 fa             	movzx  edi,dl
c001c696:	0f b6 db             	movzx  ebx,bl
c001c699:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c69c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c6a1:	80 ca 80             	or     dl,0x80
c001c6a4:	52                   	push   edx
c001c6a5:	6a 0c                	push   0xc
c001c6a7:	57                   	push   edi
c001c6a8:	56                   	push   esi
c001c6a9:	e8 c2 ff ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ae:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c6b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c6bb:	ee                   	out    dx,al
c001c6bc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c6c1:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001c6c5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c6c9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c6cd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c6d5:	83 c4 2c             	add    esp,0x2c
c001c6d8:	5b                   	pop    ebx
c001c6d9:	5e                   	pop    esi
c001c6da:	5f                   	pop    edi
c001c6db:	5d                   	pop    ebp
c001c6dc:	eb 92                	jmp    c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6de:	0f b6 cb             	movzx  ecx,bl
c001c6e1:	83 f9 07             	cmp    ecx,0x7
c001c6e4:	77 12                	ja     c001c6f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c6e6:	0f b6 d2             	movzx  edx,dl
c001c6e9:	0f b6 db             	movzx  ebx,bl
c001c6ec:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001c6f4:	01 da                	add    edx,ebx
c001c6f6:	eb 2f                	jmp    c001c727 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c6f8:	83 f9 0d             	cmp    ecx,0xd
c001c6fb:	77 13                	ja     c001c710 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c6fd:	0f b6 d2             	movzx  edx,dl
c001c700:	0f b6 db             	movzx  ebx,bl
c001c703:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001c70a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c70e:	eb 17                	jmp    c001c727 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c710:	83 f9 15             	cmp    ecx,0x15
c001c713:	77 13                	ja     c001c728 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c715:	0f b6 d2             	movzx  edx,dl
c001c718:	0f b6 db             	movzx  ebx,bl
c001c71b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001c723:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c727:	ee                   	out    dx,al
c001c728:	83 c4 1c             	add    esp,0x1c
c001c72b:	5b                   	pop    ebx
c001c72c:	5e                   	pop    esi
c001c72d:	5f                   	pop    edi
c001c72e:	5d                   	pop    ebp
c001c72f:	c3                   	ret    

c001c730 <IDE::read(unsigned char, unsigned char)>:
c001c730:	55                   	push   ebp
c001c731:	57                   	push   edi
c001c732:	56                   	push   esi
c001c733:	53                   	push   ebx
c001c734:	83 ec 1c             	sub    esp,0x1c
c001c737:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c73b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c73f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c742:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c746:	3c 03                	cmp    al,0x3
c001c748:	77 40                	ja     c001c78a <IDE::read(unsigned char, unsigned char)+0x5a>
c001c74a:	0f b6 f9             	movzx  edi,cl
c001c74d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c750:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c755:	0c 80                	or     al,0x80
c001c757:	50                   	push   eax
c001c758:	6a 0c                	push   0xc
c001c75a:	57                   	push   edi
c001c75b:	56                   	push   esi
c001c75c:	e8 0f ff ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c761:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c766:	0f b6 d3             	movzx  edx,bl
c001c769:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c76d:	ec                   	in     al,dx
c001c76e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c772:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c777:	52                   	push   edx
c001c778:	6a 0c                	push   0xc
c001c77a:	57                   	push   edi
c001c77b:	56                   	push   esi
c001c77c:	e8 ef fe ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c781:	83 c4 20             	add    esp,0x20
c001c784:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c788:	eb 4c                	jmp    c001c7d6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c78a:	0f b6 d3             	movzx  edx,bl
c001c78d:	83 fa 07             	cmp    edx,0x7
c001c790:	77 12                	ja     c001c7a4 <IDE::read(unsigned char, unsigned char)+0x74>
c001c792:	0f b6 c9             	movzx  ecx,cl
c001c795:	0f b6 d3             	movzx  edx,bl
c001c798:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001c7a0:	01 c2                	add    edx,eax
c001c7a2:	eb 31                	jmp    c001c7d5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c7a4:	83 fa 0d             	cmp    edx,0xd
c001c7a7:	77 13                	ja     c001c7bc <IDE::read(unsigned char, unsigned char)+0x8c>
c001c7a9:	0f b6 c9             	movzx  ecx,cl
c001c7ac:	0f b6 d3             	movzx  edx,bl
c001c7af:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001c7b6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c7ba:	eb 19                	jmp    c001c7d5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c7bc:	31 c0                	xor    eax,eax
c001c7be:	83 fa 15             	cmp    edx,0x15
c001c7c1:	77 13                	ja     c001c7d6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c7c3:	0f b6 c9             	movzx  ecx,cl
c001c7c6:	0f b6 d3             	movzx  edx,bl
c001c7c9:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c7d1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c7d5:	ec                   	in     al,dx
c001c7d6:	83 c4 1c             	add    esp,0x1c
c001c7d9:	5b                   	pop    ebx
c001c7da:	5e                   	pop    esi
c001c7db:	5f                   	pop    edi
c001c7dc:	5d                   	pop    ebp
c001c7dd:	c3                   	ret    

c001c7de <IDE::waitInterrupt(unsigned char)>:
c001c7de:	55                   	push   ebp
c001c7df:	57                   	push   edi
c001c7e0:	56                   	push   esi
c001c7e1:	53                   	push   ebx
c001c7e2:	31 db                	xor    ebx,ebx
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c7eb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c7f0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c7f8:	89 e8                	mov    eax,ebp
c001c7fa:	84 c0                	test   al,al
c001c7fc:	75 30                	jne    c001c82e <IDE::waitInterrupt(unsigned char)+0x50>
c001c7fe:	50                   	push   eax
c001c7ff:	6a 0c                	push   0xc
c001c801:	56                   	push   esi
c001c802:	57                   	push   edi
c001c803:	e8 28 ff ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	a8 01                	test   al,0x1
c001c80d:	75 27                	jne    c001c836 <IDE::waitInterrupt(unsigned char)+0x58>
c001c80f:	f6 c3 04             	test   bl,0x4
c001c812:	75 12                	jne    c001c826 <IDE::waitInterrupt(unsigned char)+0x48>
c001c814:	83 fb 32             	cmp    ebx,0x32
c001c817:	7e 0d                	jle    c001c826 <IDE::waitInterrupt(unsigned char)+0x48>
c001c819:	83 ec 0c             	sub    esp,0xc
c001c81c:	6a 64                	push   0x64
c001c81e:	e8 75 8e ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	83 fb 3c             	cmp    ebx,0x3c
c001c829:	74 0b                	je     c001c836 <IDE::waitInterrupt(unsigned char)+0x58>
c001c82b:	43                   	inc    ebx
c001c82c:	eb c2                	jmp    c001c7f0 <IDE::waitInterrupt(unsigned char)+0x12>
c001c82e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c836:	83 c4 0c             	add    esp,0xc
c001c839:	89 e8                	mov    eax,ebp
c001c83b:	5b                   	pop    ebx
c001c83c:	5e                   	pop    esi
c001c83d:	5f                   	pop    edi
c001c83e:	5d                   	pop    ebp
c001c83f:	c3                   	ret    

c001c840 <ideChannel0IRQHandler(regs*, void*)>:
c001c840:	83 ec 10             	sub    esp,0x10
c001c843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c847:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c84e:	6a 07                	push   0x7
c001c850:	6a 00                	push   0x0
c001c852:	50                   	push   eax
c001c853:	e8 d8 fe ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001c858:	83 c4 1c             	add    esp,0x1c
c001c85b:	c3                   	ret    

c001c85c <ideChannel1IRQHandler(regs*, void*)>:
c001c85c:	83 ec 10             	sub    esp,0x10
c001c85f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c863:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c86a:	6a 07                	push   0x7
c001c86c:	6a 01                	push   0x1
c001c86e:	50                   	push   eax
c001c86f:	e8 bc fe ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001c874:	83 c4 1c             	add    esp,0x1c
c001c877:	c3                   	ret    

c001c878 <IDE::enableIRQs(unsigned char, bool)>:
c001c878:	57                   	push   edi
c001c879:	b8 02 00 00 00       	mov    eax,0x2
c001c87e:	56                   	push   esi
c001c87f:	53                   	push   ebx
c001c880:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c884:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c888:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c88d:	74 02                	je     c001c891 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c88f:	31 c0                	xor    eax,eax
c001c891:	0f b6 db             	movzx  ebx,bl
c001c894:	bf 04 00 00 00       	mov    edi,0x4
c001c899:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c8a0:	50                   	push   eax
c001c8a1:	6a 0c                	push   0xc
c001c8a3:	53                   	push   ebx
c001c8a4:	56                   	push   esi
c001c8a5:	e8 c6 fd ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	50                   	push   eax
c001c8ae:	6a 0c                	push   0xc
c001c8b0:	53                   	push   ebx
c001c8b1:	56                   	push   esi
c001c8b2:	e8 79 fe ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001c8b7:	83 c4 10             	add    esp,0x10
c001c8ba:	4f                   	dec    edi
c001c8bb:	75 f0                	jne    c001c8ad <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c8bd:	5b                   	pop    ebx
c001c8be:	5e                   	pop    esi
c001c8bf:	5f                   	pop    edi
c001c8c0:	c3                   	ret    
c001c8c1:	90                   	nop

c001c8c2 <IDE::open(int, int, void*)>:
c001c8c2:	57                   	push   edi
c001c8c3:	56                   	push   esi
c001c8c4:	53                   	push   ebx
c001c8c5:	83 ec 10             	sub    esp,0x10
c001c8c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c8cc:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c8d5:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c8de:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c8e5:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c8ec:	0f 85 84 02 00 00    	jne    c001cb76 <IDE::open(int, int, void*)+0x2b4>
c001c8f2:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c8f8:	a8 70                	test   al,0x70
c001c8fa:	75 44                	jne    c001c940 <IDE::open(int, int, void*)+0x7e>
c001c8fc:	ba 20 84 00 00       	mov    edx,0x8420
c001c901:	0f a3 c2             	bt     edx,eax
c001c904:	73 3a                	jae    c001c940 <IDE::open(int, int, void*)+0x7e>
c001c906:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c90c:	83 ec 0c             	sub    esp,0xc
c001c90f:	83 e0 fc             	and    eax,0xfffffffc
c001c912:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c919:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c91f:	83 e0 fc             	and    eax,0xfffffffc
c001c922:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c929:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c92f:	83 e0 fc             	and    eax,0xfffffffc
c001c932:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c939:	68 15 16 02 c0       	push   0xc0021615
c001c93e:	eb 60                	jmp    c001c9a0 <IDE::open(int, int, void*)+0xde>
c001c940:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c94a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c954:	be 64 00 00 00       	mov    esi,0x64
c001c959:	57                   	push   edi
c001c95a:	57                   	push   edi
c001c95b:	68 b4 38 02 c0       	push   0xc00238b4
c001c960:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c964:	57                   	push   edi
c001c965:	e8 d6 3c fe ff       	call   c0000640 <strcpy>
c001c96a:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c971:	31 d2                	xor    edx,edx
c001c973:	89 c8                	mov    eax,ecx
c001c975:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c978:	f7 f6                	div    esi
c001c97a:	be 0a 00 00 00       	mov    esi,0xa
c001c97f:	83 c0 30             	add    eax,0x30
c001c982:	31 d2                	xor    edx,edx
c001c984:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c988:	89 c8                	mov    eax,ecx
c001c98a:	f7 f6                	div    esi
c001c98c:	89 d1                	mov    ecx,edx
c001c98e:	31 d2                	xor    edx,edx
c001c990:	83 c1 30             	add    ecx,0x30
c001c993:	f7 f6                	div    esi
c001c995:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c999:	83 c2 30             	add    edx,0x30
c001c99c:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c9a0:	e8 9b fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c9a5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c9aa:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9b1:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9b8:	c1 e1 10             	shl    ecx,0x10
c001c9bb:	c1 e0 0b             	shl    eax,0xb
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	09 c1                	or     ecx,eax
c001c9c3:	89 fa                	mov    edx,edi
c001c9c5:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9cc:	c1 e0 08             	shl    eax,0x8
c001c9cf:	09 c1                	or     ecx,eax
c001c9d1:	89 c8                	mov    eax,ecx
c001c9d3:	0d 08 00 00 80       	or     eax,0x80000008
c001c9d8:	ef                   	out    dx,eax
c001c9d9:	be fc 0c 00 00       	mov    esi,0xcfc
c001c9de:	89 f2                	mov    edx,esi
c001c9e0:	ed                   	in     eax,dx
c001c9e1:	c1 e8 10             	shr    eax,0x10
c001c9e4:	3d ff ff 00 00       	cmp    eax,0xffff
c001c9e9:	0f 84 e5 00 00 00    	je     c001cad4 <IDE::open(int, int, void*)+0x212>
c001c9ef:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9f5:	89 fa                	mov    edx,edi
c001c9f7:	89 c8                	mov    eax,ecx
c001c9f9:	ef                   	out    dx,eax
c001c9fa:	b0 fe                	mov    al,0xfe
c001c9fc:	89 f2                	mov    edx,esi
c001c9fe:	ee                   	out    dx,al
c001c9ff:	89 c8                	mov    eax,ecx
c001ca01:	89 fa                	mov    edx,edi
c001ca03:	ef                   	out    dx,eax
c001ca04:	89 f2                	mov    edx,esi
c001ca06:	ed                   	in     eax,dx
c001ca07:	3c fe                	cmp    al,0xfe
c001ca09:	0f 85 85 00 00 00    	jne    c001ca94 <IDE::open(int, int, void*)+0x1d2>
c001ca0f:	83 ec 0c             	sub    esp,0xc
c001ca12:	68 4b 16 02 c0       	push   0xc002164b
c001ca17:	e8 24 fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ca1c:	c7 04 24 ba 38 02 c0 	mov    DWORD PTR [esp],0xc00238ba
c001ca23:	e8 3c a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ca28:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ca32:	c7 04 24 6c 18 02 c0 	mov    DWORD PTR [esp],0xc002186c
c001ca39:	e8 02 fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ca3e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ca45:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ca4c:	c1 e1 10             	shl    ecx,0x10
c001ca4f:	c1 e0 08             	shl    eax,0x8
c001ca52:	89 fa                	mov    edx,edi
c001ca54:	09 c1                	or     ecx,eax
c001ca56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ca5d:	c1 e0 0b             	shl    eax,0xb
c001ca60:	09 c1                	or     ecx,eax
c001ca62:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ca68:	89 c8                	mov    eax,ecx
c001ca6a:	ef                   	out    dx,eax
c001ca6b:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ca71:	89 f2                	mov    edx,esi
c001ca73:	ee                   	out    dx,al
c001ca74:	89 c8                	mov    eax,ecx
c001ca76:	89 fa                	mov    edx,edi
c001ca78:	ef                   	out    dx,eax
c001ca79:	89 f2                	mov    edx,esi
c001ca7b:	ed                   	in     eax,dx
c001ca7c:	0f b6 c0             	movzx  eax,al
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ca88:	74 5a                	je     c001cae4 <IDE::open(int, int, void*)+0x222>
c001ca8a:	83 ec 0c             	sub    esp,0xc
c001ca8d:	68 cf 38 02 c0       	push   0xc00238cf
c001ca92:	eb 48                	jmp    c001cadc <IDE::open(int, int, void*)+0x21a>
c001ca94:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca9d:	75 2b                	jne    c001caca <IDE::open(int, int, void*)+0x208>
c001ca9f:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001caa6:	3d 80 00 00 00       	cmp    eax,0x80
c001caab:	74 07                	je     c001cab4 <IDE::open(int, int, void*)+0x1f2>
c001caad:	3d 8a 00 00 00       	cmp    eax,0x8a
c001cab2:	75 16                	jne    c001caca <IDE::open(int, int, void*)+0x208>
c001cab4:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cabb:	83 ec 0c             	sub    esp,0xc
c001cabe:	68 3e 11 02 c0       	push   0xc002113e
c001cac3:	e8 78 fb fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cac8:	eb 17                	jmp    c001cae1 <IDE::open(int, int, void*)+0x21f>
c001caca:	83 ec 0c             	sub    esp,0xc
c001cacd:	68 d7 38 02 c0       	push   0xc00238d7
c001cad2:	eb 08                	jmp    c001cadc <IDE::open(int, int, void*)+0x21a>
c001cad4:	83 ec 0c             	sub    esp,0xc
c001cad7:	68 08 39 02 c0       	push   0xc0023908
c001cadc:	e8 e1 21 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001cae1:	83 c4 10             	add    esp,0x10
c001cae4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001caeb:	0f 84 bf 00 00 00    	je     c001cbb0 <IDE::open(int, int, void*)+0x2ee>
c001caf1:	83 ec 0c             	sub    esp,0xc
c001caf4:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cafa:	83 e0 fc             	and    eax,0xfffffffc
c001cafd:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cb04:	83 c0 08             	add    eax,0x8
c001cb07:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cb0e:	68 32 39 02 c0       	push   0xc0023932
c001cb13:	e8 4c a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cb18:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cb1f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb26:	50                   	push   eax
c001cb27:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb2e:	50                   	push   eax
c001cb2f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cb36:	50                   	push   eax
c001cb37:	ff 35 c0 d0 02 c0    	push   DWORD PTR ds:0xc002d0c0
c001cb3d:	e8 94 f0 ff ff       	call   c001bbd6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb42:	83 c4 18             	add    esp,0x18
c001cb45:	83 c8 07             	or     eax,0x7
c001cb48:	0f b7 c0             	movzx  eax,ax
c001cb4b:	50                   	push   eax
c001cb4c:	6a 04                	push   0x4
c001cb4e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb55:	50                   	push   eax
c001cb56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb5d:	50                   	push   eax
c001cb5e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cb65:	50                   	push   eax
c001cb66:	ff 35 c0 d0 02 c0    	push   DWORD PTR ds:0xc002d0c0
c001cb6c:	e8 a1 f2 ff ff       	call   c001be12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001cb71:	83 c4 20             	add    esp,0x20
c001cb74:	eb 3a                	jmp    c001cbb0 <IDE::open(int, int, void*)+0x2ee>
c001cb76:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cb7c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cb83:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb8a:	05 06 02 00 00       	add    eax,0x206
c001cb8f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb96:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001cb9d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cba4:	05 06 02 00 00       	add    eax,0x206
c001cba9:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	68 63 1d 02 c0       	push   0xc0021d63
c001cbb8:	e8 83 fa fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cbbd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	89 c2                	mov    edx,eax
c001cbc8:	83 e2 0f             	and    edx,0xf
c001cbcb:	83 fa 08             	cmp    edx,0x8
c001cbce:	75 0a                	jne    c001cbda <IDE::open(int, int, void*)+0x318>
c001cbd0:	83 e8 02             	sub    eax,0x2
c001cbd3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cbda:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cbe0:	89 c2                	mov    edx,eax
c001cbe2:	83 e2 0f             	and    edx,0xf
c001cbe5:	83 fa 08             	cmp    edx,0x8
c001cbe8:	75 0a                	jne    c001cbf4 <IDE::open(int, int, void*)+0x332>
c001cbea:	83 e8 02             	sub    eax,0x2
c001cbed:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cbf4:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cbfb:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cc02:	89 d0                	mov    eax,edx
c001cc04:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc07:	8d 7a 01             	lea    edi,[edx+0x1]
c001cc0a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc0e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cc12:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cc16:	83 e1 3f             	and    ecx,0x3f
c001cc19:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cc1d:	89 f9                	mov    ecx,edi
c001cc1f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc26:	0f b6 c9             	movzx  ecx,cl
c001cc29:	8d 78 02             	lea    edi,[eax+0x2]
c001cc2c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc2f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc33:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc37:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cc3b:	83 e2 3f             	and    edx,0x3f
c001cc3e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cc42:	89 f9                	mov    ecx,edi
c001cc44:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc4a:	0f b6 d1             	movzx  edx,cl
c001cc4d:	8d 78 03             	lea    edi,[eax+0x3]
c001cc50:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc53:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc57:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cc5b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cc5f:	83 e1 3f             	and    ecx,0x3f
c001cc62:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cc66:	89 fa                	mov    edx,edi
c001cc68:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cc6e:	0f b6 ca             	movzx  ecx,dl
c001cc71:	8d 78 04             	lea    edi,[eax+0x4]
c001cc74:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc77:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc7b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cc7f:	89 fa                	mov    edx,edi
c001cc81:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cc87:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cc8b:	83 e2 3f             	and    edx,0x3f
c001cc8e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cc92:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cc99:	66 85 f6             	test   si,si
c001cc9c:	74 24                	je     c001ccc2 <IDE::open(int, int, void*)+0x400>
c001cc9e:	89 f9                	mov    ecx,edi
c001cca0:	83 c0 05             	add    eax,0x5
c001cca3:	0f b6 d1             	movzx  edx,cl
c001cca6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cca9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ccad:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ccb1:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ccb7:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ccbb:	83 e0 3f             	and    eax,0x3f
c001ccbe:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ccc2:	83 ec 0c             	sub    esp,0xc
c001ccc5:	68 4a 39 02 c0       	push   0xc002394a
c001ccca:	e8 71 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cccf:	58                   	pop    eax
c001ccd0:	5a                   	pop    edx
c001ccd1:	6a 00                	push   0x0
c001ccd3:	53                   	push   ebx
c001ccd4:	e8 71 f9 ff ff       	call   c001c64a <IDE::prepareInterrupt(unsigned char)>
c001ccd9:	59                   	pop    ecx
c001ccda:	5e                   	pop    esi
c001ccdb:	6a 01                	push   0x1
c001ccdd:	53                   	push   ebx
c001ccde:	e8 67 f9 ff ff       	call   c001c64a <IDE::prepareInterrupt(unsigned char)>
c001cce3:	c7 04 24 cd 31 02 c0 	mov    DWORD PTR [esp],0xc00231cd
c001ccea:	e8 51 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ccef:	83 c4 0c             	add    esp,0xc
c001ccf2:	6a 00                	push   0x0
c001ccf4:	6a 00                	push   0x0
c001ccf6:	53                   	push   ebx
c001ccf7:	e8 7c fb ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001ccfc:	83 c4 0c             	add    esp,0xc
c001ccff:	6a 00                	push   0x0
c001cd01:	6a 01                	push   0x1
c001cd03:	53                   	push   ebx
c001cd04:	e8 6f fb ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001cd09:	c7 04 24 4c 39 02 c0 	mov    DWORD PTR [esp],0xc002394c
c001cd10:	e8 2b f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cd1f:	74 3c                	je     c001cd5d <IDE::open(int, int, void*)+0x49b>
c001cd21:	83 ec 0c             	sub    esp,0xc
c001cd24:	53                   	push   ebx
c001cd25:	6a 01                	push   0x1
c001cd27:	68 40 c8 01 c0       	push   0xc001c840
c001cd2c:	6a 0e                	push   0xe
c001cd2e:	53                   	push   ebx
c001cd2f:	e8 ba c2 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd34:	83 c4 14             	add    esp,0x14
c001cd37:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd3d:	53                   	push   ebx
c001cd3e:	6a 01                	push   0x1
c001cd40:	68 5c c8 01 c0       	push   0xc001c85c
c001cd45:	6a 0f                	push   0xf
c001cd47:	53                   	push   ebx
c001cd48:	e8 a1 c2 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd4d:	83 c4 14             	add    esp,0x14
c001cd50:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd56:	68 72 1a 02 c0       	push   0xc0021a72
c001cd5b:	eb 40                	jmp    c001cd9d <IDE::open(int, int, void*)+0x4db>
c001cd5d:	83 ec 0c             	sub    esp,0xc
c001cd60:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cd6a:	53                   	push   ebx
c001cd6b:	6a 00                	push   0x0
c001cd6d:	68 40 c8 01 c0       	push   0xc001c840
c001cd72:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd78:	53                   	push   ebx
c001cd79:	e8 70 c2 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd7e:	83 c4 14             	add    esp,0x14
c001cd81:	53                   	push   ebx
c001cd82:	6a 00                	push   0x0
c001cd84:	68 5c c8 01 c0       	push   0xc001c85c
c001cd89:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cd8f:	53                   	push   ebx
c001cd90:	e8 59 c2 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd95:	83 c4 14             	add    esp,0x14
c001cd98:	68 78 26 02 c0       	push   0xc0022678
c001cd9d:	e8 9e f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	68 4e 39 02 c0       	push   0xc002394e
c001cdad:	e8 8e f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cdb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdb7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cdba:	c7 04 24 26 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a26
c001cdc1:	e8 7a f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cdc6:	83 c4 0c             	add    esp,0xc
c001cdc9:	6a 07                	push   0x7
c001cdcb:	6a 00                	push   0x0
c001cdcd:	53                   	push   ebx
c001cdce:	e8 5d f9 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	6a 07                	push   0x7
c001cdd8:	6a 01                	push   0x1
c001cdda:	53                   	push   ebx
c001cddb:	e8 50 f9 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cde0:	c7 04 24 88 24 02 c0 	mov    DWORD PTR [esp],0xc0022488
c001cde7:	e8 54 f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cdec:	83 c4 0c             	add    esp,0xc
c001cdef:	6a 01                	push   0x1
c001cdf1:	6a 00                	push   0x0
c001cdf3:	53                   	push   ebx
c001cdf4:	e8 7f fa ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001cdf9:	83 c4 0c             	add    esp,0xc
c001cdfc:	6a 01                	push   0x1
c001cdfe:	6a 01                	push   0x1
c001ce00:	53                   	push   ebx
c001ce01:	e8 72 fa ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001ce06:	c7 04 24 51 39 02 c0 	mov    DWORD PTR [esp],0xc0023951
c001ce0d:	e8 2e f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce12:	83 c4 20             	add    esp,0x20
c001ce15:	31 c0                	xor    eax,eax
c001ce17:	5b                   	pop    ebx
c001ce18:	5e                   	pop    esi
c001ce19:	5f                   	pop    edi
c001ce1a:	c3                   	ret    
c001ce1b:	90                   	nop

c001ce1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ce1c:	55                   	push   ebp
c001ce1d:	57                   	push   edi
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	83 ec 1c             	sub    esp,0x1c
c001ce23:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ce27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce2b:	8d 42 f8             	lea    eax,[edx-0x8]
c001ce2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce32:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ce36:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ce3a:	3c 03                	cmp    al,0x3
c001ce3c:	77 5a                	ja     c001ce98 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001ce3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ce42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ce46:	0f b6 db             	movzx  ebx,bl
c001ce49:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ce4c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce51:	0c 80                	or     al,0x80
c001ce53:	50                   	push   eax
c001ce54:	6a 0c                	push   0xc
c001ce56:	53                   	push   ebx
c001ce57:	56                   	push   esi
c001ce58:	e8 13 f8 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ce62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ce66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce6a:	0f b6 d2             	movzx  edx,dl
c001ce6d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ce71:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce73:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce78:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce7c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce84:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ce8c:	83 c4 2c             	add    esp,0x2c
c001ce8f:	5b                   	pop    ebx
c001ce90:	5e                   	pop    esi
c001ce91:	5f                   	pop    edi
c001ce92:	5d                   	pop    ebp
c001ce93:	e9 d8 f7 ff ff       	jmp    c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce98:	0f b6 c2             	movzx  eax,dl
c001ce9b:	83 f8 07             	cmp    eax,0x7
c001ce9e:	77 12                	ja     c001ceb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cea0:	0f b6 c2             	movzx  eax,dl
c001cea3:	0f b6 db             	movzx  ebx,bl
c001cea6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ceae:	01 c2                	add    edx,eax
c001ceb0:	eb 2f                	jmp    c001cee1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ceb2:	83 f8 0d             	cmp    eax,0xd
c001ceb5:	77 13                	ja     c001ceca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ceb7:	0f b6 db             	movzx  ebx,bl
c001ceba:	0f b6 d2             	movzx  edx,dl
c001cebd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cec4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cec8:	eb 17                	jmp    c001cee1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ceca:	83 f8 15             	cmp    eax,0x15
c001cecd:	77 14                	ja     c001cee3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cecf:	0f b6 db             	movzx  ebx,bl
c001ced2:	0f b6 d2             	movzx  edx,dl
c001ced5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cedd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cee1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cee3:	83 c4 1c             	add    esp,0x1c
c001cee6:	5b                   	pop    ebx
c001cee7:	5e                   	pop    esi
c001cee8:	5f                   	pop    edi
c001cee9:	5d                   	pop    ebp
c001ceea:	c3                   	ret    
c001ceeb:	90                   	nop

c001ceec <IDE::detect()>:
c001ceec:	55                   	push   ebp
c001ceed:	57                   	push   edi
c001ceee:	56                   	push   esi
c001ceef:	53                   	push   ebx
c001cef0:	81 ec 28 02 00 00    	sub    esp,0x228
c001cef6:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cefd:	68 53 39 02 c0       	push   0xc0023953
c001cf02:	e8 39 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf07:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001cf0d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001cf11:	83 c4 10             	add    esp,0x10
c001cf14:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001cf19:	0f 85 2f 04 00 00    	jne    c001d34e <IDE::detect()+0x462>
c001cf1f:	83 ec 0c             	sub    esp,0xc
c001cf22:	31 f6                	xor    esi,esi
c001cf24:	68 56 39 02 c0       	push   0xc0023956
c001cf29:	31 ff                	xor    edi,edi
c001cf2b:	e8 10 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf30:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	83 ec 0c             	sub    esp,0xc
c001cf3d:	68 59 39 02 c0       	push   0xc0023959
c001cf42:	e8 f9 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf47:	83 c4 10             	add    esp,0x10
c001cf4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cf51:	83 ec 0c             	sub    esp,0xc
c001cf54:	31 ed                	xor    ebp,ebp
c001cf56:	68 5c 39 02 c0       	push   0xc002395c
c001cf5b:	e8 e0 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf60:	89 f8                	mov    eax,edi
c001cf62:	c1 e0 06             	shl    eax,0x6
c001cf65:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cf6d:	c7 04 24 5f 39 02 c0 	mov    DWORD PTR [esp],0xc002395f
c001cf74:	e8 c7 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf79:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cf7d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cf81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf85:	c1 e0 04             	shl    eax,0x4
c001cf88:	83 c8 a0             	or     eax,0xffffffa0
c001cf8b:	0f b6 c0             	movzx  eax,al
c001cf8e:	50                   	push   eax
c001cf8f:	6a 06                	push   0x6
c001cf91:	56                   	push   esi
c001cf92:	53                   	push   ebx
c001cf93:	e8 d8 f6 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf98:	83 c4 1c             	add    esp,0x1c
c001cf9b:	6a 0c                	push   0xc
c001cf9d:	56                   	push   esi
c001cf9e:	53                   	push   ebx
c001cf9f:	e8 8c f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cfa4:	83 c4 0c             	add    esp,0xc
c001cfa7:	6a 0c                	push   0xc
c001cfa9:	56                   	push   esi
c001cfaa:	53                   	push   ebx
c001cfab:	e8 80 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cfb0:	83 c4 0c             	add    esp,0xc
c001cfb3:	6a 0c                	push   0xc
c001cfb5:	56                   	push   esi
c001cfb6:	53                   	push   ebx
c001cfb7:	e8 74 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cfbc:	83 c4 0c             	add    esp,0xc
c001cfbf:	6a 0c                	push   0xc
c001cfc1:	56                   	push   esi
c001cfc2:	53                   	push   ebx
c001cfc3:	e8 68 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cfc8:	c7 04 24 62 39 02 c0 	mov    DWORD PTR [esp],0xc0023962
c001cfcf:	e8 6c f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cfd4:	68 ec 00 00 00       	push   0xec
c001cfd9:	6a 07                	push   0x7
c001cfdb:	56                   	push   esi
c001cfdc:	53                   	push   ebx
c001cfdd:	e8 8e f6 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfe2:	83 c4 1c             	add    esp,0x1c
c001cfe5:	6a 0c                	push   0xc
c001cfe7:	56                   	push   esi
c001cfe8:	53                   	push   ebx
c001cfe9:	e8 42 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cfee:	83 c4 0c             	add    esp,0xc
c001cff1:	6a 0c                	push   0xc
c001cff3:	56                   	push   esi
c001cff4:	53                   	push   ebx
c001cff5:	e8 36 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001cffa:	83 c4 0c             	add    esp,0xc
c001cffd:	6a 0c                	push   0xc
c001cfff:	56                   	push   esi
c001d000:	53                   	push   ebx
c001d001:	e8 2a f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d006:	83 c4 0c             	add    esp,0xc
c001d009:	6a 0c                	push   0xc
c001d00b:	56                   	push   esi
c001d00c:	53                   	push   ebx
c001d00d:	e8 1e f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d012:	c7 04 24 65 39 02 c0 	mov    DWORD PTR [esp],0xc0023965
c001d019:	e8 22 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d01e:	83 c4 0c             	add    esp,0xc
c001d021:	6a 0c                	push   0xc
c001d023:	56                   	push   esi
c001d024:	53                   	push   ebx
c001d025:	e8 06 f7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	84 c0                	test   al,al
c001d02f:	75 1f                	jne    c001d050 <IDE::detect()+0x164>
c001d031:	83 ec 0c             	sub    esp,0xc
c001d034:	68 68 39 02 c0       	push   0xc0023968
c001d039:	e8 02 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d03e:	e9 e9 02 00 00       	jmp    c001d32c <IDE::detect()+0x440>
c001d043:	a8 80                	test   al,0x80
c001d045:	74 21                	je     c001d068 <IDE::detect()+0x17c>
c001d047:	45                   	inc    ebp
c001d048:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d04e:	7f 1e                	jg     c001d06e <IDE::detect()+0x182>
c001d050:	50                   	push   eax
c001d051:	6a 0c                	push   0xc
c001d053:	56                   	push   esi
c001d054:	53                   	push   ebx
c001d055:	e8 d6 f6 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	a8 01                	test   al,0x1
c001d05f:	74 e2                	je     c001d043 <IDE::detect()+0x157>
c001d061:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d066:	eb 22                	jmp    c001d08a <IDE::detect()+0x19e>
c001d068:	a8 08                	test   al,0x8
c001d06a:	74 db                	je     c001d047 <IDE::detect()+0x15b>
c001d06c:	eb 17                	jmp    c001d085 <IDE::detect()+0x199>
c001d06e:	83 ec 0c             	sub    esp,0xc
c001d071:	6a 32                	push   0x32
c001d073:	e8 20 86 ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001d078:	83 c4 10             	add    esp,0x10
c001d07b:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d081:	75 cd                	jne    c001d050 <IDE::detect()+0x164>
c001d083:	eb dc                	jmp    c001d061 <IDE::detect()+0x175>
c001d085:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	68 6b 39 02 c0       	push   0xc002396b
c001d092:	e8 a9 f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d097:	83 c4 10             	add    esp,0x10
c001d09a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d09f:	74 60                	je     c001d101 <IDE::detect()+0x215>
c001d0a1:	50                   	push   eax
c001d0a2:	6a 04                	push   0x4
c001d0a4:	56                   	push   esi
c001d0a5:	53                   	push   ebx
c001d0a6:	e8 85 f6 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d0ab:	83 c4 0c             	add    esp,0xc
c001d0ae:	89 c5                	mov    ebp,eax
c001d0b0:	6a 05                	push   0x5
c001d0b2:	56                   	push   esi
c001d0b3:	53                   	push   ebx
c001d0b4:	e8 77 f6 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d0b9:	83 c4 10             	add    esp,0x10
c001d0bc:	89 e9                	mov    ecx,ebp
c001d0be:	0f b6 c0             	movzx  eax,al
c001d0c1:	0f b6 e9             	movzx  ebp,cl
c001d0c4:	83 fd 14             	cmp    ebp,0x14
c001d0c7:	75 07                	jne    c001d0d0 <IDE::detect()+0x1e4>
c001d0c9:	3d eb 00 00 00       	cmp    eax,0xeb
c001d0ce:	eb 0e                	jmp    c001d0de <IDE::detect()+0x1f2>
c001d0d0:	3d 96 00 00 00       	cmp    eax,0x96
c001d0d5:	0f 85 54 02 00 00    	jne    c001d32f <IDE::detect()+0x443>
c001d0db:	83 fd 69             	cmp    ebp,0x69
c001d0de:	0f 85 4b 02 00 00    	jne    c001d32f <IDE::detect()+0x443>
c001d0e4:	68 a1 00 00 00       	push   0xa1
c001d0e9:	6a 07                	push   0x7
c001d0eb:	56                   	push   esi
c001d0ec:	53                   	push   ebx
c001d0ed:	e8 7e f5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d0f9:	e8 9a 85 ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001d0fe:	83 c4 10             	add    esp,0x10
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	89 fd                	mov    ebp,edi
c001d106:	68 6e 39 02 c0       	push   0xc002396e
c001d10b:	c1 e5 06             	shl    ebp,0x6
c001d10e:	e8 2d f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d113:	01 dd                	add    ebp,ebx
c001d115:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d119:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d120:	52                   	push   edx
c001d121:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d125:	6a 00                	push   0x0
c001d127:	56                   	push   esi
c001d128:	53                   	push   ebx
c001d129:	e8 ee fc ff ff       	call   c001ce1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d12e:	83 c4 14             	add    esp,0x14
c001d131:	68 72 39 02 c0       	push   0xc0023972
c001d136:	e8 05 f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d13b:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d140:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d147:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d14e:	89 f0                	mov    eax,esi
c001d150:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d156:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d15a:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d164:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d16b:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d173:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d17a:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d182:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d188:	c7 04 24 76 39 02 c0 	mov    DWORD PTR [esp],0xc0023976
c001d18f:	e8 ac f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d19e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1a2:	74 09                	je     c001d1ad <IDE::detect()+0x2c1>
c001d1a4:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d1ab:	eb 07                	jmp    c001d1b4 <IDE::detect()+0x2c8>
c001d1ad:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d1b4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1b8:	89 f8                	mov    eax,edi
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	c1 e0 06             	shl    eax,0x6
c001d1c0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d1c3:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d1c9:	68 7a 39 02 c0       	push   0xc002397a
c001d1ce:	e8 6d f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d1d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1d7:	89 e8                	mov    eax,ebp
c001d1d9:	83 c4 10             	add    esp,0x10
c001d1dc:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d1df:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d1e2:	83 c0 02             	add    eax,0x2
c001d1e5:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d1eb:	83 c2 02             	add    edx,0x2
c001d1ee:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d1f1:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d1f7:	39 d5                	cmp    ebp,edx
c001d1f9:	75 e4                	jne    c001d1df <IDE::detect()+0x2f3>
c001d1fb:	89 f8                	mov    eax,edi
c001d1fd:	c1 e0 06             	shl    eax,0x6
c001d200:	01 d8                	add    eax,ebx
c001d202:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d209:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d210:	c1 ea 09             	shr    edx,0x9
c001d213:	83 e2 01             	and    edx,0x1
c001d216:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d21d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d223:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d227:	74 0c                	je     c001d235 <IDE::detect()+0x349>
c001d229:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d232:	0f 95 c2             	setne  dl
c001d235:	83 ec 0c             	sub    esp,0xc
c001d238:	89 fd                	mov    ebp,edi
c001d23a:	c1 e5 06             	shl    ebp,0x6
c001d23d:	01 dd                	add    ebp,ebx
c001d23f:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d245:	68 7e 39 02 c0       	push   0xc002397e
c001d24a:	e8 f1 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d24f:	83 c4 10             	add    esp,0x10
c001d252:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d257:	75 66                	jne    c001d2bf <IDE::detect()+0x3d3>
c001d259:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d260:	0f 84 b8 00 00 00    	je     c001d31e <IDE::detect()+0x432>
c001d266:	83 ec 0c             	sub    esp,0xc
c001d269:	68 82 39 02 c0       	push   0xc0023982
c001d26e:	e8 cd f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d273:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d27a:	e8 fc 16 ff ff       	call   c000e97b <malloc>
c001d27f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d282:	89 c5                	mov    ebp,eax
c001d284:	e8 43 05 00 00       	call   c001d7cc <ATA::ATA()>
c001d289:	c7 04 24 86 39 02 c0 	mov    DWORD PTR [esp],0xc0023986
c001d290:	e8 ab f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d295:	59                   	pop    ecx
c001d296:	58                   	pop    eax
c001d297:	55                   	push   ebp
c001d298:	53                   	push   ebx
c001d299:	e8 a4 bd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d29e:	c7 04 24 8b 39 02 c0 	mov    DWORD PTR [esp],0xc002398b
c001d2a5:	e8 96 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d2aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ad:	53                   	push   ebx
c001d2ae:	57                   	push   edi
c001d2af:	6a 00                	push   0x0
c001d2b1:	55                   	push   ebp
c001d2b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2b5:	83 c4 14             	add    esp,0x14
c001d2b8:	68 90 39 02 c0       	push   0xc0023990
c001d2bd:	eb 57                	jmp    c001d316 <IDE::detect()+0x42a>
c001d2bf:	83 ec 0c             	sub    esp,0xc
c001d2c2:	68 95 39 02 c0       	push   0xc0023995
c001d2c7:	e8 74 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d2cc:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d2d3:	e8 a3 16 ff ff       	call   c000e97b <malloc>
c001d2d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2db:	89 c5                	mov    ebp,eax
c001d2dd:	e8 98 0c 00 00       	call   c001df7a <ATAPI::ATAPI()>
c001d2e2:	c7 04 24 9b 39 02 c0 	mov    DWORD PTR [esp],0xc002399b
c001d2e9:	e8 52 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d2ee:	58                   	pop    eax
c001d2ef:	5a                   	pop    edx
c001d2f0:	55                   	push   ebp
c001d2f1:	53                   	push   ebx
c001d2f2:	e8 4b bd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d2f7:	c7 04 24 a2 39 02 c0 	mov    DWORD PTR [esp],0xc00239a2
c001d2fe:	e8 3d f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d303:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d306:	53                   	push   ebx
c001d307:	57                   	push   edi
c001d308:	6a 00                	push   0x0
c001d30a:	55                   	push   ebp
c001d30b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d30e:	83 c4 14             	add    esp,0x14
c001d311:	68 a9 39 02 c0       	push   0xc00239a9
c001d316:	e8 25 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d31b:	83 c4 10             	add    esp,0x10
c001d31e:	83 ec 0c             	sub    esp,0xc
c001d321:	47                   	inc    edi
c001d322:	68 b0 39 02 c0       	push   0xc00239b0
c001d327:	e8 14 f3 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d333:	74 0c                	je     c001d341 <IDE::detect()+0x455>
c001d335:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d33c:	e9 10 fc ff ff       	jmp    c001cf51 <IDE::detect()+0x65>
c001d341:	4e                   	dec    esi
c001d342:	74 0a                	je     c001d34e <IDE::detect()+0x462>
c001d344:	be 01 00 00 00       	mov    esi,0x1
c001d349:	e9 ec fb ff ff       	jmp    c001cf3a <IDE::detect()+0x4e>
c001d34e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d354:	5b                   	pop    ebx
c001d355:	5e                   	pop    esi
c001d356:	5f                   	pop    edi
c001d357:	5d                   	pop    ebp
c001d358:	c3                   	ret    
c001d359:	90                   	nop

c001d35a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d35a:	55                   	push   ebp
c001d35b:	57                   	push   edi
c001d35c:	56                   	push   esi
c001d35d:	53                   	push   ebx
c001d35e:	83 ec 1c             	sub    esp,0x1c
c001d361:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d365:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d36d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d375:	88 c3                	mov    bl,al
c001d377:	25 ff 00 00 00       	and    eax,0xff
c001d37c:	0f 84 88 00 00 00    	je     c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d382:	83 ec 0c             	sub    esp,0xc
c001d385:	89 c7                	mov    edi,eax
c001d387:	68 b4 39 02 c0       	push   0xc00239b4
c001d38c:	e8 d3 9b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d391:	83 c4 10             	add    esp,0x10
c001d394:	83 ff 01             	cmp    edi,0x1
c001d397:	74 6b                	je     c001d404 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d399:	83 ff 02             	cmp    edi,0x2
c001d39c:	75 58                	jne    c001d3f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d39e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d3a3:	01 ff                	add    edi,edi
c001d3a5:	50                   	push   eax
c001d3a6:	09 fe                	or     esi,edi
c001d3a8:	6a 01                	push   0x1
c001d3aa:	89 f0                	mov    eax,esi
c001d3ac:	0f b6 f0             	movzx  esi,al
c001d3af:	c1 e6 06             	shl    esi,0x6
c001d3b2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d3ba:	50                   	push   eax
c001d3bb:	55                   	push   ebp
c001d3bc:	e8 6f f3 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	a8 01                	test   al,0x1
c001d3c6:	74 02                	je     c001d3ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d3c8:	b3 07                	mov    bl,0x7
c001d3ca:	a8 02                	test   al,0x2
c001d3cc:	74 02                	je     c001d3d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d3ce:	b3 03                	mov    bl,0x3
c001d3d0:	a8 04                	test   al,0x4
c001d3d2:	74 02                	je     c001d3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d3d4:	b3 14                	mov    bl,0x14
c001d3d6:	a8 08                	test   al,0x8
c001d3d8:	74 02                	je     c001d3dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d3da:	b3 03                	mov    bl,0x3
c001d3dc:	a8 10                	test   al,0x10
c001d3de:	74 02                	je     c001d3e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d3e0:	b3 15                	mov    bl,0x15
c001d3e2:	a8 20                	test   al,0x20
c001d3e4:	74 02                	je     c001d3e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d3e6:	b3 03                	mov    bl,0x3
c001d3e8:	a8 40                	test   al,0x40
c001d3ea:	74 02                	je     c001d3ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d3ec:	b3 16                	mov    bl,0x16
c001d3ee:	a8 80                	test   al,0x80
c001d3f0:	74 18                	je     c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d3f2:	b3 0d                	mov    bl,0xd
c001d3f4:	eb 14                	jmp    c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d3f6:	83 ff 03             	cmp    edi,0x3
c001d3f9:	74 0d                	je     c001d408 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d3fb:	83 ff 04             	cmp    edi,0x4
c001d3fe:	75 0a                	jne    c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d400:	b3 08                	mov    bl,0x8
c001d402:	eb 06                	jmp    c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d404:	b3 13                	mov    bl,0x13
c001d406:	eb 02                	jmp    c001d40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d408:	b3 17                	mov    bl,0x17
c001d40a:	83 c4 1c             	add    esp,0x1c
c001d40d:	88 d8                	mov    al,bl
c001d40f:	5b                   	pop    ebx
c001d410:	5e                   	pop    esi
c001d411:	5f                   	pop    edi
c001d412:	5d                   	pop    ebp
c001d413:	c3                   	ret    

c001d414 <IDE::polling(unsigned char, unsigned int)>:
c001d414:	57                   	push   edi
c001d415:	56                   	push   esi
c001d416:	53                   	push   ebx
c001d417:	bb 04 00 00 00       	mov    ebx,0x4
c001d41c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d420:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d425:	52                   	push   edx
c001d426:	6a 0c                	push   0xc
c001d428:	56                   	push   esi
c001d429:	57                   	push   edi
c001d42a:	e8 01 f3 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	4b                   	dec    ebx
c001d433:	75 f0                	jne    c001d425 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d435:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d43a:	50                   	push   eax
c001d43b:	6a 0c                	push   0xc
c001d43d:	56                   	push   esi
c001d43e:	57                   	push   edi
c001d43f:	e8 ec f2 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d444:	83 c4 10             	add    esp,0x10
c001d447:	a8 01                	test   al,0x1
c001d449:	75 17                	jne    c001d462 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d44b:	a8 20                	test   al,0x20
c001d44d:	75 0f                	jne    c001d45e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d44f:	4b                   	dec    ebx
c001d450:	74 10                	je     c001d462 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d452:	a8 80                	test   al,0x80
c001d454:	75 e4                	jne    c001d43a <IDE::polling(unsigned char, unsigned int)+0x26>
c001d456:	a8 08                	test   al,0x8
c001d458:	74 e0                	je     c001d43a <IDE::polling(unsigned char, unsigned int)+0x26>
c001d45a:	31 c0                	xor    eax,eax
c001d45c:	eb 06                	jmp    c001d464 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d45e:	b0 01                	mov    al,0x1
c001d460:	eb 02                	jmp    c001d464 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d462:	b0 02                	mov    al,0x2
c001d464:	5b                   	pop    ebx
c001d465:	5e                   	pop    esi
c001d466:	5f                   	pop    edi
c001d467:	c3                   	ret    

c001d468 <SATABus::close(int, int, void*)>:
c001d468:	31 c0                	xor    eax,eax
c001d46a:	c3                   	ret    
c001d46b:	90                   	nop

c001d46c <SATABus::detect()>:
c001d46c:	c3                   	ret    
c001d46d:	90                   	nop

c001d46e <SATABus::SATABus()>:
c001d46e:	83 ec 0c             	sub    esp,0xc
c001d471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d475:	83 ec 08             	sub    esp,0x8
c001d478:	68 ec 39 02 c0       	push   0xc00239ec
c001d47d:	50                   	push   eax
c001d47e:	e8 19 bf fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c001d48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48f:	89 10                	mov    DWORD PTR [eax],edx
c001d491:	83 ec 0c             	sub    esp,0xc
c001d494:	6a 50                	push   0x50
c001d496:	e8 ea 1a ff ff       	call   c000ef85 <Phys::allocateContiguousPages(int)>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	89 c2                	mov    edx,eax
c001d4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	6a 50                	push   0x50
c001d4af:	e8 8b 4b ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	89 c2                	mov    edx,eax
c001d4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d4c3:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d4c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4cc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	6a 03                	push   0x3
c001d4e1:	6a 50                	push   0x50
c001d4e3:	51                   	push   ecx
c001d4e4:	52                   	push   edx
c001d4e5:	50                   	push   eax
c001d4e6:	e8 21 54 ff ff       	call   c001290c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d4eb:	83 c4 20             	add    esp,0x20
c001d4ee:	90                   	nop
c001d4ef:	83 c4 0c             	add    esp,0xc
c001d4f2:	c3                   	ret    
c001d4f3:	90                   	nop

c001d4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4f8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d4fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d4fe:	09 c2                	or     edx,eax
c001d500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d50a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d50c:	31 c0                	xor    eax,eax
c001d50e:	c1 e9 08             	shr    ecx,0x8
c001d511:	83 e1 0f             	and    ecx,0xf
c001d514:	39 c8                	cmp    eax,ecx
c001d516:	74 0a                	je     c001d522 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d518:	f6 c2 01             	test   dl,0x1
c001d51b:	74 08                	je     c001d525 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d51d:	d1 ea                	shr    edx,1
c001d51f:	40                   	inc    eax
c001d520:	eb f2                	jmp    c001d514 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d522:	83 c8 ff             	or     eax,0xffffffff
c001d525:	c3                   	ret    

c001d526 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d526:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d52a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d52d:	89 c2                	mov    edx,eax
c001d52f:	c1 ea 08             	shr    edx,0x8
c001d532:	83 e2 0f             	and    edx,0xf
c001d535:	4a                   	dec    edx
c001d536:	75 32                	jne    c001d56a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d538:	83 e0 0f             	and    eax,0xf
c001d53b:	83 f8 03             	cmp    eax,0x3
c001d53e:	75 2a                	jne    c001d56a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d540:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d543:	b8 02 00 00 00       	mov    eax,0x2
c001d548:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d54e:	74 1c                	je     c001d56c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d550:	b8 04 00 00 00       	mov    eax,0x4
c001d555:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d55b:	74 0f                	je     c001d56c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d55d:	31 c0                	xor    eax,eax
c001d55f:	83 fa 03             	cmp    edx,0x3
c001d562:	0f 94 c0             	sete   al
c001d565:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d569:	c3                   	ret    
c001d56a:	31 c0                	xor    eax,eax
c001d56c:	c3                   	ret    
c001d56d:	90                   	nop

c001d56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d56e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d572:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d575:	0f ba e2 0f          	bt     edx,0xf
c001d579:	72 f7                	jb     c001d572 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d57b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d57e:	83 ca 10             	or     edx,0x10
c001d581:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d584:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d587:	83 ca 01             	or     edx,0x1
c001d58a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d58d:	c3                   	ret    

c001d58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d592:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d595:	83 e2 fe             	and    edx,0xfffffffe
c001d598:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d59b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d59e:	83 e2 ef             	and    edx,0xffffffef
c001d5a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d5a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d5a7:	0f ba e2 0e          	bt     edx,0xe
c001d5ab:	72 f7                	jb     c001d5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d5ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d5b0:	0f ba e2 0f          	bt     edx,0xf
c001d5b4:	72 ee                	jb     c001d5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d5b6:	c3                   	ret    
c001d5b7:	90                   	nop

c001d5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d5b8:	55                   	push   ebp
c001d5b9:	57                   	push   edi
c001d5ba:	56                   	push   esi
c001d5bb:	53                   	push   ebx
c001d5bc:	83 ec 1c             	sub    esp,0x1c
c001d5bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d5c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d5c7:	53                   	push   ebx
c001d5c8:	56                   	push   esi
c001d5c9:	e8 c0 ff ff ff       	call   c001d58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d5ce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d5d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	c1 e5 0a             	shl    ebp,0xa
c001d5de:	01 e8                	add    eax,ebp
c001d5e0:	89 03                	mov    DWORD PTR [ebx],eax
c001d5e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d5e4:	68 00 04 00 00       	push   0x400
c001d5e9:	6a 00                	push   0x0
c001d5eb:	50                   	push   eax
c001d5ec:	e8 ff 2e fe ff       	call   c00004f0 <memset>
c001d5f1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d5f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d5fb:	01 e8                	add    eax,ebp
c001d5fd:	83 c4 1c             	add    esp,0x1c
c001d600:	89 03                	mov    DWORD PTR [ebx],eax
c001d602:	c1 e2 08             	shl    edx,0x8
c001d605:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d60c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d612:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d618:	01 f8                	add    eax,edi
c001d61a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d61d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d620:	68 00 01 00 00       	push   0x100
c001d625:	6a 00                	push   0x0
c001d627:	50                   	push   eax
c001d628:	e8 c3 2e fe ff       	call   c00004f0 <memset>
c001d62d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001d633:	01 fa                	add    edx,edi
c001d635:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d639:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d63c:	c1 e7 0d             	shl    edi,0xd
c001d63f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d646:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d64c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d656:	31 ff                	xor    edi,edi
c001d658:	83 c4 10             	add    esp,0x10
c001d65b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d665:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d66b:	83 c5 20             	add    ebp,0x20
c001d66e:	01 f8                	add    eax,edi
c001d670:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d673:	52                   	push   edx
c001d674:	68 00 01 00 00       	push   0x100
c001d679:	6a 00                	push   0x0
c001d67b:	50                   	push   eax
c001d67c:	e8 6f 2e fe ff       	call   c00004f0 <memset>
c001d681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d68e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d695:	01 f8                	add    eax,edi
c001d697:	81 c7 00 01 00 00    	add    edi,0x100
c001d69d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d6a0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d6a6:	75 b3                	jne    c001d65b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001d6a8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d6af:	50                   	push   eax
c001d6b0:	50                   	push   eax
c001d6b1:	53                   	push   ebx
c001d6b2:	56                   	push   esi
c001d6b3:	e8 b6 fe ff ff       	call   c001d56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d6b8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d6bf:	83 c4 2c             	add    esp,0x2c
c001d6c2:	5b                   	pop    ebx
c001d6c3:	5e                   	pop    esi
c001d6c4:	5f                   	pop    edi
c001d6c5:	5d                   	pop    ebp
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d6c8:	55                   	push   ebp
c001d6c9:	57                   	push   edi
c001d6ca:	56                   	push   esi
c001d6cb:	53                   	push   ebx
c001d6cc:	31 db                	xor    ebx,ebx
c001d6ce:	83 ec 0c             	sub    esp,0xc
c001d6d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d6d9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d6dc:	f7 c7 01 00 00 00    	test   edi,0x1
c001d6e2:	74 7a                	je     c001d75e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d6e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d6e8:	89 d8                	mov    eax,ebx
c001d6ea:	c1 e0 07             	shl    eax,0x7
c001d6ed:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d6f4:	55                   	push   ebp
c001d6f5:	56                   	push   esi
c001d6f6:	e8 2b fe ff ff       	call   c001d526 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d6fb:	5a                   	pop    edx
c001d6fc:	83 f8 01             	cmp    eax,0x1
c001d6ff:	59                   	pop    ecx
c001d700:	75 21                	jne    c001d723 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d702:	50                   	push   eax
c001d703:	53                   	push   ebx
c001d704:	55                   	push   ebp
c001d705:	56                   	push   esi
c001d706:	e8 ad fe ff ff       	call   c001d5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d70b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d712:	e8 64 12 ff ff       	call   c000e97b <malloc>
c001d717:	89 c5                	mov    ebp,eax
c001d719:	89 04 24             	mov    DWORD PTR [esp],eax
c001d71c:	e8 25 0f 00 00       	call   c001e646 <SATA::SATA()>
c001d721:	eb 24                	jmp    c001d747 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d723:	83 f8 04             	cmp    eax,0x4
c001d726:	75 36                	jne    c001d75e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d728:	51                   	push   ecx
c001d729:	53                   	push   ebx
c001d72a:	55                   	push   ebp
c001d72b:	56                   	push   esi
c001d72c:	e8 87 fe ff ff       	call   c001d5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d731:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d738:	e8 3e 12 ff ff       	call   c000e97b <malloc>
c001d73d:	89 c5                	mov    ebp,eax
c001d73f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d742:	e8 97 12 00 00       	call   c001e9de <SATAPI::SATAPI()>
c001d747:	58                   	pop    eax
c001d748:	5a                   	pop    edx
c001d749:	55                   	push   ebp
c001d74a:	56                   	push   esi
c001d74b:	e8 f2 b8 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d750:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d753:	56                   	push   esi
c001d754:	6a 00                	push   0x0
c001d756:	53                   	push   ebx
c001d757:	55                   	push   ebp
c001d758:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d75b:	83 c4 20             	add    esp,0x20
c001d75e:	d1 ef                	shr    edi,1
c001d760:	43                   	inc    ebx
c001d761:	83 fb 20             	cmp    ebx,0x20
c001d764:	0f 85 72 ff ff ff    	jne    c001d6dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d76a:	83 c4 0c             	add    esp,0xc
c001d76d:	5b                   	pop    ebx
c001d76e:	5e                   	pop    esi
c001d76f:	5f                   	pop    edi
c001d770:	5d                   	pop    ebp
c001d771:	c3                   	ret    

c001d772 <SATABus::open(int, int, void*)>:
c001d772:	53                   	push   ebx
c001d773:	83 ec 08             	sub    esp,0x8
c001d776:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d77a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d780:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d786:	e8 8d 7a ff ff       	call   c0015218 <KeDisablePreemption()>
c001d78b:	52                   	push   edx
c001d78c:	52                   	push   edx
c001d78d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d793:	53                   	push   ebx
c001d794:	e8 2f ff ff ff       	call   c001d6c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d799:	e8 a2 7a ff ff       	call   c0015240 <KeRestorePreemption()>
c001d79e:	31 c0                	xor    eax,eax
c001d7a0:	83 c4 18             	add    esp,0x18
c001d7a3:	5b                   	pop    ebx
c001d7a4:	c3                   	ret    
c001d7a5:	90                   	nop

c001d7a6 <ATA::close(int, int, void*)>:
c001d7a6:	83 ec 0c             	sub    esp,0xc
c001d7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7b3:	85 c0                	test   eax,eax
c001d7b5:	74 0c                	je     c001d7c3 <ATA::close(int, int, void*)+0x1d>
c001d7b7:	83 ec 0c             	sub    esp,0xc
c001d7ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001d7bc:	50                   	push   eax
c001d7bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d7c0:	83 c4 10             	add    esp,0x10
c001d7c3:	31 c0                	xor    eax,eax
c001d7c5:	83 c4 0c             	add    esp,0xc
c001d7c8:	c3                   	ret    
c001d7c9:	90                   	nop

c001d7ca <ATA::powerSaving(PowerSavingLevel)>:
c001d7ca:	c3                   	ret    
c001d7cb:	90                   	nop

c001d7cc <ATA::ATA()>:
c001d7cc:	83 ec 0c             	sub    esp,0xc
c001d7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d3:	83 ec 04             	sub    esp,0x4
c001d7d6:	68 00 02 00 00       	push   0x200
c001d7db:	68 99 3b 02 c0       	push   0xc0023b99
c001d7e0:	50                   	push   eax
c001d7e1:	e8 40 bc fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7e6:	83 c4 10             	add    esp,0x10
c001d7e9:	ba 00 3b 02 c0       	mov    edx,0xc0023b00
c001d7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f2:	89 10                	mov    DWORD PTR [eax],edx
c001d7f4:	90                   	nop
c001d7f5:	83 c4 0c             	add    esp,0xc
c001d7f8:	c3                   	ret    
c001d7f9:	90                   	nop

c001d7fa <ATA::flush(bool)>:
c001d7fa:	53                   	push   ebx
c001d7fb:	83 ec 08             	sub    esp,0x8
c001d7fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d802:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d807:	83 f8 01             	cmp    eax,0x1
c001d80a:	19 c0                	sbb    eax,eax
c001d80c:	83 e0 fd             	and    eax,0xfffffffd
c001d80f:	05 ea 00 00 00       	add    eax,0xea
c001d814:	50                   	push   eax
c001d815:	6a 07                	push   0x7
c001d817:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d81e:	50                   	push   eax
c001d81f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d825:	e8 46 ee ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d82a:	83 c4 0c             	add    esp,0xc
c001d82d:	6a 00                	push   0x0
c001d82f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d836:	50                   	push   eax
c001d837:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d83d:	e8 d2 fb ff ff       	call   c001d414 <IDE::polling(unsigned char, unsigned int)>
c001d842:	83 c4 18             	add    esp,0x18
c001d845:	5b                   	pop    ebx
c001d846:	c3                   	ret    
c001d847:	90                   	nop

c001d848 <ATA::readyForCommand()>:
c001d848:	56                   	push   esi
c001d849:	53                   	push   ebx
c001d84a:	53                   	push   ebx
c001d84b:	31 db                	xor    ebx,ebx
c001d84d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d851:	51                   	push   ecx
c001d852:	6a 0c                	push   0xc
c001d854:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d85b:	50                   	push   eax
c001d85c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d862:	e8 c9 ee ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	a8 88                	test   al,0x88
c001d86c:	74 1f                	je     c001d88d <ATA::readyForCommand()+0x45>
c001d86e:	43                   	inc    ebx
c001d86f:	83 fb 63             	cmp    ebx,0x63
c001d872:	7e dd                	jle    c001d851 <ATA::readyForCommand()+0x9>
c001d874:	83 ec 0c             	sub    esp,0xc
c001d877:	6a 0a                	push   0xa
c001d879:	e8 1a 7e ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d887:	75 c8                	jne    c001d851 <ATA::readyForCommand()+0x9>
c001d889:	31 c0                	xor    eax,eax
c001d88b:	eb 02                	jmp    c001d88f <ATA::readyForCommand()+0x47>
c001d88d:	b0 01                	mov    al,0x1
c001d88f:	5a                   	pop    edx
c001d890:	5b                   	pop    ebx
c001d891:	5e                   	pop    esi
c001d892:	c3                   	ret    
c001d893:	90                   	nop

c001d894 <ATA::access(unsigned long long, int, void*, bool)>:
c001d894:	55                   	push   ebp
c001d895:	57                   	push   edi
c001d896:	56                   	push   esi
c001d897:	53                   	push   ebx
c001d898:	83 ec 2c             	sub    esp,0x2c
c001d89b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d89f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d8a3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d8a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8ab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d8af:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d8b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d8b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d8c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8cb:	c1 e0 06             	shl    eax,0x6
c001d8ce:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d8d6:	74 5d                	je     c001d935 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d8d8:	89 fa                	mov    edx,edi
c001d8da:	89 f0                	mov    eax,esi
c001d8dc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d8e0:	c1 ea 1c             	shr    edx,0x1c
c001d8e3:	89 d1                	mov    ecx,edx
c001d8e5:	09 c1                	or     ecx,eax
c001d8e7:	74 25                	je     c001d90e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d8e9:	31 ed                	xor    ebp,ebp
c001d8eb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d8f2:	89 fa                	mov    edx,edi
c001d8f4:	89 f0                	mov    eax,esi
c001d8f6:	0f ad d0             	shrd   eax,edx,cl
c001d8f9:	d3 ea                	shr    edx,cl
c001d8fb:	f6 c1 20             	test   cl,0x20
c001d8fe:	74 02                	je     c001d902 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d900:	89 d0                	mov    eax,edx
c001d902:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d906:	45                   	inc    ebp
c001d907:	83 fd 06             	cmp    ebp,0x6
c001d90a:	75 df                	jne    c001d8eb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d90c:	eb 76                	jmp    c001d984 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d90e:	89 f0                	mov    eax,esi
c001d910:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d915:	89 fa                	mov    edx,edi
c001d917:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d91e:	0f ac d0 10          	shrd   eax,edx,0x10
c001d922:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d927:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d92b:	c1 ee 18             	shr    esi,0x18
c001d92e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d933:	eb 56                	jmp    c001d98b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d935:	6a 00                	push   0x0
c001d937:	6a 3f                	push   0x3f
c001d939:	57                   	push   edi
c001d93a:	56                   	push   esi
c001d93b:	e8 24 25 00 00       	call   c001fe64 <__umoddi3>
c001d940:	83 c4 10             	add    esp,0x10
c001d943:	40                   	inc    eax
c001d944:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d948:	6a 00                	push   0x0
c001d94a:	68 f0 03 00 00       	push   0x3f0
c001d94f:	57                   	push   edi
c001d950:	56                   	push   esi
c001d951:	e8 0e 24 00 00       	call   c001fd64 <__udivdi3>
c001d956:	83 c4 10             	add    esp,0x10
c001d959:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d95e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d965:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d96a:	6a 00                	push   0x0
c001d96c:	6a 3f                	push   0x3f
c001d96e:	57                   	push   edi
c001d96f:	56                   	push   esi
c001d970:	e8 ef 23 00 00       	call   c001fd64 <__udivdi3>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	83 e0 0f             	and    eax,0xf
c001d97b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d980:	89 c6                	mov    esi,eax
c001d982:	eb 07                	jmp    c001d98b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d984:	31 f6                	xor    esi,esi
c001d986:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d98b:	55                   	push   ebp
c001d98c:	6a 00                	push   0x0
c001d98e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d995:	50                   	push   eax
c001d996:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d99a:	e8 d9 ee ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001d99f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9a2:	e8 a1 fe ff ff       	call   c001d848 <ATA::readyForCommand()>
c001d9a7:	83 c4 10             	add    esp,0x10
c001d9aa:	84 c0                	test   al,al
c001d9ac:	75 0a                	jne    c001d9b8 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001d9ae:	be 01 00 00 00       	mov    esi,0x1
c001d9b3:	e9 c2 02 00 00       	jmp    c001dc7a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001d9b8:	fa                   	cli    
c001d9b9:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d9bf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d9c5:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001d9ca:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d9d0:	75 0a                	jne    c001d9dc <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001d9d2:	c1 e0 04             	shl    eax,0x4
c001d9d5:	09 c6                	or     esi,eax
c001d9d7:	83 ce a0             	or     esi,0xffffffa0
c001d9da:	eb 08                	jmp    c001d9e4 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001d9dc:	c1 e0 04             	shl    eax,0x4
c001d9df:	09 c6                	or     esi,eax
c001d9e1:	83 ce e0             	or     esi,0xffffffe0
c001d9e4:	89 f0                	mov    eax,esi
c001d9e6:	0f b6 d2             	movzx  edx,dl
c001d9e9:	0f b6 f0             	movzx  esi,al
c001d9ec:	56                   	push   esi
c001d9ed:	6a 06                	push   0x6
c001d9ef:	52                   	push   edx
c001d9f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9f6:	e8 75 ec ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9fb:	83 c4 10             	add    esp,0x10
c001d9fe:	6a 00                	push   0x0
c001da00:	6a 01                	push   0x1
c001da02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da09:	50                   	push   eax
c001da0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da10:	e8 5b ec ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001da1d:	83 f8 02             	cmp    eax,0x2
c001da20:	75 6e                	jne    c001da90 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001da22:	6a 00                	push   0x0
c001da24:	6a 08                	push   0x8
c001da26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da2d:	50                   	push   eax
c001da2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da34:	e8 37 ec ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da39:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001da3e:	50                   	push   eax
c001da3f:	6a 09                	push   0x9
c001da41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da48:	50                   	push   eax
c001da49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da4f:	e8 1c ec ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da54:	83 c4 20             	add    esp,0x20
c001da57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001da5c:	50                   	push   eax
c001da5d:	6a 0a                	push   0xa
c001da5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da66:	50                   	push   eax
c001da67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da6d:	e8 fe eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da72:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001da77:	50                   	push   eax
c001da78:	6a 0b                	push   0xb
c001da7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da81:	50                   	push   eax
c001da82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da88:	e8 e3 eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da8d:	83 c4 20             	add    esp,0x20
c001da90:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001da95:	50                   	push   eax
c001da96:	6a 02                	push   0x2
c001da98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da9f:	50                   	push   eax
c001daa0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daa6:	e8 c5 eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daab:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001dab0:	50                   	push   eax
c001dab1:	6a 03                	push   0x3
c001dab3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daba:	50                   	push   eax
c001dabb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dac1:	e8 aa eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dac6:	83 c4 20             	add    esp,0x20
c001dac9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001dace:	50                   	push   eax
c001dacf:	6a 04                	push   0x4
c001dad1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dad8:	50                   	push   eax
c001dad9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dadf:	e8 8c eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dae4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dae9:	50                   	push   eax
c001daea:	6a 05                	push   0x5
c001daec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daf3:	50                   	push   eax
c001daf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dafa:	e8 71 eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daff:	83 c4 20             	add    esp,0x20
c001db02:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001db07:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001db0c:	74 13                	je     c001db21 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001db0e:	83 f8 02             	cmp    eax,0x2
c001db11:	74 20                	je     c001db33 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001db13:	48                   	dec    eax
c001db14:	0f 85 94 fe ff ff    	jne    c001d9ae <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001db1a:	b8 30 00 00 00       	mov    eax,0x30
c001db1f:	eb 1e                	jmp    c001db3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001db21:	83 f8 02             	cmp    eax,0x2
c001db24:	74 14                	je     c001db3a <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001db26:	48                   	dec    eax
c001db27:	b8 20 00 00 00       	mov    eax,0x20
c001db2c:	74 11                	je     c001db3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001db2e:	e9 7b fe ff ff       	jmp    c001d9ae <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001db33:	b8 34 00 00 00       	mov    eax,0x34
c001db38:	eb 05                	jmp    c001db3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001db3a:	b8 24 00 00 00       	mov    eax,0x24
c001db3f:	50                   	push   eax
c001db40:	6a 07                	push   0x7
c001db42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db49:	50                   	push   eax
c001db4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db50:	e8 1b eb ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db55:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001db66:	75 01                	jne    c001db69 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001db68:	fb                   	sti    
c001db69:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001db6d:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001db72:	85 f6                	test   esi,esi
c001db74:	0f 84 dd 00 00 00    	je     c001dc57 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001db7a:	57                   	push   edi
c001db7b:	6a 01                	push   0x1
c001db7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db84:	50                   	push   eax
c001db85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db8b:	e8 84 f8 ff ff       	call   c001d414 <IDE::polling(unsigned char, unsigned int)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	0f b6 c0             	movzx  eax,al
c001db96:	85 c0                	test   eax,eax
c001db98:	74 23                	je     c001dbbd <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001db9a:	50                   	push   eax
c001db9b:	89 c6                	mov    esi,eax
c001db9d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001dba4:	50                   	push   eax
c001dba5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dbac:	50                   	push   eax
c001dbad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dbb3:	e8 a2 f7 ff ff       	call   c001d35a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dbb8:	e9 ba 00 00 00       	jmp    c001dc77 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001dbbd:	85 ed                	test   ebp,ebp
c001dbbf:	74 49                	je     c001dc0a <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001dbc1:	fa                   	cli    
c001dbc2:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001dbc8:	31 c9                	xor    ecx,ecx
c001dbca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dbce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dbd2:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001dbd6:	51                   	push   ecx
c001dbd7:	51                   	push   ecx
c001dbd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dbdf:	50                   	push   eax
c001dbe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dbe6:	e8 73 ea ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001dbeb:	89 c2                	mov    edx,eax
c001dbed:	89 f8                	mov    eax,edi
c001dbef:	66 ef                	out    dx,ax
c001dbf1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	41                   	inc    ecx
c001dbf9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001dbff:	75 c9                	jne    c001dbca <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001dc01:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001dc08:	eb 35                	jmp    c001dc3f <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001dc0a:	fa                   	cli    
c001dc0b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001dc11:	52                   	push   edx
c001dc12:	52                   	push   edx
c001dc13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc1a:	50                   	push   eax
c001dc1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc21:	e8 38 ea ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001dc26:	b9 00 01 00 00       	mov    ecx,0x100
c001dc2b:	89 c2                	mov    edx,eax
c001dc2d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001dc31:	fc                   	cld    
c001dc32:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001dc35:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001dc3c:	83 c4 10             	add    esp,0x10
c001dc3f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001dc46:	75 01                	jne    c001dc49 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001dc48:	fb                   	sti    
c001dc49:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001dc51:	4e                   	dec    esi
c001dc52:	e9 1b ff ff ff       	jmp    c001db72 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001dc57:	31 f6                	xor    esi,esi
c001dc59:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dc5e:	74 1a                	je     c001dc7a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001dc60:	50                   	push   eax
c001dc61:	50                   	push   eax
c001dc62:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001dc67:	83 f8 02             	cmp    eax,0x2
c001dc6a:	0f 94 c0             	sete   al
c001dc6d:	0f b6 c0             	movzx  eax,al
c001dc70:	50                   	push   eax
c001dc71:	53                   	push   ebx
c001dc72:	e8 83 fb ff ff       	call   c001d7fa <ATA::flush(bool)>
c001dc77:	83 c4 10             	add    esp,0x10
c001dc7a:	83 c4 2c             	add    esp,0x2c
c001dc7d:	89 f0                	mov    eax,esi
c001dc7f:	5b                   	pop    ebx
c001dc80:	5e                   	pop    esi
c001dc81:	5f                   	pop    edi
c001dc82:	5d                   	pop    ebp
c001dc83:	c3                   	ret    

c001dc84 <ATA::read(unsigned long long, int, void*)>:
c001dc84:	57                   	push   edi
c001dc85:	b8 04 00 00 00       	mov    eax,0x4
c001dc8a:	56                   	push   esi
c001dc8b:	53                   	push   ebx
c001dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dc94:	8d 7a ff             	lea    edi,[edx-0x1]
c001dc97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dc9b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dc9f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dca5:	77 25                	ja     c001dccc <ATA::read(unsigned long long, int, void*)+0x48>
c001dca7:	b8 06 00 00 00       	mov    eax,0x6
c001dcac:	85 f6                	test   esi,esi
c001dcae:	74 1c                	je     c001dccc <ATA::read(unsigned long long, int, void*)+0x48>
c001dcb0:	50                   	push   eax
c001dcb1:	50                   	push   eax
c001dcb2:	6a 00                	push   0x0
c001dcb4:	56                   	push   esi
c001dcb5:	52                   	push   edx
c001dcb6:	53                   	push   ebx
c001dcb7:	51                   	push   ecx
c001dcb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcbc:	e8 d3 fb ff ff       	call   c001d894 <ATA::access(unsigned long long, int, void*, bool)>
c001dcc1:	83 c4 20             	add    esp,0x20
c001dcc4:	85 c0                	test   eax,eax
c001dcc6:	0f 95 c0             	setne  al
c001dcc9:	0f b6 c0             	movzx  eax,al
c001dccc:	5b                   	pop    ebx
c001dccd:	5e                   	pop    esi
c001dcce:	5f                   	pop    edi
c001dccf:	c3                   	ret    

c001dcd0 <ATA::write(unsigned long long, int, void*)>:
c001dcd0:	57                   	push   edi
c001dcd1:	b8 04 00 00 00       	mov    eax,0x4
c001dcd6:	56                   	push   esi
c001dcd7:	53                   	push   ebx
c001dcd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dce0:	8d 7a ff             	lea    edi,[edx-0x1]
c001dce3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dce7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dceb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dcf1:	77 25                	ja     c001dd18 <ATA::write(unsigned long long, int, void*)+0x48>
c001dcf3:	b8 06 00 00 00       	mov    eax,0x6
c001dcf8:	85 f6                	test   esi,esi
c001dcfa:	74 1c                	je     c001dd18 <ATA::write(unsigned long long, int, void*)+0x48>
c001dcfc:	50                   	push   eax
c001dcfd:	50                   	push   eax
c001dcfe:	6a 01                	push   0x1
c001dd00:	56                   	push   esi
c001dd01:	52                   	push   edx
c001dd02:	53                   	push   ebx
c001dd03:	51                   	push   ecx
c001dd04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd08:	e8 87 fb ff ff       	call   c001d894 <ATA::access(unsigned long long, int, void*, bool)>
c001dd0d:	83 c4 20             	add    esp,0x20
c001dd10:	85 c0                	test   eax,eax
c001dd12:	0f 95 c0             	setne  al
c001dd15:	0f b6 c0             	movzx  eax,al
c001dd18:	5b                   	pop    ebx
c001dd19:	5e                   	pop    esi
c001dd1a:	5f                   	pop    edi
c001dd1b:	c3                   	ret    

c001dd1c <ATA::detectCHS()>:
c001dd1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dd20:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dd26:	c1 e0 06             	shl    eax,0x6
c001dd29:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dd2f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dd39:	c7 44 24 04 3c 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a3c
c001dd41:	e9 7c 0f ff ff       	jmp    c000ecc2 <KePanic(char const*)>

c001dd46 <ATA::open(int, int, void*)>:
c001dd46:	53                   	push   ebx
c001dd47:	83 ec 08             	sub    esp,0x8
c001dd4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd56:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dd5c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd62:	c1 e0 06             	shl    eax,0x6
c001dd65:	01 d0                	add    eax,edx
c001dd67:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dd6e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dd74:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dd7b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dd85:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dd8b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dd92:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dd99:	75 0c                	jne    c001dda7 <ATA::open(int, int, void*)+0x61>
c001dd9b:	83 ec 0c             	sub    esp,0xc
c001dd9e:	53                   	push   ebx
c001dd9f:	e8 78 ff ff ff       	call   c001dd1c <ATA::detectCHS()>
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ddad:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ddb3:	c1 e0 06             	shl    eax,0x6
c001ddb6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ddbd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ddc7:	d1 e8                	shr    eax,1
c001ddc9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ddcf:	6a 04                	push   0x4
c001ddd1:	6a 0c                	push   0xc
c001ddd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddda:	50                   	push   eax
c001dddb:	52                   	push   edx
c001dddc:	e8 8f e8 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde1:	90                   	nop
c001dde2:	90                   	nop
c001dde3:	6a 00                	push   0x0
c001dde5:	6a 0c                	push   0xc
c001dde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddee:	50                   	push   eax
c001ddef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddf5:	e8 76 e8 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddfa:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001de00:	83 c4 20             	add    esp,0x20
c001de03:	c1 e0 06             	shl    eax,0x6
c001de06:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001de0c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001de13:	0f 84 00 01 00 00    	je     c001df19 <ATA::open(int, int, void*)+0x1d3>
c001de19:	83 ec 0c             	sub    esp,0xc
c001de1c:	6a 08                	push   0x8
c001de1e:	e8 62 11 ff ff       	call   c000ef85 <Phys::allocateContiguousPages(int)>
c001de23:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001de29:	c7 04 24 4e 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a4e
c001de30:	e8 2f 91 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001de35:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001de3c:	e8 fe 41 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001de41:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001de47:	6a 03                	push   0x3
c001de49:	50                   	push   eax
c001de4a:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001de50:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001de56:	e8 c7 48 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001de5b:	83 c4 20             	add    esp,0x20
c001de5e:	e8 53 10 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001de63:	83 ec 0c             	sub    esp,0xc
c001de66:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001de6c:	6a 01                	push   0x1
c001de6e:	e8 cc 41 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001de73:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001de79:	6a 03                	push   0x3
c001de7b:	50                   	push   eax
c001de7c:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001de82:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001de88:	e8 95 48 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001de8d:	83 c4 14             	add    esp,0x14
c001de90:	68 87 3a 02 c0       	push   0xc0023a87
c001de95:	e8 ca 90 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001de9a:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001dea1:	50                   	push   eax
c001dea2:	6a 12                	push   0x12
c001dea4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001deab:	50                   	push   eax
c001deac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001deb2:	e8 b9 e7 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deb7:	83 c4 20             	add    esp,0x20
c001deba:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001dec0:	0f b6 c4             	movzx  eax,ah
c001dec3:	50                   	push   eax
c001dec4:	6a 13                	push   0x13
c001dec6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001decd:	50                   	push   eax
c001dece:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ded4:	e8 97 e7 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ded9:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001dee0:	50                   	push   eax
c001dee1:	6a 14                	push   0x14
c001dee3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001deea:	50                   	push   eax
c001deeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001def1:	e8 7a e7 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001def6:	83 c4 20             	add    esp,0x20
c001def9:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001df00:	50                   	push   eax
c001df01:	6a 15                	push   0x15
c001df03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df0a:	50                   	push   eax
c001df0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df11:	e8 5a e7 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df16:	83 c4 10             	add    esp,0x10
c001df19:	83 ec 0c             	sub    esp,0xc
c001df1c:	53                   	push   ebx
c001df1d:	e8 6c b5 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001df22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df25:	e8 38 c4 fe ff       	call   c000a362 <createPartitionsForDisk(PhysicalDisk*)>
c001df2a:	31 c0                	xor    eax,eax
c001df2c:	83 c4 18             	add    esp,0x18
c001df2f:	5b                   	pop    ebx
c001df30:	c3                   	ret    

c001df31 <combineCharAndColour(char, unsigned char)>:
c001df31:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001df36:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001df3c:	c1 e0 08             	shl    eax,0x8
c001df3f:	09 d0                	or     eax,edx
c001df41:	c3                   	ret    

c001df42 <combineColours(unsigned char, unsigned char)>:
c001df42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001df47:	c1 e0 04             	shl    eax,0x4
c001df4a:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001df4e:	c3                   	ret    
c001df4f:	90                   	nop

c001df50 <ATAPI::write(unsigned long long, int, void*)>:
c001df50:	b8 03 00 00 00       	mov    eax,0x3
c001df55:	c3                   	ret    

c001df56 <ATAPI::close(int, int, void*)>:
c001df56:	83 ec 0c             	sub    esp,0xc
c001df59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df63:	85 c0                	test   eax,eax
c001df65:	74 0c                	je     c001df73 <ATAPI::close(int, int, void*)+0x1d>
c001df67:	83 ec 0c             	sub    esp,0xc
c001df6a:	8b 10                	mov    edx,DWORD PTR [eax]
c001df6c:	50                   	push   eax
c001df6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	31 c0                	xor    eax,eax
c001df75:	83 c4 0c             	add    esp,0xc
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <ATAPI::ATAPI()>:
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df81:	83 ec 04             	sub    esp,0x4
c001df84:	68 00 08 00 00       	push   0x800
c001df89:	68 39 3c 02 c0       	push   0xc0023c39
c001df8e:	50                   	push   eax
c001df8f:	e8 92 b4 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df94:	83 c4 10             	add    esp,0x10
c001df97:	ba 48 3b 02 c0       	mov    edx,0xc0023b48
c001df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa0:	89 10                	mov    DWORD PTR [eax],edx
c001dfa2:	90                   	nop
c001dfa3:	83 c4 0c             	add    esp,0xc
c001dfa6:	c3                   	ret    
c001dfa7:	90                   	nop

c001dfa8 <ATAPI::readyForCommand()>:
c001dfa8:	56                   	push   esi
c001dfa9:	53                   	push   ebx
c001dfaa:	53                   	push   ebx
c001dfab:	31 db                	xor    ebx,ebx
c001dfad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfb1:	51                   	push   ecx
c001dfb2:	6a 0c                	push   0xc
c001dfb4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dfbb:	50                   	push   eax
c001dfbc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dfc2:	e8 69 e7 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	a8 88                	test   al,0x88
c001dfcc:	74 25                	je     c001dff3 <ATAPI::readyForCommand()+0x4b>
c001dfce:	43                   	inc    ebx
c001dfcf:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dfd5:	7e da                	jle    c001dfb1 <ATAPI::readyForCommand()+0x9>
c001dfd7:	83 ec 0c             	sub    esp,0xc
c001dfda:	68 5e 01 00 00       	push   0x15e
c001dfdf:	e8 b4 76 ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001dfe4:	83 c4 10             	add    esp,0x10
c001dfe7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dfed:	75 c2                	jne    c001dfb1 <ATAPI::readyForCommand()+0x9>
c001dfef:	31 c0                	xor    eax,eax
c001dff1:	eb 02                	jmp    c001dff5 <ATAPI::readyForCommand()+0x4d>
c001dff3:	b0 01                	mov    al,0x1
c001dff5:	5a                   	pop    edx
c001dff6:	5b                   	pop    ebx
c001dff7:	5e                   	pop    esi
c001dff8:	c3                   	ret    
c001dff9:	90                   	nop

c001dffa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dffa:	55                   	push   ebp
c001dffb:	57                   	push   edi
c001dffc:	56                   	push   esi
c001dffd:	53                   	push   ebx
c001dffe:	83 ec 20             	sub    esp,0x20
c001e001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e005:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001e009:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e00d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e011:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e015:	6a 01                	push   0x1
c001e017:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e01e:	50                   	push   eax
c001e01f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e025:	e8 4e e8 ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001e02a:	5e                   	pop    esi
c001e02b:	58                   	pop    eax
c001e02c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e033:	50                   	push   eax
c001e034:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e03a:	e8 0b e6 ff ff       	call   c001c64a <IDE::prepareInterrupt(unsigned char)>
c001e03f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e042:	e8 61 ff ff ff       	call   c001dfa8 <ATAPI::readyForCommand()>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	84 c0                	test   al,al
c001e04c:	75 0a                	jne    c001e058 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001e04e:	bb 01 00 00 00       	mov    ebx,0x1
c001e053:	e9 60 02 00 00       	jmp    c001e2b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e058:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e05e:	c1 e0 04             	shl    eax,0x4
c001e061:	0f b6 c0             	movzx  eax,al
c001e064:	50                   	push   eax
c001e065:	6a 06                	push   0x6
c001e067:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e06e:	50                   	push   eax
c001e06f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e075:	e8 f6 e5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e07a:	6a 00                	push   0x0
c001e07c:	6a 01                	push   0x1
c001e07e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e085:	50                   	push   eax
c001e086:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e08c:	e8 df e5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e091:	83 c4 20             	add    esp,0x20
c001e094:	0f b6 c3             	movzx  eax,bl
c001e097:	0f b6 df             	movzx  ebx,bh
c001e09a:	50                   	push   eax
c001e09b:	6a 04                	push   0x4
c001e09d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e0a4:	50                   	push   eax
c001e0a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e0ab:	e8 c0 e5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0b0:	53                   	push   ebx
c001e0b1:	6a 05                	push   0x5
c001e0b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e0ba:	50                   	push   eax
c001e0bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e0c1:	e8 aa e5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0c6:	83 c4 20             	add    esp,0x20
c001e0c9:	68 a0 00 00 00       	push   0xa0
c001e0ce:	6a 07                	push   0x7
c001e0d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e0d7:	50                   	push   eax
c001e0d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e0de:	e8 8d e5 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0e3:	83 c4 0c             	add    esp,0xc
c001e0e6:	6a 01                	push   0x1
c001e0e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e0ef:	50                   	push   eax
c001e0f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e0f6:	e8 19 f3 ff ff       	call   c001d414 <IDE::polling(unsigned char, unsigned int)>
c001e0fb:	83 c4 10             	add    esp,0x10
c001e0fe:	0f b6 d8             	movzx  ebx,al
c001e101:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e107:	85 db                	test   ebx,ebx
c001e109:	74 20                	je     c001e12b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001e10b:	53                   	push   ebx
c001e10c:	0f b6 c0             	movzx  eax,al
c001e10f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e116:	52                   	push   edx
c001e117:	50                   	push   eax
c001e118:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e11e:	e8 37 f2 ff ff       	call   c001d35a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e123:	83 c4 10             	add    esp,0x10
c001e126:	e9 8d 01 00 00       	jmp    c001e2b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e12b:	0f b6 c0             	movzx  eax,al
c001e12e:	53                   	push   ebx
c001e12f:	53                   	push   ebx
c001e130:	50                   	push   eax
c001e131:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e137:	e8 22 e5 ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001e13c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e140:	b9 06 00 00 00       	mov    ecx,0x6
c001e145:	89 c2                	mov    edx,eax
c001e147:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e14a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001e156:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e15a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e160:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e167:	85 db                	test   ebx,ebx
c001e169:	0f 84 ec 00 00 00    	je     c001e25b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001e16f:	51                   	push   ecx
c001e170:	51                   	push   ecx
c001e171:	52                   	push   edx
c001e172:	50                   	push   eax
c001e173:	e8 66 e6 ff ff       	call   c001c7de <IDE::waitInterrupt(unsigned char)>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	84 c0                	test   al,al
c001e17d:	0f 84 cb fe ff ff    	je     c001e04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e183:	56                   	push   esi
c001e184:	56                   	push   esi
c001e185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e18c:	50                   	push   eax
c001e18d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e193:	e8 b2 e4 ff ff       	call   c001c64a <IDE::prepareInterrupt(unsigned char)>
c001e198:	83 c4 0c             	add    esp,0xc
c001e19b:	6a 04                	push   0x4
c001e19d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e1a4:	50                   	push   eax
c001e1a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e1ab:	e8 80 e5 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	89 c6                	mov    esi,eax
c001e1b5:	6a 05                	push   0x5
c001e1b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e1be:	50                   	push   eax
c001e1bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e1c5:	e8 66 e5 ff ff       	call   c001c730 <IDE::read(unsigned char, unsigned char)>
c001e1ca:	89 f1                	mov    ecx,esi
c001e1cc:	0f b6 c0             	movzx  eax,al
c001e1cf:	0f b6 f1             	movzx  esi,cl
c001e1d2:	c1 e0 08             	shl    eax,0x8
c001e1d5:	09 c6                	or     esi,eax
c001e1d7:	d1 fe                	sar    esi,1
c001e1d9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e1e5:	74 41                	je     c001e228 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001e1e7:	31 c9                	xor    ecx,ecx
c001e1e9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e1ef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e1f6:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001e1fa:	75 0a                	jne    c001e206 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001e1fc:	01 c9                	add    ecx,ecx
c001e1fe:	01 cd                	add    ebp,ecx
c001e200:	4b                   	dec    ebx
c001e201:	e9 54 ff ff ff       	jmp    c001e15a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001e206:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001e20b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e20f:	51                   	push   ecx
c001e210:	51                   	push   ecx
c001e211:	52                   	push   edx
c001e212:	50                   	push   eax
c001e213:	e8 46 e4 ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001e218:	89 c2                	mov    edx,eax
c001e21a:	89 f0                	mov    eax,esi
c001e21c:	66 ef                	out    dx,ax
c001e21e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e222:	83 c4 10             	add    esp,0x10
c001e225:	41                   	inc    ecx
c001e226:	eb c1                	jmp    c001e1e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001e228:	31 f6                	xor    esi,esi
c001e22a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e230:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e237:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e23b:	75 06                	jne    c001e243 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001e23d:	01 f6                	add    esi,esi
c001e23f:	01 f5                	add    ebp,esi
c001e241:	eb bd                	jmp    c001e200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001e243:	51                   	push   ecx
c001e244:	51                   	push   ecx
c001e245:	52                   	push   edx
c001e246:	50                   	push   eax
c001e247:	e8 12 e4 ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001e24c:	89 c2                	mov    edx,eax
c001e24e:	66 ed                	in     ax,dx
c001e250:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	46                   	inc    esi
c001e259:	eb cf                	jmp    c001e22a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e25b:	51                   	push   ecx
c001e25c:	51                   	push   ecx
c001e25d:	52                   	push   edx
c001e25e:	50                   	push   eax
c001e25f:	e8 7a e5 ff ff       	call   c001c7de <IDE::waitInterrupt(unsigned char)>
c001e264:	83 c4 10             	add    esp,0x10
c001e267:	84 c0                	test   al,al
c001e269:	0f 84 df fd ff ff    	je     c001e04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e26f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e274:	52                   	push   edx
c001e275:	52                   	push   edx
c001e276:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e27d:	50                   	push   eax
c001e27e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e284:	e8 c1 e3 ff ff       	call   c001c64a <IDE::prepareInterrupt(unsigned char)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	50                   	push   eax
c001e28d:	50                   	push   eax
c001e28e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e295:	50                   	push   eax
c001e296:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e29c:	e8 bd e3 ff ff       	call   c001c65e <IDE::getBase(unsigned char)>
c001e2a1:	8d 50 07             	lea    edx,[eax+0x7]
c001e2a4:	ec                   	in     al,dx
c001e2a5:	83 c4 10             	add    esp,0x10
c001e2a8:	a8 88                	test   al,0x88
c001e2aa:	74 0a                	je     c001e2b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e2ac:	4b                   	dec    ebx
c001e2ad:	75 dd                	jne    c001e28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e2af:	bb 02 00 00 00       	mov    ebx,0x2
c001e2b4:	eb 02                	jmp    c001e2b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e2b6:	31 db                	xor    ebx,ebx
c001e2b8:	83 c4 1c             	add    esp,0x1c
c001e2bb:	89 d8                	mov    eax,ebx
c001e2bd:	5b                   	pop    ebx
c001e2be:	5e                   	pop    esi
c001e2bf:	5f                   	pop    edi
c001e2c0:	5d                   	pop    ebp
c001e2c1:	c3                   	ret    

c001e2c2 <ATAPI::diskRemoved()>:
c001e2c2:	53                   	push   ebx
c001e2c3:	83 ec 14             	sub    esp,0x14
c001e2c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e2ca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e2d1:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e2d7:	e8 76 bd fe ff       	call   c000a052 <LogicalDisk::unmount()>
c001e2dc:	58                   	pop    eax
c001e2dd:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e2e3:	e8 50 c7 fe ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c001e2e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e2ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e2f2:	83 c4 18             	add    esp,0x18
c001e2f5:	5b                   	pop    ebx
c001e2f6:	e9 2d c7 fe ff       	jmp    c000aa28 <VCache::invalidateReadBuffer()>
c001e2fb:	90                   	nop

c001e2fc <ATAPI::eject()>:
c001e2fc:	57                   	push   edi
c001e2fd:	b9 03 00 00 00       	mov    ecx,0x3
c001e302:	53                   	push   ebx
c001e303:	83 ec 14             	sub    esp,0x14
c001e306:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e30a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e30e:	fc                   	cld    
c001e30f:	31 c0                	xor    eax,eax
c001e311:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e313:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e318:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e31d:	50                   	push   eax
c001e31e:	50                   	push   eax
c001e31f:	6a 00                	push   0x0
c001e321:	6a 00                	push   0x0
c001e323:	6a 00                	push   0x0
c001e325:	6a 02                	push   0x2
c001e327:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e32b:	50                   	push   eax
c001e32c:	53                   	push   ebx
c001e32d:	e8 c8 fc ff ff       	call   c001dffa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e332:	83 c4 14             	add    esp,0x14
c001e335:	53                   	push   ebx
c001e336:	e8 87 ff ff ff       	call   c001e2c2 <ATAPI::diskRemoved()>
c001e33b:	83 c4 24             	add    esp,0x24
c001e33e:	31 c0                	xor    eax,eax
c001e340:	5b                   	pop    ebx
c001e341:	5f                   	pop    edi
c001e342:	c3                   	ret    
c001e343:	90                   	nop

c001e344 <ATAPI::diskInserted()>:
c001e344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e348:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e34f:	c3                   	ret    

c001e350 <ATAPI::detectMedia()>:
c001e350:	56                   	push   esi
c001e351:	53                   	push   ebx
c001e352:	83 ec 28             	sub    esp,0x28
c001e355:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e359:	6a 0c                	push   0xc
c001e35b:	6a 00                	push   0x0
c001e35d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e361:	56                   	push   esi
c001e362:	e8 89 21 fe ff       	call   c00004f0 <memset>
c001e367:	58                   	pop    eax
c001e368:	5a                   	pop    edx
c001e369:	6a 00                	push   0x0
c001e36b:	6a 00                	push   0x0
c001e36d:	6a 00                	push   0x0
c001e36f:	6a 00                	push   0x0
c001e371:	56                   	push   esi
c001e372:	53                   	push   ebx
c001e373:	e8 82 fc ff ff       	call   c001dffa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e378:	83 c4 1c             	add    esp,0x1c
c001e37b:	6a 0c                	push   0xc
c001e37d:	6a 00                	push   0x0
c001e37f:	56                   	push   esi
c001e380:	e8 6b 21 fe ff       	call   c00004f0 <memset>
c001e385:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e38a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e38f:	59                   	pop    ecx
c001e390:	58                   	pop    eax
c001e391:	6a 01                	push   0x1
c001e393:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e397:	50                   	push   eax
c001e398:	6a 00                	push   0x0
c001e39a:	6a 12                	push   0x12
c001e39c:	56                   	push   esi
c001e39d:	53                   	push   ebx
c001e39e:	e8 57 fc ff ff       	call   c001dffa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e3a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e3a7:	83 c4 20             	add    esp,0x20
c001e3aa:	83 e0 7f             	and    eax,0x7f
c001e3ad:	83 f8 70             	cmp    eax,0x70
c001e3b0:	74 15                	je     c001e3c7 <ATAPI::detectMedia()+0x77>
c001e3b2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e3b9:	75 0c                	jne    c001e3c7 <ATAPI::detectMedia()+0x77>
c001e3bb:	83 ec 0c             	sub    esp,0xc
c001e3be:	53                   	push   ebx
c001e3bf:	e8 80 ff ff ff       	call   c001e344 <ATAPI::diskInserted()>
c001e3c4:	83 c4 10             	add    esp,0x10
c001e3c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e3cb:	83 e0 0f             	and    eax,0xf
c001e3ce:	83 f8 02             	cmp    eax,0x2
c001e3d1:	75 1b                	jne    c001e3ee <ATAPI::detectMedia()+0x9e>
c001e3d3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e3d8:	75 2d                	jne    c001e407 <ATAPI::detectMedia()+0xb7>
c001e3da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e3e1:	74 24                	je     c001e407 <ATAPI::detectMedia()+0xb7>
c001e3e3:	83 ec 0c             	sub    esp,0xc
c001e3e6:	53                   	push   ebx
c001e3e7:	e8 d6 fe ff ff       	call   c001e2c2 <ATAPI::diskRemoved()>
c001e3ec:	eb 16                	jmp    c001e404 <ATAPI::detectMedia()+0xb4>
c001e3ee:	85 c0                	test   eax,eax
c001e3f0:	75 15                	jne    c001e407 <ATAPI::detectMedia()+0xb7>
c001e3f2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e3f9:	75 0c                	jne    c001e407 <ATAPI::detectMedia()+0xb7>
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	53                   	push   ebx
c001e3ff:	e8 40 ff ff ff       	call   c001e344 <ATAPI::diskInserted()>
c001e404:	83 c4 10             	add    esp,0x10
c001e407:	83 c4 24             	add    esp,0x24
c001e40a:	5b                   	pop    ebx
c001e40b:	5e                   	pop    esi
c001e40c:	c3                   	ret    
c001e40d:	90                   	nop

c001e40e <ATAPI::open(int, int, void*)>:
c001e40e:	56                   	push   esi
c001e40f:	53                   	push   ebx
c001e410:	50                   	push   eax
c001e411:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e419:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e41d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e423:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e429:	c1 e0 06             	shl    eax,0x6
c001e42c:	01 d0                	add    eax,edx
c001e42e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e435:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e43b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e442:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e44c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e452:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e459:	6a 04                	push   0x4
c001e45b:	6a 0c                	push   0xc
c001e45d:	51                   	push   ecx
c001e45e:	52                   	push   edx
c001e45f:	e8 0c e2 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e464:	90                   	nop
c001e465:	90                   	nop
c001e466:	6a 00                	push   0x0
c001e468:	6a 0c                	push   0xc
c001e46a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e471:	50                   	push   eax
c001e472:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e478:	e8 f3 e1 ff ff       	call   c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e47d:	83 c4 14             	add    esp,0x14
c001e480:	68 78 01 00 00       	push   0x178
c001e485:	e8 f1 04 ff ff       	call   c000e97b <malloc>
c001e48a:	83 c4 0c             	add    esp,0xc
c001e48d:	89 c6                	mov    esi,eax
c001e48f:	6a 00                	push   0x0
c001e491:	68 ff ff ff 7f       	push   0x7fffffff
c001e496:	6a 00                	push   0x0
c001e498:	6a 00                	push   0x0
c001e49a:	53                   	push   ebx
c001e49b:	68 eb 3c 02 c0       	push   0xc0023ceb
c001e4a0:	50                   	push   eax
c001e4a1:	e8 ea b9 fe ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e4a6:	83 c4 14             	add    esp,0x14
c001e4a9:	56                   	push   esi
c001e4aa:	e8 a1 ba fe ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c001e4af:	5a                   	pop    edx
c001e4b0:	0f be c0             	movsx  eax,al
c001e4b3:	59                   	pop    ecx
c001e4b4:	50                   	push   eax
c001e4b5:	68 30 3b 02 c0       	push   0xc0023b30
c001e4ba:	e8 a5 8a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e4bf:	58                   	pop    eax
c001e4c0:	5a                   	pop    edx
c001e4c1:	56                   	push   esi
c001e4c2:	53                   	push   ebx
c001e4c3:	e8 7a ab fe ff       	call   c0009042 <Device::addChild(Device*)>
c001e4c8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e4ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4d1:	e8 b8 af fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e4d6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e4dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4e0:	e8 6b fe ff ff       	call   c001e350 <ATAPI::detectMedia()>
c001e4e5:	83 c4 14             	add    esp,0x14
c001e4e8:	31 c0                	xor    eax,eax
c001e4ea:	5b                   	pop    ebx
c001e4eb:	5e                   	pop    esi
c001e4ec:	c3                   	ret    
c001e4ed:	90                   	nop

c001e4ee <ATAPI::read(unsigned long long, int, void*)>:
c001e4ee:	55                   	push   ebp
c001e4ef:	57                   	push   edi
c001e4f0:	56                   	push   esi
c001e4f1:	53                   	push   ebx
c001e4f2:	83 ec 1c             	sub    esp,0x1c
c001e4f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e4fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e501:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e508:	74 3c                	je     c001e546 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e50a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e50e:	b9 03 00 00 00       	mov    ecx,0x3
c001e513:	fc                   	cld    
c001e514:	31 c0                	xor    eax,eax
c001e516:	0f ce                	bswap  esi
c001e518:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e51a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e51f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e523:	89 e8                	mov    eax,ebp
c001e525:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e529:	50                   	push   eax
c001e52a:	50                   	push   eax
c001e52b:	55                   	push   ebp
c001e52c:	c1 e5 0b             	shl    ebp,0xb
c001e52f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e533:	6a 00                	push   0x0
c001e535:	55                   	push   ebp
c001e536:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e53a:	50                   	push   eax
c001e53b:	53                   	push   ebx
c001e53c:	e8 b9 fa ff ff       	call   c001dffa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e541:	83 c4 20             	add    esp,0x20
c001e544:	eb 1a                	jmp    c001e560 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e546:	83 ec 0c             	sub    esp,0xc
c001e549:	53                   	push   ebx
c001e54a:	e8 01 fe ff ff       	call   c001e350 <ATAPI::detectMedia()>
c001e54f:	83 c4 10             	add    esp,0x10
c001e552:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e559:	75 af                	jne    c001e50a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e55b:	b8 02 00 00 00       	mov    eax,0x2
c001e560:	83 c4 1c             	add    esp,0x1c
c001e563:	5b                   	pop    ebx
c001e564:	5e                   	pop    esi
c001e565:	5f                   	pop    edi
c001e566:	5d                   	pop    ebp
c001e567:	c3                   	ret    

c001e568 <SATA::close(int, int, void*)>:
c001e568:	83 ec 0c             	sub    esp,0xc
c001e56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e56f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e575:	85 c0                	test   eax,eax
c001e577:	74 0c                	je     c001e585 <SATA::close(int, int, void*)+0x1d>
c001e579:	83 ec 0c             	sub    esp,0xc
c001e57c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e57e:	50                   	push   eax
c001e57f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e582:	83 c4 10             	add    esp,0x10
c001e585:	31 c0                	xor    eax,eax
c001e587:	83 c4 0c             	add    esp,0xc
c001e58a:	c3                   	ret    
c001e58b:	90                   	nop

c001e58c <SATA::powerSaving(PowerSavingLevel)>:
c001e58c:	c3                   	ret    
c001e58d:	90                   	nop

c001e58e <SATA::open(int, int, void*)>:
c001e58e:	56                   	push   esi
c001e58f:	53                   	push   ebx
c001e590:	83 ec 10             	sub    esp,0x10
c001e593:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e597:	68 78 3b 02 c0       	push   0xc0023b78
c001e59c:	e8 c3 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e5a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e5af:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e5b5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e5bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e5c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e5cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e5d3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e5da:	e8 d7 08 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001e5df:	89 c6                	mov    esi,eax
c001e5e1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e5e7:	81 c6 00 10 00 00    	add    esi,0x1000
c001e5ed:	e8 c4 08 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001e5f2:	83 c4 10             	add    esp,0x10
c001e5f5:	39 c6                	cmp    esi,eax
c001e5f7:	74 10                	je     c001e609 <SATA::open(int, int, void*)+0x7b>
c001e5f9:	83 ec 0c             	sub    esp,0xc
c001e5fc:	68 84 3b 02 c0       	push   0xc0023b84
c001e601:	e8 bc 06 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	83 ec 0c             	sub    esp,0xc
c001e60c:	6a 02                	push   0x2
c001e60e:	e8 2c 3a ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001e613:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e619:	6a 03                	push   0x3
c001e61b:	50                   	push   eax
c001e61c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e622:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e628:	e8 f5 40 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e62d:	83 c4 14             	add    esp,0x14
c001e630:	53                   	push   ebx
c001e631:	e8 58 ae fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e636:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e639:	e8 24 bd fe ff       	call   c000a362 <createPartitionsForDisk(PhysicalDisk*)>
c001e63e:	83 c4 14             	add    esp,0x14
c001e641:	31 c0                	xor    eax,eax
c001e643:	5b                   	pop    ebx
c001e644:	5e                   	pop    esi
c001e645:	c3                   	ret    

c001e646 <SATA::SATA()>:
c001e646:	83 ec 0c             	sub    esp,0xc
c001e649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e64d:	83 ec 04             	sub    esp,0x4
c001e650:	68 00 02 00 00       	push   0x200
c001e655:	68 98 3b 02 c0       	push   0xc0023b98
c001e65a:	50                   	push   eax
c001e65b:	e8 c6 ad fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	ba 08 3c 02 c0       	mov    edx,0xc0023c08
c001e668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66c:	89 10                	mov    DWORD PTR [eax],edx
c001e66e:	90                   	nop
c001e66f:	83 c4 0c             	add    esp,0xc
c001e672:	c3                   	ret    
c001e673:	90                   	nop

c001e674 <SATA::access(unsigned long long, int, void*, bool)>:
c001e674:	55                   	push   ebp
c001e675:	57                   	push   edi
c001e676:	56                   	push   esi
c001e677:	53                   	push   ebx
c001e678:	83 ec 2c             	sub    esp,0x2c
c001e67b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e67f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e683:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e687:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e68b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e693:	fa                   	cli    
c001e694:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e69a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e69f:	7e 10                	jle    c001e6b1 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001e6a1:	83 ec 0c             	sub    esp,0xc
c001e6a4:	68 a8 3b 02 c0       	push   0xc0023ba8
c001e6a9:	e8 14 06 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001e6ae:	83 c4 10             	add    esp,0x10
c001e6b1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e6b7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e6bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e6c7:	89 d0                	mov    eax,edx
c001e6c9:	c1 e0 07             	shl    eax,0x7
c001e6cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e6d0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e6da:	51                   	push   ecx
c001e6db:	8d 42 02             	lea    eax,[edx+0x2]
c001e6de:	51                   	push   ecx
c001e6df:	c1 e0 07             	shl    eax,0x7
c001e6e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e6e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e6ea:	50                   	push   eax
c001e6eb:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e6f1:	e8 fe ed ff ff       	call   c001d4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e6f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e702:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e706:	0f 84 a4 01 00 00    	je     c001e8b0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001e70c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e710:	c1 e0 09             	shl    eax,0x9
c001e713:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e718:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e71c:	74 0e                	je     c001e72c <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001e71e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e724:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e728:	89 c1                	mov    ecx,eax
c001e72a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e72c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e736:	8d 42 02             	lea    eax,[edx+0x2]
c001e739:	c1 e0 07             	shl    eax,0x7
c001e73c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e740:	8b 00                	mov    eax,DWORD PTR [eax]
c001e742:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e748:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e74e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e752:	c1 e1 05             	shl    ecx,0x5
c001e755:	01 c8                	add    eax,ecx
c001e757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e75b:	83 e1 01             	and    ecx,0x1
c001e75e:	89 ce                	mov    esi,ecx
c001e760:	8a 08                	mov    cl,BYTE PTR [eax]
c001e762:	c1 e6 06             	shl    esi,0x6
c001e765:	83 e1 bf             	and    ecx,0xffffffbf
c001e768:	09 f1                	or     ecx,esi
c001e76a:	88 08                	mov    BYTE PTR [eax],cl
c001e76c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e76e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e774:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e77a:	89 08                	mov    DWORD PTR [eax],ecx
c001e77c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e782:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e788:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e78e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e791:	50                   	push   eax
c001e792:	68 90 00 00 00       	push   0x90
c001e797:	6a 00                	push   0x0
c001e799:	56                   	push   esi
c001e79a:	e8 51 1d fe ff       	call   c00004f0 <memset>
c001e79f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e7a5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e7ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e7af:	83 c4 10             	add    esp,0x10
c001e7b2:	48                   	dec    eax
c001e7b3:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e7b8:	89 c1                	mov    ecx,eax
c001e7ba:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e7c0:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e7c5:	09 c8                	or     eax,ecx
c001e7c7:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e7cd:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e7d3:	83 c8 80             	or     eax,0xffffff80
c001e7d6:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e7dc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e7df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7e3:	25 00 7f 00 00       	and    eax,0x7f00
c001e7e8:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e7ed:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e7f2:	66 89 06             	mov    WORD PTR [esi],ax
c001e7f5:	b0 35                	mov    al,0x35
c001e7f7:	75 02                	jne    c001e7fb <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001e7f9:	b0 25                	mov    al,0x25
c001e7fb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e7fe:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001e802:	89 e8                	mov    eax,ebp
c001e804:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e808:	c1 e8 10             	shr    eax,0x10
c001e80b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e80e:	89 e8                	mov    eax,ebp
c001e810:	c1 e8 18             	shr    eax,0x18
c001e813:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e816:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e81a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e81d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e821:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e824:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e828:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e82c:	89 d6                	mov    esi,edx
c001e82e:	31 c0                	xor    eax,eax
c001e830:	c1 e6 07             	shl    esi,0x7
c001e833:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001e837:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e83d:	80 e1 88             	and    cl,0x88
c001e840:	74 0a                	je     c001e84c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e842:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e847:	74 0a                	je     c001e853 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e849:	40                   	inc    eax
c001e84a:	eb eb                	jmp    c001e837 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e84c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e851:	75 0a                	jne    c001e85d <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e853:	83 ec 0c             	sub    esp,0xc
c001e856:	68 e1 3b 02 c0       	push   0xc0023be1
c001e85b:	eb 36                	jmp    c001e893 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001e85d:	b8 01 00 00 00       	mov    eax,0x1
c001e862:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e866:	c1 e2 07             	shl    edx,0x7
c001e869:	d3 e0                	shl    eax,cl
c001e86b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001e86f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e875:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e87b:	85 c8                	test   eax,ecx
c001e87d:	74 25                	je     c001e8a4 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001e87f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e885:	0f ba e1 1e          	bt     ecx,0x1e
c001e889:	73 ea                	jae    c001e875 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 ef 3b 02 c0       	push   0xc0023bef
c001e893:	e8 cc 86 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e898:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e89f:	83 c4 10             	add    esp,0x10
c001e8a2:	eb 13                	jmp    c001e8b7 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001e8a4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e8aa:	0f ba e0 1e          	bt     eax,0x1e
c001e8ae:	73 18                	jae    c001e8c8 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001e8b0:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e8b7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001e8be:	75 01                	jne    c001e8c1 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001e8c0:	fb                   	sti    
c001e8c1:	b8 01 00 00 00       	mov    eax,0x1
c001e8c6:	eb 2c                	jmp    c001e8f4 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e8c8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e8cd:	75 10                	jne    c001e8df <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001e8cf:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e8d5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e8d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e8dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e8df:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e8e6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e8eb:	85 c0                	test   eax,eax
c001e8ed:	75 03                	jne    c001e8f2 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e8ef:	fb                   	sti    
c001e8f0:	eb 02                	jmp    c001e8f4 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e8f2:	31 c0                	xor    eax,eax
c001e8f4:	83 c4 2c             	add    esp,0x2c
c001e8f7:	5b                   	pop    ebx
c001e8f8:	5e                   	pop    esi
c001e8f9:	5f                   	pop    edi
c001e8fa:	5d                   	pop    ebp
c001e8fb:	c3                   	ret    

c001e8fc <SATA::read(unsigned long long, int, void*)>:
c001e8fc:	57                   	push   edi
c001e8fd:	b8 04 00 00 00       	mov    eax,0x4
c001e902:	56                   	push   esi
c001e903:	53                   	push   ebx
c001e904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e908:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e90c:	8d 7a ff             	lea    edi,[edx-0x1]
c001e90f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e913:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e917:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e91d:	77 25                	ja     c001e944 <SATA::read(unsigned long long, int, void*)+0x48>
c001e91f:	b8 06 00 00 00       	mov    eax,0x6
c001e924:	85 f6                	test   esi,esi
c001e926:	74 1c                	je     c001e944 <SATA::read(unsigned long long, int, void*)+0x48>
c001e928:	50                   	push   eax
c001e929:	50                   	push   eax
c001e92a:	6a 00                	push   0x0
c001e92c:	56                   	push   esi
c001e92d:	52                   	push   edx
c001e92e:	53                   	push   ebx
c001e92f:	51                   	push   ecx
c001e930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e934:	e8 3b fd ff ff       	call   c001e674 <SATA::access(unsigned long long, int, void*, bool)>
c001e939:	83 c4 20             	add    esp,0x20
c001e93c:	85 c0                	test   eax,eax
c001e93e:	0f 95 c0             	setne  al
c001e941:	0f b6 c0             	movzx  eax,al
c001e944:	5b                   	pop    ebx
c001e945:	5e                   	pop    esi
c001e946:	5f                   	pop    edi
c001e947:	c3                   	ret    

c001e948 <SATA::write(unsigned long long, int, void*)>:
c001e948:	55                   	push   ebp
c001e949:	b8 04 00 00 00       	mov    eax,0x4
c001e94e:	57                   	push   edi
c001e94f:	56                   	push   esi
c001e950:	53                   	push   ebx
c001e951:	83 ec 0c             	sub    esp,0xc
c001e954:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e958:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e95c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e95f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e963:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e967:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e96d:	77 3d                	ja     c001e9ac <SATA::write(unsigned long long, int, void*)+0x64>
c001e96f:	b8 06 00 00 00       	mov    eax,0x6
c001e974:	85 ed                	test   ebp,ebp
c001e976:	74 34                	je     c001e9ac <SATA::write(unsigned long long, int, void*)+0x64>
c001e978:	c1 e3 09             	shl    ebx,0x9
c001e97b:	01 eb                	add    ebx,ebp
c001e97d:	89 d6                	mov    esi,edx
c001e97f:	89 cf                	mov    edi,ecx
c001e981:	83 c6 01             	add    esi,0x1
c001e984:	83 d7 00             	adc    edi,0x0
c001e987:	50                   	push   eax
c001e988:	50                   	push   eax
c001e989:	6a 01                	push   0x1
c001e98b:	55                   	push   ebp
c001e98c:	81 c5 00 02 00 00    	add    ebp,0x200
c001e992:	6a 01                	push   0x1
c001e994:	51                   	push   ecx
c001e995:	52                   	push   edx
c001e996:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e99a:	e8 d5 fc ff ff       	call   c001e674 <SATA::access(unsigned long long, int, void*, bool)>
c001e99f:	83 c4 20             	add    esp,0x20
c001e9a2:	89 f2                	mov    edx,esi
c001e9a4:	89 f9                	mov    ecx,edi
c001e9a6:	39 dd                	cmp    ebp,ebx
c001e9a8:	75 d3                	jne    c001e97d <SATA::write(unsigned long long, int, void*)+0x35>
c001e9aa:	31 c0                	xor    eax,eax
c001e9ac:	83 c4 0c             	add    esp,0xc
c001e9af:	5b                   	pop    ebx
c001e9b0:	5e                   	pop    esi
c001e9b1:	5f                   	pop    edi
c001e9b2:	5d                   	pop    ebp
c001e9b3:	c3                   	ret    

c001e9b4 <SATAPI::write(unsigned long long, int, void*)>:
c001e9b4:	b8 03 00 00 00       	mov    eax,0x3
c001e9b9:	c3                   	ret    

c001e9ba <SATAPI::close(int, int, void*)>:
c001e9ba:	83 ec 0c             	sub    esp,0xc
c001e9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e9c7:	85 c0                	test   eax,eax
c001e9c9:	74 0c                	je     c001e9d7 <SATAPI::close(int, int, void*)+0x1d>
c001e9cb:	83 ec 0c             	sub    esp,0xc
c001e9ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001e9d0:	50                   	push   eax
c001e9d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	31 c0                	xor    eax,eax
c001e9d9:	83 c4 0c             	add    esp,0xc
c001e9dc:	c3                   	ret    
c001e9dd:	90                   	nop

c001e9de <SATAPI::SATAPI()>:
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e5:	83 ec 04             	sub    esp,0x4
c001e9e8:	68 00 08 00 00       	push   0x800
c001e9ed:	68 38 3c 02 c0       	push   0xc0023c38
c001e9f2:	50                   	push   eax
c001e9f3:	e8 2e aa fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e9f8:	83 c4 10             	add    esp,0x10
c001e9fb:	ba 2c 3d 02 c0       	mov    edx,0xc0023d2c
c001ea00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea04:	89 10                	mov    DWORD PTR [eax],edx
c001ea06:	90                   	nop
c001ea07:	83 c4 0c             	add    esp,0xc
c001ea0a:	c3                   	ret    
c001ea0b:	90                   	nop

c001ea0c <SATAPI::diskRemoved()>:
c001ea0c:	c3                   	ret    
c001ea0d:	90                   	nop

c001ea0e <SATAPI::diskInserted()>:
c001ea0e:	83 ec 18             	sub    esp,0x18
c001ea11:	68 44 3c 02 c0       	push   0xc0023c44
c001ea16:	e8 49 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ea1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea1f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ea26:	83 c4 1c             	add    esp,0x1c
c001ea29:	c3                   	ret    

c001ea2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ea2a:	55                   	push   ebp
c001ea2b:	57                   	push   edi
c001ea2c:	56                   	push   esi
c001ea2d:	53                   	push   ebx
c001ea2e:	83 ec 34             	sub    esp,0x34
c001ea31:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ea35:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ea39:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ea3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ea41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ea45:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ea4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ea51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ea55:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ea5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ea5f:	83 c0 02             	add    eax,0x2
c001ea62:	c1 e0 07             	shl    eax,0x7
c001ea65:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ea69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea71:	c1 e0 07             	shl    eax,0x7
c001ea74:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ea78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea7c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ea86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ea8a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ea90:	e8 5f ea ff ff       	call   c001d4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ea95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	b8 01 00 00 00       	mov    eax,0x1
c001eaa1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001eaa6:	0f 84 53 02 00 00    	je     c001ecff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001eaac:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001eab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001eabe:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001eac4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eac8:	c1 e1 05             	shl    ecx,0x5
c001eacb:	01 c8                	add    eax,ecx
c001eacd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eacf:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ead5:	81 c9 25 00 01 00    	or     ecx,0x10025
c001eadb:	89 08                	mov    DWORD PTR [eax],ecx
c001eadd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001eae3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001eae9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001eaef:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001eaf2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001eaf5:	50                   	push   eax
c001eaf6:	68 90 00 00 00       	push   0x90
c001eafb:	6a 00                	push   0x0
c001eafd:	53                   	push   ebx
c001eafe:	e8 ed 19 fe ff       	call   c00004f0 <memset>
c001eb03:	b9 0c 00 00 00       	mov    ecx,0xc
c001eb08:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001eb0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb0e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001eb14:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001eb18:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001eb1e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001eb22:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001eb26:	48                   	dec    eax
c001eb27:	25 ff ff 3f 00       	and    eax,0x3fffff
c001eb2c:	89 c1                	mov    ecx,eax
c001eb2e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001eb34:	25 00 00 c0 ff       	and    eax,0xffc00000
c001eb39:	09 c8                	or     eax,ecx
c001eb3b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001eb41:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001eb47:	83 c8 80             	or     eax,0xffffff80
c001eb4a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001eb50:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001eb53:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001eb57:	25 00 7f 00 00       	and    eax,0x7f00
c001eb5c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001eb60:	0d 27 80 ff ff       	or     eax,0xffff8027
c001eb65:	66 89 03             	mov    WORD PTR [ebx],ax
c001eb68:	89 d0                	mov    eax,edx
c001eb6a:	c1 ea 18             	shr    edx,0x18
c001eb6d:	c1 e8 10             	shr    eax,0x10
c001eb70:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001eb73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001eb76:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001eb7a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001eb7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eb81:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001eb84:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001eb8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb93:	31 c0                	xor    eax,eax
c001eb95:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001eb9b:	80 e1 88             	and    cl,0x88
c001eb9e:	74 0a                	je     c001ebaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001eba0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eba5:	74 0a                	je     c001ebb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001eba7:	40                   	inc    eax
c001eba8:	eb eb                	jmp    c001eb95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001ebaa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ebaf:	75 43                	jne    c001ebf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 5c 3c 02 c0       	push   0xc0023c5c
c001ebb9:	e8 a6 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ebbe:	58                   	pop    eax
c001ebbf:	5a                   	pop    edx
c001ebc0:	68 71 3c 02 c0       	push   0xc0023c71
c001ebc5:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001ebcb:	e8 86 28 ff ff       	call   c0011456 <VgaText::puts(char const*)>
c001ebd0:	59                   	pop    ecx
c001ebd1:	5b                   	pop    ebx
c001ebd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebd6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ebdc:	e8 ad e9 ff ff       	call   c001d58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ebe1:	5e                   	pop    esi
c001ebe2:	5f                   	pop    edi
c001ebe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebe7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ebed:	e8 7c e9 ff ff       	call   c001d56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ebf2:	eb 48                	jmp    c001ec3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001ebf4:	be 01 00 00 00       	mov    esi,0x1
c001ebf9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ebfd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ec01:	d3 e6                	shl    esi,cl
c001ec03:	c1 e7 07             	shl    edi,0x7
c001ec06:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ec0c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ec11:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ec15:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ec1b:	85 c6                	test   esi,eax
c001ec1d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ec23:	0f 84 a3 00 00 00    	je     c001eccc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001ec29:	0f ba e0 1e          	bt     eax,0x1e
c001ec2d:	73 1a                	jae    c001ec49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001ec2f:	83 ec 0c             	sub    esp,0xc
c001ec32:	68 83 3c 02 c0       	push   0xc0023c83
c001ec37:	e8 28 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec3c:	83 c4 10             	add    esp,0x10
c001ec3f:	b8 01 00 00 00       	mov    eax,0x1
c001ec44:	e9 b6 00 00 00       	jmp    c001ecff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ec49:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ec4f:	83 f8 0d             	cmp    eax,0xd
c001ec52:	77 0a                	ja     c001ec5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001ec54:	83 ec 0c             	sub    esp,0xc
c001ec57:	68 c8 00 00 00       	push   0xc8
c001ec5c:	eb 28                	jmp    c001ec86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ec5e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ec64:	83 f8 0d             	cmp    eax,0xd
c001ec67:	77 0a                	ja     c001ec73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	68 58 02 00 00       	push   0x258
c001ec71:	eb 13                	jmp    c001ec86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ec73:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ec79:	83 f8 06             	cmp    eax,0x6
c001ec7c:	77 10                	ja     c001ec8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ec7e:	83 ec 0c             	sub    esp,0xc
c001ec81:	68 dc 05 00 00       	push   0x5dc
c001ec86:	e8 0d 6a ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ec92:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ec95:	75 06                	jne    c001ec9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001ec97:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ec9b:	74 15                	je     c001ecb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ec9d:	83 fb 06             	cmp    ebx,0x6
c001eca0:	77 10                	ja     c001ecb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	68 c4 09 00 00       	push   0x9c4
c001ecaa:	e8 e9 69 ff ff       	call   c0015698 <milliTenthSleep(unsigned int)>
c001ecaf:	83 c4 10             	add    esp,0x10
c001ecb2:	43                   	inc    ebx
c001ecb3:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ecb9:	0f 85 56 ff ff ff    	jne    c001ec15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	68 96 3c 02 c0       	push   0xc0023c96
c001ecc7:	e9 6b ff ff ff       	jmp    c001ec37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001eccc:	0f ba e0 1e          	bt     eax,0x1e
c001ecd0:	73 0d                	jae    c001ecdf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001ecd2:	83 ec 0c             	sub    esp,0xc
c001ecd5:	68 aa 3c 02 c0       	push   0xc0023caa
c001ecda:	e9 58 ff ff ff       	jmp    c001ec37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001ecdf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ece4:	74 17                	je     c001ecfd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ece6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001eceb:	74 10                	je     c001ecfd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001eced:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ecf3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ecf7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ecfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ecfd:	31 c0                	xor    eax,eax
c001ecff:	83 c4 2c             	add    esp,0x2c
c001ed02:	5b                   	pop    ebx
c001ed03:	5e                   	pop    esi
c001ed04:	5f                   	pop    edi
c001ed05:	5d                   	pop    ebp
c001ed06:	c3                   	ret    
c001ed07:	90                   	nop

c001ed08 <SATAPI::eject()>:
c001ed08:	57                   	push   edi
c001ed09:	b9 03 00 00 00       	mov    ecx,0x3
c001ed0e:	83 ec 18             	sub    esp,0x18
c001ed11:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ed15:	fc                   	cld    
c001ed16:	31 c0                	xor    eax,eax
c001ed18:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ed1a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ed1f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ed24:	50                   	push   eax
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 00                	push   0x0
c001ed29:	6a 00                	push   0x0
c001ed2b:	6a 00                	push   0x0
c001ed2d:	6a 02                	push   0x2
c001ed2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ed33:	50                   	push   eax
c001ed34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ed38:	e8 ed fc ff ff       	call   c001ea2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed3d:	31 c0                	xor    eax,eax
c001ed3f:	83 c4 38             	add    esp,0x38
c001ed42:	5f                   	pop    edi
c001ed43:	c3                   	ret    

c001ed44 <SATAPI::detectMedia()>:
c001ed44:	53                   	push   ebx
c001ed45:	83 ec 14             	sub    esp,0x14
c001ed48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ed4c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ed52:	e8 e1 bc fe ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c001ed57:	59                   	pop    ecx
c001ed58:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ed5e:	e8 c5 bc fe ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c001ed63:	c7 04 24 bf 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cbf
c001ed6a:	e8 f5 81 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ed6f:	83 c4 10             	add    esp,0x10
c001ed72:	31 c0                	xor    eax,eax
c001ed74:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001ed7b:	85 d2                	test   edx,edx
c001ed7d:	74 0f                	je     c001ed8e <SATAPI::detectMedia()+0x4a>
c001ed7f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ed85:	75 07                	jne    c001ed8e <SATAPI::detectMedia()+0x4a>
c001ed87:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ed8e:	40                   	inc    eax
c001ed8f:	83 f8 1a             	cmp    eax,0x1a
c001ed92:	75 e0                	jne    c001ed74 <SATAPI::detectMedia()+0x30>
c001ed94:	83 c4 08             	add    esp,0x8
c001ed97:	5b                   	pop    ebx
c001ed98:	c3                   	ret    
c001ed99:	90                   	nop

c001ed9a <SATAPI::open(int, int, void*)>:
c001ed9a:	56                   	push   esi
c001ed9b:	53                   	push   ebx
c001ed9c:	51                   	push   ecx
c001ed9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eda1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eda5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001edaf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001edb5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001edbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edc3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001edcd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001edd3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001edda:	e8 d7 00 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001eddf:	89 c6                	mov    esi,eax
c001ede1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ede7:	81 c6 00 10 00 00    	add    esi,0x1000
c001eded:	e8 c4 00 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001edf2:	39 c6                	cmp    esi,eax
c001edf4:	74 10                	je     c001ee06 <SATAPI::open(int, int, void*)+0x6c>
c001edf6:	83 ec 0c             	sub    esp,0xc
c001edf9:	68 d4 3c 02 c0       	push   0xc0023cd4
c001edfe:	e8 bf fe fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ee03:	83 c4 10             	add    esp,0x10
c001ee06:	83 ec 0c             	sub    esp,0xc
c001ee09:	6a 02                	push   0x2
c001ee0b:	e8 2f 32 ff ff       	call   c001203f <Virt::allocateKernelVirtualPages(int)>
c001ee10:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ee16:	6a 03                	push   0x3
c001ee18:	50                   	push   eax
c001ee19:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ee1f:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001ee25:	e8 f8 38 ff ff       	call   c0012722 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ee2a:	83 c4 14             	add    esp,0x14
c001ee2d:	68 78 01 00 00       	push   0x178
c001ee32:	e8 44 fb fe ff       	call   c000e97b <malloc>
c001ee37:	83 c4 0c             	add    esp,0xc
c001ee3a:	89 c6                	mov    esi,eax
c001ee3c:	6a 00                	push   0x0
c001ee3e:	68 ff ff ff 7f       	push   0x7fffffff
c001ee43:	6a 00                	push   0x0
c001ee45:	6a 00                	push   0x0
c001ee47:	53                   	push   ebx
c001ee48:	68 ea 3c 02 c0       	push   0xc0023cea
c001ee4d:	50                   	push   eax
c001ee4e:	e8 3d b0 fe ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ee53:	83 c4 14             	add    esp,0x14
c001ee56:	56                   	push   esi
c001ee57:	e8 f4 b0 fe ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c001ee5c:	5a                   	pop    edx
c001ee5d:	0f be c0             	movsx  eax,al
c001ee60:	59                   	pop    ecx
c001ee61:	50                   	push   eax
c001ee62:	68 30 3b 02 c0       	push   0xc0023b30
c001ee67:	e8 f8 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ee6c:	58                   	pop    eax
c001ee6d:	5a                   	pop    edx
c001ee6e:	56                   	push   esi
c001ee6f:	53                   	push   ebx
c001ee70:	e8 cd a1 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ee75:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ee7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee7e:	e8 0b a6 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001ee83:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ee8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee8d:	e8 b2 fe ff ff       	call   c001ed44 <SATAPI::detectMedia()>
c001ee92:	83 c4 14             	add    esp,0x14
c001ee95:	31 c0                	xor    eax,eax
c001ee97:	5b                   	pop    ebx
c001ee98:	5e                   	pop    esi
c001ee99:	c3                   	ret    

c001ee9a <SATAPI::read(unsigned long long, int, void*)>:
c001ee9a:	57                   	push   edi
c001ee9b:	56                   	push   esi
c001ee9c:	53                   	push   ebx
c001ee9d:	83 ec 30             	sub    esp,0x30
c001eea0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001eea4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001eea8:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001eeac:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001eeb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eeb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eeb8:	83 fe 04             	cmp    esi,0x4
c001eebb:	7e 10                	jle    c001eecd <SATAPI::read(unsigned long long, int, void*)+0x33>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	68 f8 3c 02 c0       	push   0xc0023cf8
c001eec5:	e8 f8 fd fe ff       	call   c000ecc2 <KePanic(char const*)>
c001eeca:	83 c4 10             	add    esp,0x10
c001eecd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001eed3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001eed9:	51                   	push   ecx
c001eeda:	50                   	push   eax
c001eedb:	83 c0 02             	add    eax,0x2
c001eede:	c1 e0 07             	shl    eax,0x7
c001eee1:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001eee7:	50                   	push   eax
c001eee8:	52                   	push   edx
c001eee9:	e8 ca e6 ff ff       	call   c001d5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001eeee:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001eef2:	b9 03 00 00 00       	mov    ecx,0x3
c001eef7:	fc                   	cld    
c001eef8:	31 c0                	xor    eax,eax
c001eefa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eefc:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ef01:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ef06:	83 c4 0c             	add    esp,0xc
c001ef09:	6a 00                	push   0x0
c001ef0b:	6a 00                	push   0x0
c001ef0d:	6a 00                	push   0x0
c001ef0f:	6a 00                	push   0x0
c001ef11:	6a 02                	push   0x2
c001ef13:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ef17:	50                   	push   eax
c001ef18:	53                   	push   ebx
c001ef19:	e8 0c fb ff ff       	call   c001ea2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ef1e:	83 c4 20             	add    esp,0x20
c001ef21:	85 c0                	test   eax,eax
c001ef23:	75 44                	jne    c001ef69 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ef25:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ef29:	b9 03 00 00 00       	mov    ecx,0x3
c001ef2e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef34:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ef39:	0f c8                	bswap  eax
c001ef3b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ef3f:	89 f0                	mov    eax,esi
c001ef41:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ef45:	50                   	push   eax
c001ef46:	56                   	push   esi
c001ef47:	c1 e6 0b             	shl    esi,0xb
c001ef4a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ef4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef56:	56                   	push   esi
c001ef57:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ef5b:	50                   	push   eax
c001ef5c:	53                   	push   ebx
c001ef5d:	e8 c8 fa ff ff       	call   c001ea2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ef62:	83 c4 20             	add    esp,0x20
c001ef65:	85 c0                	test   eax,eax
c001ef67:	74 14                	je     c001ef7d <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ef69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ef6d:	83 ec 0c             	sub    esp,0xc
c001ef70:	53                   	push   ebx
c001ef71:	e8 ce fd ff ff       	call   c001ed44 <SATAPI::detectMedia()>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef7d:	83 c4 30             	add    esp,0x30
c001ef80:	5b                   	pop    ebx
c001ef81:	5e                   	pop    esi
c001ef82:	5f                   	pop    edi
c001ef83:	c3                   	ret    

c001ef84 <IOAPIC::close(int, int, void*)>:
c001ef84:	b8 00 00 00 00       	mov    eax,0x0
c001ef89:	c3                   	ret    

c001ef8a <apicGetBase()>:
c001ef8a:	55                   	push   ebp
c001ef8b:	89 e5                	mov    ebp,esp
c001ef8d:	83 ec 08             	sub    esp,0x8
c001ef90:	83 ec 0c             	sub    esp,0xc
c001ef93:	68 5c 3d 02 c0       	push   0xc0023d5c
c001ef98:	e8 25 fd fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	b8 00 00 00 00       	mov    eax,0x0
c001efa5:	c9                   	leave  
c001efa6:	c3                   	ret    
c001efa7:	90                   	nop

c001efa8 <IOAPIC::IOAPIC()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	83 ec 08             	sub    esp,0x8
c001efb2:	68 6b 3d 02 c0       	push   0xc0023d6b
c001efb7:	50                   	push   eax
c001efb8:	e8 e7 a1 fe ff       	call   c00091a4 <Device::Device(char const*)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	ba 8c 3d 02 c0       	mov    edx,0xc0023d8c
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	89 10                	mov    DWORD PTR [eax],edx
c001efcb:	90                   	nop
c001efcc:	83 c4 0c             	add    esp,0xc
c001efcf:	c3                   	ret    

c001efd0 <apicOpen()>:
c001efd0:	55                   	push   ebp
c001efd1:	89 e5                	mov    ebp,esp
c001efd3:	53                   	push   ebx
c001efd4:	83 ec 34             	sub    esp,0x34
c001efd7:	83 ec 0c             	sub    esp,0xc
c001efda:	68 73 3d 02 c0       	push   0xc0023d73
c001efdf:	e8 80 7f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001efec:	83 f0 01             	xor    eax,0x1
c001efef:	0f b6 c0             	movzx  eax,al
c001eff2:	85 c0                	test   eax,eax
c001eff4:	0f 84 a3 00 00 00    	je     c001f09d <apicOpen()+0xcd>
c001effa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001effe:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001f003:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f007:	0f b6 c0             	movzx  eax,al
c001f00a:	39 c2                	cmp    edx,eax
c001f00c:	0f 83 84 00 00 00    	jae    c001f096 <apicOpen()+0xc6>
c001f012:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f01f:	e8 57 f9 fe ff       	call   c000e97b <malloc>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	89 c3                	mov    ebx,eax
c001f029:	83 ec 0c             	sub    esp,0xc
c001f02c:	53                   	push   ebx
c001f02d:	e8 76 ff ff ff       	call   c001efa8 <IOAPIC::IOAPIC()>
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f038:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f03c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f03f:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001f046:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001f04b:	83 c0 01             	add    eax,0x1
c001f04e:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001f053:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001f058:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f05e:	83 ec 08             	sub    esp,0x8
c001f061:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f064:	50                   	push   eax
c001f065:	e8 d8 9f fe ff       	call   c0009042 <Device::addChild(Device*)>
c001f06a:	83 c4 10             	add    esp,0x10
c001f06d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f070:	8b 00                	mov    eax,DWORD PTR [eax]
c001f072:	83 c0 08             	add    eax,0x8
c001f075:	8b 00                	mov    eax,DWORD PTR [eax]
c001f077:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f07b:	6a 00                	push   0x0
c001f07d:	6a 00                	push   0x0
c001f07f:	52                   	push   edx
c001f080:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f083:	ff d0                	call   eax
c001f085:	83 c4 10             	add    esp,0x10
c001f088:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f08b:	83 c0 01             	add    eax,0x1
c001f08e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f091:	e9 68 ff ff ff       	jmp    c001effe <apicOpen()+0x2e>
c001f096:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001f09d:	e8 e8 fe ff ff       	call   c001ef8a <apicGetBase()>
c001f0a2:	05 f0 00 00 00       	add    eax,0xf0
c001f0a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f0aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f0ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0af:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f0b2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f0b9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f0c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f0c3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f0c6:	89 10                	mov    DWORD PTR [eax],edx
c001f0c8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f0cf:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001f0d4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f0d7:	7d 7c                	jge    c001f155 <apicOpen()+0x185>
c001f0d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0dc:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f0e3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f0e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0e9:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f0f0:	c1 e8 08             	shr    eax,0x8
c001f0f3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f0f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0fa:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001f101:	c1 e8 18             	shr    eax,0x18
c001f104:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f107:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f10b:	3d ff 00 00 00       	cmp    eax,0xff
c001f110:	75 3a                	jne    c001f14c <apicOpen()+0x17c>
c001f112:	e8 73 fe ff ff       	call   c001ef8a <apicGetBase()>
c001f117:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f11b:	83 fa 01             	cmp    edx,0x1
c001f11e:	75 07                	jne    c001f127 <apicOpen()+0x157>
c001f120:	ba 60 03 00 00       	mov    edx,0x360
c001f125:	eb 05                	jmp    c001f12c <apicOpen()+0x15c>
c001f127:	ba 50 03 00 00       	mov    edx,0x350
c001f12c:	01 d0                	add    eax,edx
c001f12e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f131:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f134:	8b 00                	mov    eax,DWORD PTR [eax]
c001f136:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f139:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f140:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f144:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f147:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f14a:	89 10                	mov    DWORD PTR [eax],edx
c001f14c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f150:	e9 7a ff ff ff       	jmp    c001f0cf <apicOpen()+0xff>
c001f155:	90                   	nop
c001f156:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f159:	c9                   	leave  
c001f15a:	c3                   	ret    
c001f15b:	90                   	nop

c001f15c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f15c:	55                   	push   ebp
c001f15d:	89 e5                	mov    ebp,esp
c001f15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f162:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f168:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f16b:	72 1d                	jb     c001f18a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f16d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f170:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f179:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f17f:	01 d0                	add    eax,edx
c001f181:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f184:	73 04                	jae    c001f18a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f186:	b0 01                	mov    al,0x1
c001f188:	eb 02                	jmp    c001f18c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f18a:	b0 00                	mov    al,0x0
c001f18c:	5d                   	pop    ebp
c001f18d:	c3                   	ret    

c001f18e <IOAPIC::read(int)>:
c001f18e:	55                   	push   ebp
c001f18f:	89 e5                	mov    ebp,esp
c001f191:	83 ec 10             	sub    esp,0x10
c001f194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f197:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f19d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f1a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f1a3:	0f b6 d0             	movzx  edx,al
c001f1a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f1a9:	89 10                	mov    DWORD PTR [eax],edx
c001f1ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f1ae:	83 c0 10             	add    eax,0x10
c001f1b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b3:	c9                   	leave  
c001f1b4:	c3                   	ret    
c001f1b5:	90                   	nop

c001f1b6 <IOAPIC::open(int, int, void*)>:
c001f1b6:	55                   	push   ebp
c001f1b7:	89 e5                	mov    ebp,esp
c001f1b9:	57                   	push   edi
c001f1ba:	56                   	push   esi
c001f1bb:	53                   	push   ebx
c001f1bc:	83 ec 04             	sub    esp,0x4
c001f1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f1c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f1d4:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001f1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f1e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f1ed:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001f1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f1f7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f1fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f200:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f209:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f20f:	0f b6 f0             	movzx  esi,al
c001f212:	89 d0                	mov    eax,edx
c001f214:	ba 00 00 00 00       	mov    edx,0x0
c001f219:	89 c7                	mov    edi,eax
c001f21b:	83 e7 ff             	and    edi,0xffffffff
c001f21e:	89 f9                	mov    ecx,edi
c001f220:	0f b6 da             	movzx  ebx,dl
c001f223:	89 c8                	mov    eax,ecx
c001f225:	89 da                	mov    edx,ebx
c001f227:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f22a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f22d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f231:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f235:	83 e0 00             	and    eax,0x0
c001f238:	09 d0                	or     eax,edx
c001f23a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f241:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f247:	8d 50 01             	lea    edx,[eax+0x1]
c001f24a:	88 d1                	mov    cl,dl
c001f24c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f24f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f255:	0f b6 d0             	movzx  edx,al
c001f258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f25b:	83 c2 08             	add    edx,0x8
c001f25e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f262:	0f b6 c9             	movzx  ecx,cl
c001f265:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f26b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f26f:	6a 01                	push   0x1
c001f271:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f274:	e8 15 ff ff ff       	call   c001f18e <IOAPIC::read(int)>
c001f279:	83 c4 08             	add    esp,0x8
c001f27c:	c1 f8 10             	sar    eax,0x10
c001f27f:	0f b6 c0             	movzx  eax,al
c001f282:	8d 50 01             	lea    edx,[eax+0x1]
c001f285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f288:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f28e:	b8 00 00 00 00       	mov    eax,0x0
c001f293:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f296:	5b                   	pop    ebx
c001f297:	5e                   	pop    esi
c001f298:	5f                   	pop    edi
c001f299:	5d                   	pop    ebp
c001f29a:	c3                   	ret    
c001f29b:	90                   	nop

c001f29c <IOAPIC::write(int, int)>:
c001f29c:	55                   	push   ebp
c001f29d:	89 e5                	mov    ebp,esp
c001f29f:	83 ec 10             	sub    esp,0x10
c001f2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f2a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f2ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f2ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2b1:	0f b6 d0             	movzx  edx,al
c001f2b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f2b7:	89 10                	mov    DWORD PTR [eax],edx
c001f2b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f2bc:	8d 50 10             	lea    edx,[eax+0x10]
c001f2bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f2c2:	89 02                	mov    DWORD PTR [edx],eax
c001f2c4:	90                   	nop
c001f2c5:	c9                   	leave  
c001f2c6:	c3                   	ret    
c001f2c7:	90                   	nop

c001f2c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f2c8:	55                   	push   ebp
c001f2c9:	89 e5                	mov    ebp,esp
c001f2cb:	53                   	push   ebx
c001f2cc:	83 ec 2c             	sub    esp,0x2c
c001f2cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2d2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f2d5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f2d8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f2db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f2de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f2e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f2e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f2e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f2ea:	88 d8                	mov    al,bl
c001f2ec:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f2ef:	88 c8                	mov    al,cl
c001f2f1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f2f4:	88 d0                	mov    al,dl
c001f2f6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f2f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f2fd:	83 c0 08             	add    eax,0x8
c001f300:	01 c0                	add    eax,eax
c001f302:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f305:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f309:	83 c0 08             	add    eax,0x8
c001f30c:	01 c0                	add    eax,eax
c001f30e:	83 c0 01             	add    eax,0x1
c001f311:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f314:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f317:	50                   	push   eax
c001f318:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f31b:	e8 6e fe ff ff       	call   c001f18e <IOAPIC::read(int)>
c001f320:	83 c4 08             	add    esp,0x8
c001f323:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f326:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f32d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f330:	c1 e0 18             	shl    eax,0x18
c001f333:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f336:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f339:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f33c:	52                   	push   edx
c001f33d:	50                   	push   eax
c001f33e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f341:	e8 56 ff ff ff       	call   c001f29c <IOAPIC::write(int, int)>
c001f346:	83 c4 0c             	add    esp,0xc
c001f349:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f34c:	50                   	push   eax
c001f34d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f350:	e8 39 fe ff ff       	call   c001f18e <IOAPIC::read(int)>
c001f355:	83 c4 08             	add    esp,0x8
c001f358:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f35b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f362:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f369:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f370:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f374:	85 c0                	test   eax,eax
c001f376:	74 09                	je     c001f381 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f378:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f37f:	eb 07                	jmp    c001f388 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f381:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f388:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f38c:	85 c0                	test   eax,eax
c001f38e:	74 09                	je     c001f399 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f390:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f397:	eb 07                	jmp    c001f3a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f399:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f3a0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f3a7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f3ab:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f3ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f3b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f3b4:	52                   	push   edx
c001f3b5:	50                   	push   eax
c001f3b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f3b9:	e8 de fe ff ff       	call   c001f29c <IOAPIC::write(int, int)>
c001f3be:	83 c4 0c             	add    esp,0xc
c001f3c1:	90                   	nop
c001f3c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f3c5:	c9                   	leave  
c001f3c6:	c3                   	ret    
c001f3c7:	90                   	nop

c001f3c8 <APICTimer::close(int, int, void*)>:
c001f3c8:	b8 00 00 00 00       	mov    eax,0x0
c001f3cd:	c3                   	ret    
c001f3ce:	66 90                	xchg   ax,ax

c001f3d0 <apicTimerHandler(regs*, void*)>:
c001f3d0:	83 ec 0c             	sub    esp,0xc
c001f3d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f3d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f3d9:	b8 10 27 00 00       	mov    eax,0x2710
c001f3de:	ba 00 00 00 00       	mov    edx,0x0
c001f3e3:	f7 f1                	div    ecx
c001f3e5:	83 ec 0c             	sub    esp,0xc
c001f3e8:	50                   	push   eax
c001f3e9:	e8 5e b3 fe ff       	call   c000a74c <timerHandler(unsigned int)>
c001f3ee:	83 c4 10             	add    esp,0x10
c001f3f1:	90                   	nop
c001f3f2:	83 c4 0c             	add    esp,0xc
c001f3f5:	c3                   	ret    
c001f3f6:	66 90                	xchg   ax,ax

c001f3f8 <APICTimer::open(int, int, void*)>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001f401:	83 c0 24             	add    eax,0x24
c001f404:	8b 00                	mov    eax,DWORD PTR [eax]
c001f406:	83 ec 08             	sub    esp,0x8
c001f409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f411:	ff d0                	call   eax
c001f413:	83 c4 10             	add    esp,0x10
c001f416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f41a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f41e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f428:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f42c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f432:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f436:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f43c:	83 ec 0c             	sub    esp,0xc
c001f43f:	51                   	push   ecx
c001f440:	6a 01                	push   0x1
c001f442:	68 d0 f3 01 c0       	push   0xc001f3d0
c001f447:	52                   	push   edx
c001f448:	50                   	push   eax
c001f449:	e8 a0 9b fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f44e:	83 c4 20             	add    esp,0x20
c001f451:	89 c2                	mov    edx,eax
c001f453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f457:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f45d:	b8 00 00 00 00       	mov    eax,0x0
c001f462:	83 c4 0c             	add    esp,0xc
c001f465:	c3                   	ret    
c001f466:	66 90                	xchg   ax,ax

c001f468 <APICTimer::write(int)>:
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	68 b0 3d 02 c0       	push   0xc0023db0
c001f473:	e8 4a f8 fe ff       	call   c000ecc2 <KePanic(char const*)>
c001f478:	83 c4 10             	add    esp,0x10
c001f47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f483:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f489:	90                   	nop
c001f48a:	83 c4 0c             	add    esp,0xc
c001f48d:	c3                   	ret    
c001f48e:	66 90                	xchg   ax,ax

c001f490 <APICTimer::APICTimer()>:
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f497:	83 ec 08             	sub    esp,0x8
c001f49a:	68 c0 3d 02 c0       	push   0xc0023dc0
c001f49f:	50                   	push   eax
c001f4a0:	e8 db b1 fe ff       	call   c000a680 <Timer::Timer(char const*)>
c001f4a5:	83 c4 10             	add    esp,0x10
c001f4a8:	ba d4 3d 02 c0       	mov    edx,0xc0023dd4
c001f4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b1:	89 10                	mov    DWORD PTR [eax],edx
c001f4b3:	90                   	nop
c001f4b4:	83 c4 0c             	add    esp,0xc
c001f4b7:	c3                   	ret    

c001f4b8 <PIT::write(int)>:
c001f4b8:	83 ec 10             	sub    esp,0x10
c001f4bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f4bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f4c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f4c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4cd:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f4d2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f4d7:	89 c2                	mov    edx,eax
c001f4d9:	c1 fa 1f             	sar    edx,0x1f
c001f4dc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f4e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4e4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f4eb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f4f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f4f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f4f9:	ee                   	out    dx,al
c001f4fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4fe:	0f b6 c0             	movzx  eax,al
c001f501:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f508:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f50c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f510:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f515:	ee                   	out    dx,al
c001f516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f51a:	c1 f8 08             	sar    eax,0x8
c001f51d:	0f b6 c0             	movzx  eax,al
c001f520:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f527:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f52b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f52f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f534:	ee                   	out    dx,al
c001f535:	90                   	nop
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	c3                   	ret    
c001f53a:	66 90                	xchg   ax,ax

c001f53c <pitHandler(regs*, void*)>:
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f545:	b8 10 27 00 00       	mov    eax,0x2710
c001f54a:	89 c2                	mov    edx,eax
c001f54c:	c1 fa 1f             	sar    edx,0x1f
c001f54f:	f7 f9                	idiv   ecx
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	50                   	push   eax
c001f555:	e8 f2 b1 fe ff       	call   c000a74c <timerHandler(unsigned int)>
c001f55a:	83 c4 10             	add    esp,0x10
c001f55d:	90                   	nop
c001f55e:	83 c4 0c             	add    esp,0xc
c001f561:	c3                   	ret    
c001f562:	66 90                	xchg   ax,ax

c001f564 <PIT::open(int, int, void*)>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f56d:	83 c0 24             	add    eax,0x24
c001f570:	8b 00                	mov    eax,DWORD PTR [eax]
c001f572:	83 ec 08             	sub    esp,0x8
c001f575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f57d:	ff d0                	call   eax
c001f57f:	83 c4 10             	add    esp,0x10
c001f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f586:	83 ec 0c             	sub    esp,0xc
c001f589:	6a 00                	push   0x0
c001f58b:	6a 01                	push   0x1
c001f58d:	68 3c f5 01 c0       	push   0xc001f53c
c001f592:	6a 00                	push   0x0
c001f594:	50                   	push   eax
c001f595:	e8 54 9a fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f59a:	83 c4 20             	add    esp,0x20
c001f59d:	89 c2                	mov    edx,eax
c001f59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f5a9:	b8 00 00 00 00       	mov    eax,0x0
c001f5ae:	83 c4 0c             	add    esp,0xc
c001f5b1:	c3                   	ret    
c001f5b2:	66 90                	xchg   ax,ax

c001f5b4 <PIT::close(int, int, void*)>:
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c9:	6a 01                	push   0x1
c001f5cb:	68 3c f5 01 c0       	push   0xc001f53c
c001f5d0:	6a 00                	push   0x0
c001f5d2:	50                   	push   eax
c001f5d3:	e8 4c 9a fe ff       	call   c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f5d8:	83 c4 10             	add    esp,0x10
c001f5db:	b8 00 00 00 00       	mov    eax,0x0
c001f5e0:	83 c4 0c             	add    esp,0xc
c001f5e3:	c3                   	ret    

c001f5e4 <PIT::PIT()>:
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5eb:	83 ec 08             	sub    esp,0x8
c001f5ee:	68 fc 3d 02 c0       	push   0xc0023dfc
c001f5f3:	50                   	push   eax
c001f5f4:	e8 87 b0 fe ff       	call   c000a680 <Timer::Timer(char const*)>
c001f5f9:	83 c4 10             	add    esp,0x10
c001f5fc:	ba 24 3e 02 c0       	mov    edx,0xc0023e24
c001f601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f605:	89 10                	mov    DWORD PTR [eax],edx
c001f607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f611:	0f b6 d0             	movzx  edx,al
c001f614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f618:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f623:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f629:	0f b6 d0             	movzx  edx,al
c001f62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f630:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f639:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f63f:	8d 50 01             	lea    edx,[eax+0x1]
c001f642:	88 d1                	mov    cl,dl
c001f644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f648:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f64e:	0f b6 d0             	movzx  edx,al
c001f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f655:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f659:	83 e1 3f             	and    ecx,0x3f
c001f65c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f660:	90                   	nop
c001f661:	83 c4 0c             	add    esp,0xc
c001f664:	c3                   	ret    
c001f665:	66 90                	xchg   ax,ax
c001f667:	66 90                	xchg   ax,ax
c001f669:	66 90                	xchg   ax,ax
c001f66b:	66 90                	xchg   ax,ax
c001f66d:	66 90                	xchg   ax,ax
c001f66f:	90                   	nop

c001f670 <avxDetect>:
c001f670:	b8 01 00 00 00       	mov    eax,0x1
c001f675:	0f a2                	cpuid  
c001f677:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f67d:	74 15                	je     c001f694 <avxDetect.noAVX>
c001f67f:	b8 01 00 00 00       	mov    eax,0x1
c001f684:	0f a2                	cpuid  
c001f686:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f68c:	74 06                	je     c001f694 <avxDetect.noAVX>
c001f68e:	b8 01 00 00 00       	mov    eax,0x1
c001f693:	c3                   	ret    

c001f694 <avxDetect.noAVX>:
c001f694:	b8 00 00 00 00       	mov    eax,0x0
c001f699:	c3                   	ret    

c001f69a <avxSave>:
c001f69a:	53                   	push   ebx
c001f69b:	52                   	push   edx
c001f69c:	31 c0                	xor    eax,eax
c001f69e:	48                   	dec    eax
c001f69f:	89 c2                	mov    edx,eax
c001f6a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6a5:	0f ae 23             	xsave  [ebx]
c001f6a8:	5a                   	pop    edx
c001f6a9:	5b                   	pop    ebx
c001f6aa:	c3                   	ret    

c001f6ab <avxLoad>:
c001f6ab:	53                   	push   ebx
c001f6ac:	52                   	push   edx
c001f6ad:	31 c0                	xor    eax,eax
c001f6af:	48                   	dec    eax
c001f6b0:	89 c2                	mov    edx,eax
c001f6b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6b6:	0f ae 2b             	xrstor [ebx]
c001f6b9:	5a                   	pop    edx
c001f6ba:	5b                   	pop    ebx
c001f6bb:	c3                   	ret    

c001f6bc <avxInit>:
c001f6bc:	e8 47 03 00 00       	call   c001fa08 <sseInit>
c001f6c1:	50                   	push   eax
c001f6c2:	51                   	push   ecx
c001f6c3:	0f 20 e0             	mov    eax,cr4
c001f6c6:	0d 00 00 04 00       	or     eax,0x40000
c001f6cb:	0f 22 e0             	mov    cr4,eax
c001f6ce:	31 c9                	xor    ecx,ecx
c001f6d0:	0f 01 d0             	xgetbv 
c001f6d3:	0d 07 00 00 00       	or     eax,0x7
c001f6d8:	0f 01 d1             	xsetbv 
c001f6db:	59                   	pop    ecx
c001f6dc:	58                   	pop    eax
c001f6dd:	c3                   	ret    

c001f6de <avxClose>:
c001f6de:	c3                   	ret    
c001f6df:	90                   	nop

c001f6e0 <isr0>:
c001f6e0:	fa                   	cli    
c001f6e1:	68 00 00 00 00       	push   0x0
c001f6e6:	68 00 00 00 00       	push   0x0
c001f6eb:	e9 56 01 00 00       	jmp    c001f846 <int_common_stub>

c001f6f0 <isr1>:
c001f6f0:	fa                   	cli    
c001f6f1:	6a 00                	push   0x0
c001f6f3:	6a 01                	push   0x1
c001f6f5:	e9 4c 01 00 00       	jmp    c001f846 <int_common_stub>

c001f6fa <isr2>:
c001f6fa:	fa                   	cli    
c001f6fb:	6a 00                	push   0x0
c001f6fd:	6a 02                	push   0x2
c001f6ff:	e9 42 01 00 00       	jmp    c001f846 <int_common_stub>

c001f704 <isr3>:
c001f704:	fa                   	cli    
c001f705:	6a 00                	push   0x0
c001f707:	6a 03                	push   0x3
c001f709:	e9 38 01 00 00       	jmp    c001f846 <int_common_stub>

c001f70e <isr4>:
c001f70e:	fa                   	cli    
c001f70f:	6a 00                	push   0x0
c001f711:	6a 04                	push   0x4
c001f713:	e9 2e 01 00 00       	jmp    c001f846 <int_common_stub>

c001f718 <isr5>:
c001f718:	fa                   	cli    
c001f719:	6a 00                	push   0x0
c001f71b:	6a 05                	push   0x5
c001f71d:	e9 24 01 00 00       	jmp    c001f846 <int_common_stub>

c001f722 <isr6>:
c001f722:	fa                   	cli    
c001f723:	6a 00                	push   0x0
c001f725:	6a 06                	push   0x6
c001f727:	e9 1a 01 00 00       	jmp    c001f846 <int_common_stub>

c001f72c <isr7>:
c001f72c:	fa                   	cli    
c001f72d:	6a 00                	push   0x0
c001f72f:	6a 07                	push   0x7
c001f731:	e9 10 01 00 00       	jmp    c001f846 <int_common_stub>

c001f736 <isr8>:
c001f736:	fa                   	cli    
c001f737:	6a 08                	push   0x8
c001f739:	e9 08 01 00 00       	jmp    c001f846 <int_common_stub>

c001f73e <isr9>:
c001f73e:	fa                   	cli    
c001f73f:	6a 00                	push   0x0
c001f741:	6a 09                	push   0x9
c001f743:	e9 fe 00 00 00       	jmp    c001f846 <int_common_stub>

c001f748 <isr10>:
c001f748:	fa                   	cli    
c001f749:	6a 0a                	push   0xa
c001f74b:	e9 f6 00 00 00       	jmp    c001f846 <int_common_stub>

c001f750 <isr11>:
c001f750:	fa                   	cli    
c001f751:	6a 0b                	push   0xb
c001f753:	e9 ee 00 00 00       	jmp    c001f846 <int_common_stub>

c001f758 <isr12>:
c001f758:	fa                   	cli    
c001f759:	6a 0c                	push   0xc
c001f75b:	e9 e6 00 00 00       	jmp    c001f846 <int_common_stub>

c001f760 <isr13>:
c001f760:	fa                   	cli    
c001f761:	6a 0d                	push   0xd
c001f763:	53                   	push   ebx
c001f764:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f768:	81 fb 36 f9 01 c0    	cmp    ebx,0xc001f936
c001f76e:	5b                   	pop    ebx
c001f76f:	0f 84 c3 01 00 00    	je     c001f938 <finishSignal2>
c001f775:	e9 cc 00 00 00       	jmp    c001f846 <int_common_stub>

c001f77a <isr14>:
c001f77a:	fa                   	cli    
c001f77b:	6a 0e                	push   0xe
c001f77d:	e9 c4 00 00 00       	jmp    c001f846 <int_common_stub>

c001f782 <isr15>:
c001f782:	fa                   	cli    
c001f783:	6a 00                	push   0x0
c001f785:	6a 0f                	push   0xf
c001f787:	e9 ba 00 00 00       	jmp    c001f846 <int_common_stub>

c001f78c <isr16>:
c001f78c:	fa                   	cli    
c001f78d:	6a 00                	push   0x0
c001f78f:	6a 10                	push   0x10
c001f791:	e9 b0 00 00 00       	jmp    c001f846 <int_common_stub>

c001f796 <isr17>:
c001f796:	fa                   	cli    
c001f797:	6a 00                	push   0x0
c001f799:	6a 11                	push   0x11
c001f79b:	e9 a6 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7a0 <isr18>:
c001f7a0:	fa                   	cli    
c001f7a1:	6a 00                	push   0x0
c001f7a3:	6a 12                	push   0x12
c001f7a5:	e9 9c 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7aa <irq3>:
c001f7aa:	fa                   	cli    
c001f7ab:	6a 00                	push   0x0
c001f7ad:	6a 23                	push   0x23
c001f7af:	e9 92 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7b4 <irq4>:
c001f7b4:	fa                   	cli    
c001f7b5:	6a 00                	push   0x0
c001f7b7:	6a 24                	push   0x24
c001f7b9:	e9 88 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7be <irq5>:
c001f7be:	fa                   	cli    
c001f7bf:	6a 00                	push   0x0
c001f7c1:	6a 25                	push   0x25
c001f7c3:	e9 7e 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7c8 <irq6>:
c001f7c8:	fa                   	cli    
c001f7c9:	6a 00                	push   0x0
c001f7cb:	6a 26                	push   0x26
c001f7cd:	e9 74 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7d2 <irq7>:
c001f7d2:	fa                   	cli    
c001f7d3:	6a 00                	push   0x0
c001f7d5:	6a 27                	push   0x27
c001f7d7:	e9 6a 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7dc <irq8>:
c001f7dc:	fa                   	cli    
c001f7dd:	6a 00                	push   0x0
c001f7df:	6a 28                	push   0x28
c001f7e1:	e9 60 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7e6 <irq9>:
c001f7e6:	fa                   	cli    
c001f7e7:	6a 00                	push   0x0
c001f7e9:	6a 29                	push   0x29
c001f7eb:	e9 56 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7f0 <irq10>:
c001f7f0:	fa                   	cli    
c001f7f1:	6a 00                	push   0x0
c001f7f3:	6a 2a                	push   0x2a
c001f7f5:	e9 4c 00 00 00       	jmp    c001f846 <int_common_stub>

c001f7fa <irq11>:
c001f7fa:	fa                   	cli    
c001f7fb:	6a 00                	push   0x0
c001f7fd:	6a 2b                	push   0x2b
c001f7ff:	e9 42 00 00 00       	jmp    c001f846 <int_common_stub>

c001f804 <irq12>:
c001f804:	fa                   	cli    
c001f805:	6a 00                	push   0x0
c001f807:	6a 2c                	push   0x2c
c001f809:	e9 38 00 00 00       	jmp    c001f846 <int_common_stub>

c001f80e <irq13>:
c001f80e:	fa                   	cli    
c001f80f:	6a 00                	push   0x0
c001f811:	6a 2d                	push   0x2d
c001f813:	e9 2e 00 00 00       	jmp    c001f846 <int_common_stub>

c001f818 <irq14>:
c001f818:	fa                   	cli    
c001f819:	6a 00                	push   0x0
c001f81b:	6a 2e                	push   0x2e
c001f81d:	e9 24 00 00 00       	jmp    c001f846 <int_common_stub>

c001f822 <irq15>:
c001f822:	fa                   	cli    
c001f823:	6a 00                	push   0x0
c001f825:	6a 2f                	push   0x2f
c001f827:	e9 1a 00 00 00       	jmp    c001f846 <int_common_stub>

c001f82c <irq1>:
c001f82c:	fa                   	cli    
c001f82d:	6a 00                	push   0x0
c001f82f:	6a 21                	push   0x21
c001f831:	eb 13                	jmp    c001f846 <int_common_stub>

c001f833 <irq2>:
c001f833:	fa                   	cli    
c001f834:	6a 00                	push   0x0
c001f836:	6a 22                	push   0x22
c001f838:	eb 0c                	jmp    c001f846 <int_common_stub>

c001f83a <isr96>:
c001f83a:	6a 00                	push   0x0
c001f83c:	6a 60                	push   0x60
c001f83e:	fb                   	sti    
c001f83f:	eb 37                	jmp    c001f878 <syscall_common_stub>

c001f841 <irq0>:
c001f841:	fa                   	cli    
c001f842:	6a 00                	push   0x0
c001f844:	6a 20                	push   0x20

c001f846 <int_common_stub>:
c001f846:	60                   	pusha  
c001f847:	1e                   	push   ds
c001f848:	06                   	push   es
c001f849:	0f a0                	push   fs
c001f84b:	0f a8                	push   gs
c001f84d:	66 b8 10 00          	mov    ax,0x10
c001f851:	66 8e d8             	mov    ds,ax
c001f854:	66 8e c0             	mov    es,ax
c001f857:	66 8e e0             	mov    fs,ax
c001f85a:	66 8e e8             	mov    gs,ax
c001f85d:	54                   	push   esp
c001f85e:	fc                   	cld    
c001f85f:	e8 8c e5 fe ff       	call   c000ddf0 <int_handler>
c001f864:	81 c4 04 00 00 00    	add    esp,0x4
c001f86a:	0f a9                	pop    gs
c001f86c:	0f a1                	pop    fs
c001f86e:	07                   	pop    es
c001f86f:	1f                   	pop    ds
c001f870:	61                   	popa   
c001f871:	81 c4 08 00 00 00    	add    esp,0x8
c001f877:	cf                   	iret   

c001f878 <syscall_common_stub>:
c001f878:	60                   	pusha  
c001f879:	1e                   	push   ds
c001f87a:	06                   	push   es
c001f87b:	0f a0                	push   fs
c001f87d:	0f a8                	push   gs
c001f87f:	66 b8 10 00          	mov    ax,0x10
c001f883:	66 8e d8             	mov    ds,ax
c001f886:	66 8e c0             	mov    es,ax
c001f889:	66 8e e0             	mov    fs,ax
c001f88c:	66 8e e8             	mov    gs,ax
c001f88f:	54                   	push   esp
c001f890:	fc                   	cld    
c001f891:	e8 5a e5 fe ff       	call   c000ddf0 <int_handler>
c001f896:	81 c4 04 00 00 00    	add    esp,0x4
c001f89c:	0f a9                	pop    gs
c001f89e:	0f a1                	pop    fs
c001f8a0:	07                   	pop    es
c001f8a1:	1f                   	pop    ds
c001f8a2:	e8 c8 06 ff ff       	call   c000ff6f <KiCheckSignalZ>
c001f8a7:	3d 00 00 00 00       	cmp    eax,0x0
c001f8ac:	0f 84 c0 00 00 00    	je     c001f972 <skipSignals>
c001f8b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f8b7:	61                   	popa   
c001f8b8:	53                   	push   ebx
c001f8b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f8bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f8c2:	5b                   	pop    ebx
c001f8c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f8c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f8cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f8ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f8d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f8d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f8d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f8da:	81 c4 08 00 00 00    	add    esp,0x8
c001f8e0:	5e                   	pop    esi
c001f8e1:	5b                   	pop    ebx
c001f8e2:	59                   	pop    ecx
c001f8e3:	5a                   	pop    edx
c001f8e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f8e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f8ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f8ed:	52                   	push   edx
c001f8ee:	51                   	push   ecx
c001f8ef:	53                   	push   ebx
c001f8f0:	56                   	push   esi
c001f8f1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f8f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f8fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f8fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f900:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f906:	60                   	pusha  
c001f907:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f90d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f910:	89 e3                	mov    ebx,esp
c001f912:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f915:	52                   	push   edx
c001f916:	68 36 f9 01 c0       	push   0xc001f936
c001f91b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f91e:	89 dc                	mov    esp,ebx
c001f920:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f923:	68 23 00 00 00       	push   0x23
c001f928:	51                   	push   ecx
c001f929:	68 02 02 00 00       	push   0x202
c001f92e:	68 1b 00 00 00       	push   0x1b
c001f933:	ff 36                	push   DWORD PTR [esi]
c001f935:	cf                   	iret   

c001f936 <finishSignal>:
c001f936:	cd 0f                	int    0xf

c001f938 <finishSignal2>:
c001f938:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f93e:	e8 a9 06 ff ff       	call   c000ffec <KiFinishSignalZ>
c001f943:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f949:	68 23 00 00 00       	push   0x23
c001f94e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f951:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f954:	68 1b 00 00 00       	push   0x1b
c001f959:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f95c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f95f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f962:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f965:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f968:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f96b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f96e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f971:	cf                   	iret   

c001f972 <skipSignals>:
c001f972:	61                   	popa   
c001f973:	81 c4 08 00 00 00    	add    esp,0x8
c001f979:	cf                   	iret   
c001f97a:	90                   	nop
c001f97b:	90                   	nop

c001f97c <irq16>:
c001f97c:	fa                   	cli    
c001f97d:	6a 00                	push   0x0
c001f97f:	6a 30                	push   0x30
c001f981:	e9 c0 fe ff ff       	jmp    c001f846 <int_common_stub>

c001f986 <irq17>:
c001f986:	fa                   	cli    
c001f987:	6a 00                	push   0x0
c001f989:	6a 31                	push   0x31
c001f98b:	e9 b6 fe ff ff       	jmp    c001f846 <int_common_stub>

c001f990 <irq18>:
c001f990:	fa                   	cli    
c001f991:	6a 00                	push   0x0
c001f993:	6a 32                	push   0x32
c001f995:	e9 ac fe ff ff       	jmp    c001f846 <int_common_stub>

c001f99a <irq19>:
c001f99a:	fa                   	cli    
c001f99b:	6a 00                	push   0x0
c001f99d:	6a 33                	push   0x33
c001f99f:	e9 a2 fe ff ff       	jmp    c001f846 <int_common_stub>

c001f9a4 <irq20>:
c001f9a4:	fa                   	cli    
c001f9a5:	6a 00                	push   0x0
c001f9a7:	6a 34                	push   0x34
c001f9a9:	e9 98 fe ff ff       	jmp    c001f846 <int_common_stub>

c001f9ae <irq21>:
c001f9ae:	fa                   	cli    
c001f9af:	6a 00                	push   0x0
c001f9b1:	6a 35                	push   0x35
c001f9b3:	e9 8e fe ff ff       	jmp    c001f846 <int_common_stub>

c001f9b8 <irq22>:
c001f9b8:	fa                   	cli    
c001f9b9:	6a 00                	push   0x0
c001f9bb:	6a 36                	push   0x36
c001f9bd:	e9 84 fe ff ff       	jmp    c001f846 <int_common_stub>

c001f9c2 <irq23>:
c001f9c2:	fa                   	cli    
c001f9c3:	6a 00                	push   0x0
c001f9c5:	6a 37                	push   0x37
c001f9c7:	e9 7a fe ff ff       	jmp    c001f846 <int_common_stub>
c001f9cc:	66 90                	xchg   ax,ax
c001f9ce:	66 90                	xchg   ax,ax

c001f9d0 <i386GetRDRAND>:
c001f9d0:	b9 64 00 00 00       	mov    ecx,0x64

c001f9d5 <retry>:
c001f9d5:	0f c7 f0             	rdrand eax
c001f9d8:	72 05                	jb     c001f9df <retry.done>
c001f9da:	e2 f9                	loop   c001f9d5 <retry>

c001f9dc <retry.fail>:
c001f9dc:	31 c0                	xor    eax,eax
c001f9de:	c3                   	ret    

c001f9df <retry.done>:
c001f9df:	c3                   	ret    

c001f9e0 <sseDetect>:
c001f9e0:	b8 01 00 00 00       	mov    eax,0x1
c001f9e5:	0f a2                	cpuid  
c001f9e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f9ed:	74 06                	je     c001f9f5 <sseDetect.noSSE>
c001f9ef:	b8 01 00 00 00       	mov    eax,0x1
c001f9f4:	c3                   	ret    

c001f9f5 <sseDetect.noSSE>:
c001f9f5:	31 c0                	xor    eax,eax
c001f9f7:	c3                   	ret    

c001f9f8 <sseSave>:
c001f9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fc:	0f ae 00             	fxsave [eax]
c001f9ff:	c3                   	ret    

c001fa00 <sseLoad>:
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	0f ae 08             	fxrstor [eax]
c001fa07:	c3                   	ret    

c001fa08 <sseInit>:
c001fa08:	e8 48 00 00 00       	call   c001fa55 <x87Init>
c001fa0d:	0f 20 e0             	mov    eax,cr4
c001fa10:	66 0d 00 06          	or     ax,0x600
c001fa14:	0f 22 e0             	mov    cr4,eax
c001fa17:	c3                   	ret    

c001fa18 <sseClose>:
c001fa18:	c3                   	ret    
c001fa19:	66 90                	xchg   ax,ax
c001fa1b:	66 90                	xchg   ax,ax
c001fa1d:	66 90                	xchg   ax,ax
c001fa1f:	90                   	nop

c001fa20 <value_37F>:
c001fa20:	7f 03                	jg     c001fa25 <value_37A+0x1>

c001fa22 <value_37E>:
c001fa22:	7e 03                	jle    c001fa27 <x87Detect+0x1>

c001fa24 <value_37A>:
c001fa24:	7a 03                	jp     c001fa29 <x87Detect+0x3>

c001fa26 <x87Detect>:
c001fa26:	53                   	push   ebx
c001fa27:	51                   	push   ecx
c001fa28:	52                   	push   edx
c001fa29:	b8 01 00 00 00       	mov    eax,0x1
c001fa2e:	0f a2                	cpuid  
c001fa30:	f7 c2 01 00 00 00    	test   edx,0x1
c001fa36:	74 06                	je     c001fa3e <x87Detect.nox87>
c001fa38:	b8 01 00 00 00       	mov    eax,0x1
c001fa3d:	c3                   	ret    

c001fa3e <x87Detect.nox87>:
c001fa3e:	b8 00 00 00 00       	mov    eax,0x0
c001fa43:	5a                   	pop    edx
c001fa44:	59                   	pop    ecx
c001fa45:	5b                   	pop    ebx
c001fa46:	c3                   	ret    

c001fa47 <x87Save>:
c001fa47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4b:	dd 30                	fnsave [eax]
c001fa4d:	c3                   	ret    

c001fa4e <x87Load>:
c001fa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa52:	dd 20                	frstor [eax]
c001fa54:	c3                   	ret    

c001fa55 <x87Init>:
c001fa55:	0f 20 c0             	mov    eax,cr0
c001fa58:	66 25 fb ff          	and    ax,0xfffb
c001fa5c:	66 0d 22 00          	or     ax,0x22
c001fa60:	0f 22 c0             	mov    cr0,eax
c001fa63:	db e3                	fninit 
c001fa65:	0f 06                	clts   
c001fa67:	d9 2d 24 fa 01 c0    	fldcw  WORD PTR ds:0xc001fa24
c001fa6d:	c3                   	ret    

c001fa6e <x87Close>:
c001fa6e:	c3                   	ret    
c001fa6f:	90                   	nop

c001fa70 <__do_global_ctors_aux>:
c001fa70:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c001fa75:	83 f8 ff             	cmp    eax,0xffffffff
c001fa78:	74 1a                	je     c001fa94 <__do_global_ctors_aux+0x24>
c001fa7a:	55                   	push   ebp
c001fa7b:	89 e5                	mov    ebp,esp
c001fa7d:	53                   	push   ebx
c001fa7e:	52                   	push   edx
c001fa7f:	bb 24 0a 02 c0       	mov    ebx,0xc0020a24
c001fa84:	ff d0                	call   eax
c001fa86:	83 eb 04             	sub    ebx,0x4
c001fa89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa8b:	83 f8 ff             	cmp    eax,0xffffffff
c001fa8e:	75 f4                	jne    c001fa84 <__do_global_ctors_aux+0x14>
c001fa90:	58                   	pop    eax
c001fa91:	5b                   	pop    ebx
c001fa92:	5d                   	pop    ebp
c001fa93:	c3                   	ret    
c001fa94:	c3                   	ret    
c001fa95:	66 90                	xchg   ax,ax
c001fa97:	90                   	nop

c001fa98 <__divdi3>:
c001fa98:	55                   	push   ebp
c001fa99:	57                   	push   edi
c001fa9a:	56                   	push   esi
c001fa9b:	53                   	push   ebx
c001fa9c:	83 ec 1c             	sub    esp,0x1c
c001fa9f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001faa3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001faa7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001faaa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001faae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fab2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fab6:	85 db                	test   ebx,ebx
c001fab8:	0f 88 8e 00 00 00    	js     c001fb4c <__divdi3+0xb4>
c001fabe:	89 dd                	mov    ebp,ebx
c001fac0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fac8:	89 d3                	mov    ebx,edx
c001faca:	85 d2                	test   edx,edx
c001facc:	79 0d                	jns    c001fadb <__divdi3+0x43>
c001face:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001fad2:	f7 d8                	neg    eax
c001fad4:	83 d2 00             	adc    edx,0x0
c001fad7:	f7 da                	neg    edx
c001fad9:	89 d3                	mov    ebx,edx
c001fadb:	89 c7                	mov    edi,eax
c001fadd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fae0:	85 db                	test   ebx,ebx
c001fae2:	75 48                	jne    c001fb2c <__divdi3+0x94>
c001fae4:	39 ef                	cmp    edi,ebp
c001fae6:	76 24                	jbe    c001fb0c <__divdi3+0x74>
c001fae8:	89 ea                	mov    edx,ebp
c001faea:	f7 f7                	div    edi
c001faec:	89 c1                	mov    ecx,eax
c001faee:	31 f6                	xor    esi,esi
c001faf0:	89 c8                	mov    eax,ecx
c001faf2:	89 f2                	mov    edx,esi
c001faf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faf8:	85 c9                	test   ecx,ecx
c001fafa:	74 07                	je     c001fb03 <__divdi3+0x6b>
c001fafc:	f7 d8                	neg    eax
c001fafe:	83 d2 00             	adc    edx,0x0
c001fb01:	f7 da                	neg    edx
c001fb03:	83 c4 1c             	add    esp,0x1c
c001fb06:	5b                   	pop    ebx
c001fb07:	5e                   	pop    esi
c001fb08:	5f                   	pop    edi
c001fb09:	5d                   	pop    ebp
c001fb0a:	c3                   	ret    
c001fb0b:	90                   	nop
c001fb0c:	85 ff                	test   edi,edi
c001fb0e:	75 0b                	jne    c001fb1b <__divdi3+0x83>
c001fb10:	b8 01 00 00 00       	mov    eax,0x1
c001fb15:	31 d2                	xor    edx,edx
c001fb17:	f7 f3                	div    ebx
c001fb19:	89 c7                	mov    edi,eax
c001fb1b:	31 d2                	xor    edx,edx
c001fb1d:	89 e8                	mov    eax,ebp
c001fb1f:	f7 f7                	div    edi
c001fb21:	89 c6                	mov    esi,eax
c001fb23:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fb26:	f7 f7                	div    edi
c001fb28:	89 c1                	mov    ecx,eax
c001fb2a:	eb c4                	jmp    c001faf0 <__divdi3+0x58>
c001fb2c:	39 eb                	cmp    ebx,ebp
c001fb2e:	77 3c                	ja     c001fb6c <__divdi3+0xd4>
c001fb30:	0f bd f3             	bsr    esi,ebx
c001fb33:	83 f6 1f             	xor    esi,0x1f
c001fb36:	75 40                	jne    c001fb78 <__divdi3+0xe0>
c001fb38:	39 eb                	cmp    ebx,ebp
c001fb3a:	72 09                	jb     c001fb45 <__divdi3+0xad>
c001fb3c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fb3f:	0f 87 97 00 00 00    	ja     c001fbdc <__divdi3+0x144>
c001fb45:	b9 01 00 00 00       	mov    ecx,0x1
c001fb4a:	eb a4                	jmp    c001faf0 <__divdi3+0x58>
c001fb4c:	f7 d9                	neg    ecx
c001fb4e:	83 d3 00             	adc    ebx,0x0
c001fb51:	f7 db                	neg    ebx
c001fb53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fb56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fb5a:	89 dd                	mov    ebp,ebx
c001fb5c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001fb64:	e9 5f ff ff ff       	jmp    c001fac8 <__divdi3+0x30>
c001fb69:	8d 76 00             	lea    esi,[esi+0x0]
c001fb6c:	31 f6                	xor    esi,esi
c001fb6e:	31 c9                	xor    ecx,ecx
c001fb70:	e9 7b ff ff ff       	jmp    c001faf0 <__divdi3+0x58>
c001fb75:	8d 76 00             	lea    esi,[esi+0x0]
c001fb78:	b8 20 00 00 00       	mov    eax,0x20
c001fb7d:	29 f0                	sub    eax,esi
c001fb7f:	89 f1                	mov    ecx,esi
c001fb81:	d3 e3                	shl    ebx,cl
c001fb83:	89 fa                	mov    edx,edi
c001fb85:	88 c1                	mov    cl,al
c001fb87:	d3 ea                	shr    edx,cl
c001fb89:	09 da                	or     edx,ebx
c001fb8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fb8f:	89 f1                	mov    ecx,esi
c001fb91:	d3 e7                	shl    edi,cl
c001fb93:	89 eb                	mov    ebx,ebp
c001fb95:	88 c1                	mov    cl,al
c001fb97:	d3 eb                	shr    ebx,cl
c001fb99:	89 f1                	mov    ecx,esi
c001fb9b:	d3 e5                	shl    ebp,cl
c001fb9d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001fba0:	88 c1                	mov    cl,al
c001fba2:	d3 ea                	shr    edx,cl
c001fba4:	09 d5                	or     ebp,edx
c001fba6:	89 e8                	mov    eax,ebp
c001fba8:	89 da                	mov    edx,ebx
c001fbaa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001fbae:	89 d3                	mov    ebx,edx
c001fbb0:	89 c5                	mov    ebp,eax
c001fbb2:	f7 e7                	mul    edi
c001fbb4:	39 d3                	cmp    ebx,edx
c001fbb6:	72 18                	jb     c001fbd0 <__divdi3+0x138>
c001fbb8:	74 0a                	je     c001fbc4 <__divdi3+0x12c>
c001fbba:	89 e9                	mov    ecx,ebp
c001fbbc:	31 f6                	xor    esi,esi
c001fbbe:	e9 2d ff ff ff       	jmp    c001faf0 <__divdi3+0x58>
c001fbc3:	90                   	nop
c001fbc4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001fbc7:	89 f1                	mov    ecx,esi
c001fbc9:	d3 e7                	shl    edi,cl
c001fbcb:	39 c7                	cmp    edi,eax
c001fbcd:	73 eb                	jae    c001fbba <__divdi3+0x122>
c001fbcf:	90                   	nop
c001fbd0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001fbd3:	31 f6                	xor    esi,esi
c001fbd5:	e9 16 ff ff ff       	jmp    c001faf0 <__divdi3+0x58>
c001fbda:	66 90                	xchg   ax,ax
c001fbdc:	31 c9                	xor    ecx,ecx
c001fbde:	e9 0d ff ff ff       	jmp    c001faf0 <__divdi3+0x58>
c001fbe3:	90                   	nop

c001fbe4 <__moddi3>:
c001fbe4:	55                   	push   ebp
c001fbe5:	57                   	push   edi
c001fbe6:	56                   	push   esi
c001fbe7:	53                   	push   ebx
c001fbe8:	83 ec 2c             	sub    esp,0x2c
c001fbeb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001fbef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fbf3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fbf7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001fbfb:	85 db                	test   ebx,ebx
c001fbfd:	0f 88 85 00 00 00    	js     c001fc88 <__moddi3+0xa4>
c001fc03:	89 de                	mov    esi,ebx
c001fc05:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fc0d:	89 d7                	mov    edi,edx
c001fc0f:	85 d2                	test   edx,edx
c001fc11:	79 09                	jns    c001fc1c <__moddi3+0x38>
c001fc13:	f7 d8                	neg    eax
c001fc15:	83 d2 00             	adc    edx,0x0
c001fc18:	f7 da                	neg    edx
c001fc1a:	89 d7                	mov    edi,edx
c001fc1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc20:	89 cd                	mov    ebp,ecx
c001fc22:	85 ff                	test   edi,edi
c001fc24:	75 52                	jne    c001fc78 <__moddi3+0x94>
c001fc26:	89 c3                	mov    ebx,eax
c001fc28:	39 f0                	cmp    eax,esi
c001fc2a:	76 24                	jbe    c001fc50 <__moddi3+0x6c>
c001fc2c:	89 c8                	mov    eax,ecx
c001fc2e:	89 f2                	mov    edx,esi
c001fc30:	f7 f3                	div    ebx
c001fc32:	89 d6                	mov    esi,edx
c001fc34:	89 f0                	mov    eax,esi
c001fc36:	31 d2                	xor    edx,edx
c001fc38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fc3c:	85 c9                	test   ecx,ecx
c001fc3e:	74 07                	je     c001fc47 <__moddi3+0x63>
c001fc40:	f7 d8                	neg    eax
c001fc42:	83 d2 00             	adc    edx,0x0
c001fc45:	f7 da                	neg    edx
c001fc47:	83 c4 2c             	add    esp,0x2c
c001fc4a:	5b                   	pop    ebx
c001fc4b:	5e                   	pop    esi
c001fc4c:	5f                   	pop    edi
c001fc4d:	5d                   	pop    ebp
c001fc4e:	c3                   	ret    
c001fc4f:	90                   	nop
c001fc50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fc54:	85 db                	test   ebx,ebx
c001fc56:	75 0d                	jne    c001fc65 <__moddi3+0x81>
c001fc58:	b8 01 00 00 00       	mov    eax,0x1
c001fc5d:	31 d2                	xor    edx,edx
c001fc5f:	f7 f7                	div    edi
c001fc61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc65:	89 f0                	mov    eax,esi
c001fc67:	31 d2                	xor    edx,edx
c001fc69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fc6d:	f7 f7                	div    edi
c001fc6f:	89 e8                	mov    eax,ebp
c001fc71:	f7 f7                	div    edi
c001fc73:	89 d6                	mov    esi,edx
c001fc75:	eb bd                	jmp    c001fc34 <__moddi3+0x50>
c001fc77:	90                   	nop
c001fc78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fc7c:	39 f7                	cmp    edi,esi
c001fc7e:	76 20                	jbe    c001fca0 <__moddi3+0xbc>
c001fc80:	89 c8                	mov    eax,ecx
c001fc82:	89 f2                	mov    edx,esi
c001fc84:	eb b2                	jmp    c001fc38 <__moddi3+0x54>
c001fc86:	66 90                	xchg   ax,ax
c001fc88:	f7 d9                	neg    ecx
c001fc8a:	83 d3 00             	adc    ebx,0x0
c001fc8d:	f7 db                	neg    ebx
c001fc8f:	89 de                	mov    esi,ebx
c001fc91:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fc99:	e9 6f ff ff ff       	jmp    c001fc0d <__moddi3+0x29>
c001fc9e:	66 90                	xchg   ax,ax
c001fca0:	0f bd c7             	bsr    eax,edi
c001fca3:	83 f0 1f             	xor    eax,0x1f
c001fca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fcaa:	75 24                	jne    c001fcd0 <__moddi3+0xec>
c001fcac:	39 f7                	cmp    edi,esi
c001fcae:	72 06                	jb     c001fcb6 <__moddi3+0xd2>
c001fcb0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001fcb4:	77 0c                	ja     c001fcc2 <__moddi3+0xde>
c001fcb6:	89 e9                	mov    ecx,ebp
c001fcb8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001fcbc:	19 fe                	sbb    esi,edi
c001fcbe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fcc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcc6:	89 f2                	mov    edx,esi
c001fcc8:	e9 6b ff ff ff       	jmp    c001fc38 <__moddi3+0x54>
c001fccd:	8d 76 00             	lea    esi,[esi+0x0]
c001fcd0:	b8 20 00 00 00       	mov    eax,0x20
c001fcd5:	89 c2                	mov    edx,eax
c001fcd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fcdb:	29 da                	sub    edx,ebx
c001fcdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fce1:	88 d9                	mov    cl,bl
c001fce3:	d3 e7                	shl    edi,cl
c001fce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fce9:	88 d1                	mov    cl,dl
c001fceb:	d3 e8                	shr    eax,cl
c001fced:	09 c7                	or     edi,eax
c001fcef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fcf3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fcf7:	89 d8                	mov    eax,ebx
c001fcf9:	88 d9                	mov    cl,bl
c001fcfb:	d3 e7                	shl    edi,cl
c001fcfd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fd01:	89 f3                	mov    ebx,esi
c001fd03:	88 d1                	mov    cl,dl
c001fd05:	d3 eb                	shr    ebx,cl
c001fd07:	89 c7                	mov    edi,eax
c001fd09:	88 c1                	mov    cl,al
c001fd0b:	d3 e6                	shl    esi,cl
c001fd0d:	89 e8                	mov    eax,ebp
c001fd0f:	88 d1                	mov    cl,dl
c001fd11:	d3 e8                	shr    eax,cl
c001fd13:	09 f0                	or     eax,esi
c001fd15:	89 f9                	mov    ecx,edi
c001fd17:	d3 e5                	shl    ebp,cl
c001fd19:	89 da                	mov    edx,ebx
c001fd1b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fd1f:	89 d3                	mov    ebx,edx
c001fd21:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fd25:	89 c6                	mov    esi,eax
c001fd27:	89 d1                	mov    ecx,edx
c001fd29:	39 d3                	cmp    ebx,edx
c001fd2b:	72 27                	jb     c001fd54 <__moddi3+0x170>
c001fd2d:	74 21                	je     c001fd50 <__moddi3+0x16c>
c001fd2f:	29 f5                	sub    ebp,esi
c001fd31:	19 cb                	sbb    ebx,ecx
c001fd33:	89 de                	mov    esi,ebx
c001fd35:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fd39:	d3 e6                	shl    esi,cl
c001fd3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fd3f:	89 f9                	mov    ecx,edi
c001fd41:	d3 ed                	shr    ebp,cl
c001fd43:	09 ee                	or     esi,ebp
c001fd45:	89 f0                	mov    eax,esi
c001fd47:	d3 eb                	shr    ebx,cl
c001fd49:	89 da                	mov    edx,ebx
c001fd4b:	e9 e8 fe ff ff       	jmp    c001fc38 <__moddi3+0x54>
c001fd50:	39 c5                	cmp    ebp,eax
c001fd52:	73 db                	jae    c001fd2f <__moddi3+0x14b>
c001fd54:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fd58:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fd5c:	89 d1                	mov    ecx,edx
c001fd5e:	89 c6                	mov    esi,eax
c001fd60:	eb cd                	jmp    c001fd2f <__moddi3+0x14b>
c001fd62:	66 90                	xchg   ax,ax

c001fd64 <__udivdi3>:
c001fd64:	55                   	push   ebp
c001fd65:	57                   	push   edi
c001fd66:	56                   	push   esi
c001fd67:	53                   	push   ebx
c001fd68:	83 ec 1c             	sub    esp,0x1c
c001fd6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fd6f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fd73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fd77:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fd7b:	85 d2                	test   edx,edx
c001fd7d:	75 41                	jne    c001fdc0 <__udivdi3+0x5c>
c001fd7f:	39 f7                	cmp    edi,esi
c001fd81:	76 15                	jbe    c001fd98 <__udivdi3+0x34>
c001fd83:	89 e8                	mov    eax,ebp
c001fd85:	89 f2                	mov    edx,esi
c001fd87:	f7 f7                	div    edi
c001fd89:	31 db                	xor    ebx,ebx
c001fd8b:	89 da                	mov    edx,ebx
c001fd8d:	83 c4 1c             	add    esp,0x1c
c001fd90:	5b                   	pop    ebx
c001fd91:	5e                   	pop    esi
c001fd92:	5f                   	pop    edi
c001fd93:	5d                   	pop    ebp
c001fd94:	c3                   	ret    
c001fd95:	8d 76 00             	lea    esi,[esi+0x0]
c001fd98:	89 f9                	mov    ecx,edi
c001fd9a:	85 ff                	test   edi,edi
c001fd9c:	75 0b                	jne    c001fda9 <__udivdi3+0x45>
c001fd9e:	b8 01 00 00 00       	mov    eax,0x1
c001fda3:	31 d2                	xor    edx,edx
c001fda5:	f7 f7                	div    edi
c001fda7:	89 c1                	mov    ecx,eax
c001fda9:	31 d2                	xor    edx,edx
c001fdab:	89 f0                	mov    eax,esi
c001fdad:	f7 f1                	div    ecx
c001fdaf:	89 c3                	mov    ebx,eax
c001fdb1:	89 e8                	mov    eax,ebp
c001fdb3:	f7 f1                	div    ecx
c001fdb5:	89 da                	mov    edx,ebx
c001fdb7:	83 c4 1c             	add    esp,0x1c
c001fdba:	5b                   	pop    ebx
c001fdbb:	5e                   	pop    esi
c001fdbc:	5f                   	pop    edi
c001fdbd:	5d                   	pop    ebp
c001fdbe:	c3                   	ret    
c001fdbf:	90                   	nop
c001fdc0:	39 f2                	cmp    edx,esi
c001fdc2:	77 1c                	ja     c001fde0 <__udivdi3+0x7c>
c001fdc4:	0f bd da             	bsr    ebx,edx
c001fdc7:	83 f3 1f             	xor    ebx,0x1f
c001fdca:	75 24                	jne    c001fdf0 <__udivdi3+0x8c>
c001fdcc:	39 f2                	cmp    edx,esi
c001fdce:	72 08                	jb     c001fdd8 <__udivdi3+0x74>
c001fdd0:	39 ef                	cmp    edi,ebp
c001fdd2:	0f 87 84 00 00 00    	ja     c001fe5c <__udivdi3+0xf8>
c001fdd8:	b8 01 00 00 00       	mov    eax,0x1
c001fddd:	eb ac                	jmp    c001fd8b <__udivdi3+0x27>
c001fddf:	90                   	nop
c001fde0:	31 db                	xor    ebx,ebx
c001fde2:	31 c0                	xor    eax,eax
c001fde4:	89 da                	mov    edx,ebx
c001fde6:	83 c4 1c             	add    esp,0x1c
c001fde9:	5b                   	pop    ebx
c001fdea:	5e                   	pop    esi
c001fdeb:	5f                   	pop    edi
c001fdec:	5d                   	pop    ebp
c001fded:	c3                   	ret    
c001fdee:	66 90                	xchg   ax,ax
c001fdf0:	b8 20 00 00 00       	mov    eax,0x20
c001fdf5:	29 d8                	sub    eax,ebx
c001fdf7:	88 d9                	mov    cl,bl
c001fdf9:	d3 e2                	shl    edx,cl
c001fdfb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fdff:	89 fa                	mov    edx,edi
c001fe01:	88 c1                	mov    cl,al
c001fe03:	d3 ea                	shr    edx,cl
c001fe05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe09:	09 d1                	or     ecx,edx
c001fe0b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fe0f:	88 d9                	mov    cl,bl
c001fe11:	d3 e7                	shl    edi,cl
c001fe13:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fe17:	89 f7                	mov    edi,esi
c001fe19:	88 c1                	mov    cl,al
c001fe1b:	d3 ef                	shr    edi,cl
c001fe1d:	88 d9                	mov    cl,bl
c001fe1f:	d3 e6                	shl    esi,cl
c001fe21:	89 ea                	mov    edx,ebp
c001fe23:	88 c1                	mov    cl,al
c001fe25:	d3 ea                	shr    edx,cl
c001fe27:	09 d6                	or     esi,edx
c001fe29:	89 f0                	mov    eax,esi
c001fe2b:	89 fa                	mov    edx,edi
c001fe2d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fe31:	89 d7                	mov    edi,edx
c001fe33:	89 c6                	mov    esi,eax
c001fe35:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fe39:	39 d7                	cmp    edi,edx
c001fe3b:	72 13                	jb     c001fe50 <__udivdi3+0xec>
c001fe3d:	74 09                	je     c001fe48 <__udivdi3+0xe4>
c001fe3f:	89 f0                	mov    eax,esi
c001fe41:	31 db                	xor    ebx,ebx
c001fe43:	e9 43 ff ff ff       	jmp    c001fd8b <__udivdi3+0x27>
c001fe48:	88 d9                	mov    cl,bl
c001fe4a:	d3 e5                	shl    ebp,cl
c001fe4c:	39 c5                	cmp    ebp,eax
c001fe4e:	73 ef                	jae    c001fe3f <__udivdi3+0xdb>
c001fe50:	8d 46 ff             	lea    eax,[esi-0x1]
c001fe53:	31 db                	xor    ebx,ebx
c001fe55:	e9 31 ff ff ff       	jmp    c001fd8b <__udivdi3+0x27>
c001fe5a:	66 90                	xchg   ax,ax
c001fe5c:	31 c0                	xor    eax,eax
c001fe5e:	e9 28 ff ff ff       	jmp    c001fd8b <__udivdi3+0x27>
c001fe63:	90                   	nop

c001fe64 <__umoddi3>:
c001fe64:	55                   	push   ebp
c001fe65:	57                   	push   edi
c001fe66:	56                   	push   esi
c001fe67:	53                   	push   ebx
c001fe68:	83 ec 1c             	sub    esp,0x1c
c001fe6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fe6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fe77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fe7b:	89 da                	mov    edx,ebx
c001fe7d:	85 c0                	test   eax,eax
c001fe7f:	75 37                	jne    c001feb8 <__umoddi3+0x54>
c001fe81:	39 df                	cmp    edi,ebx
c001fe83:	76 13                	jbe    c001fe98 <__umoddi3+0x34>
c001fe85:	89 f0                	mov    eax,esi
c001fe87:	f7 f7                	div    edi
c001fe89:	89 d0                	mov    eax,edx
c001fe8b:	31 d2                	xor    edx,edx
c001fe8d:	83 c4 1c             	add    esp,0x1c
c001fe90:	5b                   	pop    ebx
c001fe91:	5e                   	pop    esi
c001fe92:	5f                   	pop    edi
c001fe93:	5d                   	pop    ebp
c001fe94:	c3                   	ret    
c001fe95:	8d 76 00             	lea    esi,[esi+0x0]
c001fe98:	89 fd                	mov    ebp,edi
c001fe9a:	85 ff                	test   edi,edi
c001fe9c:	75 0b                	jne    c001fea9 <__umoddi3+0x45>
c001fe9e:	b8 01 00 00 00       	mov    eax,0x1
c001fea3:	31 d2                	xor    edx,edx
c001fea5:	f7 f7                	div    edi
c001fea7:	89 c5                	mov    ebp,eax
c001fea9:	89 d8                	mov    eax,ebx
c001feab:	31 d2                	xor    edx,edx
c001fead:	f7 f5                	div    ebp
c001feaf:	89 f0                	mov    eax,esi
c001feb1:	f7 f5                	div    ebp
c001feb3:	89 d0                	mov    eax,edx
c001feb5:	eb d4                	jmp    c001fe8b <__umoddi3+0x27>
c001feb7:	90                   	nop
c001feb8:	89 f1                	mov    ecx,esi
c001feba:	39 d8                	cmp    eax,ebx
c001febc:	76 0a                	jbe    c001fec8 <__umoddi3+0x64>
c001febe:	89 f0                	mov    eax,esi
c001fec0:	83 c4 1c             	add    esp,0x1c
c001fec3:	5b                   	pop    ebx
c001fec4:	5e                   	pop    esi
c001fec5:	5f                   	pop    edi
c001fec6:	5d                   	pop    ebp
c001fec7:	c3                   	ret    
c001fec8:	0f bd e8             	bsr    ebp,eax
c001fecb:	83 f5 1f             	xor    ebp,0x1f
c001fece:	75 1c                	jne    c001feec <__umoddi3+0x88>
c001fed0:	39 d8                	cmp    eax,ebx
c001fed2:	72 04                	jb     c001fed8 <__umoddi3+0x74>
c001fed4:	39 f7                	cmp    edi,esi
c001fed6:	77 08                	ja     c001fee0 <__umoddi3+0x7c>
c001fed8:	89 da                	mov    edx,ebx
c001feda:	29 fe                	sub    esi,edi
c001fedc:	19 c2                	sbb    edx,eax
c001fede:	89 f1                	mov    ecx,esi
c001fee0:	89 c8                	mov    eax,ecx
c001fee2:	83 c4 1c             	add    esp,0x1c
c001fee5:	5b                   	pop    ebx
c001fee6:	5e                   	pop    esi
c001fee7:	5f                   	pop    edi
c001fee8:	5d                   	pop    ebp
c001fee9:	c3                   	ret    
c001feea:	66 90                	xchg   ax,ax
c001feec:	ba 20 00 00 00       	mov    edx,0x20
c001fef1:	29 ea                	sub    edx,ebp
c001fef3:	89 e9                	mov    ecx,ebp
c001fef5:	d3 e0                	shl    eax,cl
c001fef7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fefb:	89 f8                	mov    eax,edi
c001fefd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ff01:	88 d1                	mov    cl,dl
c001ff03:	d3 e8                	shr    eax,cl
c001ff05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ff09:	09 c1                	or     ecx,eax
c001ff0b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ff0f:	89 e9                	mov    ecx,ebp
c001ff11:	d3 e7                	shl    edi,cl
c001ff13:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ff17:	89 d8                	mov    eax,ebx
c001ff19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ff1d:	88 d1                	mov    cl,dl
c001ff1f:	d3 e8                	shr    eax,cl
c001ff21:	89 c7                	mov    edi,eax
c001ff23:	89 e9                	mov    ecx,ebp
c001ff25:	d3 e3                	shl    ebx,cl
c001ff27:	89 f0                	mov    eax,esi
c001ff29:	88 d1                	mov    cl,dl
c001ff2b:	d3 e8                	shr    eax,cl
c001ff2d:	09 d8                	or     eax,ebx
c001ff2f:	89 e9                	mov    ecx,ebp
c001ff31:	d3 e6                	shl    esi,cl
c001ff33:	89 f3                	mov    ebx,esi
c001ff35:	89 fa                	mov    edx,edi
c001ff37:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ff3b:	89 d1                	mov    ecx,edx
c001ff3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ff41:	89 c6                	mov    esi,eax
c001ff43:	89 d7                	mov    edi,edx
c001ff45:	39 d1                	cmp    ecx,edx
c001ff47:	72 27                	jb     c001ff70 <__umoddi3+0x10c>
c001ff49:	74 21                	je     c001ff6c <__umoddi3+0x108>
c001ff4b:	89 ca                	mov    edx,ecx
c001ff4d:	29 f3                	sub    ebx,esi
c001ff4f:	19 fa                	sbb    edx,edi
c001ff51:	89 d0                	mov    eax,edx
c001ff53:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ff57:	d3 e0                	shl    eax,cl
c001ff59:	89 e9                	mov    ecx,ebp
c001ff5b:	d3 eb                	shr    ebx,cl
c001ff5d:	09 d8                	or     eax,ebx
c001ff5f:	d3 ea                	shr    edx,cl
c001ff61:	83 c4 1c             	add    esp,0x1c
c001ff64:	5b                   	pop    ebx
c001ff65:	5e                   	pop    esi
c001ff66:	5f                   	pop    edi
c001ff67:	5d                   	pop    ebp
c001ff68:	c3                   	ret    
c001ff69:	8d 76 00             	lea    esi,[esi+0x0]
c001ff6c:	39 c3                	cmp    ebx,eax
c001ff6e:	73 db                	jae    c001ff4b <__umoddi3+0xe7>
c001ff70:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ff74:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ff78:	89 d7                	mov    edi,edx
c001ff7a:	89 c6                	mov    esi,eax
c001ff7c:	eb cd                	jmp    c001ff4b <__umoddi3+0xe7>

Disassembly of section .init:

c001ff7e <_init>:
c001ff7e:	55                   	push   ebp
c001ff7f:	89 e5                	mov    ebp,esp
c001ff81:	e8 6e 01 fe ff       	call   c00000f4 <frame_dummy>
c001ff86:	e8 e5 fa ff ff       	call   c001fa70 <__do_global_ctors_aux>
c001ff8b:	5d                   	pop    ebp
c001ff8c:	c3                   	ret    

Disassembly of section .fini:

c001ff8d <_fini>:
c001ff8d:	55                   	push   ebp
c001ff8e:	89 e5                	mov    ebp,esp
c001ff90:	e8 ef 00 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ff95:	5d                   	pop    ebp
c001ff96:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ff98 <DriverlessDevice::~DriverlessDevice()>:
c001ff98:	ba 20 19 02 c0       	mov    edx,0xc0021920
c001ff9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa1:	89 10                	mov    DWORD PTR [eax],edx
c001ffa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa7:	50                   	push   eax
c001ffa8:	e8 97 8f fe ff       	call   c0008f44 <Device::~Device()>
c001ffad:	83 c4 04             	add    esp,0x4
c001ffb0:	90                   	nop
c001ffb1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ffb2 <DriverlessDevice::~DriverlessDevice()>:
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbc:	e8 d7 ff ff ff       	call   c001ff98 <DriverlessDevice::~DriverlessDevice()>
c001ffc1:	83 c4 10             	add    esp,0x10
c001ffc4:	83 ec 08             	sub    esp,0x8
c001ffc7:	68 58 01 00 00       	push   0x158
c001ffcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd0:	e8 2b c7 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001ffd5:	83 c4 10             	add    esp,0x10
c001ffd8:	83 c4 0c             	add    esp,0xc
c001ffdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ffdc <LinkedList<Device>::addElement(Device*)>:
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffe4:	75 10                	jne    c001fff6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ffe6:	83 ec 0c             	sub    esp,0xc
c001ffe9:	68 b4 18 02 c0       	push   0xc00218b4
c001ffee:	e8 cf ec fe ff       	call   c000ecc2 <KePanic(char const*)>
c001fff3:	83 c4 10             	add    esp,0x10
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	8b 00                	mov    eax,DWORD PTR [eax]
c001fffc:	85 c0                	test   eax,eax
c001fffe:	74 3a                	je     c002003a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020007:	85 c0                	test   eax,eax
c0020009:	74 2f                	je     c002003a <LinkedList<Device>::addElement(Device*)+0x5e>
c002000b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020012:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020016:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020024:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002002e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020038:	eb 68                	jmp    c00200a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c002003a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020040:	85 c0                	test   eax,eax
c0020042:	75 4e                	jne    c0020092 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002004b:	85 c0                	test   eax,eax
c002004d:	75 43                	jne    c0020092 <LinkedList<Device>::addElement(Device*)+0xb6>
c002004f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020053:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020057:	89 10                	mov    DWORD PTR [eax],edx
c0020059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020061:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002006b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020079:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002007c:	85 c0                	test   eax,eax
c002007e:	74 22                	je     c00200a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020080:	83 ec 0c             	sub    esp,0xc
c0020083:	68 d6 18 02 c0       	push   0xc00218d6
c0020088:	e8 35 ec fe ff       	call   c000ecc2 <KePanic(char const*)>
c002008d:	83 c4 10             	add    esp,0x10
c0020090:	eb 10                	jmp    c00200a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020092:	83 ec 0c             	sub    esp,0xc
c0020095:	68 e0 18 02 c0       	push   0xc00218e0
c002009a:	e8 23 ec fe ff       	call   c000ecc2 <KePanic(char const*)>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200a9:	8d 50 01             	lea    edx,[eax+0x1]
c00200ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200b3:	90                   	nop
c00200b4:	83 c4 0c             	add    esp,0xc
c00200b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00200b8 <LinkedList<Device>::LinkedList()>:
c00200b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200f8:	90                   	nop
c00200f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00200fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00200fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020100:	8b 00                	mov    eax,DWORD PTR [eax]
c0020102:	85 c0                	test   eax,eax
c0020104:	75 0e                	jne    c0020114 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002010d:	85 c0                	test   eax,eax
c002010f:	75 03                	jne    c0020114 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020111:	b0 01                	mov    al,0x1
c0020113:	c3                   	ret    
c0020114:	b0 00                	mov    al,0x0
c0020116:	90                   	nop
c0020117:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020118 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011c:	8b 00                	mov    eax,DWORD PTR [eax]
c002011e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020120 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020127:	8b 00                	mov    eax,DWORD PTR [eax]
c0020129:	85 c0                	test   eax,eax
c002012b:	75 17                	jne    c0020144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002012d:	83 ec 0c             	sub    esp,0xc
c0020130:	68 50 1b 02 c0       	push   0xc0021b50
c0020135:	e8 88 eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c002013a:	83 c4 10             	add    esp,0x10
c002013d:	e9 96 00 00 00       	jmp    c00201d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020142:	66 90                	xchg   ax,ax
c0020144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002014b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002014e:	85 c0                	test   eax,eax
c0020150:	0f 95 c0             	setne  al
c0020153:	0f b6 c0             	movzx  eax,al
c0020156:	85 c0                	test   eax,eax
c0020158:	74 12                	je     c002016c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002015a:	83 ec 0c             	sub    esp,0xc
c002015d:	68 9b 1b 02 c0       	push   0xc0021b9b
c0020162:	e8 5b eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	66 90                	xchg   ax,ax
c002016c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020170:	8b 00                	mov    eax,DWORD PTR [eax]
c0020172:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020175:	85 c0                	test   eax,eax
c0020177:	0f 94 c0             	sete   al
c002017a:	0f b6 c0             	movzx  eax,al
c002017d:	85 c0                	test   eax,eax
c002017f:	74 33                	je     c00201b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020185:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002018b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002019d:	83 f8 01             	cmp    eax,0x1
c00201a0:	74 22                	je     c00201c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	68 74 1b 02 c0       	push   0xc0021b74
c00201aa:	e8 13 eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	eb 10                	jmp    c00201c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00201b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00201bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c1:	89 10                	mov    DWORD PTR [eax],edx
c00201c3:	90                   	nop
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00201cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201d5:	8d 76 00             	lea    esi,[esi+0x0]
c00201d8:	83 c4 0c             	add    esp,0xc
c00201db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00201dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201e4:	75 12                	jne    c00201f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	68 b4 18 02 c0       	push   0xc00218b4
c00201ee:	e8 cf ea fe ff       	call   c000ecc2 <KePanic(char const*)>
c00201f3:	83 c4 10             	add    esp,0x10
c00201f6:	66 90                	xchg   ax,ax
c00201f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00201fe:	85 c0                	test   eax,eax
c0020200:	74 36                	je     c0020238 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020209:	85 c0                	test   eax,eax
c002020b:	74 2b                	je     c0020238 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002020d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020211:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020214:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020218:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002021b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020223:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002022d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020234:	eb 6a                	jmp    c00202a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020236:	66 90                	xchg   ax,ax
c0020238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023c:	8b 00                	mov    eax,DWORD PTR [eax]
c002023e:	85 c0                	test   eax,eax
c0020240:	75 4e                	jne    c0020290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020249:	85 c0                	test   eax,eax
c002024b:	75 43                	jne    c0020290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002024d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020251:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020255:	89 10                	mov    DWORD PTR [eax],edx
c0020257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002025f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020269:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020277:	85 c0                	test   eax,eax
c0020279:	74 25                	je     c00202a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002027b:	83 ec 0c             	sub    esp,0xc
c002027e:	68 d6 18 02 c0       	push   0xc00218d6
c0020283:	e8 3a ea fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020288:	83 c4 10             	add    esp,0x10
c002028b:	eb 13                	jmp    c00202a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002028d:	8d 76 00             	lea    esi,[esi+0x0]
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	68 e0 18 02 c0       	push   0xc00218e0
c0020298:	e8 25 ea fe ff       	call   c000ecc2 <KePanic(char const*)>
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202a7:	8d 50 01             	lea    edx,[eax+0x1]
c00202aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00202b1:	90                   	nop
c00202b2:	83 c4 0c             	add    esp,0xc
c00202b5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00202b8 <ACPI::~ACPI()>:
c00202b8:	83 ec 0c             	sub    esp,0xc
c00202bb:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c00202c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c4:	89 10                	mov    DWORD PTR [eax],edx
c00202c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ca:	83 ec 0c             	sub    esp,0xc
c00202cd:	50                   	push   eax
c00202ce:	e8 71 8c fe ff       	call   c0008f44 <Device::~Device()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	90                   	nop
c00202d7:	83 c4 0c             	add    esp,0xc
c00202da:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00202dc <ACPI::~ACPI()>:
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	83 ec 0c             	sub    esp,0xc
c00202e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e6:	e8 cd ff ff ff       	call   c00202b8 <ACPI::~ACPI()>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	83 ec 08             	sub    esp,0x8
c00202f1:	68 64 12 00 00       	push   0x1264
c00202f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fa:	e8 01 c4 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	83 c4 0c             	add    esp,0xc
c0020305:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020308 <LinkedList<Device>::~LinkedList()>:
c0020308:	90                   	nop
c0020309:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002030c <LinkedList<Device>::isEmpty()>:
c002030c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020310:	8b 00                	mov    eax,DWORD PTR [eax]
c0020312:	85 c0                	test   eax,eax
c0020314:	75 0e                	jne    c0020324 <LinkedList<Device>::isEmpty()+0x18>
c0020316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002031a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002031d:	85 c0                	test   eax,eax
c002031f:	75 03                	jne    c0020324 <LinkedList<Device>::isEmpty()+0x18>
c0020321:	b0 01                	mov    al,0x1
c0020323:	c3                   	ret    
c0020324:	b0 00                	mov    al,0x0
c0020326:	90                   	nop
c0020327:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020328 <LinkedList<Device>::getFirstElement()>:
c0020328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002032c:	8b 00                	mov    eax,DWORD PTR [eax]
c002032e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020330 <LinkedList<Device>::removeFirst()>:
c0020330:	83 ec 0c             	sub    esp,0xc
c0020333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020337:	8b 00                	mov    eax,DWORD PTR [eax]
c0020339:	85 c0                	test   eax,eax
c002033b:	75 17                	jne    c0020354 <LinkedList<Device>::removeFirst()+0x24>
c002033d:	83 ec 0c             	sub    esp,0xc
c0020340:	68 50 1b 02 c0       	push   0xc0021b50
c0020345:	e8 78 e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c002034a:	83 c4 10             	add    esp,0x10
c002034d:	e9 92 00 00 00       	jmp    c00203e4 <LinkedList<Device>::removeFirst()+0xb4>
c0020352:	66 90                	xchg   ax,ax
c0020354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002035b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020361:	85 c0                	test   eax,eax
c0020363:	74 13                	je     c0020378 <LinkedList<Device>::removeFirst()+0x48>
c0020365:	83 ec 0c             	sub    esp,0xc
c0020368:	68 9b 1b 02 c0       	push   0xc0021b9b
c002036d:	e8 50 e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020372:	83 c4 10             	add    esp,0x10
c0020375:	8d 76 00             	lea    esi,[esi+0x0]
c0020378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037c:	8b 00                	mov    eax,DWORD PTR [eax]
c002037e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020384:	85 c0                	test   eax,eax
c0020386:	75 34                	jne    c00203bc <LinkedList<Device>::removeFirst()+0x8c>
c0020388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020396:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002039d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203a4:	83 f8 01             	cmp    eax,0x1
c00203a7:	74 27                	je     c00203d0 <LinkedList<Device>::removeFirst()+0xa0>
c00203a9:	83 ec 0c             	sub    esp,0xc
c00203ac:	68 74 1b 02 c0       	push   0xc0021b74
c00203b1:	e8 0c e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00203b6:	83 c4 10             	add    esp,0x10
c00203b9:	eb 15                	jmp    c00203d0 <LinkedList<Device>::removeFirst()+0xa0>
c00203bb:	90                   	nop
c00203bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00203c2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00203c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203cc:	89 10                	mov    DWORD PTR [eax],edx
c00203ce:	66 90                	xchg   ax,ax
c00203d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203d7:	8d 50 ff             	lea    edx,[eax-0x1]
c00203da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203e1:	8d 76 00             	lea    esi,[esi+0x0]
c00203e4:	83 c4 0c             	add    esp,0xc
c00203e7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00203e8 <Computer::~Computer()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 41 8b fe ff       	call   c0008f44 <Device::~Device()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002040c <Computer::~Computer()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <Computer::~Computer()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 6c 01 00 00       	push   0x16c
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 d1 c2 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020436 <idleCommon()>:
c0020436:	83 ec 0c             	sub    esp,0xc
c0020439:	fa                   	cli    
c002043a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020440:	e8 6b 50 ff ff       	call   c00154b0 <schedule()>
c0020445:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c002044c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0020453:	75 01                	jne    c0020456 <idleCommon()+0x20>
c0020455:	fb                   	sti    
c0020456:	83 c4 0c             	add    esp,0xc
c0020459:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002045a <LinkedList<UnixFile>::~LinkedList()>:
c002045a:	90                   	nop
c002045b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002045c <LinkedList<UnixFile>::LinkedList()>:
c002045c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020460:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002046a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020471:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020475:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002047c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020480:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002048a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020495:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002049c:	90                   	nop
c002049d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002049e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002049e:	83 ec 0c             	sub    esp,0xc
c00204a1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00204a6:	75 10                	jne    c00204b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00204a8:	83 ec 0c             	sub    esp,0xc
c00204ab:	68 b4 18 02 c0       	push   0xc00218b4
c00204b0:	e8 0d e8 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00204b5:	83 c4 10             	add    esp,0x10
c00204b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00204be:	85 c0                	test   eax,eax
c00204c0:	74 34                	je     c00204f6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00204c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204c9:	85 c0                	test   eax,eax
c00204cb:	74 29                	je     c00204f6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00204cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204d8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00204db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00204e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00204f4:	eb 65                	jmp    c002055b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00204f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00204fc:	85 c0                	test   eax,eax
c00204fe:	75 4b                	jne    c002054b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020507:	85 c0                	test   eax,eax
c0020509:	75 40                	jne    c002054b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002050f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020513:	89 10                	mov    DWORD PTR [eax],edx
c0020515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020519:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002051d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020527:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020532:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020535:	85 c0                	test   eax,eax
c0020537:	74 22                	je     c002055b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020539:	83 ec 0c             	sub    esp,0xc
c002053c:	68 d6 18 02 c0       	push   0xc00218d6
c0020541:	e8 7c e7 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020546:	83 c4 10             	add    esp,0x10
c0020549:	eb 10                	jmp    c002055b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002054b:	83 ec 0c             	sub    esp,0xc
c002054e:	68 e0 18 02 c0       	push   0xc00218e0
c0020553:	e8 6a e7 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020558:	83 c4 10             	add    esp,0x10
c002055b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020562:	8d 50 01             	lea    edx,[eax+0x1]
c0020565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020569:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002056c:	90                   	nop
c002056d:	83 c4 0c             	add    esp,0xc
c0020570:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020572 <LinkedList<UnixFile>::getFirstElement()>:
c0020572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020576:	8b 00                	mov    eax,DWORD PTR [eax]
c0020578:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002057a <LinkedList<UnixFile>::removeFirst()>:
c002057a:	83 ec 0c             	sub    esp,0xc
c002057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020581:	8b 00                	mov    eax,DWORD PTR [eax]
c0020583:	85 c0                	test   eax,eax
c0020585:	75 12                	jne    c0020599 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020587:	83 ec 0c             	sub    esp,0xc
c002058a:	68 50 1b 02 c0       	push   0xc0021b50
c002058f:	e8 2e e7 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020594:	83 c4 10             	add    esp,0x10
c0020597:	eb 7e                	jmp    c0020617 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205a3:	85 c0                	test   eax,eax
c00205a5:	74 10                	je     c00205b7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00205a7:	83 ec 0c             	sub    esp,0xc
c00205aa:	68 9b 1b 02 c0       	push   0xc0021b9b
c00205af:	e8 0e e7 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00205b4:	83 c4 10             	add    esp,0x10
c00205b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00205bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205c0:	85 c0                	test   eax,eax
c00205c2:	75 33                	jne    c00205f7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00205c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00205ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00205d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205e0:	83 f8 01             	cmp    eax,0x1
c00205e3:	74 21                	je     c0020606 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00205e5:	83 ec 0c             	sub    esp,0xc
c00205e8:	68 74 1b 02 c0       	push   0xc0021b74
c00205ed:	e8 d0 e6 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00205f2:	83 c4 10             	add    esp,0x10
c00205f5:	eb 0f                	jmp    c0020606 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00205f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00205fd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020604:	89 10                	mov    DWORD PTR [eax],edx
c0020606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002060d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020617:	83 c4 0c             	add    esp,0xc
c002061a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002061c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002061c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020620:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020623:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020628:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002062b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002062c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002062c:	90                   	nop
c002062d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020630 <ThreadControlBlock::ThreadControlBlock()>:
c0020630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020634:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002063b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002063f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002064a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020655:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002065c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020660:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020667:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002066b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002066f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020673:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020677:	90                   	nop
c0020678:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002067c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002067c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002068a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020695:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002069c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00206b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00206bc:	90                   	nop
c00206bd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00206be <CPU::~CPU()>:
c00206be:	83 ec 0c             	sub    esp,0xc
c00206c1:	ba 14 33 02 c0       	mov    edx,0xc0023314
c00206c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ca:	89 10                	mov    DWORD PTR [eax],edx
c00206cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d0:	83 ec 0c             	sub    esp,0xc
c00206d3:	50                   	push   eax
c00206d4:	e8 6b 88 fe ff       	call   c0008f44 <Device::~Device()>
c00206d9:	83 c4 10             	add    esp,0x10
c00206dc:	90                   	nop
c00206dd:	83 c4 0c             	add    esp,0xc
c00206e0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00206e2 <CPU::~CPU()>:
c00206e2:	83 ec 0c             	sub    esp,0xc
c00206e5:	83 ec 0c             	sub    esp,0xc
c00206e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ec:	e8 cd ff ff ff       	call   c00206be <CPU::~CPU()>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	83 ec 08             	sub    esp,0x8
c00206f7:	68 78 11 00 00       	push   0x1178
c00206fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020700:	e8 fb bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020705:	83 c4 10             	add    esp,0x10
c0020708:	83 c4 0c             	add    esp,0xc
c002070b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002070c <PCI::~PCI()>:
c002070c:	83 ec 0c             	sub    esp,0xc
c002070f:	ba 78 38 02 c0       	mov    edx,0xc0023878
c0020714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020718:	89 10                	mov    DWORD PTR [eax],edx
c002071a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002071e:	83 ec 0c             	sub    esp,0xc
c0020721:	50                   	push   eax
c0020722:	e8 fd 81 fe ff       	call   c0008924 <Bus::~Bus()>
c0020727:	83 c4 10             	add    esp,0x10
c002072a:	90                   	nop
c002072b:	83 c4 0c             	add    esp,0xc
c002072e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020730 <PCI::~PCI()>:
c0020730:	83 ec 0c             	sub    esp,0xc
c0020733:	83 ec 0c             	sub    esp,0xc
c0020736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073a:	e8 cd ff ff ff       	call   c002070c <PCI::~PCI()>
c002073f:	83 c4 10             	add    esp,0x10
c0020742:	83 ec 08             	sub    esp,0x8
c0020745:	68 5c 01 00 00       	push   0x15c
c002074a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074e:	e8 ad bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	83 c4 0c             	add    esp,0xc
c0020759:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002075a <IDE::~IDE()>:
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	ba c8 39 02 c0       	mov    edx,0xc00239c8
c0020762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020766:	89 10                	mov    DWORD PTR [eax],edx
c0020768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076c:	83 ec 0c             	sub    esp,0xc
c002076f:	50                   	push   eax
c0020770:	e8 5f 8c fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020775:	83 c4 10             	add    esp,0x10
c0020778:	90                   	nop
c0020779:	83 c4 0c             	add    esp,0xc
c002077c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002077e <IDE::~IDE()>:
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	83 ec 0c             	sub    esp,0xc
c0020784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020788:	e8 cd ff ff ff       	call   c002075a <IDE::~IDE()>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	83 ec 08             	sub    esp,0x8
c0020793:	68 70 02 00 00       	push   0x270
c0020798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002079c:	e8 5f bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00207a1:	83 c4 10             	add    esp,0x10
c00207a4:	83 c4 0c             	add    esp,0xc
c00207a7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00207a8 <SATABus::~SATABus()>:
c00207a8:	83 ec 0c             	sub    esp,0xc
c00207ab:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c00207b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b4:	89 10                	mov    DWORD PTR [eax],edx
c00207b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ba:	83 ec 0c             	sub    esp,0xc
c00207bd:	50                   	push   eax
c00207be:	e8 11 8c fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c00207c3:	83 c4 10             	add    esp,0x10
c00207c6:	90                   	nop
c00207c7:	83 c4 0c             	add    esp,0xc
c00207ca:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00207cc <SATABus::~SATABus()>:
c00207cc:	83 ec 0c             	sub    esp,0xc
c00207cf:	83 ec 0c             	sub    esp,0xc
c00207d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207d6:	e8 cd ff ff ff       	call   c00207a8 <SATABus::~SATABus()>
c00207db:	83 c4 10             	add    esp,0x10
c00207de:	83 ec 08             	sub    esp,0x8
c00207e1:	68 64 01 00 00       	push   0x164
c00207e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207ea:	e8 11 bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00207ef:	83 c4 10             	add    esp,0x10
c00207f2:	83 c4 0c             	add    esp,0xc
c00207f5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00207f6 <ATA::~ATA()>:
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	ba 00 3b 02 c0       	mov    edx,0xc0023b00
c00207fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020802:	89 10                	mov    DWORD PTR [eax],edx
c0020804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020808:	83 ec 0c             	sub    esp,0xc
c002080b:	50                   	push   eax
c002080c:	e8 a5 8c fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	90                   	nop
c0020815:	83 c4 0c             	add    esp,0xc
c0020818:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002081a <ATA::~ATA()>:
c002081a:	83 ec 0c             	sub    esp,0xc
c002081d:	83 ec 0c             	sub    esp,0xc
c0020820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020824:	e8 cd ff ff ff       	call   c00207f6 <ATA::~ATA()>
c0020829:	83 c4 10             	add    esp,0x10
c002082c:	83 ec 08             	sub    esp,0x8
c002082f:	68 8c 01 00 00       	push   0x18c
c0020834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020838:	e8 c3 be fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002083d:	83 c4 10             	add    esp,0x10
c0020840:	83 c4 0c             	add    esp,0xc
c0020843:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020844 <ATAPI::~ATAPI()>:
c0020844:	83 ec 0c             	sub    esp,0xc
c0020847:	ba 48 3b 02 c0       	mov    edx,0xc0023b48
c002084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020850:	89 10                	mov    DWORD PTR [eax],edx
c0020852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020856:	83 ec 0c             	sub    esp,0xc
c0020859:	50                   	push   eax
c002085a:	e8 57 8c fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002085f:	83 c4 10             	add    esp,0x10
c0020862:	90                   	nop
c0020863:	83 c4 0c             	add    esp,0xc
c0020866:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020868 <ATAPI::~ATAPI()>:
c0020868:	83 ec 0c             	sub    esp,0xc
c002086b:	83 ec 0c             	sub    esp,0xc
c002086e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020872:	e8 cd ff ff ff       	call   c0020844 <ATAPI::~ATAPI()>
c0020877:	83 c4 10             	add    esp,0x10
c002087a:	83 ec 08             	sub    esp,0x8
c002087d:	68 84 01 00 00       	push   0x184
c0020882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020886:	e8 75 be fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002088b:	83 c4 10             	add    esp,0x10
c002088e:	83 c4 0c             	add    esp,0xc
c0020891:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020892 <SATA::~SATA()>:
c0020892:	83 ec 0c             	sub    esp,0xc
c0020895:	ba 08 3c 02 c0       	mov    edx,0xc0023c08
c002089a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089e:	89 10                	mov    DWORD PTR [eax],edx
c00208a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a4:	83 ec 0c             	sub    esp,0xc
c00208a7:	50                   	push   eax
c00208a8:	e8 09 8c fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00208ad:	83 c4 10             	add    esp,0x10
c00208b0:	90                   	nop
c00208b1:	83 c4 0c             	add    esp,0xc
c00208b4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00208b6 <SATA::~SATA()>:
c00208b6:	83 ec 0c             	sub    esp,0xc
c00208b9:	83 ec 0c             	sub    esp,0xc
c00208bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c0:	e8 cd ff ff ff       	call   c0020892 <SATA::~SATA()>
c00208c5:	83 c4 10             	add    esp,0x10
c00208c8:	83 ec 08             	sub    esp,0x8
c00208cb:	68 7c 01 00 00       	push   0x17c
c00208d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d4:	e8 27 be fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00208d9:	83 c4 10             	add    esp,0x10
c00208dc:	83 c4 0c             	add    esp,0xc
c00208df:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00208e0 <SATAPI::~SATAPI()>:
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	ba 2c 3d 02 c0       	mov    edx,0xc0023d2c
c00208e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ec:	89 10                	mov    DWORD PTR [eax],edx
c00208ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	50                   	push   eax
c00208f6:	e8 bb 8b fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00208fb:	83 c4 10             	add    esp,0x10
c00208fe:	90                   	nop
c00208ff:	83 c4 0c             	add    esp,0xc
c0020902:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020904 <SATAPI::~SATAPI()>:
c0020904:	83 ec 0c             	sub    esp,0xc
c0020907:	83 ec 0c             	sub    esp,0xc
c002090a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002090e:	e8 cd ff ff ff       	call   c00208e0 <SATAPI::~SATAPI()>
c0020913:	83 c4 10             	add    esp,0x10
c0020916:	83 ec 08             	sub    esp,0x8
c0020919:	68 84 01 00 00       	push   0x184
c002091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020922:	e8 d9 bd fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020927:	83 c4 10             	add    esp,0x10
c002092a:	83 c4 0c             	add    esp,0xc
c002092d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002092e <IOAPIC::~IOAPIC()>:
c002092e:	83 ec 0c             	sub    esp,0xc
c0020931:	ba 8c 3d 02 c0       	mov    edx,0xc0023d8c
c0020936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093a:	89 10                	mov    DWORD PTR [eax],edx
c002093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	50                   	push   eax
c0020944:	e8 fb 85 fe ff       	call   c0008f44 <Device::~Device()>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	90                   	nop
c002094d:	83 c4 0c             	add    esp,0xc
c0020950:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020952 <IOAPIC::~IOAPIC()>:
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	83 ec 0c             	sub    esp,0xc
c0020958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002095c:	e8 cd ff ff ff       	call   c002092e <IOAPIC::~IOAPIC()>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	83 ec 08             	sub    esp,0x8
c0020967:	68 68 01 00 00       	push   0x168
c002096c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020970:	e8 8b bd fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	83 c4 0c             	add    esp,0xc
c002097b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002097c <APICTimer::~APICTimer()>:
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	ba d4 3d 02 c0       	mov    edx,0xc0023dd4
c0020984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020988:	89 10                	mov    DWORD PTR [eax],edx
c002098a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098e:	83 ec 0c             	sub    esp,0xc
c0020991:	50                   	push   eax
c0020992:	e8 21 9d fe ff       	call   c000a6b8 <Timer::~Timer()>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	90                   	nop
c002099b:	83 c4 0c             	add    esp,0xc
c002099e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00209a0 <APICTimer::~APICTimer()>:
c00209a0:	83 ec 0c             	sub    esp,0xc
c00209a3:	83 ec 0c             	sub    esp,0xc
c00209a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209aa:	e8 cd ff ff ff       	call   c002097c <APICTimer::~APICTimer()>
c00209af:	83 c4 10             	add    esp,0x10
c00209b2:	83 ec 08             	sub    esp,0x8
c00209b5:	68 60 01 00 00       	push   0x160
c00209ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209be:	e8 3d bd fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00209c3:	83 c4 10             	add    esp,0x10
c00209c6:	83 c4 0c             	add    esp,0xc
c00209c9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00209cc <PIT::~PIT()>:
c00209cc:	83 ec 0c             	sub    esp,0xc
c00209cf:	ba 24 3e 02 c0       	mov    edx,0xc0023e24
c00209d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d8:	89 10                	mov    DWORD PTR [eax],edx
c00209da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209de:	83 ec 0c             	sub    esp,0xc
c00209e1:	50                   	push   eax
c00209e2:	e8 d1 9c fe ff       	call   c000a6b8 <Timer::~Timer()>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	90                   	nop
c00209eb:	83 c4 0c             	add    esp,0xc
c00209ee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00209f0 <PIT::~PIT()>:
c00209f0:	83 ec 0c             	sub    esp,0xc
c00209f3:	83 ec 0c             	sub    esp,0xc
c00209f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209fa:	e8 cd ff ff ff       	call   c00209cc <PIT::~PIT()>
c00209ff:	83 c4 10             	add    esp,0x10
c0020a02:	83 ec 08             	sub    esp,0x8
c0020a05:	68 5c 01 00 00       	push   0x15c
c0020a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a0e:	e8 ed bc fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	83 c4 0c             	add    esp,0xc
c0020a19:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 5b 25 02 c0       	mov    esi,0xc002255b
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 77 25 02 c0       	mov    esi,0xc0022577
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
